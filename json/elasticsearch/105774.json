[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testEqualsAndHashcode() throws Exception {\n        Map<String, Object> sourceAndMetadata = RandomDocumentPicks.randomSource(random());\n        int numFields = randomIntBetween(1, IngestDocument.MetaData.values().length);\n        for (int i = 0; i < numFields; i++) {\n            sourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10));\n        }\n        Map<String, Object> ingestMetadata = new HashMap<>();\n        numFields = randomIntBetween(1, 5);\n        for (int i = 0; i < numFields; i++) {\n            ingestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10));\n        }\n        IngestDocument ingestDocument = new IngestDocument(sourceAndMetadata, ingestMetadata);\n\n        boolean changed = false;\n        Map<String, Object> otherSourceAndMetadata;\n        if (randomBoolean()) {\n            otherSourceAndMetadata = RandomDocumentPicks.randomSource(random());\n            changed = true;\n        } else {\n            otherSourceAndMetadata = new HashMap<>(sourceAndMetadata);\n        }\n        if (randomBoolean()) {\n            numFields = randomIntBetween(1, IngestDocument.MetaData.values().length);\n            for (int i = 0; i < numFields; i++) {\n                otherSourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10));\n            }\n            changed = true;\n        }\n\n        Map<String, Object> otherIngestMetadata;\n        if (randomBoolean()) {\n            otherIngestMetadata = new HashMap<>();\n            numFields = randomIntBetween(1, 5);\n            for (int i = 0; i < numFields; i++) {\n                otherIngestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10));\n            }\n            changed = true;\n        } else {\n            otherIngestMetadata = Collections.unmodifiableMap(ingestMetadata);\n        }\n\n        IngestDocument otherIngestDocument = new IngestDocument(otherSourceAndMetadata, otherIngestMetadata);\n        if (changed) {\n            assertThat(ingestDocument, not(equalTo(otherIngestDocument)));\n            assertThat(otherIngestDocument, not(equalTo(ingestDocument)));\n        } else {\n            assertThat(ingestDocument, equalTo(otherIngestDocument));\n            assertThat(otherIngestDocument, equalTo(ingestDocument));\n            assertThat(ingestDocument.hashCode(), equalTo(otherIngestDocument.hashCode()));\n            IngestDocument thirdIngestDocument = new IngestDocument(Collections.unmodifiableMap(sourceAndMetadata),\n                    Collections.unmodifiableMap(ingestMetadata));\n            assertThat(thirdIngestDocument, equalTo(ingestDocument));\n            assertThat(ingestDocument, equalTo(thirdIngestDocument));\n            assertThat(ingestDocument.hashCode(), equalTo(thirdIngestDocument.hashCode()));\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":971,"groupId":"5513","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEqualsAndHashcode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/9423ddff7523a84a8c8f6092cc0ae2e6880722.src","preCode":"    public void testEqualsAndHashcode() throws Exception {\n        Map<String, Object> sourceAndMetadata = RandomDocumentPicks.randomSource(random());\n        int numFields = randomIntBetween(1, IngestDocument.MetaData.values().length);\n        for (int i = 0; i < numFields; i++) {\n            sourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10));\n        }\n        Map<String, Object> ingestMetadata = new HashMap<>();\n        numFields = randomIntBetween(1, 5);\n        for (int i = 0; i < numFields; i++) {\n            ingestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10));\n        }\n        IngestDocument ingestDocument = new IngestDocument(sourceAndMetadata, ingestMetadata);\n\n        boolean changed = false;\n        Map<String, Object> otherSourceAndMetadata;\n        if (randomBoolean()) {\n            otherSourceAndMetadata = RandomDocumentPicks.randomSource(random());\n            changed = true;\n        } else {\n            otherSourceAndMetadata = new HashMap<>(sourceAndMetadata);\n        }\n        if (randomBoolean()) {\n            numFields = randomIntBetween(1, IngestDocument.MetaData.values().length);\n            for (int i = 0; i < numFields; i++) {\n                otherSourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10));\n            }\n            changed = true;\n        }\n\n        Map<String, Object> otherIngestMetadata;\n        if (randomBoolean()) {\n            otherIngestMetadata = new HashMap<>();\n            numFields = randomIntBetween(1, 5);\n            for (int i = 0; i < numFields; i++) {\n                otherIngestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10));\n            }\n            changed = true;\n        } else {\n            otherIngestMetadata = Collections.unmodifiableMap(ingestMetadata);\n        }\n\n        IngestDocument otherIngestDocument = new IngestDocument(otherSourceAndMetadata, otherIngestMetadata);\n        if (changed) {\n            assertThat(ingestDocument, not(equalTo(otherIngestDocument)));\n            assertThat(otherIngestDocument, not(equalTo(ingestDocument)));\n        } else {\n            assertThat(ingestDocument, equalTo(otherIngestDocument));\n            assertThat(otherIngestDocument, equalTo(ingestDocument));\n            assertThat(ingestDocument.hashCode(), equalTo(otherIngestDocument.hashCode()));\n            IngestDocument thirdIngestDocument = new IngestDocument(Collections.unmodifiableMap(sourceAndMetadata),\n                    Collections.unmodifiableMap(ingestMetadata));\n            assertThat(thirdIngestDocument, equalTo(ingestDocument));\n            assertThat(ingestDocument, equalTo(thirdIngestDocument));\n            assertThat(ingestDocument.hashCode(), equalTo(thirdIngestDocument.hashCode()));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/IngestDocumentTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":916,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testSerialization() throws IOException {\n        Map<String, Object> sourceAndMetadata = RandomDocumentPicks.randomSource(random());\n        int numFields = randomIntBetween(1, IngestDocument.MetaData.values().length);\n        for (int i = 0; i < numFields; i++) {\n            sourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10));\n        }\n        Map<String, Object> ingestMetadata = new HashMap<>();\n        numFields = randomIntBetween(1, 5);\n        for (int i = 0; i < numFields; i++) {\n            ingestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10));\n        }\n        WriteableIngestDocument writeableIngestDocument = new WriteableIngestDocument(new IngestDocument(sourceAndMetadata, ingestMetadata));\n\n        BytesStreamOutput out = new BytesStreamOutput();\n        writeableIngestDocument.writeTo(out);\n        StreamInput streamInput = out.bytes().streamInput();\n        WriteableIngestDocument otherWriteableIngestDocument = new WriteableIngestDocument(streamInput);\n        assertIngestDocument(otherWriteableIngestDocument.getIngestDocument(), writeableIngestDocument.getIngestDocument());\n    }\n","date":"2018-04-26 03:22:53","endLine":119,"groupId":"63354","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/8e0f544c4581b086b492894e7e9a57b08018e3.src","preCode":"    public void testSerialization() throws IOException {\n        Map<String, Object> sourceAndMetadata = RandomDocumentPicks.randomSource(random());\n        int numFields = randomIntBetween(1, IngestDocument.MetaData.values().length);\n        for (int i = 0; i < numFields; i++) {\n            sourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10));\n        }\n        Map<String, Object> ingestMetadata = new HashMap<>();\n        numFields = randomIntBetween(1, 5);\n        for (int i = 0; i < numFields; i++) {\n            ingestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10));\n        }\n        WriteableIngestDocument writeableIngestDocument = new WriteableIngestDocument(new IngestDocument(sourceAndMetadata, ingestMetadata));\n\n        BytesStreamOutput out = new BytesStreamOutput();\n        writeableIngestDocument.writeTo(out);\n        StreamInput streamInput = out.bytes().streamInput();\n        WriteableIngestDocument otherWriteableIngestDocument = new WriteableIngestDocument(streamInput);\n        assertIngestDocument(otherWriteableIngestDocument.getIngestDocument(), writeableIngestDocument.getIngestDocument());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/WriteableIngestDocumentTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testEqualsAndHashcode() throws Exception {\n        Map<String, Object> sourceAndMetadata = RandomDocumentPicks.randomSource(random());\n        int numFields = randomIntBetween(1, IngestDocument.Metadata.values().length);\n        for (int i = 0; i < numFields; i++) {\n            sourceAndMetadata.put(randomFrom(IngestDocument.Metadata.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10));\n        }\n        Map<String, Object> ingestMetadata = new HashMap<>();\n        numFields = randomIntBetween(1, 5);\n        for (int i = 0; i < numFields; i++) {\n            ingestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10));\n        }\n        IngestDocument ingestDocument = new IngestDocument(sourceAndMetadata, ingestMetadata);\n\n        boolean changed = false;\n        Map<String, Object> otherSourceAndMetadata;\n        if (randomBoolean()) {\n            otherSourceAndMetadata = RandomDocumentPicks.randomSource(random());\n            changed = true;\n        } else {\n            otherSourceAndMetadata = new HashMap<>(sourceAndMetadata);\n        }\n        if (randomBoolean()) {\n            numFields = randomIntBetween(1, IngestDocument.Metadata.values().length);\n            for (int i = 0; i < numFields; i++) {\n                otherSourceAndMetadata.put(randomFrom(IngestDocument.Metadata.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10));\n            }\n            changed = true;\n        }\n\n        Map<String, Object> otherIngestMetadata;\n        if (randomBoolean()) {\n            otherIngestMetadata = new HashMap<>();\n            numFields = randomIntBetween(1, 5);\n            for (int i = 0; i < numFields; i++) {\n                otherIngestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10));\n            }\n            changed = true;\n        } else {\n            otherIngestMetadata = Collections.unmodifiableMap(ingestMetadata);\n        }\n\n        IngestDocument otherIngestDocument = new IngestDocument(otherSourceAndMetadata, otherIngestMetadata);\n        if (changed) {\n            assertThat(ingestDocument, not(equalTo(otherIngestDocument)));\n            assertThat(otherIngestDocument, not(equalTo(ingestDocument)));\n        } else {\n            assertThat(ingestDocument, equalTo(otherIngestDocument));\n            assertThat(otherIngestDocument, equalTo(ingestDocument));\n            assertThat(ingestDocument.hashCode(), equalTo(otherIngestDocument.hashCode()));\n            IngestDocument thirdIngestDocument = new IngestDocument(Collections.unmodifiableMap(sourceAndMetadata),\n                    Collections.unmodifiableMap(ingestMetadata));\n            assertThat(thirdIngestDocument, equalTo(ingestDocument));\n            assertThat(ingestDocument, equalTo(thirdIngestDocument));\n            assertThat(ingestDocument.hashCode(), equalTo(thirdIngestDocument.hashCode()));\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":968,"groupId":"105774","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEqualsAndHashcode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/24/6f92a3cb9b1482005fe8300bbc7240f084650a.src","preCode":"    public void testEqualsAndHashcode() throws Exception {\n        Map<String, Object> sourceAndMetadata = RandomDocumentPicks.randomSource(random());\n        int numFields = randomIntBetween(1, IngestDocument.MetaData.values().length);\n        for (int i = 0; i < numFields; i++) {\n            sourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10));\n        }\n        Map<String, Object> ingestMetadata = new HashMap<>();\n        numFields = randomIntBetween(1, 5);\n        for (int i = 0; i < numFields; i++) {\n            ingestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10));\n        }\n        IngestDocument ingestDocument = new IngestDocument(sourceAndMetadata, ingestMetadata);\n\n        boolean changed = false;\n        Map<String, Object> otherSourceAndMetadata;\n        if (randomBoolean()) {\n            otherSourceAndMetadata = RandomDocumentPicks.randomSource(random());\n            changed = true;\n        } else {\n            otherSourceAndMetadata = new HashMap<>(sourceAndMetadata);\n        }\n        if (randomBoolean()) {\n            numFields = randomIntBetween(1, IngestDocument.MetaData.values().length);\n            for (int i = 0; i < numFields; i++) {\n                otherSourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10));\n            }\n            changed = true;\n        }\n\n        Map<String, Object> otherIngestMetadata;\n        if (randomBoolean()) {\n            otherIngestMetadata = new HashMap<>();\n            numFields = randomIntBetween(1, 5);\n            for (int i = 0; i < numFields; i++) {\n                otherIngestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10));\n            }\n            changed = true;\n        } else {\n            otherIngestMetadata = Collections.unmodifiableMap(ingestMetadata);\n        }\n\n        IngestDocument otherIngestDocument = new IngestDocument(otherSourceAndMetadata, otherIngestMetadata);\n        if (changed) {\n            assertThat(ingestDocument, not(equalTo(otherIngestDocument)));\n            assertThat(otherIngestDocument, not(equalTo(ingestDocument)));\n        } else {\n            assertThat(ingestDocument, equalTo(otherIngestDocument));\n            assertThat(otherIngestDocument, equalTo(ingestDocument));\n            assertThat(ingestDocument.hashCode(), equalTo(otherIngestDocument.hashCode()));\n            IngestDocument thirdIngestDocument = new IngestDocument(Collections.unmodifiableMap(sourceAndMetadata),\n                    Collections.unmodifiableMap(ingestMetadata));\n            assertThat(thirdIngestDocument, equalTo(ingestDocument));\n            assertThat(ingestDocument, equalTo(thirdIngestDocument));\n            assertThat(ingestDocument.hashCode(), equalTo(thirdIngestDocument.hashCode()));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/IngestDocumentTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":913,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testSerialization() throws IOException {\n        Map<String, Object> sourceAndMetadata = RandomDocumentPicks.randomSource(random());\n        int numFields = randomIntBetween(1, IngestDocument.Metadata.values().length);\n        for (int i = 0; i < numFields; i++) {\n            sourceAndMetadata.put(randomFrom(IngestDocument.Metadata.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10));\n        }\n        Map<String, Object> ingestMetadata = new HashMap<>();\n        numFields = randomIntBetween(1, 5);\n        for (int i = 0; i < numFields; i++) {\n            ingestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10));\n        }\n        WriteableIngestDocument writeableIngestDocument =\n                new WriteableIngestDocument(new IngestDocument(sourceAndMetadata, ingestMetadata));\n\n        BytesStreamOutput out = new BytesStreamOutput();\n        writeableIngestDocument.writeTo(out);\n        StreamInput streamInput = out.bytes().streamInput();\n        WriteableIngestDocument otherWriteableIngestDocument = new WriteableIngestDocument(streamInput);\n        assertIngestDocument(otherWriteableIngestDocument.getIngestDocument(), writeableIngestDocument.getIngestDocument());\n    }\n","date":"2020-04-01 03:52:01","endLine":127,"groupId":"105774","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/07/aabf4a608c52d6bb023b2b1c6ebfea459e8d88.src","preCode":"    public void testSerialization() throws IOException {\n        Map<String, Object> sourceAndMetadata = RandomDocumentPicks.randomSource(random());\n        int numFields = randomIntBetween(1, IngestDocument.MetaData.values().length);\n        for (int i = 0; i < numFields; i++) {\n            sourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(), randomAlphaOfLengthBetween(5, 10));\n        }\n        Map<String, Object> ingestMetadata = new HashMap<>();\n        numFields = randomIntBetween(1, 5);\n        for (int i = 0; i < numFields; i++) {\n            ingestMetadata.put(randomAlphaOfLengthBetween(5, 10), randomAlphaOfLengthBetween(5, 10));\n        }\n        WriteableIngestDocument writeableIngestDocument =\n                new WriteableIngestDocument(new IngestDocument(sourceAndMetadata, ingestMetadata));\n\n        BytesStreamOutput out = new BytesStreamOutput();\n        writeableIngestDocument.writeTo(out);\n        StreamInput streamInput = out.bytes().streamInput();\n        WriteableIngestDocument otherWriteableIngestDocument = new WriteableIngestDocument(streamInput);\n        assertIngestDocument(otherWriteableIngestDocument.getIngestDocument(), writeableIngestDocument.getIngestDocument());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/WriteableIngestDocumentTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"}]
