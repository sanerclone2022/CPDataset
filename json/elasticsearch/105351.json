[{"authorTime":"2019-12-19 01:27:16","codes":[{"authorDate":"2019-12-17 00:14:45","commitOrder":2,"curCode":"    public void testCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\").field(\"number\");\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(2.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","date":"2019-12-17 00:14:45","endLine":650,"groupId":"133","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/2536a76544a8bfd0b6cba2ecbedb0f63c53b71.src","preCode":"    public void testCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\").field(\"number\");\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(2.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":626,"status":"NB"},{"authorDate":"2019-12-19 01:27:16","commitOrder":2,"curCode":"    public void testScriptCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, INVERT_SCRIPT, Collections.emptyMap()));;\n\n        MinAggregationBuilder nonDeterministicAggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));;\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), nonDeterministicAggregationBuilder, fieldType);\n                assertTrue(min.getValue() >= 0.0 && min.getValue() <= 1.0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertFalse(queryShardContext.isCacheable());\n\n                indexSearcher = newSearcher(indexReader, true, true);\n\n                min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(-7.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","date":"2019-12-19 01:27:16","endLine":696,"groupId":"133","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testScriptCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/b65dfc62d741c162f2da13a66f50947f7837ea.src","preCode":"    public void testScriptCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, INVERT_SCRIPT, Collections.emptyMap()));;\n\n        MinAggregationBuilder nonDeterministicAggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));;\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), nonDeterministicAggregationBuilder, fieldType);\n                assertTrue(min.getValue() >= 0.0 && min.getValue() <= 1.0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertFalse(queryShardContext.isCacheable());\n\n                indexSearcher = newSearcher(indexReader, true, true);\n\n                min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(-7.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":658,"status":"B"}],"commitId":"779462596b2914307b05284d2f577f13f8eb1eff","commitMessage":"@@@Scripting: Cache script results if deterministic (#50106)\n\nCache results from queries that use scripts if they use only\ndeterministic API calls.  Nondeterministic API calls are marked in the\nwhitelist with the `@nondeterministic` annotation.  Examples are\n`Math.random()` and `new Date()`.\n\nRefs: #49466","date":"2019-12-19 01:27:16","modifiedFileCount":"45","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2020-03-27 03:01:07","codes":[{"authorDate":"2019-12-17 00:14:45","commitOrder":3,"curCode":"    public void testCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\").field(\"number\");\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(2.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","date":"2019-12-17 00:14:45","endLine":650,"groupId":"133","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/2536a76544a8bfd0b6cba2ecbedb0f63c53b71.src","preCode":"    public void testCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\").field(\"number\");\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(2.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":626,"status":"N"},{"authorDate":"2020-03-27 03:01:07","commitOrder":3,"curCode":"    public void testScriptCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, INVERT_SCRIPT, Collections.emptyMap()));\n\n        MinAggregationBuilder nonDeterministicAggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), nonDeterministicAggregationBuilder, fieldType);\n                assertTrue(min.getValue() >= 0.0 && min.getValue() <= 1.0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertFalse(queryShardContext.isCacheable());\n\n                indexSearcher = newSearcher(indexReader, true, true);\n\n                min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(-7.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","date":"2020-03-27 03:01:07","endLine":715,"groupId":"133","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testScriptCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/4bf3a13de4f3dec7b32d370d1254b77eb68fc1.src","preCode":"    public void testScriptCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, INVERT_SCRIPT, Collections.emptyMap()));;\n\n        MinAggregationBuilder nonDeterministicAggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));;\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), nonDeterministicAggregationBuilder, fieldType);\n                assertTrue(min.getValue() >= 0.0 && min.getValue() <= 1.0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertFalse(queryShardContext.isCacheable());\n\n                indexSearcher = newSearcher(indexReader, true, true);\n\n                min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(-7.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":677,"status":"M"}],"commitId":"a90c1de8745681356a6516f4f22a8c40f71f6b12","commitMessage":"@@@Add ValuesSource Registry and associated logic (#54281)\n\n* Remove ValuesSourceType argument to ValuesSourceAggregationBuilder (#48638)\n\n* ValuesSourceRegistry Prototype (#48758)\n\n* Remove generics from ValuesSource related classes (#49606)\n\n* fix percentile aggregation tests (#50712)\n\n* Basic thread safety for ValuesSourceRegistry (#50340)\n\n* Remove target value type from ValuesSourceAggregationBuilder (#49943)\n\n* Cleanup default values source type (#50992)\n\n* CoreValuesSourceType no longer implements Writable (#51276)\n\n* Remove genereics & hard coded ValuesSource references from Matrix Stats (#51131)\n\n* Put values source types on fields (#51503)\n\n* Remove VST Any (#51539)\n\n* Rewire terms agg to use new VS registry (#51182)\n\nAlso adds some basic AggTestCases for untested code\npaths (and boilerplate for future tests once the IT are\nconverted over)\n\n* Wire Cardinality aggregation to work with the ValuesSourceRegistry (#51337)\n\n* Wire Percentiles aggregator into new VS framework (#51639)\n\nThis required a bit of a refactor to percentiles itself.  Before. \nthe Builder would switch on the chosen algo to generate an\nalgo-specific factory.  This doesn't work (or at least.  would be\ndifficult) in the new VS framework.\n\nThis refactor consolidates both factories together and introduces\na PercentilesConfig object to act as a standardized way to pass\nalgo-specific parameters through the factory.  This object\nis then used when deciding which kind of aggregator to create\n\nNote: CoreValuesSourceType.HISTOGRAM still lives in core.  and will\nbe moved in a subsequent PR.\n\n* Remove generics and target value type from MultiVSAB (#51647)\n\n* fix checkstyle after merge (#52008)\n\n* Plumb ValuesSourceRegistry through to QuerySearchContext (#51710)\n\n* Convert RareTerms to new VS registry (#52166)\n\n* Wire up Value Count (#52225)\n\n* Wire up Max & Min aggregations (#52219)\n\n* ValuesSource refactoring: Wire up Sum aggregation (#52571)\n\n* ValuesSource refactoring: Wire up SigTerms aggregation (#52590)\n\n* Soft immutability for VSConfig (#52729)\n\n* Unmute testSupportedFieldTypes.  fix Percentiles/Ranks/Terms tests (#52734)\n\nAlso fixes Percentiles which was incorrectly specified to only accept\nnumeric.  but in fact also accepts Boolean and Date (because those are\nnumeric on master - thanks `testSupportedFieldTypes` for catching it!)\n\n* VS refactoring: Wire up stats aggregation (#52891)\n\n* ValuesSource refactoring: Wire up string_stats aggregation (#52875)\n\n* VS refactoring: Wire up median (MAD) aggregation (#52945)\n\n* fix valuesourcetype issue with constant_keyword field (#53041)\n\nthis commit implements `getValuesSourceType` for\nthe ConstantKeyword field type.\n\nmaster was merged into feature/extensible-values-source\nintroducing a new field type that was not implementing\n`getValuesSourceType`.\n\n* ValuesSource refactoring: Wire up Avg aggregation (#52752)\n\n* Wire PercentileRanks aggregator into new VS framework  (#51693)\n\n* Add a VSConfig resolver for aggregations not using the registry (#53038)\n\n* Vs refactor wire up ranges and date ranges (#52918)\n\n* Wire up geo_bounds aggregation to ValuesSourceRegistry (#53034)\n\nThis commit updates the geo_bounds aggregation to depend\non registering itself in the ValuesSourceRegistry\n\nrelates #42949.\n\n* VS refactoring: convert Boxplot to new registry (#53132)\n\n* Wire-up geotile_grid and geohash_grid to ValuesSourceRegistry (#53037)\n\nThis commit updates the geo*_grid aggregations to depend\non registering itself in the ValuesSourceRegistry\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Wire-up geo_centroid agg to ValuesSourceRegistry (#53040)\n\nThis commit updates the geo_centroid aggregation to depend\non registering itself in the ValuesSourceRegistry.\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Fix type tests for Missing aggregation (#53501)\n\n* ValuesSource Refactor: move histo VSType into XPack module (#53298)\n\n- Introduces a new API (`getBareAggregatorRegistrar()`) which allows plugins to register aggregations against existing agg definitions defined in Core.\n- This moves the histogram VSType over to XPack where it belongs. `getHistogramValues()` still remains as a Core concept\n- Moves the histo-specific bits over to xpack (e.g. the actual aggregator logic). This requires extra boilerplate since we need to create a new \"Analytics\" Percentile/Rank aggregators to deal with the histo field. Doubly-so since percentiles/ranks are extra boiler-plate'y... should be much lighter for other aggs\n\n* Wire up DateHistogram to the ValuesSourceRegistry (#53484)\n\n* Vs refactor parser cleanup (#53198)\n\nCo-authored-by: Zachary Tong <polyfractal@elastic.co>\nCo-authored-by: Zachary Tong <zach@elastic.co>\nCo-authored-by: Christos Soulios <1561376+csoulios@users.noreply.github.com>\nCo-authored-by: Tal Levy <JubBoy333@gmail.com>","date":"2020-03-27 03:01:07","modifiedFileCount":"214","status":"M","submitter":"Mark Tozzi"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    public void testCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"number\", NumberFieldMapper.NumberType.INTEGER);\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\").field(\"number\");\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(2.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":652,"groupId":"133","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/91639f5ac7ec53c1cdad0e648bcd305b8a2fc8.src","preCode":"    public void testCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\").field(\"number\");\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(2.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    public void testScriptCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"number\", NumberFieldMapper.NumberType.INTEGER);\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, INVERT_SCRIPT, Collections.emptyMap()));\n\n        MinAggregationBuilder nonDeterministicAggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), nonDeterministicAggregationBuilder, fieldType);\n                assertTrue(min.getValue() >= 0.0 && min.getValue() <= 1.0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertFalse(queryShardContext.isCacheable());\n\n                indexSearcher = newSearcher(indexReader, true, true);\n\n                min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(-7.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":691,"groupId":"133","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testScriptCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/91639f5ac7ec53c1cdad0e648bcd305b8a2fc8.src","preCode":"    public void testScriptCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"number\");\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, INVERT_SCRIPT, Collections.emptyMap()));\n\n        MinAggregationBuilder nonDeterministicAggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), nonDeterministicAggregationBuilder, fieldType);\n                assertTrue(min.getValue() >= 0.0 && min.getValue() <= 1.0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertFalse(queryShardContext.isCacheable());\n\n                indexSearcher = newSearcher(indexReader, true, true);\n\n                min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(-7.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-12-08 23:22:34","codes":[{"authorDate":"2020-12-08 23:22:34","commitOrder":5,"curCode":"    public void testCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"number\", NumberFieldMapper.NumberType.INTEGER);\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\").field(\"number\");\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                AggregationContext context = createAggregationContext(indexSearcher, new MatchAllDocsQuery(), fieldType);\n                createAggregator(aggregationBuilder, context);\n                assertTrue(context.isCacheable());\n            }\n        }\n    }\n","date":"2020-12-08 23:22:34","endLine":624,"groupId":"105351","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f8/33f9d8bc3bcca620a4cf6b4bf2b79afb7fc571.src","preCode":"    public void testCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"number\", NumberFieldMapper.NumberType.INTEGER);\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\").field(\"number\");\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(2.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":603,"status":"M"},{"authorDate":"2020-12-08 23:22:34","commitOrder":5,"curCode":"    public void testScriptCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"number\", NumberFieldMapper.NumberType.INTEGER);\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, INVERT_SCRIPT, Collections.emptyMap()));\n\n        MinAggregationBuilder nonDeterministicAggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                AggregationContext context = createAggregationContext(indexSearcher, new MatchAllDocsQuery(), fieldType);\n                createAggregator(nonDeterministicAggregationBuilder, context);\n                assertFalse(context.isCacheable());\n\n                context = createAggregationContext(indexSearcher, new MatchAllDocsQuery(), fieldType);\n                createAggregator(aggregationBuilder, context);\n                assertTrue(context.isCacheable());\n            }\n        }\n    }\n","date":"2020-12-08 23:22:34","endLine":657,"groupId":"105351","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testScriptCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f8/33f9d8bc3bcca620a4cf6b4bf2b79afb7fc571.src","preCode":"    public void testScriptCaching() throws IOException {\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"number\", NumberFieldMapper.NumberType.INTEGER);\n        MinAggregationBuilder aggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, INVERT_SCRIPT, Collections.emptyMap()));\n\n        MinAggregationBuilder nonDeterministicAggregationBuilder = new MinAggregationBuilder(\"min\")\n            .field(\"number\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        try (Directory directory = newDirectory()) {\n            RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 7)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            indexWriter.close();\n\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                InternalMin min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), nonDeterministicAggregationBuilder, fieldType);\n                assertTrue(min.getValue() >= 0.0 && min.getValue() <= 1.0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertFalse(queryShardContext.isCacheable());\n\n                indexSearcher = newSearcher(indexReader, true, true);\n\n                min = searchAndReduce(indexSearcher, new MatchAllDocsQuery(), aggregationBuilder, fieldType);\n                assertEquals(-7.0, min.getValue(), 0);\n                assertTrue(AggregationInspectionHelper.hasValue(min));\n\n                assertTrue(queryShardContext.isCacheable());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MinAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":626,"status":"M"}],"commitId":"3e45318d87958118be7688f316234b1afb28765b","commitMessage":"@@@Remove BigArrays from SearchContext (#65981)\n\nWe've been trying to shrink the big.  mutable `SearchContext`. I'm doing\nmy part by removing `BigArrays` from it. Doing that required reworking\nhow we test `Aggregator`s to not need `SearchContext`. So I did that\ntoo. Mostly. `top_hits` still needs a `SubSearchContext` which we can\nstill build.  but it is now quite contained.\n\n","date":"2020-12-08 23:22:34","modifiedFileCount":"21","status":"M","submitter":"Nik Everett"}]
