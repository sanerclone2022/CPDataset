[{"authorTime":"2018-04-27 06:15:45","codes":[{"authorDate":"2018-04-27 06:15:45","commitOrder":2,"curCode":"    public void testRefreshTaskIsUpdated() throws IOException {\n        IndexService indexService = createIndex(\"test\", Settings.EMPTY);\n        IndexService.AsyncRefreshTask refreshTask = indexService.getRefreshTask();\n        assertEquals(1000, refreshTask.getInterval().millis());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), -1)).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n        assertFalse(refreshTask.isScheduled());\n        assertFalse(indexService.getRefreshTask().mustReschedule());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(),  \"100ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(100, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(200, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertFalse(refreshTask.isClosed());\n        assertEquals(200, refreshTask.getInterval().millis());\n        indexService.close(\"simon says\", false);\n        assertFalse(refreshTask.isScheduled());\n        assertTrue(refreshTask.isClosed());\n    }\n","date":"2018-04-27 06:15:45","endLine":173,"groupId":"68149","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRefreshTaskIsUpdated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/fa440d96ac2287a78c156b5ae558b30c064936.src","preCode":"    public void testRefreshTaskIsUpdated() throws IOException {\n        IndexService indexService = createIndex(\"test\", Settings.EMPTY);\n        IndexService.AsyncRefreshTask refreshTask = indexService.getRefreshTask();\n        assertEquals(1000, refreshTask.getInterval().millis());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), -1)).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n        assertFalse(refreshTask.isScheduled());\n        assertFalse(indexService.getRefreshTask().mustReschedule());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(),  \"100ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(100, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(200, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertFalse(refreshTask.isClosed());\n        assertEquals(200, refreshTask.getInterval().millis());\n        indexService.close(\"simon says\", false);\n        assertFalse(refreshTask.isScheduled());\n        assertTrue(refreshTask.isClosed());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"MB"},{"authorDate":"2018-04-27 06:15:45","commitOrder":2,"curCode":"    public void testFsyncTaskIsRunning() throws IOException {\n        Settings settings = Settings.builder()\n            .put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC).build();\n        IndexService indexService = createIndex(\"test\", settings);\n        IndexService.AsyncTranslogFSync fsyncTask = indexService.getFsyncTask();\n        assertNotNull(fsyncTask);\n        assertEquals(5000, fsyncTask.getInterval().millis());\n        assertTrue(fsyncTask.mustReschedule());\n        assertTrue(fsyncTask.isScheduled());\n\n        indexService.close(\"simon says\", false);\n        assertFalse(fsyncTask.isScheduled());\n        assertTrue(fsyncTask.isClosed());\n\n        indexService = createIndex(\"test1\", Settings.EMPTY);\n        assertNull(indexService.getFsyncTask());\n    }\n","date":"2018-04-27 06:15:45","endLine":191,"groupId":"10649","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFsyncTaskIsRunning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/fa440d96ac2287a78c156b5ae558b30c064936.src","preCode":"    public void testFsyncTaskIsRunning() throws IOException {\n        Settings settings = Settings.builder()\n            .put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC).build();\n        IndexService indexService = createIndex(\"test\", settings);\n        IndexService.AsyncTranslogFSync fsyncTask = indexService.getFsyncTask();\n        assertNotNull(fsyncTask);\n        assertEquals(5000, fsyncTask.getInterval().millis());\n        assertTrue(fsyncTask.mustReschedule());\n        assertTrue(fsyncTask.isScheduled());\n\n        indexService.close(\"simon says\", false);\n        assertFalse(fsyncTask.isScheduled());\n        assertTrue(fsyncTask.isClosed());\n\n        indexService = createIndex(\"test1\", Settings.EMPTY);\n        assertNull(indexService.getFsyncTask());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"MB"}],"commitId":"053e9fb234ee7380f86272cb23b843994ed18f39","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-04-27 06:15:45","modifiedFileCount":"54","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-04-27 06:15:45","codes":[{"authorDate":"2018-12-13 17:15:27","commitOrder":3,"curCode":"    public void testRefreshTaskIsUpdated() throws IOException {\n        IndexService indexService = createIndex(\"test\", Settings.EMPTY);\n        IndexService.AsyncRefreshTask refreshTask = indexService.getRefreshTask();\n        assertEquals(1000, refreshTask.getInterval().millis());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), -1)).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n        assertFalse(refreshTask.isScheduled());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(),  \"100ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(100, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(200, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertFalse(refreshTask.isClosed());\n        assertEquals(200, refreshTask.getInterval().millis());\n        indexService.close(\"simon says\", false);\n        assertFalse(refreshTask.isScheduled());\n        assertTrue(refreshTask.isClosed());\n    }\n","date":"2018-12-13 17:15:27","endLine":173,"groupId":"68149","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRefreshTaskIsUpdated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a4/7d4db2a2579124318a69147c4b149c27084627.src","preCode":"    public void testRefreshTaskIsUpdated() throws IOException {\n        IndexService indexService = createIndex(\"test\", Settings.EMPTY);\n        IndexService.AsyncRefreshTask refreshTask = indexService.getRefreshTask();\n        assertEquals(1000, refreshTask.getInterval().millis());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), -1)).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n        assertFalse(refreshTask.isScheduled());\n        assertFalse(indexService.getRefreshTask().mustReschedule());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(),  \"100ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(100, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(200, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertFalse(refreshTask.isClosed());\n        assertEquals(200, refreshTask.getInterval().millis());\n        indexService.close(\"simon says\", false);\n        assertFalse(refreshTask.isScheduled());\n        assertTrue(refreshTask.isClosed());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2018-04-27 06:15:45","commitOrder":3,"curCode":"    public void testFsyncTaskIsRunning() throws IOException {\n        Settings settings = Settings.builder()\n            .put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC).build();\n        IndexService indexService = createIndex(\"test\", settings);\n        IndexService.AsyncTranslogFSync fsyncTask = indexService.getFsyncTask();\n        assertNotNull(fsyncTask);\n        assertEquals(5000, fsyncTask.getInterval().millis());\n        assertTrue(fsyncTask.mustReschedule());\n        assertTrue(fsyncTask.isScheduled());\n\n        indexService.close(\"simon says\", false);\n        assertFalse(fsyncTask.isScheduled());\n        assertTrue(fsyncTask.isClosed());\n\n        indexService = createIndex(\"test1\", Settings.EMPTY);\n        assertNull(indexService.getFsyncTask());\n    }\n","date":"2018-04-27 06:15:45","endLine":191,"groupId":"10649","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFsyncTaskIsRunning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/fa440d96ac2287a78c156b5ae558b30c064936.src","preCode":"    public void testFsyncTaskIsRunning() throws IOException {\n        Settings settings = Settings.builder()\n            .put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC).build();\n        IndexService indexService = createIndex(\"test\", settings);\n        IndexService.AsyncTranslogFSync fsyncTask = indexService.getFsyncTask();\n        assertNotNull(fsyncTask);\n        assertEquals(5000, fsyncTask.getInterval().millis());\n        assertTrue(fsyncTask.mustReschedule());\n        assertTrue(fsyncTask.isScheduled());\n\n        indexService.close(\"simon says\", false);\n        assertFalse(fsyncTask.isScheduled());\n        assertTrue(fsyncTask.isClosed());\n\n        indexService = createIndex(\"test1\", Settings.EMPTY);\n        assertNull(indexService.getFsyncTask());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"N"}],"commitId":"13cb0fb98b12ca3e058382186f8175ab1db84717","commitMessage":"@@@Periodically try to reassign unassigned persistent tasks (#36069)\n\nPreviously persistent task assignment was checked in the\nfollowing situations:\n\n- Persistent tasks are changed\n- A node joins or leaves the cluster\n- The routing table is changed\n- Custom metadata in the cluster state is changed\n- A new master node is elected\n\nHowever.  there could be situations when a persistent\ntask that could not be assigned to a node could become\nassignable due to some other change.  such as memory\nusage on the nodes.\n\nThis change adds a timed recheck of persistent task\nassignment to account for such situations.  The timer\nis suspended while checks triggered by cluster state\nchanges are in-flight to avoid adding burden to an\nalready busy cluster.\n\nCloses #35792","date":"2018-12-13 17:15:27","modifiedFileCount":"9","status":"M","submitter":"David Roberts"},{"authorTime":"2019-03-01 01:35:33","codes":[{"authorDate":"2019-03-01 01:35:33","commitOrder":4,"curCode":"    public void testRefreshTaskIsUpdated() throws Exception {\n        IndexService indexService = createIndex(\"test\", Settings.EMPTY);\n        IndexService.AsyncRefreshTask refreshTask = indexService.getRefreshTask();\n        assertEquals(1000, refreshTask.getInterval().millis());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), -1)).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n        assertFalse(refreshTask.isScheduled());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(),  \"100ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(100, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(200, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertFalse(refreshTask.isClosed());\n        assertEquals(200, refreshTask.getInterval().millis());\n\n        \r\n        final Index index = indexService.index();\n        assertAcked(client().admin().indices().prepareClose(index.getName()));\n        awaitBusy(() -> getInstanceFromNode(IndicesService.class).hasIndex(index));\n\n        final IndexService closedIndexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(index);\n        assertNotSame(indexService, closedIndexService);\n        assertNotSame(refreshTask, closedIndexService.getRefreshTask());\n        assertFalse(closedIndexService.getRefreshTask().mustReschedule());\n        assertFalse(closedIndexService.getRefreshTask().isClosed());\n        assertEquals(200, closedIndexService.getRefreshTask().getInterval().millis());\n\n        \r\n        assertAcked(client().admin().indices().prepareOpen(index.getName()));\n        awaitBusy(() -> getInstanceFromNode(IndicesService.class).hasIndex(index));\n        indexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(index);\n        assertNotSame(closedIndexService, indexService);\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertFalse(refreshTask.isClosed());\n\n        indexService.close(\"simon says\", false);\n        assertFalse(refreshTask.isScheduled());\n        assertTrue(refreshTask.isClosed());\n    }\n","date":"2019-03-01 01:35:33","endLine":225,"groupId":"68149","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRefreshTaskIsUpdated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/e554818c0205d3921974fc822f2e69fc486101.src","preCode":"    public void testRefreshTaskIsUpdated() throws IOException {\n        IndexService indexService = createIndex(\"test\", Settings.EMPTY);\n        IndexService.AsyncRefreshTask refreshTask = indexService.getRefreshTask();\n        assertEquals(1000, refreshTask.getInterval().millis());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), -1)).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n        assertFalse(refreshTask.isScheduled());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(),  \"100ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(100, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(200, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertFalse(refreshTask.isClosed());\n        assertEquals(200, refreshTask.getInterval().millis());\n        indexService.close(\"simon says\", false);\n        assertFalse(refreshTask.isScheduled());\n        assertTrue(refreshTask.isClosed());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2019-03-01 01:35:33","commitOrder":4,"curCode":"    public void testFsyncTaskIsRunning() throws Exception {\n        Settings settings = Settings.builder()\n            .put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC).build();\n        IndexService indexService = createIndex(\"test\", settings);\n        IndexService.AsyncTranslogFSync fsyncTask = indexService.getFsyncTask();\n        assertNotNull(fsyncTask);\n        assertEquals(5000, fsyncTask.getInterval().millis());\n        assertTrue(fsyncTask.mustReschedule());\n        assertTrue(fsyncTask.isScheduled());\n\n        \r\n        final Index index = indexService.index();\n        assertAcked(client().admin().indices().prepareClose(index.getName()));\n        awaitBusy(() -> getInstanceFromNode(IndicesService.class).hasIndex(index));\n\n        final IndexService closedIndexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(index);\n        assertNotSame(indexService, closedIndexService);\n        assertNotSame(fsyncTask, closedIndexService.getFsyncTask());\n        assertFalse(closedIndexService.getFsyncTask().mustReschedule());\n        assertFalse(closedIndexService.getFsyncTask().isClosed());\n        assertEquals(5000, closedIndexService.getFsyncTask().getInterval().millis());\n\n        \r\n        assertAcked(client().admin().indices().prepareOpen(index.getName()));\n        awaitBusy(() -> getInstanceFromNode(IndicesService.class).hasIndex(index));\n        indexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(index);\n        assertNotSame(closedIndexService, indexService);\n        fsyncTask = indexService.getFsyncTask();\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(fsyncTask.isScheduled());\n        assertFalse(fsyncTask.isClosed());\n\n        indexService.close(\"simon says\", false);\n        assertFalse(fsyncTask.isScheduled());\n        assertTrue(fsyncTask.isClosed());\n\n        indexService = createIndex(\"test1\", Settings.EMPTY);\n        assertNull(indexService.getFsyncTask());\n    }\n","date":"2019-03-01 01:35:33","endLine":265,"groupId":"68149","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFsyncTaskIsRunning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/e554818c0205d3921974fc822f2e69fc486101.src","preCode":"    public void testFsyncTaskIsRunning() throws IOException {\n        Settings settings = Settings.builder()\n            .put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC).build();\n        IndexService indexService = createIndex(\"test\", settings);\n        IndexService.AsyncTranslogFSync fsyncTask = indexService.getFsyncTask();\n        assertNotNull(fsyncTask);\n        assertEquals(5000, fsyncTask.getInterval().millis());\n        assertTrue(fsyncTask.mustReschedule());\n        assertTrue(fsyncTask.isScheduled());\n\n        indexService.close(\"simon says\", false);\n        assertFalse(fsyncTask.isScheduled());\n        assertTrue(fsyncTask.isClosed());\n\n        indexService = createIndex(\"test1\", Settings.EMPTY);\n        assertNull(indexService.getFsyncTask());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"}],"commitId":"309a3e4ccbcdfcd830621a92d6e67af929123605","commitMessage":"@@@Add support for replicating closed indices (#39499)\n\nBefore this change.  closed indexes were simply not replicated. It was therefore \npossible to close an index and then decommission a data node without knowing \nthat this data node contained shards of the closed index.  potentially leading to \ndata loss. Shards of closed indices were not completely taken into account when \nbalancing the shards within the cluster.  or automatically replicated through shard \ncopies.  and they were not easily movable from node A to node B using APIs like \nCluster Reroute without being fully reopened and closed again.\n\nThis commit changes the logic executed when closing an index.  so that its shards \nare not just removed and forgotten but are instead reinitialized and reallocated on \ndata nodes using an engine implementation which does not allow searching or\n indexing.  which has a low memory overhead (compared with searchable/indexable \nopened shards) and which allows shards to be recovered from peer or promoted \nas primaries when needed.\n\nThis new closing logic is built on top of the new Close Index API introduced in \n6.7.0 (#37359). Some pre-closing sanity checks are executed on the shards before \nclosing them.  and closing an index on a 8.0 cluster will reinitialize the index shards \nand therefore impact the cluster health.\n\nSome APIs have been adapted to make them work with closed indices:\n- Cluster Health API\n- Cluster Reroute API\n- Cluster Allocation Explain API\n- Recovery API\n- Cat Indices\n- Cat Shards\n- Cat Health\n- Cat Recovery\n\nThis commit contains all the following changes (most recent first):\n* c6c42a1 Adapt NoOpEngineTests after #39006\n* 3f9993d Wait for shards to be active after closing indices (#38854)\n* 5e7a428 Adapt the Cluster Health API to closed indices (#39364)\n* 3e61939 Adapt CloseFollowerIndexIT for replicated closed indices (#38767)\n* 71f5c34 Recover closed indices after a full cluster restart (#39249)\n* 4db7fd9 Adapt the Recovery API for closed indices (#38421)\n* 4fd1bb2 Adapt more tests suites to closed indices (#39186)\n* 0519016 Add replica to primary promotion test for closed indices (#39110)\n* b756f6c Test the Cluster Shard Allocation Explain API with closed indices (#38631)\n* c484c66 Remove index routing table of closed indices in mixed versions clusters (#38955)\n* 00f1828 Mute CloseFollowerIndexIT.testCloseAndReopenFollowerIndex()\n* e845b0a Do not schedule Refresh/Translog/GlobalCheckpoint tasks for closed indices (#38329)\n* cf9a015 Adapt testIndexCanChangeCustomDataPath for replicated closed indices (#38327)\n* b9becdd Adapt testPendingTasks() for replicated closed indices (#38326)\n* 02cc730 Allow shards of closed indices to be replicated as regular shards (#38024)\n* e53a9be Fix compilation error in IndexShardIT after merge with master\n* cae4155 Relax NoOpEngine constraints (#37413)\n* 54d110b [RCI] Adapt NoOpEngine to latest FrozenEngine changes\n* c63fd69 [RCI] Add NoOpEngine for closed indices (#33903)\n\nRelates to #33888","date":"2019-03-01 01:35:33","modifiedFileCount":"57","status":"M","submitter":"Tanguy Leroux"},{"authorTime":"2019-09-25 18:46:12","codes":[{"authorDate":"2019-09-25 18:46:12","commitOrder":5,"curCode":"    public void testRefreshTaskIsUpdated() throws Exception {\n        IndexService indexService = createIndex(\"test\", Settings.EMPTY);\n        IndexService.AsyncRefreshTask refreshTask = indexService.getRefreshTask();\n        assertEquals(1000, refreshTask.getInterval().millis());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), -1)).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n        assertFalse(refreshTask.isScheduled());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(),  \"100ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(100, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(200, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertFalse(refreshTask.isClosed());\n        assertEquals(200, refreshTask.getInterval().millis());\n\n        \r\n        final Index index = indexService.index();\n        assertAcked(client().admin().indices().prepareClose(index.getName()));\n        assertBusy(() -> assertTrue(\"Index not found: \" + index.getName(), getInstanceFromNode(IndicesService.class).hasIndex(index)));\n\n        final IndexService closedIndexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(index);\n        assertNotSame(indexService, closedIndexService);\n        assertNotSame(refreshTask, closedIndexService.getRefreshTask());\n        assertFalse(closedIndexService.getRefreshTask().mustReschedule());\n        assertFalse(closedIndexService.getRefreshTask().isClosed());\n        assertEquals(200, closedIndexService.getRefreshTask().getInterval().millis());\n\n        \r\n        assertAcked(client().admin().indices().prepareOpen(index.getName()));\n        assertBusy(() -> assertTrue(\"Index not found: \" + index.getName(), getInstanceFromNode(IndicesService.class).hasIndex(index)));\n        indexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(index);\n        assertNotSame(closedIndexService, indexService);\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertFalse(refreshTask.isClosed());\n\n        indexService.close(\"simon says\", false);\n        assertFalse(refreshTask.isScheduled());\n        assertTrue(refreshTask.isClosed());\n    }\n","date":"2019-09-25 18:46:12","endLine":229,"groupId":"103267","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRefreshTaskIsUpdated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/54/602837f706a6a0042a65c86c328e743168b238.src","preCode":"    public void testRefreshTaskIsUpdated() throws Exception {\n        IndexService indexService = createIndex(\"test\", Settings.EMPTY);\n        IndexService.AsyncRefreshTask refreshTask = indexService.getRefreshTask();\n        assertEquals(1000, refreshTask.getInterval().millis());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), -1)).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n        assertFalse(refreshTask.isScheduled());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(),  \"100ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(100, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertNotSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(refreshTask.isClosed());\n\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(refreshTask.mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertEquals(200, refreshTask.getInterval().millis());\n\n        \r\n        client().admin().indices().prepareUpdateSettings(\"test\")\n            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n        assertSame(refreshTask, indexService.getRefreshTask());\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertFalse(refreshTask.isClosed());\n        assertEquals(200, refreshTask.getInterval().millis());\n\n        \r\n        final Index index = indexService.index();\n        assertAcked(client().admin().indices().prepareClose(index.getName()));\n        awaitBusy(() -> getInstanceFromNode(IndicesService.class).hasIndex(index));\n\n        final IndexService closedIndexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(index);\n        assertNotSame(indexService, closedIndexService);\n        assertNotSame(refreshTask, closedIndexService.getRefreshTask());\n        assertFalse(closedIndexService.getRefreshTask().mustReschedule());\n        assertFalse(closedIndexService.getRefreshTask().isClosed());\n        assertEquals(200, closedIndexService.getRefreshTask().getInterval().millis());\n\n        \r\n        assertAcked(client().admin().indices().prepareOpen(index.getName()));\n        awaitBusy(() -> getInstanceFromNode(IndicesService.class).hasIndex(index));\n        indexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(index);\n        assertNotSame(closedIndexService, indexService);\n        refreshTask = indexService.getRefreshTask();\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(refreshTask.isScheduled());\n        assertFalse(refreshTask.isClosed());\n\n        indexService.close(\"simon says\", false);\n        assertFalse(refreshTask.isScheduled());\n        assertTrue(refreshTask.isClosed());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2019-09-25 18:46:12","commitOrder":5,"curCode":"    public void testFsyncTaskIsRunning() throws Exception {\n        Settings settings = Settings.builder()\n            .put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC).build();\n        IndexService indexService = createIndex(\"test\", settings);\n        IndexService.AsyncTranslogFSync fsyncTask = indexService.getFsyncTask();\n        assertNotNull(fsyncTask);\n        assertEquals(5000, fsyncTask.getInterval().millis());\n        assertTrue(fsyncTask.mustReschedule());\n        assertTrue(fsyncTask.isScheduled());\n\n        \r\n        final Index index = indexService.index();\n        assertAcked(client().admin().indices().prepareClose(index.getName()));\n        assertBusy(() -> assertTrue(\"Index not found: \" + index.getName(), getInstanceFromNode(IndicesService.class).hasIndex(index)));\n\n        final IndexService closedIndexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(index);\n        assertNotSame(indexService, closedIndexService);\n        assertNotSame(fsyncTask, closedIndexService.getFsyncTask());\n        assertFalse(closedIndexService.getFsyncTask().mustReschedule());\n        assertFalse(closedIndexService.getFsyncTask().isClosed());\n        assertEquals(5000, closedIndexService.getFsyncTask().getInterval().millis());\n\n        \r\n        assertAcked(client().admin().indices().prepareOpen(index.getName()));\n        assertBusy(() -> assertTrue(\"Index not found: \" + index.getName(), getInstanceFromNode(IndicesService.class).hasIndex(index)));\n        indexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(index);\n        assertNotSame(closedIndexService, indexService);\n        fsyncTask = indexService.getFsyncTask();\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(fsyncTask.isScheduled());\n        assertFalse(fsyncTask.isClosed());\n\n        indexService.close(\"simon says\", false);\n        assertFalse(fsyncTask.isScheduled());\n        assertTrue(fsyncTask.isClosed());\n\n        indexService = createIndex(\"test1\", Settings.EMPTY);\n        assertNull(indexService.getFsyncTask());\n    }\n","date":"2019-09-25 18:46:12","endLine":269,"groupId":"103267","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFsyncTaskIsRunning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/54/602837f706a6a0042a65c86c328e743168b238.src","preCode":"    public void testFsyncTaskIsRunning() throws Exception {\n        Settings settings = Settings.builder()\n            .put(IndexSettings.INDEX_TRANSLOG_DURABILITY_SETTING.getKey(), Translog.Durability.ASYNC).build();\n        IndexService indexService = createIndex(\"test\", settings);\n        IndexService.AsyncTranslogFSync fsyncTask = indexService.getFsyncTask();\n        assertNotNull(fsyncTask);\n        assertEquals(5000, fsyncTask.getInterval().millis());\n        assertTrue(fsyncTask.mustReschedule());\n        assertTrue(fsyncTask.isScheduled());\n\n        \r\n        final Index index = indexService.index();\n        assertAcked(client().admin().indices().prepareClose(index.getName()));\n        awaitBusy(() -> getInstanceFromNode(IndicesService.class).hasIndex(index));\n\n        final IndexService closedIndexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(index);\n        assertNotSame(indexService, closedIndexService);\n        assertNotSame(fsyncTask, closedIndexService.getFsyncTask());\n        assertFalse(closedIndexService.getFsyncTask().mustReschedule());\n        assertFalse(closedIndexService.getFsyncTask().isClosed());\n        assertEquals(5000, closedIndexService.getFsyncTask().getInterval().millis());\n\n        \r\n        assertAcked(client().admin().indices().prepareOpen(index.getName()));\n        awaitBusy(() -> getInstanceFromNode(IndicesService.class).hasIndex(index));\n        indexService = getInstanceFromNode(IndicesService.class).indexServiceSafe(index);\n        assertNotSame(closedIndexService, indexService);\n        fsyncTask = indexService.getFsyncTask();\n        assertTrue(indexService.getRefreshTask().mustReschedule());\n        assertTrue(fsyncTask.isScheduled());\n        assertFalse(fsyncTask.isClosed());\n\n        indexService.close(\"simon says\", false);\n        assertFalse(fsyncTask.isScheduled());\n        assertTrue(fsyncTask.isClosed());\n\n        indexService = createIndex(\"test1\", Settings.EMPTY);\n        assertNull(indexService.getFsyncTask());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"9dd155c30be1a31996df61479996892c7c51c74f","commitMessage":"@@@Convert most awaitBusy calls to assertBusy (#45794)\n\nCloses #28450. Convert most `awaitBusy` calls to `assertBusy`.  and use\nasserts where possible. Follows on from #28548 by @liketic.\n\nThere were a small number of places where it didn't make sense to me to\ncall `assertBusy`.  so I kept the existing calls but renamed the method to\n`waitUntil`. This was partly to better reflect its usage.  and partly so\nthat anyone trying to add a new call to awaitBusy wouldn't be able to find\nit.\n\nI also didn't change the usage in `TransportStopRollupAction` as the\ncomments state that the local awaitBusy method is a temporary\ncopy-and-paste.\n\nOther changes:\n\n  * Rework `waitForDocs` to scale its timeout. Instead of calling\n    `assertBusy` in a loop.  work out a reasonable overall timeout and await\n    just once.\n  * Some tests failed after switching to `assertBusy` and had to be fixed.\n  * Correct the expect templates in AbstractUpgradeTestCase.  The ES\n    Security team confirmed that they don't use templates any more.  so\n    remove this from the expected templates. Also rewrite how the setup\n    code checks for templates.  in order to give more information.\n  * Remove an expected ML template from XPackRestTestConstants The ML team\n    advised that the ML tests shouldn't be waiting for any\n    `.ml-notifications*` templates.  since such checks should happen in the\n    production code instead.\n  * Also rework the template checking code in `XPackRestTestHelper` to give\n    more helpful failure messages.","date":"2019-09-25 18:46:12","modifiedFileCount":"56","status":"M","submitter":"Rory Hunter"}]
