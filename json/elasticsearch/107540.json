[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<PutStoredScriptResponse> listener) {\n        int max = SCRIPT_MAX_SIZE_IN_BYTES.get(settings);\n\n        if (request.content().length() > max) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + max + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<PutStoredScriptResponse>(request, listener) {\n\n            @Override\n            protected PutStoredScriptResponse newResponse(boolean acknowledged) {\n                return new PutStoredScriptResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.putStoredScript(smd, request.id(), source);\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","date":"2018-04-26 03:22:53","endLine":473,"groupId":"72737","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"putStoredScript","params":"(ClusterServiceclusterService@PutStoredScriptRequestrequest@ActionListener<PutStoredScriptResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ca/79e3b80fc8196724eff4097f371070ff847605.src","preCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<PutStoredScriptResponse> listener) {\n        int max = SCRIPT_MAX_SIZE_IN_BYTES.get(settings);\n\n        if (request.content().length() > max) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + max + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<PutStoredScriptResponse>(request, listener) {\n\n            @Override\n            protected PutStoredScriptResponse newResponse(boolean acknowledged) {\n                return new PutStoredScriptResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.putStoredScript(smd, request.id(), source);\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<DeleteStoredScriptResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<DeleteStoredScriptResponse>(request, listener) {\n\n            @Override\n            protected DeleteStoredScriptResponse newResponse(boolean acknowledged) {\n                return new DeleteStoredScriptResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.deleteStoredScript(smd, request.id());\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","date":"2018-04-26 03:22:53","endLine":494,"groupId":"72737","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteStoredScript","params":"(ClusterServiceclusterService@DeleteStoredScriptRequestrequest@ActionListener<DeleteStoredScriptResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ca/79e3b80fc8196724eff4097f371070ff847605.src","preCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<DeleteStoredScriptResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<DeleteStoredScriptResponse>(request, listener) {\n\n            @Override\n            protected DeleteStoredScriptResponse newResponse(boolean acknowledged) {\n                return new DeleteStoredScriptResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.deleteStoredScript(smd, request.id());\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":475,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-08-16 03:56:01","codes":[{"authorDate":"2018-08-16 03:56:01","commitOrder":2,"curCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<AcknowledgedResponse> listener) {\n        int max = SCRIPT_MAX_SIZE_IN_BYTES.get(settings);\n\n        if (request.content().length() > max) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + max + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return new AcknowledgedResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.putStoredScript(smd, request.id(), source);\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","date":"2018-08-16 03:56:01","endLine":472,"groupId":"72737","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"putStoredScript","params":"(ClusterServiceclusterService@PutStoredScriptRequestrequest@ActionListener<AcknowledgedResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/7cefb3a010377281ecab42ca8f0308f6414c8f.src","preCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<PutStoredScriptResponse> listener) {\n        int max = SCRIPT_MAX_SIZE_IN_BYTES.get(settings);\n\n        if (request.content().length() > max) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + max + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<PutStoredScriptResponse>(request, listener) {\n\n            @Override\n            protected PutStoredScriptResponse newResponse(boolean acknowledged) {\n                return new PutStoredScriptResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.putStoredScript(smd, request.id(), source);\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"},{"authorDate":"2018-08-16 03:56:01","commitOrder":2,"curCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<AcknowledgedResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return new AcknowledgedResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.deleteStoredScript(smd, request.id());\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","date":"2018-08-16 03:56:01","endLine":493,"groupId":"72737","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteStoredScript","params":"(ClusterServiceclusterService@DeleteStoredScriptRequestrequest@ActionListener<AcknowledgedResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/7cefb3a010377281ecab42ca8f0308f6414c8f.src","preCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<DeleteStoredScriptResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<DeleteStoredScriptResponse>(request, listener) {\n\n            @Override\n            protected DeleteStoredScriptResponse newResponse(boolean acknowledged) {\n                return new DeleteStoredScriptResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.deleteStoredScript(smd, request.id());\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"M"}],"commitId":"ec9375660036b3c0a59cb3db60cd0626e9fc5979","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-16 03:56:01","modifiedFileCount":"176","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-08-16 03:56:01","codes":[{"authorDate":"2018-11-03 07:07:54","commitOrder":3,"curCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<AcknowledgedResponse> listener) {\n        if (request.content().length() > maxSizeInBytes) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + maxSizeInBytes + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return new AcknowledgedResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.putStoredScript(smd, request.id(), source);\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","date":"2018-11-03 07:07:54","endLine":503,"groupId":"72737","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"putStoredScript","params":"(ClusterServiceclusterService@PutStoredScriptRequestrequest@ActionListener<AcknowledgedResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7c/4011a63c412202d548283a79ff9f7ba2dce787.src","preCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<AcknowledgedResponse> listener) {\n        int max = SCRIPT_MAX_SIZE_IN_BYTES.get(settings);\n\n        if (request.content().length() > max) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + max + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return new AcknowledgedResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.putStoredScript(smd, request.id(), source);\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"},{"authorDate":"2018-08-16 03:56:01","commitOrder":3,"curCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<AcknowledgedResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return new AcknowledgedResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.deleteStoredScript(smd, request.id());\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","date":"2018-08-16 03:56:01","endLine":493,"groupId":"72737","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteStoredScript","params":"(ClusterServiceclusterService@DeleteStoredScriptRequestrequest@ActionListener<AcknowledgedResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/7cefb3a010377281ecab42ca8f0308f6414c8f.src","preCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<AcknowledgedResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return new AcknowledgedResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.deleteStoredScript(smd, request.id());\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"N"}],"commitId":"44f08717bac83af48660e5d98928814b066788fa","commitMessage":"@@@[Scripting] Make Max Script Length Setting Dynamic (#35184)\n\nThis changes the current script.max_size_in_bytes to be dynamic so it can be \nset through the cluster settings API. This setting is also applied to inline scripts \nin the compile method of ScriptService to prevent excessively long inline \nscripts from being compiled. The script length limit is removed from Painless as \nthis is no longer necessary with the protection in compile.\n","date":"2018-11-03 07:07:54","modifiedFileCount":"5","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<AcknowledgedResponse> listener) {\n        if (request.content().length() > maxSizeInBytes) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + maxSizeInBytes + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return new AcknowledgedResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                smd = ScriptMetadata.putStoredScript(smd, request.id(), source);\n                Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                return ClusterState.builder(currentState).metadata(mdb).build();\n            }\n        });\n    }\n","date":"2020-04-01 03:52:01","endLine":505,"groupId":"72737","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"putStoredScript","params":"(ClusterServiceclusterService@PutStoredScriptRequestrequest@ActionListener<AcknowledgedResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/cd1cc9d343f726a46ec9d7de80ae94d876551f.src","preCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<AcknowledgedResponse> listener) {\n        if (request.content().length() > maxSizeInBytes) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + maxSizeInBytes + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return new AcknowledgedResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.putStoredScript(smd, request.id(), source);\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<AcknowledgedResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return new AcknowledgedResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                smd = ScriptMetadata.deleteStoredScript(smd, request.id());\n                Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                return ClusterState.builder(currentState).metadata(mdb).build();\n            }\n        });\n    }\n","date":"2020-04-01 03:52:01","endLine":526,"groupId":"72737","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteStoredScript","params":"(ClusterServiceclusterService@DeleteStoredScriptRequestrequest@ActionListener<AcknowledgedResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/cd1cc9d343f726a46ec9d7de80ae94d876551f.src","preCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<AcknowledgedResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return new AcknowledgedResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetaData smd = currentState.metaData().custom(ScriptMetaData.TYPE);\n                smd = ScriptMetaData.deleteStoredScript(smd, request.id());\n                MetaData.Builder mdb = MetaData.builder(currentState.getMetaData()).putCustom(ScriptMetaData.TYPE, smd);\n\n                return ClusterState.builder(currentState).metaData(mdb).build();\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-10-09 14:52:34","codes":[{"authorDate":"2020-10-09 14:52:34","commitOrder":5,"curCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<AcknowledgedResponse> listener) {\n        if (request.content().length() > maxSizeInBytes) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + maxSizeInBytes + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return AcknowledgedResponse.of(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                smd = ScriptMetadata.putStoredScript(smd, request.id(), source);\n                Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                return ClusterState.builder(currentState).metadata(mdb).build();\n            }\n        });\n    }\n","date":"2020-10-09 14:52:34","endLine":441,"groupId":"72737","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"putStoredScript","params":"(ClusterServiceclusterService@PutStoredScriptRequestrequest@ActionListener<AcknowledgedResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/c25f33418c9a9277deda4b91e5033338eef7b2.src","preCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<AcknowledgedResponse> listener) {\n        if (request.content().length() > maxSizeInBytes) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + maxSizeInBytes + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return new AcknowledgedResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                smd = ScriptMetadata.putStoredScript(smd, request.id(), source);\n                Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                return ClusterState.builder(currentState).metadata(mdb).build();\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"M"},{"authorDate":"2020-10-09 14:52:34","commitOrder":5,"curCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<AcknowledgedResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return AcknowledgedResponse.of(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                smd = ScriptMetadata.deleteStoredScript(smd, request.id());\n                Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                return ClusterState.builder(currentState).metadata(mdb).build();\n            }\n        });\n    }\n","date":"2020-10-09 14:52:34","endLine":462,"groupId":"72737","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteStoredScript","params":"(ClusterServiceclusterService@DeleteStoredScriptRequestrequest@ActionListener<AcknowledgedResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/c25f33418c9a9277deda4b91e5033338eef7b2.src","preCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<AcknowledgedResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return new AcknowledgedResponse(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                smd = ScriptMetadata.deleteStoredScript(smd, request.id());\n                Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                return ClusterState.builder(currentState).metadata(mdb).build();\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"M"}],"commitId":"4e740c2e4a544c7e99963ccd9f64686b1f0531e1","commitMessage":"@@@Dry up AcknowledgedResponse Handling (#63335)\n\n1. `AcknowledgedResponse` should really be two singletons to make things clearer and save some objects and code size.\n2. We were duplicating reading this type over and over  in a bunch of transport master node actions so I dried that up","date":"2020-10-09 14:52:34","modifiedFileCount":"145","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-11-04 04:48:19","codes":[{"authorDate":"2020-11-04 04:48:19","commitOrder":6,"curCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<AcknowledgedResponse> listener) {\n        if (request.content().length() > maxSizeInBytes) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + maxSizeInBytes + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(), new AckedClusterStateUpdateTask(request, listener) {\n            @Override\n            public ClusterState execute(ClusterState currentState) {\n                ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                smd = ScriptMetadata.putStoredScript(smd, request.id(), source);\n                Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                return ClusterState.builder(currentState).metadata(mdb).build();\n            }\n        });\n    }\n","date":"2020-11-04 04:48:19","endLine":434,"groupId":"72737","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"putStoredScript","params":"(ClusterServiceclusterService@PutStoredScriptRequestrequest@ActionListener<AcknowledgedResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/3de9be5d19c9a01509f6c9484dc9e47cb39fdb.src","preCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<AcknowledgedResponse> listener) {\n        if (request.content().length() > maxSizeInBytes) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + maxSizeInBytes + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return AcknowledgedResponse.of(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                smd = ScriptMetadata.putStoredScript(smd, request.id(), source);\n                Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                return ClusterState.builder(currentState).metadata(mdb).build();\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"M"},{"authorDate":"2020-11-04 04:48:19","commitOrder":6,"curCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<AcknowledgedResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask(request, listener) {\n                @Override\n                public ClusterState execute(ClusterState currentState) {\n                    ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                    smd = ScriptMetadata.deleteStoredScript(smd, request.id());\n                    Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                    return ClusterState.builder(currentState).metadata(mdb).build();\n                }\n            });\n    }\n","date":"2020-11-04 04:48:19","endLine":449,"groupId":"72737","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteStoredScript","params":"(ClusterServiceclusterService@DeleteStoredScriptRequestrequest@ActionListener<AcknowledgedResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/3de9be5d19c9a01509f6c9484dc9e47cb39fdb.src","preCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<AcknowledgedResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask<AcknowledgedResponse>(request, listener) {\n\n            @Override\n            protected AcknowledgedResponse newResponse(boolean acknowledged) {\n                return AcknowledgedResponse.of(acknowledged);\n            }\n\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                smd = ScriptMetadata.deleteStoredScript(smd, request.id());\n                Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                return ClusterState.builder(currentState).metadata(mdb).build();\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":436,"status":"M"}],"commitId":"d904d48e8ddbea1f9f8e251fa539da5f4a34476b","commitMessage":"@@@Remove Redundant Cluster State Update Response Classes (#63646)\n\nThese intermediary response types don't contain any information\noutside of what the shard acknowledged and acknowledged responses\ncontain so this PR removes them.\nAlso.  it adds three constants for the three possible states of\n`ShardsAcknowledgedResponse`.\n\nFollow up to #63335\n","date":"2020-11-04 04:48:19","modifiedFileCount":"52","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-11-04 04:48:19","codes":[{"authorDate":"2021-04-21 21:28:12","commitOrder":7,"curCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<AcknowledgedResponse> listener) {\n        if (request.content().length() > maxSizeInBytes) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + maxSizeInBytes + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                if (context.allowStoredScript == false) {\n                    throw new IllegalArgumentException(\"cannot store a script for context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(), new AckedClusterStateUpdateTask(request, listener) {\n            @Override\n            public ClusterState execute(ClusterState currentState) {\n                ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                smd = ScriptMetadata.putStoredScript(smd, request.id(), source);\n                Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                return ClusterState.builder(currentState).metadata(mdb).build();\n            }\n        });\n    }\n","date":"2021-04-21 21:28:12","endLine":433,"groupId":"107540","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"putStoredScript","params":"(ClusterServiceclusterService@PutStoredScriptRequestrequest@ActionListener<AcknowledgedResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/03/c2c93da0a54e18fa22a8ae861530143d200935.src","preCode":"    public void putStoredScript(ClusterService clusterService, PutStoredScriptRequest request,\n                                ActionListener<AcknowledgedResponse> listener) {\n        if (request.content().length() > maxSizeInBytes) {\n            throw new IllegalArgumentException(\"exceeded max allowed stored script size in bytes [\" + maxSizeInBytes + \"] with size [\" +\n                request.content().length() + \"] for script [\" + request.id() + \"]\");\n        }\n\n        StoredScriptSource source = request.source();\n\n        if (isLangSupported(source.getLang()) == false) {\n            throw new IllegalArgumentException(\"unable to put stored script with unsupported lang [\" + source.getLang() + \"]\");\n        }\n\n        try {\n            ScriptEngine scriptEngine = getEngine(source.getLang());\n\n            if (isTypeEnabled(ScriptType.STORED) == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, [\" + ScriptType.STORED + \"] scripts are not enabled\");\n            } else if (isAnyContextEnabled() == false) {\n                throw new IllegalArgumentException(\n                    \"cannot put [\" + ScriptType.STORED + \"] script, no script contexts are enabled\");\n            } else if (request.context() != null) {\n                ScriptContext<?> context = contexts.get(request.context());\n                if (context == null) {\n                    throw new IllegalArgumentException(\"Unknown context [\" + request.context() + \"]\");\n                }\n                scriptEngine.compile(request.id(), source.getSource(), context, Collections.emptyMap());\n            }\n        } catch (ScriptException good) {\n            throw good;\n        } catch (Exception exception) {\n            throw new IllegalArgumentException(\"failed to parse/compile stored script [\" + request.id() + \"]\", exception);\n        }\n\n        clusterService.submitStateUpdateTask(\"put-script-\" + request.id(), new AckedClusterStateUpdateTask(request, listener) {\n            @Override\n            public ClusterState execute(ClusterState currentState) {\n                ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                smd = ScriptMetadata.putStoredScript(smd, request.id(), source);\n                Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                return ClusterState.builder(currentState).metadata(mdb).build();\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":385,"status":"M"},{"authorDate":"2020-11-04 04:48:19","commitOrder":7,"curCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<AcknowledgedResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask(request, listener) {\n                @Override\n                public ClusterState execute(ClusterState currentState) {\n                    ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                    smd = ScriptMetadata.deleteStoredScript(smd, request.id());\n                    Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                    return ClusterState.builder(currentState).metadata(mdb).build();\n                }\n            });\n    }\n","date":"2020-11-04 04:48:19","endLine":449,"groupId":"107540","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteStoredScript","params":"(ClusterServiceclusterService@DeleteStoredScriptRequestrequest@ActionListener<AcknowledgedResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/3de9be5d19c9a01509f6c9484dc9e47cb39fdb.src","preCode":"    public void deleteStoredScript(ClusterService clusterService, DeleteStoredScriptRequest request,\n                                   ActionListener<AcknowledgedResponse> listener) {\n        clusterService.submitStateUpdateTask(\"delete-script-\" + request.id(),\n            new AckedClusterStateUpdateTask(request, listener) {\n                @Override\n                public ClusterState execute(ClusterState currentState) {\n                    ScriptMetadata smd = currentState.metadata().custom(ScriptMetadata.TYPE);\n                    smd = ScriptMetadata.deleteStoredScript(smd, request.id());\n                    Metadata.Builder mdb = Metadata.builder(currentState.getMetadata()).putCustom(ScriptMetadata.TYPE, smd);\n\n                    return ClusterState.builder(currentState).metadata(mdb).build();\n                }\n            });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/script/ScriptService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":436,"status":"N"}],"commitId":"9a86dde3572a6f3999eea75bc3ce30b965837ba3","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-21 21:28:12","modifiedFileCount":"1285","status":"M","submitter":"iverase"}]
