[{"authorTime":"2021-08-12 17:10:05","codes":[{"authorDate":"2021-02-03 23:20:31","commitOrder":3,"curCode":"    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ClusterName that = (ClusterName) o;\n\n        return Objects.equals(value, that.value);\n    }\n","date":"2021-02-03 23:20:31","endLine":61,"groupId":"61752","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f8/6093c8079fdd3abf757d2ae8ace5419c6869c0.src","preCode":"    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ClusterName that = (ClusterName) o;\n\n        return Objects.equals(value, that.value);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/ClusterName.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"NB"},{"authorDate":"2021-08-12 17:10:05","commitOrder":3,"curCode":"    public boolean equals(Object o) {\n        if (o == this) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FillMaskConfig that = (FillMaskConfig) o;\n        return Objects.equals(vocabularyConfig, that.vocabularyConfig)\n            && Objects.equals(tokenizationParams, that.tokenizationParams);\n    }\n","date":"2021-08-12 17:10:05","endLine":102,"groupId":"61752","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/1ababc46411d1977954a35ead4c91d38e70c8f.src","preCode":"    public boolean equals(Object o) {\n        if (o == this) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FillMaskConfig that = (FillMaskConfig) o;\n        return Objects.equals(vocabularyConfig, that.vocabularyConfig)\n            && Objects.equals(tokenizationParams, that.tokenizationParams);\n    }\n","realPath":"x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/FillMaskConfig.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"}],"commitId":"adfa977c83cd0b80266e1a6eefee709d12654a1f","commitMessage":"@@@[ML] Inference configs for NLP models (#76350)\n\nIntroduce inference configs for NLP models.\n\nWhen a PyTorch model is put.  the config now expects\na different inference config per task type. Thus.  we\nhave a `ner`.  `fill_mask`.  and `sentiment_analysis`\nconfig. In addition.  the tokenization parameters have\nbeen grouped together and are now part of the relevant\ninference config objects. Thus the vocabulary can now\nbe on a document on its own. A new vocabulary config\nobject allows the user to specify the location of the\nvocabulary document.","date":"2021-08-12 17:10:05","modifiedFileCount":"33","status":"M","submitter":"Dimitris Athanasiou"},{"authorTime":"2021-08-24 20:19:03","codes":[{"authorDate":"2021-02-03 23:20:31","commitOrder":4,"curCode":"    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ClusterName that = (ClusterName) o;\n\n        return Objects.equals(value, that.value);\n    }\n","date":"2021-02-03 23:20:31","endLine":61,"groupId":"101611","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f8/6093c8079fdd3abf757d2ae8ace5419c6869c0.src","preCode":"    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ClusterName that = (ClusterName) o;\n\n        return Objects.equals(value, that.value);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/ClusterName.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2021-08-24 20:19:03","commitOrder":4,"curCode":"    public boolean equals(Object o) {\n        if (o == this) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FillMaskConfig that = (FillMaskConfig) o;\n        return Objects.equals(vocabularyConfig, that.vocabularyConfig)\n            && Objects.equals(tokenization, that.tokenization);\n    }\n","date":"2021-08-24 20:19:03","endLine":105,"groupId":"101611","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2d/d3f96d27fc4c61599b2437de7308c0fb7b6820.src","preCode":"    public boolean equals(Object o) {\n        if (o == this) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FillMaskConfig that = (FillMaskConfig) o;\n        return Objects.equals(vocabularyConfig, that.vocabularyConfig)\n            && Objects.equals(tokenizationParams, that.tokenizationParams);\n    }\n","realPath":"x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/inference/trainedmodel/FillMaskConfig.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"f913aaef5bce318405549df0806a7b926ba9b13e","commitMessage":"@@@[ML] add support for distilbert pytorch models (#76679)\n\nThis commit adds support for distilbert pytorch models.\n\nWhile the tokenization itself is exactly the same as bert.  the parameters sent to the model are different. \n\nDistilBERT does not require the segment mask or positional IDs to be sent. Only the input mask and token ids. \n\nBut.  since the effective output of the tokenization sent to the model is different.  I opted to consider it as a unique\ntokenizer.  inheriting from our bert implementation.\n\nThe API now looks like:\nfor BERT models\n```js\n\"inference_config\": {\n  \"ner\": {\n    \"vocabulary\": {/*...*/}. \n    \"tokenization\": {\n      \"bert\": {/*...*/}\n    }\n  }\n}\n```\nFor DistilBERT models\n```js\n\"inference_config\": {\n  \"ner\": {\n    \"vocabulary\": {/*...*/}. \n    \"tokenization\": {\n      \"distil_bert\": {/*...*/}\n    }\n  }\n}\n```","date":"2021-08-24 20:19:03","modifiedFileCount":"26","status":"M","submitter":"Benjamin Trent"}]
