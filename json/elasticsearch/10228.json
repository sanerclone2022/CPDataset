[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n        BulkByScrollResponse response = updateByQuery().source(sourceIndexNames).refresh(true).setSlices(slices).get();\n        assertThat(response, matcher().updated(allDocs.size()).slices(hasSize(expectedSlices)));\n\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            String index = entry.getKey();\n            List<IndexRequestBuilder> indexDocs = entry.getValue();\n            int randomDoc = between(0, indexDocs.size() - 1);\n            assertEquals(2, client().prepareGet(index, \"test\", Integer.toString(randomDoc)).get().getVersion());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":162,"groupId":"34689","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/a92005c2cdc21118bd39af462df41520caef10.src","preCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n        BulkByScrollResponse response = updateByQuery().source(sourceIndexNames).refresh(true).setSlices(slices).get();\n        assertThat(response, matcher().updated(allDocs.size()).slices(hasSize(expectedSlices)));\n\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            String index = entry.getKey();\n            List<IndexRequestBuilder> indexDocs = entry.getValue();\n            int randomDoc = between(0, indexDocs.size() - 1);\n            assertEquals(2, client().prepareGet(index, \"test\", Integer.toString(randomDoc)).get().getVersion());\n        }\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/UpdateByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n\n        assertThat(\n            deleteByQuery()\n                .source(sourceIndexNames)\n                .filter(QueryBuilders.matchAllQuery())\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .deleted(allDocs.size())\n                .slices(hasSize(expectedSlices)));\n\n        for (String index : docs.keySet()) {\n            assertHitCount(client().prepareSearch(index).setTypes(\"test\").setSize(0).get(), 0);\n        }\n\n    }\n","date":"2018-04-26 03:22:53","endLine":308,"groupId":"34689","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/165ca12e7a4dba16f50c1ad37aebce4c20a569.src","preCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n\n        assertThat(\n            deleteByQuery()\n                .source(sourceIndexNames)\n                .filter(QueryBuilders.matchAllQuery())\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .deleted(allDocs.size())\n                .slices(hasSize(expectedSlices)));\n\n        for (String index : docs.keySet()) {\n            assertHitCount(client().prepareSearch(index).setTypes(\"test\").setSize(0).get(), 0);\n        }\n\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/DeleteByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-05-29 15:50:30","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n        BulkByScrollResponse response = updateByQuery().source(sourceIndexNames).refresh(true).setSlices(slices).get();\n        assertThat(response, matcher().updated(allDocs.size()).slices(hasSize(expectedSlices)));\n\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            String index = entry.getKey();\n            List<IndexRequestBuilder> indexDocs = entry.getValue();\n            int randomDoc = between(0, indexDocs.size() - 1);\n            assertEquals(2, client().prepareGet(index, \"test\", Integer.toString(randomDoc)).get().getVersion());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":162,"groupId":"34689","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/a92005c2cdc21118bd39af462df41520caef10.src","preCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n        BulkByScrollResponse response = updateByQuery().source(sourceIndexNames).refresh(true).setSlices(slices).get();\n        assertThat(response, matcher().updated(allDocs.size()).slices(hasSize(expectedSlices)));\n\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            String index = entry.getKey();\n            List<IndexRequestBuilder> indexDocs = entry.getValue();\n            int randomDoc = between(0, indexDocs.size() - 1);\n            assertEquals(2, client().prepareGet(index, \"test\", Integer.toString(randomDoc)).get().getVersion());\n        }\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/UpdateByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"N"},{"authorDate":"2019-05-29 15:50:30","commitOrder":2,"curCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n\n        assertThat(\n            deleteByQuery()\n                .source(sourceIndexNames)\n                .filter(QueryBuilders.matchAllQuery())\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .deleted(allDocs.size())\n                .slices(hasSize(expectedSlices)));\n\n        for (String index : docs.keySet()) {\n            assertHitCount(client().prepareSearch(index).setSize(0).get(), 0);\n        }\n\n    }\n","date":"2019-05-29 15:50:30","endLine":307,"groupId":"34689","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/115ecef4ea9384da992a460f99c885340bb976.src","preCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n\n        assertThat(\n            deleteByQuery()\n                .source(sourceIndexNames)\n                .filter(QueryBuilders.matchAllQuery())\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .deleted(allDocs.size())\n                .slices(hasSize(expectedSlices)));\n\n        for (String index : docs.keySet()) {\n            assertHitCount(client().prepareSearch(index).setTypes(\"test\").setSize(0).get(), 0);\n        }\n\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/DeleteByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"}],"commitId":"3f10cea87ac658b037a256bbf99b62e5dcae05b3","commitMessage":"@@@Removes types from SearchRequest and QueryShardContext (#42112)\n\n\n","date":"2019-05-29 15:50:30","modifiedFileCount":"112","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2019-05-29 15:50:30","codes":[{"authorDate":"2019-09-20 21:22:57","commitOrder":3,"curCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n        BulkByScrollResponse response = updateByQuery().source(sourceIndexNames).refresh(true).setSlices(slices).get();\n        assertThat(response, matcher().updated(allDocs.size()).slices(hasSize(expectedSlices)));\n\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            String index = entry.getKey();\n            List<IndexRequestBuilder> indexDocs = entry.getValue();\n            int randomDoc = between(0, indexDocs.size() - 1);\n            assertEquals(2, client().prepareGet(index, Integer.toString(randomDoc)).get().getVersion());\n        }\n    }\n","date":"2019-09-20 21:22:57","endLine":160,"groupId":"34689","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/71b2969a5133c4518e99fb6c2ce283c0a75fcd.src","preCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n        BulkByScrollResponse response = updateByQuery().source(sourceIndexNames).refresh(true).setSlices(slices).get();\n        assertThat(response, matcher().updated(allDocs.size()).slices(hasSize(expectedSlices)));\n\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            String index = entry.getKey();\n            List<IndexRequestBuilder> indexDocs = entry.getValue();\n            int randomDoc = between(0, indexDocs.size() - 1);\n            assertEquals(2, client().prepareGet(index, \"test\", Integer.toString(randomDoc)).get().getVersion());\n        }\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/UpdateByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2019-05-29 15:50:30","commitOrder":3,"curCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n\n        assertThat(\n            deleteByQuery()\n                .source(sourceIndexNames)\n                .filter(QueryBuilders.matchAllQuery())\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .deleted(allDocs.size())\n                .slices(hasSize(expectedSlices)));\n\n        for (String index : docs.keySet()) {\n            assertHitCount(client().prepareSearch(index).setSize(0).get(), 0);\n        }\n\n    }\n","date":"2019-05-29 15:50:30","endLine":307,"groupId":"34689","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/115ecef4ea9384da992a460f99c885340bb976.src","preCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n\n        assertThat(\n            deleteByQuery()\n                .source(sourceIndexNames)\n                .filter(QueryBuilders.matchAllQuery())\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .deleted(allDocs.size())\n                .slices(hasSize(expectedSlices)));\n\n        for (String index : docs.keySet()) {\n            assertHitCount(client().prepareSearch(index).setSize(0).get(), 0);\n        }\n\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/DeleteByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"N"}],"commitId":"7c90801aff398d9b73e4fa24933550d2320a5a4d","commitMessage":"@@@Remove types from Get/MultiGet (#46587)\n\nThis commit removes types from the ShardGetService.  and propagates this API change\nup through the Transport and Rest actions for Get and MultiGet\n\nRelates to #41059","date":"2019-09-20 21:22:57","modifiedFileCount":"136","status":"M","submitter":"Alan Woodward"},{"authorTime":"2019-10-25 18:09:52","codes":[{"authorDate":"2019-10-25 18:09:52","commitOrder":4,"curCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName).setId(Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n        BulkByScrollResponse response = updateByQuery().source(sourceIndexNames).refresh(true).setSlices(slices).get();\n        assertThat(response, matcher().updated(allDocs.size()).slices(hasSize(expectedSlices)));\n\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            String index = entry.getKey();\n            List<IndexRequestBuilder> indexDocs = entry.getValue();\n            int randomDoc = between(0, indexDocs.size() - 1);\n            assertEquals(2, client().prepareGet(index, Integer.toString(randomDoc)).get().getVersion());\n        }\n    }\n","date":"2019-10-25 18:09:52","endLine":160,"groupId":"10228","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/753bd868a5bfadeb7bfb74b383e3f3580bc90a.src","preCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n        BulkByScrollResponse response = updateByQuery().source(sourceIndexNames).refresh(true).setSlices(slices).get();\n        assertThat(response, matcher().updated(allDocs.size()).slices(hasSize(expectedSlices)));\n\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            String index = entry.getKey();\n            List<IndexRequestBuilder> indexDocs = entry.getValue();\n            int randomDoc = between(0, indexDocs.size() - 1);\n            assertEquals(2, client().prepareGet(index, Integer.toString(randomDoc)).get().getVersion());\n        }\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/UpdateByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2019-10-25 18:09:52","commitOrder":4,"curCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName).setId(Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n\n        assertThat(\n            deleteByQuery()\n                .source(sourceIndexNames)\n                .filter(QueryBuilders.matchAllQuery())\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .deleted(allDocs.size())\n                .slices(hasSize(expectedSlices)));\n\n        for (String index : docs.keySet()) {\n            assertHitCount(client().prepareSearch(index).setSize(0).get(), 0);\n        }\n\n    }\n","date":"2019-10-25 18:09:52","endLine":307,"groupId":"10228","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/e95cafda3e6a04828b9cf01c12e706fd22a4c8.src","preCode":"    public void testMultipleSources() throws Exception {\n        int sourceIndices = between(2, 5);\n\n        Map<String, List<IndexRequestBuilder>> docs = new HashMap<>();\n        for (int sourceIndex = 0; sourceIndex < sourceIndices; sourceIndex++) {\n            String indexName = \"test\" + sourceIndex;\n            docs.put(indexName, new ArrayList<>());\n            int numDocs = between(5, 15);\n            for (int i = 0; i < numDocs; i++) {\n                docs.get(indexName).add(client().prepareIndex(indexName, \"test\", Integer.toString(i)).setSource(\"foo\", \"a\"));\n            }\n        }\n\n        List<IndexRequestBuilder> allDocs = docs.values().stream().flatMap(Collection::stream).collect(Collectors.toList());\n        indexRandom(true, allDocs);\n        for (Map.Entry<String, List<IndexRequestBuilder>> entry : docs.entrySet()) {\n            assertHitCount(client().prepareSearch(entry.getKey()).setSize(0).get(), entry.getValue().size());\n        }\n\n        int slices = randomSlices(1, 10);\n        int expectedSlices = expectedSliceStatuses(slices, docs.keySet());\n\n        String[] sourceIndexNames = docs.keySet().toArray(new String[docs.size()]);\n\n        assertThat(\n            deleteByQuery()\n                .source(sourceIndexNames)\n                .filter(QueryBuilders.matchAllQuery())\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .deleted(allDocs.size())\n                .slices(hasSize(expectedSlices)));\n\n        for (String index : docs.keySet()) {\n            assertHitCount(client().prepareSearch(index).setSize(0).get(), 0);\n        }\n\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/DeleteByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"}],"commitId":"750c6d8bb1c751774f01fd12778f8bcc0a6f4d57","commitMessage":"@@@Remove Client.prepareIndex(index.  type.  id) method (#48443)\n\nAs types are no longer used in index requests.  we can remove the type parameter\nfrom `prepareIndex` methods in the `Client` interface. However.  just changing the signature\nof `prepareIndex(index.  type.  id)` to `prepareIndex(index.  id)` risks confusion when\nupgrading with the previous (now removed) `prepareIndex(index.  type)` method -\njust changing the dependency version of java code would end up silently changing the\nsemantics of the method call. Instead we should just remove this method entirely.  and\nreplace it by calling `prepareIndex(index).setId(id)`","date":"2019-10-25 18:09:52","modifiedFileCount":"267","status":"M","submitter":"Alan Woodward"}]
