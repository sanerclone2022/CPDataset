[{"authorTime":"2018-12-22 20:21:49","codes":[{"authorDate":"2018-12-22 20:21:49","commitOrder":1,"curCode":"    public void testCity() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-City.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000));\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"8.8.8.8\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"8.8.8.8\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(5));\n        assertThat(geoData.get(\"ip\"), equalTo(\"8.8.8.8\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"US\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"United States\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"North America\"));\n        Map<String, Object> location = new HashMap<>();\n        location.put(\"lat\", 37.751d);\n        location.put(\"lon\", -97.822d);\n        assertThat(geoData.get(\"location\"), equalTo(location));\n    }\n","date":"2018-12-22 20:21:49","endLine":67,"groupId":"33191","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/fe54d2f11279fa197d15f7c18c6f4ccdf180b8.src","preCode":"    public void testCity() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-City.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000));\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"8.8.8.8\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"8.8.8.8\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(5));\n        assertThat(geoData.get(\"ip\"), equalTo(\"8.8.8.8\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"US\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"United States\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"North America\"));\n        Map<String, Object> location = new HashMap<>();\n        location.put(\"lat\", 37.751d);\n        location.put(\"lon\", -97.822d);\n        assertThat(geoData.get(\"location\"), equalTo(location));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2018-12-22 20:21:49","commitOrder":1,"curCode":"    public void testCountry() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-Country.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000));\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"82.170.213.79\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"82.170.213.79\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(4));\n        assertThat(geoData.get(\"ip\"), equalTo(\"82.170.213.79\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"NL\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"Netherlands\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"Europe\"));\n    }\n","date":"2018-12-22 20:21:49","endLine":175,"groupId":"37202","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCountry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/fe54d2f11279fa197d15f7c18c6f4ccdf180b8.src","preCode":"    public void testCountry() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-Country.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000));\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"82.170.213.79\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"82.170.213.79\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(4));\n        assertThat(geoData.get(\"ip\"), equalTo(\"82.170.213.79\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"NL\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"Netherlands\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"Europe\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"}],"commitId":"e1717df0ac814caa26d3ecba54e8bc95a905628a","commitMessage":"@@@Package ingest-geoip as a module (#36898)\n\nThis commit moves ingest-geoip from being a plugin to being a module\nthat is packaged with Elasticsearch distributions.","date":"2018-12-22 20:21:49","modifiedFileCount":"4","status":"B","submitter":"Jason Tedor"},{"authorTime":"2018-12-22 20:21:49","codes":[{"authorDate":"2019-11-22 15:38:29","commitOrder":2,"curCode":"    public void testCity() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-City.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000));\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"8.8.8.8\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"8.8.8.8\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(6));\n        assertThat(geoData.get(\"ip\"), equalTo(\"8.8.8.8\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"US\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"United States\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"North America\"));\n        assertThat(geoData.get(\"timezone\"), equalTo(\"America/Chicago\"));\n        Map<String, Object> location = new HashMap<>();\n        location.put(\"lat\", 37.751d);\n        location.put(\"lon\", -97.822d);\n        assertThat(geoData.get(\"location\"), equalTo(location));\n    }\n","date":"2019-11-22 15:38:29","endLine":68,"groupId":"33191","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b1/36fbae0376a1c7ff2800607e533ee27609fce4.src","preCode":"    public void testCity() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-City.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000));\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"8.8.8.8\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"8.8.8.8\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(5));\n        assertThat(geoData.get(\"ip\"), equalTo(\"8.8.8.8\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"US\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"United States\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"North America\"));\n        Map<String, Object> location = new HashMap<>();\n        location.put(\"lat\", 37.751d);\n        location.put(\"lon\", -97.822d);\n        assertThat(geoData.get(\"location\"), equalTo(location));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2018-12-22 20:21:49","commitOrder":2,"curCode":"    public void testCountry() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-Country.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000));\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"82.170.213.79\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"82.170.213.79\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(4));\n        assertThat(geoData.get(\"ip\"), equalTo(\"82.170.213.79\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"NL\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"Netherlands\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"Europe\"));\n    }\n","date":"2018-12-22 20:21:49","endLine":175,"groupId":"37202","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCountry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/fe54d2f11279fa197d15f7c18c6f4ccdf180b8.src","preCode":"    public void testCountry() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-Country.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000));\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"82.170.213.79\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"82.170.213.79\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(4));\n        assertThat(geoData.get(\"ip\"), equalTo(\"82.170.213.79\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"NL\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"Netherlands\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"Europe\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"N"}],"commitId":"83252a905239e9008c744063b0d481fb557418ea","commitMessage":"@@@Update geolite2 database in ingest geoip plugin. (#49308)\n\nSome tests were tweaked to deal with the updated database files.","date":"2019-11-22 15:38:29","modifiedFileCount":"1","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2019-12-07 04:57:06","codes":[{"authorDate":"2019-12-07 04:57:06","commitOrder":3,"curCode":"    public void testCity() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-City.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000), false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"8.8.8.8\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"8.8.8.8\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(6));\n        assertThat(geoData.get(\"ip\"), equalTo(\"8.8.8.8\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"US\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"United States\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"North America\"));\n        assertThat(geoData.get(\"timezone\"), equalTo(\"America/Chicago\"));\n        Map<String, Object> location = new HashMap<>();\n        location.put(\"lat\", 37.751d);\n        location.put(\"lon\", -97.822d);\n        assertThat(geoData.get(\"location\"), equalTo(location));\n    }\n","date":"2019-12-07 04:57:06","endLine":71,"groupId":"33191","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f0/e9b30ae69ca0a72d106b4eb7baf0960f1e413c.src","preCode":"    public void testCity() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-City.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000));\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"8.8.8.8\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"8.8.8.8\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(6));\n        assertThat(geoData.get(\"ip\"), equalTo(\"8.8.8.8\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"US\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"United States\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"North America\"));\n        assertThat(geoData.get(\"timezone\"), equalTo(\"America/Chicago\"));\n        Map<String, Object> location = new HashMap<>();\n        location.put(\"lat\", 37.751d);\n        location.put(\"lon\", -97.822d);\n        assertThat(geoData.get(\"location\"), equalTo(location));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-12-07 04:57:06","commitOrder":3,"curCode":"    public void testCountry() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-Country.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000), false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"82.170.213.79\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"82.170.213.79\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(4));\n        assertThat(geoData.get(\"ip\"), equalTo(\"82.170.213.79\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"NL\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"Netherlands\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"Europe\"));\n    }\n","date":"2019-12-07 04:57:06","endLine":179,"groupId":"37202","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCountry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f0/e9b30ae69ca0a72d106b4eb7baf0960f1e413c.src","preCode":"    public void testCountry() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-Country.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000));\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"82.170.213.79\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"82.170.213.79\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(4));\n        assertThat(geoData.get(\"ip\"), equalTo(\"82.170.213.79\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"NL\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"Netherlands\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"Europe\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"c57032f62222a31b19b7b1c090c2eed5af9f4ffc","commitMessage":"@@@Allow list of IPs in geoip ingest processor (#49573)\n\n* Allow list of IPs in geoip ingest processor\n\nThis change lets you use array of IPs in addition to string in geoip processor source field.\nIt will set array containing geoip data for each element in source.  unless first_only parameter\noption is enabled.  then only first found will be returned.\n\nCloses #46193","date":"2019-12-07 04:57:06","modifiedFileCount":"2","status":"M","submitter":"Przemko Robakowski"},{"authorTime":"2020-06-16 05:08:29","codes":[{"authorDate":"2020-06-16 05:08:29","commitOrder":4,"curCode":"    public void testCity() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), null, \"source_field\",\n                loader(\"/GeoLite2-City.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000), false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"8.8.8.8\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"8.8.8.8\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(6));\n        assertThat(geoData.get(\"ip\"), equalTo(\"8.8.8.8\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"US\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"United States\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"North America\"));\n        assertThat(geoData.get(\"timezone\"), equalTo(\"America/Chicago\"));\n        Map<String, Object> location = new HashMap<>();\n        location.put(\"lat\", 37.751d);\n        location.put(\"lon\", -97.822d);\n        assertThat(geoData.get(\"location\"), equalTo(location));\n    }\n","date":"2020-06-16 05:08:29","endLine":71,"groupId":"33191","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/3080891644f4e4571a2e514548a2a9cf044682.src","preCode":"    public void testCity() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-City.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000), false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"8.8.8.8\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"8.8.8.8\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(6));\n        assertThat(geoData.get(\"ip\"), equalTo(\"8.8.8.8\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"US\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"United States\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"North America\"));\n        assertThat(geoData.get(\"timezone\"), equalTo(\"America/Chicago\"));\n        Map<String, Object> location = new HashMap<>();\n        location.put(\"lat\", 37.751d);\n        location.put(\"lon\", -97.822d);\n        assertThat(geoData.get(\"location\"), equalTo(location));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-06-16 05:08:29","commitOrder":4,"curCode":"    public void testCountry() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), null, \"source_field\",\n                loader(\"/GeoLite2-Country.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000), false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"82.170.213.79\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"82.170.213.79\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(4));\n        assertThat(geoData.get(\"ip\"), equalTo(\"82.170.213.79\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"NL\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"Netherlands\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"Europe\"));\n    }\n","date":"2020-06-16 05:08:29","endLine":179,"groupId":"37202","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCountry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/3080891644f4e4571a2e514548a2a9cf044682.src","preCode":"    public void testCountry() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), \"source_field\",\n                loader(\"/GeoLite2-Country.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000), false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"82.170.213.79\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"82.170.213.79\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(4));\n        assertThat(geoData.get(\"ip\"), equalTo(\"82.170.213.79\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"NL\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"Netherlands\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"Europe\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"69a6a18d8dc3f95001cfe6f55c1451ac616f7e84","commitMessage":"@@@Add optional description parameter to ingest processors. (#57906)\n\nThis commit adds an optional field.  `description`.  to all ingest processors\nso that users can explain the purpose of the specific processor instance.\n\nCloses #56000.","date":"2020-06-16 05:08:29","modifiedFileCount":"125","status":"M","submitter":"Tal Levy"},{"authorTime":"2021-02-11 17:15:19","codes":[{"authorDate":"2021-02-11 17:15:19","commitOrder":5,"curCode":"    public void testCity() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), null, \"source_field\",\n                loader(\"/GeoLite2-City.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false, false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"8.8.8.8\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"8.8.8.8\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(6));\n        assertThat(geoData.get(\"ip\"), equalTo(\"8.8.8.8\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"US\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"United States\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"North America\"));\n        assertThat(geoData.get(\"timezone\"), equalTo(\"America/Chicago\"));\n        Map<String, Object> location = new HashMap<>();\n        location.put(\"lat\", 37.751d);\n        location.put(\"lon\", -97.822d);\n        assertThat(geoData.get(\"location\"), equalTo(location));\n    }\n","date":"2021-02-11 17:15:19","endLine":58,"groupId":"33191","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/8af704ff29965e734fe6a1b7bfd4aead5cda47.src","preCode":"    public void testCity() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), null, \"source_field\",\n                loader(\"/GeoLite2-City.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000), false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"8.8.8.8\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"8.8.8.8\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(6));\n        assertThat(geoData.get(\"ip\"), equalTo(\"8.8.8.8\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"US\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"United States\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"North America\"));\n        assertThat(geoData.get(\"timezone\"), equalTo(\"America/Chicago\"));\n        Map<String, Object> location = new HashMap<>();\n        location.put(\"lat\", 37.751d);\n        location.put(\"lon\", -97.822d);\n        assertThat(geoData.get(\"location\"), equalTo(location));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2021-02-11 17:15:19","commitOrder":5,"curCode":"    public void testCountry() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), null, \"source_field\",\n                loader(\"/GeoLite2-Country.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false, false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"82.170.213.79\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"82.170.213.79\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(4));\n        assertThat(geoData.get(\"ip\"), equalTo(\"82.170.213.79\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"NL\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"Netherlands\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"Europe\"));\n    }\n","date":"2021-02-11 17:15:19","endLine":159,"groupId":"37202","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCountry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/8af704ff29965e734fe6a1b7bfd4aead5cda47.src","preCode":"    public void testCountry() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), null, \"source_field\",\n                loader(\"/GeoLite2-Country.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false,\n                new GeoIpCache(1000), false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"82.170.213.79\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"82.170.213.79\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(4));\n        assertThat(geoData.get(\"ip\"), equalTo(\"82.170.213.79\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"NL\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"Netherlands\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"Europe\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"}],"commitId":"5529b3d583773eb2725ce8253856092787af383c","commitMessage":"@@@Changed how geoip cache is integrated with geoip processor. (#68581)\n\nThis change helps facilitate allowing maxmind databases to be updated at runtime.\nThis will make is easier to purge the cache if a database changes.\n\nMade the following changes:\n* Changed how geoip processor integrates with the cache. The cache is moved from the geoip processor to DatabaseReaderLazyLoader class.\n* Changed the cache key from ip + response class to ip + database_path.\n* Moved GeoIpCache from IngestGeoIpPlugin class to be a top level class.","date":"2021-02-11 17:15:19","modifiedFileCount":"5","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2021-06-18 19:51:12","codes":[{"authorDate":"2021-06-18 19:51:12","commitOrder":6,"curCode":"    public void testCity() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), null, \"source_field\",\n            loader(\"/GeoLite2-City.mmdb\"), () -> true, \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false, false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"8.8.8.8\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"8.8.8.8\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(6));\n        assertThat(geoData.get(\"ip\"), equalTo(\"8.8.8.8\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"US\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"United States\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"North America\"));\n        assertThat(geoData.get(\"timezone\"), equalTo(\"America/Chicago\"));\n        Map<String, Object> location = new HashMap<>();\n        location.put(\"lat\", 37.751d);\n        location.put(\"lon\", -97.822d);\n        assertThat(geoData.get(\"location\"), equalTo(location));\n    }\n","date":"2021-06-18 19:51:12","endLine":60,"groupId":"10132","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testCity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/9672aa30eb9aa2e4bf5df3149f5f52ccbfec95.src","preCode":"    public void testCity() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), null, \"source_field\",\n                loader(\"/GeoLite2-City.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false, false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"8.8.8.8\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"8.8.8.8\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(6));\n        assertThat(geoData.get(\"ip\"), equalTo(\"8.8.8.8\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"US\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"United States\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"North America\"));\n        assertThat(geoData.get(\"timezone\"), equalTo(\"America/Chicago\"));\n        Map<String, Object> location = new HashMap<>();\n        location.put(\"lat\", 37.751d);\n        location.put(\"lon\", -97.822d);\n        assertThat(geoData.get(\"location\"), equalTo(location));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2021-06-18 19:51:12","commitOrder":6,"curCode":"    public void testCountry() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), null, \"source_field\",\n            loader(\"/GeoLite2-Country.mmdb\"), () -> true, \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false, false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"82.170.213.79\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"82.170.213.79\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(4));\n        assertThat(geoData.get(\"ip\"), equalTo(\"82.170.213.79\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"NL\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"Netherlands\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"Europe\"));\n    }\n","date":"2021-06-18 19:51:12","endLine":161,"groupId":"10132","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testCountry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/9672aa30eb9aa2e4bf5df3149f5f52ccbfec95.src","preCode":"    public void testCountry() throws Exception {\n        GeoIpProcessor processor = new GeoIpProcessor(randomAlphaOfLength(10), null, \"source_field\",\n                loader(\"/GeoLite2-Country.mmdb\"), \"target_field\", EnumSet.allOf(GeoIpProcessor.Property.class), false, false);\n\n        Map<String, Object> document = new HashMap<>();\n        document.put(\"source_field\", \"82.170.213.79\");\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random(), document);\n        processor.execute(ingestDocument);\n\n        assertThat(ingestDocument.getSourceAndMetadata().get(\"source_field\"), equalTo(\"82.170.213.79\"));\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> geoData = (Map<String, Object>) ingestDocument.getSourceAndMetadata().get(\"target_field\");\n        assertThat(geoData.size(), equalTo(4));\n        assertThat(geoData.get(\"ip\"), equalTo(\"82.170.213.79\"));\n        assertThat(geoData.get(\"country_iso_code\"), equalTo(\"NL\"));\n        assertThat(geoData.get(\"country_name\"), equalTo(\"Netherlands\"));\n        assertThat(geoData.get(\"continent_name\"), equalTo(\"Europe\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"331a44ba425d9ae937a8f49a7f94d8d0a02f3b93","commitMessage":"@@@Change GeoIP downloader policy after 30 days of no updates (#74099)\n\nThis PR changes the way GeoIpDownloader and GeoIpProcessor handle situation when we are unable to update databases for 30 days. In that case:\n\nGeoIpDownloader will delete all chunks from .geoip_databases index\nDatabaseRegistry will delete all files on ingest nodes\nGeoIpProcessor will tag document with tags: [\"_geoip_expired_database\"] field (same way as in Logstash)\nThis change also fixes bug with that breaks DatabaseRegistry and when it tires to download databases after updating timestamp only (GeoIpDownloader checks if there are new databases and updates timestamp because local databases are up to date)","date":"2021-06-18 19:51:12","modifiedFileCount":"15","status":"M","submitter":"Przemko Robakowski"}]
