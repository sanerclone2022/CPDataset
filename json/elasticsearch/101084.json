[{"authorTime":"2020-08-06 04:58:53","codes":[{"authorDate":"2020-08-06 04:58:53","commitOrder":1,"curCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(PainlessLookup.class);\n        fieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(fieldNode);\n\n        fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(FunctionTable.class);\n        fieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(fieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode functionNode = new FunctionNode();\n            functionNode.setLocation(internalLocation);\n            functionNode.setReturnType(CallSite.class);\n            functionNode.setName(\"$bootstrapDef\");\n            functionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            functionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            functionNode.setStatic(true);\n            functionNode.setVarArgs(true);\n            functionNode.setSynthetic(true);\n            functionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(functionNode);\n\n            BlockNode blockNode = new BlockNode();\n            blockNode.setLocation(internalLocation);\n            blockNode.setAllEscape(true);\n            blockNode.setStatementCount(1);\n\n            functionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode();\n            returnNode.setLocation(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            CallNode callNode = new CallNode();\n            callNode.setLocation(internalLocation);\n            callNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(callNode);\n\n            StaticNode staticNode = new StaticNode();\n            staticNode.setLocation(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            callNode.setLeftNode(staticNode);\n\n            CallSubNode callSubNode = new CallSubNode();\n            callSubNode.setLocation(internalLocation);\n            callSubNode.setExpressionType(CallSite.class);\n            callSubNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            callSubNode.setBox(DefBootstrap.class);\n\n            callNode.setRightNode(callSubNode);\n\n            MemberFieldLoadNode memberFieldLoadNode = new MemberFieldLoadNode();\n            memberFieldLoadNode.setLocation(internalLocation);\n            memberFieldLoadNode.setExpressionType(PainlessLookup.class);\n            memberFieldLoadNode.setName(\"$DEFINITION\");\n            memberFieldLoadNode.setStatic(true);\n\n            callSubNode.addArgumentNode(memberFieldLoadNode);\n\n            memberFieldLoadNode = new MemberFieldLoadNode();\n            memberFieldLoadNode.setLocation(internalLocation);\n            memberFieldLoadNode.setExpressionType(FunctionTable.class);\n            memberFieldLoadNode.setName(\"$FUNCTIONS\");\n            memberFieldLoadNode.setStatic(true);\n\n            callSubNode.addArgumentNode(memberFieldLoadNode);\n\n            VariableNode variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(Lookup.class);\n            variableNode.setName(\"methodHandlesLookup\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(String.class);\n            variableNode.setName(\"name\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(MethodType.class);\n            variableNode.setName(\"type\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(int.class);\n            variableNode.setName(\"initialDepth\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(int.class);\n            variableNode.setName(\"flavor\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(Object[].class);\n            variableNode.setName(\"args\");\n\n            callSubNode.addArgumentNode(variableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","date":"2020-08-06 04:58:53","endLine":364,"groupId":"32253","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"injectBootstrapMethod","params":"(ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/03/79055b13dcb74561c5ebb5de1d500c338fbecb.src","preCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(PainlessLookup.class);\n        fieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(fieldNode);\n\n        fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(FunctionTable.class);\n        fieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(fieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode functionNode = new FunctionNode();\n            functionNode.setLocation(internalLocation);\n            functionNode.setReturnType(CallSite.class);\n            functionNode.setName(\"$bootstrapDef\");\n            functionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            functionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            functionNode.setStatic(true);\n            functionNode.setVarArgs(true);\n            functionNode.setSynthetic(true);\n            functionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(functionNode);\n\n            BlockNode blockNode = new BlockNode();\n            blockNode.setLocation(internalLocation);\n            blockNode.setAllEscape(true);\n            blockNode.setStatementCount(1);\n\n            functionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode();\n            returnNode.setLocation(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            CallNode callNode = new CallNode();\n            callNode.setLocation(internalLocation);\n            callNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(callNode);\n\n            StaticNode staticNode = new StaticNode();\n            staticNode.setLocation(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            callNode.setLeftNode(staticNode);\n\n            CallSubNode callSubNode = new CallSubNode();\n            callSubNode.setLocation(internalLocation);\n            callSubNode.setExpressionType(CallSite.class);\n            callSubNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            callSubNode.setBox(DefBootstrap.class);\n\n            callNode.setRightNode(callSubNode);\n\n            MemberFieldLoadNode memberFieldLoadNode = new MemberFieldLoadNode();\n            memberFieldLoadNode.setLocation(internalLocation);\n            memberFieldLoadNode.setExpressionType(PainlessLookup.class);\n            memberFieldLoadNode.setName(\"$DEFINITION\");\n            memberFieldLoadNode.setStatic(true);\n\n            callSubNode.addArgumentNode(memberFieldLoadNode);\n\n            memberFieldLoadNode = new MemberFieldLoadNode();\n            memberFieldLoadNode.setLocation(internalLocation);\n            memberFieldLoadNode.setExpressionType(FunctionTable.class);\n            memberFieldLoadNode.setName(\"$FUNCTIONS\");\n            memberFieldLoadNode.setStatic(true);\n\n            callSubNode.addArgumentNode(memberFieldLoadNode);\n\n            VariableNode variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(Lookup.class);\n            variableNode.setName(\"methodHandlesLookup\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(String.class);\n            variableNode.setName(\"name\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(MethodType.class);\n            variableNode.setName(\"type\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(int.class);\n            variableNode.setName(\"initialDepth\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(int.class);\n            variableNode.setName(\"flavor\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(Object[].class);\n            variableNode.setName(\"args\");\n\n            callSubNode.addArgumentNode(variableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"B"},{"authorDate":"2020-08-06 04:58:53","commitOrder":1,"curCode":"    protected void injectStaticFieldsAndGetters(ClassNode classNode) {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(String.class);\n        fieldNode.setName(\"$NAME\");\n\n        classNode.addFieldNode(fieldNode);\n\n        fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(String.class);\n        fieldNode.setName(\"$SOURCE\");\n\n        classNode.addFieldNode(fieldNode);\n\n        fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(BitSet.class);\n        fieldNode.setName(\"$STATEMENTS\");\n\n        classNode.addFieldNode(fieldNode);\n\n        FunctionNode functionNode = new FunctionNode();\n        functionNode.setLocation(internalLocation);\n        functionNode.setName(\"getName\");\n        functionNode.setReturnType(String.class);\n        functionNode.setStatic(false);\n        functionNode.setVarArgs(false);\n        functionNode.setSynthetic(true);\n        functionNode.setMaxLoopCounter(0);\n\n        classNode.addFunctionNode(functionNode);\n\n        BlockNode blockNode = new BlockNode();\n        blockNode.setLocation(internalLocation);\n        blockNode.setAllEscape(true);\n        blockNode.setStatementCount(1);\n\n        functionNode.setBlockNode(blockNode);\n\n        ReturnNode returnNode = new ReturnNode();\n        returnNode.setLocation(internalLocation);\n\n        blockNode.addStatementNode(returnNode);\n\n        MemberFieldLoadNode memberFieldLoadNode = new MemberFieldLoadNode();\n        memberFieldLoadNode.setLocation(internalLocation);\n        memberFieldLoadNode.setExpressionType(String.class);\n        memberFieldLoadNode.setName(\"$NAME\");\n        memberFieldLoadNode.setStatic(true);\n\n        returnNode.setExpressionNode(memberFieldLoadNode);\n\n        functionNode = new FunctionNode();\n        functionNode.setLocation(internalLocation);\n        functionNode.setName(\"getSource\");\n        functionNode.setReturnType(String.class);\n        functionNode.setStatic(false);\n        functionNode.setVarArgs(false);\n        functionNode.setSynthetic(true);\n        functionNode.setMaxLoopCounter(0);\n\n        classNode.addFunctionNode(functionNode);\n\n        blockNode = new BlockNode();\n        blockNode.setLocation(internalLocation);\n        blockNode.setAllEscape(true);\n        blockNode.setStatementCount(1);\n\n        functionNode.setBlockNode(blockNode);\n\n        returnNode = new ReturnNode();\n        returnNode.setLocation(internalLocation);\n\n        blockNode.addStatementNode(returnNode);\n\n        memberFieldLoadNode = new MemberFieldLoadNode();\n        memberFieldLoadNode.setLocation(internalLocation);\n        memberFieldLoadNode.setExpressionType(String.class);\n        memberFieldLoadNode.setName(\"$SOURCE\");\n        memberFieldLoadNode.setStatic(true);\n\n        returnNode.setExpressionNode(memberFieldLoadNode);\n\n        functionNode = new FunctionNode();\n        functionNode.setLocation(internalLocation);\n        functionNode.setName(\"getStatements\");\n        functionNode.setReturnType(BitSet.class);\n        functionNode.setStatic(false);\n        functionNode.setVarArgs(false);\n        functionNode.setSynthetic(true);\n        functionNode.setMaxLoopCounter(0);\n\n        classNode.addFunctionNode(functionNode);\n\n        blockNode = new BlockNode();\n        blockNode.setLocation(internalLocation);\n        blockNode.setAllEscape(true);\n        blockNode.setStatementCount(1);\n\n        functionNode.setBlockNode(blockNode);\n\n        returnNode = new ReturnNode();\n        returnNode.setLocation(internalLocation);\n\n        blockNode.addStatementNode(returnNode);\n\n        memberFieldLoadNode = new MemberFieldLoadNode();\n        memberFieldLoadNode.setLocation(internalLocation);\n        memberFieldLoadNode.setExpressionType(BitSet.class);\n        memberFieldLoadNode.setName(\"$STATEMENTS\");\n        memberFieldLoadNode.setStatic(true);\n\n        returnNode.setExpressionNode(memberFieldLoadNode);\n    }\n","date":"2020-08-06 04:58:53","endLine":276,"groupId":"47260","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"injectStaticFieldsAndGetters","params":"(ClassNodeclassNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/08/f46f662fe69446eee03d94a3cfd46264a8e5d3.src","preCode":"    protected void injectStaticFieldsAndGetters(ClassNode classNode) {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(String.class);\n        fieldNode.setName(\"$NAME\");\n\n        classNode.addFieldNode(fieldNode);\n\n        fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(String.class);\n        fieldNode.setName(\"$SOURCE\");\n\n        classNode.addFieldNode(fieldNode);\n\n        fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(BitSet.class);\n        fieldNode.setName(\"$STATEMENTS\");\n\n        classNode.addFieldNode(fieldNode);\n\n        FunctionNode functionNode = new FunctionNode();\n        functionNode.setLocation(internalLocation);\n        functionNode.setName(\"getName\");\n        functionNode.setReturnType(String.class);\n        functionNode.setStatic(false);\n        functionNode.setVarArgs(false);\n        functionNode.setSynthetic(true);\n        functionNode.setMaxLoopCounter(0);\n\n        classNode.addFunctionNode(functionNode);\n\n        BlockNode blockNode = new BlockNode();\n        blockNode.setLocation(internalLocation);\n        blockNode.setAllEscape(true);\n        blockNode.setStatementCount(1);\n\n        functionNode.setBlockNode(blockNode);\n\n        ReturnNode returnNode = new ReturnNode();\n        returnNode.setLocation(internalLocation);\n\n        blockNode.addStatementNode(returnNode);\n\n        MemberFieldLoadNode memberFieldLoadNode = new MemberFieldLoadNode();\n        memberFieldLoadNode.setLocation(internalLocation);\n        memberFieldLoadNode.setExpressionType(String.class);\n        memberFieldLoadNode.setName(\"$NAME\");\n        memberFieldLoadNode.setStatic(true);\n\n        returnNode.setExpressionNode(memberFieldLoadNode);\n\n        functionNode = new FunctionNode();\n        functionNode.setLocation(internalLocation);\n        functionNode.setName(\"getSource\");\n        functionNode.setReturnType(String.class);\n        functionNode.setStatic(false);\n        functionNode.setVarArgs(false);\n        functionNode.setSynthetic(true);\n        functionNode.setMaxLoopCounter(0);\n\n        classNode.addFunctionNode(functionNode);\n\n        blockNode = new BlockNode();\n        blockNode.setLocation(internalLocation);\n        blockNode.setAllEscape(true);\n        blockNode.setStatementCount(1);\n\n        functionNode.setBlockNode(blockNode);\n\n        returnNode = new ReturnNode();\n        returnNode.setLocation(internalLocation);\n\n        blockNode.addStatementNode(returnNode);\n\n        memberFieldLoadNode = new MemberFieldLoadNode();\n        memberFieldLoadNode.setLocation(internalLocation);\n        memberFieldLoadNode.setExpressionType(String.class);\n        memberFieldLoadNode.setName(\"$SOURCE\");\n        memberFieldLoadNode.setStatic(true);\n\n        returnNode.setExpressionNode(memberFieldLoadNode);\n\n        functionNode = new FunctionNode();\n        functionNode.setLocation(internalLocation);\n        functionNode.setName(\"getStatements\");\n        functionNode.setReturnType(BitSet.class);\n        functionNode.setStatic(false);\n        functionNode.setVarArgs(false);\n        functionNode.setSynthetic(true);\n        functionNode.setMaxLoopCounter(0);\n\n        classNode.addFunctionNode(functionNode);\n\n        blockNode = new BlockNode();\n        blockNode.setLocation(internalLocation);\n        blockNode.setAllEscape(true);\n        blockNode.setStatementCount(1);\n\n        functionNode.setBlockNode(blockNode);\n\n        returnNode = new ReturnNode();\n        returnNode.setLocation(internalLocation);\n\n        blockNode.addStatementNode(returnNode);\n\n        memberFieldLoadNode = new MemberFieldLoadNode();\n        memberFieldLoadNode.setLocation(internalLocation);\n        memberFieldLoadNode.setExpressionType(BitSet.class);\n        memberFieldLoadNode.setName(\"$STATEMENTS\");\n        memberFieldLoadNode.setStatic(true);\n\n        returnNode.setExpressionNode(memberFieldLoadNode);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"45402118936d96100445723a849c869627cf1dc2","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-06 04:58:53","modifiedFileCount":"224","status":"B","submitter":"Nik Everett"},{"authorTime":"2020-08-07 05:14:20","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":2,"curCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode();\n            irFunctionNode.setLocation(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode();\n            blockNode.setLocation(internalLocation);\n            blockNode.setAllEscape(true);\n            blockNode.setStatementCount(1);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode();\n            returnNode.setLocation(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            AccessNode irAccessNode = new AccessNode();\n            irAccessNode.setLocation(internalLocation);\n            irAccessNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irAccessNode);\n\n            StaticNode staticNode = new StaticNode();\n            staticNode.setLocation(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irAccessNode.setLeftNode(staticNode);\n\n            CallSubNode callSubNode = new CallSubNode();\n            callSubNode.setLocation(internalLocation);\n            callSubNode.setExpressionType(CallSite.class);\n            callSubNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            callSubNode.setBox(DefBootstrap.class);\n\n            irAccessNode.setRightNode(callSubNode);\n\n            MemberFieldLoadNode memberFieldLoadNode = new MemberFieldLoadNode();\n            memberFieldLoadNode.setLocation(internalLocation);\n            memberFieldLoadNode.setExpressionType(PainlessLookup.class);\n            memberFieldLoadNode.setName(\"$DEFINITION\");\n            memberFieldLoadNode.setStatic(true);\n\n            callSubNode.addArgumentNode(memberFieldLoadNode);\n\n            memberFieldLoadNode = new MemberFieldLoadNode();\n            memberFieldLoadNode.setLocation(internalLocation);\n            memberFieldLoadNode.setExpressionType(FunctionTable.class);\n            memberFieldLoadNode.setName(\"$FUNCTIONS\");\n            memberFieldLoadNode.setStatic(true);\n\n            callSubNode.addArgumentNode(memberFieldLoadNode);\n\n            VariableNode variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(Lookup.class);\n            variableNode.setName(\"methodHandlesLookup\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(String.class);\n            variableNode.setName(\"name\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(MethodType.class);\n            variableNode.setName(\"type\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(int.class);\n            variableNode.setName(\"initialDepth\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(int.class);\n            variableNode.setName(\"flavor\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(Object[].class);\n            variableNode.setName(\"args\");\n\n            callSubNode.addArgumentNode(variableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","date":"2020-08-07 05:14:20","endLine":362,"groupId":"32253","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"injectBootstrapMethod","params":"(ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/d1bb1d5efb3553ce277bad6202c143a75db8a1.src","preCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(PainlessLookup.class);\n        fieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(fieldNode);\n\n        fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(FunctionTable.class);\n        fieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(fieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode functionNode = new FunctionNode();\n            functionNode.setLocation(internalLocation);\n            functionNode.setReturnType(CallSite.class);\n            functionNode.setName(\"$bootstrapDef\");\n            functionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            functionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            functionNode.setStatic(true);\n            functionNode.setVarArgs(true);\n            functionNode.setSynthetic(true);\n            functionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(functionNode);\n\n            BlockNode blockNode = new BlockNode();\n            blockNode.setLocation(internalLocation);\n            blockNode.setAllEscape(true);\n            blockNode.setStatementCount(1);\n\n            functionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode();\n            returnNode.setLocation(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            CallNode callNode = new CallNode();\n            callNode.setLocation(internalLocation);\n            callNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(callNode);\n\n            StaticNode staticNode = new StaticNode();\n            staticNode.setLocation(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            callNode.setLeftNode(staticNode);\n\n            CallSubNode callSubNode = new CallSubNode();\n            callSubNode.setLocation(internalLocation);\n            callSubNode.setExpressionType(CallSite.class);\n            callSubNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            callSubNode.setBox(DefBootstrap.class);\n\n            callNode.setRightNode(callSubNode);\n\n            MemberFieldLoadNode memberFieldLoadNode = new MemberFieldLoadNode();\n            memberFieldLoadNode.setLocation(internalLocation);\n            memberFieldLoadNode.setExpressionType(PainlessLookup.class);\n            memberFieldLoadNode.setName(\"$DEFINITION\");\n            memberFieldLoadNode.setStatic(true);\n\n            callSubNode.addArgumentNode(memberFieldLoadNode);\n\n            memberFieldLoadNode = new MemberFieldLoadNode();\n            memberFieldLoadNode.setLocation(internalLocation);\n            memberFieldLoadNode.setExpressionType(FunctionTable.class);\n            memberFieldLoadNode.setName(\"$FUNCTIONS\");\n            memberFieldLoadNode.setStatic(true);\n\n            callSubNode.addArgumentNode(memberFieldLoadNode);\n\n            VariableNode variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(Lookup.class);\n            variableNode.setName(\"methodHandlesLookup\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(String.class);\n            variableNode.setName(\"name\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(MethodType.class);\n            variableNode.setName(\"type\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(int.class);\n            variableNode.setName(\"initialDepth\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(int.class);\n            variableNode.setName(\"flavor\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(Object[].class);\n            variableNode.setName(\"args\");\n\n            callSubNode.addArgumentNode(variableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2020-08-07 05:14:20","commitOrder":2,"curCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        MemberFieldLoadNode irMemberFieldLoadNode = new MemberFieldLoadNode();\n        irMemberFieldLoadNode.setLocation(internalLocation);\n        irMemberFieldLoadNode.setExpressionType(String.class);\n        irMemberFieldLoadNode.setName(\"$NAME\");\n        irMemberFieldLoadNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irMemberFieldLoadNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irMemberFieldLoadNode = new MemberFieldLoadNode();\n        irMemberFieldLoadNode.setLocation(internalLocation);\n        irMemberFieldLoadNode.setExpressionType(String.class);\n        irMemberFieldLoadNode.setName(\"$SOURCE\");\n        irMemberFieldLoadNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irMemberFieldLoadNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irMemberFieldLoadNode = new MemberFieldLoadNode();\n        irMemberFieldLoadNode.setLocation(internalLocation);\n        irMemberFieldLoadNode.setExpressionType(BitSet.class);\n        irMemberFieldLoadNode.setName(\"$STATEMENTS\");\n        irMemberFieldLoadNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irMemberFieldLoadNode);\n    }\n","date":"2020-08-07 05:14:20","endLine":275,"groupId":"47260","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"injectStaticFieldsAndGetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0c/044175737a9dac41591fb1bbcca53bf9b9c4cb.src","preCode":"    protected void injectStaticFieldsAndGetters(ClassNode classNode) {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(String.class);\n        fieldNode.setName(\"$NAME\");\n\n        classNode.addFieldNode(fieldNode);\n\n        fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(String.class);\n        fieldNode.setName(\"$SOURCE\");\n\n        classNode.addFieldNode(fieldNode);\n\n        fieldNode = new FieldNode();\n        fieldNode.setLocation(internalLocation);\n        fieldNode.setModifiers(modifiers);\n        fieldNode.setFieldType(BitSet.class);\n        fieldNode.setName(\"$STATEMENTS\");\n\n        classNode.addFieldNode(fieldNode);\n\n        FunctionNode functionNode = new FunctionNode();\n        functionNode.setLocation(internalLocation);\n        functionNode.setName(\"getName\");\n        functionNode.setReturnType(String.class);\n        functionNode.setStatic(false);\n        functionNode.setVarArgs(false);\n        functionNode.setSynthetic(true);\n        functionNode.setMaxLoopCounter(0);\n\n        classNode.addFunctionNode(functionNode);\n\n        BlockNode blockNode = new BlockNode();\n        blockNode.setLocation(internalLocation);\n        blockNode.setAllEscape(true);\n        blockNode.setStatementCount(1);\n\n        functionNode.setBlockNode(blockNode);\n\n        ReturnNode returnNode = new ReturnNode();\n        returnNode.setLocation(internalLocation);\n\n        blockNode.addStatementNode(returnNode);\n\n        MemberFieldLoadNode memberFieldLoadNode = new MemberFieldLoadNode();\n        memberFieldLoadNode.setLocation(internalLocation);\n        memberFieldLoadNode.setExpressionType(String.class);\n        memberFieldLoadNode.setName(\"$NAME\");\n        memberFieldLoadNode.setStatic(true);\n\n        returnNode.setExpressionNode(memberFieldLoadNode);\n\n        functionNode = new FunctionNode();\n        functionNode.setLocation(internalLocation);\n        functionNode.setName(\"getSource\");\n        functionNode.setReturnType(String.class);\n        functionNode.setStatic(false);\n        functionNode.setVarArgs(false);\n        functionNode.setSynthetic(true);\n        functionNode.setMaxLoopCounter(0);\n\n        classNode.addFunctionNode(functionNode);\n\n        blockNode = new BlockNode();\n        blockNode.setLocation(internalLocation);\n        blockNode.setAllEscape(true);\n        blockNode.setStatementCount(1);\n\n        functionNode.setBlockNode(blockNode);\n\n        returnNode = new ReturnNode();\n        returnNode.setLocation(internalLocation);\n\n        blockNode.addStatementNode(returnNode);\n\n        memberFieldLoadNode = new MemberFieldLoadNode();\n        memberFieldLoadNode.setLocation(internalLocation);\n        memberFieldLoadNode.setExpressionType(String.class);\n        memberFieldLoadNode.setName(\"$SOURCE\");\n        memberFieldLoadNode.setStatic(true);\n\n        returnNode.setExpressionNode(memberFieldLoadNode);\n\n        functionNode = new FunctionNode();\n        functionNode.setLocation(internalLocation);\n        functionNode.setName(\"getStatements\");\n        functionNode.setReturnType(BitSet.class);\n        functionNode.setStatic(false);\n        functionNode.setVarArgs(false);\n        functionNode.setSynthetic(true);\n        functionNode.setMaxLoopCounter(0);\n\n        classNode.addFunctionNode(functionNode);\n\n        blockNode = new BlockNode();\n        blockNode.setLocation(internalLocation);\n        blockNode.setAllEscape(true);\n        blockNode.setStatementCount(1);\n\n        functionNode.setBlockNode(blockNode);\n\n        returnNode = new ReturnNode();\n        returnNode.setLocation(internalLocation);\n\n        blockNode.addStatementNode(returnNode);\n\n        memberFieldLoadNode = new MemberFieldLoadNode();\n        memberFieldLoadNode.setLocation(internalLocation);\n        memberFieldLoadNode.setExpressionType(BitSet.class);\n        memberFieldLoadNode.setName(\"$STATEMENTS\");\n        memberFieldLoadNode.setStatic(true);\n\n        returnNode.setExpressionNode(memberFieldLoadNode);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"5e3ea6eb11c68bdcc9adda51715a6e1fea9186d6","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-07 05:14:20","modifiedFileCount":"73","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-08-11 22:44:55","codes":[{"authorDate":"2020-08-11 22:44:55","commitOrder":3,"curCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode();\n            irFunctionNode.setLocation(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode();\n            blockNode.setLocation(internalLocation);\n            blockNode.setAllEscape(true);\n            blockNode.setStatementCount(1);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode();\n            returnNode.setLocation(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            AccessNode irAccessNode = new AccessNode();\n            irAccessNode.setLocation(internalLocation);\n            irAccessNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irAccessNode);\n\n            StaticNode staticNode = new StaticNode();\n            staticNode.setLocation(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irAccessNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode();\n            invokeCallNode.setLocation(internalLocation);\n            invokeCallNode.setExpressionType(CallSite.class);\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irAccessNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(PainlessLookup.class);\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(FunctionTable.class);\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            VariableNode irVariableNode = new VariableNode();\n            irVariableNode.setLocation(internalLocation);\n            irVariableNode.setExpressionType(Lookup.class);\n            irVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irVariableNode);\n\n            irVariableNode = new VariableNode();\n            irVariableNode.setLocation(internalLocation);\n            irVariableNode.setExpressionType(String.class);\n            irVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irVariableNode);\n\n            irVariableNode = new VariableNode();\n            irVariableNode.setLocation(internalLocation);\n            irVariableNode.setExpressionType(MethodType.class);\n            irVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irVariableNode);\n\n            irVariableNode = new VariableNode();\n            irVariableNode.setLocation(internalLocation);\n            irVariableNode.setExpressionType(int.class);\n            irVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irVariableNode);\n\n            irVariableNode = new VariableNode();\n            irVariableNode.setLocation(internalLocation);\n            irVariableNode.setExpressionType(int.class);\n            irVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irVariableNode);\n\n            irVariableNode = new VariableNode();\n            irVariableNode.setLocation(internalLocation);\n            irVariableNode.setExpressionType(Object[].class);\n            irVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","date":"2020-08-11 22:44:55","endLine":365,"groupId":"32253","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"injectBootstrapMethod","params":"(ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/5c23101776af77724eda830edb0ad642979114.src","preCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode();\n            irFunctionNode.setLocation(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode();\n            blockNode.setLocation(internalLocation);\n            blockNode.setAllEscape(true);\n            blockNode.setStatementCount(1);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode();\n            returnNode.setLocation(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            AccessNode irAccessNode = new AccessNode();\n            irAccessNode.setLocation(internalLocation);\n            irAccessNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irAccessNode);\n\n            StaticNode staticNode = new StaticNode();\n            staticNode.setLocation(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irAccessNode.setLeftNode(staticNode);\n\n            CallSubNode callSubNode = new CallSubNode();\n            callSubNode.setLocation(internalLocation);\n            callSubNode.setExpressionType(CallSite.class);\n            callSubNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            callSubNode.setBox(DefBootstrap.class);\n\n            irAccessNode.setRightNode(callSubNode);\n\n            MemberFieldLoadNode memberFieldLoadNode = new MemberFieldLoadNode();\n            memberFieldLoadNode.setLocation(internalLocation);\n            memberFieldLoadNode.setExpressionType(PainlessLookup.class);\n            memberFieldLoadNode.setName(\"$DEFINITION\");\n            memberFieldLoadNode.setStatic(true);\n\n            callSubNode.addArgumentNode(memberFieldLoadNode);\n\n            memberFieldLoadNode = new MemberFieldLoadNode();\n            memberFieldLoadNode.setLocation(internalLocation);\n            memberFieldLoadNode.setExpressionType(FunctionTable.class);\n            memberFieldLoadNode.setName(\"$FUNCTIONS\");\n            memberFieldLoadNode.setStatic(true);\n\n            callSubNode.addArgumentNode(memberFieldLoadNode);\n\n            VariableNode variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(Lookup.class);\n            variableNode.setName(\"methodHandlesLookup\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(String.class);\n            variableNode.setName(\"name\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(MethodType.class);\n            variableNode.setName(\"type\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(int.class);\n            variableNode.setName(\"initialDepth\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(int.class);\n            variableNode.setName(\"flavor\");\n\n            callSubNode.addArgumentNode(variableNode);\n\n            variableNode = new VariableNode();\n            variableNode.setLocation(internalLocation);\n            variableNode.setExpressionType(Object[].class);\n            variableNode.setName(\"args\");\n\n            callSubNode.addArgumentNode(variableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2020-08-11 22:44:55","commitOrder":3,"curCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(BitSet.class);\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","date":"2020-08-11 22:44:55","endLine":275,"groupId":"47260","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"injectStaticFieldsAndGetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/f565fb6fe297d4e18229c1dc948510533dd8e8.src","preCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        MemberFieldLoadNode irMemberFieldLoadNode = new MemberFieldLoadNode();\n        irMemberFieldLoadNode.setLocation(internalLocation);\n        irMemberFieldLoadNode.setExpressionType(String.class);\n        irMemberFieldLoadNode.setName(\"$NAME\");\n        irMemberFieldLoadNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irMemberFieldLoadNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irMemberFieldLoadNode = new MemberFieldLoadNode();\n        irMemberFieldLoadNode.setLocation(internalLocation);\n        irMemberFieldLoadNode.setExpressionType(String.class);\n        irMemberFieldLoadNode.setName(\"$SOURCE\");\n        irMemberFieldLoadNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irMemberFieldLoadNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irMemberFieldLoadNode = new MemberFieldLoadNode();\n        irMemberFieldLoadNode.setLocation(internalLocation);\n        irMemberFieldLoadNode.setExpressionType(BitSet.class);\n        irMemberFieldLoadNode.setName(\"$STATEMENTS\");\n        irMemberFieldLoadNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irMemberFieldLoadNode);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"fd8b557935c58913805044a03de3453e45ab0318","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-11 22:44:55","modifiedFileCount":"130","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-08-11 22:44:55","codes":[{"authorDate":"2020-08-18 01:34:59","commitOrder":4,"curCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode();\n            irFunctionNode.setLocation(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode();\n            blockNode.setLocation(internalLocation);\n            blockNode.setAllEscape(true);\n            blockNode.setStatementCount(1);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode();\n            returnNode.setLocation(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            BinaryNode irBinaryNode = new BinaryNode();\n            irBinaryNode.setLocation(internalLocation);\n            irBinaryNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irBinaryNode);\n\n            StaticNode staticNode = new StaticNode();\n            staticNode.setLocation(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irBinaryNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode();\n            invokeCallNode.setLocation(internalLocation);\n            invokeCallNode.setExpressionType(CallSite.class);\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irBinaryNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(PainlessLookup.class);\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(FunctionTable.class);\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            LoadVariableNode irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(Lookup.class);\n            irLoadVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(String.class);\n            irLoadVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(MethodType.class);\n            irLoadVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(Object[].class);\n            irLoadVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","date":"2020-08-18 01:34:59","endLine":381,"groupId":"32253","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"injectBootstrapMethod","params":"(ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/bee051d2a22c3fc46156d0536258e7d151aaeb.src","preCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode();\n            irFunctionNode.setLocation(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode();\n            blockNode.setLocation(internalLocation);\n            blockNode.setAllEscape(true);\n            blockNode.setStatementCount(1);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode();\n            returnNode.setLocation(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            AccessNode irAccessNode = new AccessNode();\n            irAccessNode.setLocation(internalLocation);\n            irAccessNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irAccessNode);\n\n            StaticNode staticNode = new StaticNode();\n            staticNode.setLocation(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irAccessNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode();\n            invokeCallNode.setLocation(internalLocation);\n            invokeCallNode.setExpressionType(CallSite.class);\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irAccessNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(PainlessLookup.class);\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(FunctionTable.class);\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            VariableNode irVariableNode = new VariableNode();\n            irVariableNode.setLocation(internalLocation);\n            irVariableNode.setExpressionType(Lookup.class);\n            irVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irVariableNode);\n\n            irVariableNode = new VariableNode();\n            irVariableNode.setLocation(internalLocation);\n            irVariableNode.setExpressionType(String.class);\n            irVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irVariableNode);\n\n            irVariableNode = new VariableNode();\n            irVariableNode.setLocation(internalLocation);\n            irVariableNode.setExpressionType(MethodType.class);\n            irVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irVariableNode);\n\n            irVariableNode = new VariableNode();\n            irVariableNode.setLocation(internalLocation);\n            irVariableNode.setExpressionType(int.class);\n            irVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irVariableNode);\n\n            irVariableNode = new VariableNode();\n            irVariableNode.setLocation(internalLocation);\n            irVariableNode.setExpressionType(int.class);\n            irVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irVariableNode);\n\n            irVariableNode = new VariableNode();\n            irVariableNode.setLocation(internalLocation);\n            irVariableNode.setExpressionType(Object[].class);\n            irVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2020-08-11 22:44:55","commitOrder":4,"curCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(BitSet.class);\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","date":"2020-08-11 22:44:55","endLine":275,"groupId":"47260","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"injectStaticFieldsAndGetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/f565fb6fe297d4e18229c1dc948510533dd8e8.src","preCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(BitSet.class);\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"N"}],"commitId":"99c885e5dad18c791ff91d03542abf85ad983ad7","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-18 01:34:59","modifiedFileCount":"346","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-09-01 20:12:53","codes":[{"authorDate":"2020-09-01 20:12:53","commitOrder":5,"curCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode();\n            irFunctionNode.setLocation(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode();\n            blockNode.setLocation(internalLocation);\n            blockNode.setAllEscape(true);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode();\n            returnNode.setLocation(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            BinaryNode irBinaryNode = new BinaryNode();\n            irBinaryNode.setLocation(internalLocation);\n            irBinaryNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irBinaryNode);\n\n            StaticNode staticNode = new StaticNode();\n            staticNode.setLocation(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irBinaryNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode();\n            invokeCallNode.setLocation(internalLocation);\n            invokeCallNode.setExpressionType(CallSite.class);\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irBinaryNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(PainlessLookup.class);\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(FunctionTable.class);\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            LoadVariableNode irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(Lookup.class);\n            irLoadVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(String.class);\n            irLoadVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(MethodType.class);\n            irLoadVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(Object[].class);\n            irLoadVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","date":"2020-09-01 20:12:53","endLine":381,"groupId":"47260","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"injectBootstrapMethod","params":"(ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/e464f223abc69a8079a8582784ce13a28ba888.src","preCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode();\n            irFunctionNode.setLocation(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode();\n            blockNode.setLocation(internalLocation);\n            blockNode.setAllEscape(true);\n            blockNode.setStatementCount(1);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode();\n            returnNode.setLocation(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            BinaryNode irBinaryNode = new BinaryNode();\n            irBinaryNode.setLocation(internalLocation);\n            irBinaryNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irBinaryNode);\n\n            StaticNode staticNode = new StaticNode();\n            staticNode.setLocation(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irBinaryNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode();\n            invokeCallNode.setLocation(internalLocation);\n            invokeCallNode.setExpressionType(CallSite.class);\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irBinaryNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(PainlessLookup.class);\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(FunctionTable.class);\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            LoadVariableNode irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(Lookup.class);\n            irLoadVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(String.class);\n            irLoadVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(MethodType.class);\n            irLoadVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(Object[].class);\n            irLoadVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2020-09-01 20:12:53","commitOrder":5,"curCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(BitSet.class);\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","date":"2020-09-01 20:12:53","endLine":277,"groupId":"47260","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"injectStaticFieldsAndGetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fc/b624ad19d9b6b43bc6505df2efdeefa5406614.src","preCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n        irBlockNode.setStatementCount(1);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(BitSet.class);\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"d47d450baff4951da9379234a1b04d417b7ec6af","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-09-01 20:12:53","modifiedFileCount":"119","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-09-01 20:12:53","codes":[{"authorDate":"2020-09-04 02:04:16","commitOrder":6,"curCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode();\n            irFunctionNode.setLocation(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode();\n            blockNode.setLocation(internalLocation);\n            blockNode.setAllEscape(true);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode();\n            returnNode.setLocation(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            BinaryImplNode irBinaryImplNode = new BinaryImplNode();\n            irBinaryImplNode.setLocation(internalLocation);\n            irBinaryImplNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irBinaryImplNode);\n\n            StaticNode staticNode = new StaticNode();\n            staticNode.setLocation(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irBinaryImplNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode();\n            invokeCallNode.setLocation(internalLocation);\n            invokeCallNode.setExpressionType(CallSite.class);\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irBinaryImplNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(PainlessLookup.class);\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(FunctionTable.class);\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            LoadVariableNode irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(Lookup.class);\n            irLoadVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(String.class);\n            irLoadVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(MethodType.class);\n            irLoadVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(Object[].class);\n            irLoadVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","date":"2020-09-04 02:04:16","endLine":381,"groupId":"47260","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"injectBootstrapMethod","params":"(ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/c34992cadb0200afb9ceca244f0aabd0e04d9c.src","preCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode();\n            irFunctionNode.setLocation(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode();\n            blockNode.setLocation(internalLocation);\n            blockNode.setAllEscape(true);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode();\n            returnNode.setLocation(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            BinaryNode irBinaryNode = new BinaryNode();\n            irBinaryNode.setLocation(internalLocation);\n            irBinaryNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irBinaryNode);\n\n            StaticNode staticNode = new StaticNode();\n            staticNode.setLocation(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irBinaryNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode();\n            invokeCallNode.setLocation(internalLocation);\n            invokeCallNode.setExpressionType(CallSite.class);\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irBinaryNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(PainlessLookup.class);\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(FunctionTable.class);\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            LoadVariableNode irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(Lookup.class);\n            irLoadVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(String.class);\n            irLoadVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(MethodType.class);\n            irLoadVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(Object[].class);\n            irLoadVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2020-09-01 20:12:53","commitOrder":6,"curCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(BitSet.class);\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","date":"2020-09-01 20:12:53","endLine":277,"groupId":"47260","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"injectStaticFieldsAndGetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fc/b624ad19d9b6b43bc6505df2efdeefa5406614.src","preCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(BitSet.class);\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"N"}],"commitId":"0216a71dda795e7e7d8551b0bfa7d6170f6863ba","commitMessage":"@@@Change compound assignment structure to support String concatenation (#61825)\n\nThis change modifies the compound assignment structure of the ir tree to support string \nconcatenation in Java 8. The structure is changed so that when a StringBuilder is used for string \nconcatenation it will be the first value pushed onto the stack prior loading the left-hand side of the \ncompound assignment.","date":"2020-09-04 02:04:16","modifiedFileCount":"13","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-10-01 23:35:21","codes":[{"authorDate":"2020-10-01 23:35:21","commitOrder":7,"curCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode(internalLocation);\n            blockNode.setAllEscape(true);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            BinaryImplNode irBinaryImplNode = new BinaryImplNode(internalLocation);\n            irBinaryImplNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irBinaryImplNode);\n\n            StaticNode staticNode = new StaticNode(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irBinaryImplNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode(internalLocation);\n            invokeCallNode.setExpressionType(CallSite.class);\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irBinaryImplNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(PainlessLookup.class);\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(FunctionTable.class);\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            LoadVariableNode irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(Lookup.class);\n            irLoadVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(String.class);\n            irLoadVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(MethodType.class);\n            irLoadVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(Object[].class);\n            irLoadVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","date":"2020-10-01 23:35:21","endLine":365,"groupId":"0","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"injectBootstrapMethod","params":"(ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d9/5b1ad931c719b6adb1459f11931d88b63cb3df.src","preCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode();\n            irFunctionNode.setLocation(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode();\n            blockNode.setLocation(internalLocation);\n            blockNode.setAllEscape(true);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode();\n            returnNode.setLocation(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            BinaryImplNode irBinaryImplNode = new BinaryImplNode();\n            irBinaryImplNode.setLocation(internalLocation);\n            irBinaryImplNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irBinaryImplNode);\n\n            StaticNode staticNode = new StaticNode();\n            staticNode.setLocation(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irBinaryImplNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode();\n            invokeCallNode.setLocation(internalLocation);\n            invokeCallNode.setExpressionType(CallSite.class);\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irBinaryImplNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(PainlessLookup.class);\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode();\n            irLoadFieldMemberNode.setLocation(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(FunctionTable.class);\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            LoadVariableNode irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(Lookup.class);\n            irLoadVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(String.class);\n            irLoadVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(MethodType.class);\n            irLoadVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode();\n            irLoadVariableNode.setLocation(internalLocation);\n            irLoadVariableNode.setExpressionType(Object[].class);\n            irLoadVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2020-10-01 23:35:21","commitOrder":7,"curCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(BitSet.class);\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","date":"2020-10-01 23:35:21","endLine":258,"groupId":"49728","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"injectStaticFieldsAndGetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/155ae54a6a634b797ed6d51f6ada32ed39b8c9.src","preCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode();\n        irFieldNode.setLocation(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode();\n        irFunctionNode.setLocation(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode();\n        irBlockNode.setLocation(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode();\n        irReturnNode.setLocation(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode();\n        irLoadFieldMemberNode.setLocation(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(BitSet.class);\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"d23823bfba07c147ec3d6d925314f10ad5d4041a","commitMessage":"@@@Make location final in IRNode (#63078)\n\nThis change makes Location a final member of IRNode as opposed to possibly changing it. This \nensures that all ir nodes have a Location for error information upon creation that cannot be updated \nso each node can be tracked as where it came from originally.","date":"2020-10-01 23:35:21","modifiedFileCount":"81","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-10-01 23:35:21","codes":[{"authorDate":"2020-10-05 22:15:14","commitOrder":8,"curCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(Map.class);\n        irFieldNode.setName(\"$COMPILERSETTINGS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode(internalLocation);\n            blockNode.setAllEscape(true);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            BinaryImplNode irBinaryImplNode = new BinaryImplNode(internalLocation);\n            irBinaryImplNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irBinaryImplNode);\n\n            StaticNode staticNode = new StaticNode(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irBinaryImplNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode(internalLocation);\n            invokeCallNode.setExpressionType(CallSite.class);\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Map.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Map.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irBinaryImplNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(PainlessLookup.class);\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(FunctionTable.class);\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(Map.class);\n            irLoadFieldMemberNode.setName(\"$COMPILERSETTINGS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            LoadVariableNode irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(Lookup.class);\n            irLoadVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(String.class);\n            irLoadVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(MethodType.class);\n            irLoadVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(Object[].class);\n            irLoadVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","date":"2020-10-05 22:15:14","endLine":382,"groupId":"5361","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"injectBootstrapMethod","params":"(ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/4faccb3267167398e9c43a604eebf3ed558eeb.src","preCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode(internalLocation);\n            blockNode.setAllEscape(true);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            BinaryImplNode irBinaryImplNode = new BinaryImplNode(internalLocation);\n            irBinaryImplNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irBinaryImplNode);\n\n            StaticNode staticNode = new StaticNode(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irBinaryImplNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode(internalLocation);\n            invokeCallNode.setExpressionType(CallSite.class);\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irBinaryImplNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(PainlessLookup.class);\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(FunctionTable.class);\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            LoadVariableNode irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(Lookup.class);\n            irLoadVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(String.class);\n            irLoadVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(MethodType.class);\n            irLoadVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(Object[].class);\n            irLoadVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"},{"authorDate":"2020-10-01 23:35:21","commitOrder":8,"curCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(BitSet.class);\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","date":"2020-10-01 23:35:21","endLine":258,"groupId":"49728","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"injectStaticFieldsAndGetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/155ae54a6a634b797ed6d51f6ada32ed39b8c9.src","preCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(BitSet.class);\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"}],"commitId":"93f29a4f18b0326da16186a741c30bf248e2d65b","commitMessage":"@@@Scripting: enable regular expressions by default (#63029)\n\n* Setting `script.painless.regex.enabled` has a new option. \n  `use-factor`.  the default.  This defaults to using regular\n  expressions but limiting the complexity of the regular\n  expressions.\n\n  In addition to `use-factor`.  the setting can be `true`.  as\n  before.  which enables regular expressions without limiting them.\n\n  `false` totally disables regular expressions.  which was the\n  old default.\n\n* New setting `script.painless.regex.limit-factor`.  This limits\n  regular expression complexity by limiting the number characters\n  a regular expression can consider based on input length.\n\n  The default is `6`.  so a regular expression can consider\n  `6` * input length number of characters.  With input\n  `foobarbaz` (length `9`).  for example.  the regular expression\n  can consider `54` (`6 * 9`) characters.\n\n  This reduces the impact of exponential backtracking in Java's\n  regular expression engine.\n\n* add `@inject_constant` annotation to whitelist.\n\n  This annotation signals that a compiler settings will\n  be injected at the beginning of a whitelisted method.\n\n  The format is `argnum=settingname`:\n  `1=foo_setting 2=bar_setting`.\n\n  Argument numbers must start at one and must be sequential.\n\n* Augment\n  `Pattern.split(CharSequence)`\n  `Pattern.split(CharSequence.  int)`. \n  `Pattern.splitAsStream(CharSequence)`\n  `Pattern.matcher(CharSequence)`\n  to take the value of `script.painless.regex.limit-factor` as a\n  an injected parameter.  limiting as explained above when this\n  setting is in use.\n\nFixes: #49873","date":"2020-10-05 22:15:14","modifiedFileCount":"23","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2020-10-23 02:47:32","codes":[{"authorDate":"2020-10-23 02:47:32","commitOrder":9,"curCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(Map.class);\n        irFieldNode.setName(\"$COMPILERSETTINGS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode(internalLocation);\n            blockNode.setAllEscape(true);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            BinaryImplNode irBinaryImplNode = new BinaryImplNode(internalLocation);\n            irBinaryImplNode.attachDecoration(new IRDExpressionType(CallSite.class));\n\n            returnNode.setExpressionNode(irBinaryImplNode);\n\n            StaticNode staticNode = new StaticNode(internalLocation);\n            staticNode.attachDecoration(new IRDExpressionType(DefBootstrap.class));\n\n            irBinaryImplNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode(internalLocation);\n            invokeCallNode.attachDecoration(new IRDExpressionType(CallSite.class));\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Map.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Map.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irBinaryImplNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(PainlessLookup.class));\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(FunctionTable.class));\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(Map.class));\n            irLoadFieldMemberNode.setName(\"$COMPILERSETTINGS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            LoadVariableNode irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(Lookup.class));\n            irLoadVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(String.class));\n            irLoadVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(MethodType.class));\n            irLoadVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(int.class));\n            irLoadVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(int.class));\n            irLoadVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(Object[].class));\n            irLoadVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","date":"2020-10-23 02:47:32","endLine":385,"groupId":"69258","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"injectBootstrapMethod","params":"(ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/af/321f84d7e8689020f2217af4cd8922fc61d54c.src","preCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(Map.class);\n        irFieldNode.setName(\"$COMPILERSETTINGS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode(internalLocation);\n            blockNode.setAllEscape(true);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            BinaryImplNode irBinaryImplNode = new BinaryImplNode(internalLocation);\n            irBinaryImplNode.setExpressionType(CallSite.class);\n\n            returnNode.setExpressionNode(irBinaryImplNode);\n\n            StaticNode staticNode = new StaticNode(internalLocation);\n            staticNode.setExpressionType(DefBootstrap.class);\n\n            irBinaryImplNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode(internalLocation);\n            invokeCallNode.setExpressionType(CallSite.class);\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Map.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Map.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irBinaryImplNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(PainlessLookup.class);\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(FunctionTable.class);\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.setExpressionType(Map.class);\n            irLoadFieldMemberNode.setName(\"$COMPILERSETTINGS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            LoadVariableNode irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(Lookup.class);\n            irLoadVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(String.class);\n            irLoadVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(MethodType.class);\n            irLoadVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(int.class);\n            irLoadVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.setExpressionType(Object[].class);\n            irLoadVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"},{"authorDate":"2020-10-23 02:47:32","commitOrder":9,"curCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(String.class));\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(String.class));\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(BitSet.class));\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","date":"2020-10-23 02:47:32","endLine":259,"groupId":"49728","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"injectStaticFieldsAndGetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f0/a66143ea2dccc0be9893f01b8977c691a784f0.src","preCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(String.class);\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.setExpressionType(BitSet.class);\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"6eb168e640b1af65e307a873844f8d65e5a2e8f7","commitMessage":"@@@Add decorations to ir nodes in Painless (#63894)\n\nThis change starts to switch all ir nodes to use decorations instead of specific member data. For this \nspecific change.  we add only an expression type decoration to begin with to keep the change smaller. \nOther members of the ir nodes will be converted to decorations in future changes.\n\nThe decoration system has two important advantages:\n- The first is it's consistent with the user nodes as generated data is attached to them as a decoration.  \nso we have a clear.  consistent model for how to use both trees.\n- This allows additionally generated data to be attached as necessary for optimization phases making \nthe ir tree extendable which is one of our primary.  long-term goals.","date":"2020-10-23 02:47:32","modifiedFileCount":"6","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-12-04 04:01:07","codes":[{"authorDate":"2020-12-04 04:01:07","commitOrder":10,"curCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.attachDecoration(new IRDModifiers(modifiers));\n        irFieldNode.attachDecoration(new IRDFieldType(PainlessLookup.class));\n        irFieldNode.attachDecoration(new IRDName(\"$DEFINITION\"));\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.attachDecoration(new IRDModifiers(modifiers));\n        irFieldNode.attachDecoration(new IRDFieldType(FunctionTable.class));\n        irFieldNode.attachDecoration(new IRDName(\"$FUNCTIONS\"));\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.attachDecoration(new IRDModifiers(modifiers));\n        irFieldNode.attachDecoration(new IRDFieldType(Map.class));\n        irFieldNode.attachDecoration(new IRDName(\"$COMPILERSETTINGS\"));\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n            irFunctionNode.attachDecoration(new IRDName(\"$bootstrapDef\"));\n            irFunctionNode.attachDecoration(new IRDReturnType(CallSite.class));\n            irFunctionNode.attachDecoration(new IRDTypeParameters(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class)));\n            irFunctionNode.attachDecoration(new IRDParameterNames(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\")));\n            irFunctionNode.attachCondition(IRCStatic.class);\n            irFunctionNode.attachCondition(IRCVarArgs.class);\n            irFunctionNode.attachCondition(IRCSynthetic.class);\n            irFunctionNode.attachDecoration(new IRDMaxLoopCounter(0));\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode(internalLocation);\n            blockNode.attachCondition(IRCAllEscape.class);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            BinaryImplNode irBinaryImplNode = new BinaryImplNode(internalLocation);\n            irBinaryImplNode.attachDecoration(new IRDExpressionType(CallSite.class));\n\n            returnNode.setExpressionNode(irBinaryImplNode);\n\n            StaticNode staticNode = new StaticNode(internalLocation);\n            staticNode.attachDecoration(new IRDExpressionType(DefBootstrap.class));\n\n            irBinaryImplNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode(internalLocation);\n            invokeCallNode.attachDecoration(new IRDExpressionType(CallSite.class));\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Map.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Map.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irBinaryImplNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(PainlessLookup.class));\n            irLoadFieldMemberNode.attachDecoration(new IRDName(\"$DEFINITION\"));\n            irLoadFieldMemberNode.attachCondition(IRCStatic.class);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(FunctionTable.class));\n            irLoadFieldMemberNode.attachDecoration(new IRDName(\"$FUNCTIONS\"));\n            irLoadFieldMemberNode.attachCondition(IRCStatic.class);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(Map.class));\n            irLoadFieldMemberNode.attachDecoration(new IRDName(\"$COMPILERSETTINGS\"));\n            irLoadFieldMemberNode.attachCondition(IRCStatic.class);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            LoadVariableNode irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(Lookup.class));\n            irLoadVariableNode.attachDecoration(new IRDName(\"methodHandlesLookup\"));\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(String.class));\n            irLoadVariableNode.attachDecoration(new IRDName(\"name\"));\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(MethodType.class));\n            irLoadVariableNode.attachDecoration(new IRDName(\"type\"));\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(int.class));\n            irLoadVariableNode.attachDecoration(new IRDName(\"initialDepth\"));\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(int.class));\n            irLoadVariableNode.attachDecoration(new IRDName(\"flavor\"));\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(Object[].class));\n            irLoadVariableNode.attachDecoration(new IRDName(\"args\"));\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","date":"2020-12-04 04:01:07","endLine":435,"groupId":"101084","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"injectBootstrapMethod","params":"(ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/97/dfdb8a1dcd4ea0091222ea1e7943bf9a784cc2.src","preCode":"    protected void injectBootstrapMethod(ScriptScope scriptScope) {\n        \r\n        Location internalLocation = new Location(\"$internal$injectStaticFields\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(PainlessLookup.class);\n        irFieldNode.setName(\"$DEFINITION\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(FunctionTable.class);\n        irFieldNode.setName(\"$FUNCTIONS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(Map.class);\n        irFieldNode.setName(\"$COMPILERSETTINGS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        \r\n        internalLocation = new Location(\"$internal$injectDefBootstrapMethod\", 0);\n\n        try {\n            FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n            irFunctionNode.setReturnType(CallSite.class);\n            irFunctionNode.setName(\"$bootstrapDef\");\n            irFunctionNode.getTypeParameters().addAll(\n                    Arrays.asList(Lookup.class, String.class, MethodType.class, int.class, int.class, Object[].class));\n            irFunctionNode.getParameterNames().addAll(\n                    Arrays.asList(\"methodHandlesLookup\", \"name\", \"type\", \"initialDepth\", \"flavor\", \"args\"));\n            irFunctionNode.setStatic(true);\n            irFunctionNode.setVarArgs(true);\n            irFunctionNode.setSynthetic(true);\n            irFunctionNode.setMaxLoopCounter(0);\n\n            irClassNode.addFunctionNode(irFunctionNode);\n\n            BlockNode blockNode = new BlockNode(internalLocation);\n            blockNode.setAllEscape(true);\n\n            irFunctionNode.setBlockNode(blockNode);\n\n            ReturnNode returnNode = new ReturnNode(internalLocation);\n\n            blockNode.addStatementNode(returnNode);\n\n            BinaryImplNode irBinaryImplNode = new BinaryImplNode(internalLocation);\n            irBinaryImplNode.attachDecoration(new IRDExpressionType(CallSite.class));\n\n            returnNode.setExpressionNode(irBinaryImplNode);\n\n            StaticNode staticNode = new StaticNode(internalLocation);\n            staticNode.attachDecoration(new IRDExpressionType(DefBootstrap.class));\n\n            irBinaryImplNode.setLeftNode(staticNode);\n\n            InvokeCallNode invokeCallNode = new InvokeCallNode(internalLocation);\n            invokeCallNode.attachDecoration(new IRDExpressionType(CallSite.class));\n            invokeCallNode.setMethod(new PainlessMethod(\n                            DefBootstrap.class.getMethod(\"bootstrap\",\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Map.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            DefBootstrap.class,\n                            CallSite.class,\n                            Arrays.asList(\n                                    PainlessLookup.class,\n                                    FunctionTable.class,\n                                    Map.class,\n                                    Lookup.class,\n                                    String.class,\n                                    MethodType.class,\n                                    int.class,\n                                    int.class,\n                                    Object[].class),\n                            null,\n                            null,\n                            null\n                    )\n            );\n            invokeCallNode.setBox(DefBootstrap.class);\n\n            irBinaryImplNode.setRightNode(invokeCallNode);\n\n            LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(PainlessLookup.class));\n            irLoadFieldMemberNode.setName(\"$DEFINITION\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(FunctionTable.class));\n            irLoadFieldMemberNode.setName(\"$FUNCTIONS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n            irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(Map.class));\n            irLoadFieldMemberNode.setName(\"$COMPILERSETTINGS\");\n            irLoadFieldMemberNode.setStatic(true);\n\n            invokeCallNode.addArgumentNode(irLoadFieldMemberNode);\n\n            LoadVariableNode irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(Lookup.class));\n            irLoadVariableNode.setName(\"methodHandlesLookup\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(String.class));\n            irLoadVariableNode.setName(\"name\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(MethodType.class));\n            irLoadVariableNode.setName(\"type\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(int.class));\n            irLoadVariableNode.setName(\"initialDepth\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(int.class));\n            irLoadVariableNode.setName(\"flavor\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n\n            irLoadVariableNode = new LoadVariableNode(internalLocation);\n            irLoadVariableNode.attachDecoration(new IRDExpressionType(Object[].class));\n            irLoadVariableNode.setName(\"args\");\n\n            invokeCallNode.addArgumentNode(irLoadVariableNode);\n        } catch (Exception exception) {\n            throw new IllegalStateException(exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/DefaultUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"},{"authorDate":"2020-12-04 04:01:07","commitOrder":10,"curCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.attachDecoration(new IRDModifiers(modifiers));\n        irFieldNode.attachDecoration(new IRDFieldType(String.class));\n        irFieldNode.attachDecoration(new IRDName(\"$NAME\"));\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.attachDecoration(new IRDModifiers(modifiers));\n        irFieldNode.attachDecoration(new IRDFieldType(String.class));\n        irFieldNode.attachDecoration(new IRDName(\"$SOURCE\"));\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.attachDecoration(new IRDModifiers(modifiers));\n        irFieldNode.attachDecoration(new IRDFieldType(BitSet.class));\n        irFieldNode.attachDecoration(new IRDName(\"$STATEMENTS\"));\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.attachDecoration(new IRDName(\"getName\"));\n        irFunctionNode.attachDecoration(new IRDReturnType(String.class));\n        irFunctionNode.attachDecoration(new IRDTypeParameters(Collections.emptyList()));\n        irFunctionNode.attachDecoration(new IRDParameterNames(Collections.emptyList()));\n        irFunctionNode.attachCondition(IRCSynthetic.class);\n        irFunctionNode.attachDecoration(new IRDMaxLoopCounter(0));\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.attachCondition(IRCAllEscape.class);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(String.class));\n        irLoadFieldMemberNode.attachDecoration(new IRDName(\"$NAME\"));\n        irLoadFieldMemberNode.attachCondition(IRCStatic.class);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.attachDecoration(new IRDName(\"getSource\"));\n        irFunctionNode.attachDecoration(new IRDReturnType(String.class));\n        irFunctionNode.attachDecoration(new IRDTypeParameters(Collections.emptyList()));\n        irFunctionNode.attachDecoration(new IRDParameterNames(Collections.emptyList()));\n        irFunctionNode.attachCondition(IRCSynthetic.class);\n        irFunctionNode.attachDecoration(new IRDMaxLoopCounter(0));\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.attachCondition(IRCAllEscape.class);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(String.class));\n        irLoadFieldMemberNode.attachDecoration(new IRDName(\"$SOURCE\"));\n        irLoadFieldMemberNode.attachCondition(IRCStatic.class);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.attachDecoration(new IRDName(\"getStatements\"));\n        irFunctionNode.attachDecoration(new IRDReturnType(BitSet.class));\n        irFunctionNode.attachDecoration(new IRDTypeParameters(Collections.emptyList()));\n        irFunctionNode.attachDecoration(new IRDParameterNames(Collections.emptyList()));\n        irFunctionNode.attachCondition(IRCSynthetic.class);\n        irFunctionNode.attachDecoration(new IRDMaxLoopCounter(0));\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.attachCondition(IRCAllEscape.class);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(BitSet.class));\n        irLoadFieldMemberNode.attachDecoration(new IRDName(\"$STATEMENTS\"));\n        irLoadFieldMemberNode.attachCondition(IRCStatic.class);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","date":"2020-12-04 04:01:07","endLine":271,"groupId":"101084","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"injectStaticFieldsAndGetters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0b/7edf44beeabcf26ac5a6cafbf1b24f2dbbb03e.src","preCode":"    protected void injectStaticFieldsAndGetters() {\n        Location internalLocation = new Location(\"$internal$ScriptInjectionPhase$injectStaticFieldsAndGetters\", 0);\n        int modifiers = Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC;\n\n        FieldNode irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$NAME\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(String.class);\n        irFieldNode.setName(\"$SOURCE\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        irFieldNode = new FieldNode(internalLocation);\n        irFieldNode.setModifiers(modifiers);\n        irFieldNode.setFieldType(BitSet.class);\n        irFieldNode.setName(\"$STATEMENTS\");\n\n        irClassNode.addFieldNode(irFieldNode);\n\n        FunctionNode irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getName\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        BlockNode irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        ReturnNode irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        LoadFieldMemberNode irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(String.class));\n        irLoadFieldMemberNode.setName(\"$NAME\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getSource\");\n        irFunctionNode.setReturnType(String.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(String.class));\n        irLoadFieldMemberNode.setName(\"$SOURCE\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n\n        irFunctionNode = new FunctionNode(internalLocation);\n        irFunctionNode.setName(\"getStatements\");\n        irFunctionNode.setReturnType(BitSet.class);\n        irFunctionNode.setStatic(false);\n        irFunctionNode.setVarArgs(false);\n        irFunctionNode.setSynthetic(true);\n        irFunctionNode.setMaxLoopCounter(0);\n\n        irClassNode.addFunctionNode(irFunctionNode);\n\n        irBlockNode = new BlockNode(internalLocation);\n        irBlockNode.setAllEscape(true);\n\n        irFunctionNode.setBlockNode(irBlockNode);\n\n        irReturnNode = new ReturnNode(internalLocation);\n\n        irBlockNode.addStatementNode(irReturnNode);\n\n        irLoadFieldMemberNode = new LoadFieldMemberNode(internalLocation);\n        irLoadFieldMemberNode.attachDecoration(new IRDExpressionType(BitSet.class));\n        irLoadFieldMemberNode.setName(\"$STATEMENTS\");\n        irLoadFieldMemberNode.setStatic(true);\n\n        irReturnNode.setExpressionNode(irLoadFieldMemberNode);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/phase/PainlessUserTreeToIRTreePhase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"a44ad560a23ee2570d5faaecc3de73e555c51608","commitMessage":"@@@Complete replacing member data with decorations in the ir tree (#64825)\n\nThis change replaces all the member data in the ir nodes with decorations instead. This completes the \ntransition to a decoration system in the ir tree. This change allows for maximum flexibility when \nmodifying existing phases or adding additional phases.","date":"2020-12-04 04:01:07","modifiedFileCount":"52","status":"M","submitter":"Jack Conradson"}]
