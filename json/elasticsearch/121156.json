[{"authorTime":"2018-12-08 01:32:27","codes":[{"authorDate":"2018-12-08 01:32:27","commitOrder":1,"curCode":"    public static Long defToLongImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (long)(byte)value;\n        } else if (value instanceof Short) {\n            return (long)(short)value;\n        } else if (value instanceof Character) {\n            return (long)(char)value;\n        } else if (value instanceof Integer) {\n            return (long)(int)value;\n        } else {\n            return (Long)value;\n        }\n    }\n","date":"2018-12-08 01:32:27","endLine":816,"groupId":"31458","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"defToLongImplicit","params":"(finalObjectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/86/7b481a2a4d7dec9719caa8ebd179d467cd61d0.src","preCode":"    public static Long defToLongImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (long)(byte)value;\n        } else if (value instanceof Short) {\n            return (long)(short)value;\n        } else if (value instanceof Character) {\n            return (long)(char)value;\n        } else if (value instanceof Integer) {\n            return (long)(int)value;\n        } else {\n            return (Long)value;\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":802,"status":"B"},{"authorDate":"2018-12-08 01:32:27","commitOrder":1,"curCode":"    public static Double defToDoubleImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (double)(byte)value;\n        } else if (value instanceof Short) {\n            return (double)(short)value;\n        } else if (value instanceof Character) {\n            return (double)(char)value;\n        } else if (value instanceof Integer) {\n            return (double)(int)value;\n        } else if (value instanceof Long) {\n            return (double)(long)value;\n        } else if (value instanceof Float) {\n            return (double)(float)value;\n        } else {\n            return (Double)value;\n        }\n    }\n","date":"2018-12-08 01:32:27","endLine":854,"groupId":"11465","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"defToDoubleImplicit","params":"(finalObjectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/86/7b481a2a4d7dec9719caa8ebd179d467cd61d0.src","preCode":"    public static Double defToDoubleImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (double)(byte)value;\n        } else if (value instanceof Short) {\n            return (double)(short)value;\n        } else if (value instanceof Character) {\n            return (double)(char)value;\n        } else if (value instanceof Integer) {\n            return (double)(int)value;\n        } else if (value instanceof Long) {\n            return (double)(long)value;\n        } else if (value instanceof Float) {\n            return (double)(float)value;\n        } else {\n            return (Double)value;\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":836,"status":"B"}],"commitId":"2df4bd1f8135fca889312711979c13a61b90fafd","commitMessage":"@@@[Painless] Generate Bridge Methods (#36097)\n\nWe use MethodHandles.asType to cast argument types into the appropriate parameter types for \nmethod calls when the target of the call is a def type at runtime. Currently.  certain implicit casts \nusing the def type are asymmetric. It is possible to cast Integer -> float as an argument to parameter.  but not from int -> Float (boxed to primitive with upcasting is okay.  but primitive to \nboxed with upcasting is not).\n\nThis PR introduces a solution to the issue by generating bridge methods for all whitelisted methods \nthat have at least a single boxed type as an argument. The bridge method will conduct appropriate \ncasts and then call the original method. This adds a bit of overhead for correctness. It should not be\nused often as Painless avoids boxed types as much as possible.\n\nNote that a large portion of this change is adding methods to do the appropriate def to boxed type \ncasts and a few mechanical changes as well. The most important method for review is \ngenerateBridgeMethod in PainlessLookupBuilder.","date":"2018-12-08 01:32:27","modifiedFileCount":"10","status":"B","submitter":"Jack Conradson"},{"authorTime":"2018-12-12 06:06:38","codes":[{"authorDate":"2018-12-12 06:06:38","commitOrder":2,"curCode":"    public static Long defToLongImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (long)(byte)value;\n        } else if (value instanceof Short) {\n            return (long)(short)value;\n        } else if (value instanceof Character) {\n            return (long)(char)value;\n        } else if (value instanceof Integer) {\n            return (long)(int)value;\n        } else if (value instanceof Long) {\n            return (Long)value;\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + \"] to \" +\n                    Long.class.getCanonicalName());\n        }\n    }\n","date":"2018-12-12 06:06:38","endLine":942,"groupId":"31458","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"defToLongImplicit","params":"(finalObjectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/72956cb0719a3be70419832905a1f6b2efd274.src","preCode":"    public static Long defToLongImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (long)(byte)value;\n        } else if (value instanceof Short) {\n            return (long)(short)value;\n        } else if (value instanceof Character) {\n            return (long)(char)value;\n        } else if (value instanceof Integer) {\n            return (long)(int)value;\n        } else {\n            return (Long)value;\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":924,"status":"M"},{"authorDate":"2018-12-12 06:06:38","commitOrder":2,"curCode":"    public static Double defToDoubleImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (double)(byte)value;\n        } else if (value instanceof Short) {\n            return (double)(short)value;\n        } else if (value instanceof Character) {\n            return (double)(char)value;\n        } else if (value instanceof Integer) {\n            return (double)(int)value;\n        } else if (value instanceof Long) {\n            return (double)(long)value;\n        } else if (value instanceof Float) {\n            return (double)(float)value;\n        } else if (value instanceof Double) {\n            return (Double)value;\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + value.getClass().getCanonicalName() + \"] to \" + Double.class.getCanonicalName());\n        }\n    }\n","date":"2018-12-12 06:06:38","endLine":987,"groupId":"11465","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"defToDoubleImplicit","params":"(finalObjectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/72956cb0719a3be70419832905a1f6b2efd274.src","preCode":"    public static Double defToDoubleImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (double)(byte)value;\n        } else if (value instanceof Short) {\n            return (double)(short)value;\n        } else if (value instanceof Character) {\n            return (double)(char)value;\n        } else if (value instanceof Integer) {\n            return (double)(int)value;\n        } else if (value instanceof Long) {\n            return (double)(long)value;\n        } else if (value instanceof Float) {\n            return (double)(float)value;\n        } else {\n            return (Double)value;\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":966,"status":"M"}],"commitId":"8e988f6c06a4f55fbc52b910ef4f691a651f36f7","commitMessage":"@@@[Painless] Add def to boxed type casts (#36506)\n\nThis adds casts for the def type to all standard boxed types. Prior to this certain \ncasts such as def [long/Long] -> Double would fail which does not follow the \ngoals of the Painless casting model to remove the need for explicit boxing. This \nalso creates symmetry with the casts for the newly created bridge methods \nbeing called at run-time.","date":"2018-12-12 06:06:38","modifiedFileCount":"5","status":"M","submitter":"Jack Conradson"},{"authorTime":"2019-03-12 01:43:03","codes":[{"authorDate":"2018-12-12 06:06:38","commitOrder":3,"curCode":"    public static Long defToLongImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (long)(byte)value;\n        } else if (value instanceof Short) {\n            return (long)(short)value;\n        } else if (value instanceof Character) {\n            return (long)(char)value;\n        } else if (value instanceof Integer) {\n            return (long)(int)value;\n        } else if (value instanceof Long) {\n            return (Long)value;\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + \"] to \" +\n                    Long.class.getCanonicalName());\n        }\n    }\n","date":"2018-12-12 06:06:38","endLine":942,"groupId":"31458","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"defToLongImplicit","params":"(finalObjectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/72956cb0719a3be70419832905a1f6b2efd274.src","preCode":"    public static Long defToLongImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (long)(byte)value;\n        } else if (value instanceof Short) {\n            return (long)(short)value;\n        } else if (value instanceof Character) {\n            return (long)(char)value;\n        } else if (value instanceof Integer) {\n            return (long)(int)value;\n        } else if (value instanceof Long) {\n            return (Long)value;\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + \"] to \" +\n                    Long.class.getCanonicalName());\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":924,"status":"N"},{"authorDate":"2019-03-12 01:43:03","commitOrder":3,"curCode":"    public static Double defToDoubleImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (double)(byte)value;\n        } else if (value instanceof Short) {\n            return (double)(short)value;\n        } else if (value instanceof Character) {\n            return (double)(char)value;\n        } else if (value instanceof Integer) {\n            return (double)(int)value;\n        } else if (value instanceof Long) {\n            return (double)(long)value;\n        } else if (value instanceof Float) {\n            return (double)(float)value;\n        } else if (value instanceof Double) {\n            return (Double)value;\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + \"] to \" +\n                    Double.class.getCanonicalName());\n        }\n    }\n","date":"2019-03-12 01:43:03","endLine":1011,"groupId":"11465","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"defToDoubleImplicit","params":"(finalObjectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/85/16a96a05c00ae3dc1617a42bbf6112a2ce8b5a.src","preCode":"    public static Double defToDoubleImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (double)(byte)value;\n        } else if (value instanceof Short) {\n            return (double)(short)value;\n        } else if (value instanceof Character) {\n            return (double)(char)value;\n        } else if (value instanceof Integer) {\n            return (double)(int)value;\n        } else if (value instanceof Long) {\n            return (double)(long)value;\n        } else if (value instanceof Float) {\n            return (double)(float)value;\n        } else if (value instanceof Double) {\n            return (Double)value;\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + value.getClass().getCanonicalName() + \"] to \" + Double.class.getCanonicalName());\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":989,"status":"M"}],"commitId":"d8416fcb741e18a65d0c51dce1f56d709d4afcf2","commitMessage":"@@@Fix Painless def [char] to String casts (#39759)\n\n* Start to fix def char casts.\n\n* Fix def char to String casts\n","date":"2019-03-12 01:43:03","modifiedFileCount":"4","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-09-24 00:06:21","codes":[{"authorDate":"2018-12-12 06:06:38","commitOrder":4,"curCode":"    public static Long defToLongImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (long)(byte)value;\n        } else if (value instanceof Short) {\n            return (long)(short)value;\n        } else if (value instanceof Character) {\n            return (long)(char)value;\n        } else if (value instanceof Integer) {\n            return (long)(int)value;\n        } else if (value instanceof Long) {\n            return (Long)value;\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + \"] to \" +\n                    Long.class.getCanonicalName());\n        }\n    }\n","date":"2018-12-12 06:06:38","endLine":942,"groupId":"31458","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"defToLongImplicit","params":"(finalObjectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/72956cb0719a3be70419832905a1f6b2efd274.src","preCode":"    public static Long defToLongImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (long)(byte)value;\n        } else if (value instanceof Short) {\n            return (long)(short)value;\n        } else if (value instanceof Character) {\n            return (long)(char)value;\n        } else if (value instanceof Integer) {\n            return (long)(int)value;\n        } else if (value instanceof Long) {\n            return (Long)value;\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + \"] to \" +\n                    Long.class.getCanonicalName());\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":924,"status":"N"},{"authorDate":"2020-09-24 00:06:21","commitOrder":4,"curCode":"    public static Double defToDoubleImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (double)(byte)value;\n        } else if (value instanceof Short) {\n            return (double)(short)value;\n        } else if (value instanceof Character) {\n            return (double)(char)value;\n        } else if (value instanceof Integer) {\n            return (double)(int)value;\n        } else if (value instanceof Long) {\n            return (double)(long)value;\n        } else if (value instanceof Float) {\n            return (double)(float)value;\n        } else if (value instanceof Double) {\n            return (Double) value;\n        } else if (value instanceof BigInteger) {\n            return ((BigInteger)value).doubleValue();\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + \"] to \" +\n                    Double.class.getCanonicalName());\n        }\n    }\n","date":"2020-09-24 00:06:21","endLine":1019,"groupId":"11465","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"defToDoubleImplicit","params":"(finalObjectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dd/7e00a6c8a2b663ba123eb0ac15e97b071d5fc5.src","preCode":"    public static Double defToDoubleImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (double)(byte)value;\n        } else if (value instanceof Short) {\n            return (double)(short)value;\n        } else if (value instanceof Character) {\n            return (double)(char)value;\n        } else if (value instanceof Integer) {\n            return (double)(int)value;\n        } else if (value instanceof Long) {\n            return (double)(long)value;\n        } else if (value instanceof Float) {\n            return (double)(float)value;\n        } else if (value instanceof Double) {\n            return (Double)value;\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + \"] to \" +\n                    Double.class.getCanonicalName());\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":995,"status":"M"}],"commitId":"ff55296f7ad39d7fbfa919f8f8233c58bd6d8620","commitMessage":"@@@Introduce 64-bit unsigned long field type (#60050)\n\nThis field type supports\n- indexing of integer values from [0.  18446744073709551615]\n- precise queries (term.  range)\n- precise sort and terms aggregations\n- other aggregations are based on conversion of long values\n  to double and can be imprecise for large values.\n\nCloses #32434","date":"2020-09-24 00:06:21","modifiedFileCount":"14","status":"M","submitter":"Mayya Sharipova"},{"authorTime":"2020-11-04 03:20:46","codes":[{"authorDate":"2018-12-12 06:06:38","commitOrder":5,"curCode":"    public static Long defToLongImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (long)(byte)value;\n        } else if (value instanceof Short) {\n            return (long)(short)value;\n        } else if (value instanceof Character) {\n            return (long)(char)value;\n        } else if (value instanceof Integer) {\n            return (long)(int)value;\n        } else if (value instanceof Long) {\n            return (Long)value;\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + \"] to \" +\n                    Long.class.getCanonicalName());\n        }\n    }\n","date":"2018-12-12 06:06:38","endLine":942,"groupId":"121156","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"defToLongImplicit","params":"(finalObjectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/72956cb0719a3be70419832905a1f6b2efd274.src","preCode":"    public static Long defToLongImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (long)(byte)value;\n        } else if (value instanceof Short) {\n            return (long)(short)value;\n        } else if (value instanceof Character) {\n            return (long)(char)value;\n        } else if (value instanceof Integer) {\n            return (long)(int)value;\n        } else if (value instanceof Long) {\n            return (Long)value;\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + \"] to \" +\n                    Long.class.getCanonicalName());\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":924,"status":"N"},{"authorDate":"2020-11-04 03:20:46","commitOrder":5,"curCode":"    public static Double defToDoubleImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (double)(byte)value;\n        } else if (value instanceof Short) {\n            return (double)(short)value;\n        } else if (value instanceof Character) {\n            return (double)(char)value;\n        } else if (value instanceof Integer) {\n            return (double)(int)value;\n        } else if (value instanceof Long) {\n            return (double)(long)value;\n        } else if (value instanceof Float) {\n            return (double)(float)value;\n        } else if (value instanceof Double) {\n            return (Double) value;\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + \"] to \" +\n                    Double.class.getCanonicalName());\n        }\n    }\n","date":"2020-11-04 03:20:46","endLine":1039,"groupId":"121156","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"defToDoubleImplicit","params":"(finalObjectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a4/73d1e5d19a32bfc5f78fc61e176c3c7e32f82e.src","preCode":"    public static Double defToDoubleImplicit(final Object value) {\n        if (value == null) {\n            return null;\n        } else if (value instanceof Byte) {\n            return (double)(byte)value;\n        } else if (value instanceof Short) {\n            return (double)(short)value;\n        } else if (value instanceof Character) {\n            return (double)(char)value;\n        } else if (value instanceof Integer) {\n            return (double)(int)value;\n        } else if (value instanceof Long) {\n            return (double)(long)value;\n        } else if (value instanceof Float) {\n            return (double)(float)value;\n        } else if (value instanceof Double) {\n            return (Double) value;\n        } else if (value instanceof BigInteger) {\n            return ((BigInteger)value).doubleValue();\n        } else {\n            throw new ClassCastException(\"cannot implicitly cast \" +\n                    \"def [\" + PainlessLookupUtility.typeToUnboxedType(value.getClass()).getCanonicalName() + \"] to \" +\n                    Double.class.getCanonicalName());\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/Def.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1017,"status":"M"}],"commitId":"0ffbcd3b3c7fa8c687cc6bc16b8a2dc8385e0cde","commitMessage":"@@@Disable using unsigned_long in scripts (#64523)\n\nRelates to #64361","date":"2020-11-04 03:20:46","modifiedFileCount":"4","status":"M","submitter":"Mayya Sharipova"}]
