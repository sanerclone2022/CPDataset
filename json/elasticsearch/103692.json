[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testReadWriteState() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(), randomDouble(), randomBoolean());\n        int version = between(0, Integer.MAX_VALUE/2);\n        format.write(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n        }\n        final int version2 = between(version, Integer.MAX_VALUE);\n        DummyState state2 = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(), randomDouble(), randomBoolean());\n        format.write(state2, dirs);\n\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length,1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\"+ (id+1) + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state2));\n\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":139,"groupId":"41446","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadWriteState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/54/3b5e39026fbba08c67d34416445d25436acc04.src","preCode":"    public void testReadWriteState() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(), randomDouble(), randomBoolean());\n        int version = between(0, Integer.MAX_VALUE/2);\n        format.write(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n        }\n        final int version2 = between(version, Integer.MAX_VALUE);\n        DummyState state2 = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(), randomDouble(), randomBoolean());\n        format.write(state2, dirs);\n\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length,1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\"+ (id+1) + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state2));\n\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testCorruption() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(), randomDouble(), randomBoolean());\n        int version = between(0, Integer.MAX_VALUE/2);\n        format.write(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n            \r\n            corruptFile(list[0], logger);\n            try {\n                format.read(NamedXContentRegistry.EMPTY, list[0]);\n                fail(\"corrupted file\");\n            } catch (CorruptStateException ex) {\n                \r\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":196,"groupId":"41446","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorruption","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/54/3b5e39026fbba08c67d34416445d25436acc04.src","preCode":"    public void testCorruption() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(), randomDouble(), randomBoolean());\n        int version = between(0, Integer.MAX_VALUE/2);\n        format.write(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n            \r\n            corruptFile(list[0], logger);\n            try {\n                format.read(NamedXContentRegistry.EMPTY, list[0]);\n                fail(\"corrupted file\");\n            } catch (CorruptStateException ex) {\n                \r\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-09-28 01:00:37","codes":[{"authorDate":"2018-09-28 01:00:37","commitOrder":2,"curCode":"    public void testReadWriteState() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(), randomDouble(), randomBoolean());\n        format.write(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n        }\n        DummyState state2 = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(), randomDouble(), randomBoolean());\n        format.write(state2, dirs);\n\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length,1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\"+ (id+1) + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state2));\n\n        }\n    }\n","date":"2018-09-28 01:00:37","endLine":135,"groupId":"57103","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadWriteState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/03/51a10dea33bb1ac19f63dc9da91bb8cc532374.src","preCode":"    public void testReadWriteState() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(), randomDouble(), randomBoolean());\n        int version = between(0, Integer.MAX_VALUE/2);\n        format.write(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n        }\n        final int version2 = between(version, Integer.MAX_VALUE);\n        DummyState state2 = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(), randomDouble(), randomBoolean());\n        format.write(state2, dirs);\n\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length,1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\"+ (id+1) + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state2));\n\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2018-09-28 01:00:37","commitOrder":2,"curCode":"    public void testCorruption() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(), randomDouble(), randomBoolean());\n        format.write(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n            \r\n            corruptFile(list[0], logger);\n            try {\n                format.read(NamedXContentRegistry.EMPTY, list[0]);\n                fail(\"corrupted file\");\n            } catch (CorruptStateException ex) {\n                \r\n            }\n        }\n    }\n","date":"2018-09-28 01:00:37","endLine":190,"groupId":"57103","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorruption","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/03/51a10dea33bb1ac19f63dc9da91bb8cc532374.src","preCode":"    public void testCorruption() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(), randomDouble(), randomBoolean());\n        int version = between(0, Integer.MAX_VALUE/2);\n        format.write(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n            \r\n            corruptFile(list[0], logger);\n            try {\n                format.read(NamedXContentRegistry.EMPTY, list[0]);\n                fail(\"corrupted file\");\n            } catch (CorruptStateException ex) {\n                \r\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"a26cc1a2422c7d6eda7d0c204f7588d79fa597e6","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-28 01:00:37","modifiedFileCount":"338","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-12-06 15:31:46","codes":[{"authorDate":"2018-12-06 15:31:46","commitOrder":3,"curCode":"    public void testReadWriteState() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n        }\n        DummyState state2 = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state2, dirs);\n\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length,1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\"+ (id+1) + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state2));\n\n        }\n    }\n","date":"2018-12-06 15:31:46","endLine":136,"groupId":"57103","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadWriteState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/22452f72774ef86406c56f8bd36216d95587e2.src","preCode":"    public void testReadWriteState() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.write(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n        }\n        DummyState state2 = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.write(state2, dirs);\n\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length,1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\"+ (id+1) + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state2));\n\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2018-12-06 15:31:46","commitOrder":3,"curCode":"    public void testCorruption() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n            \r\n            corruptFile(list[0], logger);\n            try {\n                format.read(NamedXContentRegistry.EMPTY, list[0]);\n                fail(\"corrupted file\");\n            } catch (CorruptStateException ex) {\n                \r\n            }\n        }\n    }\n","date":"2018-12-06 15:31:46","endLine":193,"groupId":"57103","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorruption","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/22452f72774ef86406c56f8bd36216d95587e2.src","preCode":"    public void testCorruption() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.write(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n            \r\n            corruptFile(list[0], logger);\n            try {\n                format.read(NamedXContentRegistry.EMPTY, list[0]);\n                fail(\"corrupted file\");\n            } catch (CorruptStateException ex) {\n                \r\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"ee05ef131286eead295cf58ed4393af56f0d7ade","commitMessage":"@@@Merge branch 'zen2'\n","date":"2018-12-06 15:31:46","modifiedFileCount":"122","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void testReadWriteState() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetadataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n        }\n        DummyState state2 = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state2, dirs);\n\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetadataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length,1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\"+ (id+1) + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state2));\n\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":123,"groupId":"57103","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadWriteState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/0e4ad10a710de52724b5529b9cac1f6504afca.src","preCode":"    public void testReadWriteState() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n        }\n        DummyState state2 = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state2, dirs);\n\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length,1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\"+ (id+1) + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state2));\n\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/MetadataStateFormatTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void testCorruption() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetadataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n            \r\n            corruptFile(list[0], logger);\n            try {\n                format.read(NamedXContentRegistry.EMPTY, list[0]);\n                fail(\"corrupted file\");\n            } catch (CorruptStateException ex) {\n                \r\n            }\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":180,"groupId":"57103","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorruption","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/0e4ad10a710de52724b5529b9cac1f6504afca.src","preCode":"    public void testCorruption() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetaDataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n            \r\n            corruptFile(list[0], logger);\n            try {\n                format.read(NamedXContentRegistry.EMPTY, list[0]);\n                fail(\"corrupted file\");\n            } catch (CorruptStateException ex) {\n                \r\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/MetadataStateFormatTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2021-05-12 20:50:26","codes":[{"authorDate":"2021-05-12 20:50:26","commitOrder":5,"curCode":"    public void testReadWriteState() throws IOException {\n        final Path dir = createTempDir();\n        final long id = addDummyFiles(\"foo-\", dir);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state, dir);\n        {\n            Path[] list = content(\"*\", dir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetadataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n        }\n            DummyState state2 = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n                randomDouble(), randomBoolean());\n            format.writeAndCleanup(state2, dir);\n\n        {\n            Path[] list = content(\"*\", dir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetadataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + (id + 1) + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state2));\n        }\n    }\n","date":"2021-05-12 20:50:26","endLine":108,"groupId":"103692","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadWriteState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/2a0b783b0d4d88293a77e654ad08ef89ca4b83.src","preCode":"    public void testReadWriteState() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetadataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n        }\n        DummyState state2 = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state2, dirs);\n\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetadataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length,1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\"+ (id+1) + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state2));\n\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/MetadataStateFormatTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2021-05-12 20:50:26","commitOrder":5,"curCode":"    public void testCorruption() throws IOException {\n        final Path dir = createTempDir();\n        final long id = addDummyFiles(\"foo-\", dir);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state, dir);\n        Path[] list = content(\"*\", dir);\n        assertEquals(list.length, 1);\n        assertThat(list[0].getFileName().toString(), equalTo(MetadataStateFormat.STATE_DIR_NAME));\n        Path stateDir = list[0];\n        assertThat(Files.isDirectory(stateDir), is(true));\n        list = content(\"foo-*\", stateDir);\n        assertEquals(list.length, 1);\n        assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n        DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n        assertThat(read, equalTo(state));\n        \r\n        corruptFile(list[0], logger);\n        try {\n            format.read(NamedXContentRegistry.EMPTY, list[0]);\n            fail(\"corrupted file\");\n        } catch (CorruptStateException ex) {\n            \r\n        }\n    }\n","date":"2021-05-12 20:50:26","endLine":155,"groupId":"103692","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorruption","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/2a0b783b0d4d88293a77e654ad08ef89ca4b83.src","preCode":"    public void testCorruption() throws IOException {\n        Path[] dirs = new Path[randomIntBetween(1, 5)];\n        for (int i = 0; i < dirs.length; i++) {\n            dirs[i] = createTempDir();\n        }\n        final long id = addDummyFiles(\"foo-\", dirs);\n        Format format = new Format(\"foo-\");\n        DummyState state = new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1, 1000), randomInt(), randomLong(),\n            randomDouble(), randomBoolean());\n        format.writeAndCleanup(state, dirs);\n        for (Path file : dirs) {\n            Path[] list = content(\"*\", file);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(MetadataStateFormat.STATE_DIR_NAME));\n            Path stateDir = list[0];\n            assertThat(Files.isDirectory(stateDir), is(true));\n            list = content(\"foo-*\", stateDir);\n            assertEquals(list.length, 1);\n            assertThat(list[0].getFileName().toString(), equalTo(\"foo-\" + id + \".st\"));\n            DummyState read = format.read(NamedXContentRegistry.EMPTY, list[0]);\n            assertThat(read, equalTo(state));\n            \r\n            corruptFile(list[0], logger);\n            try {\n                format.read(NamedXContentRegistry.EMPTY, list[0]);\n                fail(\"corrupted file\");\n            } catch (CorruptStateException ex) {\n                \r\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/MetadataStateFormatTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"4528e780c48ada91fd452b9c51dc1a37772c5f07","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n\n# Conflicts:\n#\tx-pack/plugin/spatial/build.gradle\n#\tx-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/SpatialPlugin.java\n","date":"2021-05-12 20:50:26","modifiedFileCount":"564","status":"M","submitter":"iverase"}]
