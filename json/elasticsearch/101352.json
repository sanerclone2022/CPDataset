[{"authorTime":"2018-07-10 07:44:12","codes":[{"authorDate":"2018-07-10 07:44:12","commitOrder":1,"curCode":"    public WhitelistMethod(String origin, String javaAugmentedClassName, String javaMethodName,\n                           String painlessReturnTypeName, List<String> painlessParameterTypeNames) {\n        this.origin = Objects.requireNonNull(origin);\n        this.javaAugmentedClassName = javaAugmentedClassName;\n        this.javaMethodName = javaMethodName;\n        this.painlessReturnTypeName = Objects.requireNonNull(painlessReturnTypeName);\n        this.painlessParameterTypeNames = Collections.unmodifiableList(Objects.requireNonNull(painlessParameterTypeNames));\n    }\n","date":"2018-07-10 07:44:12","endLine":75,"groupId":"9082","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"WhitelistMethod","params":"(Stringorigin@StringjavaAugmentedClassName@StringjavaMethodName@StringpainlessReturnTypeName@List<String>painlessParameterTypeNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/86619055b08f3e3c52b39b688c816b81bad4d5.src","preCode":"    public WhitelistMethod(String origin, String javaAugmentedClassName, String javaMethodName,\n                           String painlessReturnTypeName, List<String> painlessParameterTypeNames) {\n        this.origin = Objects.requireNonNull(origin);\n        this.javaAugmentedClassName = javaAugmentedClassName;\n        this.javaMethodName = javaMethodName;\n        this.painlessReturnTypeName = Objects.requireNonNull(painlessReturnTypeName);\n        this.painlessParameterTypeNames = Collections.unmodifiableList(Objects.requireNonNull(painlessParameterTypeNames));\n    }\n","realPath":"modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistMethod.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"},{"authorDate":"2018-07-10 07:44:12","commitOrder":1,"curCode":"    public WhitelistClass(String origin, String javaClassName, boolean onlyFQNJavaClassName,\n                          List<WhitelistConstructor> whitelistConstructors,\n                          List<WhitelistMethod> whitelistMethods,\n                          List<WhitelistField> whitelistFields) {\n        this.origin = Objects.requireNonNull(origin);\n        this.javaClassName = Objects.requireNonNull(javaClassName);\n        this.onlyFQNJavaClassName = onlyFQNJavaClassName;\n\n        this.whitelistConstructors = Collections.unmodifiableList(Objects.requireNonNull(whitelistConstructors));\n        this.whitelistMethods = Collections.unmodifiableList(Objects.requireNonNull(whitelistMethods));\n        this.whitelistFields = Collections.unmodifiableList(Objects.requireNonNull(whitelistFields));\n    }\n","date":"2018-07-10 07:44:12","endLine":75,"groupId":"53209","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"WhitelistClass","params":"(Stringorigin@StringjavaClassName@booleanonlyFQNJavaClassName@List<WhitelistConstructor>whitelistConstructors@List<WhitelistMethod>whitelistMethods@List<WhitelistField>whitelistFields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/12/aa5f5bdd63471e80eff0a3013bfd1c7dc5799c.src","preCode":"    public WhitelistClass(String origin, String javaClassName, boolean onlyFQNJavaClassName,\n                          List<WhitelistConstructor> whitelistConstructors,\n                          List<WhitelistMethod> whitelistMethods,\n                          List<WhitelistField> whitelistFields) {\n        this.origin = Objects.requireNonNull(origin);\n        this.javaClassName = Objects.requireNonNull(javaClassName);\n        this.onlyFQNJavaClassName = onlyFQNJavaClassName;\n\n        this.whitelistConstructors = Collections.unmodifiableList(Objects.requireNonNull(whitelistConstructors));\n        this.whitelistMethods = Collections.unmodifiableList(Objects.requireNonNull(whitelistMethods));\n        this.whitelistFields = Collections.unmodifiableList(Objects.requireNonNull(whitelistFields));\n    }\n","realPath":"modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistClass.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"}],"commitId":"e9cd0556c167b257bb588af5547923e5f13a99ca","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-10 07:44:12","modifiedFileCount":"627","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-08-14 00:14:00","codes":[{"authorDate":"2018-08-14 00:14:00","commitOrder":2,"curCode":"    public WhitelistMethod(String origin, String augmentedCanonicalClassName, String methodName,\n                           String returnCanonicalTypeName, List<String> canonicalTypeNameParameters) {\n        this.origin = Objects.requireNonNull(origin);\n        this.augmentedCanonicalClassName = augmentedCanonicalClassName;\n        this.methodName = methodName;\n        this.returnCanonicalTypeName = Objects.requireNonNull(returnCanonicalTypeName);\n        this.canonicalTypeNameParameters = Collections.unmodifiableList(Objects.requireNonNull(canonicalTypeNameParameters));\n    }\n","date":"2018-08-14 00:14:00","endLine":76,"groupId":"9082","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"WhitelistMethod","params":"(Stringorigin@StringaugmentedCanonicalClassName@StringmethodName@StringreturnCanonicalTypeName@List<String>canonicalTypeNameParameters)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5c/d023a3591ad413affd28148f52b5672a6cf263.src","preCode":"    public WhitelistMethod(String origin, String javaAugmentedClassName, String javaMethodName,\n                           String painlessReturnTypeName, List<String> painlessParameterTypeNames) {\n        this.origin = Objects.requireNonNull(origin);\n        this.javaAugmentedClassName = javaAugmentedClassName;\n        this.javaMethodName = javaMethodName;\n        this.painlessReturnTypeName = Objects.requireNonNull(painlessReturnTypeName);\n        this.painlessParameterTypeNames = Collections.unmodifiableList(Objects.requireNonNull(painlessParameterTypeNames));\n    }\n","realPath":"modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistMethod.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2018-08-14 00:14:00","commitOrder":2,"curCode":"    public WhitelistClass(String origin, String javaClassName, boolean noImport,\n                          List<WhitelistConstructor> whitelistConstructors,\n                          List<WhitelistMethod> whitelistMethods,\n                          List<WhitelistField> whitelistFields) {\n\n        this.origin = Objects.requireNonNull(origin);\n        this.javaClassName = Objects.requireNonNull(javaClassName);\n        this.noImport = noImport;\n\n        this.whitelistConstructors = Collections.unmodifiableList(Objects.requireNonNull(whitelistConstructors));\n        this.whitelistMethods = Collections.unmodifiableList(Objects.requireNonNull(whitelistMethods));\n        this.whitelistFields = Collections.unmodifiableList(Objects.requireNonNull(whitelistFields));\n    }\n","date":"2018-08-14 00:14:00","endLine":76,"groupId":"40696","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"WhitelistClass","params":"(Stringorigin@StringjavaClassName@booleannoImport@List<WhitelistConstructor>whitelistConstructors@List<WhitelistMethod>whitelistMethods@List<WhitelistField>whitelistFields)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0b/216ae5c29530c3b312e96e21fc7e5af74c976d.src","preCode":"    public WhitelistClass(String origin, String javaClassName, boolean onlyFQNJavaClassName,\n                          List<WhitelistConstructor> whitelistConstructors,\n                          List<WhitelistMethod> whitelistMethods,\n                          List<WhitelistField> whitelistFields) {\n        this.origin = Objects.requireNonNull(origin);\n        this.javaClassName = Objects.requireNonNull(javaClassName);\n        this.onlyFQNJavaClassName = onlyFQNJavaClassName;\n\n        this.whitelistConstructors = Collections.unmodifiableList(Objects.requireNonNull(whitelistConstructors));\n        this.whitelistMethods = Collections.unmodifiableList(Objects.requireNonNull(whitelistMethods));\n        this.whitelistFields = Collections.unmodifiableList(Objects.requireNonNull(whitelistFields));\n    }\n","realPath":"modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistClass.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"a771478940dafe021479749a8eea7ae649f874e9","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-14 00:14:00","modifiedFileCount":"47","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-06-25 00:00:44","codes":[{"authorDate":"2019-06-25 00:00:44","commitOrder":3,"curCode":"    public WhitelistMethod(String origin, String augmentedCanonicalClassName, String methodName,\n            String returnCanonicalTypeName, List<String> canonicalTypeNameParameters,\n            List<Object> painlessAnnotations) {\n\n        this.origin = Objects.requireNonNull(origin);\n        this.augmentedCanonicalClassName = augmentedCanonicalClassName;\n        this.methodName = methodName;\n        this.returnCanonicalTypeName = Objects.requireNonNull(returnCanonicalTypeName);\n        this.canonicalTypeNameParameters = Collections.unmodifiableList(Objects.requireNonNull(canonicalTypeNameParameters));\n\n        if (painlessAnnotations.isEmpty()) {\n            this.painlessAnnotations = Collections.emptyMap();\n        } else {\n            this.painlessAnnotations = Collections.unmodifiableMap(Objects.requireNonNull(painlessAnnotations).stream()\n                    .map(painlessAnnotation -> new AbstractMap.SimpleEntry<>(painlessAnnotation.getClass(), painlessAnnotation))\n                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));\n        }\n    }\n","date":"2019-06-25 00:00:44","endLine":92,"groupId":"101352","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"WhitelistMethod","params":"(Stringorigin@StringaugmentedCanonicalClassName@StringmethodName@StringreturnCanonicalTypeName@List<String>canonicalTypeNameParameters@List<Object>painlessAnnotations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/83/8fcba5034ac891bc40f8f62cee5648cc07be25.src","preCode":"    public WhitelistMethod(String origin, String augmentedCanonicalClassName, String methodName,\n            String returnCanonicalTypeName, List<String> canonicalTypeNameParameters) {\n\n        this.origin = Objects.requireNonNull(origin);\n        this.augmentedCanonicalClassName = augmentedCanonicalClassName;\n        this.methodName = methodName;\n        this.returnCanonicalTypeName = Objects.requireNonNull(returnCanonicalTypeName);\n        this.canonicalTypeNameParameters = Collections.unmodifiableList(Objects.requireNonNull(canonicalTypeNameParameters));\n    }\n","realPath":"modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistMethod.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2019-06-25 00:00:44","commitOrder":3,"curCode":"    public WhitelistClass(String origin, String javaClassName,\n            List<WhitelistConstructor> whitelistConstructors, List<WhitelistMethod> whitelistMethods, List<WhitelistField> whitelistFields,\n            List<Object> painlessAnnotations) {\n\n        this.origin = Objects.requireNonNull(origin);\n        this.javaClassName = Objects.requireNonNull(javaClassName);\n\n        this.whitelistConstructors = Collections.unmodifiableList(Objects.requireNonNull(whitelistConstructors));\n        this.whitelistMethods = Collections.unmodifiableList(Objects.requireNonNull(whitelistMethods));\n        this.whitelistFields = Collections.unmodifiableList(Objects.requireNonNull(whitelistFields));\n\n        if (painlessAnnotations.isEmpty()) {\n            this.painlessAnnotations = Collections.emptyMap();\n        } else {\n            this.painlessAnnotations = Collections.unmodifiableMap(Objects.requireNonNull(painlessAnnotations).stream()\n                    .map(painlessAnnotation -> new AbstractMap.SimpleEntry<>(painlessAnnotation.getClass(), painlessAnnotation))\n                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));\n        }\n    }\n","date":"2019-06-25 00:00:44","endLine":83,"groupId":"101352","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"WhitelistClass","params":"(Stringorigin@StringjavaClassName@List<WhitelistConstructor>whitelistConstructors@List<WhitelistMethod>whitelistMethods@List<WhitelistField>whitelistFields@List<Object>painlessAnnotations)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/2bf3e997a27b31e44759961a7d7a6c56739bca.src","preCode":"    public WhitelistClass(String origin, String javaClassName, boolean noImport,\n            List<WhitelistConstructor> whitelistConstructors, List<WhitelistMethod> whitelistMethods, List<WhitelistField> whitelistFields)\n    {\n\n        this.origin = Objects.requireNonNull(origin);\n        this.javaClassName = Objects.requireNonNull(javaClassName);\n        this.noImport = noImport;\n\n        this.whitelistConstructors = Collections.unmodifiableList(Objects.requireNonNull(whitelistConstructors));\n        this.whitelistMethods = Collections.unmodifiableList(Objects.requireNonNull(whitelistMethods));\n        this.whitelistFields = Collections.unmodifiableList(Objects.requireNonNull(whitelistFields));\n    }\n","realPath":"modules/lang-painless/spi/src/main/java/org/elasticsearch/painless/spi/WhitelistClass.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"ab7ca7fa0f0b8552445c15382d282815c43e477b","commitMessage":"@@@Add annotations to Painless whitelist (#43239)\n\n* Start to parse annotations in the whitelist\n\n* Finish parsing annotations\n\n* Finish annotation parsing\n\n* Add docs\n\n* Parser changes.\n\n* Add annotation parser.\n\n* Add annotation tests for Painless core.\n\n* Add example annotation to Painless example extension.\n\n* Response to PR comments.\n","date":"2019-06-25 00:00:44","modifiedFileCount":"12","status":"M","submitter":"Jack Conradson"}]
