[{"authorTime":"2018-08-24 01:52:59","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"search.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                service.acceptIncomingRequests();\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearch().get());\n                assertEquals(\"No handler for action [indices:data/read/search]\", ex.getMessage());\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":70,"groupId":"14499","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndExecuteRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a4/97e509c15773559c6eef6a6dbefb92fc32ecd2.src","preCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"search.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                service.acceptIncomingRequests();\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearch().get());\n                assertEquals(\"No handler for action [indices:data/read/search]\", ex.getMessage());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"NB"},{"authorDate":"2018-08-24 01:52:59","commitOrder":3,"curCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"search.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","date":"2018-08-24 01:52:59","endLine":116,"groupId":"24178","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureWeReconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/e22fd20de7fa3e7a7abff652dd2ab225125c41.src","preCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"search.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"MB"}],"commitId":"1f13c77b49f46f13b7a2dd40581d942f5ccedb05","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-24 01:52:59","modifiedFileCount":"111","status":"M","submitter":"Gordon Brown"},{"authorTime":"2018-09-06 15:17:40","codes":[{"authorDate":"2018-09-06 15:17:40","commitOrder":4,"curCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                service.acceptIncomingRequests();\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearch().get());\n                assertEquals(\"No handler for action [indices:data/read/search]\", ex.getMessage());\n            }\n        }\n    }\n","date":"2018-09-06 15:17:40","endLine":71,"groupId":"14499","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndExecuteRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/85d927e92958cdb5228835f2533afecf4f2bb7.src","preCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"search.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                service.acceptIncomingRequests();\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearch().get());\n                assertEquals(\"No handler for action [indices:data/read/search]\", ex.getMessage());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2018-09-06 15:17:40","commitOrder":4,"curCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","date":"2018-09-06 15:17:40","endLine":116,"groupId":"24178","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureWeReconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/85d927e92958cdb5228835f2533afecf4f2bb7.src","preCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"search.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"b1257d873bc8541b15d7c933a383344c151a1333","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-06 15:17:40","modifiedFileCount":"43","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-06 15:17:40","codes":[{"authorDate":"2019-01-31 22:12:14","commitOrder":5,"curCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                service.acceptIncomingRequests();\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","date":"2019-01-31 22:12:14","endLine":71,"groupId":"14499","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndExecuteRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/9c2e4eaf32018ab5570c90855a20e185f18bf6.src","preCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                service.acceptIncomingRequests();\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearch().get());\n                assertEquals(\"No handler for action [indices:data/read/search]\", ex.getMessage());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2018-09-06 15:17:40","commitOrder":5,"curCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","date":"2018-09-06 15:17:40","endLine":116,"groupId":"24178","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureWeReconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/85d927e92958cdb5228835f2533afecf4f2bb7.src","preCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"622fb7883b4e7c6de6dce2636108e334cca28cd3","commitMessage":"@@@Introduce ability to minimize round-trips in CCS (#37828)\n\nWith #37566 we have introduced the ability to merge multiple search responses into one. That makes it possible to expose a new way of executing cross-cluster search requests.  that makes CCS much faster whenever there is network latency between the CCS coordinating node and the remote clusters. The coordinating node can now send a single search request to each remote cluster.  which gets reduced by each one of them. from + size results are requested to each cluster.  and the reduce phase in each cluster is non final (meaning that buckets are not pruned and pipeline aggs are not executed). The CCS coordinating node performs an additional.  final reduction.  which produces one search response out of the multiple responses received from the different clusters.\n\nThis new execution path will be activated by default for any CCS request unless a scroll is provided or inner hits are requested as part of field collapsing. The search API accepts now a new parameter called ccs_minimize_roundtrips that allows to opt-out of the default behaviour.\n\nRelates to #32125","date":"2019-01-31 22:12:14","modifiedFileCount":"26","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2018-09-06 15:17:40","codes":[{"authorDate":"2019-07-11 04:41:18","commitOrder":6,"curCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","date":"2019-07-11 04:41:18","endLine":74,"groupId":"33407","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndExecuteRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3d/347512160650e057efac9da74a6499db8cd652.src","preCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                service.acceptIncomingRequests();\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2018-09-06 15:17:40","commitOrder":6,"curCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","date":"2018-09-06 15:17:40","endLine":116,"groupId":"24178","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureWeReconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/85d927e92958cdb5228835f2533afecf4f2bb7.src","preCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"943320f13eb9e311a8fba395cda36e8729017f87","commitMessage":"@@@[Test] Additional logging for RemoteClusterClientTests (#44124)\n\n","date":"2019-07-11 04:41:18","modifiedFileCount":"1","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2019-09-26 00:50:11","codes":[{"authorDate":"2019-07-11 04:41:18","commitOrder":7,"curCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","date":"2019-07-11 04:41:18","endLine":74,"groupId":"33407","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndExecuteRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3d/347512160650e057efac9da74a6499db8cd652.src","preCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2019-09-26 00:50:11","commitOrder":7,"curCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-09-26 00:50:11","endLine":119,"groupId":"24178","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureWeReconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2d/0097b43a715f0ef734874ebf5c7f1f35940669.src","preCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"632855885e77caaa31b37336576d92acca44641e","commitMessage":"@@@Extract proxy connection logic to specialized class (#46898)\n\nCurrently the logic to check if a connection to a remote discovery node\nexists and otherwise create a proxy connection is mixed with the\ncollect nodes.  cluster connection lifecycle.  and other\nRemoteClusterConnection logic. This commit introduces a specialized\nRemoteConnectionManager class which handles the open connections.\nAdditionally.  it reworks the \"round-robin\" proxy logic to create the list\nof potential connections at connection open/close time.  opposed to each\ntime a connection is requested.","date":"2019-09-26 00:50:11","modifiedFileCount":"14","status":"M","submitter":"Tim Brooks"},{"authorTime":"2019-11-20 00:08:03","codes":[{"authorDate":"2019-11-20 00:08:03","commitOrder":8,"curCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.sniff.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","date":"2019-11-20 00:08:03","endLine":75,"groupId":"33407","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndExecuteRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/f76b627b569712c3cb166c10a0dd188ced926c.src","preCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-11-20 00:08:03","commitOrder":8,"curCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.sniff.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-11-20 00:08:03","endLine":121,"groupId":"24178","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureWeReconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/f76b627b569712c3cb166c10a0dd188ced926c.src","preCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\", remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"4f4140431b83a82f5dc640f11cf9c3d396e88b46","commitMessage":"@@@Allow simple connection strategy to be configured (#49066)\n\nCurrently the simple connection strategy only exists in the code. It\ncannot be configured. This commit moves in the direction of allowing it\nto be configured. It introduces settings for the addresses and socket\ncount. Additionally it introduces new settings for the sniff strategy\nso that the more generic number of connections and seed node settings\ncan be deprecated.\n\nThe simple settings are not yet registered as the registration is\ndependent on follow-up work to validate the settings.","date":"2019-11-20 00:08:03","modifiedFileCount":"20","status":"M","submitter":"Tim Brooks"},{"authorTime":"2019-12-20 00:31:28","codes":[{"authorDate":"2019-12-20 00:31:28","commitOrder":9,"curCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","date":"2019-12-20 00:31:28","endLine":75,"groupId":"33407","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndExecuteRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ed/71b7f85c8633f976f77f0f1feb79bb1d820b3a.src","preCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.sniff.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2019-12-20 00:31:28","commitOrder":9,"curCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-12-20 00:31:28","endLine":121,"groupId":"24178","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureWeReconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ed/71b7f85c8633f976f77f0f1feb79bb1d820b3a.src","preCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.sniff.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"342a2920a9659ec9c5a8042ddb1d4b6aef965a71","commitMessage":"@@@Rename the remote connection mode simple to proxy (#50291)\n\nThis commit renames the simple connection mode to the proxy connection\nmode for remote cluster connections. In order to do this.  the mode specific\nsettings which we namespaced by their mode (ex: sniff.seed and\nproxy.addresses) have been reverted.","date":"2019-12-20 00:31:28","modifiedFileCount":"16","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-03-25 07:21:56","codes":[{"authorDate":"2020-03-25 07:21:56","commitOrder":10,"curCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(Node.NODE_REMOTE_CLUSTER_CLIENT.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","date":"2020-03-25 07:21:56","endLine":77,"groupId":"33407","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndExecuteRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/ea51ddfef5ac3ae921103e5c11dc279cc5e286.src","preCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2020-03-25 07:21:56","commitOrder":10,"curCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(Node.NODE_REMOTE_CLUSTER_CLIENT.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","date":"2020-03-25 07:21:56","endLine":123,"groupId":"24178","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureWeReconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/ea51ddfef5ac3ae921103e5c11dc279cc5e286.src","preCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(RemoteClusterService.ENABLE_REMOTE_CLUSTERS.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"1fc0432b244624ef800b616324f1d4d5911fcba8","commitMessage":"@@@Introduce formal role for remote cluster client (#53924)\n\nThis commit introduce a formal role for identifying nodes that are\ncapable of making connections to remote clusters.","date":"2020-03-25 07:21:56","modifiedFileCount":"24","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-05-08 01:41:33","codes":[{"authorDate":"2020-03-25 07:21:56","commitOrder":11,"curCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(Node.NODE_REMOTE_CLUSTER_CLIENT.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","date":"2020-03-25 07:21:56","endLine":77,"groupId":"33407","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndExecuteRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/ea51ddfef5ac3ae921103e5c11dc279cc5e286.src","preCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(Node.NODE_REMOTE_CLUSTER_CLIENT.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2020-05-08 01:41:33","commitOrder":11,"curCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(Node.NODE_REMOTE_CLUSTER_CLIENT.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                \r\n                service.acceptIncomingRequests();\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertBusy(() -> assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode)));\n                for (int i = 0; i < 10; i++) {\n                    RemoteClusterConnection remoteClusterConnection = remoteClusterService.getRemoteClusterConnection(\"test\");\n                    ConnectionManager connectionManager = remoteClusterConnection.getConnectionManager();\n                    Transport.Connection connection = connectionManager.getConnection(remoteNode);\n                    PlainActionFuture<Void> closeFuture = PlainActionFuture.newFuture();\n                    connection.addCloseListener(closeFuture);\n                    connectionManager.disconnectFromNode(remoteNode);\n                    closeFuture.get();\n\n                    Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                    ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                    assertNotNull(clusterStateResponse);\n                    assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                    assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                }\n            }\n        }\n    }\n","date":"2020-05-08 01:41:33","endLine":116,"groupId":"3566","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureWeReconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/a1db5dfeb0fd16e08508ba0d255d8ad2b92b15.src","preCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(Node.NODE_REMOTE_CLUSTER_CLIENT.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                Semaphore semaphore = new Semaphore(1);\n                service.start();\n                service.getRemoteClusterService().getConnections().forEach(con -> {\n                    con.getConnectionManager().addListener(new TransportConnectionListener() {\n                        @Override\n                        public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                            if (remoteNode.equals(node)) {\n                                semaphore.release();\n                            }\n                        }\n                    });\n                });\n                \r\n                \r\n                service.acceptIncomingRequests();\n                for (int i = 0; i < 10; i++) {\n                    semaphore.acquire();\n                    try {\n                        service.getRemoteClusterService().getConnections().forEach(con -> {\n                            con.getConnectionManager().disconnectFromNode(remoteNode);\n                        });\n                        semaphore.acquire();\n                        RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                        Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                        ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                        assertNotNull(clusterStateResponse);\n                        assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                        assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                    } finally {\n                        semaphore.release();\n                    }\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"a95586773fd9c01941fd6f1fecc0d9a3d6cf1571","commitMessage":"@@@Improve logging around SniffConnectionStrategy (#56292)\n\nCurrently.  the logging around the SniffConnectionStrategy is limited.\nThe log messages are inconsistent and sometimes wrong. This commit\ncleans up these log message to describe when connections are happening\nand what failed if a step fails.\n\nAdditionally.  this commit enables TRACE logging for a problematic test\n(testEnsureWeReconnect).","date":"2020-05-08 01:41:33","modifiedFileCount":"2","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-05-14 06:57:45","codes":[{"authorDate":"2020-03-25 07:21:56","commitOrder":12,"curCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(Node.NODE_REMOTE_CLUSTER_CLIENT.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","date":"2020-03-25 07:21:56","endLine":77,"groupId":"33407","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndExecuteRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/ea51ddfef5ac3ae921103e5c11dc279cc5e286.src","preCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(Node.NODE_REMOTE_CLUSTER_CLIENT.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2020-05-14 06:57:45","commitOrder":12,"curCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(Node.NODE_REMOTE_CLUSTER_CLIENT.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                \r\n                service.acceptIncomingRequests();\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertBusy(() -> assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode)));\n                for (int i = 0; i < 10; i++) {\n                    RemoteClusterConnection remoteClusterConnection = remoteClusterService.getRemoteClusterConnection(\"test\");\n                    assertBusy(remoteClusterConnection::assertNoRunningConnections);\n                    ConnectionManager connectionManager = remoteClusterConnection.getConnectionManager();\n                    Transport.Connection connection = connectionManager.getConnection(remoteNode);\n                    PlainActionFuture<Void> closeFuture = PlainActionFuture.newFuture();\n                    connection.addCloseListener(closeFuture);\n                    connectionManager.disconnectFromNode(remoteNode);\n                    closeFuture.get();\n\n                    Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                    ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                    assertNotNull(clusterStateResponse);\n                    assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                    assertTrue(remoteClusterConnection.isNodeConnected(remoteNode));\n                }\n            }\n        }\n    }\n","date":"2020-05-14 06:57:45","endLine":117,"groupId":"3566","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureWeReconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/59/6a3ab70b3710359fe2379be949dac980d283d8.src","preCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(Node.NODE_REMOTE_CLUSTER_CLIENT.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                \r\n                service.acceptIncomingRequests();\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertBusy(() -> assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode)));\n                for (int i = 0; i < 10; i++) {\n                    RemoteClusterConnection remoteClusterConnection = remoteClusterService.getRemoteClusterConnection(\"test\");\n                    ConnectionManager connectionManager = remoteClusterConnection.getConnectionManager();\n                    Transport.Connection connection = connectionManager.getConnection(remoteNode);\n                    PlainActionFuture<Void> closeFuture = PlainActionFuture.newFuture();\n                    connection.addCloseListener(closeFuture);\n                    connectionManager.disconnectFromNode(remoteNode);\n                    closeFuture.get();\n\n                    Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                    ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                    assertNotNull(clusterStateResponse);\n                    assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                    assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"9c7e0d4ddb2aefb694ed0935029a4206a0b036e0","commitMessage":"@@@Prevent connection races in testEnsureWeReconnect (#56654)\n\nCurrently it is possible that a sniff connection round is occurring as\nwe enter another test loop in testEnsureWeReconnect. The problem is that\nonce we enter another loop.  closing the connection manually can cause\nthis pre-existing connection round to fail. This round failing can fail\nthe test. This commit fixes the issue by ensuring that there are no\nin-progress connections before entering another loop.","date":"2020-05-14 06:57:45","modifiedFileCount":"4","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":13,"curCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(onlyRole(DiscoveryNodeRole.REMOTE_CLUSTER_CLIENT_ROLE))\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","date":"2020-06-26 22:33:37","endLine":81,"groupId":"104376","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndExecuteRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/442e9cecd2c0d41f59774ece95ebb91605e613.src","preCode":"    public void testConnectAndExecuteRequest() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n\n            Settings localSettings = Settings.builder()\n                .put(Node.NODE_REMOTE_CLUSTER_CLIENT.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                logger.info(\"Start accepting incoming requests on local transport service\");\n                service.acceptIncomingRequests();\n                logger.info(\"now accepting incoming requests on local transport\");\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode));\n                Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                assertNotNull(clusterStateResponse);\n                assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                \r\n                ActionNotFoundTransportException ex = expectThrows(ActionNotFoundTransportException.class,\n                    () -> client.prepareSearchScroll(\"\").get());\n                assertEquals(\"No handler for action [indices:data/read/scroll]\", ex.getMessage());\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-06-26 22:33:37","commitOrder":13,"curCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(onlyRole(DiscoveryNodeRole.REMOTE_CLUSTER_CLIENT_ROLE))\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                \r\n                service.acceptIncomingRequests();\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertBusy(() -> assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode)));\n                for (int i = 0; i < 10; i++) {\n                    RemoteClusterConnection remoteClusterConnection = remoteClusterService.getRemoteClusterConnection(\"test\");\n                    assertBusy(remoteClusterConnection::assertNoRunningConnections);\n                    ConnectionManager connectionManager = remoteClusterConnection.getConnectionManager();\n                    Transport.Connection connection = connectionManager.getConnection(remoteNode);\n                    PlainActionFuture<Void> closeFuture = PlainActionFuture.newFuture();\n                    connection.addCloseListener(closeFuture);\n                    connectionManager.disconnectFromNode(remoteNode);\n                    closeFuture.get();\n\n                    Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                    ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                    assertNotNull(clusterStateResponse);\n                    assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                    assertTrue(remoteClusterConnection.isNodeConnected(remoteNode));\n                }\n            }\n        }\n    }\n","date":"2020-06-26 22:33:37","endLine":120,"groupId":"104376","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnsureWeReconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/442e9cecd2c0d41f59774ece95ebb91605e613.src","preCode":"    public void testEnsureWeReconnect() throws Exception {\n        Settings remoteSettings = Settings.builder().put(ClusterName.CLUSTER_NAME_SETTING.getKey(), \"foo_bar_cluster\").build();\n        try (MockTransportService remoteTransport = startTransport(\"remote_node\", Collections.emptyList(), Version.CURRENT, threadPool,\n            remoteSettings)) {\n            DiscoveryNode remoteNode = remoteTransport.getLocalDiscoNode();\n            Settings localSettings = Settings.builder()\n                .put(Node.NODE_REMOTE_CLUSTER_CLIENT.getKey(), true)\n                .put(\"cluster.remote.test.seeds\",\n                    remoteNode.getAddress().getAddress() + \":\" + remoteNode.getAddress().getPort()).build();\n            try (MockTransportService service = MockTransportService.createNewService(localSettings, Version.CURRENT, threadPool, null)) {\n                service.start();\n                \r\n                \r\n                service.acceptIncomingRequests();\n                RemoteClusterService remoteClusterService = service.getRemoteClusterService();\n                assertBusy(() -> assertTrue(remoteClusterService.isRemoteNodeConnected(\"test\", remoteNode)));\n                for (int i = 0; i < 10; i++) {\n                    RemoteClusterConnection remoteClusterConnection = remoteClusterService.getRemoteClusterConnection(\"test\");\n                    assertBusy(remoteClusterConnection::assertNoRunningConnections);\n                    ConnectionManager connectionManager = remoteClusterConnection.getConnectionManager();\n                    Transport.Connection connection = connectionManager.getConnection(remoteNode);\n                    PlainActionFuture<Void> closeFuture = PlainActionFuture.newFuture();\n                    connection.addCloseListener(closeFuture);\n                    connectionManager.disconnectFromNode(remoteNode);\n                    closeFuture.get();\n\n                    Client client = remoteClusterService.getRemoteClusterClient(threadPool, \"test\");\n                    ClusterStateResponse clusterStateResponse = client.admin().cluster().prepareState().execute().get();\n                    assertNotNull(clusterStateResponse);\n                    assertEquals(\"foo_bar_cluster\", clusterStateResponse.getState().getClusterName().value());\n                    assertTrue(remoteClusterConnection.isNodeConnected(remoteNode));\n                }\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/RemoteClusterClientTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"}]
