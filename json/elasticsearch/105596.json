[{"authorTime":"2018-12-13 17:15:27","codes":[{"authorDate":"2018-12-13 17:15:27","commitOrder":1,"curCode":"    public void testNonClusterStateConditionAssignment() {\n        ClusterState clusterState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(clusterState);\n        PersistentTasksCustomMetaData.Builder tasks = PersistentTasksCustomMetaData.builder(\n            clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        MetaData.Builder metaData = MetaData.builder(clusterState.metaData()).putCustom(PersistentTasksCustomMetaData.TYPE, tasks.build());\n        clusterState = builder.metaData(metaData).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n        ClusterState newClusterState = reassign(clusterState);\n\n        PersistentTasksCustomMetaData tasksInProgress = newClusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), nullValue());\n            assertThat(task.isAssigned(), equalTo(false));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"non-cluster state condition prevents assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n\n        nonClusterStateCondition = true;\n        ClusterState finalClusterState = reassign(newClusterState);\n\n        tasksInProgress = finalClusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), notNullValue());\n            assertThat(task.isAssigned(), equalTo(true));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n    }\n","date":"2018-12-13 17:15:27","endLine":236,"groupId":"3962","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonClusterStateConditionAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/f77d1e803606b2533976c2f8421e3aeb7dc5b5.src","preCode":"    public void testNonClusterStateConditionAssignment() {\n        ClusterState clusterState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(clusterState);\n        PersistentTasksCustomMetaData.Builder tasks = PersistentTasksCustomMetaData.builder(\n            clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        MetaData.Builder metaData = MetaData.builder(clusterState.metaData()).putCustom(PersistentTasksCustomMetaData.TYPE, tasks.build());\n        clusterState = builder.metaData(metaData).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n        ClusterState newClusterState = reassign(clusterState);\n\n        PersistentTasksCustomMetaData tasksInProgress = newClusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), nullValue());\n            assertThat(task.isAssigned(), equalTo(false));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"non-cluster state condition prevents assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n\n        nonClusterStateCondition = true;\n        ClusterState finalClusterState = reassign(newClusterState);\n\n        tasksInProgress = finalClusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), notNullValue());\n            assertThat(task.isAssigned(), equalTo(true));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/persistent/PersistentTasksClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"B"},{"authorDate":"2018-12-13 17:15:27","commitOrder":1,"curCode":"    public void testPeriodicRecheck() throws Exception {\n        ClusterState initialState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(initialState);\n        PersistentTasksCustomMetaData.Builder tasks = PersistentTasksCustomMetaData.builder(\n            initialState.metaData().custom(PersistentTasksCustomMetaData.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(initialState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        MetaData.Builder metaData = MetaData.builder(initialState.metaData()).putCustom(PersistentTasksCustomMetaData.TYPE, tasks.build());\n        ClusterState clusterState = builder.metaData(metaData).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n\n        boolean shouldSimulateFailure = randomBoolean();\n        ClusterService recheckTestClusterService = createRecheckTestClusterService(clusterState, shouldSimulateFailure);\n        PersistentTasksClusterService service = createService(recheckTestClusterService,\n            (params, currentState) -> assignBasedOnNonClusterStateCondition(currentState.nodes()));\n\n        ClusterChangedEvent event = new ClusterChangedEvent(\"test\", clusterState, initialState);\n        service.clusterChanged(event);\n        ClusterState newClusterState = recheckTestClusterService.state();\n\n        {\n            PersistentTasksCustomMetaData tasksInProgress = newClusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), nullValue());\n                assertThat(task.isAssigned(), equalTo(false));\n                assertThat(task.getAssignment().getExplanation(), equalTo(shouldSimulateFailure ?\n                    \"explanation: assign_based_on_non_cluster_state_condition\" : \"non-cluster state condition prevents assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        }\n\n        nonClusterStateCondition = true;\n        service.setRecheckInterval(TimeValue.timeValueMillis(1));\n\n        assertBusy(() -> {\n            PersistentTasksCustomMetaData tasksInProgress =\n                recheckTestClusterService.state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), notNullValue());\n                assertThat(task.isAssigned(), equalTo(true));\n                assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        });\n    }\n","date":"2018-12-13 17:15:27","endLine":465,"groupId":"72211","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPeriodicRecheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/f77d1e803606b2533976c2f8421e3aeb7dc5b5.src","preCode":"    public void testPeriodicRecheck() throws Exception {\n        ClusterState initialState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(initialState);\n        PersistentTasksCustomMetaData.Builder tasks = PersistentTasksCustomMetaData.builder(\n            initialState.metaData().custom(PersistentTasksCustomMetaData.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(initialState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        MetaData.Builder metaData = MetaData.builder(initialState.metaData()).putCustom(PersistentTasksCustomMetaData.TYPE, tasks.build());\n        ClusterState clusterState = builder.metaData(metaData).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n\n        boolean shouldSimulateFailure = randomBoolean();\n        ClusterService recheckTestClusterService = createRecheckTestClusterService(clusterState, shouldSimulateFailure);\n        PersistentTasksClusterService service = createService(recheckTestClusterService,\n            (params, currentState) -> assignBasedOnNonClusterStateCondition(currentState.nodes()));\n\n        ClusterChangedEvent event = new ClusterChangedEvent(\"test\", clusterState, initialState);\n        service.clusterChanged(event);\n        ClusterState newClusterState = recheckTestClusterService.state();\n\n        {\n            PersistentTasksCustomMetaData tasksInProgress = newClusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), nullValue());\n                assertThat(task.isAssigned(), equalTo(false));\n                assertThat(task.getAssignment().getExplanation(), equalTo(shouldSimulateFailure ?\n                    \"explanation: assign_based_on_non_cluster_state_condition\" : \"non-cluster state condition prevents assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        }\n\n        nonClusterStateCondition = true;\n        service.setRecheckInterval(TimeValue.timeValueMillis(1));\n\n        assertBusy(() -> {\n            PersistentTasksCustomMetaData tasksInProgress =\n                recheckTestClusterService.state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), notNullValue());\n                assertThat(task.isAssigned(), equalTo(true));\n                assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/persistent/PersistentTasksClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"B"}],"commitId":"13cb0fb98b12ca3e058382186f8175ab1db84717","commitMessage":"@@@Periodically try to reassign unassigned persistent tasks (#36069)\n\nPreviously persistent task assignment was checked in the\nfollowing situations:\n\n- Persistent tasks are changed\n- A node joins or leaves the cluster\n- The routing table is changed\n- Custom metadata in the cluster state is changed\n- A new master node is elected\n\nHowever.  there could be situations when a persistent\ntask that could not be assigned to a node could become\nassignable due to some other change.  such as memory\nusage on the nodes.\n\nThis change adds a timed recheck of persistent task\nassignment to account for such situations.  The timer\nis suspended while checks triggered by cluster state\nchanges are in-flight to avoid adding burden to an\nalready busy cluster.\n\nCloses #35792","date":"2018-12-13 17:15:27","modifiedFileCount":"9","status":"B","submitter":"David Roberts"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testNonClusterStateConditionAssignment() {\n        ClusterState clusterState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(clusterState);\n        PersistentTasksCustomMetadata.Builder tasks = PersistentTasksCustomMetadata.builder(\n            clusterState.metadata().custom(PersistentTasksCustomMetadata.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        Metadata.Builder metadata = Metadata.builder(clusterState.metadata()).putCustom(PersistentTasksCustomMetadata.TYPE, tasks.build());\n        clusterState = builder.metadata(metadata).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n        ClusterState newClusterState = reassign(clusterState);\n\n        PersistentTasksCustomMetadata tasksInProgress = newClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), nullValue());\n            assertThat(task.isAssigned(), equalTo(false));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"non-cluster state condition prevents assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n\n        nonClusterStateCondition = true;\n        ClusterState finalClusterState = reassign(newClusterState);\n\n        tasksInProgress = finalClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), notNullValue());\n            assertThat(task.isAssigned(), equalTo(true));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n    }\n","date":"2020-04-01 03:52:01","endLine":240,"groupId":"3962","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonClusterStateConditionAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/8678e8c2abdb6945604ff3cc8733e2f25f4304.src","preCode":"    public void testNonClusterStateConditionAssignment() {\n        ClusterState clusterState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(clusterState);\n        PersistentTasksCustomMetaData.Builder tasks = PersistentTasksCustomMetaData.builder(\n            clusterState.metaData().custom(PersistentTasksCustomMetaData.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        MetaData.Builder metaData = MetaData.builder(clusterState.metaData()).putCustom(PersistentTasksCustomMetaData.TYPE, tasks.build());\n        clusterState = builder.metaData(metaData).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n        ClusterState newClusterState = reassign(clusterState);\n\n        PersistentTasksCustomMetaData tasksInProgress = newClusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), nullValue());\n            assertThat(task.isAssigned(), equalTo(false));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"non-cluster state condition prevents assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n\n        nonClusterStateCondition = true;\n        ClusterState finalClusterState = reassign(newClusterState);\n\n        tasksInProgress = finalClusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), notNullValue());\n            assertThat(task.isAssigned(), equalTo(true));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/persistent/PersistentTasksClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testPeriodicRecheck() throws Exception {\n        ClusterState initialState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(initialState);\n        PersistentTasksCustomMetadata.Builder tasks = PersistentTasksCustomMetadata.builder(\n            initialState.metadata().custom(PersistentTasksCustomMetadata.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(initialState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        Metadata.Builder metadata = Metadata.builder(initialState.metadata()).putCustom(PersistentTasksCustomMetadata.TYPE, tasks.build());\n        ClusterState clusterState = builder.metadata(metadata).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n\n        boolean shouldSimulateFailure = randomBoolean();\n        ClusterService recheckTestClusterService = createRecheckTestClusterService(clusterState, shouldSimulateFailure);\n        PersistentTasksClusterService service = createService(recheckTestClusterService,\n            (params, currentState) -> assignBasedOnNonClusterStateCondition(currentState.nodes()));\n\n        ClusterChangedEvent event = new ClusterChangedEvent(\"test\", clusterState, initialState);\n        service.clusterChanged(event);\n        ClusterState newClusterState = recheckTestClusterService.state();\n\n        {\n            PersistentTasksCustomMetadata tasksInProgress = newClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), nullValue());\n                assertThat(task.isAssigned(), equalTo(false));\n                assertThat(task.getAssignment().getExplanation(), equalTo(shouldSimulateFailure ?\n                    \"explanation: assign_based_on_non_cluster_state_condition\" : \"non-cluster state condition prevents assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        }\n\n        nonClusterStateCondition = true;\n        service.setRecheckInterval(TimeValue.timeValueMillis(1));\n\n        assertBusy(() -> {\n            PersistentTasksCustomMetadata tasksInProgress =\n                recheckTestClusterService.state().getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), notNullValue());\n                assertThat(task.isAssigned(), equalTo(true));\n                assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        });\n    }\n","date":"2020-04-01 03:52:01","endLine":469,"groupId":"72211","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPeriodicRecheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/8678e8c2abdb6945604ff3cc8733e2f25f4304.src","preCode":"    public void testPeriodicRecheck() throws Exception {\n        ClusterState initialState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(initialState);\n        PersistentTasksCustomMetaData.Builder tasks = PersistentTasksCustomMetaData.builder(\n            initialState.metaData().custom(PersistentTasksCustomMetaData.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(initialState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        MetaData.Builder metaData = MetaData.builder(initialState.metaData()).putCustom(PersistentTasksCustomMetaData.TYPE, tasks.build());\n        ClusterState clusterState = builder.metaData(metaData).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n\n        boolean shouldSimulateFailure = randomBoolean();\n        ClusterService recheckTestClusterService = createRecheckTestClusterService(clusterState, shouldSimulateFailure);\n        PersistentTasksClusterService service = createService(recheckTestClusterService,\n            (params, currentState) -> assignBasedOnNonClusterStateCondition(currentState.nodes()));\n\n        ClusterChangedEvent event = new ClusterChangedEvent(\"test\", clusterState, initialState);\n        service.clusterChanged(event);\n        ClusterState newClusterState = recheckTestClusterService.state();\n\n        {\n            PersistentTasksCustomMetaData tasksInProgress = newClusterState.getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), nullValue());\n                assertThat(task.isAssigned(), equalTo(false));\n                assertThat(task.getAssignment().getExplanation(), equalTo(shouldSimulateFailure ?\n                    \"explanation: assign_based_on_non_cluster_state_condition\" : \"non-cluster state condition prevents assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        }\n\n        nonClusterStateCondition = true;\n        service.setRecheckInterval(TimeValue.timeValueMillis(1));\n\n        assertBusy(() -> {\n            PersistentTasksCustomMetaData tasksInProgress =\n                recheckTestClusterService.state().getMetaData().custom(PersistentTasksCustomMetaData.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), notNullValue());\n                assertThat(task.isAssigned(), equalTo(true));\n                assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/persistent/PersistentTasksClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2021-04-29 14:16:22","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testNonClusterStateConditionAssignment() {\n        ClusterState clusterState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(clusterState);\n        PersistentTasksCustomMetadata.Builder tasks = PersistentTasksCustomMetadata.builder(\n            clusterState.metadata().custom(PersistentTasksCustomMetadata.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        Metadata.Builder metadata = Metadata.builder(clusterState.metadata()).putCustom(PersistentTasksCustomMetadata.TYPE, tasks.build());\n        clusterState = builder.metadata(metadata).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n        ClusterState newClusterState = reassign(clusterState);\n\n        PersistentTasksCustomMetadata tasksInProgress = newClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), nullValue());\n            assertThat(task.isAssigned(), equalTo(false));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"non-cluster state condition prevents assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n\n        nonClusterStateCondition = true;\n        ClusterState finalClusterState = reassign(newClusterState);\n\n        tasksInProgress = finalClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), notNullValue());\n            assertThat(task.isAssigned(), equalTo(true));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n    }\n","date":"2020-04-01 03:52:01","endLine":240,"groupId":"3962","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonClusterStateConditionAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/8678e8c2abdb6945604ff3cc8733e2f25f4304.src","preCode":"    public void testNonClusterStateConditionAssignment() {\n        ClusterState clusterState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(clusterState);\n        PersistentTasksCustomMetadata.Builder tasks = PersistentTasksCustomMetadata.builder(\n            clusterState.metadata().custom(PersistentTasksCustomMetadata.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        Metadata.Builder metadata = Metadata.builder(clusterState.metadata()).putCustom(PersistentTasksCustomMetadata.TYPE, tasks.build());\n        clusterState = builder.metadata(metadata).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n        ClusterState newClusterState = reassign(clusterState);\n\n        PersistentTasksCustomMetadata tasksInProgress = newClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), nullValue());\n            assertThat(task.isAssigned(), equalTo(false));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"non-cluster state condition prevents assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n\n        nonClusterStateCondition = true;\n        ClusterState finalClusterState = reassign(newClusterState);\n\n        tasksInProgress = finalClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), notNullValue());\n            assertThat(task.isAssigned(), equalTo(true));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/persistent/PersistentTasksClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"N"},{"authorDate":"2021-04-29 14:16:22","commitOrder":3,"curCode":"    public void testPeriodicRecheck() throws Exception {\n        ClusterState initialState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(initialState);\n        PersistentTasksCustomMetadata.Builder tasks = PersistentTasksCustomMetadata.builder(\n            initialState.metadata().custom(PersistentTasksCustomMetadata.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(initialState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        Metadata.Builder metadata = Metadata.builder(initialState.metadata()).putCustom(PersistentTasksCustomMetadata.TYPE, tasks.build());\n        ClusterState clusterState = builder.metadata(metadata).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n\n        boolean shouldSimulateFailure = randomBoolean();\n        ClusterService recheckTestClusterService = createRecheckTestClusterService(clusterState, shouldSimulateFailure);\n        PersistentTasksClusterService service = createService(recheckTestClusterService,\n            (params, candidateNodes, currentState) -> assignBasedOnNonClusterStateCondition(candidateNodes));\n\n        ClusterChangedEvent event = new ClusterChangedEvent(\"test\", clusterState, initialState);\n        service.clusterChanged(event);\n        ClusterState newClusterState = recheckTestClusterService.state();\n\n        {\n            PersistentTasksCustomMetadata tasksInProgress = newClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), nullValue());\n                assertThat(task.isAssigned(), equalTo(false));\n                assertThat(task.getAssignment().getExplanation(), equalTo(shouldSimulateFailure ?\n                    \"explanation: assign_based_on_non_cluster_state_condition\" : \"non-cluster state condition prevents assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        }\n\n        nonClusterStateCondition = true;\n        service.setRecheckInterval(TimeValue.timeValueMillis(1));\n\n        assertBusy(() -> {\n            PersistentTasksCustomMetadata tasksInProgress =\n                recheckTestClusterService.state().getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), notNullValue());\n                assertThat(task.isAssigned(), equalTo(true));\n                assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        });\n    }\n","date":"2021-04-29 14:16:22","endLine":466,"groupId":"69630","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPeriodicRecheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/29/b5cfe5db8702b96d98514bf5e5c81934d489fc.src","preCode":"    public void testPeriodicRecheck() throws Exception {\n        ClusterState initialState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(initialState);\n        PersistentTasksCustomMetadata.Builder tasks = PersistentTasksCustomMetadata.builder(\n            initialState.metadata().custom(PersistentTasksCustomMetadata.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(initialState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        Metadata.Builder metadata = Metadata.builder(initialState.metadata()).putCustom(PersistentTasksCustomMetadata.TYPE, tasks.build());\n        ClusterState clusterState = builder.metadata(metadata).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n\n        boolean shouldSimulateFailure = randomBoolean();\n        ClusterService recheckTestClusterService = createRecheckTestClusterService(clusterState, shouldSimulateFailure);\n        PersistentTasksClusterService service = createService(recheckTestClusterService,\n            (params, currentState) -> assignBasedOnNonClusterStateCondition(currentState.nodes()));\n\n        ClusterChangedEvent event = new ClusterChangedEvent(\"test\", clusterState, initialState);\n        service.clusterChanged(event);\n        ClusterState newClusterState = recheckTestClusterService.state();\n\n        {\n            PersistentTasksCustomMetadata tasksInProgress = newClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), nullValue());\n                assertThat(task.isAssigned(), equalTo(false));\n                assertThat(task.getAssignment().getExplanation(), equalTo(shouldSimulateFailure ?\n                    \"explanation: assign_based_on_non_cluster_state_condition\" : \"non-cluster state condition prevents assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        }\n\n        nonClusterStateCondition = true;\n        service.setRecheckInterval(TimeValue.timeValueMillis(1));\n\n        assertBusy(() -> {\n            PersistentTasksCustomMetadata tasksInProgress =\n                recheckTestClusterService.state().getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), notNullValue());\n                assertThat(task.isAssigned(), equalTo(true));\n                assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/persistent/PersistentTasksClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"}],"commitId":"bfbd991557ae9e84ce7b3f7d9eebe5ffe20080bb","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-29 14:16:22","modifiedFileCount":"178","status":"M","submitter":"iverase"},{"authorTime":"2021-08-11 02:11:16","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void testNonClusterStateConditionAssignment() {\n        ClusterState clusterState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(clusterState);\n        PersistentTasksCustomMetadata.Builder tasks = PersistentTasksCustomMetadata.builder(\n            clusterState.metadata().custom(PersistentTasksCustomMetadata.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        Metadata.Builder metadata = Metadata.builder(clusterState.metadata()).putCustom(PersistentTasksCustomMetadata.TYPE, tasks.build());\n        clusterState = builder.metadata(metadata).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n        ClusterState newClusterState = reassign(clusterState);\n\n        PersistentTasksCustomMetadata tasksInProgress = newClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), nullValue());\n            assertThat(task.isAssigned(), equalTo(false));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"non-cluster state condition prevents assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n\n        nonClusterStateCondition = true;\n        ClusterState finalClusterState = reassign(newClusterState);\n\n        tasksInProgress = finalClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), notNullValue());\n            assertThat(task.isAssigned(), equalTo(true));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n    }\n","date":"2020-04-01 03:52:01","endLine":240,"groupId":"105596","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonClusterStateConditionAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/8678e8c2abdb6945604ff3cc8733e2f25f4304.src","preCode":"    public void testNonClusterStateConditionAssignment() {\n        ClusterState clusterState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(clusterState);\n        PersistentTasksCustomMetadata.Builder tasks = PersistentTasksCustomMetadata.builder(\n            clusterState.metadata().custom(PersistentTasksCustomMetadata.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        Metadata.Builder metadata = Metadata.builder(clusterState.metadata()).putCustom(PersistentTasksCustomMetadata.TYPE, tasks.build());\n        clusterState = builder.metadata(metadata).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n        ClusterState newClusterState = reassign(clusterState);\n\n        PersistentTasksCustomMetadata tasksInProgress = newClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), nullValue());\n            assertThat(task.isAssigned(), equalTo(false));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"non-cluster state condition prevents assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n\n        nonClusterStateCondition = true;\n        ClusterState finalClusterState = reassign(newClusterState);\n\n        tasksInProgress = finalClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n        assertThat(tasksInProgress, notNullValue());\n        for (PersistentTask<?> task : tasksInProgress.tasks()) {\n            assertThat(task.getExecutorNode(), notNullValue());\n            assertThat(task.isAssigned(), equalTo(true));\n            assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n        }\n        assertThat(tasksInProgress.tasks().size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/persistent/PersistentTasksClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"N"},{"authorDate":"2021-08-11 02:11:16","commitOrder":4,"curCode":"    public void testPeriodicRecheck() throws Exception {\n        ClusterState initialState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(initialState);\n        PersistentTasksCustomMetadata.Builder tasks = PersistentTasksCustomMetadata.builder(\n            initialState.metadata().custom(PersistentTasksCustomMetadata.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(initialState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        Metadata.Builder metadata = Metadata.builder(initialState.metadata()).putCustom(PersistentTasksCustomMetadata.TYPE, tasks.build());\n        ClusterState clusterState = builder.metadata(metadata).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n\n        boolean shouldSimulateFailure = randomBoolean();\n        ClusterService recheckTestClusterService = createStateUpdateClusterState(clusterState, shouldSimulateFailure);\n        PersistentTasksClusterService service = createService(recheckTestClusterService,\n            (params, candidateNodes, currentState) -> assignBasedOnNonClusterStateCondition(candidateNodes));\n\n        ClusterChangedEvent event = new ClusterChangedEvent(\"test\", clusterState, initialState);\n        service.clusterChanged(event);\n        ClusterState newClusterState = recheckTestClusterService.state();\n\n        {\n            PersistentTasksCustomMetadata tasksInProgress = newClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), nullValue());\n                assertThat(task.isAssigned(), equalTo(false));\n                assertThat(task.getAssignment().getExplanation(), equalTo(shouldSimulateFailure ?\n                    \"explanation: assign_based_on_non_cluster_state_condition\" : \"non-cluster state condition prevents assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        }\n\n        nonClusterStateCondition = true;\n        service.setRecheckInterval(TimeValue.timeValueMillis(1));\n\n        assertBusy(() -> {\n            PersistentTasksCustomMetadata tasksInProgress =\n                recheckTestClusterService.state().getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), notNullValue());\n                assertThat(task.isAssigned(), equalTo(true));\n                assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        });\n    }\n","date":"2021-08-11 02:11:16","endLine":472,"groupId":"105596","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPeriodicRecheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5f/b842f88b471ae3bfdd810e1be05b7847eb1e6e.src","preCode":"    public void testPeriodicRecheck() throws Exception {\n        ClusterState initialState = initialState();\n        ClusterState.Builder builder = ClusterState.builder(initialState);\n        PersistentTasksCustomMetadata.Builder tasks = PersistentTasksCustomMetadata.builder(\n            initialState.metadata().custom(PersistentTasksCustomMetadata.TYPE));\n        DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(initialState.nodes());\n        addTestNodes(nodes, randomIntBetween(1, 3));\n        addTask(tasks, \"assign_based_on_non_cluster_state_condition\", null);\n        Metadata.Builder metadata = Metadata.builder(initialState.metadata()).putCustom(PersistentTasksCustomMetadata.TYPE, tasks.build());\n        ClusterState clusterState = builder.metadata(metadata).nodes(nodes).build();\n\n        nonClusterStateCondition = false;\n\n        boolean shouldSimulateFailure = randomBoolean();\n        ClusterService recheckTestClusterService = createRecheckTestClusterService(clusterState, shouldSimulateFailure);\n        PersistentTasksClusterService service = createService(recheckTestClusterService,\n            (params, candidateNodes, currentState) -> assignBasedOnNonClusterStateCondition(candidateNodes));\n\n        ClusterChangedEvent event = new ClusterChangedEvent(\"test\", clusterState, initialState);\n        service.clusterChanged(event);\n        ClusterState newClusterState = recheckTestClusterService.state();\n\n        {\n            PersistentTasksCustomMetadata tasksInProgress = newClusterState.getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), nullValue());\n                assertThat(task.isAssigned(), equalTo(false));\n                assertThat(task.getAssignment().getExplanation(), equalTo(shouldSimulateFailure ?\n                    \"explanation: assign_based_on_non_cluster_state_condition\" : \"non-cluster state condition prevents assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        }\n\n        nonClusterStateCondition = true;\n        service.setRecheckInterval(TimeValue.timeValueMillis(1));\n\n        assertBusy(() -> {\n            PersistentTasksCustomMetadata tasksInProgress =\n                recheckTestClusterService.state().getMetadata().custom(PersistentTasksCustomMetadata.TYPE);\n            assertThat(tasksInProgress, notNullValue());\n            for (PersistentTask<?> task : tasksInProgress.tasks()) {\n                assertThat(task.getExecutorNode(), notNullValue());\n                assertThat(task.isAssigned(), equalTo(true));\n                assertThat(task.getAssignment().getExplanation(), equalTo(\"test assignment\"));\n            }\n            assertThat(tasksInProgress.tasks().size(), equalTo(1));\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/persistent/PersistentTasksClusterServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":424,"status":"M"}],"commitId":"e8a3b05fcfabdac50cdcaaf72a51ff5eee3d9942","commitMessage":"@@@Only start re-assigning persistent tasks if they are not already being reassigned (#76258)\n\n* Only start re-assigning persistent tasks if they are not already being reassigned\n\n* adding tests addressing PR comments\n\n* addressing Pr COmments\n\n* addressing PR comments + style\"\n\n* improving test rigor","date":"2021-08-11 02:11:16","modifiedFileCount":"4","status":"M","submitter":"Benjamin Trent"}]
