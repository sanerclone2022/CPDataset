[{"authorTime":"2019-02-19 22:53:36","codes":[{"authorDate":"2019-02-19 05:52:51","commitOrder":3,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2019-02-19 05:52:51","endLine":166,"groupId":"18187","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/45/67f3e3823370f3a4153876b1760f84b433f53f.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"NB"},{"authorDate":"2019-02-19 22:53:36","commitOrder":3,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-02-19 22:53:36","endLine":256,"groupId":"42963","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/d7d5039ae8b414c4ed63ad9932132a471c8cae.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"B"}],"commitId":"92ef753b56d25215f19098cbce91553fcae74c64","commitMessage":"@@@Allow retention lease operations under blocks (#39089)\n\nThis commit allows manipulating retention leases under blocks.","date":"2019-02-19 22:53:36","modifiedFileCount":"9","status":"M","submitter":"Jason Tedor"},{"authorTime":"2019-11-28 18:31:51","codes":[{"authorDate":"2019-11-28 18:31:51","commitOrder":4,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2019-11-28 18:31:51","endLine":159,"groupId":"42963","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2019-11-28 18:31:51","commitOrder":4,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-28 18:31:51","endLine":185,"groupId":"32593","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"6cca2b04fa06b981d3a73e12d3956bafd07b0e8a","commitMessage":"@@@Remove obsolete resolving logic from TRA (#49647)\n\nThis stems from a time where index requests were directly forwarded to\nTransportReplicationAction. Nowadays they are wrapped in a BulkShardRequest.  and this logic is\nobsolete.\n\nCloses #20279","date":"2019-11-28 18:31:51","modifiedFileCount":"22","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2019-11-28 20:12:27","codes":[{"authorDate":"2019-11-28 20:12:27","commitOrder":5,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2019-11-28 20:12:53","endLine":162,"groupId":"18187","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/e10a80fe79375905272e9013261fbadb78ac52.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2019-11-28 20:12:27","commitOrder":5,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-28 20:12:53","endLine":189,"groupId":"42963","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/e10a80fe79375905272e9013261fbadb78ac52.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"a354c607228d6c1784f6b1f02862fe363e859cdf","commitMessage":"@@@Revert \"Remove obsolete resolving logic from TRA (#49647)\"\n\nThis reverts commit 6cca2b04fa06b981d3a73e12d3956bafd07b0e8a.\n","date":"2019-11-28 20:12:53","modifiedFileCount":"22","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2019-11-29 18:01:24","codes":[{"authorDate":"2019-11-29 18:01:24","commitOrder":6,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2019-11-29 18:01:24","endLine":159,"groupId":"42963","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2019-11-29 18:01:24","commitOrder":6,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-29 18:01:24","endLine":185,"groupId":"32593","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"3ad8aa6d46580229823d298e9ce68ba3aaadc3d6","commitMessage":"@@@Remove obsolete resolving logic from TRA (#49685)\n\nThis stems from a time where index requests were directly forwarded to\nTransportReplicationAction. Nowadays they are wrapped in a BulkShardRequest.  and this logic is\nobsolete.\n\nIn contrast to prior PR (#49647).  this PR also fixes (see b3697cc) a situation where the previous\nindex expression logic had an interesting side effect. For bulk requests (which had resolveIndex\n= false).  the reroute phase was waiting for the index to appear in case where it was not present. \nand for all other replication requests (resolveIndex = true) it would right away throw an\nIndexNotFoundException while resolving the name and exit. With #49647.  every replication\nrequest was now waiting for the index to appear.  which was problematic when the given index\nhad just been deleted (e.g. deleting a follower index while it's still receiving requests from the\nleader.  where these requests would now wait up to a minute for the index to appear). This PR\nnow adds b3697cc on top of that prior PR to make sure to reestablish some of the prior behavior\nwhere the reroute phase waits for the bulk request for the index to appear. That logic was in\nplace to ensure that when an index was created and not all nodes had learned about it yet.  that\nthe bulk would not fail somewhere in the reroute phase. This is now only restricted to the\nsituation where the current node has an older cluster state than the one that coordinated the\nbulk request (which checks that the index is present). This also means that when an index is\ndeleted.  we will no longer unnecessarily wait up to the timeout for the index o appear.  and\ninstead fail the request.\n\nCloses #20279","date":"2019-11-29 18:01:24","modifiedFileCount":"27","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2019-11-29 18:01:24","codes":[{"authorDate":"2019-12-03 18:46:50","commitOrder":7,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.runPostReplicaActions(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2019-12-03 18:46:50","endLine":159,"groupId":"42963","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/ccbc7ff482f83631a24d08197047c12d4ef9d4.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2019-11-29 18:01:24","commitOrder":7,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-29 18:01:24","endLine":185,"groupId":"32593","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"}],"commitId":"8c165e04a1cf0efd019a5c5f686e3b49fb17d145","commitMessage":"@@@Replicate write actions before fsyncing them (#49746)\n\nThis commit fixes a number of issues with data replication:\n\n- Local and global checkpoints are not updated after the new operations have been fsynced.  but\nmight capture a state before the fsync. The reason why this probably went undetected for so\nlong is that AsyncIOProcessor is synchronous if you index one item at a time.  and hence working\nas intended unless you have a high enough level of concurrent indexing. As we rely in other\nplaces on the assumption that we have an up-to-date local checkpoint in case of synchronous\ntranslog durability.  there's a risk for the local and global checkpoints not to be up-to-date after\nreplication completes.  and that this won't be corrected by the periodic global checkpoint sync.\n- AsyncIOProcessor also has another \"bad\" side effect here: if you index one bulk at a time.  the\nbulk is always first fsynced on the primary before being sent to the replica. Further.  if one thread\nis tasked by AsyncIOProcessor to drain the processing queue and fsync.  other threads can\neasily pile more bulk requests on top of that thread. Things are not very fair here.  and the thread\nmight continue doing a lot more fsyncs before returning (as the other threads pile more and\nmore on top).  which blocks it from returning as a replication request (e.g. if this thread is on the\nprimary.  it blocks the replication requests to the replicas from going out.  and delaying\ncheckpoint advancement).\n\nThis commit fixes all these issues.  and also simplifies the code that coordinates all the after\nwrite actions.","date":"2019-12-03 18:46:50","modifiedFileCount":"13","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2019-11-29 18:01:24","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":8,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final PlainActionFuture<TransportReplicationAction.ReplicaResult> listener = PlainActionFuture.newFuture();\n        action.shardOperationOnReplica(request, indexShard, listener);\n        final TransportReplicationAction.ReplicaResult result = listener.actionGet();\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.runPostReplicaActions(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2020-06-26 22:33:37","endLine":164,"groupId":"103573","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/8607ab01c768359aebb1d1b471c98dbabd5255.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.runPostReplicaActions(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2019-11-29 18:01:24","commitOrder":8,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-29 18:01:24","endLine":185,"groupId":"103573","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"}]
