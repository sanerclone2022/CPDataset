[{"authorTime":"2021-07-23 02:12:20","codes":[{"authorDate":"2021-04-21 21:28:12","commitOrder":8,"curCode":"    public void testCreateDataStream() throws Exception {\n        final MetadataCreateIndexService metadataCreateIndexService = getMetadataCreateIndexService();\n        final String dataStreamName = \"my-data-stream\";\n        ComposableIndexTemplate template = new ComposableIndexTemplate.Builder()\n            .indexPatterns(List.of(dataStreamName + \"*\"))\n            .dataStreamTemplate(new ComposableIndexTemplate.DataStreamTemplate())\n            .build();\n        ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n            .metadata(Metadata.builder().put(\"template\", template).build())\n            .build();\n        CreateDataStreamClusterStateUpdateRequest req =\n            new CreateDataStreamClusterStateUpdateRequest(dataStreamName, TimeValue.ZERO, TimeValue.ZERO);\n        ClusterState newState =\n            MetadataCreateDataStreamService.createDataStream(metadataCreateIndexService, cs, req);\n        assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isSystem(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isHidden(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isReplicated(), is(false));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)), notNullValue());\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getSettings().get(\"index.hidden\"),\n            equalTo(\"true\"));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).isSystem(), is(false));\n    }\n","date":"2021-04-21 21:28:12","endLine":66,"groupId":"4637","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateDataStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/b90028b01d6b7ea64387c5d0cc06658fc3724a.src","preCode":"    public void testCreateDataStream() throws Exception {\n        final MetadataCreateIndexService metadataCreateIndexService = getMetadataCreateIndexService();\n        final String dataStreamName = \"my-data-stream\";\n        ComposableIndexTemplate template = new ComposableIndexTemplate.Builder()\n            .indexPatterns(List.of(dataStreamName + \"*\"))\n            .dataStreamTemplate(new ComposableIndexTemplate.DataStreamTemplate())\n            .build();\n        ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n            .metadata(Metadata.builder().put(\"template\", template).build())\n            .build();\n        CreateDataStreamClusterStateUpdateRequest req =\n            new CreateDataStreamClusterStateUpdateRequest(dataStreamName, TimeValue.ZERO, TimeValue.ZERO);\n        ClusterState newState =\n            MetadataCreateDataStreamService.createDataStream(metadataCreateIndexService, cs, req);\n        assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isSystem(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isHidden(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isReplicated(), is(false));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)), notNullValue());\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getSettings().get(\"index.hidden\"),\n            equalTo(\"true\"));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).isSystem(), is(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"NB"},{"authorDate":"2021-07-23 02:12:20","commitOrder":8,"curCode":"    public void testCreateDataStreamWithAliasFromTemplate() throws Exception {\n        final MetadataCreateIndexService metadataCreateIndexService = getMetadataCreateIndexService();\n        final String dataStreamName = \"my-data-stream\";\n        final int aliasCount = randomIntBetween(0, 3);\n        Map<String, AliasMetadata> aliases = new HashMap<>(aliasCount);\n        for (int k = 0; k < aliasCount; k++) {\n            final String aliasName = randomAlphaOfLength(6);\n            var builder = AliasMetadata.newAliasMetadataBuilder(aliasName);\n            if (randomBoolean()) {\n                builder.filter(Map.of(\"term\", Map.of(\"user\", Map.of(\"value\", randomAlphaOfLength(5)))));\n            }\n            builder.writeIndex(randomBoolean());\n            aliases.put(aliasName, builder.build());\n        }\n        ComposableIndexTemplate template = new ComposableIndexTemplate.Builder()\n            .indexPatterns(List.of(dataStreamName + \"*\"))\n            .dataStreamTemplate(new DataStreamTemplate())\n            .template(new Template(null, null, aliases))\n            .build();\n        ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n            .metadata(Metadata.builder().put(\"template\", template).build())\n            .build();\n        CreateDataStreamClusterStateUpdateRequest req =\n            new CreateDataStreamClusterStateUpdateRequest(dataStreamName, TimeValue.ZERO, TimeValue.ZERO);\n        ClusterState newState = MetadataCreateDataStreamService.createDataStream(metadataCreateIndexService, cs, req);\n        assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isSystem(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isHidden(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isReplicated(), is(false));\n        assertThat(newState.metadata().dataStreamAliases().size(), is(aliasCount));\n        for (String aliasName : aliases.keySet()) {\n            var expectedAlias = aliases.get(aliasName);\n            var actualAlias = newState.metadata().dataStreamAliases().get(aliasName);\n            assertThat(actualAlias, is(notNullValue()));\n            assertThat(actualAlias.getName(), equalTo(expectedAlias.alias()));\n            assertThat(actualAlias.getFilter(), equalTo(expectedAlias.filter()));\n            assertThat(actualAlias.getWriteDataStream(), equalTo(expectedAlias.writeIndex() ? dataStreamName : null));\n        }\n\n        assertThat(newState.metadata().dataStreamAliases().values().stream().map(DataStreamAlias::getName).toArray(),\n            arrayContainingInAnyOrder (new ArrayList<>(aliases.keySet()).toArray()));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)), notNullValue());\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getAliases().size(), is(0));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getSettings().get(\"index.hidden\"),\n            equalTo(\"true\"));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).isSystem(), is(false));\n    }\n","date":"2021-07-23 02:12:20","endLine":119,"groupId":"28576","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateDataStreamWithAliasFromTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3e/dadb8c356376183103be7fb7723fdeeb0bd4fc.src","preCode":"    public void testCreateDataStreamWithAliasFromTemplate() throws Exception {\n        final MetadataCreateIndexService metadataCreateIndexService = getMetadataCreateIndexService();\n        final String dataStreamName = \"my-data-stream\";\n        final int aliasCount = randomIntBetween(0, 3);\n        Map<String, AliasMetadata> aliases = new HashMap<>(aliasCount);\n        for (int k = 0; k < aliasCount; k++) {\n            final String aliasName = randomAlphaOfLength(6);\n            var builder = AliasMetadata.newAliasMetadataBuilder(aliasName);\n            if (randomBoolean()) {\n                builder.filter(Map.of(\"term\", Map.of(\"user\", Map.of(\"value\", randomAlphaOfLength(5)))));\n            }\n            builder.writeIndex(randomBoolean());\n            aliases.put(aliasName, builder.build());\n        }\n        ComposableIndexTemplate template = new ComposableIndexTemplate.Builder()\n            .indexPatterns(List.of(dataStreamName + \"*\"))\n            .dataStreamTemplate(new DataStreamTemplate())\n            .template(new Template(null, null, aliases))\n            .build();\n        ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n            .metadata(Metadata.builder().put(\"template\", template).build())\n            .build();\n        CreateDataStreamClusterStateUpdateRequest req =\n            new CreateDataStreamClusterStateUpdateRequest(dataStreamName, TimeValue.ZERO, TimeValue.ZERO);\n        ClusterState newState = MetadataCreateDataStreamService.createDataStream(metadataCreateIndexService, cs, req);\n        assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isSystem(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isHidden(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isReplicated(), is(false));\n        assertThat(newState.metadata().dataStreamAliases().size(), is(aliasCount));\n        for (String aliasName : aliases.keySet()) {\n            var expectedAlias = aliases.get(aliasName);\n            var actualAlias = newState.metadata().dataStreamAliases().get(aliasName);\n            assertThat(actualAlias, is(notNullValue()));\n            assertThat(actualAlias.getName(), equalTo(expectedAlias.alias()));\n            assertThat(actualAlias.getFilter(), equalTo(expectedAlias.filter()));\n            assertThat(actualAlias.getWriteDataStream(), equalTo(expectedAlias.writeIndex() ? dataStreamName : null));\n        }\n\n        assertThat(newState.metadata().dataStreamAliases().values().stream().map(DataStreamAlias::getName).toArray(),\n            arrayContainingInAnyOrder (new ArrayList<>(aliases.keySet()).toArray()));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)), notNullValue());\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getAliases().size(), is(0));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getSettings().get(\"index.hidden\"),\n            equalTo(\"true\"));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).isSystem(), is(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"}],"commitId":"0232675e30c4eb26d5c1bace61faa8b101595a27","commitMessage":"@@@Create data stream aliases from template (#73867)\n\n","date":"2021-07-23 02:12:20","modifiedFileCount":"7","status":"M","submitter":"Dan Hermann"},{"authorTime":"2021-08-03 21:44:05","codes":[{"authorDate":"2021-04-21 21:28:12","commitOrder":9,"curCode":"    public void testCreateDataStream() throws Exception {\n        final MetadataCreateIndexService metadataCreateIndexService = getMetadataCreateIndexService();\n        final String dataStreamName = \"my-data-stream\";\n        ComposableIndexTemplate template = new ComposableIndexTemplate.Builder()\n            .indexPatterns(List.of(dataStreamName + \"*\"))\n            .dataStreamTemplate(new ComposableIndexTemplate.DataStreamTemplate())\n            .build();\n        ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n            .metadata(Metadata.builder().put(\"template\", template).build())\n            .build();\n        CreateDataStreamClusterStateUpdateRequest req =\n            new CreateDataStreamClusterStateUpdateRequest(dataStreamName, TimeValue.ZERO, TimeValue.ZERO);\n        ClusterState newState =\n            MetadataCreateDataStreamService.createDataStream(metadataCreateIndexService, cs, req);\n        assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isSystem(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isHidden(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isReplicated(), is(false));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)), notNullValue());\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getSettings().get(\"index.hidden\"),\n            equalTo(\"true\"));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).isSystem(), is(false));\n    }\n","date":"2021-04-21 21:28:12","endLine":66,"groupId":"4637","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateDataStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/b90028b01d6b7ea64387c5d0cc06658fc3724a.src","preCode":"    public void testCreateDataStream() throws Exception {\n        final MetadataCreateIndexService metadataCreateIndexService = getMetadataCreateIndexService();\n        final String dataStreamName = \"my-data-stream\";\n        ComposableIndexTemplate template = new ComposableIndexTemplate.Builder()\n            .indexPatterns(List.of(dataStreamName + \"*\"))\n            .dataStreamTemplate(new ComposableIndexTemplate.DataStreamTemplate())\n            .build();\n        ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n            .metadata(Metadata.builder().put(\"template\", template).build())\n            .build();\n        CreateDataStreamClusterStateUpdateRequest req =\n            new CreateDataStreamClusterStateUpdateRequest(dataStreamName, TimeValue.ZERO, TimeValue.ZERO);\n        ClusterState newState =\n            MetadataCreateDataStreamService.createDataStream(metadataCreateIndexService, cs, req);\n        assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isSystem(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isHidden(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isReplicated(), is(false));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)), notNullValue());\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getSettings().get(\"index.hidden\"),\n            equalTo(\"true\"));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).isSystem(), is(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2021-08-03 21:44:05","commitOrder":9,"curCode":"    public void testCreateDataStreamWithAliasFromTemplate() throws Exception {\n        final MetadataCreateIndexService metadataCreateIndexService = getMetadataCreateIndexService();\n        final String dataStreamName = \"my-data-stream\";\n        final int aliasCount = randomIntBetween(0, 3);\n        Map<String, AliasMetadata> aliases = new HashMap<>(aliasCount);\n        for (int k = 0; k < aliasCount; k++) {\n            final AliasMetadata am = randomAlias(null);\n            aliases.put(am.alias(), am);\n        }\n        ComposableIndexTemplate template = new ComposableIndexTemplate.Builder()\n            .indexPatterns(List.of(dataStreamName + \"*\"))\n            .dataStreamTemplate(new DataStreamTemplate())\n            .template(new Template(null, null, aliases))\n            .build();\n        ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n            .metadata(Metadata.builder().put(\"template\", template).build())\n            .build();\n        CreateDataStreamClusterStateUpdateRequest req =\n            new CreateDataStreamClusterStateUpdateRequest(dataStreamName, TimeValue.ZERO, TimeValue.ZERO);\n        ClusterState newState = MetadataCreateDataStreamService.createDataStream(metadataCreateIndexService, cs, req);\n        assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isSystem(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isHidden(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isReplicated(), is(false));\n        assertThat(newState.metadata().dataStreamAliases().size(), is(aliasCount));\n        for (String aliasName : aliases.keySet()) {\n            var expectedAlias = aliases.get(aliasName);\n            var actualAlias = newState.metadata().dataStreamAliases().get(aliasName);\n            assertThat(actualAlias, is(notNullValue()));\n            assertThat(actualAlias.getName(), equalTo(expectedAlias.alias()));\n            assertThat(actualAlias.getFilter(), equalTo(expectedAlias.filter()));\n            assertThat(actualAlias.getWriteDataStream(), equalTo(expectedAlias.writeIndex() ? dataStreamName : null));\n        }\n\n        assertThat(newState.metadata().dataStreamAliases().values().stream().map(DataStreamAlias::getName).toArray(),\n            arrayContainingInAnyOrder (new ArrayList<>(aliases.keySet()).toArray()));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)), notNullValue());\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getAliases().size(), is(0));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getSettings().get(\"index.hidden\"),\n            equalTo(\"true\"));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).isSystem(), is(false));\n    }\n","date":"2021-08-03 21:44:05","endLine":115,"groupId":"28576","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateDataStreamWithAliasFromTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9f/8b20b180a40eba0b3a36183cc18432f4348e40.src","preCode":"    public void testCreateDataStreamWithAliasFromTemplate() throws Exception {\n        final MetadataCreateIndexService metadataCreateIndexService = getMetadataCreateIndexService();\n        final String dataStreamName = \"my-data-stream\";\n        final int aliasCount = randomIntBetween(0, 3);\n        Map<String, AliasMetadata> aliases = new HashMap<>(aliasCount);\n        for (int k = 0; k < aliasCount; k++) {\n            final String aliasName = randomAlphaOfLength(6);\n            var builder = AliasMetadata.newAliasMetadataBuilder(aliasName);\n            if (randomBoolean()) {\n                builder.filter(Map.of(\"term\", Map.of(\"user\", Map.of(\"value\", randomAlphaOfLength(5)))));\n            }\n            builder.writeIndex(randomBoolean());\n            aliases.put(aliasName, builder.build());\n        }\n        ComposableIndexTemplate template = new ComposableIndexTemplate.Builder()\n            .indexPatterns(List.of(dataStreamName + \"*\"))\n            .dataStreamTemplate(new DataStreamTemplate())\n            .template(new Template(null, null, aliases))\n            .build();\n        ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n            .metadata(Metadata.builder().put(\"template\", template).build())\n            .build();\n        CreateDataStreamClusterStateUpdateRequest req =\n            new CreateDataStreamClusterStateUpdateRequest(dataStreamName, TimeValue.ZERO, TimeValue.ZERO);\n        ClusterState newState = MetadataCreateDataStreamService.createDataStream(metadataCreateIndexService, cs, req);\n        assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isSystem(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isHidden(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isReplicated(), is(false));\n        assertThat(newState.metadata().dataStreamAliases().size(), is(aliasCount));\n        for (String aliasName : aliases.keySet()) {\n            var expectedAlias = aliases.get(aliasName);\n            var actualAlias = newState.metadata().dataStreamAliases().get(aliasName);\n            assertThat(actualAlias, is(notNullValue()));\n            assertThat(actualAlias.getName(), equalTo(expectedAlias.alias()));\n            assertThat(actualAlias.getFilter(), equalTo(expectedAlias.filter()));\n            assertThat(actualAlias.getWriteDataStream(), equalTo(expectedAlias.writeIndex() ? dataStreamName : null));\n        }\n\n        assertThat(newState.metadata().dataStreamAliases().values().stream().map(DataStreamAlias::getName).toArray(),\n            arrayContainingInAnyOrder (new ArrayList<>(aliases.keySet()).toArray()));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)), notNullValue());\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getAliases().size(), is(0));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getSettings().get(\"index.hidden\"),\n            equalTo(\"true\"));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).isSystem(), is(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"10ffb9396c8daaa978f49d452ded9f92fc60a9f7","commitMessage":"@@@Create data stream aliases from component templates (#75956)\n\n","date":"2021-08-03 21:44:05","modifiedFileCount":"4","status":"M","submitter":"Dan Hermann"},{"authorTime":"2021-09-14 17:13:58","codes":[{"authorDate":"2021-09-14 17:13:58","commitOrder":10,"curCode":"    public void testCreateDataStream() throws Exception {\n        final MetadataCreateIndexService metadataCreateIndexService = getMetadataCreateIndexService();\n        final String dataStreamName = \"my-data-stream\";\n        ComposableIndexTemplate template = new ComposableIndexTemplate.Builder()\n            .indexPatterns(List.of(dataStreamName + \"*\"))\n            .dataStreamTemplate(new ComposableIndexTemplate.DataStreamTemplate())\n            .build();\n        ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n            .metadata(Metadata.builder().put(\"template\", template).build())\n            .build();\n        CreateDataStreamClusterStateUpdateRequest req = new CreateDataStreamClusterStateUpdateRequest(dataStreamName);\n        ClusterState newState =\n            MetadataCreateDataStreamService.createDataStream(metadataCreateIndexService, cs, req);\n        assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isSystem(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isHidden(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isReplicated(), is(false));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)), notNullValue());\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getSettings().get(\"index.hidden\"),\n            equalTo(\"true\"));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).isSystem(), is(false));\n    }\n","date":"2021-09-14 17:13:58","endLine":70,"groupId":"101909","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testCreateDataStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/b1cd9fdd89f257a70c73af17b08137d7ffde16.src","preCode":"    public void testCreateDataStream() throws Exception {\n        final MetadataCreateIndexService metadataCreateIndexService = getMetadataCreateIndexService();\n        final String dataStreamName = \"my-data-stream\";\n        ComposableIndexTemplate template = new ComposableIndexTemplate.Builder()\n            .indexPatterns(List.of(dataStreamName + \"*\"))\n            .dataStreamTemplate(new ComposableIndexTemplate.DataStreamTemplate())\n            .build();\n        ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n            .metadata(Metadata.builder().put(\"template\", template).build())\n            .build();\n        CreateDataStreamClusterStateUpdateRequest req =\n            new CreateDataStreamClusterStateUpdateRequest(dataStreamName, TimeValue.ZERO, TimeValue.ZERO);\n        ClusterState newState =\n            MetadataCreateDataStreamService.createDataStream(metadataCreateIndexService, cs, req);\n        assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isSystem(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isHidden(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isReplicated(), is(false));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)), notNullValue());\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getSettings().get(\"index.hidden\"),\n            equalTo(\"true\"));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).isSystem(), is(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2021-09-14 17:13:58","commitOrder":10,"curCode":"    public void testCreateDataStreamWithAliasFromTemplate() throws Exception {\n        final MetadataCreateIndexService metadataCreateIndexService = getMetadataCreateIndexService();\n        final String dataStreamName = \"my-data-stream\";\n        final int aliasCount = randomIntBetween(0, 3);\n        Map<String, AliasMetadata> aliases = new HashMap<>(aliasCount);\n        for (int k = 0; k < aliasCount; k++) {\n            final AliasMetadata am = randomAlias(null);\n            aliases.put(am.alias(), am);\n        }\n        ComposableIndexTemplate template = new ComposableIndexTemplate.Builder()\n            .indexPatterns(List.of(dataStreamName + \"*\"))\n            .dataStreamTemplate(new DataStreamTemplate())\n            .template(new Template(null, null, aliases))\n            .build();\n        ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n            .metadata(Metadata.builder().put(\"template\", template).build())\n            .build();\n        CreateDataStreamClusterStateUpdateRequest req = new CreateDataStreamClusterStateUpdateRequest(dataStreamName);\n        ClusterState newState = MetadataCreateDataStreamService.createDataStream(metadataCreateIndexService, cs, req);\n        assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isSystem(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isHidden(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isReplicated(), is(false));\n        assertThat(newState.metadata().dataStreamAliases().size(), is(aliasCount));\n        for (String aliasName : aliases.keySet()) {\n            var expectedAlias = aliases.get(aliasName);\n            var actualAlias = newState.metadata().dataStreamAliases().get(aliasName);\n            assertThat(actualAlias, is(notNullValue()));\n            assertThat(actualAlias.getName(), equalTo(expectedAlias.alias()));\n            assertThat(actualAlias.getFilter(), equalTo(expectedAlias.filter()));\n            assertThat(actualAlias.getWriteDataStream(), equalTo(expectedAlias.writeIndex() ? dataStreamName : null));\n        }\n\n        assertThat(newState.metadata().dataStreamAliases().values().stream().map(DataStreamAlias::getName).toArray(),\n            arrayContainingInAnyOrder (new ArrayList<>(aliases.keySet()).toArray()));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)), notNullValue());\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getAliases().size(), is(0));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getSettings().get(\"index.hidden\"),\n            equalTo(\"true\"));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).isSystem(), is(false));\n    }\n","date":"2021-09-14 17:13:58","endLine":113,"groupId":"101909","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testCreateDataStreamWithAliasFromTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/b1cd9fdd89f257a70c73af17b08137d7ffde16.src","preCode":"    public void testCreateDataStreamWithAliasFromTemplate() throws Exception {\n        final MetadataCreateIndexService metadataCreateIndexService = getMetadataCreateIndexService();\n        final String dataStreamName = \"my-data-stream\";\n        final int aliasCount = randomIntBetween(0, 3);\n        Map<String, AliasMetadata> aliases = new HashMap<>(aliasCount);\n        for (int k = 0; k < aliasCount; k++) {\n            final AliasMetadata am = randomAlias(null);\n            aliases.put(am.alias(), am);\n        }\n        ComposableIndexTemplate template = new ComposableIndexTemplate.Builder()\n            .indexPatterns(List.of(dataStreamName + \"*\"))\n            .dataStreamTemplate(new DataStreamTemplate())\n            .template(new Template(null, null, aliases))\n            .build();\n        ClusterState cs = ClusterState.builder(new ClusterName(\"_name\"))\n            .metadata(Metadata.builder().put(\"template\", template).build())\n            .build();\n        CreateDataStreamClusterStateUpdateRequest req =\n            new CreateDataStreamClusterStateUpdateRequest(dataStreamName, TimeValue.ZERO, TimeValue.ZERO);\n        ClusterState newState = MetadataCreateDataStreamService.createDataStream(metadataCreateIndexService, cs, req);\n        assertThat(newState.metadata().dataStreams().size(), equalTo(1));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).getName(), equalTo(dataStreamName));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isSystem(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isHidden(), is(false));\n        assertThat(newState.metadata().dataStreams().get(dataStreamName).isReplicated(), is(false));\n        assertThat(newState.metadata().dataStreamAliases().size(), is(aliasCount));\n        for (String aliasName : aliases.keySet()) {\n            var expectedAlias = aliases.get(aliasName);\n            var actualAlias = newState.metadata().dataStreamAliases().get(aliasName);\n            assertThat(actualAlias, is(notNullValue()));\n            assertThat(actualAlias.getName(), equalTo(expectedAlias.alias()));\n            assertThat(actualAlias.getFilter(), equalTo(expectedAlias.filter()));\n            assertThat(actualAlias.getWriteDataStream(), equalTo(expectedAlias.writeIndex() ? dataStreamName : null));\n        }\n\n        assertThat(newState.metadata().dataStreamAliases().values().stream().map(DataStreamAlias::getName).toArray(),\n            arrayContainingInAnyOrder (new ArrayList<>(aliases.keySet()).toArray()));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)), notNullValue());\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getAliases().size(), is(0));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).getSettings().get(\"index.hidden\"),\n            equalTo(\"true\"));\n        assertThat(newState.metadata().index(DataStream.getDefaultBackingIndexName(dataStreamName, 1)).isSystem(), is(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"bb675924912a0ed4e30b0234003f5e28df4a008c","commitMessage":"@@@Add startTime field to create data stream action request class. (#77660)\n\nThe startTime field only exists for testing purposes. In order\nto reliable control the name of the backing index being created\nas part of this action. Note this field is not exposed on the\nrest layer.\n\nChange DataStreamIT#testCreatingDataStreamAndFirstBackingIndexExistsFails() to\nuse this new field.\n\nOther changes:\n* Removed testAutoCreatingDataStreamAndFirstBackingIndexExistsFails() test.\n  This test also tests what testCreatingDataStreamAndFirstBackingIndexExistsFails()\n  is testing and in order to test it properly we would need to change the index action\n  request in the same way the create data stream action request is changed.\n* Use `backingIndexEqualTo([name].  [gen])` over\n  `equalTo(DataStream.getDefaultBackingIndexName([name].  [gen]))` where possible.\n  This way of asserting isn't prone to timing and is easier to use.\n\nCloses #77307","date":"2021-09-14 17:13:58","modifiedFileCount":"6","status":"M","submitter":"Martijn van Groningen"}]
