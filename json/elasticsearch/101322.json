[{"authorTime":"2019-09-23 23:59:46","codes":[{"authorDate":"2019-09-23 23:59:46","commitOrder":21,"curCode":"  public final NamedValueExpressionContext namedValueExpression() throws RecognitionException {\n    NamedValueExpressionContext _localctx = new NamedValueExpressionContext(_ctx, getState());\n    enterRule(_localctx, 48, RULE_namedValueExpression);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(476);\n      valueExpression(0);\n      setState(481);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << AS) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)) | (1L << (BACKQUOTED_IDENTIFIER - 70)))) != 0)) {\n        {\n        setState(478);\n        _la = _input.LA(1);\n        if (_la==AS) {\n          {\n          setState(477);\n          match(AS);\n          }\n        }\n\n        setState(480);\n        identifier();\n        }\n      }\n\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-09-23 23:59:46","endLine":3110,"groupId":"69837","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"namedValueExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/cc1bd7a3f5722321e9b9519d858e3c262dd9c3.src","preCode":"  public final NamedValueExpressionContext namedValueExpression() throws RecognitionException {\n    NamedValueExpressionContext _localctx = new NamedValueExpressionContext(_ctx, getState());\n    enterRule(_localctx, 48, RULE_namedValueExpression);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(476);\n      valueExpression(0);\n      setState(481);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << AS) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)) | (1L << (BACKQUOTED_IDENTIFIER - 70)))) != 0)) {\n        {\n        setState(478);\n        _la = _input.LA(1);\n        if (_la==AS) {\n          {\n          setState(477);\n          match(AS);\n          }\n        }\n\n        setState(480);\n        identifier();\n        }\n      }\n\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":3072,"status":"B"},{"authorDate":"2019-09-23 23:59:46","commitOrder":21,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 84, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(722);\n      functionName();\n      setState(723);\n      match(T__0);\n      setState(735);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)) | (1L << (IDENTIFIER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(725);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(724);\n          setQuantifier();\n          }\n        }\n\n        setState(727);\n        expression();\n        setState(732);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(728);\n          match(T__2);\n          setState(729);\n          expression();\n          }\n          }\n          setState(734);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(737);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-09-23 23:59:46","endLine":5340,"groupId":"10734","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/cc1bd7a3f5722321e9b9519d858e3c262dd9c3.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 84, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(722);\n      functionName();\n      setState(723);\n      match(T__0);\n      setState(735);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)) | (1L << (IDENTIFIER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(725);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(724);\n          setQuantifier();\n          }\n        }\n\n        setState(727);\n        expression();\n        setState(732);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(728);\n          match(T__2);\n          setState(729);\n          expression();\n          }\n          }\n          setState(734);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(737);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5282,"status":"MB"}],"commitId":"d91263746a222915c570d4a662ec48c1d6b4f583","commitMessage":"@@@SQL: Add PIVOT support (#46489)\n\nAdd initial PIVOT support for transforming a regular table into a\nstatistics table around an arbitrary pivoting column:\n\nSELECT * FROM\n (SELECT languages.  country.  salary.  FROM mp)\n PIVOT (AVG(salary) FOR countries IN ('NL'.  'DE'.  'ES'.  'RO'.  'US'))\n\nIn the current implementation PIVOT allows only one aggregation however\nthis restriction is likely to be lifted in the future.\nAlso not all aggregations are working.  in particular MatrixStats are not yet supported.","date":"2019-09-23 23:59:46","modifiedFileCount":"39","status":"M","submitter":"Costin Leau"},{"authorTime":"2019-10-07 20:37:20","codes":[{"authorDate":"2019-10-07 20:37:20","commitOrder":22,"curCode":"  public final NamedValueExpressionContext namedValueExpression() throws RecognitionException {\n    NamedValueExpressionContext _localctx = new NamedValueExpressionContext(_ctx, getState());\n    enterRule(_localctx, 48, RULE_namedValueExpression);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(476);\n      valueExpression(0);\n      setState(481);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << AS) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)))) != 0) || _la==BACKQUOTED_IDENTIFIER) {\n        {\n        setState(478);\n        _la = _input.LA(1);\n        if (_la==AS) {\n          {\n          setState(477);\n          match(AS);\n          }\n        }\n\n        setState(480);\n        identifier();\n        }\n      }\n\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-10-07 20:37:20","endLine":3111,"groupId":"69837","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"namedValueExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6d/0c4a69f3240451d7d1ad7fd46250e3f74a66d6.src","preCode":"  public final NamedValueExpressionContext namedValueExpression() throws RecognitionException {\n    NamedValueExpressionContext _localctx = new NamedValueExpressionContext(_ctx, getState());\n    enterRule(_localctx, 48, RULE_namedValueExpression);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(476);\n      valueExpression(0);\n      setState(481);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << AS) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)) | (1L << (BACKQUOTED_IDENTIFIER - 70)))) != 0)) {\n        {\n        setState(478);\n        _la = _input.LA(1);\n        if (_la==AS) {\n          {\n          setState(477);\n          match(AS);\n          }\n        }\n\n        setState(480);\n        identifier();\n        }\n      }\n\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":3073,"status":"M"},{"authorDate":"2019-10-07 20:37:20","commitOrder":22,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 84, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(722);\n      functionName();\n      setState(723);\n      match(T__0);\n      setState(735);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(725);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(724);\n          setQuantifier();\n          }\n        }\n\n        setState(727);\n        expression();\n        setState(732);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(728);\n          match(T__2);\n          setState(729);\n          expression();\n          }\n          }\n          setState(734);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(737);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-10-07 20:37:20","endLine":5343,"groupId":"10734","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6d/0c4a69f3240451d7d1ad7fd46250e3f74a66d6.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 84, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(722);\n      functionName();\n      setState(723);\n      match(T__0);\n      setState(735);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)) | (1L << (IDENTIFIER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(725);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(724);\n          setQuantifier();\n          }\n        }\n\n        setState(727);\n        expression();\n        setState(732);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(728);\n          match(T__2);\n          setState(729);\n          expression();\n          }\n          }\n          setState(734);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(737);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5285,"status":"M"}],"commitId":"08a22d0b393f4a76c52dabc5e7b9cafcc19c30ca","commitMessage":"@@@SQL: Allow whitespaces in escape patterns (#47577)\n\n* SQL: Allow whitespaces in escape patterns\n\nPreviously.  we supported only the format `{fn <FUNCTION_NAME>()}`\nbut other DBs like MSSQL.  DB2.  MariaDB/MySQL alos allow whitespaces\nbetween `{` and `fn`. Furhermore.  also some applications - like PowerBI -\ngenerate escape sequences with spaces: `select { fn name(params) } etc.`\n\nAdd support for white spaces between `{` and the escape pattern definition\nlike `fn`.  `ts`.  `d`.  `guid` etc.\n\nCloses: #47401\n\n* Fix imports\n","date":"2019-10-07 20:37:20","modifiedFileCount":"3","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2020-06-02 15:56:20","codes":[{"authorDate":"2020-06-02 15:56:20","commitOrder":23,"curCode":"  public final NamedValueExpressionContext namedValueExpression() throws RecognitionException {\n    NamedValueExpressionContext _localctx = new NamedValueExpressionContext(_ctx, getState());\n    enterRule(_localctx, 50, RULE_namedValueExpression);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(484);\n      valueExpression(0);\n      setState(489);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << AS) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)))) != 0) || _la==QUOTED_IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {\n        {\n        setState(486);\n        _la = _input.LA(1);\n        if (_la==AS) {\n          {\n          setState(485);\n          match(AS);\n          }\n        }\n\n        setState(488);\n        identifier();\n        }\n      }\n\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-06-02 15:56:20","endLine":3174,"groupId":"69837","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"namedValueExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/bef684c7e18aeed8d71039cd471287039ab143.src","preCode":"  public final NamedValueExpressionContext namedValueExpression() throws RecognitionException {\n    NamedValueExpressionContext _localctx = new NamedValueExpressionContext(_ctx, getState());\n    enterRule(_localctx, 48, RULE_namedValueExpression);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(476);\n      valueExpression(0);\n      setState(481);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << AS) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)))) != 0) || _la==BACKQUOTED_IDENTIFIER) {\n        {\n        setState(478);\n        _la = _input.LA(1);\n        if (_la==AS) {\n          {\n          setState(477);\n          match(AS);\n          }\n        }\n\n        setState(480);\n        identifier();\n        }\n      }\n\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":3136,"status":"M"},{"authorDate":"2020-06-02 15:56:20","commitOrder":23,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 86, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(730);\n      functionName();\n      setState(731);\n      match(T__0);\n      setState(743);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DECIMAL_VALUE - 130)) | (1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(733);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(732);\n          setQuantifier();\n          }\n        }\n\n        setState(735);\n        expression();\n        setState(740);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(736);\n          match(T__2);\n          setState(737);\n          expression();\n          }\n          }\n          setState(742);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(745);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-06-02 15:56:20","endLine":5408,"groupId":"10734","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/bef684c7e18aeed8d71039cd471287039ab143.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 84, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(722);\n      functionName();\n      setState(723);\n      match(T__0);\n      setState(735);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(725);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(724);\n          setQuantifier();\n          }\n        }\n\n        setState(727);\n        expression();\n        setState(732);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(728);\n          match(T__2);\n          setState(729);\n          expression();\n          }\n          }\n          setState(734);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(737);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5350,"status":"M"}],"commitId":"2f5ab81b9ad884434d1faa60f4391f966ede73e8","commitMessage":"@@@SQL: Implement TOP as an alternative to LIMIT (#57428)\n\nAdd basic support for `TOP X` as a synonym to LIMIT X which is used\nby [MS-SQL server](https://docs.microsoft.com/en-us/sql/t-sql/queries/top-transact-sql?view=sql-server-ver15). \ne.g.:\n\n```\nSELECT TOP 5 a.  b.  c FROM test\n```\n\nTOP in SQL server also supports the `PERCENTAGE` and `WITH TIES`\nkeywords which this implementation doesn't.\n\nDon't allow usage of both TOP and LIMIT in the same query.\n\nRefers to #41195\n","date":"2020-06-02 15:56:20","modifiedFileCount":"8","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2020-11-24 04:47:51","codes":[{"authorDate":"2020-11-24 04:47:51","commitOrder":24,"curCode":"  public final NamedValueExpressionContext namedValueExpression() throws RecognitionException {\n    NamedValueExpressionContext _localctx = new NamedValueExpressionContext(_ctx, getState());\n    enterRule(_localctx, 50, RULE_namedValueExpression);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(484);\n      valueExpression(0);\n      setState(489);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << AS) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)))) != 0) || _la==BACKQUOTED_IDENTIFIER) {\n        {\n        setState(486);\n        _la = _input.LA(1);\n        if (_la==AS) {\n          {\n          setState(485);\n          match(AS);\n          }\n        }\n\n        setState(488);\n        identifier();\n        }\n      }\n\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-11-24 04:47:51","endLine":3173,"groupId":"69837","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"namedValueExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/e3528b71f5a0945a1b151f3ff26e3d424f0d72.src","preCode":"  public final NamedValueExpressionContext namedValueExpression() throws RecognitionException {\n    NamedValueExpressionContext _localctx = new NamedValueExpressionContext(_ctx, getState());\n    enterRule(_localctx, 50, RULE_namedValueExpression);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(484);\n      valueExpression(0);\n      setState(489);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << AS) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)))) != 0) || _la==QUOTED_IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {\n        {\n        setState(486);\n        _la = _input.LA(1);\n        if (_la==AS) {\n          {\n          setState(485);\n          match(AS);\n          }\n        }\n\n        setState(488);\n        identifier();\n        }\n      }\n\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":3135,"status":"M"},{"authorDate":"2020-11-24 04:47:51","commitOrder":24,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 86, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(730);\n      functionName();\n      setState(731);\n      match(T__0);\n      setState(743);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(733);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(732);\n          setQuantifier();\n          }\n        }\n\n        setState(735);\n        expression();\n        setState(740);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(736);\n          match(T__2);\n          setState(737);\n          expression();\n          }\n          }\n          setState(742);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(745);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-11-24 04:47:51","endLine":5407,"groupId":"10734","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/e3528b71f5a0945a1b151f3ff26e3d424f0d72.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 86, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(730);\n      functionName();\n      setState(731);\n      match(T__0);\n      setState(743);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DECIMAL_VALUE - 130)) | (1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(733);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(732);\n          setQuantifier();\n          }\n        }\n\n        setState(735);\n        expression();\n        setState(740);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(736);\n          match(T__2);\n          setState(737);\n          expression();\n          }\n          }\n          setState(742);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(745);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5349,"status":"M"}],"commitId":"afb9d48a2159b7ff7de6b74001a76e3a62b70876","commitMessage":"@@@SQL: Remove the unused CONCAT token (#65272)\n\nThe `||` token is a leftover from the original grammar definition.\nWe don't have a `||` operator.  the token is unused in our grammar.\nString concatenation is implemented via the `CONCAT` function instead.","date":"2020-11-24 04:47:51","modifiedFileCount":"2","status":"M","submitter":"Andras Palinkas"},{"authorTime":"2021-08-26 20:41:57","codes":[{"authorDate":"2021-08-26 20:41:57","commitOrder":25,"curCode":"  public final NamedValueExpressionContext namedValueExpression() throws RecognitionException {\n    NamedValueExpressionContext _localctx = new NamedValueExpressionContext(_ctx, getState());\n    enterRule(_localctx, 50, RULE_namedValueExpression);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(484);\n      valueExpression(0);\n      setState(489);\n      _errHandler.sync(this);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << AS) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)))) != 0) || _la==BACKQUOTED_IDENTIFIER) {\n        {\n        setState(486);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        if (_la==AS) {\n          {\n          setState(485);\n          match(AS);\n          }\n        }\n\n        setState(488);\n        identifier();\n        }\n      }\n\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2021-08-26 20:41:57","endLine":3266,"groupId":"101322","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"namedValueExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/d494e5390668eab2b6833facff621cc7a73b1e.src","preCode":"  public final NamedValueExpressionContext namedValueExpression() throws RecognitionException {\n    NamedValueExpressionContext _localctx = new NamedValueExpressionContext(_ctx, getState());\n    enterRule(_localctx, 50, RULE_namedValueExpression);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(484);\n      valueExpression(0);\n      setState(489);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << AS) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)))) != 0) || _la==BACKQUOTED_IDENTIFIER) {\n        {\n        setState(486);\n        _la = _input.LA(1);\n        if (_la==AS) {\n          {\n          setState(485);\n          match(AS);\n          }\n        }\n\n        setState(488);\n        identifier();\n        }\n      }\n\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":3226,"status":"M"},{"authorDate":"2021-08-26 20:41:57","commitOrder":25,"curCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 86, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(730);\n      functionName();\n      setState(731);\n      match(T__0);\n      setState(743);\n      _errHandler.sync(this);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(733);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(732);\n          setQuantifier();\n          }\n        }\n\n        setState(735);\n        expression();\n        setState(740);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(736);\n          match(T__2);\n          setState(737);\n          expression();\n          }\n          }\n          setState(742);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(745);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2021-08-26 20:41:57","endLine":5525,"groupId":"101322","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"functionTemplate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/d494e5390668eab2b6833facff621cc7a73b1e.src","preCode":"  public final FunctionTemplateContext functionTemplate() throws RecognitionException {\n    FunctionTemplateContext _localctx = new FunctionTemplateContext(_ctx, getState());\n    enterRule(_localctx, 86, RULE_functionTemplate);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(730);\n      functionName();\n      setState(731);\n      match(T__0);\n      setState(743);\n      _la = _input.LA(1);\n      if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n        {\n        setState(733);\n        _la = _input.LA(1);\n        if (_la==ALL || _la==DISTINCT) {\n          {\n          setState(732);\n          setQuantifier();\n          }\n        }\n\n        setState(735);\n        expression();\n        setState(740);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        while (_la==T__2) {\n          {\n          {\n          setState(736);\n          match(T__2);\n          setState(737);\n          expression();\n          }\n          }\n          setState(742);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        }\n        }\n      }\n\n      setState(745);\n      match(T__1);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5465,"status":"M"}],"commitId":"d349f252476a0f50dbc3fd23bc796d77ec6c97fa","commitMessage":"@@@QL: regenerate parser due to ANTLR upgrade (#76970)\n\n* QL: regenerate parser due to ANTLR upgrade\n\nTo avoid warnings and subtle change in behavior.  regenerate the parser\nclasses using the upgraded ANTLR (4.9.2 vs 4.5.3).\n\nFix #76969","date":"2021-08-26 20:41:57","modifiedFileCount":"6","status":"M","submitter":"Costin Leau"}]
