[{"authorTime":"2018-07-20 03:33:10","codes":[{"authorDate":"2018-07-20 03:33:10","commitOrder":1,"curCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, \"test-*\");\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_type\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","date":"2018-07-20 03:33:10","endLine":1113,"groupId":"58629","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcreteWriteIndexWithNoWriteIndexWithSingleIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9a/d9603b1489bc1c40e9090e74483025fbc2295a.src","preCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, \"test-*\");\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_type\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1097,"status":"B"},{"authorDate":"2018-07-20 03:33:10","commitOrder":1,"curCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(!test0WriteIndex, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, \"test-*\");\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","date":"2018-07-20 03:33:10","endLine":1151,"groupId":"58627","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAliasResolutionNotAllowingMultipleIndices","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9a/d9603b1489bc1c40e9090e74483025fbc2295a.src","preCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(!test0WriteIndex, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, \"test-*\");\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1135,"status":"B"}],"commitId":"1acdd379689fd2470501306e4e3e351a8218e84b","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-20 03:33:10","modifiedFileCount":"64","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-04-03 22:54:21","codes":[{"authorDate":"2019-04-03 22:54:21","commitOrder":2,"curCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_type\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","date":"2019-04-03 22:54:21","endLine":1216,"groupId":"53166","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcreteWriteIndexWithNoWriteIndexWithSingleIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/3b7ae06467905bd9d1cdde4a0cf7536c1cf32f.src","preCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, \"test-*\");\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_type\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1200,"status":"M"},{"authorDate":"2019-04-03 22:54:21","commitOrder":2,"curCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(!test0WriteIndex, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-1\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","date":"2019-04-03 22:54:21","endLine":1254,"groupId":"8277","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAliasResolutionNotAllowingMultipleIndices","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/3b7ae06467905bd9d1cdde4a0cf7536c1cf32f.src","preCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(!test0WriteIndex, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, \"test-*\");\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1238,"status":"M"}],"commitId":"a78d79f79615a6837f484490ea441ec9523e778d","commitMessage":"@@@Fix alias resolution runtime complexity. (#40263)\n\nA user reported that the same query that takes ~900ms when querying an index\npattern only takes ~50ms when only querying indices that have matches. The\nquery is a date range query and we confirmed that the `can_match` phase works\nas expected. I was able to reproduce this issue locally with a single node: with\n900 1-shard indices.  a query to an index pattern that matches all indices runs\nin ~90ms while a query to the only index that has matches runs in 0-1ms.\n\nThis ended up not being related to the `can_match` phase but to the cost of\nresolving aliases when querying an index pattern that matches lots of indices.\nIn that case.  we first resolve the index pattern to a list of concrete indices\nand then for each concrete index.  we check whether it was matched through an\nalias.  meaning we might have to apply alias filters. Unfortunately this second\nper-index operation runs in linear time with the number of matched concrete\nindices.  which means that alias resolution runs in O(num_indices^2) overall.\nSo queries get exponentially slower as an index pattern matches more indices.\n\nI reorganized alias resolution into a one-step operation that runs in linear\ntime with the number of matches indices.  and then a per-index operation that\nruns in linear time with the number of aliases of this index. This makes alias\nresolution run is O(num_indices * num_aliases_per_index) overall instead. When\ntesting the scenario described above.  the `took` went down from ~90ms to ~10ms.\nIt is still more than the 0-1ms latency that one gets when only querying the\nsingle index that has data.  but still much better than what we had before.\n\nCloses #40248","date":"2019-04-03 22:54:21","modifiedFileCount":"8","status":"M","submitter":"Adrien Grand"},{"authorTime":"2019-04-03 22:54:21","codes":[{"authorDate":"2019-10-11 17:23:55","commitOrder":3,"curCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","date":"2019-10-11 17:23:55","endLine":1216,"groupId":"53166","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcreteWriteIndexWithNoWriteIndexWithSingleIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/37/1ce0be6aa875d1e0800e894813c2d45ffbc0eb.src","preCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_type\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1200,"status":"M"},{"authorDate":"2019-04-03 22:54:21","commitOrder":3,"curCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(!test0WriteIndex, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-1\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","date":"2019-04-03 22:54:21","endLine":1254,"groupId":"8277","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAliasResolutionNotAllowingMultipleIndices","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/3b7ae06467905bd9d1cdde4a0cf7536c1cf32f.src","preCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(!test0WriteIndex, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-1\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1238,"status":"N"}],"commitId":"566e1b7d33ec62e2f6011245782cd65d6381ee43","commitMessage":"@@@Remove type field from DocWriteRequest and associated Response objects (#47671)\n\nThis commit removes the type field from index.  update and delete requests.  and their\nassociated responses.\n\nRelates to #41059","date":"2019-10-11 17:23:55","modifiedFileCount":"145","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":1518,"groupId":"53166","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcreteWriteIndexWithNoWriteIndexWithSingleIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/e0c2bf71209309a8f8fa82ff1ea045183631d8.src","preCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1502,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(!test0WriteIndex, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-1\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":1556,"groupId":"8277","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAliasResolutionNotAllowingMultipleIndices","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/e0c2bf71209309a8f8fa82ff1ea045183631d8.src","preCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetaData.builder(\"test-alias\").writeIndex(randomFrom(!test0WriteIndex, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-1\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1540,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-05-05 03:03:52","commitOrder":5,"curCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request, false));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","date":"2020-05-05 03:03:52","endLine":1519,"groupId":"53166","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcreteWriteIndexWithNoWriteIndexWithSingleIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/b913d93ff46305a41eca10808ea04834fb76a0.src","preCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1503,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":5,"curCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(!test0WriteIndex, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-1\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":1556,"groupId":"8277","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testAliasResolutionNotAllowingMultipleIndices","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/e0c2bf71209309a8f8fa82ff1ea045183631d8.src","preCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(!test0WriteIndex, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-1\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1540,"status":"N"}],"commitId":"378e36c26d1132ec1d1db680db0b683755659da5","commitMessage":"@@@Move includeDataStream flag from IndicesOptions to IndexNameExpressionResolver.Context (#56034)\n\nMove includeDataStream flag from an IndicesOptions to IndexNameExpressionResolver.Context\nas a dedicated field that callers to IndexNameExpressionResolver can set.\n\nAlso alter indices stats api to support data streams.\nThe rollover api uses this api and otherwise rolling over data stream does no longer work.\n\nRelates to #53100","date":"2020-05-05 03:03:52","modifiedFileCount":"28","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-07-06 16:42:47","commitOrder":6,"curCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request.indicesOptions(), request.indices()[0], false, false));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","date":"2020-07-06 16:42:47","endLine":1535,"groupId":"53166","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcreteWriteIndexWithNoWriteIndexWithSingleIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ae/a6c243ce24b1f221932c569a16659c223898f7.src","preCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request, false));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1519,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":6,"curCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(!test0WriteIndex, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-1\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":1556,"groupId":"8277","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testAliasResolutionNotAllowingMultipleIndices","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/e0c2bf71209309a8f8fa82ff1ea045183631d8.src","preCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(!test0WriteIndex, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-1\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1540,"status":"N"}],"commitId":"2ba8e2e98bf4b7c54929c0a19046deba61951817","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-06 16:42:47","modifiedFileCount":"330","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-02-08 23:28:57","codes":[{"authorDate":"2020-07-06 16:42:47","commitOrder":7,"curCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request.indicesOptions(), request.indices()[0], false, false));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","date":"2020-07-06 16:42:47","endLine":1535,"groupId":"53166","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcreteWriteIndexWithNoWriteIndexWithSingleIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ae/a6c243ce24b1f221932c569a16659c223898f7.src","preCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request.indicesOptions(), request.indices()[0], false, false));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1519,"status":"N"},{"authorDate":"2021-02-08 23:28:57","commitOrder":7,"curCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex == false, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-1\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","date":"2021-02-08 23:28:57","endLine":1581,"groupId":"29756","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testAliasResolutionNotAllowingMultipleIndices","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7e/1802e79acb383dc757fa08f556bab967fab22b.src","preCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(!test0WriteIndex, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-1\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1565,"status":"M"}],"commitId":"2d44cce31e2e28d98f6c60e839a4842194e2d4a9","commitMessage":"@@@Replace NOT operator with explicit `false` check - part 9 (#68645)\n\nPart 9.\n\nWe have an in-house rule to compare explicitly against `false` instead\nof using the logical not operator (`!`). However.  this hasn't\nhistorically been enforced.  meaning that there are many violations in\nthe source at present.\n\nWe now have a Checkstyle rule that can detect these cases.  but before we\ncan turn it on.  we need to fix the existing violations. This is being\ndone over a series of PRs.  since there are a lot to fix.","date":"2021-02-08 23:28:57","modifiedFileCount":"127","status":"M","submitter":"Rory Hunter"},{"authorTime":"2021-02-08 23:28:57","codes":[{"authorDate":"2021-08-10 22:05:55","commitOrder":8,"curCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest<?> request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request.indicesOptions(), request.indices()[0], false, false));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","date":"2021-08-10 22:05:55","endLine":1616,"groupId":"101941","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"testConcreteWriteIndexWithNoWriteIndexWithSingleIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f0/d3816218789657c197c15cd9e107e97ca11395.src","preCode":"    public void testConcreteWriteIndexWithNoWriteIndexWithSingleIndex() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(false)));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        DocWriteRequest request = randomFrom(new IndexRequest(\"test-alias\"),\n            new UpdateRequest(\"test-alias\", \"_id\"), new DeleteRequest(\"test-alias\"));\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteWriteIndex(state, request.indicesOptions(), request.indices()[0], false, false));\n        assertThat(exception.getMessage(), equalTo(\"no write index is defined for alias [test-alias].\" +\n                \" The write index may be explicitly disabled using is_write_index=false or the alias points to multiple\" +\n                \" indices without one being designated as a write index\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1600,"status":"M"},{"authorDate":"2021-02-08 23:28:57","commitOrder":8,"curCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex == false, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-1\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","date":"2021-02-08 23:28:57","endLine":1581,"groupId":"101941","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testAliasResolutionNotAllowingMultipleIndices","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7e/1802e79acb383dc757fa08f556bab967fab22b.src","preCode":"    public void testAliasResolutionNotAllowingMultipleIndices() {\n        boolean test0WriteIndex = randomBoolean();\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(\"test-0\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex, null))))\n            .put(indexBuilder(\"test-1\").state(State.OPEN)\n                .putAlias(AliasMetadata.builder(\"test-alias\").writeIndex(randomFrom(test0WriteIndex == false, null))));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n        String[] strings = indexNameExpressionResolver\n            .indexAliases(state, \"test-0\", x -> true, true, new HashSet<>(Arrays.asList(\"test-0\", \"test-1\", \"test-alias\")));\n        Arrays.sort(strings);\n        assertArrayEquals(new String[] {\"test-alias\"}, strings);\n        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n            () -> indexNameExpressionResolver.concreteIndexNames(state, IndicesOptions.strictSingleIndexNoExpandForbidClosed(),\n                \"test-alias\"));\n        assertThat(exception.getMessage(), endsWith(\", can't execute a single index op\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1565,"status":"N"}],"commitId":"128a7e774437e80fef3e0d35fb74a9c0fb42c080","commitMessage":"@@@Fix compiler warnings in :server - part 3 (#76024)\n\nPart of #40366. Fix a number of javac issues when linting is enforced in `server/`.","date":"2021-08-10 22:05:55","modifiedFileCount":"50","status":"M","submitter":"Rory Hunter"}]
