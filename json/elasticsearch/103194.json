[{"authorTime":"2020-04-07 19:08:02","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    public void testLonLatArrayDynamic() throws Exception {\n        XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startArray(\"dynamic_templates\").startObject().startObject(\"point\").field(\"match\", \"point*\")\n            .startObject(\"mapping\").field(\"type\", \"geo_point\");\n        String mapping = Strings.toString(xContentBuilder.endObject().endObject().endObject().endArray().endObject().endObject());\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .startArray(\"point\").value(1.3).value(1.2).endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().getField(\"point\"), notNullValue());\n    }\n","date":"2019-10-15 16:05:29","endLine":259,"groupId":"18272","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLonLatArrayDynamic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/78442989a12049eb924642c443b6881fe15a47.src","preCode":"    public void testLonLatArrayDynamic() throws Exception {\n        XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startArray(\"dynamic_templates\").startObject().startObject(\"point\").field(\"match\", \"point*\")\n            .startObject(\"mapping\").field(\"type\", \"geo_point\");\n        String mapping = Strings.toString(xContentBuilder.endObject().endObject().endObject().endArray().endObject().endObject());\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .startArray(\"point\").value(1.3).value(1.2).endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().getField(\"point\"), notNullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoPointFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"NB"},{"authorDate":"2020-04-07 19:08:02","commitOrder":4,"curCode":"    public void testArrayDynamic() throws Exception {\n        XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startArray(\"dynamic_templates\").startObject().startObject(\"point\").field(\"match\", \"point*\")\n            .startObject(\"mapping\").field(\"type\", \"point\");\n        String mapping = Strings.toString(xContentBuilder.endObject().endObject().endObject().endArray().endObject().endObject());\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .startArray(\"point\").value(1.3).value(1.2).endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().getField(\"point\"), notNullValue());\n    }\n","date":"2020-04-07 19:08:02","endLine":174,"groupId":"18272","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testArrayDynamic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7a/09b84c30d0eda770de2c08c3ab222676411787.src","preCode":"    public void testArrayDynamic() throws Exception {\n        XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startArray(\"dynamic_templates\").startObject().startObject(\"point\").field(\"match\", \"point*\")\n            .startObject(\"mapping\").field(\"type\", \"point\");\n        String mapping = Strings.toString(xContentBuilder.endObject().endObject().endObject().endArray().endObject().endObject());\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .startArray(\"point\").value(1.3).value(1.2).endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().getField(\"point\"), notNullValue());\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"}],"commitId":"6182db5b77b4f349cb7ec2d52a7e3a9a42dff47e","commitMessage":"@@@Add new point field. (#53804)\n\nThis commit adds a new point field that is able to index arbitrary pair of values (x/y)\n in the cartesian space. It only supports filtering using shape queries at the moment.","date":"2020-04-07 19:08:02","modifiedFileCount":"5","status":"M","submitter":"Ignacio Vera"},{"authorTime":"2020-04-07 19:08:02","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":5,"curCode":"    public void testLonLatArrayDynamic() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startArray(\"dynamic_templates\");\n        {\n            mapping.startObject().startObject(\"point\");\n            {\n                mapping.field(\"match\", \"point*\");\n                mapping.startObject(\"mapping\").field(\"type\", \"geo_point\").endObject();\n            }\n            mapping.endObject().endObject();\n        }\n        mapping.endArray().endObject().endObject();\n        DocumentMapper mapper = createDocumentMapper(mapping);\n\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"point\").value(1.3).value(1.2).endArray()));\n        assertThat(doc.rootDoc().getField(\"point\"), notNullValue());\n    }\n","date":"2020-08-25 01:10:47","endLine":149,"groupId":"59306","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLonLatArrayDynamic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/19/a0776b199a5f99e823fbafa9c05611fb8b5411.src","preCode":"    public void testLonLatArrayDynamic() throws Exception {\n        XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startArray(\"dynamic_templates\").startObject().startObject(\"point\").field(\"match\", \"point*\")\n            .startObject(\"mapping\").field(\"type\", \"geo_point\");\n        String mapping = Strings.toString(xContentBuilder.endObject().endObject().endObject().endArray().endObject().endObject());\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .startArray(\"point\").value(1.3).value(1.2).endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().getField(\"point\"), notNullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoPointFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2020-04-07 19:08:02","commitOrder":5,"curCode":"    public void testArrayDynamic() throws Exception {\n        XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startArray(\"dynamic_templates\").startObject().startObject(\"point\").field(\"match\", \"point*\")\n            .startObject(\"mapping\").field(\"type\", \"point\");\n        String mapping = Strings.toString(xContentBuilder.endObject().endObject().endObject().endArray().endObject().endObject());\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .startArray(\"point\").value(1.3).value(1.2).endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().getField(\"point\"), notNullValue());\n    }\n","date":"2020-04-07 19:08:02","endLine":174,"groupId":"18272","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testArrayDynamic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7a/09b84c30d0eda770de2c08c3ab222676411787.src","preCode":"    public void testArrayDynamic() throws Exception {\n        XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startArray(\"dynamic_templates\").startObject().startObject(\"point\").field(\"match\", \"point*\")\n            .startObject(\"mapping\").field(\"type\", \"point\");\n        String mapping = Strings.toString(xContentBuilder.endObject().endObject().endObject().endArray().endObject().endObject());\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .startArray(\"point\").value(1.3).value(1.2).endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().getField(\"point\"), notNullValue());\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"N"}],"commitId":"e2dd0bde26e6c1f9f1a5137a5bf432d348e4205e","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-25 01:10:47","modifiedFileCount":"48","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-11-06 23:20:25","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":6,"curCode":"    public void testLonLatArrayDynamic() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startArray(\"dynamic_templates\");\n        {\n            mapping.startObject().startObject(\"point\");\n            {\n                mapping.field(\"match\", \"point*\");\n                mapping.startObject(\"mapping\").field(\"type\", \"geo_point\").endObject();\n            }\n            mapping.endObject().endObject();\n        }\n        mapping.endArray().endObject().endObject();\n        DocumentMapper mapper = createDocumentMapper(mapping);\n\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"point\").value(1.3).value(1.2).endArray()));\n        assertThat(doc.rootDoc().getField(\"point\"), notNullValue());\n    }\n","date":"2020-08-25 01:10:47","endLine":149,"groupId":"103194","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLonLatArrayDynamic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/19/a0776b199a5f99e823fbafa9c05611fb8b5411.src","preCode":"    public void testLonLatArrayDynamic() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startArray(\"dynamic_templates\");\n        {\n            mapping.startObject().startObject(\"point\");\n            {\n                mapping.field(\"match\", \"point*\");\n                mapping.startObject(\"mapping\").field(\"type\", \"geo_point\").endObject();\n            }\n            mapping.endObject().endObject();\n        }\n        mapping.endArray().endObject().endObject();\n        DocumentMapper mapper = createDocumentMapper(mapping);\n\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"point\").value(1.3).value(1.2).endArray()));\n        assertThat(doc.rootDoc().getField(\"point\"), notNullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoPointFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"},{"authorDate":"2020-11-06 23:20:25","commitOrder":6,"curCode":"    public void testArrayDynamic() throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\").startArray(\"dynamic_templates\");\n        {\n            mapping.startObject().startObject(\"point\");\n            {\n                mapping.field(\"match\", \"point*\");\n                mapping.startObject(\"mapping\").field(\"type\", \"point\").endObject();\n            }\n            mapping.endObject().endObject();\n        }\n        mapping.endArray().endObject().endObject();\n        DocumentMapper mapper = createDocumentMapper(mapping);\n\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"point\").value(1.3).value(1.2).endArray()));\n        assertThat(doc.rootDoc().getField(\"point\"), notNullValue());\n    }\n","date":"2020-11-06 23:20:25","endLine":128,"groupId":"103194","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testArrayDynamic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f1/46e96a5cc6df81878e994fb3e767f8c7a39573.src","preCode":"    public void testArrayDynamic() throws Exception {\n        XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startArray(\"dynamic_templates\").startObject().startObject(\"point\").field(\"match\", \"point*\")\n            .startObject(\"mapping\").field(\"type\", \"point\");\n        String mapping = Strings.toString(xContentBuilder.endObject().endObject().endObject().endArray().endObject().endObject());\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .startArray(\"point\").value(1.3).value(1.2).endArray()\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().getField(\"point\"), notNullValue());\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/PointFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"038fc354abe932c3fc7615beb4e3b991f1219533","commitMessage":"@@@Use MapperTestCase for cartesian mappers tests (#64705)\n\nThis commit changes the cartesian mapper tests (point and shape fields) so that they use MapperTestCase. ","date":"2020-11-06 23:20:25","modifiedFileCount":"0","status":"M","submitter":"Ignacio Vera"}]
