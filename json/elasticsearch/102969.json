[{"authorTime":"2020-09-25 02:39:44","codes":[{"authorDate":"2020-09-25 02:39:44","commitOrder":1,"curCode":"    protected void registerParameters(ParameterChecker checker) throws IOException {\n        checker.registerUpdateCheck(b -> b.field(\"orientation\", \"right\"), m -> {\n            GeoShapeFieldMapper gsfm = (GeoShapeFieldMapper) m;\n            assertEquals(ShapeBuilder.Orientation.RIGHT, gsfm.orientation());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertTrue(gpfm.ignoreMalformed.value());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertFalse(gpfm.ignoreZValue.value());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"coerce\", true), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertTrue(gpfm.coerce.value());\n        });\n    }\n","date":"2020-09-25 02:39:44","endLine":75,"groupId":"5167","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"registerParameters","params":"(ParameterCheckerchecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/fcfcd5dc1341dbb972e60e2a312a84ca86b1c9.src","preCode":"    protected void registerParameters(ParameterChecker checker) throws IOException {\n        checker.registerUpdateCheck(b -> b.field(\"orientation\", \"right\"), m -> {\n            GeoShapeFieldMapper gsfm = (GeoShapeFieldMapper) m;\n            assertEquals(ShapeBuilder.Orientation.RIGHT, gsfm.orientation());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertTrue(gpfm.ignoreMalformed.value());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertFalse(gpfm.ignoreZValue.value());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"coerce\", true), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertTrue(gpfm.coerce.value());\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2020-09-25 02:39:44","commitOrder":1,"curCode":"    protected void registerParameters(ParameterChecker checker) throws IOException {\n\n        checker.registerConflictCheck(\"strategy\",\n            fieldMapping(this::minimalMapping),\n            fieldMapping(b -> {\n                b.field(\"type\", \"geo_shape\");\n                b.field(\"strategy\", \"term\");\n            }));\n\n        checker.registerConflictCheck(\"tree\", b -> b.field(\"tree\", \"geohash\"));\n        checker.registerConflictCheck(\"tree_levels\", b -> b.field(\"tree_levels\", 5));\n        checker.registerConflictCheck(\"precision\", b -> b.field(\"precision\", 10));\n        checker.registerUpdateCheck(b -> b.field(\"orientation\", \"right\"), m -> {\n            LegacyGeoShapeFieldMapper gsfm = (LegacyGeoShapeFieldMapper) m;\n            assertEquals(ShapeBuilder.Orientation.RIGHT, gsfm.orientation());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertTrue(gpfm.ignoreMalformed.value());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertFalse(gpfm.ignoreZValue.value());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"coerce\", true), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertTrue(gpfm.coerce.value());\n        });\n        \r\n        checker.registerUpdateCheck(b -> b.field(\"distance_error_pct\", 0.8), m -> {});\n    }\n","date":"2020-09-25 02:39:44","endLine":113,"groupId":"5167","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"registerParameters","params":"(ParameterCheckerchecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/b376670fbd3b19ef0bf1a8114fb3d299731b70.src","preCode":"    protected void registerParameters(ParameterChecker checker) throws IOException {\n\n        checker.registerConflictCheck(\"strategy\",\n            fieldMapping(this::minimalMapping),\n            fieldMapping(b -> {\n                b.field(\"type\", \"geo_shape\");\n                b.field(\"strategy\", \"term\");\n            }));\n\n        checker.registerConflictCheck(\"tree\", b -> b.field(\"tree\", \"geohash\"));\n        checker.registerConflictCheck(\"tree_levels\", b -> b.field(\"tree_levels\", 5));\n        checker.registerConflictCheck(\"precision\", b -> b.field(\"precision\", 10));\n        checker.registerUpdateCheck(b -> b.field(\"orientation\", \"right\"), m -> {\n            LegacyGeoShapeFieldMapper gsfm = (LegacyGeoShapeFieldMapper) m;\n            assertEquals(ShapeBuilder.Orientation.RIGHT, gsfm.orientation());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertTrue(gpfm.ignoreMalformed.value());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertFalse(gpfm.ignoreZValue.value());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"coerce\", true), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertTrue(gpfm.coerce.value());\n        });\n        \r\n        checker.registerUpdateCheck(b -> b.field(\"distance_error_pct\", 0.8), m -> {});\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"118fa77a31453303d88123ea1b0d82d70ac008dc","commitMessage":"@@@Add parameter update and conflict tests to MapperTestCase (#62828)\n\nThis commit adds a mechanism to MapperTestCase that allows implementing\ntest classes to check that their parameters can be updated.  or throw conflict\nerrors as advertised. Child classes override the registerParameters method\nand tell the passed-in UpdateChecker class about their parameters. Simple\nconflicts can be checked.  using the existing minimal mappings as a base to\ncompare against.  or alternatively a particular initial mapping can be provided\nto check edge cases (eg.  norms can be updated from true to false.  but not\nvice versa). Updates are registered with a predicate that checks that the update\nhas in fact been applied to the resulting FieldMapper.\n\nFixes #61631","date":"2020-09-25 02:39:44","modifiedFileCount":"38","status":"B","submitter":"Alan Woodward"},{"authorTime":"2020-10-22 16:11:41","codes":[{"authorDate":"2020-10-22 16:11:41","commitOrder":2,"curCode":"    protected void registerParameters(ParameterChecker checker) throws IOException {\n        checker.registerUpdateCheck(b -> b.field(\"orientation\", \"right\"), m -> {\n            GeoShapeFieldMapper gsfm = (GeoShapeFieldMapper) m;\n            assertEquals(ShapeBuilder.Orientation.RIGHT, gsfm.orientation());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertTrue(gpfm.ignoreMalformed());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertFalse(gpfm.ignoreZValue());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"coerce\", true), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertTrue(gpfm.coerce.value());\n        });\n    }\n","date":"2020-10-22 16:11:41","endLine":58,"groupId":"5167","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"registerParameters","params":"(ParameterCheckerchecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/1f1ebad3dd8ddb0a3a377034bf3095fbd9cba6.src","preCode":"    protected void registerParameters(ParameterChecker checker) throws IOException {\n        checker.registerUpdateCheck(b -> b.field(\"orientation\", \"right\"), m -> {\n            GeoShapeFieldMapper gsfm = (GeoShapeFieldMapper) m;\n            assertEquals(ShapeBuilder.Orientation.RIGHT, gsfm.orientation());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertTrue(gpfm.ignoreMalformed.value());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertFalse(gpfm.ignoreZValue.value());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"coerce\", true), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertTrue(gpfm.coerce.value());\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2020-10-22 16:11:41","commitOrder":2,"curCode":"    protected void registerParameters(ParameterChecker checker) throws IOException {\n\n        checker.registerConflictCheck(\"strategy\",\n            fieldMapping(this::minimalMapping),\n            fieldMapping(b -> {\n                b.field(\"type\", \"geo_shape\");\n                b.field(\"strategy\", \"term\");\n            }));\n\n        checker.registerConflictCheck(\"tree\", b -> b.field(\"tree\", \"geohash\"));\n        checker.registerConflictCheck(\"tree_levels\", b -> b.field(\"tree_levels\", 5));\n        checker.registerConflictCheck(\"precision\", b -> b.field(\"precision\", 10));\n        checker.registerConflictCheck(\"points_only\", b -> b.field(\"points_only\", true));\n        checker.registerUpdateCheck(b -> b.field(\"orientation\", \"right\"), m -> {\n            LegacyGeoShapeFieldMapper gsfm = (LegacyGeoShapeFieldMapper) m;\n            assertEquals(ShapeBuilder.Orientation.RIGHT, gsfm.orientation());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertTrue(gpfm.ignoreMalformed());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertFalse(gpfm.ignoreZValue());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"coerce\", true), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertTrue(gpfm.coerce.value());\n        });\n        \r\n        checker.registerUpdateCheck(b -> b.field(\"distance_error_pct\", 0.8), m -> {});\n    }\n","date":"2020-10-22 16:11:41","endLine":97,"groupId":"5167","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"registerParameters","params":"(ParameterCheckerchecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/83/3c914b8fefc7ad211dff322891b4c8510e37dc.src","preCode":"    protected void registerParameters(ParameterChecker checker) throws IOException {\n\n        checker.registerConflictCheck(\"strategy\",\n            fieldMapping(this::minimalMapping),\n            fieldMapping(b -> {\n                b.field(\"type\", \"geo_shape\");\n                b.field(\"strategy\", \"term\");\n            }));\n\n        checker.registerConflictCheck(\"tree\", b -> b.field(\"tree\", \"geohash\"));\n        checker.registerConflictCheck(\"tree_levels\", b -> b.field(\"tree_levels\", 5));\n        checker.registerConflictCheck(\"precision\", b -> b.field(\"precision\", 10));\n        checker.registerUpdateCheck(b -> b.field(\"orientation\", \"right\"), m -> {\n            LegacyGeoShapeFieldMapper gsfm = (LegacyGeoShapeFieldMapper) m;\n            assertEquals(ShapeBuilder.Orientation.RIGHT, gsfm.orientation());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertTrue(gpfm.ignoreMalformed.value());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertFalse(gpfm.ignoreZValue.value());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"coerce\", true), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertTrue(gpfm.coerce.value());\n        });\n        \r\n        checker.registerUpdateCheck(b -> b.field(\"distance_error_pct\", 0.8), m -> {});\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"bfaf3040c6e5245b6d3367483ba86c676dd09bd2","commitMessage":"@@@Convert geo field mappers to Parametrized form (#63836)\n\nRelates to #62988","date":"2020-10-22 16:11:41","modifiedFileCount":"42","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-06-17 05:31:31","codes":[{"authorDate":"2021-06-17 05:31:31","commitOrder":3,"curCode":"    protected void registerParameters(ParameterChecker checker) throws IOException {\n        checker.registerUpdateCheck(b -> b.field(\"orientation\", \"right\"), m -> {\n            GeoShapeFieldMapper gsfm = (GeoShapeFieldMapper) m;\n            assertEquals(Orientation.RIGHT, gsfm.orientation());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertTrue(gpfm.ignoreMalformed());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertFalse(gpfm.ignoreZValue());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"coerce\", true), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertTrue(gpfm.coerce.value());\n        });\n    }\n","date":"2021-06-17 05:31:31","endLine":49,"groupId":"102969","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"registerParameters","params":"(ParameterCheckerchecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/10849e29abc48342b1b0f7495f79f6dec47afa.src","preCode":"    protected void registerParameters(ParameterChecker checker) throws IOException {\n        checker.registerUpdateCheck(b -> b.field(\"orientation\", \"right\"), m -> {\n            GeoShapeFieldMapper gsfm = (GeoShapeFieldMapper) m;\n            assertEquals(ShapeBuilder.Orientation.RIGHT, gsfm.orientation());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertTrue(gpfm.ignoreMalformed());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertFalse(gpfm.ignoreZValue());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"coerce\", true), m -> {\n            GeoShapeFieldMapper gpfm = (GeoShapeFieldMapper) m;\n            assertTrue(gpfm.coerce.value());\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2021-06-17 05:31:31","commitOrder":3,"curCode":"    protected void registerParameters(ParameterChecker checker) throws IOException {\n\n        checker.registerConflictCheck(\"strategy\",\n            fieldMapping(this::minimalMapping),\n            fieldMapping(b -> {\n                b.field(\"type\", \"geo_shape\");\n                b.field(\"strategy\", \"term\");\n            }));\n\n        checker.registerConflictCheck(\"tree\", b -> b.field(\"tree\", \"geohash\"));\n        checker.registerConflictCheck(\"tree_levels\", b -> b.field(\"tree_levels\", 5));\n        checker.registerConflictCheck(\"precision\", b -> b.field(\"precision\", 10));\n        checker.registerConflictCheck(\"points_only\", b -> b.field(\"points_only\", true));\n        checker.registerUpdateCheck(b -> b.field(\"orientation\", \"right\"), m -> {\n            LegacyGeoShapeFieldMapper gsfm = (LegacyGeoShapeFieldMapper) m;\n            assertEquals(Orientation.RIGHT, gsfm.orientation());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertTrue(gpfm.ignoreMalformed());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertFalse(gpfm.ignoreZValue());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"coerce\", true), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertTrue(gpfm.coerce.value());\n        });\n        \r\n        checker.registerUpdateCheck(b -> b.field(\"distance_error_pct\", 0.8), m -> {});\n    }\n","date":"2021-06-17 05:31:31","endLine":96,"groupId":"102969","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"registerParameters","params":"(ParameterCheckerchecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/51/4a168a0a14ca1b42e33059d69eb2d328128814.src","preCode":"    protected void registerParameters(ParameterChecker checker) throws IOException {\n\n        checker.registerConflictCheck(\"strategy\",\n            fieldMapping(this::minimalMapping),\n            fieldMapping(b -> {\n                b.field(\"type\", \"geo_shape\");\n                b.field(\"strategy\", \"term\");\n            }));\n\n        checker.registerConflictCheck(\"tree\", b -> b.field(\"tree\", \"geohash\"));\n        checker.registerConflictCheck(\"tree_levels\", b -> b.field(\"tree_levels\", 5));\n        checker.registerConflictCheck(\"precision\", b -> b.field(\"precision\", 10));\n        checker.registerConflictCheck(\"points_only\", b -> b.field(\"points_only\", true));\n        checker.registerUpdateCheck(b -> b.field(\"orientation\", \"right\"), m -> {\n            LegacyGeoShapeFieldMapper gsfm = (LegacyGeoShapeFieldMapper) m;\n            assertEquals(ShapeBuilder.Orientation.RIGHT, gsfm.orientation());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_malformed\", true), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertTrue(gpfm.ignoreMalformed());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertFalse(gpfm.ignoreZValue());\n        });\n        checker.registerUpdateCheck(b -> b.field(\"coerce\", true), m -> {\n            LegacyGeoShapeFieldMapper gpfm = (LegacyGeoShapeFieldMapper) m;\n            assertTrue(gpfm.coerce.value());\n        });\n        \r\n        checker.registerUpdateCheck(b -> b.field(\"distance_error_pct\", 0.8), m -> {});\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"6a8f8f3f718bd21bf14176049c9e1f1def13463b","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-17 05:31:31","modifiedFileCount":"4429","status":"M","submitter":"Igor Motov"}]
