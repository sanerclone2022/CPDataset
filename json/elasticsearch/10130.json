[{"authorTime":"2021-02-24 02:41:18","codes":[{"authorDate":"2021-02-24 02:41:18","commitOrder":1,"curCode":"    public void testProcessDatabaseNew() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(0, state.get(\"test\").getFirstChunk());\n                assertEquals(10, state.get(\"test\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5) {\n                assertSame(bais, is);\n                assertEquals(0, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test\", name);\n                assertEquals(0, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY);\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.gz\", \"url\", \"a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","date":"2021-02-24 02:41:18","endLine":212,"groupId":"60704","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessDatabaseNew","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/7d708586e8c6266fe1fc6a42dc0e2f311f88d5.src","preCode":"    public void testProcessDatabaseNew() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(0, state.get(\"test\").getFirstChunk());\n                assertEquals(10, state.get(\"test\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5) {\n                assertSame(bais, is);\n                assertEquals(0, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test\", name);\n                assertEquals(0, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY);\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.gz\", \"url\", \"a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpDownloaderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"},{"authorDate":"2021-02-24 02:41:18","commitOrder":1,"curCode":"    public void testProcessDatabaseUpdate() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(9, state.get(\"test\").getFirstChunk());\n                assertEquals(10, state.get(\"test\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5) {\n                assertSame(bais, is);\n                assertEquals(9, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test\", name);\n                assertEquals(9, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY.put(\"test\", new GeoIpTaskState.Metadata(0, 5, 8, \"0\")));\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.gz\", \"url\", \"a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","date":"2021-02-24 02:41:18","endLine":247,"groupId":"60704","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessDatabaseUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/7d708586e8c6266fe1fc6a42dc0e2f311f88d5.src","preCode":"    public void testProcessDatabaseUpdate() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(9, state.get(\"test\").getFirstChunk());\n                assertEquals(10, state.get(\"test\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5) {\n                assertSame(bais, is);\n                assertEquals(9, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test\", name);\n                assertEquals(9, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY.put(\"test\", new GeoIpTaskState.Metadata(0, 5, 8, \"0\")));\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.gz\", \"url\", \"a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpDownloaderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"B"}],"commitId":"2ba3e929e7be16ed100bb9139a4b1ea25d6fd4a1","commitMessage":"@@@GeoIP database downloader (#68424)\n\nThis change adds component that will download new GeoIP databases from infra service\nNew databases are downloaded in chunks and stored in .geoip_databases index\nDownloads are verified against MD5 checksum provided by the server\nCurrent state of all stored databases is stored in cluster state in persistent task state\n\nRelates to #68920","date":"2021-02-24 02:41:18","modifiedFileCount":"2","status":"B","submitter":"Przemko Robakowski"},{"authorTime":"2021-03-29 18:46:27","codes":[{"authorDate":"2021-03-29 18:46:27","commitOrder":2,"curCode":"    public void testProcessDatabaseNew() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(0, state.get(\"test\").getFirstChunk());\n                assertEquals(10, state.get(\"test\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5) {\n                assertSame(bais, is);\n                assertEquals(0, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test\", name);\n                assertEquals(0, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY);\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.tgz\", \"url\", \"a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","date":"2021-03-29 18:46:27","endLine":214,"groupId":"60704","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessDatabaseNew","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fe/b3e3ff34ec3804bb475ef4017b5f2649ef81bb.src","preCode":"    public void testProcessDatabaseNew() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(0, state.get(\"test\").getFirstChunk());\n                assertEquals(10, state.get(\"test\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5) {\n                assertSame(bais, is);\n                assertEquals(0, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test\", name);\n                assertEquals(0, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY);\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.gz\", \"url\", \"a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpDownloaderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2021-03-29 18:46:27","commitOrder":2,"curCode":"    public void testProcessDatabaseUpdate() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(9, state.get(\"test.mmdb\").getFirstChunk());\n                assertEquals(10, state.get(\"test.mmdb\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5) {\n                assertSame(bais, is);\n                assertEquals(9, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test.mmdb\", name);\n                assertEquals(9, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY.put(\"test.mmdb\", new GeoIpTaskState.Metadata(0, 5, 8, \"0\")));\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.tgz\", \"url\", \"a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","date":"2021-03-29 18:46:27","endLine":249,"groupId":"64174","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessDatabaseUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fe/b3e3ff34ec3804bb475ef4017b5f2649ef81bb.src","preCode":"    public void testProcessDatabaseUpdate() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(9, state.get(\"test\").getFirstChunk());\n                assertEquals(10, state.get(\"test\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5) {\n                assertSame(bais, is);\n                assertEquals(9, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test\", name);\n                assertEquals(9, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY.put(\"test\", new GeoIpTaskState.Metadata(0, 5, 8, \"0\")));\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.gz\", \"url\", \"a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpDownloaderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"}],"commitId":"b025f51ecea3503f48f41796270d2295e7f45160","commitMessage":"@@@Add support for .tgz files in GeoIpDownloader (#70725)\n\nWe have to ship COPYRIGHT.txt and LICENSE.txt files alongside .mmdb files for legal compliance. Infra will pack these in single .tgz (gzipped tar) archive provided by GeoIP databases service.\nThis change adds support for that format to GeoIpDownloader and DatabaseRegistry","date":"2021-03-29 18:46:27","modifiedFileCount":"5","status":"M","submitter":"Przemko Robakowski"},{"authorTime":"2021-04-21 21:28:12","codes":[{"authorDate":"2021-04-21 21:28:12","commitOrder":3,"curCode":"    public void testProcessDatabaseNew() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"http://a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(0, state.get(\"test\").getFirstChunk());\n                assertEquals(10, state.get(\"test\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5, long start) {\n                assertSame(bais, is);\n                assertEquals(0, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test\", name);\n                assertEquals(0, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY);\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.tgz\", \"url\", \"http://a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","date":"2021-04-21 21:28:12","endLine":217,"groupId":"60704","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessDatabaseNew","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/19/d9416222b4febcba4f4f1fc8a1e02a23fb92ee.src","preCode":"    public void testProcessDatabaseNew() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(0, state.get(\"test\").getFirstChunk());\n                assertEquals(10, state.get(\"test\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5) {\n                assertSame(bais, is);\n                assertEquals(0, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test\", name);\n                assertEquals(0, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY);\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.tgz\", \"url\", \"a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpDownloaderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2021-04-21 21:28:12","commitOrder":3,"curCode":"    public void testProcessDatabaseUpdate() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"http://a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(9, state.get(\"test.mmdb\").getFirstChunk());\n                assertEquals(10, state.get(\"test.mmdb\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5, long start) {\n                assertSame(bais, is);\n                assertEquals(9, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test.mmdb\", name);\n                assertEquals(9, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY.put(\"test.mmdb\", new GeoIpTaskState.Metadata(0, 5, 8, \"0\")));\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.tgz\", \"url\", \"http://a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","date":"2021-04-21 21:28:12","endLine":252,"groupId":"64174","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testProcessDatabaseUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/19/d9416222b4febcba4f4f1fc8a1e02a23fb92ee.src","preCode":"    public void testProcessDatabaseUpdate() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(9, state.get(\"test.mmdb\").getFirstChunk());\n                assertEquals(10, state.get(\"test.mmdb\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5) {\n                assertSame(bais, is);\n                assertEquals(9, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test.mmdb\", name);\n                assertEquals(9, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY.put(\"test.mmdb\", new GeoIpTaskState.Metadata(0, 5, 8, \"0\")));\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.tgz\", \"url\", \"a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpDownloaderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"9a86dde3572a6f3999eea75bc3ce30b965837ba3","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-21 21:28:12","modifiedFileCount":"1285","status":"M","submitter":"iverase"},{"authorTime":"2021-06-18 19:51:12","codes":[{"authorDate":"2021-04-21 21:28:12","commitOrder":4,"curCode":"    public void testProcessDatabaseNew() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"http://a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(0, state.get(\"test\").getFirstChunk());\n                assertEquals(10, state.get(\"test\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5, long start) {\n                assertSame(bais, is);\n                assertEquals(0, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test\", name);\n                assertEquals(0, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY);\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.tgz\", \"url\", \"http://a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","date":"2021-04-21 21:28:12","endLine":217,"groupId":"10130","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testProcessDatabaseNew","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/19/d9416222b4febcba4f4f1fc8a1e02a23fb92ee.src","preCode":"    public void testProcessDatabaseNew() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"http://a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(0, state.get(\"test\").getFirstChunk());\n                assertEquals(10, state.get(\"test\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5, long start) {\n                assertSame(bais, is);\n                assertEquals(0, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test\", name);\n                assertEquals(0, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY);\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.tgz\", \"url\", \"http://a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpDownloaderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"N"},{"authorDate":"2021-06-18 19:51:12","commitOrder":4,"curCode":"    public void testProcessDatabaseUpdate() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"http://a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(9, state.get(\"test.mmdb\").getFirstChunk());\n                assertEquals(10, state.get(\"test.mmdb\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5, long start) {\n                assertSame(bais, is);\n                assertEquals(9, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test.mmdb\", name);\n                assertEquals(9, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY.put(\"test.mmdb\", new GeoIpTaskState.Metadata(0, 5, 8, \"0\", 0)));\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.tgz\", \"url\", \"http://a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","date":"2021-06-18 19:51:12","endLine":284,"groupId":"10130","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testProcessDatabaseUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4b/4342e97852274f976ea982b582c973e2c23d94.src","preCode":"    public void testProcessDatabaseUpdate() throws IOException {\n        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n        when(httpClient.get(\"http://a.b/t1\")).thenReturn(bais);\n\n        geoIpDownloader = new GeoIpDownloader(client, httpClient, clusterService, threadPool, Settings.EMPTY,\n            1, \"\", \"\", \"\", EMPTY_TASK_ID, Collections.emptyMap()) {\n            @Override\n            void updateTaskState() {\n                assertEquals(9, state.get(\"test.mmdb\").getFirstChunk());\n                assertEquals(10, state.get(\"test.mmdb\").getLastChunk());\n            }\n\n            @Override\n            int indexChunks(String name, InputStream is, int chunk, String expectedMd5, long start) {\n                assertSame(bais, is);\n                assertEquals(9, chunk);\n                return 11;\n            }\n\n            @Override\n            protected void updateTimestamp(String name, GeoIpTaskState.Metadata metadata) {\n                fail();\n            }\n\n            @Override\n            void deleteOldChunks(String name, int firstChunk) {\n                assertEquals(\"test.mmdb\", name);\n                assertEquals(9, firstChunk);\n            }\n        };\n\n        geoIpDownloader.setState(GeoIpTaskState.EMPTY.put(\"test.mmdb\", new GeoIpTaskState.Metadata(0, 5, 8, \"0\")));\n        geoIpDownloader.processDatabase(Map.of(\"name\", \"test.tgz\", \"url\", \"http://a.b/t1\", \"md5_hash\", \"1\"));\n    }\n","realPath":"modules/ingest-geoip/src/test/java/org/elasticsearch/ingest/geoip/GeoIpDownloaderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"}],"commitId":"331a44ba425d9ae937a8f49a7f94d8d0a02f3b93","commitMessage":"@@@Change GeoIP downloader policy after 30 days of no updates (#74099)\n\nThis PR changes the way GeoIpDownloader and GeoIpProcessor handle situation when we are unable to update databases for 30 days. In that case:\n\nGeoIpDownloader will delete all chunks from .geoip_databases index\nDatabaseRegistry will delete all files on ingest nodes\nGeoIpProcessor will tag document with tags: [\"_geoip_expired_database\"] field (same way as in Logstash)\nThis change also fixes bug with that breaks DatabaseRegistry and when it tires to download databases after updating timestamp only (GeoIpDownloader checks if there are new databases and updates timestamp because local databases are up to date)","date":"2021-06-18 19:51:12","modifiedFileCount":"15","status":"M","submitter":"Przemko Robakowski"}]
