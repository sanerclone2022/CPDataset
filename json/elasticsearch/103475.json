[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").useDisMax(false).toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(2));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n    }\n","date":"2018-04-26 03:22:53","endLine":236,"groupId":"21336","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testToQueryFieldsWildcard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b6/d4816b01f4a975e26ad4031e1a10f0accb1346.src","preCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").useDisMax(false).toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(2));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        Query query = queryStringQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2)\n            .toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n    }\n","date":"2018-04-26 03:22:53","endLine":504,"groupId":"70965","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testToQueryMultipleFieldsDisMaxQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/fc66b3985e19e663446f001ab216edcf8db93e.src","preCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        Query query = queryStringQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2)\n            .toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":495,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-07-19 02:10:12","commitOrder":2,"curCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").useDisMax(false).toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(3));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 2).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n    }\n","date":"2018-07-19 02:10:12","endLine":237,"groupId":"21336","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testToQueryFieldsWildcard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9e/ed4d9f1c1df5a0a2a69755b5d16210e8764e24.src","preCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").useDisMax(false).toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(2));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        Query query = queryStringQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2)\n            .toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n    }\n","date":"2018-04-26 03:22:53","endLine":504,"groupId":"70965","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testToQueryMultipleFieldsDisMaxQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/fc66b3985e19e663446f001ab216edcf8db93e.src","preCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        Query query = queryStringQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2)\n            .toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":495,"status":"N"}],"commitId":"a019e723b5475f0ca77063dab45fbcccd1d6559a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-19 02:10:12","modifiedFileCount":"121","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-07-27 17:51:09","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":3,"curCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").useDisMax(false).toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(3));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 2).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n    }\n","date":"2018-07-27 17:51:09","endLine":229,"groupId":"21336","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testToQueryFieldsWildcard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/0cdaca40204ff2535233ebe1e814f7ff60e954.src","preCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").useDisMax(false).toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(3));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 2).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2018-07-27 17:51:09","commitOrder":3,"curCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        Query query = queryStringQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2)\n            .toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n    }\n","date":"2018-07-27 17:51:09","endLine":495,"groupId":"70965","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testToQueryMultipleFieldsDisMaxQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/87/197b662d142956ef2108dfad7672add3fb9657.src","preCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        Query query = queryStringQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2)\n            .toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"M"}],"commitId":"dfb277cfb7969ad543a31dea234579d0e886a73a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-27 17:51:09","modifiedFileCount":"105","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-07-27 17:51:09","codes":[{"authorDate":"2018-12-14 03:13:16","commitOrder":4,"curCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").tieBreaker(1.0f).toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(3));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 2).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n    }\n","date":"2018-12-14 03:13:16","endLine":229,"groupId":"21336","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testToQueryFieldsWildcard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/43/c76f028e22eeb9d31e767442af188646204217.src","preCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").useDisMax(false).toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(3));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 2).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2018-07-27 17:51:09","commitOrder":4,"curCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        Query query = queryStringQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2)\n            .toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n    }\n","date":"2018-07-27 17:51:09","endLine":495,"groupId":"70965","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testToQueryMultipleFieldsDisMaxQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/87/197b662d142956ef2108dfad7672add3fb9657.src","preCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        Query query = queryStringQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2)\n            .toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"N"}],"commitId":"b33ff16d62e57843c407271d3aadeb6328567441","commitMessage":"@@@Remove deprecated `useDisMax` from MultiMatchQuery (#36488)\n\nThe getters and setters for useDisMax() have been deprecated since at least 6.0. \nalso there hasn't been any reference to the query parameter in the\ndocumentation. Removing it from the builder and tests and replacing it with\n`tieBreaker(1.0f)` where necessary.","date":"2018-12-14 03:13:16","modifiedFileCount":"6","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2018-07-27 17:51:09","codes":[{"authorDate":"2019-06-05 14:47:33","commitOrder":5,"curCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").tieBreaker(1.0f).toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(2));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n    }\n","date":"2019-06-05 14:47:33","endLine":245,"groupId":"21336","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testToQueryFieldsWildcard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/810d6686c4be97de2039963ad0e18e6ad64cb7.src","preCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").tieBreaker(1.0f).toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(3));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 2).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2018-07-27 17:51:09","commitOrder":5,"curCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        Query query = queryStringQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2)\n            .toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n    }\n","date":"2018-07-27 17:51:09","endLine":495,"groupId":"70965","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testToQueryMultipleFieldsDisMaxQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/87/197b662d142956ef2108dfad7672add3fb9657.src","preCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        Query query = queryStringQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2)\n            .toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"N"}],"commitId":"3cfa4a6aa86499f57d72a7aca0a4440e48523e92","commitMessage":"@@@Deduplicate alias and concrete fields in query field expansion (#42328)\n\nThe full-text query parsers accept field pattern that are expanded using the mapping.\nAlias field are also detected during the expansion but they are not deduplicated with the\nconcrete fields that are found from other patterns (or the same). This change ensures\nthat we deduplicate the target fields of the full-text query parsers in order to avoid\nadding the same clause multiple times. Boolean queries are already able to deduplicate\nclauses during rewrite but since we also use DisjunctionMaxQuery it is preferable to detect\n these duplicates early on.\n","date":"2019-06-05 14:47:33","modifiedFileCount":"5","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-04-03 22:00:46","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":6,"curCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").tieBreaker(1.0f).toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(2));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(KEYWORD_FIELD_NAME, \"test\")));\n    }\n","date":"2020-04-03 22:00:46","endLine":239,"groupId":"21336","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testToQueryFieldsWildcard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4b/227541b3a9d022dfdc905e2b00e19d548e5786.src","preCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").tieBreaker(1.0f).toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(2));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"},{"authorDate":"2020-04-03 22:00:46","commitOrder":6,"curCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        Query query = queryStringQuery(\"test\").field(TEXT_FIELD_NAME).field(KEYWORD_FIELD_NAME)\n            .toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(KEYWORD_FIELD_NAME, \"test\")));\n    }\n","date":"2020-04-03 22:00:46","endLine":513,"groupId":"70965","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testToQueryMultipleFieldsDisMaxQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/7bce5edab3d92a09f5d9650631122009f57a11.src","preCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        Query query = queryStringQuery(\"test\").field(STRING_FIELD_NAME).field(STRING_FIELD_NAME_2)\n            .toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(STRING_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(STRING_FIELD_NAME_2, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"M"}],"commitId":"f5759bb2092f1a957e79626c872c3f5707c1ee04","commitMessage":"@@@Rename field name constants in AbstractBuilderTestCase (#53234)\n\nSome field name constants were not updaten when we moved from \"string\" to \"text\"\nand \"keyword\" fields. Renaming them makes it easier and faster to know which\nfield type is used in test subclassing this base test case.","date":"2020-04-03 22:00:46","modifiedFileCount":"34","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":7,"curCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").tieBreaker(1.0f).toQuery(createSearchExecutionContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(2));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(KEYWORD_FIELD_NAME, \"test\")));\n    }\n","date":"2021-01-15 01:11:59","endLine":240,"groupId":"21336","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testToQueryFieldsWildcard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/c52824fefbdd7894f0f7f5324cc199b7229240.src","preCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").tieBreaker(1.0f).toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(2));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(KEYWORD_FIELD_NAME, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":7,"curCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        Query query = queryStringQuery(\"test\").field(TEXT_FIELD_NAME).field(KEYWORD_FIELD_NAME)\n            .toQuery(createSearchExecutionContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(KEYWORD_FIELD_NAME, \"test\")));\n    }\n","date":"2021-01-15 01:11:59","endLine":516,"groupId":"70965","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testToQueryMultipleFieldsDisMaxQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/f2b7c45a7bb331c91e314966d9eec736b3e669.src","preCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        Query query = queryStringQuery(\"test\").field(TEXT_FIELD_NAME).field(KEYWORD_FIELD_NAME)\n            .toQuery(createShardContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(KEYWORD_FIELD_NAME, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-06-17 05:31:31","codes":[{"authorDate":"2021-06-17 05:31:31","commitOrder":8,"curCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").tieBreaker(1.0f).toQuery(createSearchExecutionContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(2));\n        assertThat(dQuery.getDisjuncts(),\n            hasItems(new TermQuery(new Term(TEXT_FIELD_NAME, \"test\")), new TermQuery(new Term(KEYWORD_FIELD_NAME, \"test\"))));\n    }\n","date":"2021-06-17 05:31:31","endLine":228,"groupId":"103475","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"testToQueryFieldsWildcard","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9d/15aeb3ec5c5862b4bde00e7411fc2022965d47.src","preCode":"    public void testToQueryFieldsWildcard() throws Exception {\n        Query query = multiMatchQuery(\"test\").field(\"mapped_str*\").tieBreaker(1.0f).toQuery(createSearchExecutionContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery dQuery = (DisjunctionMaxQuery) query;\n        assertThat(dQuery.getTieBreakerMultiplier(), equalTo(1.0f));\n        assertThat(dQuery.getDisjuncts().size(), equalTo(2));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 0).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"test\")));\n        assertThat(assertDisjunctionSubQuery(query, TermQuery.class, 1).getTerm(), equalTo(new Term(KEYWORD_FIELD_NAME, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2021-06-17 05:31:31","commitOrder":8,"curCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        Query query = queryStringQuery(\"test\").field(TEXT_FIELD_NAME).field(KEYWORD_FIELD_NAME)\n            .toQuery(createSearchExecutionContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        assertThat(disMaxQuery.getDisjuncts(),\n            hasItems(new TermQuery(new Term(TEXT_FIELD_NAME, \"test\")), new TermQuery(new Term(KEYWORD_FIELD_NAME, \"test\"))));\n    }\n","date":"2021-06-17 05:31:31","endLine":506,"groupId":"103475","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testToQueryMultipleFieldsDisMaxQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3c/6f5c1d4b3a341cf234c2188b63d85bd812e23b.src","preCode":"    public void testToQueryMultipleFieldsDisMaxQuery() throws Exception {\n        Query query = queryStringQuery(\"test\").field(TEXT_FIELD_NAME).field(KEYWORD_FIELD_NAME)\n            .toQuery(createSearchExecutionContext());\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n        DisjunctionMaxQuery disMaxQuery = (DisjunctionMaxQuery) query;\n        List<Query> disjuncts = disMaxQuery.getDisjuncts();\n        assertThat(((TermQuery) disjuncts.get(0)).getTerm(), equalTo(new Term(TEXT_FIELD_NAME, \"test\")));\n        assertThat(((TermQuery) disjuncts.get(1)).getTerm(), equalTo(new Term(KEYWORD_FIELD_NAME, \"test\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":499,"status":"M"}],"commitId":"6a8f8f3f718bd21bf14176049c9e1f1def13463b","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-17 05:31:31","modifiedFileCount":"4429","status":"M","submitter":"Igor Motov"}]
