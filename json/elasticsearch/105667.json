[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testSuccessAfterRetryWithExceptionFromTransport() throws Exception {\n        Request request = new Request().index(\"test\");\n        request.shardId = new ShardId(\"test\", \"_na_\", 0);\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        boolean local = randomBoolean();\n        setState(clusterService, ClusterStateCreationUtils.state(\"test\", local, ShardRoutingState.STARTED));\n        action.new AsyncSingleAction(request, listener).start();\n        assertThat(transport.capturedRequests().length, equalTo(1));\n        long requestId = transport.capturedRequests()[0].requestId;\n        transport.clear();\n        DiscoveryNode node = clusterService.state().getNodes().getLocalNode();\n        transport.handleLocalError(requestId, new ConnectTransportException(node, \"test exception\"));\n        \r\n        setState(clusterService, ClusterStateCreationUtils.state(\"test\", local, ShardRoutingState.STARTED));\n        assertThat(transport.capturedRequests().length, equalTo(1));\n        transport.handleResponse(transport.capturedRequests()[0].requestId, new Response());\n        listener.get();\n    }\n","date":"2018-04-26 03:22:53","endLine":265,"groupId":"2277","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSuccessAfterRetryWithExceptionFromTransport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8d/b45cc5508efb6b2799ccd3f363681dc6d4ffe7.src","preCode":"    public void testSuccessAfterRetryWithExceptionFromTransport() throws Exception {\n        Request request = new Request().index(\"test\");\n        request.shardId = new ShardId(\"test\", \"_na_\", 0);\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        boolean local = randomBoolean();\n        setState(clusterService, ClusterStateCreationUtils.state(\"test\", local, ShardRoutingState.STARTED));\n        action.new AsyncSingleAction(request, listener).start();\n        assertThat(transport.capturedRequests().length, equalTo(1));\n        long requestId = transport.capturedRequests()[0].requestId;\n        transport.clear();\n        DiscoveryNode node = clusterService.state().getNodes().getLocalNode();\n        transport.handleLocalError(requestId, new ConnectTransportException(node, \"test exception\"));\n        \r\n        setState(clusterService, ClusterStateCreationUtils.state(\"test\", local, ShardRoutingState.STARTED));\n        assertThat(transport.capturedRequests().length, equalTo(1));\n        transport.handleResponse(transport.capturedRequests()[0].requestId, new Response());\n        listener.get();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testUnresolvableRequestDoesNotHang() throws InterruptedException, ExecutionException, TimeoutException {\n        action = new TestTransportInstanceSingleOperationAction(\n                Settings.EMPTY,\n                \"indices:admin/test_unresolvable\",\n                transportService,\n                new ActionFilters(new HashSet<>()),\n                new MyResolver(),\n                Request::new\n        ) {\n            @Override\n            protected void resolveRequest(ClusterState state, Request request) {\n                throw new IllegalStateException(\"request cannot be resolved\");\n            }\n        };\n        Request request = new Request().index(\"test\");\n        request.shardId = new ShardId(\"test\", \"_na_\", 0);\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        setState(clusterService, ClusterStateCreationUtils.state(\"test\", randomBoolean(), ShardRoutingState.STARTED));\n        action.new AsyncSingleAction(request, listener).start();\n        assertThat(transport.capturedRequests().length, equalTo(0));\n        try {\n            listener.get();\n        } catch (Exception e) {\n            if (ExceptionsHelper.unwrap(e, IllegalStateException.class) == null) {\n                logger.info(\"expected IllegalStateException  but got \", e);\n                fail(\"expected and IllegalStateException\");\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":326,"groupId":"6316","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnresolvableRequestDoesNotHang","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8d/b45cc5508efb6b2799ccd3f363681dc6d4ffe7.src","preCode":"    public void testUnresolvableRequestDoesNotHang() throws InterruptedException, ExecutionException, TimeoutException {\n        action = new TestTransportInstanceSingleOperationAction(\n                Settings.EMPTY,\n                \"indices:admin/test_unresolvable\",\n                transportService,\n                new ActionFilters(new HashSet<>()),\n                new MyResolver(),\n                Request::new\n        ) {\n            @Override\n            protected void resolveRequest(ClusterState state, Request request) {\n                throw new IllegalStateException(\"request cannot be resolved\");\n            }\n        };\n        Request request = new Request().index(\"test\");\n        request.shardId = new ShardId(\"test\", \"_na_\", 0);\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        setState(clusterService, ClusterStateCreationUtils.state(\"test\", randomBoolean(), ShardRoutingState.STARTED));\n        action.new AsyncSingleAction(request, listener).start();\n        assertThat(transport.capturedRequests().length, equalTo(0));\n        try {\n            listener.get();\n        } catch (Exception e) {\n            if (ExceptionsHelper.unwrap(e, IllegalStateException.class) == null) {\n                logger.info(\"expected IllegalStateException  but got \", e);\n                fail(\"expected and IllegalStateException\");\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-11-05 20:08:18","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testSuccessAfterRetryWithExceptionFromTransport() throws Exception {\n        Request request = new Request().index(\"test\");\n        request.shardId = new ShardId(\"test\", \"_na_\", 0);\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        boolean local = randomBoolean();\n        setState(clusterService, ClusterStateCreationUtils.state(\"test\", local, ShardRoutingState.STARTED));\n        action.new AsyncSingleAction(request, listener).start();\n        assertThat(transport.capturedRequests().length, equalTo(1));\n        long requestId = transport.capturedRequests()[0].requestId;\n        transport.clear();\n        DiscoveryNode node = clusterService.state().getNodes().getLocalNode();\n        transport.handleLocalError(requestId, new ConnectTransportException(node, \"test exception\"));\n        \r\n        setState(clusterService, ClusterStateCreationUtils.state(\"test\", local, ShardRoutingState.STARTED));\n        assertThat(transport.capturedRequests().length, equalTo(1));\n        transport.handleResponse(transport.capturedRequests()[0].requestId, new Response());\n        listener.get();\n    }\n","date":"2018-04-26 03:22:53","endLine":265,"groupId":"105667","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSuccessAfterRetryWithExceptionFromTransport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8d/b45cc5508efb6b2799ccd3f363681dc6d4ffe7.src","preCode":"    public void testSuccessAfterRetryWithExceptionFromTransport() throws Exception {\n        Request request = new Request().index(\"test\");\n        request.shardId = new ShardId(\"test\", \"_na_\", 0);\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        boolean local = randomBoolean();\n        setState(clusterService, ClusterStateCreationUtils.state(\"test\", local, ShardRoutingState.STARTED));\n        action.new AsyncSingleAction(request, listener).start();\n        assertThat(transport.capturedRequests().length, equalTo(1));\n        long requestId = transport.capturedRequests()[0].requestId;\n        transport.clear();\n        DiscoveryNode node = clusterService.state().getNodes().getLocalNode();\n        transport.handleLocalError(requestId, new ConnectTransportException(node, \"test exception\"));\n        \r\n        setState(clusterService, ClusterStateCreationUtils.state(\"test\", local, ShardRoutingState.STARTED));\n        assertThat(transport.capturedRequests().length, equalTo(1));\n        transport.handleResponse(transport.capturedRequests()[0].requestId, new Response());\n        listener.get();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"N"},{"authorDate":"2018-11-05 20:08:18","commitOrder":2,"curCode":"    public void testUnresolvableRequestDoesNotHang() throws InterruptedException, ExecutionException, TimeoutException {\n        action = new TestTransportInstanceSingleOperationAction(\n                \"indices:admin/test_unresolvable\",\n                transportService,\n                new ActionFilters(new HashSet<>()),\n                new MyResolver(),\n                Request::new\n        ) {\n            @Override\n            protected void resolveRequest(ClusterState state, Request request) {\n                throw new IllegalStateException(\"request cannot be resolved\");\n            }\n        };\n        Request request = new Request().index(\"test\");\n        request.shardId = new ShardId(\"test\", \"_na_\", 0);\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        setState(clusterService, ClusterStateCreationUtils.state(\"test\", randomBoolean(), ShardRoutingState.STARTED));\n        action.new AsyncSingleAction(request, listener).start();\n        assertThat(transport.capturedRequests().length, equalTo(0));\n        try {\n            listener.get();\n        } catch (Exception e) {\n            if (ExceptionsHelper.unwrap(e, IllegalStateException.class) == null) {\n                logger.info(\"expected IllegalStateException  but got \", e);\n                fail(\"expected and IllegalStateException\");\n            }\n        }\n    }\n","date":"2018-11-05 20:08:18","endLine":321,"groupId":"105667","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnresolvableRequestDoesNotHang","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c0/88c635f590d2f98e7a654b24498cf4355d86b5.src","preCode":"    public void testUnresolvableRequestDoesNotHang() throws InterruptedException, ExecutionException, TimeoutException {\n        action = new TestTransportInstanceSingleOperationAction(\n                Settings.EMPTY,\n                \"indices:admin/test_unresolvable\",\n                transportService,\n                new ActionFilters(new HashSet<>()),\n                new MyResolver(),\n                Request::new\n        ) {\n            @Override\n            protected void resolveRequest(ClusterState state, Request request) {\n                throw new IllegalStateException(\"request cannot be resolved\");\n            }\n        };\n        Request request = new Request().index(\"test\");\n        request.shardId = new ShardId(\"test\", \"_na_\", 0);\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        setState(clusterService, ClusterStateCreationUtils.state(\"test\", randomBoolean(), ShardRoutingState.STARTED));\n        action.new AsyncSingleAction(request, listener).start();\n        assertThat(transport.capturedRequests().length, equalTo(0));\n        try {\n            listener.get();\n        } catch (Exception e) {\n            if (ExceptionsHelper.unwrap(e, IllegalStateException.class) == null) {\n                logger.info(\"expected IllegalStateException  but got \", e);\n                fail(\"expected and IllegalStateException\");\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"}],"commitId":"409050e8de4cacbfac4b68ab12bbb928437a4499","commitMessage":"@@@Refactor: Remove settings from transport action CTOR (#35208)\n\nAs settings are not used in the transport action constructor.  this\nremoves the passing of the settings in all the transport actions.","date":"2018-11-05 20:08:18","modifiedFileCount":"289","status":"M","submitter":"Alexander Reelsen"}]
