[{"authorTime":"2019-01-16 18:52:17","codes":[{"authorDate":"2019-01-16 18:52:17","commitOrder":1,"curCode":"    private PrivateKey getPrivateKey() {\n        try {\n            final PrivateKey privateKey = PemUtils.readPrivateKey(key, () -> keyPassword);\n            if (privateKey == null) {\n                throw new SslConfigException(\"could not load ssl private key file [\" + key + \"]\");\n            }\n            return privateKey;\n        } catch (FileNotFoundException | NoSuchFileException e) {\n            throw new SslConfigException(\"the configured ssl private key file [\" + key.toAbsolutePath() + \"] does not exist\", e);\n        } catch (IOException e) {\n            throw new SslConfigException(\"the configured ssl private key file [\" + key.toAbsolutePath() + \"] cannot be read\", e);\n        } catch (GeneralSecurityException e) {\n            throw new SslConfigException(\"cannot load ssl private key file [\" + key.toAbsolutePath() + \"]\", e);\n        }\n    }\n","date":"2019-01-16 18:52:17","endLine":83,"groupId":"59784","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getPrivateKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dd/091e0a222185670607e5c299d439786f73c8fe.src","preCode":"    private PrivateKey getPrivateKey() {\n        try {\n            final PrivateKey privateKey = PemUtils.readPrivateKey(key, () -> keyPassword);\n            if (privateKey == null) {\n                throw new SslConfigException(\"could not load ssl private key file [\" + key + \"]\");\n            }\n            return privateKey;\n        } catch (FileNotFoundException | NoSuchFileException e) {\n            throw new SslConfigException(\"the configured ssl private key file [\" + key.toAbsolutePath() + \"] does not exist\", e);\n        } catch (IOException e) {\n            throw new SslConfigException(\"the configured ssl private key file [\" + key.toAbsolutePath() + \"] cannot be read\", e);\n        } catch (GeneralSecurityException e) {\n            throw new SslConfigException(\"cannot load ssl private key file [\" + key.toAbsolutePath() + \"]\", e);\n        }\n    }\n","realPath":"libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/PemKeyConfig.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2019-01-16 18:52:17","commitOrder":1,"curCode":"    private List<Certificate> getCertificates() {\n        try {\n            return PemUtils.readCertificates(Collections.singleton(certificate));\n        } catch (FileNotFoundException | NoSuchFileException e) {\n            throw new SslConfigException(\"the configured ssl certificate file [\" + certificate.toAbsolutePath() + \"] does not exist\", e);\n        } catch (IOException e) {\n            throw new SslConfigException(\"the configured ssl certificate file [\" + certificate .toAbsolutePath()+ \"] cannot be read\", e);\n        } catch (GeneralSecurityException e) {\n            throw new SslConfigException(\"cannot load ssl certificate from [\" + certificate.toAbsolutePath() + \"]\", e);\n        }\n    }\n","date":"2019-01-16 18:52:17","endLine":95,"groupId":"59786","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getCertificates","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dd/091e0a222185670607e5c299d439786f73c8fe.src","preCode":"    private List<Certificate> getCertificates() {\n        try {\n            return PemUtils.readCertificates(Collections.singleton(certificate));\n        } catch (FileNotFoundException | NoSuchFileException e) {\n            throw new SslConfigException(\"the configured ssl certificate file [\" + certificate.toAbsolutePath() + \"] does not exist\", e);\n        } catch (IOException e) {\n            throw new SslConfigException(\"the configured ssl certificate file [\" + certificate .toAbsolutePath()+ \"] cannot be read\", e);\n        } catch (GeneralSecurityException e) {\n            throw new SslConfigException(\"cannot load ssl certificate from [\" + certificate.toAbsolutePath() + \"]\", e);\n        }\n    }\n","realPath":"libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/PemKeyConfig.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"}],"commitId":"6d99e790b3ee78f99f4810ff79b38488e43a146d","commitMessage":"@@@Add SSL Configuration Library (#37287)\n\nThis introduces a new ssl-config library that can parse\nand validate SSL/TLS settings and files.\n\nIt supports the standard configuration settings as used in the\nElastic Stack such as \"ssl.verification_mode\" and\n\"ssl.certificate_authorities\" as well as all file formats used\nin other parts of Elasticsearch security (such as PEM.  JKS. \nPKCS#12.  PKCS#8.  et al).\n\n","date":"2019-01-16 18:52:17","modifiedFileCount":"0","status":"B","submitter":"Tim Vernum"},{"authorTime":"2021-07-15 17:46:00","codes":[{"authorDate":"2021-07-15 17:46:00","commitOrder":2,"curCode":"    private PrivateKey getPrivateKey(Path path) {\n        try {\n            final PrivateKey privateKey = PemUtils.parsePrivateKey(path, () -> keyPassword);\n            if (privateKey == null) {\n                throw new SslConfigException(\"could not load ssl private key file [\" + path + \"]\");\n            }\n            return privateKey;\n        } catch (AccessControlException e) {\n            throw SslFileUtil.accessControlFailure(KEY_FILE_TYPE, List.of(path), e, configBasePath);\n        } catch (IOException e) {\n            throw SslFileUtil.ioException(KEY_FILE_TYPE, List.of(path), e);\n        } catch (GeneralSecurityException e) {\n            throw SslFileUtil.securityException(KEY_FILE_TYPE, List.of(path), e);\n        }\n    }\n","date":"2021-07-15 17:46:00","endLine":136,"groupId":"101576","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getPrivateKey","params":"(Pathpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/6608f78bd40425b769f5ef27d9b6ebe45a555c.src","preCode":"    private PrivateKey getPrivateKey() {\n        try {\n            final PrivateKey privateKey = PemUtils.readPrivateKey(key, () -> keyPassword);\n            if (privateKey == null) {\n                throw new SslConfigException(\"could not load ssl private key file [\" + key + \"]\");\n            }\n            return privateKey;\n        } catch (FileNotFoundException | NoSuchFileException e) {\n            throw new SslConfigException(\"the configured ssl private key file [\" + key.toAbsolutePath() + \"] does not exist\", e);\n        } catch (IOException e) {\n            throw new SslConfigException(\"the configured ssl private key file [\" + key.toAbsolutePath() + \"] cannot be read\", e);\n        } catch (GeneralSecurityException e) {\n            throw new SslConfigException(\"cannot load ssl private key file [\" + key.toAbsolutePath() + \"]\", e);\n        }\n    }\n","realPath":"libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/PemKeyConfig.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2021-07-15 17:46:00","commitOrder":2,"curCode":"    private List<Certificate> getCertificates(Path path) {\n        try {\n            return PemUtils.readCertificates(Collections.singleton(path));\n        } catch (AccessControlException e) {\n            throw SslFileUtil.accessControlFailure(CERT_FILE_TYPE, List.of(path), e, configBasePath);\n        } catch (IOException e) {\n            throw SslFileUtil.ioException(CERT_FILE_TYPE, List.of(path), e);\n        } catch (GeneralSecurityException e) {\n            throw SslFileUtil.securityException(CERT_FILE_TYPE, List.of(path), e);\n        }\n    }\n","date":"2021-07-15 17:46:00","endLine":148,"groupId":"101576","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getCertificates","params":"(Pathpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/6608f78bd40425b769f5ef27d9b6ebe45a555c.src","preCode":"    private List<Certificate> getCertificates() {\n        try {\n            return PemUtils.readCertificates(Collections.singleton(certificate));\n        } catch (FileNotFoundException | NoSuchFileException e) {\n            throw new SslConfigException(\"the configured ssl certificate file [\" + certificate.toAbsolutePath() + \"] does not exist\", e);\n        } catch (IOException e) {\n            throw new SslConfigException(\"the configured ssl certificate file [\" + certificate .toAbsolutePath()+ \"] cannot be read\", e);\n        } catch (GeneralSecurityException e) {\n            throw new SslConfigException(\"cannot load ssl certificate from [\" + certificate.toAbsolutePath() + \"]\", e);\n        }\n    }\n","realPath":"libs/ssl-config/src/main/java/org/elasticsearch/common/ssl/PemKeyConfig.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"940a890958f10d3a0abb5f7e638605357fe1e3fb","commitMessage":"@@@Update \"ssl-config\" to support X-Pack features (#74887)\n\nThis commit upgrades the existing SSPL licensed \"ssl-config\" library\nto include additional features that are supported by the X-Pack SSL\nlibrary.\n\nThis commit does not make any changes to X-Pack to use these new\nfeatures - it introduces them in preparation for their future use by\nX-Pack.\n\nThe reindex module is updated to reflect API changes in ssl-config","date":"2021-07-15 17:46:00","modifiedFileCount":"23","status":"M","submitter":"Tim Vernum"}]
