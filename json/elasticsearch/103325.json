[{"authorTime":"2019-05-23 16:10:07","codes":[{"authorDate":"2019-05-23 16:10:07","commitOrder":1,"curCode":"    private void assertQueryWithAllFieldsWildcard(Query query) {\n        assertEquals(DisjunctionMaxQuery.class, query.getClass());\n        DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query;\n        int noMatchNoDocsQueries = 0;\n        for (Query q : disjunctionMaxQuery.getDisjuncts()) {\n            if (q.getClass() == MatchNoDocsQuery.class) {\n                noMatchNoDocsQueries++;\n            }\n        }\n        assertEquals(11, noMatchNoDocsQueries);\n        assertThat(disjunctionMaxQuery.getDisjuncts(), hasItems(new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n            new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\"))));\n    }\n","date":"2019-05-23 16:10:07","endLine":580,"groupId":"46324","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertQueryWithAllFieldsWildcard","params":"(Queryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/65/90a5609353a9dc05e8a3ddc610f0d83e7fcf77.src","preCode":"    private void assertQueryWithAllFieldsWildcard(Query query) {\n        assertEquals(DisjunctionMaxQuery.class, query.getClass());\n        DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query;\n        int noMatchNoDocsQueries = 0;\n        for (Query q : disjunctionMaxQuery.getDisjuncts()) {\n            if (q.getClass() == MatchNoDocsQuery.class) {\n                noMatchNoDocsQueries++;\n            }\n        }\n        assertEquals(11, noMatchNoDocsQueries);\n        assertThat(disjunctionMaxQuery.getDisjuncts(), hasItems(new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n            new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\"))));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"B"},{"authorDate":"2019-05-23 16:10:07","commitOrder":1,"curCode":"    private void assertQueryWithAllFieldsWildcard(Query query) {\n        assertEquals(DisjunctionMaxQuery.class, query.getClass());\n        DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query;\n        int noMatchNoDocsQueries = 0;\n        for (Query q : disjunctionMaxQuery.getDisjuncts()) {\n            if (q.getClass() == MatchNoDocsQuery.class) {\n                noMatchNoDocsQueries++;\n            }\n        }\n        assertEquals(11, noMatchNoDocsQueries);\n        assertThat(disjunctionMaxQuery.getDisjuncts(), hasItems(new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n            new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\"))));\n    }\n","date":"2019-05-23 16:10:07","endLine":1560,"groupId":"46324","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertQueryWithAllFieldsWildcard","params":"(Queryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ee/4e0f95404510f555799a57b7660ba380d38493.src","preCode":"    private void assertQueryWithAllFieldsWildcard(Query query) {\n        assertEquals(DisjunctionMaxQuery.class, query.getClass());\n        DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query;\n        int noMatchNoDocsQueries = 0;\n        for (Query q : disjunctionMaxQuery.getDisjuncts()) {\n            if (q.getClass() == MatchNoDocsQuery.class) {\n                noMatchNoDocsQueries++;\n            }\n        }\n        assertEquals(11, noMatchNoDocsQueries);\n        assertThat(disjunctionMaxQuery.getDisjuncts(), hasItems(new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n            new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\"))));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1548,"status":"B"}],"commitId":"e75ff0c748e6b68232c2b08e19ac4a4934918264","commitMessage":"@@@Allow `fields` to be set to `*` (#42301)\n\nAllow for SimpleQueryString.  QueryString and MultiMatchQuery\nto set the `fields` parameter to the wildcard `*`. If so.  set\nthe leniency to `true`.  to achieve the same behaviour as from the\n`\"default_field\" : \"*\" setting.\n\nFurthermore.   check if `*` is in the list of the `default_field` but\nnot necessarily as the 1st element.\n\nCloses: #39577\n","date":"2019-05-23 16:10:07","modifiedFileCount":"7","status":"B","submitter":"Marios Trivyzas"},{"authorTime":"2019-06-05 14:47:33","codes":[{"authorDate":"2019-06-05 14:47:33","commitOrder":2,"curCode":"    private void assertQueryWithAllFieldsWildcard(Query query) {\n        assertEquals(DisjunctionMaxQuery.class, query.getClass());\n        DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query;\n        int noMatchNoDocsQueries = 0;\n        for (Query q : disjunctionMaxQuery.getDisjuncts()) {\n            if (q.getClass() == MatchNoDocsQuery.class) {\n                noMatchNoDocsQueries++;\n            }\n        }\n        assertEquals(9, noMatchNoDocsQueries);\n        assertThat(disjunctionMaxQuery.getDisjuncts(), hasItems(new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n            new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\"))));\n    }\n","date":"2019-06-05 14:47:33","endLine":557,"groupId":"46324","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertQueryWithAllFieldsWildcard","params":"(Queryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/810d6686c4be97de2039963ad0e18e6ad64cb7.src","preCode":"    private void assertQueryWithAllFieldsWildcard(Query query) {\n        assertEquals(DisjunctionMaxQuery.class, query.getClass());\n        DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query;\n        int noMatchNoDocsQueries = 0;\n        for (Query q : disjunctionMaxQuery.getDisjuncts()) {\n            if (q.getClass() == MatchNoDocsQuery.class) {\n                noMatchNoDocsQueries++;\n            }\n        }\n        assertEquals(11, noMatchNoDocsQueries);\n        assertThat(disjunctionMaxQuery.getDisjuncts(), hasItems(new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n            new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\"))));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"M"},{"authorDate":"2019-06-05 14:47:33","commitOrder":2,"curCode":"    private void assertQueryWithAllFieldsWildcard(Query query) {\n        assertEquals(DisjunctionMaxQuery.class, query.getClass());\n        DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query;\n        int noMatchNoDocsQueries = 0;\n        for (Query q : disjunctionMaxQuery.getDisjuncts()) {\n            if (q.getClass() == MatchNoDocsQuery.class) {\n                noMatchNoDocsQueries++;\n            }\n        }\n        assertEquals(9, noMatchNoDocsQueries);\n        assertThat(disjunctionMaxQuery.getDisjuncts(), hasItems(new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n            new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\"))));\n    }\n","date":"2019-06-05 14:47:33","endLine":1571,"groupId":"46324","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertQueryWithAllFieldsWildcard","params":"(Queryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/94/6fb6a0ff5d16db02d3d0cbe5bb9924cd3e080d.src","preCode":"    private void assertQueryWithAllFieldsWildcard(Query query) {\n        assertEquals(DisjunctionMaxQuery.class, query.getClass());\n        DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query;\n        int noMatchNoDocsQueries = 0;\n        for (Query q : disjunctionMaxQuery.getDisjuncts()) {\n            if (q.getClass() == MatchNoDocsQuery.class) {\n                noMatchNoDocsQueries++;\n            }\n        }\n        assertEquals(11, noMatchNoDocsQueries);\n        assertThat(disjunctionMaxQuery.getDisjuncts(), hasItems(new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n            new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\"))));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1559,"status":"M"}],"commitId":"3cfa4a6aa86499f57d72a7aca0a4440e48523e92","commitMessage":"@@@Deduplicate alias and concrete fields in query field expansion (#42328)\n\nThe full-text query parsers accept field pattern that are expanded using the mapping.\nAlias field are also detected during the expansion but they are not deduplicated with the\nconcrete fields that are found from other patterns (or the same). This change ensures\nthat we deduplicate the target fields of the full-text query parsers in order to avoid\nadding the same clause multiple times. Boolean queries are already able to deduplicate\nclauses during rewrite but since we also use DisjunctionMaxQuery it is preferable to detect\n these duplicates early on.\n","date":"2019-06-05 14:47:33","modifiedFileCount":"5","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-04-03 22:00:46","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":3,"curCode":"    private void assertQueryWithAllFieldsWildcard(Query query) {\n        assertEquals(DisjunctionMaxQuery.class, query.getClass());\n        DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query;\n        int noMatchNoDocsQueries = 0;\n        for (Query q : disjunctionMaxQuery.getDisjuncts()) {\n            if (q.getClass() == MatchNoDocsQuery.class) {\n                noMatchNoDocsQueries++;\n            }\n        }\n        assertEquals(9, noMatchNoDocsQueries);\n        assertThat(disjunctionMaxQuery.getDisjuncts(), hasItems(new TermQuery(new Term(TEXT_FIELD_NAME, \"hello\")),\n            new TermQuery(new Term(KEYWORD_FIELD_NAME, \"hello\"))));\n    }\n","date":"2020-04-03 22:00:46","endLine":551,"groupId":"103325","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertQueryWithAllFieldsWildcard","params":"(Queryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4b/227541b3a9d022dfdc905e2b00e19d548e5786.src","preCode":"    private void assertQueryWithAllFieldsWildcard(Query query) {\n        assertEquals(DisjunctionMaxQuery.class, query.getClass());\n        DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query;\n        int noMatchNoDocsQueries = 0;\n        for (Query q : disjunctionMaxQuery.getDisjuncts()) {\n            if (q.getClass() == MatchNoDocsQuery.class) {\n                noMatchNoDocsQueries++;\n            }\n        }\n        assertEquals(9, noMatchNoDocsQueries);\n        assertThat(disjunctionMaxQuery.getDisjuncts(), hasItems(new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n            new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\"))));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"M"},{"authorDate":"2020-04-03 22:00:46","commitOrder":3,"curCode":"    private void assertQueryWithAllFieldsWildcard(Query query) {\n        assertEquals(DisjunctionMaxQuery.class, query.getClass());\n        DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query;\n        int noMatchNoDocsQueries = 0;\n        for (Query q : disjunctionMaxQuery.getDisjuncts()) {\n            if (q.getClass() == MatchNoDocsQuery.class) {\n                noMatchNoDocsQueries++;\n            }\n        }\n        assertEquals(9, noMatchNoDocsQueries);\n        assertThat(disjunctionMaxQuery.getDisjuncts(), hasItems(new TermQuery(new Term(TEXT_FIELD_NAME, \"hello\")),\n            new TermQuery(new Term(KEYWORD_FIELD_NAME, \"hello\"))));\n    }\n","date":"2020-04-03 22:00:46","endLine":1546,"groupId":"103325","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertQueryWithAllFieldsWildcard","params":"(Queryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/7bce5edab3d92a09f5d9650631122009f57a11.src","preCode":"    private void assertQueryWithAllFieldsWildcard(Query query) {\n        assertEquals(DisjunctionMaxQuery.class, query.getClass());\n        DisjunctionMaxQuery disjunctionMaxQuery = (DisjunctionMaxQuery) query;\n        int noMatchNoDocsQueries = 0;\n        for (Query q : disjunctionMaxQuery.getDisjuncts()) {\n            if (q.getClass() == MatchNoDocsQuery.class) {\n                noMatchNoDocsQueries++;\n            }\n        }\n        assertEquals(9, noMatchNoDocsQueries);\n        assertThat(disjunctionMaxQuery.getDisjuncts(), hasItems(new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n            new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\"))));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1534,"status":"M"}],"commitId":"f5759bb2092f1a957e79626c872c3f5707c1ee04","commitMessage":"@@@Rename field name constants in AbstractBuilderTestCase (#53234)\n\nSome field name constants were not updaten when we moved from \"string\" to \"text\"\nand \"keyword\" fields. Renaming them makes it easier and faster to know which\nfield type is used in test subclassing this base test case.","date":"2020-04-03 22:00:46","modifiedFileCount":"34","status":"M","submitter":"Christoph B?scher"}]
