[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.DoubleComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDoubleValues values = getValues(context);\n                final NumericDoubleValues selectedValues;\n                if (nested == null) {\n                    selectedValues = sortMode.select(values, dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues.getRawDoubleValues();\n            }\n            @Override\n            public void setScorer(Scorer scorer) {\n                DoubleValuesComparatorSource.this.setScorer(scorer);\n            }\n        };\n    }\n","date":"2018-04-26 03:22:53","endLine":87,"groupId":"39","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/8d903a390b302b15bf185c578942ff844daf5a.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.DoubleComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDoubleValues values = getValues(context);\n                final NumericDoubleValues selectedValues;\n                if (nested == null) {\n                    selectedValues = sortMode.select(values, dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues.getRawDoubleValues();\n            }\n            @Override\n            public void setScorer(Scorer scorer) {\n                DoubleValuesComparatorSource.this.setScorer(scorer);\n            }\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/DoubleValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final Long dMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.LongComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDocValues values = indexFieldData.load(context).getLongValues();\n                final NumericDocValues selectedValues;\n                if (nested == null) {\n                    selectedValues = sortMode.select(values, dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues;\n            }\n\n        };\n    }\n","date":"2018-04-26 03:22:53","endLine":75,"groupId":"9354","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/206fe1baebe2c6a1a7d1e4239f1ddb013ac87d.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final Long dMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.LongComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDocValues values = indexFieldData.load(context).getLongValues();\n                final NumericDocValues selectedValues;\n                if (nested == null) {\n                    selectedValues = sortMode.select(values, dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues;\n            }\n\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/LongValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-06-05 23:09:02","codes":[{"authorDate":"2018-06-05 23:09:02","commitOrder":2,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.DoubleComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDoubleValues values = getValues(context);\n                final NumericDoubleValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues.getRawDoubleValues();\n            }\n            @Override\n            public void setScorer(Scorer scorer) {\n                DoubleValuesComparatorSource.this.setScorer(scorer);\n            }\n        };\n    }\n","date":"2018-06-05 23:09:02","endLine":88,"groupId":"39","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/43/bc19a12a384ce2fb9cfd7186bb66d125591104.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.DoubleComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDoubleValues values = getValues(context);\n                final NumericDoubleValues selectedValues;\n                if (nested == null) {\n                    selectedValues = sortMode.select(values, dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues.getRawDoubleValues();\n            }\n            @Override\n            public void setScorer(Scorer scorer) {\n                DoubleValuesComparatorSource.this.setScorer(scorer);\n            }\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/DoubleValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2018-06-05 23:09:02","commitOrder":2,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final Long dMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.LongComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDocValues values = indexFieldData.load(context).getLongValues();\n                final NumericDocValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues;\n            }\n\n        };\n    }\n","date":"2018-06-05 23:09:02","endLine":76,"groupId":"9354","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/2dde609968091ae39e8de3a028a2974d204943.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final Long dMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.LongComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDocValues values = indexFieldData.load(context).getLongValues();\n                final NumericDocValues selectedValues;\n                if (nested == null) {\n                    selectedValues = sortMode.select(values, dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues;\n            }\n\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/LongValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"6b0008c6686c700c9a9e7afbaf1e5edb8b2fa282","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-05 23:09:02","modifiedFileCount":"58","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-06-05 23:09:02","codes":[{"authorDate":"2018-09-11 04:30:44","commitOrder":3,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.DoubleComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDoubleValues values = getValues(context);\n                final NumericDoubleValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues.getRawDoubleValues();\n            }\n            @Override\n            public void setScorer(Scorable scorer) {\n                DoubleValuesComparatorSource.this.setScorer(scorer);\n            }\n        };\n    }\n","date":"2018-09-11 04:30:44","endLine":88,"groupId":"39","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/e3fb692ec61b13d47d238e94f54aa0761d8e30.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.DoubleComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDoubleValues values = getValues(context);\n                final NumericDoubleValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues.getRawDoubleValues();\n            }\n            @Override\n            public void setScorer(Scorer scorer) {\n                DoubleValuesComparatorSource.this.setScorer(scorer);\n            }\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/DoubleValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2018-06-05 23:09:02","commitOrder":3,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final Long dMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.LongComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDocValues values = indexFieldData.load(context).getLongValues();\n                final NumericDocValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues;\n            }\n\n        };\n    }\n","date":"2018-06-05 23:09:02","endLine":76,"groupId":"9354","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/2dde609968091ae39e8de3a028a2974d204943.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final Long dMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.LongComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDocValues values = indexFieldData.load(context).getLongValues();\n                final NumericDocValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues;\n            }\n\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/LongValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"}],"commitId":"cdc4f57a773b588fe872f247ee62c3d5539e2faa","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-11 04:30:44","modifiedFileCount":"186","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-10-15 23:03:37","codes":[{"authorDate":"2018-10-15 23:03:37","commitOrder":4,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.DoubleComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDoubleValues values = getValues(context);\n                final NumericDoubleValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE;\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc(), maxChildren);\n                }\n                return selectedValues.getRawDoubleValues();\n            }\n            @Override\n            public void setScorer(Scorable scorer) {\n                DoubleValuesComparatorSource.this.setScorer(scorer);\n            }\n        };\n    }\n","date":"2018-10-15 23:03:37","endLine":89,"groupId":"39","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/273d88380eb13e3b276bc674c82b86da0e4461.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.DoubleComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDoubleValues values = getValues(context);\n                final NumericDoubleValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues.getRawDoubleValues();\n            }\n            @Override\n            public void setScorer(Scorable scorer) {\n                DoubleValuesComparatorSource.this.setScorer(scorer);\n            }\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/DoubleValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2018-10-15 23:03:37","commitOrder":4,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final Long dMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.LongComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDocValues values = indexFieldData.load(context).getLongValues();\n                final NumericDocValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE;\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc(), maxChildren);\n                }\n                return selectedValues;\n            }\n\n        };\n    }\n","date":"2018-10-15 23:03:37","endLine":77,"groupId":"9354","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f3/23709e8f5ee908bef588cfec141d377159c453.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final Long dMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.LongComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDocValues values = indexFieldData.load(context).getLongValues();\n                final NumericDocValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc());\n                }\n                return selectedValues;\n            }\n\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/LongValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"0b42eda0e360d17975460a0d1efd0c6e6b494ca5","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-10-15 23:03:37","modifiedFileCount":"331","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2019-03-20 03:17:31","codes":[{"authorDate":"2018-10-15 23:03:37","commitOrder":5,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.DoubleComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDoubleValues values = getValues(context);\n                final NumericDoubleValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE;\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc(), maxChildren);\n                }\n                return selectedValues.getRawDoubleValues();\n            }\n            @Override\n            public void setScorer(Scorable scorer) {\n                DoubleValuesComparatorSource.this.setScorer(scorer);\n            }\n        };\n    }\n","date":"2018-10-15 23:03:37","endLine":89,"groupId":"39","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/273d88380eb13e3b276bc674c82b86da0e4461.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.DoubleComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDoubleValues values = getValues(context);\n                final NumericDoubleValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE;\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc(), maxChildren);\n                }\n                return selectedValues.getRawDoubleValues();\n            }\n            @Override\n            public void setScorer(Scorable scorer) {\n                DoubleValuesComparatorSource.this.setScorer(scorer);\n            }\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/DoubleValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2019-03-20 03:17:31","commitOrder":5,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final Long dMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.LongComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDocValues values = loadDocValues(context);\n                final NumericDocValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE;\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc(), maxChildren);\n                }\n                return selectedValues;\n            }\n\n        };\n    }\n","date":"2019-03-20 03:17:31","endLine":100,"groupId":"39","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/15/7c11e74cba83a33c0666e329b9d95095370457.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final Long dMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.LongComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDocValues values = indexFieldData.load(context).getLongValues();\n                final NumericDocValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE;\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc(), maxChildren);\n                }\n                return selectedValues;\n            }\n\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/LongValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"d234ef7612086cbbef4719efd89d0dd61d8f371a","commitMessage":"@@@Add date and date_nanos conversion to the numeric_type sort option (#40199)\n\nThis change adds an option to convert a `date` field to nanoseconds resolution\n and a `date_nanos` field to millisecond resolution when sorting.\nThe resolution of the sort can be set using the `numeric_type` option of the\nfield sort builder. The conversion is done at the shard level and is restricted\nto dates from 1970 to 2262 for the nanoseconds resolution in order to avoid\nnumeric overflow.\n","date":"2019-03-20 03:17:31","modifiedFileCount":"8","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-02-14 20:13:52","codes":[{"authorDate":"2020-02-14 20:13:52","commitOrder":6,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.DoubleComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                return DoubleValuesComparatorSource.this.getNumericDocValues(context, dMissingValue).getRawDoubleValues();\n            }\n            @Override\n            public void setScorer(Scorable scorer) {\n                DoubleValuesComparatorSource.this.setScorer(scorer);\n            }\n        };\n    }\n","date":"2020-02-14 20:13:52","endLine":96,"groupId":"39","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/ff4a057f0435445740f3b97e4b21ae58e266e5.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.DoubleComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDoubleValues values = getValues(context);\n                final NumericDoubleValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE;\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc(), maxChildren);\n                }\n                return selectedValues.getRawDoubleValues();\n            }\n            @Override\n            public void setScorer(Scorable scorer) {\n                DoubleValuesComparatorSource.this.setScorer(scorer);\n            }\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/DoubleValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-02-14 20:13:52","commitOrder":6,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final long lMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.LongComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                return LongValuesComparatorSource.this.getNumericDocValues(context, lMissingValue);\n            }\n        };\n    }\n","date":"2020-02-14 20:13:52","endLine":104,"groupId":"56945","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/90b3b861bf7f633d1093136095791bd137330c.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final Long dMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.LongComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                final SortedNumericDocValues values = loadDocValues(context);\n                final NumericDocValues selectedValues;\n                if (nested == null) {\n                    selectedValues = FieldData.replaceMissing(sortMode.select(values), dMissingValue);\n                } else {\n                    final BitSet rootDocs = nested.rootDocs(context);\n                    final DocIdSetIterator innerDocs = nested.innerDocs(context);\n                    final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE;\n                    selectedValues = sortMode.select(values, dMissingValue, rootDocs, innerDocs, context.reader().maxDoc(), maxChildren);\n                }\n                return selectedValues;\n            }\n\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/LongValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"5b2266601bea9de8082891ee4fcdf5171c1a9084","commitMessage":"@@@Implement top_metrics agg (#51155)\n\nThe `top_metrics` agg is kind of like `top_hits` but it only works on\ndoc values so it *should* be faster.\n\nAt this point it is fairly limited in that it only supports a single. \nnumeric sort and a single.  numeric metric. And it only fetches the \"very\ntopest\" document worth of metric. We plan to support returning a\nconfigurable number of top metrics.  requesting more than one metric and\nmore than one sort. And.  eventually.  non-numeric sorts and metrics. The\ntrick is doing those things fairly efficiently.\n\nCo-Authored by: Zachary Tong <zach@elastic.co>\n","date":"2020-02-14 20:13:52","modifiedFileCount":"38","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-09-18 13:53:38","codes":[{"authorDate":"2020-09-18 13:53:38","commitOrder":7,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new DoubleComparator(numHits, null, null, reversed, sortPos) {\n            @Override\n            public LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n                return new DoubleLeafComparator(context) {\n                    @Override\n                    protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                        return DoubleValuesComparatorSource.this.getNumericDocValues(context, dMissingValue).getRawDoubleValues();\n                    }\n\n                    @Override\n                    public void setScorer(Scorable scorer) {\n                        DoubleValuesComparatorSource.this.setScorer(scorer);\n                    }\n                };\n            }\n        };\n    }\n","date":"2020-09-18 13:53:38","endLine":104,"groupId":"107952","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/09/e4f6e060b85dcdccf7e37d2ec38cdb44dc5e83.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final double dMissingValue = (Double) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.DoubleComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                return DoubleValuesComparatorSource.this.getNumericDocValues(context, dMissingValue).getRawDoubleValues();\n            }\n            @Override\n            public void setScorer(Scorable scorer) {\n                DoubleValuesComparatorSource.this.setScorer(scorer);\n            }\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/DoubleValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-09-18 13:53:38","commitOrder":7,"curCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final long lMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new LongComparator(numHits, null, null, reversed, sortPos) {\n            @Override\n            public LeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {\n                return new LongLeafComparator(context) {\n                    @Override\n                    protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                        return LongValuesComparatorSource.this.getNumericDocValues(context, lMissingValue);\n                    }\n                };\n            }\n        };\n    }\n","date":"2020-09-18 13:53:38","endLine":111,"groupId":"107952","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"newComparator","params":"(Stringfieldname@intnumHits@intsortPos@booleanreversed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/843c6db56bd645a6422cb486f804015b5b3b8f.src","preCode":"    public FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed) {\n        assert indexFieldData == null || fieldname.equals(indexFieldData.getFieldName());\n\n        final long lMissingValue = (Long) missingObject(missingValue, reversed);\n        \r\n        \r\n        return new FieldComparator.LongComparator(numHits, null, null) {\n            @Override\n            protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {\n                return LongValuesComparatorSource.this.getNumericDocValues(context, lMissingValue);\n            }\n        };\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/fielddata/fieldcomparator/LongValuesComparatorSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"b33dc24a79dfc1347c63d6040cc7784587840442","commitMessage":"@@@Upgrade to lucene-8.7.0-snapshot-830bd186a8d. (#62576)\n\n","date":"2020-09-18 13:53:38","modifiedFileCount":"6","status":"M","submitter":"Adrien Grand"}]
