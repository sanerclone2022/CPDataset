[{"authorTime":"2019-12-19 01:27:16","codes":[{"authorDate":"2019-12-19 01:27:16","commitOrder":1,"curCode":"    public void testDeterministic() {\n        FactoryTestScript.Factory factory =\n            scriptEngine.compile(\"deterministic_test\", \"Integer.parseInt('123')\",\n                FactoryTestScript.CONTEXT, Collections.emptyMap());\n        assertTrue(factory.isResultDeterministic());\n        assertEquals(123, factory.newInstance(Collections.emptyMap()).execute(0));\n    }\n","date":"2019-12-19 01:27:16","endLine":171,"groupId":"31172","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeterministic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/645e24c0b3ce2dd196a41225fd070882101043.src","preCode":"    public void testDeterministic() {\n        FactoryTestScript.Factory factory =\n            scriptEngine.compile(\"deterministic_test\", \"Integer.parseInt('123')\",\n                FactoryTestScript.CONTEXT, Collections.emptyMap());\n        assertTrue(factory.isResultDeterministic());\n        assertEquals(123, factory.newInstance(Collections.emptyMap()).execute(0));\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/FactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"B"},{"authorDate":"2019-12-19 01:27:16","commitOrder":1,"curCode":"    public void testMixedDeterministicIsNotDeterministic() {\n        FactoryTestScript.Factory factory =\n            scriptEngine.compile(\"not_deterministic_test\", \"Integer.parseInt('123') + Math.random()\",\n                FactoryTestScript.CONTEXT, Collections.emptyMap());\n        assertFalse(factory.isResultDeterministic());\n        Double d = (Double)factory.newInstance(Collections.emptyMap()).execute(0);\n        assertTrue(d >= 123.0 && d <= 124.0);\n    }\n","date":"2019-12-19 01:27:16","endLine":189,"groupId":"31172","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMixedDeterministicIsNotDeterministic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/645e24c0b3ce2dd196a41225fd070882101043.src","preCode":"    public void testMixedDeterministicIsNotDeterministic() {\n        FactoryTestScript.Factory factory =\n            scriptEngine.compile(\"not_deterministic_test\", \"Integer.parseInt('123') + Math.random()\",\n                FactoryTestScript.CONTEXT, Collections.emptyMap());\n        assertFalse(factory.isResultDeterministic());\n        Double d = (Double)factory.newInstance(Collections.emptyMap()).execute(0);\n        assertTrue(d >= 123.0 && d <= 124.0);\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/FactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"B"}],"commitId":"779462596b2914307b05284d2f577f13f8eb1eff","commitMessage":"@@@Scripting: Cache script results if deterministic (#50106)\n\nCache results from queries that use scripts if they use only\ndeterministic API calls.  Nondeterministic API calls are marked in the\nwhitelist with the `@nondeterministic` annotation.  Examples are\n`Math.random()` and `new Date()`.\n\nRefs: #49466","date":"2019-12-19 01:27:16","modifiedFileCount":"45","status":"B","submitter":"Stuart Tettemer"},{"authorTime":"2019-12-20 01:14:28","codes":[{"authorDate":"2019-12-20 01:14:28","commitOrder":2,"curCode":"    public void testDeterministic() {\n        DeterministicFactoryTestScript.Factory factory =\n            scriptEngine.compile(\"deterministic_test\", \"Integer.parseInt('123')\",\n                DeterministicFactoryTestScript.CONTEXT, Collections.emptyMap());\n        assertTrue(factory.isResultDeterministic());\n        assertEquals(123, factory.newInstance(Collections.emptyMap()).execute(0));\n    }\n","date":"2019-12-20 01:14:28","endLine":197,"groupId":"10988","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeterministic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/d4df43c90705ffa412320caadce447a36a53b2.src","preCode":"    public void testDeterministic() {\n        FactoryTestScript.Factory factory =\n            scriptEngine.compile(\"deterministic_test\", \"Integer.parseInt('123')\",\n                FactoryTestScript.CONTEXT, Collections.emptyMap());\n        assertTrue(factory.isResultDeterministic());\n        assertEquals(123, factory.newInstance(Collections.emptyMap()).execute(0));\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/FactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2019-12-20 01:14:28","commitOrder":2,"curCode":"    public void testMixedDeterministicIsNotDeterministic() {\n        DeterministicFactoryTestScript.Factory factory =\n            scriptEngine.compile(\"not_deterministic_test\", \"Integer.parseInt('123') + Math.random()\",\n                DeterministicFactoryTestScript.CONTEXT, Collections.emptyMap());\n        assertFalse(factory.isResultDeterministic());\n        Double d = (Double)factory.newInstance(Collections.emptyMap()).execute(0);\n        assertTrue(d >= 123.0 && d <= 124.0);\n    }\n","date":"2019-12-20 01:14:28","endLine":215,"groupId":"10988","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMixedDeterministicIsNotDeterministic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/d4df43c90705ffa412320caadce447a36a53b2.src","preCode":"    public void testMixedDeterministicIsNotDeterministic() {\n        FactoryTestScript.Factory factory =\n            scriptEngine.compile(\"not_deterministic_test\", \"Integer.parseInt('123') + Math.random()\",\n                FactoryTestScript.CONTEXT, Collections.emptyMap());\n        assertFalse(factory.isResultDeterministic());\n        Double d = (Double)factory.newInstance(Collections.emptyMap()).execute(0);\n        assertTrue(d >= 123.0 && d <= 124.0);\n    }\n","realPath":"modules/lang-painless/src/test/java/org/elasticsearch/painless/FactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"}],"commitId":"cd721b638658db2eada162444ece45b8eef773fc","commitMessage":"@@@Scripting: ScriptFactory not required by compile (#50344)\n\nAvoid backwards incompatible changes for 8.x and 7.6 by removing type\nrestriction on compile and Factory.  Factories may optionally implement\nScriptFactory.  If so.  then they can indicate determinism and thus\ncacheability.\n\nRelates: #49466\n","date":"2019-12-20 01:14:28","modifiedFileCount":"33","status":"M","submitter":"Stuart Tettemer"}]
