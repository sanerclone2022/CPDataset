[{"authorTime":"2018-10-18 01:22:23","codes":[{"authorDate":"2018-10-26 01:00:36","commitOrder":2,"curCode":"    public ScoreScript newInstance(final LeafReaderContext leaf) throws IOException {\n        return new ScoreScript(null, null, null) {\n            \r\n            DoubleValues values = source.getValues(leaf, new DoubleValues() {\n                @Override\n                public double doubleValue() throws IOException {\n                    return get_score();\n                }\n\n                @Override\n                public boolean advanceExact(int doc) throws IOException {\n                    return true;\n                }\n            });\n\n            @Override\n            public double execute() {\n                try {\n                    return values.doubleValue();\n                } catch (Exception exception) {\n                    throw new GeneralScriptException(\"Error evaluating \" + exprScript, exception);\n                }\n            }\n\n            @Override\n            public void setDocument(int d) {\n                try {\n                    values.advanceExact(d);\n                } catch (IOException e) {\n                    throw new IllegalStateException(\"Can't advance to doc using \" + exprScript, e);\n                }\n            }\n        };\n    }\n","date":"2018-10-26 01:00:36","endLine":88,"groupId":"38557","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newInstance","params":"(finalLeafReaderContextleaf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/12/0e8a9cabf7a98f2f46c0a969ad791bda9d7b05.src","preCode":"    public ScoreScript newInstance(final LeafReaderContext leaf) throws IOException {\n        return new ScoreScript(null, null, null) {\n            \r\n            DoubleValues values = source.getValues(leaf, new DoubleValues() {\n                @Override\n                public double doubleValue() throws IOException {\n                    return get_score();\n                }\n\n                @Override\n                public boolean advanceExact(int doc) throws IOException {\n                    return true;\n                }\n            });\n\n            @Override\n            public double execute() {\n                try {\n                    return values.doubleValue();\n                } catch (Exception exception) {\n                    throw new GeneralScriptException(\"Error evaluating \" + exprScript, exception);\n                }\n            }\n\n            @Override\n            public void setDocument(int d) {\n                try {\n                    values.advanceExact(d);\n                } catch (IOException e) {\n                    throw new IllegalStateException(\"Can't advance to doc using \" + exprScript, e);\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScoreScript.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"},{"authorDate":"2018-10-18 01:22:23","commitOrder":2,"curCode":"    public NumberSortScript newInstance(final LeafReaderContext leaf) throws IOException {\n        return new NumberSortScript() {\n            \r\n            DoubleValues values = source.getValues(leaf, new DoubleValues() {\n                @Override\n                public double doubleValue() {\n                    return 0.0D;\n                }\n\n                @Override\n                public boolean advanceExact(int doc) {\n                    return true;\n                }\n            });\n\n            @Override\n            public double execute() {\n                try {\n                    return values.doubleValue();\n                } catch (Exception exception) {\n                    throw new GeneralScriptException(\"Error evaluating \" + exprScript, exception);\n                }\n            }\n\n            @Override\n            public void setDocument(int d) {\n                try {\n                    values.advanceExact(d);\n                } catch (IOException e) {\n                    throw new IllegalStateException(\"Can't advance to doc using \" + exprScript, e);\n                }\n            }\n        };\n    }\n","date":"2018-10-18 01:22:23","endLine":84,"groupId":"38557","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newInstance","params":"(finalLeafReaderContextleaf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4a/7bbc6182e2a4c459b06a4d4c55fe34ff76c9c3.src","preCode":"    public NumberSortScript newInstance(final LeafReaderContext leaf) throws IOException {\n        return new NumberSortScript() {\n            \r\n            DoubleValues values = source.getValues(leaf, new DoubleValues() {\n                @Override\n                public double doubleValue() {\n                    return 0.0D;\n                }\n\n                @Override\n                public boolean advanceExact(int doc) {\n                    return true;\n                }\n            });\n\n            @Override\n            public double execute() {\n                try {\n                    return values.doubleValue();\n                } catch (Exception exception) {\n                    throw new GeneralScriptException(\"Error evaluating \" + exprScript, exception);\n                }\n            }\n\n            @Override\n            public void setDocument(int d) {\n                try {\n                    values.advanceExact(d);\n                } catch (IOException e) {\n                    throw new IllegalStateException(\"Can't advance to doc using \" + exprScript, e);\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionNumberSortScript.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"NB"}],"commitId":"3e7042832acfffad4de4214ad6491b147f5157b0","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-10-26 01:00:36","modifiedFileCount":"350","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-10-18 01:22:23","codes":[{"authorDate":"2019-10-04 10:35:59","commitOrder":3,"curCode":"    public ScoreScript newInstance(final LeafReaderContext leaf) throws IOException {\n        return new ScoreScript(null, null, null) {\n            \r\n            DoubleValues values = source.getValues(leaf, new DoubleValues() {\n                @Override\n                public double doubleValue() throws IOException {\n                    return get_score();\n                }\n\n                @Override\n                public boolean advanceExact(int doc) throws IOException {\n                    return true;\n                }\n            });\n\n            @Override\n            public double execute(ExplanationHolder explanation) {\n                try {\n                    return values.doubleValue();\n                } catch (Exception exception) {\n                    throw new GeneralScriptException(\"Error evaluating \" + exprScript, exception);\n                }\n            }\n\n            @Override\n            public void setDocument(int d) {\n                try {\n                    values.advanceExact(d);\n                } catch (IOException e) {\n                    throw new IllegalStateException(\"Can't advance to doc using \" + exprScript, e);\n                }\n            }\n        };\n    }\n","date":"2019-10-04 10:35:59","endLine":88,"groupId":"38557","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newInstance","params":"(finalLeafReaderContextleaf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/f4b8ac6f7b44b51d9674a25b502566a74adec0.src","preCode":"    public ScoreScript newInstance(final LeafReaderContext leaf) throws IOException {\n        return new ScoreScript(null, null, null) {\n            \r\n            DoubleValues values = source.getValues(leaf, new DoubleValues() {\n                @Override\n                public double doubleValue() throws IOException {\n                    return get_score();\n                }\n\n                @Override\n                public boolean advanceExact(int doc) throws IOException {\n                    return true;\n                }\n            });\n\n            @Override\n            public double execute() {\n                try {\n                    return values.doubleValue();\n                } catch (Exception exception) {\n                    throw new GeneralScriptException(\"Error evaluating \" + exprScript, exception);\n                }\n            }\n\n            @Override\n            public void setDocument(int d) {\n                try {\n                    values.advanceExact(d);\n                } catch (IOException e) {\n                    throw new IllegalStateException(\"Can't advance to doc using \" + exprScript, e);\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScoreScript.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2018-10-18 01:22:23","commitOrder":3,"curCode":"    public NumberSortScript newInstance(final LeafReaderContext leaf) throws IOException {\n        return new NumberSortScript() {\n            \r\n            DoubleValues values = source.getValues(leaf, new DoubleValues() {\n                @Override\n                public double doubleValue() {\n                    return 0.0D;\n                }\n\n                @Override\n                public boolean advanceExact(int doc) {\n                    return true;\n                }\n            });\n\n            @Override\n            public double execute() {\n                try {\n                    return values.doubleValue();\n                } catch (Exception exception) {\n                    throw new GeneralScriptException(\"Error evaluating \" + exprScript, exception);\n                }\n            }\n\n            @Override\n            public void setDocument(int d) {\n                try {\n                    values.advanceExact(d);\n                } catch (IOException e) {\n                    throw new IllegalStateException(\"Can't advance to doc using \" + exprScript, e);\n                }\n            }\n        };\n    }\n","date":"2018-10-18 01:22:23","endLine":84,"groupId":"38557","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newInstance","params":"(finalLeafReaderContextleaf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4a/7bbc6182e2a4c459b06a4d4c55fe34ff76c9c3.src","preCode":"    public NumberSortScript newInstance(final LeafReaderContext leaf) throws IOException {\n        return new NumberSortScript() {\n            \r\n            DoubleValues values = source.getValues(leaf, new DoubleValues() {\n                @Override\n                public double doubleValue() {\n                    return 0.0D;\n                }\n\n                @Override\n                public boolean advanceExact(int doc) {\n                    return true;\n                }\n            });\n\n            @Override\n            public double execute() {\n                try {\n                    return values.doubleValue();\n                } catch (Exception exception) {\n                    throw new GeneralScriptException(\"Error evaluating \" + exprScript, exception);\n                }\n            }\n\n            @Override\n            public void setDocument(int d) {\n                try {\n                    values.advanceExact(d);\n                } catch (IOException e) {\n                    throw new IllegalStateException(\"Can't advance to doc using \" + exprScript, e);\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionNumberSortScript.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"d8b4556e2dfa48b38baf614e3ac99196be07055c","commitMessage":"@@@Add explanations to script score queries (#46693)\n\nWhile function scores using scripts do allow explanations.  they are only\ncreatable with an expert plugin. This commit improves the situation for\nthe newer script score query by adding the ability to set the\nexplanation from the script itself.\n\nTo set the explanation.  a user would check for `explanation != null` to\nindicate an explanation is needed.  and then call\n`explanation.set(\"some description\")`.\n","date":"2019-10-04 10:35:59","modifiedFileCount":"13","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2021-08-04 23:11:12","codes":[{"authorDate":"2021-08-04 23:11:12","commitOrder":4,"curCode":"    public ScoreScript newInstance(final DocReader reader) throws IOException {\n        \r\n        if (reader instanceof LeafReaderContextSupplier == false) {\n            throw new IllegalStateException(\n                \"Expected LeafReaderContextSupplier when creating expression ExpressionScoreScript instead of [\" + reader + \"]\"\n            );\n        }\n        final LeafReaderContext leaf = ((LeafReaderContextSupplier) reader).getLeafReaderContext();\n\n        return new ScoreScript(null, null, null) {\n            \r\n            DoubleValues values = source.getValues(leaf, new DoubleValues() {\n                @Override\n                public double doubleValue() throws IOException {\n                    return get_score();\n                }\n\n                @Override\n                public boolean advanceExact(int doc) throws IOException {\n                    return true;\n                }\n            });\n\n            @Override\n            public double execute(ExplanationHolder explanation) {\n                try {\n                    return values.doubleValue();\n                } catch (Exception exception) {\n                    throw new GeneralScriptException(\"Error evaluating \" + exprScript, exception);\n                }\n            }\n\n            @Override\n            public void setDocument(int d) {\n                try {\n                    values.advanceExact(d);\n                } catch (IOException e) {\n                    throw new IllegalStateException(\"Can't advance to doc using \" + exprScript, e);\n                }\n            }\n        };\n    }\n","date":"2021-08-04 23:11:12","endLine":87,"groupId":"101391","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"newInstance","params":"(finalDocReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fd/89ccc6405cb77e6332a4d8d1222a7130d811ac.src","preCode":"    public ScoreScript newInstance(final LeafReaderContext leaf) throws IOException {\n        return new ScoreScript(null, null, null) {\n            \r\n            DoubleValues values = source.getValues(leaf, new DoubleValues() {\n                @Override\n                public double doubleValue() throws IOException {\n                    return get_score();\n                }\n\n                @Override\n                public boolean advanceExact(int doc) throws IOException {\n                    return true;\n                }\n            });\n\n            @Override\n            public double execute(ExplanationHolder explanation) {\n                try {\n                    return values.doubleValue();\n                } catch (Exception exception) {\n                    throw new GeneralScriptException(\"Error evaluating \" + exprScript, exception);\n                }\n            }\n\n            @Override\n            public void setDocument(int d) {\n                try {\n                    values.advanceExact(d);\n                } catch (IOException e) {\n                    throw new IllegalStateException(\"Can't advance to doc using \" + exprScript, e);\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScoreScript.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2021-08-04 23:11:12","commitOrder":4,"curCode":"    public NumberSortScript newInstance(final DocReader reader) throws IOException {\n        \r\n        if (reader instanceof LeafReaderContextSupplier == false) {\n            throw new IllegalStateException(\n                \"Expected LeafReaderContextSupplier when creating expression NumberSortScript instead of [\" + reader + \"]\"\n            );\n        }\n        final LeafReaderContext ctx = ((LeafReaderContextSupplier) reader).getLeafReaderContext();\n\n        return new NumberSortScript() {\n            \r\n            DoubleValues values = source.getValues(ctx, new DoubleValues() {\n                @Override\n                public double doubleValue() {\n                    return 0.0D;\n                }\n\n                @Override\n                public boolean advanceExact(int doc) {\n                    return true;\n                }\n            });\n\n            @Override\n            public double execute() {\n                try {\n                    return values.doubleValue();\n                } catch (Exception exception) {\n                    throw new GeneralScriptException(\"Error evaluating \" + exprScript, exception);\n                }\n            }\n\n            @Override\n            public void setDocument(int d) {\n                try {\n                    values.advanceExact(d);\n                } catch (IOException e) {\n                    throw new IllegalStateException(\"Can't advance to doc using \" + exprScript, e);\n                }\n            }\n        };\n    }\n","date":"2021-08-04 23:11:12","endLine":83,"groupId":"101391","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"newInstance","params":"(finalDocReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/50/4a706ceaf28a1982627c6028b21af17b40d377.src","preCode":"    public NumberSortScript newInstance(final LeafReaderContext leaf) throws IOException {\n        return new NumberSortScript() {\n            \r\n            DoubleValues values = source.getValues(leaf, new DoubleValues() {\n                @Override\n                public double doubleValue() {\n                    return 0.0D;\n                }\n\n                @Override\n                public boolean advanceExact(int doc) {\n                    return true;\n                }\n            });\n\n            @Override\n            public double execute() {\n                try {\n                    return values.doubleValue();\n                } catch (Exception exception) {\n                    throw new GeneralScriptException(\"Error evaluating \" + exprScript, exception);\n                }\n            }\n\n            @Override\n            public void setDocument(int d) {\n                try {\n                    values.advanceExact(d);\n                } catch (IOException e) {\n                    throw new IllegalStateException(\"Can't advance to doc using \" + exprScript, e);\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionNumberSortScript.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"6c02a6c65749eb684d924a14922f5d0a3a769d6b","commitMessage":"@@@Script: Fields API for Sort and Score scripts (#75863)\n\nAdds minimal fields API support to sort and score scripts.\n\nExample: `field('myfield').getValue(123)` where `123` is the default if the field has no values.\n\nRefs: #61388","date":"2021-08-04 23:11:12","modifiedFileCount":"29","status":"M","submitter":"Stuart Tettemer"}]
