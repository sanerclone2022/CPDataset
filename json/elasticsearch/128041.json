[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (readerVersion != key.readerVersion) return false;\n            if (!entity.getCacheIdentity().equals(key.entity.getCacheIdentity())) return false;\n            if (!value.equals(key.value)) return false;\n            return true;\n        }\n","date":"2018-04-26 03:22:53","endLine":238,"groupId":"15442","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a0/095613cdb501662e6a7852eac1b66cf759b7bd.src","preCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (readerVersion != key.readerVersion) return false;\n            if (!entity.getCacheIdentity().equals(key.entity.getCacheIdentity())) return false;\n            if (!value.equals(key.value)) return false;\n            return true;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/indices/IndicesRequestCache.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (!indexCache.equals(key.indexCache)) return false;\n            if (!readerKey.equals(key.readerKey)) return false;\n            return true;\n        }\n","date":"2018-04-26 03:22:53","endLine":233,"groupId":"60050","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/573ae9f71a0e61a3c777be7d5c4f601799c4aa.src","preCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (!indexCache.equals(key.indexCache)) return false;\n            if (!readerKey.equals(key.readerKey)) return false;\n            return true;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/indices/fielddata/cache/IndicesFieldDataCache.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-10-15 23:03:37","commitOrder":2,"curCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (Objects.equals(readerCacheKey, key.readerCacheKey) == false) return false;\n            if (!entity.getCacheIdentity().equals(key.entity.getCacheIdentity())) return false;\n            if (!value.equals(key.value)) return false;\n            return true;\n        }\n","date":"2018-10-15 23:03:37","endLine":255,"groupId":"49499","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/62/6d6e8df17f523a4b0532a4cdcc109ea23120a7.src","preCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (readerVersion != key.readerVersion) return false;\n            if (!entity.getCacheIdentity().equals(key.entity.getCacheIdentity())) return false;\n            if (!value.equals(key.value)) return false;\n            return true;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/indices/IndicesRequestCache.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (!indexCache.equals(key.indexCache)) return false;\n            if (!readerKey.equals(key.readerKey)) return false;\n            return true;\n        }\n","date":"2018-04-26 03:22:53","endLine":233,"groupId":"60050","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/573ae9f71a0e61a3c777be7d5c4f601799c4aa.src","preCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (!indexCache.equals(key.indexCache)) return false;\n            if (!readerKey.equals(key.readerKey)) return false;\n            return true;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/indices/fielddata/cache/IndicesFieldDataCache.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"}],"commitId":"0b42eda0e360d17975460a0d1efd0c6e6b494ca5","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-10-15 23:03:37","modifiedFileCount":"331","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2020-12-24 02:19:02","commitOrder":3,"curCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (mappingCacheKey.equals(key.mappingCacheKey) == false) return false;\n            if (readerCacheKey.equals(key.readerCacheKey) == false) return false;\n            if (!entity.getCacheIdentity().equals(key.entity.getCacheIdentity())) return false;\n            if (!value.equals(key.value)) return false;\n            return true;\n        }\n","date":"2020-12-24 02:19:02","endLine":256,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/0a2fcd0e6dd9a2330944f2f75a31e4f5b9f87b.src","preCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (Objects.equals(readerCacheKey, key.readerCacheKey) == false) return false;\n            if (!entity.getCacheIdentity().equals(key.entity.getCacheIdentity())) return false;\n            if (!value.equals(key.value)) return false;\n            return true;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/indices/IndicesRequestCache.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (!indexCache.equals(key.indexCache)) return false;\n            if (!readerKey.equals(key.readerKey)) return false;\n            return true;\n        }\n","date":"2018-04-26 03:22:53","endLine":233,"groupId":"60050","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/573ae9f71a0e61a3c777be7d5c4f601799c4aa.src","preCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (!indexCache.equals(key.indexCache)) return false;\n            if (!readerKey.equals(key.readerKey)) return false;\n            return true;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/indices/fielddata/cache/IndicesFieldDataCache.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"}],"commitId":"3e3152406a4fda2cebeceac3d7fdae4071ce7ea6","commitMessage":"@@@Bust the request cache when the mapping changes (#66295)\n\nThis makes sure that we only serve a hit from the request cache if it\nwas build using the same mapping and that the same mapping is used for\nthe entire \"query phase\" of the search.\n\nCloses #62033","date":"2020-12-24 02:19:02","modifiedFileCount":"41","status":"M","submitter":"Nik Everett"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2021-01-28 23:07:59","commitOrder":4,"curCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (mappingCacheKey.equals(key.mappingCacheKey) == false) return false;\n            if (readerCacheKey.equals(key.readerCacheKey) == false) return false;\n            if (entity.getCacheIdentity().equals(key.entity.getCacheIdentity()) == false) return false;\n            if (value.equals(key.value) == false) return false;\n            return true;\n        }\n","date":"2021-01-28 23:07:59","endLine":256,"groupId":"27677","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/66/ff469eedfc08638e5cbb08e2e796508d8cf153.src","preCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (mappingCacheKey.equals(key.mappingCacheKey) == false) return false;\n            if (readerCacheKey.equals(key.readerCacheKey) == false) return false;\n            if (!entity.getCacheIdentity().equals(key.entity.getCacheIdentity())) return false;\n            if (!value.equals(key.value)) return false;\n            return true;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/indices/IndicesRequestCache.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":4,"curCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (!indexCache.equals(key.indexCache)) return false;\n            if (!readerKey.equals(key.readerKey)) return false;\n            return true;\n        }\n","date":"2018-04-26 03:22:53","endLine":233,"groupId":"60050","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/573ae9f71a0e61a3c777be7d5c4f601799c4aa.src","preCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (!indexCache.equals(key.indexCache)) return false;\n            if (!readerKey.equals(key.readerKey)) return false;\n            return true;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/indices/fielddata/cache/IndicesFieldDataCache.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"}],"commitId":"9adfd25a5afdf543041011a2b50b6fc32ad757b0","commitMessage":"@@@Replace NOT operator with explicit `false` check (#68078)\n\nPart 2.\n\nWe have an in-house rule to compare explicitly against `false` instead\nof using the logical not operator (`!`). However.  this hasn't\nhistorically been enforced.  meaning that there are many violations in\nthe source at present.\n\nWe now have a Checkstyle rule that can detect these cases.  but before we\ncan turn it on.  we need to fix the existing violations. This is being\ndone over a series of PRs.  since there are a lot to fix.","date":"2021-01-28 23:07:59","modifiedFileCount":"148","status":"M","submitter":"Rory Hunter"},{"authorTime":"2021-02-02 18:20:51","codes":[{"authorDate":"2021-01-28 23:07:59","commitOrder":5,"curCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (mappingCacheKey.equals(key.mappingCacheKey) == false) return false;\n            if (readerCacheKey.equals(key.readerCacheKey) == false) return false;\n            if (entity.getCacheIdentity().equals(key.entity.getCacheIdentity()) == false) return false;\n            if (value.equals(key.value) == false) return false;\n            return true;\n        }\n","date":"2021-01-28 23:07:59","endLine":256,"groupId":"128041","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/66/ff469eedfc08638e5cbb08e2e796508d8cf153.src","preCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (mappingCacheKey.equals(key.mappingCacheKey) == false) return false;\n            if (readerCacheKey.equals(key.readerCacheKey) == false) return false;\n            if (entity.getCacheIdentity().equals(key.entity.getCacheIdentity()) == false) return false;\n            if (value.equals(key.value) == false) return false;\n            return true;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/indices/IndicesRequestCache.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"N"},{"authorDate":"2021-02-02 18:20:51","commitOrder":5,"curCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (indexCache.equals(key.indexCache) == false) return false;\n            if (readerKey.equals(key.readerKey) == false) return false;\n            return true;\n        }\n","date":"2021-02-02 18:20:51","endLine":238,"groupId":"128041","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6b/8aff85b1f924e1165ff3244d9f126b2751e464.src","preCode":"        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Key key = (Key) o;\n            if (!indexCache.equals(key.indexCache)) return false;\n            if (!readerKey.equals(key.readerKey)) return false;\n            return true;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/indices/fielddata/cache/IndicesFieldDataCache.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"dfac67aff0ca126901d72ed7fe862a1e7adb19b0","commitMessage":"@@@Replace NOT operator with explicit `false` check - part 4 (#68275)\n\nPart 4.\n\nWe have an in-house rule to compare explicitly against `false` instead\nof using the logical not operator (`!`). However.  this hasn't\nhistorically been enforced.  meaning that there are many violations in\nthe source at present.\n\nWe now have a Checkstyle rule that can detect these cases.  but before we\ncan turn it on.  we need to fix the existing violations. This is being\ndone over a series of PRs.  since there are a lot to fix.","date":"2021-02-02 18:20:51","modifiedFileCount":"93","status":"M","submitter":"Rory Hunter"}]
