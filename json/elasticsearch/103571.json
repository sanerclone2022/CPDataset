[{"authorTime":"2019-02-04 23:35:29","codes":[{"authorDate":"2019-02-04 23:35:29","commitOrder":1,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final ReplicationOperation.PrimaryResult<RetentionLeaseBackgroundSyncAction.Request> result =\n                action.shardOperationOnPrimary(request, indexShard);\n        \r\n        verify(indexShard).afterWriteOperation();\n        \r\n        assertThat(result.replicaRequest(), sameInstance(request));\n    }\n","date":"2019-02-04 23:35:29","endLine":127,"groupId":"42963","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/38c04d2a1bbb03964745867854e95ca1510fbb.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final ReplicationOperation.PrimaryResult<RetentionLeaseBackgroundSyncAction.Request> result =\n                action.shardOperationOnPrimary(request, indexShard);\n        \r\n        verify(indexShard).afterWriteOperation();\n        \r\n        assertThat(result.replicaRequest(), sameInstance(request));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"},{"authorDate":"2019-02-04 23:35:29","commitOrder":1,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).afterWriteOperation();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2019-02-04 23:35:29","endLine":165,"groupId":"18187","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/38c04d2a1bbb03964745867854e95ca1510fbb.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).afterWriteOperation();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"}],"commitId":"625d37a26a5bf4eac2dc9a7dd3da9cd327f0571d","commitMessage":"@@@Introduce retention lease background sync (#38262)\n\nThis commit introduces a background sync for retention leases. The idea\nhere is that we do a heavyweight sync when adding a new retention lease. \nand then periodically we want to background sync any retention lease\nrenewals to the replicas. As long as the background sync interval is\nsignificantly lower than the extended lifetime of a retention lease.  it\nis okay if from time to time a replica misses a sync (it will still have\nan older version of the lease that is retaining more data as we assume\nthat renewals do not decrease the retaining sequence number). There are\ntwo follow-ups that will come after this commit. The first is to address\nthe fact that we have not adapted the should periodically flush logic to\npossibly flush the retention leases. We want to do something like flush\nif we have not flushed in the last five minutes and there are renewed\nretention leases since the last time that we flushed. An additional\nfollow-up will remove the syncing of retention leases when a retention\nlease expires. Today this sync could be invoked in the background by a\nmerge operation. Rather.  we will move the syncing of retention lease\nexpiration to be done under the background sync. The background sync\nwill use the heavyweight sync (write action) if a lease has expired.  and\nwill use the lightweight background sync (replication action) otherwise.","date":"2019-02-04 23:35:29","modifiedFileCount":"18","status":"B","submitter":"Jason Tedor"},{"authorTime":"2019-02-19 05:52:51","codes":[{"authorDate":"2019-02-19 05:52:51","commitOrder":2,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final ReplicationOperation.PrimaryResult<RetentionLeaseBackgroundSyncAction.Request> result =\n                action.shardOperationOnPrimary(request, indexShard);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        assertThat(result.replicaRequest(), sameInstance(request));\n    }\n","date":"2019-02-19 05:52:51","endLine":128,"groupId":"42963","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/45/67f3e3823370f3a4153876b1760f84b433f53f.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final ReplicationOperation.PrimaryResult<RetentionLeaseBackgroundSyncAction.Request> result =\n                action.shardOperationOnPrimary(request, indexShard);\n        \r\n        verify(indexShard).afterWriteOperation();\n        \r\n        assertThat(result.replicaRequest(), sameInstance(request));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2019-02-19 05:52:51","commitOrder":2,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2019-02-19 05:52:51","endLine":166,"groupId":"18187","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/45/67f3e3823370f3a4153876b1760f84b433f53f.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).afterWriteOperation();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"331ef9dc59270fce338e6e93e9d45dbdd7c93d03","commitMessage":"@@@Introduce retention lease state file (#39004)\n\nThis commit moves retention leases from being persisted in the Lucene\ncommit point to being persisted in a dedicated state file.","date":"2019-02-19 05:52:51","modifiedFileCount":"21","status":"M","submitter":"Jason Tedor"},{"authorTime":"2019-02-19 05:52:51","codes":[{"authorDate":"2019-04-07 00:11:00","commitOrder":3,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","date":"2019-04-07 00:11:00","endLine":136,"groupId":"18187","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f1/c05c565f8ef5ee7453d5c759209a62c0821fdd.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final ReplicationOperation.PrimaryResult<RetentionLeaseBackgroundSyncAction.Request> result =\n                action.shardOperationOnPrimary(request, indexShard);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        assertThat(result.replicaRequest(), sameInstance(request));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2019-02-19 05:52:51","commitOrder":3,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2019-02-19 05:52:51","endLine":166,"groupId":"18187","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/45/67f3e3823370f3a4153876b1760f84b433f53f.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"N"}],"commitId":"5d26243aba226648e1bd2c327e0ac0cae4a4c14f","commitMessage":"@@@Make Transport Shard Bulk Action Async (#39793)\n\nThis is a dependency of #39504 \n\nMotivation: \nBy refactoring `TransportShardBulkAction#shardOperationOnPrimary` to async.  we enable using `DeterministicTaskQueue` based tests to run indexing operations. This was previously impossible since we were blocking on the `write` thread until the `update` thread finished the mapping update.\nWith this change.  the mapping update will trigger a new task in the `write` queue instead. \nThis change significantly enhances the amount of coverage we get from `SnapshotResiliencyTests` (and other potential future tests) when it comes to tracking down concurrency issues with distributed state machines.\n\nThe logical change is effectively all in `TransportShardBulkAction`.  the rest of the changes is then simply mechanically moving the caller code and tests to being async and passing the `ActionListener` down.\n\nSince the move to async would've added more parameters to the `private static` steps in this logic.  I decided to inline and dry up (between delete and update) the logic as much as I could instead of passing the listener + wait-consumer down through all of them.\n","date":"2019-04-07 00:11:00","modifiedFileCount":"28","status":"M","submitter":"Armin Braun"},{"authorTime":"2019-11-28 18:31:51","codes":[{"authorDate":"2019-11-28 18:31:51","commitOrder":4,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","date":"2019-11-28 18:31:51","endLine":122,"groupId":"42963","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2019-11-28 18:31:51","commitOrder":4,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2019-11-28 18:31:51","endLine":159,"groupId":"42963","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"6cca2b04fa06b981d3a73e12d3956bafd07b0e8a","commitMessage":"@@@Remove obsolete resolving logic from TRA (#49647)\n\nThis stems from a time where index requests were directly forwarded to\nTransportReplicationAction. Nowadays they are wrapped in a BulkShardRequest.  and this logic is\nobsolete.\n\nCloses #20279","date":"2019-11-28 18:31:51","modifiedFileCount":"22","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2019-11-28 20:12:27","codes":[{"authorDate":"2019-11-28 20:12:27","commitOrder":5,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","date":"2019-11-28 20:12:53","endLine":124,"groupId":"18187","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/e10a80fe79375905272e9013261fbadb78ac52.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2019-11-28 20:12:27","commitOrder":5,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2019-11-28 20:12:53","endLine":162,"groupId":"18187","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/e10a80fe79375905272e9013261fbadb78ac52.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"a354c607228d6c1784f6b1f02862fe363e859cdf","commitMessage":"@@@Revert \"Remove obsolete resolving logic from TRA (#49647)\"\n\nThis reverts commit 6cca2b04fa06b981d3a73e12d3956bafd07b0e8a.\n","date":"2019-11-28 20:12:53","modifiedFileCount":"22","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2019-11-29 18:01:24","codes":[{"authorDate":"2019-11-29 18:01:24","commitOrder":6,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","date":"2019-11-29 18:01:24","endLine":122,"groupId":"42963","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2019-11-29 18:01:24","commitOrder":6,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2019-11-29 18:01:24","endLine":159,"groupId":"42963","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"3ad8aa6d46580229823d298e9ce68ba3aaadc3d6","commitMessage":"@@@Remove obsolete resolving logic from TRA (#49685)\n\nThis stems from a time where index requests were directly forwarded to\nTransportReplicationAction. Nowadays they are wrapped in a BulkShardRequest.  and this logic is\nobsolete.\n\nIn contrast to prior PR (#49647).  this PR also fixes (see b3697cc) a situation where the previous\nindex expression logic had an interesting side effect. For bulk requests (which had resolveIndex\n= false).  the reroute phase was waiting for the index to appear in case where it was not present. \nand for all other replication requests (resolveIndex = true) it would right away throw an\nIndexNotFoundException while resolving the name and exit. With #49647.  every replication\nrequest was now waiting for the index to appear.  which was problematic when the given index\nhad just been deleted (e.g. deleting a follower index while it's still receiving requests from the\nleader.  where these requests would now wait up to a minute for the index to appear). This PR\nnow adds b3697cc on top of that prior PR to make sure to reestablish some of the prior behavior\nwhere the reroute phase waits for the bulk request for the index to appear. That logic was in\nplace to ensure that when an index was created and not all nodes had learned about it yet.  that\nthe bulk would not fail somewhere in the reroute phase. This is now only restricted to the\nsituation where the current node has an older cluster state than the one that coordinated the\nbulk request (which checks that the index is present). This also means that when an index is\ndeleted.  we will no longer unnecessarily wait up to the timeout for the index o appear.  and\ninstead fail the request.\n\nCloses #20279","date":"2019-11-29 18:01:24","modifiedFileCount":"27","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2019-12-03 18:46:50","codes":[{"authorDate":"2019-11-29 18:01:24","commitOrder":7,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","date":"2019-11-29 18:01:24","endLine":122,"groupId":"42963","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2019-12-03 18:46:50","commitOrder":7,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.runPostReplicaActions(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2019-12-03 18:46:50","endLine":159,"groupId":"42963","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/ccbc7ff482f83631a24d08197047c12d4ef9d4.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.respond(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"8c165e04a1cf0efd019a5c5f686e3b49fb17d145","commitMessage":"@@@Replicate write actions before fsyncing them (#49746)\n\nThis commit fixes a number of issues with data replication:\n\n- Local and global checkpoints are not updated after the new operations have been fsynced.  but\nmight capture a state before the fsync. The reason why this probably went undetected for so\nlong is that AsyncIOProcessor is synchronous if you index one item at a time.  and hence working\nas intended unless you have a high enough level of concurrent indexing. As we rely in other\nplaces on the assumption that we have an up-to-date local checkpoint in case of synchronous\ntranslog durability.  there's a risk for the local and global checkpoints not to be up-to-date after\nreplication completes.  and that this won't be corrected by the periodic global checkpoint sync.\n- AsyncIOProcessor also has another \"bad\" side effect here: if you index one bulk at a time.  the\nbulk is always first fsynced on the primary before being sent to the replica. Further.  if one thread\nis tasked by AsyncIOProcessor to drain the processing queue and fsync.  other threads can\neasily pile more bulk requests on top of that thread. Things are not very fair here.  and the thread\nmight continue doing a lot more fsyncs before returning (as the other threads pile more and\nmore on top).  which blocks it from returning as a replication request (e.g. if this thread is on the\nprimary.  it blocks the replication requests to the replicas from going out.  and delaying\ncheckpoint advancement).\n\nThis commit fixes all these issues.  and also simplifies the code that coordinates all the after\nwrite actions.","date":"2019-12-03 18:46:50","modifiedFileCount":"13","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2019-11-29 18:01:24","commitOrder":8,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","date":"2019-11-29 18:01:24","endLine":122,"groupId":"103571","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2020-06-26 22:33:37","commitOrder":8,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final PlainActionFuture<TransportReplicationAction.ReplicaResult> listener = PlainActionFuture.newFuture();\n        action.shardOperationOnReplica(request, indexShard, listener);\n        final TransportReplicationAction.ReplicaResult result = listener.actionGet();\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.runPostReplicaActions(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","date":"2020-06-26 22:33:37","endLine":164,"groupId":"103571","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/8607ab01c768359aebb1d1b471c98dbabd5255.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnReplica() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final TransportReplicationAction.ReplicaResult result = action.shardOperationOnReplica(request, indexShard);\n        \r\n        verify(indexShard).updateRetentionLeasesOnReplica(retentionLeases);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        final AtomicBoolean success = new AtomicBoolean();\n        result.runPostReplicaActions(ActionListener.wrap(r -> success.set(true), e -> fail(e.toString())));\n        assertTrue(success.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"}]
