[{"authorTime":"2018-11-19 22:21:01","codes":[{"authorDate":"2018-11-19 22:21:01","commitOrder":1,"curCode":"    public void testRandomMinuteIntervals() throws IOException {\n        final int length = 120;\n        final List<DateTime> dataset = new ArrayList<>(length);\n        final DateTime startDate = new DateTime(2017, 1, 1, 0, 0, DateTimeZone.UTC);\n        for (int i = 0; i < length; i++) {\n            final DateTime date = startDate.plusMinutes(i);\n            dataset.add(date);\n        }\n        final Map<Integer, Integer> bucketsToExpectedDocCountMap = new HashMap<>();\n        bucketsToExpectedDocCountMap.put(120, 1);\n        bucketsToExpectedDocCountMap.put(60, 5);\n        bucketsToExpectedDocCountMap.put(20, 10);\n        bucketsToExpectedDocCountMap.put(10, 30);\n        bucketsToExpectedDocCountMap.put(3, 60);\n        final Map.Entry<Integer, Integer> randomEntry = randomFrom(bucketsToExpectedDocCountMap.entrySet());\n        testSearchAndReduceCase(DEFAULT_QUERY, dataset,\n            aggregation -> aggregation.setNumBuckets(randomEntry.getKey()).field(DATE_FIELD),\n            histogram -> {\n                final List<? extends Histogram.Bucket> buckets = histogram.getBuckets();\n                final int expectedDocCount = randomEntry.getValue();\n                final int expectedSize = length / expectedDocCount;\n                assertEquals(expectedSize, buckets.size());\n                final int randomIndex = randomInt(expectedSize - 1);\n                final Histogram.Bucket bucket = buckets.get(randomIndex);\n                assertEquals(startDate.plusMinutes(randomIndex * expectedDocCount), bucket.getKey());\n                assertEquals(expectedDocCount, bucket.getDocCount());\n            });\n    }\n","date":"2018-11-19 22:21:01","endLine":484,"groupId":"10686","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomMinuteIntervals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2d/5109405dc1c23b27b6f3f7dd3e8280cc59df6f.src","preCode":"    public void testRandomMinuteIntervals() throws IOException {\n        final int length = 120;\n        final List<DateTime> dataset = new ArrayList<>(length);\n        final DateTime startDate = new DateTime(2017, 1, 1, 0, 0, DateTimeZone.UTC);\n        for (int i = 0; i < length; i++) {\n            final DateTime date = startDate.plusMinutes(i);\n            dataset.add(date);\n        }\n        final Map<Integer, Integer> bucketsToExpectedDocCountMap = new HashMap<>();\n        bucketsToExpectedDocCountMap.put(120, 1);\n        bucketsToExpectedDocCountMap.put(60, 5);\n        bucketsToExpectedDocCountMap.put(20, 10);\n        bucketsToExpectedDocCountMap.put(10, 30);\n        bucketsToExpectedDocCountMap.put(3, 60);\n        final Map.Entry<Integer, Integer> randomEntry = randomFrom(bucketsToExpectedDocCountMap.entrySet());\n        testSearchAndReduceCase(DEFAULT_QUERY, dataset,\n            aggregation -> aggregation.setNumBuckets(randomEntry.getKey()).field(DATE_FIELD),\n            histogram -> {\n                final List<? extends Histogram.Bucket> buckets = histogram.getBuckets();\n                final int expectedDocCount = randomEntry.getValue();\n                final int expectedSize = length / expectedDocCount;\n                assertEquals(expectedSize, buckets.size());\n                final int randomIndex = randomInt(expectedSize - 1);\n                final Histogram.Bucket bucket = buckets.get(randomIndex);\n                assertEquals(startDate.plusMinutes(randomIndex * expectedDocCount), bucket.getKey());\n                assertEquals(expectedDocCount, bucket.getDocCount());\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"B"},{"authorDate":"2018-11-19 22:21:01","commitOrder":1,"curCode":"    public void testRandomYearIntervals() throws IOException {\n        final int length = 300;\n        final List<DateTime> dataset = new ArrayList<>(length);\n        final DateTime startDate = new DateTime(2017, 1, 1, 0, 0, DateTimeZone.UTC);\n        for (int i = 0; i < length; i++) {\n            final DateTime date = startDate.plusYears(i);\n            dataset.add(date);\n        }\n        final Map<Integer, Integer> bucketsToExpectedDocCountMap = new HashMap<>();\n        bucketsToExpectedDocCountMap.put(300, 1);\n        bucketsToExpectedDocCountMap.put(150, 5);\n        bucketsToExpectedDocCountMap.put(50, 10);\n        bucketsToExpectedDocCountMap.put(25, 20);\n        bucketsToExpectedDocCountMap.put(10, 50);\n        bucketsToExpectedDocCountMap.put(5, 100);\n        final Map.Entry<Integer, Integer> randomEntry = randomFrom(bucketsToExpectedDocCountMap.entrySet());\n        testSearchAndReduceCase(DEFAULT_QUERY, dataset,\n            aggregation -> aggregation.setNumBuckets(randomEntry.getKey()).field(DATE_FIELD),\n            histogram -> {\n                final List<? extends Histogram.Bucket> buckets = histogram.getBuckets();\n                final int expectedDocCount = randomEntry.getValue();\n                final int expectedSize = length / expectedDocCount;\n                assertEquals(expectedSize, buckets.size());\n                final int randomIndex = randomInt(expectedSize - 1);\n                final Histogram.Bucket bucket = buckets.get(randomIndex);\n                assertEquals(startDate.plusYears(randomIndex * expectedDocCount), bucket.getKey());\n                assertEquals(expectedDocCount, bucket.getDocCount());\n            });\n    }\n","date":"2018-11-19 22:21:01","endLine":615,"groupId":"10686","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomYearIntervals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2d/5109405dc1c23b27b6f3f7dd3e8280cc59df6f.src","preCode":"    public void testRandomYearIntervals() throws IOException {\n        final int length = 300;\n        final List<DateTime> dataset = new ArrayList<>(length);\n        final DateTime startDate = new DateTime(2017, 1, 1, 0, 0, DateTimeZone.UTC);\n        for (int i = 0; i < length; i++) {\n            final DateTime date = startDate.plusYears(i);\n            dataset.add(date);\n        }\n        final Map<Integer, Integer> bucketsToExpectedDocCountMap = new HashMap<>();\n        bucketsToExpectedDocCountMap.put(300, 1);\n        bucketsToExpectedDocCountMap.put(150, 5);\n        bucketsToExpectedDocCountMap.put(50, 10);\n        bucketsToExpectedDocCountMap.put(25, 20);\n        bucketsToExpectedDocCountMap.put(10, 50);\n        bucketsToExpectedDocCountMap.put(5, 100);\n        final Map.Entry<Integer, Integer> randomEntry = randomFrom(bucketsToExpectedDocCountMap.entrySet());\n        testSearchAndReduceCase(DEFAULT_QUERY, dataset,\n            aggregation -> aggregation.setNumBuckets(randomEntry.getKey()).field(DATE_FIELD),\n            histogram -> {\n                final List<? extends Histogram.Bucket> buckets = histogram.getBuckets();\n                final int expectedDocCount = randomEntry.getValue();\n                final int expectedSize = length / expectedDocCount;\n                assertEquals(expectedSize, buckets.size());\n                final int randomIndex = randomInt(expectedSize - 1);\n                final Histogram.Bucket bucket = buckets.get(randomIndex);\n                assertEquals(startDate.plusYears(randomIndex * expectedDocCount), bucket.getKey());\n                assertEquals(expectedDocCount, bucket.getDocCount());\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":587,"status":"B"}],"commitId":"450db7fcf7b99066b42507be15727856765729ff","commitMessage":"@@@[Tests] Fix slowness of AutoDateHistogramAggregatorTests (#35072)\n\nRandomize test assertion and test set size instead of asserting on an\nexhaustive list of dates with fixed test set size. Also refactor common \nobjects used to avoid recreating them.  avoid date to string conversion\nand reduce duplicate test code\n\nCloses #33181","date":"2018-11-19 22:21:01","modifiedFileCount":"1","status":"B","submitter":"Ekal Golas"},{"authorTime":"2019-01-23 17:40:05","codes":[{"authorDate":"2019-01-23 17:40:05","commitOrder":2,"curCode":"    public void testRandomMinuteIntervals() throws IOException {\n        final int length = 120;\n        final List<ZonedDateTime> dataset = new ArrayList<>(length);\n        final ZonedDateTime startDate = ZonedDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC);\n        for (int i = 0; i < length; i++) {\n            final ZonedDateTime date = startDate.plusMinutes(i);\n            dataset.add(date);\n        }\n        final Map<Integer, Integer> bucketsToExpectedDocCountMap = new HashMap<>();\n        bucketsToExpectedDocCountMap.put(120, 1);\n        bucketsToExpectedDocCountMap.put(60, 5);\n        bucketsToExpectedDocCountMap.put(20, 10);\n        bucketsToExpectedDocCountMap.put(10, 30);\n        bucketsToExpectedDocCountMap.put(3, 60);\n        final Map.Entry<Integer, Integer> randomEntry = randomFrom(bucketsToExpectedDocCountMap.entrySet());\n        testSearchAndReduceCase(DEFAULT_QUERY, dataset,\n            aggregation -> aggregation.setNumBuckets(randomEntry.getKey()).field(DATE_FIELD),\n            histogram -> {\n                final List<? extends Histogram.Bucket> buckets = histogram.getBuckets();\n                final int expectedDocCount = randomEntry.getValue();\n                final int expectedSize = length / expectedDocCount;\n                assertEquals(expectedSize, buckets.size());\n                final int randomIndex = randomInt(expectedSize - 1);\n                final Histogram.Bucket bucket = buckets.get(randomIndex);\n                assertEquals(startDate.plusMinutes(randomIndex * expectedDocCount), bucket.getKey());\n                assertEquals(expectedDocCount, bucket.getDocCount());\n            });\n    }\n","date":"2019-01-23 17:40:05","endLine":521,"groupId":"10686","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomMinuteIntervals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/93b33e22f4361b1e80b1addfd49310f176fabb.src","preCode":"    public void testRandomMinuteIntervals() throws IOException {\n        final int length = 120;\n        final List<DateTime> dataset = new ArrayList<>(length);\n        final DateTime startDate = new DateTime(2017, 1, 1, 0, 0, DateTimeZone.UTC);\n        for (int i = 0; i < length; i++) {\n            final DateTime date = startDate.plusMinutes(i);\n            dataset.add(date);\n        }\n        final Map<Integer, Integer> bucketsToExpectedDocCountMap = new HashMap<>();\n        bucketsToExpectedDocCountMap.put(120, 1);\n        bucketsToExpectedDocCountMap.put(60, 5);\n        bucketsToExpectedDocCountMap.put(20, 10);\n        bucketsToExpectedDocCountMap.put(10, 30);\n        bucketsToExpectedDocCountMap.put(3, 60);\n        final Map.Entry<Integer, Integer> randomEntry = randomFrom(bucketsToExpectedDocCountMap.entrySet());\n        testSearchAndReduceCase(DEFAULT_QUERY, dataset,\n            aggregation -> aggregation.setNumBuckets(randomEntry.getKey()).field(DATE_FIELD),\n            histogram -> {\n                final List<? extends Histogram.Bucket> buckets = histogram.getBuckets();\n                final int expectedDocCount = randomEntry.getValue();\n                final int expectedSize = length / expectedDocCount;\n                assertEquals(expectedSize, buckets.size());\n                final int randomIndex = randomInt(expectedSize - 1);\n                final Histogram.Bucket bucket = buckets.get(randomIndex);\n                assertEquals(startDate.plusMinutes(randomIndex * expectedDocCount), bucket.getKey());\n                assertEquals(expectedDocCount, bucket.getDocCount());\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":494,"status":"M"},{"authorDate":"2019-01-23 17:40:05","commitOrder":2,"curCode":"    public void testRandomYearIntervals() throws IOException {\n        final int length = 300;\n        final List<ZonedDateTime> dataset = new ArrayList<>(length);\n        final ZonedDateTime startDate = ZonedDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC);\n        for (int i = 0; i < length; i++) {\n            final ZonedDateTime date = startDate.plusYears(i);\n            dataset.add(date);\n        }\n        final Map<Integer, Integer> bucketsToExpectedDocCountMap = new HashMap<>();\n        bucketsToExpectedDocCountMap.put(300, 1);\n        bucketsToExpectedDocCountMap.put(150, 5);\n        bucketsToExpectedDocCountMap.put(50, 10);\n        bucketsToExpectedDocCountMap.put(25, 20);\n        bucketsToExpectedDocCountMap.put(10, 50);\n        bucketsToExpectedDocCountMap.put(5, 100);\n        final Map.Entry<Integer, Integer> randomEntry = randomFrom(bucketsToExpectedDocCountMap.entrySet());\n        testSearchAndReduceCase(DEFAULT_QUERY, dataset,\n            aggregation -> aggregation.setNumBuckets(randomEntry.getKey()).field(DATE_FIELD),\n            histogram -> {\n                final List<? extends Histogram.Bucket> buckets = histogram.getBuckets();\n                final int expectedDocCount = randomEntry.getValue();\n                final int expectedSize = length / expectedDocCount;\n                assertEquals(expectedSize, buckets.size());\n                final int randomIndex = randomInt(expectedSize - 1);\n                final Histogram.Bucket bucket = buckets.get(randomIndex);\n                assertEquals(startDate.plusYears(randomIndex * expectedDocCount), bucket.getKey());\n                assertEquals(expectedDocCount, bucket.getDocCount());\n            });\n    }\n","date":"2019-01-23 17:40:05","endLine":652,"groupId":"10686","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomYearIntervals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/93b33e22f4361b1e80b1addfd49310f176fabb.src","preCode":"    public void testRandomYearIntervals() throws IOException {\n        final int length = 300;\n        final List<DateTime> dataset = new ArrayList<>(length);\n        final DateTime startDate = new DateTime(2017, 1, 1, 0, 0, DateTimeZone.UTC);\n        for (int i = 0; i < length; i++) {\n            final DateTime date = startDate.plusYears(i);\n            dataset.add(date);\n        }\n        final Map<Integer, Integer> bucketsToExpectedDocCountMap = new HashMap<>();\n        bucketsToExpectedDocCountMap.put(300, 1);\n        bucketsToExpectedDocCountMap.put(150, 5);\n        bucketsToExpectedDocCountMap.put(50, 10);\n        bucketsToExpectedDocCountMap.put(25, 20);\n        bucketsToExpectedDocCountMap.put(10, 50);\n        bucketsToExpectedDocCountMap.put(5, 100);\n        final Map.Entry<Integer, Integer> randomEntry = randomFrom(bucketsToExpectedDocCountMap.entrySet());\n        testSearchAndReduceCase(DEFAULT_QUERY, dataset,\n            aggregation -> aggregation.setNumBuckets(randomEntry.getKey()).field(DATE_FIELD),\n            histogram -> {\n                final List<? extends Histogram.Bucket> buckets = histogram.getBuckets();\n                final int expectedDocCount = randomEntry.getValue();\n                final int expectedSize = length / expectedDocCount;\n                assertEquals(expectedSize, buckets.size());\n                final int randomIndex = randomInt(expectedSize - 1);\n                final Histogram.Bucket bucket = buckets.get(randomIndex);\n                assertEquals(startDate.plusYears(randomIndex * expectedDocCount), bucket.getKey());\n                assertEquals(expectedDocCount, bucket.getDocCount());\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":624,"status":"M"}],"commitId":"daa2ec8a605d385a65b9ab3e89d016b3fd0dffe2","commitMessage":"@@@Switch mapping/aggregations over to java time (#36363)\n\nThis commit moves the aggregation and mapping code from joda time to\njava time. This includes field mappers.  root object mappers.  aggregations with date\nhistograms.  query builders and a lot of changes within tests.\n\nThe cut-over to java time is a requirement so that we can support nanoseconds\nproperly in a future field mapper.\n\nRelates #27330","date":"2019-01-23 17:40:05","modifiedFileCount":"154","status":"M","submitter":"Alexander Reelsen"},{"authorTime":"2020-08-07 05:14:20","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":3,"curCode":"    public void testRandomMinuteIntervals() throws IOException {\n        final int length = 120;\n        final List<ZonedDateTime> dataset = new ArrayList<>(length);\n        final ZonedDateTime startDate = ZonedDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC);\n        for (int i = 0; i < length; i++) {\n            final ZonedDateTime date = startDate.plusMinutes(i);\n            dataset.add(date);\n        }\n        final Map<Integer, Integer> bucketsToExpectedDocCountMap = new HashMap<>();\n        bucketsToExpectedDocCountMap.put(120, 1);\n        bucketsToExpectedDocCountMap.put(60, 5);\n        bucketsToExpectedDocCountMap.put(20, 10);\n        bucketsToExpectedDocCountMap.put(10, 30);\n        bucketsToExpectedDocCountMap.put(3, 60);\n        final Map.Entry<Integer, Integer> randomEntry = randomFrom(bucketsToExpectedDocCountMap.entrySet());\n        testSearchCase(DEFAULT_QUERY, dataset,\n            aggregation -> aggregation.setNumBuckets(randomEntry.getKey()).field(DATE_FIELD),\n            histogram -> {\n                final List<? extends Histogram.Bucket> buckets = histogram.getBuckets();\n                final int expectedDocCount = randomEntry.getValue();\n                final int expectedSize = length / expectedDocCount;\n                assertEquals(expectedSize, buckets.size());\n                final int randomIndex = randomInt(expectedSize - 1);\n                final Histogram.Bucket bucket = buckets.get(randomIndex);\n                assertEquals(startDate.plusMinutes(randomIndex * expectedDocCount), bucket.getKey());\n                assertEquals(expectedDocCount, bucket.getDocCount());\n            });\n    }\n","date":"2020-08-07 05:14:20","endLine":636,"groupId":"105023","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomMinuteIntervals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/b34acab2449fdaa8d6149b4effef11af92b7f1.src","preCode":"    public void testRandomMinuteIntervals() throws IOException {\n        final int length = 120;\n        final List<ZonedDateTime> dataset = new ArrayList<>(length);\n        final ZonedDateTime startDate = ZonedDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC);\n        for (int i = 0; i < length; i++) {\n            final ZonedDateTime date = startDate.plusMinutes(i);\n            dataset.add(date);\n        }\n        final Map<Integer, Integer> bucketsToExpectedDocCountMap = new HashMap<>();\n        bucketsToExpectedDocCountMap.put(120, 1);\n        bucketsToExpectedDocCountMap.put(60, 5);\n        bucketsToExpectedDocCountMap.put(20, 10);\n        bucketsToExpectedDocCountMap.put(10, 30);\n        bucketsToExpectedDocCountMap.put(3, 60);\n        final Map.Entry<Integer, Integer> randomEntry = randomFrom(bucketsToExpectedDocCountMap.entrySet());\n        testSearchAndReduceCase(DEFAULT_QUERY, dataset,\n            aggregation -> aggregation.setNumBuckets(randomEntry.getKey()).field(DATE_FIELD),\n            histogram -> {\n                final List<? extends Histogram.Bucket> buckets = histogram.getBuckets();\n                final int expectedDocCount = randomEntry.getValue();\n                final int expectedSize = length / expectedDocCount;\n                assertEquals(expectedSize, buckets.size());\n                final int randomIndex = randomInt(expectedSize - 1);\n                final Histogram.Bucket bucket = buckets.get(randomIndex);\n                assertEquals(startDate.plusMinutes(randomIndex * expectedDocCount), bucket.getKey());\n                assertEquals(expectedDocCount, bucket.getDocCount());\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"M"},{"authorDate":"2020-08-07 05:14:20","commitOrder":3,"curCode":"    public void testRandomYearIntervals() throws IOException {\n        final int length = 300;\n        final List<ZonedDateTime> dataset = new ArrayList<>(length);\n        final ZonedDateTime startDate = ZonedDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC);\n        for (int i = 0; i < length; i++) {\n            final ZonedDateTime date = startDate.plusYears(i);\n            dataset.add(date);\n        }\n        final Map<Integer, Integer> bucketsToExpectedDocCountMap = new HashMap<>();\n        bucketsToExpectedDocCountMap.put(300, 1);\n        bucketsToExpectedDocCountMap.put(150, 5);\n        bucketsToExpectedDocCountMap.put(50, 10);\n        bucketsToExpectedDocCountMap.put(25, 20);\n        bucketsToExpectedDocCountMap.put(10, 50);\n        bucketsToExpectedDocCountMap.put(5, 100);\n        final Map.Entry<Integer, Integer> randomEntry = randomFrom(bucketsToExpectedDocCountMap.entrySet());\n        testSearchCase(DEFAULT_QUERY, dataset,\n            aggregation -> aggregation.setNumBuckets(randomEntry.getKey()).field(DATE_FIELD),\n            histogram -> {\n                final List<? extends Histogram.Bucket> buckets = histogram.getBuckets();\n                final int expectedDocCount = randomEntry.getValue();\n                final int expectedSize = length / expectedDocCount;\n                assertEquals(expectedSize, buckets.size());\n                final int randomIndex = randomInt(expectedSize - 1);\n                final Histogram.Bucket bucket = buckets.get(randomIndex);\n                assertEquals(startDate.plusYears(randomIndex * expectedDocCount), bucket.getKey());\n                assertEquals(expectedDocCount, bucket.getDocCount());\n            });\n    }\n","date":"2020-08-07 05:14:20","endLine":767,"groupId":"105023","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRandomYearIntervals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/b34acab2449fdaa8d6149b4effef11af92b7f1.src","preCode":"    public void testRandomYearIntervals() throws IOException {\n        final int length = 300;\n        final List<ZonedDateTime> dataset = new ArrayList<>(length);\n        final ZonedDateTime startDate = ZonedDateTime.of(2017, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC);\n        for (int i = 0; i < length; i++) {\n            final ZonedDateTime date = startDate.plusYears(i);\n            dataset.add(date);\n        }\n        final Map<Integer, Integer> bucketsToExpectedDocCountMap = new HashMap<>();\n        bucketsToExpectedDocCountMap.put(300, 1);\n        bucketsToExpectedDocCountMap.put(150, 5);\n        bucketsToExpectedDocCountMap.put(50, 10);\n        bucketsToExpectedDocCountMap.put(25, 20);\n        bucketsToExpectedDocCountMap.put(10, 50);\n        bucketsToExpectedDocCountMap.put(5, 100);\n        final Map.Entry<Integer, Integer> randomEntry = randomFrom(bucketsToExpectedDocCountMap.entrySet());\n        testSearchAndReduceCase(DEFAULT_QUERY, dataset,\n            aggregation -> aggregation.setNumBuckets(randomEntry.getKey()).field(DATE_FIELD),\n            histogram -> {\n                final List<? extends Histogram.Bucket> buckets = histogram.getBuckets();\n                final int expectedDocCount = randomEntry.getValue();\n                final int expectedSize = length / expectedDocCount;\n                assertEquals(expectedSize, buckets.size());\n                final int randomIndex = randomInt(expectedSize - 1);\n                final Histogram.Bucket bucket = buckets.get(randomIndex);\n                assertEquals(startDate.plusYears(randomIndex * expectedDocCount), bucket.getKey());\n                assertEquals(expectedDocCount, bucket.getDocCount());\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/AutoDateHistogramAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"M"}],"commitId":"5e3ea6eb11c68bdcc9adda51715a6e1fea9186d6","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-07 05:14:20","modifiedFileCount":"73","status":"M","submitter":"Nik Everett"}]
