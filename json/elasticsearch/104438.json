[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testCreateWithPipelineEmptyOnFailureInProcessor() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(Pipeline.ON_FAILURE_KEY, Collections.emptyList());\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Pipeline.Factory factory = new Pipeline.Factory();\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(\"_id\", pipelineConfig, processorRegistry));\n        assertThat(e.getMessage(), equalTo(\"[on_failure] processors list cannot be empty\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":132,"groupId":"62234","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateWithPipelineEmptyOnFailureInProcessor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/1873a3fe3d2bd546e29176ea94e5da5eaec0a9.src","preCode":"    public void testCreateWithPipelineEmptyOnFailureInProcessor() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(Pipeline.ON_FAILURE_KEY, Collections.emptyList());\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Pipeline.Factory factory = new Pipeline.Factory();\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(\"_id\", pipelineConfig, processorRegistry));\n        assertThat(e.getMessage(), equalTo(\"[on_failure] processors list cannot be empty\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testCreateUnusedProcessorOptions() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(\"unused\", \"value\");\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Pipeline.Factory factory = new Pipeline.Factory();\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(\"_id\", pipelineConfig, processorRegistry));\n        assertThat(e.getMessage(), equalTo(\"processor [test] doesn't support one or more provided configuration parameters [unused]\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":169,"groupId":"62234","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateUnusedProcessorOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/1873a3fe3d2bd546e29176ea94e5da5eaec0a9.src","preCode":"    public void testCreateUnusedProcessorOptions() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(\"unused\", \"value\");\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Pipeline.Factory factory = new Pipeline.Factory();\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(\"_id\", pipelineConfig, processorRegistry));\n        assertThat(e.getMessage(), equalTo(\"processor [test] doesn't support one or more provided configuration parameters [unused]\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-08-21 18:54:06","codes":[{"authorDate":"2018-08-21 18:54:06","commitOrder":2,"curCode":"    public void testCreateWithPipelineEmptyOnFailureInProcessor() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(Pipeline.ON_FAILURE_KEY, Collections.emptyList());\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> Pipeline.create(\"_id\", pipelineConfig, processorRegistry));\n        assertThat(e.getMessage(), equalTo(\"[on_failure] processors list cannot be empty\"));\n    }\n","date":"2018-08-21 18:54:06","endLine":126,"groupId":"62234","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateWithPipelineEmptyOnFailureInProcessor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ca/fdbcfb44690aeaf6609adafa6f3405f31fc7a7.src","preCode":"    public void testCreateWithPipelineEmptyOnFailureInProcessor() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(Pipeline.ON_FAILURE_KEY, Collections.emptyList());\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Pipeline.Factory factory = new Pipeline.Factory();\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(\"_id\", pipelineConfig, processorRegistry));\n        assertThat(e.getMessage(), equalTo(\"[on_failure] processors list cannot be empty\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2018-08-21 18:54:06","commitOrder":2,"curCode":"    public void testCreateUnusedProcessorOptions() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(\"unused\", \"value\");\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> Pipeline.create(\"_id\", pipelineConfig, processorRegistry));\n        assertThat(e.getMessage(), equalTo(\"processor [test] doesn't support one or more provided configuration parameters [unused]\"));\n    }\n","date":"2018-08-21 18:54:06","endLine":161,"groupId":"62234","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateUnusedProcessorOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ca/fdbcfb44690aeaf6609adafa6f3405f31fc7a7.src","preCode":"    public void testCreateUnusedProcessorOptions() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(\"unused\", \"value\");\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Pipeline.Factory factory = new Pipeline.Factory();\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> factory.create(\"_id\", pipelineConfig, processorRegistry));\n        assertThat(e.getMessage(), equalTo(\"processor [test] doesn't support one or more provided configuration parameters [unused]\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"10c60fae93fc82469d3dcc9f330035e2a5818bb7","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-21 18:54:06","modifiedFileCount":"60","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-08-31 06:04:17","codes":[{"authorDate":"2018-08-31 06:04:17","commitOrder":3,"curCode":"    public void testCreateWithPipelineEmptyOnFailureInProcessor() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(Pipeline.ON_FAILURE_KEY, Collections.emptyList());\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(\n            ElasticsearchParseException.class,\n            () -> Pipeline.create(\"_id\", pipelineConfig, processorRegistry, scriptService)\n        );\n        assertThat(e.getMessage(), equalTo(\"[on_failure] processors list cannot be empty\"));\n    }\n","date":"2018-08-31 06:04:17","endLine":135,"groupId":"62234","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateWithPipelineEmptyOnFailureInProcessor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/d7b4ffa816b2acc2131bfd722878593200e64a.src","preCode":"    public void testCreateWithPipelineEmptyOnFailureInProcessor() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(Pipeline.ON_FAILURE_KEY, Collections.emptyList());\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> Pipeline.create(\"_id\", pipelineConfig, processorRegistry));\n        assertThat(e.getMessage(), equalTo(\"[on_failure] processors list cannot be empty\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2018-08-31 06:04:17","commitOrder":3,"curCode":"    public void testCreateUnusedProcessorOptions() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(\"unused\", \"value\");\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(\n            ElasticsearchParseException.class,\n            () -> Pipeline.create(\"_id\", pipelineConfig, processorRegistry, scriptService)\n        );\n        assertThat(e.getMessage(), equalTo(\"processor [test] doesn't support one or more provided configuration parameters [unused]\"));\n    }\n","date":"2018-08-31 06:04:17","endLine":173,"groupId":"62234","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateUnusedProcessorOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/d7b4ffa816b2acc2131bfd722878593200e64a.src","preCode":"    public void testCreateUnusedProcessorOptions() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(\"unused\", \"value\");\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(ElasticsearchParseException.class, () -> Pipeline.create(\"_id\", pipelineConfig, processorRegistry));\n        assertThat(e.getMessage(), equalTo(\"processor [test] doesn't support one or more provided configuration parameters [unused]\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"13a0d822d0ef425a9b5f27b10a64e20485017833","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-31 06:04:17","modifiedFileCount":"91","status":"M","submitter":"Tal Levy"},{"authorTime":"2021-08-11 21:30:36","codes":[{"authorDate":"2021-08-11 21:30:36","commitOrder":4,"curCode":"    public void testCreateWithPipelineEmptyOnFailureInProcessor() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(Pipeline.ON_FAILURE_KEY, Collections.emptyList());\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        if (metadata != null) {\n            pipelineConfig.put(Pipeline.META_KEY, metadata);\n        }\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(\n            ElasticsearchParseException.class,\n            () -> Pipeline.create(\"_id\", pipelineConfig, processorRegistry, scriptService)\n        );\n        assertThat(e.getMessage(), equalTo(\"[on_failure] processors list cannot be empty\"));\n    }\n","date":"2021-08-11 21:30:36","endLine":144,"groupId":"104438","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testCreateWithPipelineEmptyOnFailureInProcessor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/87/00092bc0f2f6e5f9d5148eddc12c2ec5468c0d.src","preCode":"    public void testCreateWithPipelineEmptyOnFailureInProcessor() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(Pipeline.ON_FAILURE_KEY, Collections.emptyList());\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(\n            ElasticsearchParseException.class,\n            () -> Pipeline.create(\"_id\", pipelineConfig, processorRegistry, scriptService)\n        );\n        assertThat(e.getMessage(), equalTo(\"[on_failure] processors list cannot be empty\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2021-08-11 21:30:36","commitOrder":4,"curCode":"    public void testCreateUnusedProcessorOptions() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(\"unused\", \"value\");\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        if (metadata != null) {\n            pipelineConfig.put(Pipeline.META_KEY, metadata);\n        }\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(\n            ElasticsearchParseException.class,\n            () -> Pipeline.create(\"_id\", pipelineConfig, processorRegistry, scriptService)\n        );\n        assertThat(e.getMessage(), equalTo(\"processor [test] doesn't support one or more provided configuration parameters [unused]\"));\n    }\n","date":"2021-08-11 21:30:36","endLine":188,"groupId":"104438","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testCreateUnusedProcessorOptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/87/00092bc0f2f6e5f9d5148eddc12c2ec5468c0d.src","preCode":"    public void testCreateUnusedProcessorOptions() throws Exception {\n        Map<String, Object> processorConfig = new HashMap<>();\n        processorConfig.put(\"unused\", \"value\");\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(Pipeline.DESCRIPTION_KEY, \"_description\");\n        pipelineConfig.put(Pipeline.VERSION_KEY, versionString);\n        pipelineConfig.put(Pipeline.PROCESSORS_KEY, Collections.singletonList(Collections.singletonMap(\"test\", processorConfig)));\n        Map<String, Processor.Factory> processorRegistry = Collections.singletonMap(\"test\", new TestProcessor.Factory());\n        Exception e = expectThrows(\n            ElasticsearchParseException.class,\n            () -> Pipeline.create(\"_id\", pipelineConfig, processorRegistry, scriptService)\n        );\n        assertThat(e.getMessage(), equalTo(\"processor [test] doesn't support one or more provided configuration parameters [unused]\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/PipelineFactoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"498684a696fb2d81689a9c5e51fbc3c370e234f6","commitMessage":"@@@Add support for _meta field to ingest pipelines (#75905)\n\nWe are adding a _meta field to many of our REST APIs so that users can attach whatever metadata they\nwant. The data in this field will not be used by Elasticsearch. This commit add the _meta field to ingest\npipelines.","date":"2021-08-11 21:30:36","modifiedFileCount":"13","status":"M","submitter":"Keith Massey"}]
