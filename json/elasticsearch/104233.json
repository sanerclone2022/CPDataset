[{"authorTime":"2019-07-16 21:37:04","codes":[{"authorDate":"2019-07-16 21:37:04","commitOrder":1,"curCode":"    public void testLine() {\n        Line line = new Line(new double[]{1, 2}, new double[]{3, 4});\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{10, 20}, new double[]{160, 200});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{10, 15}, new double[]{160, 180}),\n            new Line(new double[]{15, 20}, new double[]{180, -160}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n    }\n","date":"2019-07-16 21:37:04","endLine":93,"groupId":"25896","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLine","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/b5aaff33e0551ed82b12f5c35de612535399dc.src","preCode":"    public void testLine() {\n        Line line = new Line(new double[]{1, 2}, new double[]{3, 4});\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{10, 20}, new double[]{160, 200});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{10, 15}, new double[]{160, 180}),\n            new Line(new double[]{15, 20}, new double[]{180, -160}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeometryIndexerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2019-07-16 21:37:04","commitOrder":1,"curCode":"    public void testMultiLine() {\n        Line line = new Line(new double[]{1, 2}, new double[]{3, 4});\n        MultiLine multiLine = new MultiLine(Collections.singletonList(line));\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n\n        multiLine = new MultiLine(Arrays.asList(\n            line, new Line(new double[]{10, 20}, new double[]{160, 200})\n        ));\n\n        indexed = new MultiLine(Arrays.asList(\n            line,\n            new Line(new double[]{10, 15}, new double[]{160, 180}),\n            new Line(new double[]{15, 20}, new double[]{180, -160}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n    }\n","date":"2019-07-16 21:37:04","endLine":112,"groupId":"25690","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiLine","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/b5aaff33e0551ed82b12f5c35de612535399dc.src","preCode":"    public void testMultiLine() {\n        Line line = new Line(new double[]{1, 2}, new double[]{3, 4});\n        MultiLine multiLine = new MultiLine(Collections.singletonList(line));\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n\n        multiLine = new MultiLine(Arrays.asList(\n            line, new Line(new double[]{10, 20}, new double[]{160, 200})\n        ));\n\n        indexed = new MultiLine(Arrays.asList(\n            line,\n            new Line(new double[]{10, 15}, new double[]{160, 180}),\n            new Line(new double[]{15, 20}, new double[]{180, -160}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeometryIndexerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"}],"commitId":"33ad7928fbba6f2a371c5133685bf46afabc2aef","commitMessage":"@@@Geo: extract dateline handling logic from ShapeBuilders (#44187)\n\nExtracts dateline decomposition logic from ShapeBuilder into a separate\nutility class that is used on the indexing side. The search side\nwill be handled as part of another PR at this time we will remove\nthe decomposition logic from ShapeBuilders as well. This PR also doesn't\nchange any existing logic including bugs.\n\nRelates to #40908","date":"2019-07-16 21:37:04","modifiedFileCount":"8","status":"B","submitter":"Igor Motov"},{"authorTime":"2019-08-10 01:22:00","codes":[{"authorDate":"2019-08-10 01:22:00","commitOrder":2,"curCode":"    public void testLine() {\n        Line line = new Line(new double[]{3, 4}, new double[]{1, 2});\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{160, 200}, new double[]{10, 20});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{160, 180}, new double[]{10, 15}),\n            new Line(new double[]{180, -160}, new double[]{15, 20}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n    }\n","date":"2019-08-10 01:22:00","endLine":94,"groupId":"25896","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLine","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/5b2b688ea1745163ad4c51857f6a392174999f.src","preCode":"    public void testLine() {\n        Line line = new Line(new double[]{1, 2}, new double[]{3, 4});\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{10, 20}, new double[]{160, 200});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{10, 15}, new double[]{160, 180}),\n            new Line(new double[]{15, 20}, new double[]{180, -160}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeometryIndexerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-08-10 01:22:00","commitOrder":2,"curCode":"    public void testMultiLine() {\n        Line line = new Line(new double[]{3, 4}, new double[]{1, 2});\n        MultiLine multiLine = new MultiLine(Collections.singletonList(line));\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n\n        multiLine = new MultiLine(Arrays.asList(\n            line, new Line(new double[]{160, 200}, new double[]{10, 20})\n        ));\n\n        indexed = new MultiLine(Arrays.asList(\n            line,\n            new Line(new double[]{160, 180}, new double[]{10, 15}),\n            new Line(new double[]{180, -160}, new double[]{15, 20}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n    }\n","date":"2019-08-10 01:22:00","endLine":113,"groupId":"25690","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiLine","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/5b2b688ea1745163ad4c51857f6a392174999f.src","preCode":"    public void testMultiLine() {\n        Line line = new Line(new double[]{1, 2}, new double[]{3, 4});\n        MultiLine multiLine = new MultiLine(Collections.singletonList(line));\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n\n        multiLine = new MultiLine(Arrays.asList(\n            line, new Line(new double[]{10, 20}, new double[]{160, 200})\n        ));\n\n        indexed = new MultiLine(Arrays.asList(\n            line,\n            new Line(new double[]{10, 15}, new double[]{160, 180}),\n            new Line(new double[]{15, 20}, new double[]{180, -160}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeometryIndexerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"13a8835e5a8615aeb8304b48fd9e543a83361e13","commitMessage":"@@@Geo: Change order of parameter in Geometries to lon.  lat (#45332)\n\nChanges the order of parameters in Geometries from lat.  lon to lon.  lat\nand moves all Geometry classes are moved to the\norg.elasticsearch.geomtery package.\n\nCloses #45048","date":"2019-08-10 01:22:00","modifiedFileCount":"65","status":"M","submitter":"Igor Motov"},{"authorTime":"2019-09-12 02:53:10","codes":[{"authorDate":"2019-09-12 02:53:10","commitOrder":3,"curCode":"    public void testLine() {\n        Line line = new Line(new double[]{3, 4}, new double[]{1, 2});\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{160, 200}, new double[]{10, 20});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{160, 180}, new double[]{10, 15}),\n            new Line(new double[]{-180, -160}, new double[]{15, 20}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{200, 160}, new double[]{10, 20});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{-160, -180}, new double[]{10, 15}),\n            new Line(new double[]{180, 160}, new double[]{15, 20}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{160, 200, 160}, new double[]{0, 10, 20});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{160, 180}, new double[]{0, 5}),\n            new Line(new double[]{-180, -160, -180}, new double[]{5, 10, 15}),\n            new Line(new double[]{180, 160}, new double[]{15, 20})\n            )\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n    }\n","date":"2019-09-12 02:53:10","endLine":112,"groupId":"25896","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLine","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/b02ea6981129cf01ff532129b610a314a45e2e.src","preCode":"    public void testLine() {\n        Line line = new Line(new double[]{3, 4}, new double[]{1, 2});\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{160, 200}, new double[]{10, 20});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{160, 180}, new double[]{10, 15}),\n            new Line(new double[]{180, -160}, new double[]{15, 20}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeometryIndexerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-09-12 02:53:10","commitOrder":3,"curCode":"    public void testMultiLine() {\n        Line line = new Line(new double[]{3, 4}, new double[]{1, 2});\n        MultiLine multiLine = new MultiLine(Collections.singletonList(line));\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n\n        multiLine = new MultiLine(Arrays.asList(\n            line, new Line(new double[]{160, 200}, new double[]{10, 20})\n        ));\n\n        indexed = new MultiLine(Arrays.asList(\n            line,\n            new Line(new double[]{160, 180}, new double[]{10, 15}),\n            new Line(new double[]{-180, -160}, new double[]{15, 20}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n    }\n","date":"2019-09-12 02:53:10","endLine":131,"groupId":"25690","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiLine","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/b02ea6981129cf01ff532129b610a314a45e2e.src","preCode":"    public void testMultiLine() {\n        Line line = new Line(new double[]{3, 4}, new double[]{1, 2});\n        MultiLine multiLine = new MultiLine(Collections.singletonList(line));\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n\n        multiLine = new MultiLine(Arrays.asList(\n            line, new Line(new double[]{160, 200}, new double[]{10, 20})\n        ));\n\n        indexed = new MultiLine(Arrays.asList(\n            line,\n            new Line(new double[]{160, 180}, new double[]{10, 15}),\n            new Line(new double[]{180, -160}, new double[]{15, 20}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeometryIndexerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"4ab711166886c0ec3b14909feb06123247fdfa04","commitMessage":"@@@Geo: fix indexing of west to east linestrings crossing the antimeridian (#46601)\n\nFixes that way linestrings that are crossing the antimeridian are\nindexed due to a normalization bug these lines were decomposed into\na line segment that was stretching entire globe.\n\nFixes #43775","date":"2019-09-12 02:53:10","modifiedFileCount":"2","status":"M","submitter":"Igor Motov"},{"authorTime":"2019-09-12 02:53:10","codes":[{"authorDate":"2019-10-09 18:35:10","commitOrder":4,"curCode":"    public void testLine() {\n        Line line = new Line(new double[]{3, 4}, new double[]{1, 2});\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{160, 200}, new double[]{10, 20});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{160, 180}, new double[]{10, 15}),\n            new Line(new double[]{-180, -160}, new double[]{15, 20}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{200, 160}, new double[]{10, 20});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{-160, -180}, new double[]{10, 15}),\n            new Line(new double[]{180, 160}, new double[]{15, 20}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{160, 200, 160}, new double[]{0, 10, 20});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{160, 180}, new double[]{0, 5}),\n            new Line(new double[]{-180, -160, -180}, new double[]{5, 10, 15}),\n            new Line(new double[]{180, 160}, new double[]{15, 20})\n        ));\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{0, 720}, new double[]{0, 20});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{0, 180}, new double[]{0, 5}),\n            new Line(new double[]{-180, 180}, new double[]{5, 15}),\n            new Line(new double[]{-180, 0}, new double[]{15, 20})\n        ));\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{160, 180, 180, 200, 160, 140}, new double[]{0, 10, 20, 30, 30, 40});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{160, 180}, new double[]{0, 10}),\n            new Line(new double[]{-180, -180, -160, -180}, new double[]{10, 20, 30, 30}),\n            new Line(new double[]{180, 160, 140}, new double[]{30, 30, 40})\n        ));\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{-70, 180, 900}, new double[]{0, 0, 4});\n\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{-70, 180}, new double[]{0, 0}),\n            new Line(new double[]{-180, 180}, new double[]{0, 2}),\n            new Line(new double[]{-180, 180}, new double[]{2, 4})\n        ));\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{160, 200, 160, 200, 160, 200}, new double[]{0, 10, 20, 30, 40, 50});\n\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{160, 180}, new double[]{0, 5}),\n            new Line(new double[]{-180, -160, -180}, new double[]{5, 10, 15}),\n            new Line(new double[]{180, 160, 180}, new double[]{15, 20, 25}),\n            new Line(new double[]{-180, -160, -180}, new double[]{25, 30, 35}),\n            new Line(new double[]{180, 160, 180}, new double[]{35, 40, 45}),\n            new Line(new double[]{-180, -160}, new double[]{45, 50})\n        ));\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n    }\n","date":"2019-10-09 18:35:10","endLine":151,"groupId":"104233","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testLine","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0b/2f2945aba4c22a2b031a3dddc58d693c7c939f.src","preCode":"    public void testLine() {\n        Line line = new Line(new double[]{3, 4}, new double[]{1, 2});\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{160, 200}, new double[]{10, 20});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{160, 180}, new double[]{10, 15}),\n            new Line(new double[]{-180, -160}, new double[]{15, 20}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{200, 160}, new double[]{10, 20});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{-160, -180}, new double[]{10, 15}),\n            new Line(new double[]{180, 160}, new double[]{15, 20}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n\n        line = new Line(new double[]{160, 200, 160}, new double[]{0, 10, 20});\n        indexed = new MultiLine(Arrays.asList(\n            new Line(new double[]{160, 180}, new double[]{0, 5}),\n            new Line(new double[]{-180, -160, -180}, new double[]{5, 10, 15}),\n            new Line(new double[]{180, 160}, new double[]{15, 20})\n            )\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(line));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeometryIndexerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2019-09-12 02:53:10","commitOrder":4,"curCode":"    public void testMultiLine() {\n        Line line = new Line(new double[]{3, 4}, new double[]{1, 2});\n        MultiLine multiLine = new MultiLine(Collections.singletonList(line));\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n\n        multiLine = new MultiLine(Arrays.asList(\n            line, new Line(new double[]{160, 200}, new double[]{10, 20})\n        ));\n\n        indexed = new MultiLine(Arrays.asList(\n            line,\n            new Line(new double[]{160, 180}, new double[]{10, 15}),\n            new Line(new double[]{-180, -160}, new double[]{15, 20}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n    }\n","date":"2019-09-12 02:53:10","endLine":131,"groupId":"104233","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiLine","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/b02ea6981129cf01ff532129b610a314a45e2e.src","preCode":"    public void testMultiLine() {\n        Line line = new Line(new double[]{3, 4}, new double[]{1, 2});\n        MultiLine multiLine = new MultiLine(Collections.singletonList(line));\n        Geometry indexed = line;\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n\n        multiLine = new MultiLine(Arrays.asList(\n            line, new Line(new double[]{160, 200}, new double[]{10, 20})\n        ));\n\n        indexed = new MultiLine(Arrays.asList(\n            line,\n            new Line(new double[]{160, 180}, new double[]{10, 15}),\n            new Line(new double[]{-180, -160}, new double[]{15, 20}))\n        );\n\n        assertEquals(indexed, indexer.prepareForIndexing(multiLine));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeometryIndexerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"N"}],"commitId":"f9cb29450ecaa07de084e90bb9f6d2ff8b9b0e34","commitMessage":"@@@Geo: Fixes indexing of linestrings that go around the globe (#47471)\n\nLINESTRING (0 0.  720 20) is now decomposed into 3 strings:\nmultilinestring (\n  (0.0 0.0.  180.0 5.0). \n  (-180.0 5.0.  180 15). \n  (-180.0 15.0.  0 20)\n)\n\nIt also fixes issues with linestrings that intersect antimeridian\nmore than 5 times.\n\nFixes #43837\nFixes #43826\n","date":"2019-10-09 18:35:10","modifiedFileCount":"3","status":"M","submitter":"Igor Motov"}]
