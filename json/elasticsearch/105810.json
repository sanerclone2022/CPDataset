[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\", new Text(\"type\"),\n            Collections.emptyMap()), new SearchHit(3, \"ID\", new Text(\"type\"),\n            Collections.emptyMap())}, 1, 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse response = mockSearchPhaseContext.buildSearchResponse(internalSearchResponse, null);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(response, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))}, 1,\n            1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(reference.get());\n        assertEquals(0, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-04-26 03:22:53","endLine":185,"groupId":"28361","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailOneItemFailsEntirePhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/80d48c11a430fc2d01961025208fd3ff90751a.src","preCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\", new Text(\"type\"),\n            Collections.emptyMap()), new SearchHit(3, \"ID\", new Text(\"type\"),\n            Collections.emptyMap())}, 1, 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse response = mockSearchPhaseContext.buildSearchResponse(internalSearchResponse, null);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(response, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))}, 1,\n            1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(reference.get());\n        assertEquals(0, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))}, 1, 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-04-26 03:22:53","endLine":216,"groupId":"28362","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSkipPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/80d48c11a430fc2d01961025208fd3ff90751a.src","preCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))}, 1, 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-09-06 15:17:40","codes":[{"authorDate":"2018-09-06 15:17:40","commitOrder":2,"curCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\", new Text(\"type\"),\n            Collections.emptyMap()), new SearchHit(3, \"ID\", new Text(\"type\"),\n            Collections.emptyMap())}, 1, 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse response = mockSearchPhaseContext.buildSearchResponse(internalSearchResponse, null);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(response, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))}, 1,\n            1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(reference.get());\n        assertEquals(0, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-09-06 15:17:40","endLine":185,"groupId":"28361","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailOneItemFailsEntirePhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/19ee58f9fb8a6cd2b360d0beecdaa6d22205ce.src","preCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\", new Text(\"type\"),\n            Collections.emptyMap()), new SearchHit(3, \"ID\", new Text(\"type\"),\n            Collections.emptyMap())}, 1, 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse response = mockSearchPhaseContext.buildSearchResponse(internalSearchResponse, null);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(response, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))}, 1,\n            1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(reference.get());\n        assertEquals(0, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2018-09-06 15:17:40","commitOrder":2,"curCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))}, 1, 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-09-06 15:17:40","endLine":216,"groupId":"28362","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSkipPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/19ee58f9fb8a6cd2b360d0beecdaa6d22205ce.src","preCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"search.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))}, 1, 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"b1257d873bc8541b15d7c933a383344c151a1333","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-06 15:17:40","modifiedFileCount":"43","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-11-02 00:05:41","codes":[{"authorDate":"2018-11-02 00:05:41","commitOrder":3,"curCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\", new Text(\"type\"),\n            Collections.emptyMap()), new SearchHit(3, \"ID\", new Text(\"type\"),\n            Collections.emptyMap())}, 1, 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse response = mockSearchPhaseContext.buildSearchResponse(internalSearchResponse, null);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(response, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))}, 1,\n            1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(reference.get());\n        assertEquals(0, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-11-02 01:13:02","endLine":180,"groupId":"28361","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailOneItemFailsEntirePhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9f/e4f92ef2b1b36b28b96d283f65a0bbfc14b44b.src","preCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\", new Text(\"type\"),\n            Collections.emptyMap()), new SearchHit(3, \"ID\", new Text(\"type\"),\n            Collections.emptyMap())}, 1, 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse response = mockSearchPhaseContext.buildSearchResponse(internalSearchResponse, null);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(response, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))}, 1,\n            1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(reference.get());\n        assertEquals(0, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2018-11-02 00:05:41","commitOrder":3,"curCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))}, 1, 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-11-02 01:13:02","endLine":209,"groupId":"28362","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSkipPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9f/e4f92ef2b1b36b28b96d283f65a0bbfc14b44b.src","preCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(\n            Settings.builder().put(\"cluster.remote.connect\", false).build(), null, null) {\n\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))}, 1, 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"}],"commitId":"c3cf7dd305b3d4636405c292659dbff05307f146","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-11-02 01:13:02","modifiedFileCount":"456","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-12-06 02:49:06","codes":[{"authorDate":"2018-12-06 02:49:06","commitOrder":4,"curCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\", new Text(\"type\"),\n            Collections.emptyMap()), new SearchHit(3, \"ID\", new Text(\"type\"),\n            Collections.emptyMap())}, new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse response = mockSearchPhaseContext.buildSearchResponse(internalSearchResponse, null);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(response, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(reference.get());\n        assertEquals(0, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-12-06 02:49:06","endLine":181,"groupId":"28361","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailOneItemFailsEntirePhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/78a2cdd86bb23bef474f566049523c023ad2b0.src","preCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\", new Text(\"type\"),\n            Collections.emptyMap()), new SearchHit(3, \"ID\", new Text(\"type\"),\n            Collections.emptyMap())}, 1, 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse response = mockSearchPhaseContext.buildSearchResponse(internalSearchResponse, null);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(response, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))}, 1,\n            1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(reference.get());\n        assertEquals(0, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2018-12-06 02:49:06","commitOrder":4,"curCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2018-12-06 02:49:06","endLine":211,"groupId":"26158","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSkipPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/78a2cdd86bb23bef474f566049523c023ad2b0.src","preCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))}, 1, 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"18866c4c0b1ad640f8554dc4b41765a04dcefa04","commitMessage":"@@@Make hits.total an object in the search response (#35849)\n\nThis commit changes the format of the `hits.total` in the search response to be an object with\na `value` and a `relation`. The `value` indicates the number of hits that match the query and the\n`relation` indicates whether the number is accurate (in which case the relation is equals to `eq`)\nor a lower bound of the total (in which case it is equals to `gte`).\nThis change also adds a parameter called `rest_total_hits_as_int` that can be used in the\nsearch APIs to opt out from this change (retrieve the total hits as a number in the rest response).\nNote that currently all search responses are accurate (`track_total_hits: true`) or they don't contain\n`hits.total` (`track_total_hits: true`). We'll add a way to get a lower bound of the total hits in a\nfollow up (to allow numbers to be passed to `track_total_hits`).\n\nRelates #33028","date":"2018-12-06 02:49:06","modifiedFileCount":"234","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2019-06-19 17:18:40","codes":[{"authorDate":"2019-06-19 17:18:40","commitOrder":5,"curCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\", new Text(\"type\"),\n            Collections.emptyMap()), new SearchHit(3, \"ID\", new Text(\"type\"),\n            Collections.emptyMap())}, new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse searchResponse = new SearchResponse(internalSearchResponse, null, 1, 1, 0, 0,\n                    ShardSearchFailure.EMPTY_ARRAY, SearchResponse.Clusters.EMPTY);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(searchResponse, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(r, null);\n                }\n            }\n        );\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(mockSearchPhaseContext.searchResponse.get());\n        assertEquals(0, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2019-06-19 17:18:40","endLine":178,"groupId":"28361","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailOneItemFailsEntirePhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/01290fb65b89fcc21315705bf2ff8971446175.src","preCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\", new Text(\"type\"),\n            Collections.emptyMap()), new SearchHit(3, \"ID\", new Text(\"type\"),\n            Collections.emptyMap())}, new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse response = mockSearchPhaseContext.buildSearchResponse(internalSearchResponse, null);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(response, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(reference.get());\n        assertEquals(0, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2019-06-19 17:18:40","commitOrder":5,"curCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(r, null);\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2019-06-19 17:18:40","endLine":207,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSkipPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/01290fb65b89fcc21315705bf2ff8971446175.src","preCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        AtomicReference<SearchResponse> reference = new AtomicReference<>();\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() throws IOException {\n                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(reference.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"54d3a4a30a7b4bcbed70d25927ced67f71bb1e57","commitMessage":"@@@SearchPhaseContext to not extend ActionListener (#43269)\n\nThe fact that SearchPhaseContext extends ActionListener makes it hard\nto reason about when the original listener is notified and to trace\nthose calls. Also.  the corresponding onFailure and onResponse were\nonly needed in two places.  one each.  where they can be replaced by a\nmore intuitive call.  like sendSearchResponse for onResponse.","date":"2019-06-19 17:18:40","modifiedFileCount":"7","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2019-09-24 02:14:54","codes":[{"authorDate":"2019-09-24 02:14:54","commitOrder":6,"curCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\",\n            Collections.emptyMap()), new SearchHit(3, \"ID\",\n            Collections.emptyMap())}, new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse searchResponse = new SearchResponse(internalSearchResponse, null, 1, 1, 0, 0,\n                    ShardSearchFailure.EMPTY_ARRAY, SearchResponse.Clusters.EMPTY);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(searchResponse, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(r, null);\n                }\n            }\n        );\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(mockSearchPhaseContext.searchResponse.get());\n        assertEquals(0, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2019-09-24 02:14:54","endLine":177,"groupId":"28361","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailOneItemFailsEntirePhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/80/fed5b2a262bbf757c309ba26435b7e649dbb2e.src","preCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\", new Text(\"type\"),\n            Collections.emptyMap()), new SearchHit(3, \"ID\", new Text(\"type\"),\n            Collections.emptyMap())}, new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse searchResponse = new SearchResponse(internalSearchResponse, null, 1, 1, 0, 0,\n                    ShardSearchFailure.EMPTY_ARRAY, SearchResponse.Clusters.EMPTY);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(searchResponse, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(r, null);\n                }\n            }\n        );\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(mockSearchPhaseContext.searchResponse.get());\n        assertEquals(0, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2019-09-24 02:14:54","commitOrder":6,"curCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(r, null);\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","date":"2019-09-24 02:14:54","endLine":206,"groupId":"39207","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSkipPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/80/fed5b2a262bbf757c309ba26435b7e649dbb2e.src","preCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\", new Text(\"type\"),\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\", new Text(\"type\"),\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(r, null);\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"c1f99e2d75b8aa6a5e146971e6db876065436902","commitMessage":"@@@Remove `_type` from SearchHit (#46942)\n\nThis commit removes the `_type` field from all search hit responses.\n\nRelates to #41059 ","date":"2019-09-24 02:14:54","modifiedFileCount":"57","status":"M","submitter":"Alan Woodward"},{"authorTime":"2019-10-25 19:10:09","codes":[{"authorDate":"2019-10-25 19:10:09","commitOrder":7,"curCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\",\n            Collections.emptyMap()), new SearchHit(3, \"ID\",\n            Collections.emptyMap())}, new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse searchResponse = new SearchResponse(internalSearchResponse, null, 1, 1, 0, 0,\n                    ShardSearchFailure.EMPTY_ARRAY, SearchResponse.Clusters.EMPTY);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(searchResponse, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","date":"2019-10-25 19:10:09","endLine":161,"groupId":"28361","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailOneItemFailsEntirePhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5c/ef855e46697a3010ea29b5530ae8ae2c74f2b2.src","preCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\",\n            Collections.emptyMap()), new SearchHit(3, \"ID\",\n            Collections.emptyMap())}, new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse searchResponse = new SearchResponse(internalSearchResponse, null, 1, 1, 0, 0,\n                    ShardSearchFailure.EMPTY_ARRAY, SearchResponse.Clusters.EMPTY);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(searchResponse, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(r, null);\n                }\n            }\n        );\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(mockSearchPhaseContext.searchResponse.get());\n        assertEquals(0, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2019-10-25 19:10:09","commitOrder":7,"curCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","date":"2019-10-25 19:10:09","endLine":182,"groupId":"39207","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSkipPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5c/ef855e46697a3010ea29b5530ae8ae2c74f2b2.src","preCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->\n            new SearchPhase(\"test\") {\n                @Override\n                public void run() {\n                    mockSearchPhaseContext.sendSearchResponse(r, null);\n                }\n            }\n        );\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"461c0cd4aa3fb7cd66dd0bc52a1b1478174c57fb","commitMessage":"@@@Remove response search phase from ExpandSearchPhase (#48401)\n\nThe expand phase is always created providing a function that builds\nthe next phase to be run.  which has a single purpose: sending the\nresponse back. Such small search phase is not necessary and causes some\nissues when reporting search progress and counting the search phases\nthat need to be executed and that are already executed. We can simply\nrather send back the response.  without creating a specific phase for that.","date":"2019-10-25 19:10:09","modifiedFileCount":"4","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-03-30 21:29:47","codes":[{"authorDate":"2020-03-30 21:29:47","commitOrder":8,"curCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\",\n            Collections.emptyMap(), Collections.emptyMap()), new SearchHit(3, \"ID\",\n            Collections.emptyMap(), Collections.emptyMap())}, new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse searchResponse = new SearchResponse(internalSearchResponse, null, 1, 1, 0, 0,\n                    ShardSearchFailure.EMPTY_ARRAY, SearchResponse.Clusters.EMPTY);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(searchResponse, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\",\n                Collections.singletonList(collapseValue))), Collections.emptyMap()),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\",\n                    Collections.singletonList(collapseValue))), Collections.emptyMap())},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","date":"2020-03-30 21:29:47","endLine":163,"groupId":"28361","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailOneItemFailsEntirePhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bc/e5c5567eb71c48f715e45e5e0c5673216c1eff.src","preCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\",\n            Collections.emptyMap()), new SearchHit(3, \"ID\",\n            Collections.emptyMap())}, new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse searchResponse = new SearchResponse(internalSearchResponse, null, 1, 1, 0, 0,\n                    ShardSearchFailure.EMPTY_ARRAY, SearchResponse.Clusters.EMPTY);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(searchResponse, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue)))),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(collapseValue))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2020-03-30 21:29:47","commitOrder":8,"curCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\",\n                Collections.singletonList(null))), Collections.emptyMap()),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\",\n                    Collections.singletonList(null))), Collections.emptyMap())},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","date":"2020-03-30 21:29:47","endLine":186,"groupId":"39207","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testSkipPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bc/e5c5567eb71c48f715e45e5e0c5673216c1eff.src","preCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null)))),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\", Collections.singletonList(null))))},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"128bcc59d802b2e1a6062edb09a302d5e79ab9f6","commitMessage":"@@@Search hit refactoring (#41656)\n\nRefactor SearchHit to have separate document and meta fields.\nThis is a part of bigger refactoring of issue #24422 to remove\ndependency on MapperService to check if a field is metafield.\n\nRelates to PR: #38373\nRelates to issue #24422","date":"2020-03-30 21:29:47","modifiedFileCount":"34","status":"M","submitter":"sandmannn"},{"authorTime":"2020-10-15 00:13:36","codes":[{"authorDate":"2020-10-15 00:13:36","commitOrder":9,"curCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\",\n            Collections.emptyMap(), Collections.emptyMap()), new SearchHit(3, \"ID\",\n            Collections.emptyMap(), Collections.emptyMap())}, new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse searchResponse = new SearchResponse(internalSearchResponse, null, 1, 1, 0, 0,\n                    ShardSearchFailure.EMPTY_ARRAY, SearchResponse.Clusters.EMPTY);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(searchResponse, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\",\n                Collections.singletonList(collapseValue))), Collections.emptyMap()),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\",\n                    Collections.singletonList(collapseValue))), Collections.emptyMap())},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","date":"2020-10-15 00:13:36","endLine":163,"groupId":"105810","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailOneItemFailsEntirePhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/be/b4ef6d66e6f32092914e0af15d7be1e4b3b900.src","preCode":"    public void testFailOneItemFailsEntirePhase() throws IOException {\n        AtomicBoolean executedMultiSearch = new AtomicBoolean(false);\n\n        SearchHits collapsedHits = new SearchHits(new SearchHit[]{new SearchHit(2, \"ID\",\n            Collections.emptyMap(), Collections.emptyMap()), new SearchHit(3, \"ID\",\n            Collections.emptyMap(), Collections.emptyMap())}, new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        String collapseValue = randomBoolean() ? null : \"boom\";\n        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()\n            .collapse(new CollapseBuilder(\"someField\").setInnerHits(new InnerHitBuilder().setName(\"foobarbaz\"))));\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n                assertTrue(executedMultiSearch.compareAndSet(false, true));\n                InternalSearchResponse internalSearchResponse = new InternalSearchResponse(collapsedHits,\n                    null, null, null, false, null, 1);\n                SearchResponse searchResponse = new SearchResponse(internalSearchResponse, null, 1, 1, 0, 0,\n                    ShardSearchFailure.EMPTY_ARRAY, SearchResponse.Clusters.EMPTY);\n                listener.onResponse(new MultiSearchResponse(\n                    new MultiSearchResponse.Item[]{\n                            new MultiSearchResponse.Item(null, new RuntimeException(\"boom\")),\n                            new MultiSearchResponse.Item(searchResponse, null)\n                    }, randomIntBetween(1, 10000)));\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\",\n                Collections.singletonList(collapseValue))), Collections.emptyMap()),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\",\n                    Collections.singletonList(collapseValue))), Collections.emptyMap())},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        assertThat(mockSearchPhaseContext.phaseFailure.get(), Matchers.instanceOf(RuntimeException.class));\n        assertEquals(\"boom\", mockSearchPhaseContext.phaseFailure.get().getMessage());\n        assertNotNull(mockSearchPhaseContext.phaseFailure.get());\n        assertNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2020-10-15 00:13:36","commitOrder":9,"curCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\",\n                Collections.singletonList(null))), Collections.emptyMap()),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\",\n                    Collections.singletonList(null))), Collections.emptyMap())},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","date":"2020-10-15 00:13:36","endLine":186,"groupId":"105810","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testSkipPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/be/b4ef6d66e6f32092914e0af15d7be1e4b3b900.src","preCode":"    public void testSkipPhase() throws IOException {\n        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);\n        mockSearchPhaseContext.searchTransport = new SearchTransportService(null, null) {\n            @Override\n            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {\n              fail(\"no collapsing here\");\n            }\n        };\n\n        SearchHits hits = new SearchHits(new SearchHit[]{new SearchHit(1, \"ID\",\n            Collections.singletonMap(\"someField\", new DocumentField(\"someField\",\n                Collections.singletonList(null))), Collections.emptyMap()),\n            new SearchHit(2, \"ID2\",\n                Collections.singletonMap(\"someField\", new DocumentField(\"someField\",\n                    Collections.singletonList(null))), Collections.emptyMap())},\n            new TotalHits(1, TotalHits.Relation.EQUAL_TO), 1.0F);\n        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);\n        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, null);\n        phase.run();\n        mockSearchPhaseContext.assertNoFailure();\n        assertNotNull(mockSearchPhaseContext.searchResponse.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"4ee18cd9ae1a73739b30a91afd06ae7ecd20a499","commitMessage":"@@@Cancel search on shard failure when partial results disallowed (#63520)\n\nIf the partial results parameter is false (which defaults to true).  then \nwe should cancel the search request when it hits a shard failure because \nthe caller won't consume the partial results.\n\nCloses #60278","date":"2020-10-15 00:13:36","modifiedFileCount":"13","status":"M","submitter":"Nhat Nguyen"}]
