[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(211);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-04-26 03:22:53","endLine":1304,"groupId":"33158","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/a53d650ad327d8b991fb546f28b255cecbd9ef.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(211);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1285,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 22, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(299);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(286);\n        match(T__0);\n        setState(295);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(287);\n          expression();\n          setState(292);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(288);\n            match(T__2);\n            setState(289);\n            expression();\n            }\n            }\n            setState(294);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(297);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(298);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-04-26 03:22:53","endLine":1794,"groupId":"47120","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e9/d7ff2639954dabb3b71908130b41d6a2f70236.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 22, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(299);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(286);\n        match(T__0);\n        setState(295);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(287);\n          expression();\n          setState(292);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(288);\n            match(T__2);\n            setState(289);\n            expression();\n            }\n            }\n            setState(294);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(297);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(298);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1734,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-07-12 15:57:39","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(211);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-04-26 03:22:53","endLine":1304,"groupId":"33158","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/a53d650ad327d8b991fb546f28b255cecbd9ef.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(211);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1285,"status":"N"},{"authorDate":"2018-07-12 15:57:39","commitOrder":2,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(321);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(308);\n        match(T__0);\n        setState(317);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(309);\n          expression();\n          setState(314);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(310);\n            match(T__2);\n            setState(311);\n            expression();\n            }\n            }\n            setState(316);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(319);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(320);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-07-12 15:57:39","endLine":1868,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/a1b062feebf630d4b59bd1ded5dec79c7798c1.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 22, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(299);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(286);\n        match(T__0);\n        setState(295);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(287);\n          expression();\n          setState(292);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(288);\n            match(T__2);\n            setState(289);\n            expression();\n            }\n            }\n            setState(294);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(297);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(298);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1808,"status":"M"}],"commitId":"4192f387b41fd02114bae3dba743f701e8bf61e2","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-12 15:57:39","modifiedFileCount":"60","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-07-18 18:41:23","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(211);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-04-26 03:22:53","endLine":1304,"groupId":"33158","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/a53d650ad327d8b991fb546f28b255cecbd9ef.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(211);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1285,"status":"N"},{"authorDate":"2018-07-18 18:41:23","commitOrder":3,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(323);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(310);\n        match(T__0);\n        setState(319);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(311);\n          expression();\n          setState(316);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(312);\n            match(T__2);\n            setState(313);\n            expression();\n            }\n            }\n            setState(318);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(321);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(322);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-07-18 18:41:23","endLine":1869,"groupId":"36486","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/1758dadbc3a2ce81a4fd8df65e14e6c51442db.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(321);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(308);\n        match(T__0);\n        setState(317);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(309);\n          expression();\n          setState(314);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(310);\n            match(T__2);\n            setState(311);\n            expression();\n            }\n            }\n            setState(316);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(319);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(320);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1809,"status":"M"}],"commitId":"6c77449a87764147099b1e35c0ec191de3202d7a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-18 18:41:23","modifiedFileCount":"222","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-07-18 18:41:23","codes":[{"authorDate":"2018-08-29 22:28:23","commitOrder":4,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-08-29 22:28:23","endLine":1297,"groupId":"33158","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/823ecfda30805083ccee1318afbacf592c0e76.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(211);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1278,"status":"M"},{"authorDate":"2018-07-18 18:41:23","commitOrder":4,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(323);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(310);\n        match(T__0);\n        setState(319);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(311);\n          expression();\n          setState(316);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(312);\n            match(T__2);\n            setState(313);\n            expression();\n            }\n            }\n            setState(318);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(321);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(322);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-07-18 18:41:23","endLine":1869,"groupId":"36486","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/1758dadbc3a2ce81a4fd8df65e14e6c51442db.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(323);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(310);\n        match(T__0);\n        setState(319);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(311);\n          expression();\n          setState(316);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(312);\n            match(T__2);\n            setState(313);\n            expression();\n            }\n            }\n            setState(318);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(321);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(322);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1809,"status":"N"}],"commitId":"454ce99b01ceb7a47e2652e783a9c833c8dbec30","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-29 22:28:23","modifiedFileCount":"178","status":"M","submitter":"Gordon Brown"},{"authorTime":"2018-09-05 16:48:48","codes":[{"authorDate":"2018-08-29 22:28:23","commitOrder":5,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-08-29 22:28:23","endLine":1297,"groupId":"33158","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/823ecfda30805083ccee1318afbacf592c0e76.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1278,"status":"N"},{"authorDate":"2018-09-05 16:48:48","commitOrder":5,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(316);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(303);\n        match(T__0);\n        setState(312);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(304);\n          expression();\n          setState(309);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(305);\n            match(T__2);\n            setState(306);\n            expression();\n            }\n            }\n            setState(311);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(314);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(315);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-05 16:48:48","endLine":1998,"groupId":"36486","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/f5b0cb09d760d20697333cd3f1abbb49f48511.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(323);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(310);\n        match(T__0);\n        setState(319);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(311);\n          expression();\n          setState(316);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(312);\n            match(T__2);\n            setState(313);\n            expression();\n            }\n            }\n            setState(318);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(321);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(322);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1938,"status":"M"}],"commitId":"f00a28a909be71e17f0d1bc4c4a6ee15c5fdd0cb","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-05 16:48:48","modifiedFileCount":"122","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-19 23:43:26","codes":[{"authorDate":"2018-08-29 22:28:23","commitOrder":6,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-08-29 22:28:23","endLine":1297,"groupId":"33158","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/823ecfda30805083ccee1318afbacf592c0e76.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1278,"status":"N"},{"authorDate":"2018-09-19 23:43:26","commitOrder":6,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(318);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(305);\n        match(T__0);\n        setState(314);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(306);\n          expression();\n          setState(311);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(307);\n            match(T__2);\n            setState(308);\n            expression();\n            }\n            }\n            setState(313);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(316);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(317);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-19 23:43:26","endLine":1998,"groupId":"36486","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/24/6de0cf1a9fe535e4d80fdb9250c32e969c7db3.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(316);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(303);\n        match(T__0);\n        setState(312);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(304);\n          expression();\n          setState(309);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(305);\n            match(T__2);\n            setState(306);\n            expression();\n            }\n            }\n            setState(311);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(314);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(315);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1938,"status":"M"}],"commitId":"81e9150c7a60ca6efac26c57cd5aaa60b04641a4","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-19 23:43:26","modifiedFileCount":"75","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-10-23 04:09:37","codes":[{"authorDate":"2018-08-29 22:28:23","commitOrder":7,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-08-29 22:28:23","endLine":1297,"groupId":"33158","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/823ecfda30805083ccee1318afbacf592c0e76.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1278,"status":"N"},{"authorDate":"2018-10-23 04:09:37","commitOrder":7,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(322);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(309);\n        match(T__0);\n        setState(318);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(310);\n          expression();\n          setState(315);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(311);\n            match(T__2);\n            setState(312);\n            expression();\n            }\n            }\n            setState(317);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(320);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(321);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-10-23 04:09:37","endLine":2020,"groupId":"36486","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/1cd058c08a66d5196a56ed82ba152caf75ecfc.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(318);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(305);\n        match(T__0);\n        setState(314);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(306);\n          expression();\n          setState(311);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(307);\n            match(T__2);\n            setState(308);\n            expression();\n            }\n            }\n            setState(313);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(316);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(317);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1960,"status":"M"}],"commitId":"67bfdb16ad0a1039686d3a74b1705c613e96e231","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-10-23 04:09:37","modifiedFileCount":"190","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-10-24 00:43:46","codes":[{"authorDate":"2018-08-29 22:28:23","commitOrder":8,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-08-29 22:28:23","endLine":1297,"groupId":"33158","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/823ecfda30805083ccee1318afbacf592c0e76.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1278,"status":"N"},{"authorDate":"2018-10-24 00:43:46","commitOrder":8,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(324);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(311);\n        match(T__0);\n        setState(320);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(312);\n          expression();\n          setState(317);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(313);\n            match(T__2);\n            setState(314);\n            expression();\n            }\n            }\n            setState(319);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(322);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(323);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-10-24 00:43:46","endLine":2021,"groupId":"36486","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/25bd18dc90f87f9d9ba5f32b511de90a1d6f35.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(322);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(309);\n        match(T__0);\n        setState(318);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(310);\n          expression();\n          setState(315);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(311);\n            match(T__2);\n            setState(312);\n            expression();\n            }\n            }\n            setState(317);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(320);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(321);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1961,"status":"M"}],"commitId":"62ac2fa5ec57a4701323d1c2a0077e2179a7d422","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-10-24 00:43:46","modifiedFileCount":"121","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-11-21 21:45:59","codes":[{"authorDate":"2018-08-29 22:28:23","commitOrder":9,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-08-29 22:28:23","endLine":1297,"groupId":"33158","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/823ecfda30805083ccee1318afbacf592c0e76.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1278,"status":"N"},{"authorDate":"2018-11-21 21:45:59","commitOrder":9,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(330);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(317);\n        match(T__0);\n        setState(326);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n          {\n          setState(318);\n          expression();\n          setState(323);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(319);\n            match(T__2);\n            setState(320);\n            expression();\n            }\n            }\n            setState(325);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(328);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(329);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-21 21:45:59","endLine":2070,"groupId":"46518","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/baeceb633f830ab04d05d594b0362242263de3.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(324);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(311);\n        match(T__0);\n        setState(320);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << LEFT) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RIGHT) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(312);\n          expression();\n          setState(317);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(313);\n            match(T__2);\n            setState(314);\n            expression();\n            }\n            }\n            setState(319);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(322);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(323);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2010,"status":"M"}],"commitId":"f0a3d326022b92ead0a2b2bf9c5155a77d8ad8c8","commitMessage":"@@@SQL: Introduce INTERVAL support (#35521)\n\nIntroduce INTERVAL as a DataType\nAdd INTERVAL to the grammar which supports the standard SQL declaration\n (without precision):\n > INTERVAL '1 23:45:01.123456789' DAY TO SECOND\n but also number for single unit intervals:\n > INTERVAL 1 YEAR\n as well as the plurals of the units:\n > INTERVAL 2 YEARS\nInterval are internally supported as just another Literal being backed\n by java.time.Period and java.time.Duration\nMove JDBC away from JDBCType enum to SQLType interface\nRefactor DataType by moving it into server core and adding dedicated (and\n much simpler) JDBC driver type\nImprove internal JDBC conversion by normalizing on the DataType\nRename JDBC columnInfo to JdbcColumnInfo to differentiate between it and\n the SQL ColumnInfo\n\nFix #29990","date":"2018-11-21 21:45:59","modifiedFileCount":"74","status":"M","submitter":"Costin Leau"},{"authorTime":"2018-11-23 23:14:52","codes":[{"authorDate":"2018-08-29 22:28:23","commitOrder":10,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-08-29 22:28:23","endLine":1297,"groupId":"33158","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/823ecfda30805083ccee1318afbacf592c0e76.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1278,"status":"N"},{"authorDate":"2018-11-23 23:14:52","commitOrder":10,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(328);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(315);\n        match(T__0);\n        setState(324);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n          {\n          setState(316);\n          expression();\n          setState(321);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(317);\n            match(T__2);\n            setState(318);\n            expression();\n            }\n            }\n            setState(323);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(326);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(327);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-23 23:14:52","endLine":2069,"groupId":"46518","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/d33d9ca80301231b12903937c0cc10dea96c75.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(330);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(317);\n        match(T__0);\n        setState(326);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n          {\n          setState(318);\n          expression();\n          setState(323);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(319);\n            match(T__2);\n            setState(320);\n            expression();\n            }\n            }\n            setState(325);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(328);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(329);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2009,"status":"M"}],"commitId":"e22a83554eb0bba81e3f7e1b3f353a243fac0c7b","commitMessage":"@@@SQL: Polish grammar for intervals (#35853)\n\n","date":"2018-11-23 23:14:52","modifiedFileCount":"6","status":"M","submitter":"Costin Leau"},{"authorTime":"2018-11-26 17:26:24","codes":[{"authorDate":"2018-08-29 22:28:23","commitOrder":11,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-08-29 22:28:23","endLine":1297,"groupId":"33158","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/823ecfda30805083ccee1318afbacf592c0e76.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1278,"status":"N"},{"authorDate":"2018-11-26 17:26:24","commitOrder":11,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(334);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(321);\n        match(T__0);\n        setState(330);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n          {\n          setState(322);\n          expression();\n          setState(327);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(323);\n            match(T__2);\n            setState(324);\n            expression();\n            }\n            }\n            setState(329);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(332);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(333);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-26 17:26:24","endLine":2098,"groupId":"46518","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/35baffc7bc4a4f227b022f7316a182f23afc47.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(328);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(315);\n        match(T__0);\n        setState(324);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n          {\n          setState(316);\n          expression();\n          setState(321);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(317);\n            match(T__2);\n            setState(318);\n            expression();\n            }\n            }\n            setState(323);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(326);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(327);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2038,"status":"M"}],"commitId":"971299baf4b258dc19c45354417a140a6e9f7586","commitMessage":"@@@SQL: Add filtering to SYS TYPES (#35852)\n\nFix #35342","date":"2018-11-26 17:26:24","modifiedFileCount":"5","status":"M","submitter":"Costin Leau"},{"authorTime":"2018-12-14 21:42:36","codes":[{"authorDate":"2018-08-29 22:28:23","commitOrder":12,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-08-29 22:28:23","endLine":1297,"groupId":"33158","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/823ecfda30805083ccee1318afbacf592c0e76.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1278,"status":"N"},{"authorDate":"2018-12-14 21:42:36","commitOrder":12,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(336);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(323);\n        match(T__0);\n        setState(332);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(324);\n          expression();\n          setState(329);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(325);\n            match(T__2);\n            setState(326);\n            expression();\n            }\n            }\n            setState(331);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(334);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(335);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-12-14 21:42:36","endLine":2104,"groupId":"46518","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/56/996e4c4c2e4590c7368c0669388649d3700d05.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(334);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(321);\n        match(T__0);\n        setState(330);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n          {\n          setState(322);\n          expression();\n          setState(327);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(323);\n            match(T__2);\n            setState(324);\n            expression();\n            }\n            }\n            setState(329);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(332);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(333);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2044,"status":"M"}],"commitId":"f502ca53d4ff1b330697b01b6d9d5dec063f8581","commitMessage":"@@@SQL: Introduce NOW/CURRENT_TIMESTAMP function (#36562)\n\nAdd CURRENT_TIMESTAMP as keyword as well function alongside NOW() \n These return the current date/time for the  given query.  computed when\n the statement reaches the server. For completeness.  CURRENT_TIMESTAMP\n also accepts precision as an optional parameter.\n\nFix #36534","date":"2018-12-14 21:42:36","modifiedFileCount":"34","status":"M","submitter":"Costin Leau"},{"authorTime":"2019-01-12 05:08:00","codes":[{"authorDate":"2018-08-29 22:28:23","commitOrder":13,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-08-29 22:28:23","endLine":1297,"groupId":"33158","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/823ecfda30805083ccee1318afbacf592c0e76.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1278,"status":"N"},{"authorDate":"2019-01-12 05:08:00","commitOrder":13,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(336);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(323);\n        match(T__0);\n        setState(332);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(324);\n          expression();\n          setState(329);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(325);\n            match(T__2);\n            setState(326);\n            expression();\n            }\n            }\n            setState(331);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(334);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(335);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-01-12 05:08:00","endLine":2108,"groupId":"46518","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/a886404536bfeb61e1a9ada009b71635628cd8.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(336);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(323);\n        match(T__0);\n        setState(332);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(324);\n          expression();\n          setState(329);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(325);\n            match(T__2);\n            setState(326);\n            expression();\n            }\n            }\n            setState(331);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(334);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(335);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2048,"status":"M"}],"commitId":"359222c55c50bf9c15062ca16c71420c41d60100","commitMessage":"@@@SQL: Make `FULL` non-reserved keyword in the grammar (#37377)\n\nSince `full` can be common as a field name or part of a field name\n(e.g.: `full.name` or `name.full`).  it's nice if it's not a reserved\nkeyword of the grammar so a user can use it without resorting to quotes.\n\nFixes: #37376","date":"2019-01-12 05:08:00","modifiedFileCount":"2","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-01-16 18:36:35","codes":[{"authorDate":"2018-08-29 22:28:23","commitOrder":14,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-08-29 22:28:23","endLine":1297,"groupId":"33158","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/823ecfda30805083ccee1318afbacf592c0e76.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1278,"status":"N"},{"authorDate":"2019-01-16 18:36:35","commitOrder":14,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(331);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(318);\n        match(T__0);\n        setState(327);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(319);\n          expression();\n          setState(324);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(320);\n            match(T__2);\n            setState(321);\n            expression();\n            }\n            }\n            setState(326);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(329);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(330);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-01-16 18:36:35","endLine":2049,"groupId":"46518","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/49bfab8320a88af1649b6f413f945e534384b6.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(336);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(323);\n        match(T__0);\n        setState(332);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(324);\n          expression();\n          setState(329);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(325);\n            match(T__2);\n            setState(326);\n            expression();\n            }\n            }\n            setState(331);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(334);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(335);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1989,"status":"M"}],"commitId":"023bb2f1e473f4ad009e22c1947faf844d39dbad","commitMessage":"@@@SQL: Remove slightly used meta commands (#37506)\n\nRemove SYS CATALOGS and SYS TABLE TYPES as they are a subset of SYS\nTABLES (and thus somewhat redundant) and used only by JDBC.\n\nClose #37409","date":"2019-01-16 18:36:35","modifiedFileCount":"10","status":"M","submitter":"Costin Leau"},{"authorTime":"2019-01-16 18:36:35","codes":[{"authorDate":"2019-02-01 00:32:38","commitOrder":15,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-01 00:32:38","endLine":1305,"groupId":"33158","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/23ab42a94ad47d18279848cd1ad370fefbd548.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(208);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1286,"status":"M"},{"authorDate":"2019-01-16 18:36:35","commitOrder":15,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(331);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(318);\n        match(T__0);\n        setState(327);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(319);\n          expression();\n          setState(324);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(320);\n            match(T__2);\n            setState(321);\n            expression();\n            }\n            }\n            setState(326);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(329);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(330);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-01-16 18:36:35","endLine":2049,"groupId":"46518","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/49bfab8320a88af1649b6f413f945e534384b6.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(331);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(318);\n        match(T__0);\n        setState(327);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(319);\n          expression();\n          setState(324);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(320);\n            match(T__2);\n            setState(321);\n            expression();\n            }\n            }\n            setState(326);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(329);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(330);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1989,"status":"N"}],"commitId":"e066a59c899c94a00e2c6a9800f3903fd51273fa","commitMessage":"@@@Fix Painless void return bug (#38046)\n\nPainless now allows void functions and contexts to with a void return type to use\na return statement without a following expression.","date":"2019-02-01 00:32:38","modifiedFileCount":"4","status":"M","submitter":"Jack Conradson"},{"authorTime":"2019-02-06 00:15:26","codes":[{"authorDate":"2019-02-01 00:32:38","commitOrder":16,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-01 00:32:38","endLine":1305,"groupId":"33158","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/23ab42a94ad47d18279848cd1ad370fefbd548.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1286,"status":"N"},{"authorDate":"2019-02-06 00:15:26","commitOrder":16,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(331);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(318);\n        match(T__0);\n        setState(327);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(319);\n          expression();\n          setState(324);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(320);\n            match(T__2);\n            setState(321);\n            expression();\n            }\n            }\n            setState(326);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(329);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(330);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-06 00:15:26","endLine":2045,"groupId":"46518","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/90169409e81595f22037ef440790e20712cae1.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(331);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(318);\n        match(T__0);\n        setState(327);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(319);\n          expression();\n          setState(324);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(320);\n            match(T__2);\n            setState(321);\n            expression();\n            }\n            }\n            setState(326);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(329);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(330);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1985,"status":"M"}],"commitId":"c9701be1e836d154a0758e609d2d0735b03a5231","commitMessage":"@@@SQL: Implement CURRENT_DATE (#38175)\n\nSince DATE data type is now available.  this implements the\n`CURRENT_DATE/CURRENT_DATE()/TODAY()` similar to `CURRENT_TIMESTAMP`.\n\nCloses: #38160\n\n","date":"2019-02-06 00:15:26","modifiedFileCount":"10","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-04-04 01:35:37","codes":[{"authorDate":"2019-02-01 00:32:38","commitOrder":17,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-01 00:32:38","endLine":1305,"groupId":"33158","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/23ab42a94ad47d18279848cd1ad370fefbd548.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1286,"status":"N"},{"authorDate":"2019-04-04 01:35:37","commitOrder":17,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(331);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(318);\n        match(T__0);\n        setState(327);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RIGHT - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(319);\n          expression();\n          setState(324);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(320);\n            match(T__2);\n            setState(321);\n            expression();\n            }\n            }\n            setState(326);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(329);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(330);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-04-04 01:35:37","endLine":2046,"groupId":"46518","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/ad02b1392ddc5dbbf5dbc4e8aa9ac85464411a.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(331);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(318);\n        match(T__0);\n        setState(327);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(319);\n          expression();\n          setState(324);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(320);\n            match(T__2);\n            setState(321);\n            expression();\n            }\n            }\n            setState(326);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(329);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(330);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1986,"status":"M"}],"commitId":"9feede781409d0e264ce45951a25b28ff129b187","commitMessage":"@@@SQL: Implement CURRENT_TIME/CURTIME functions (#40662)\n\nAfter `TIME` SQL data type is introduced.  implement\n`CURRENT_TIME/CURTIME` functions similarly to CURRENT_TIMESTAMP\nthat return the system's current time (only.  without the date part).\n\nCloses: #40468\n","date":"2019-04-04 01:35:37","modifiedFileCount":"10","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-04-23 00:26:15","codes":[{"authorDate":"2019-02-01 00:32:38","commitOrder":18,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-01 00:32:38","endLine":1305,"groupId":"33158","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/23ab42a94ad47d18279848cd1ad370fefbd548.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1286,"status":"N"},{"authorDate":"2019-04-23 00:26:15","commitOrder":18,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(333);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(320);\n        match(T__0);\n        setState(329);\n        _la = _input.LA(1);\n        if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (ANALYZE - 1)) | (1L << (ANALYZED - 1)) | (1L << (CASE - 1)) | (1L << (CAST - 1)) | (1L << (CATALOGS - 1)) | (1L << (COLUMNS - 1)) | (1L << (CONVERT - 1)) | (1L << (CURRENT_DATE - 1)) | (1L << (CURRENT_TIME - 1)) | (1L << (CURRENT_TIMESTAMP - 1)) | (1L << (DAY - 1)) | (1L << (DEBUG - 1)) | (1L << (EXECUTABLE - 1)) | (1L << (EXISTS - 1)) | (1L << (EXPLAIN - 1)) | (1L << (EXTRACT - 1)) | (1L << (FALSE - 1)) | (1L << (FIRST - 1)) | (1L << (FORMAT - 1)) | (1L << (FULL - 1)) | (1L << (FUNCTIONS - 1)) | (1L << (GRAPHVIZ - 1)) | (1L << (HOUR - 1)) | (1L << (INTERVAL - 1)) | (1L << (LAST - 1)) | (1L << (LEFT - 1)) | (1L << (LIMIT - 1)) | (1L << (MAPPED - 1)) | (1L << (MATCH - 1)) | (1L << (MINUTE - 1)) | (1L << (MONTH - 1)) | (1L << (NOT - 1)) | (1L << (NULL - 1)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OPTIMIZED - 67)) | (1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(321);\n          expression();\n          setState(326);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(322);\n            match(T__2);\n            setState(323);\n            expression();\n            }\n            }\n            setState(328);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(331);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(332);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-04-23 00:26:15","endLine":2074,"groupId":"72790","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/e317552268e323e06d0197df942f4599120f4a.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(331);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(318);\n        match(T__0);\n        setState(327);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH) | (1L << NOT) | (1L << NULL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RIGHT - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)) | (1L << (FUNCTION_ESC - 64)) | (1L << (DATE_ESC - 64)) | (1L << (TIME_ESC - 64)) | (1L << (TIMESTAMP_ESC - 64)) | (1L << (GUID_ESC - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(319);\n          expression();\n          setState(324);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(320);\n            match(T__2);\n            setState(321);\n            expression();\n            }\n            }\n            setState(326);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(329);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(330);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2014,"status":"M"}],"commitId":"8b2577406f47ae60d15803058921d128390af0b6","commitMessage":"@@@SQL: Implement CASE... WHEN... THEN... ELSE... END (#41349)\n\nImplement the ANSI SQL CASE expression which provides the if/else\nfunctionality common to most programming languages.\n\nThe CASE expression can have multiple WHEN branches and becomes a\npowerful tool for SQL queries as it can be used in SELECT.  WHERE. \nGROUP BY.  HAVING and ORDER BY clauses.\n\nCloses: #36200\n","date":"2019-04-23 00:26:15","modifiedFileCount":"17","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-05-10 05:26:56","codes":[{"authorDate":"2019-02-01 00:32:38","commitOrder":19,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-01 00:32:38","endLine":1305,"groupId":"33158","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/23ab42a94ad47d18279848cd1ad370fefbd548.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1286,"status":"N"},{"authorDate":"2019-05-10 05:26:56","commitOrder":19,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(345);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(332);\n        match(T__0);\n        setState(341);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NOT - 65)) | (1L << (NULL - 65)) | (1L << (OPTIMIZED - 65)) | (1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)))) != 0) || _la==QUOTED_IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {\n          {\n          setState(333);\n          expression();\n          setState(338);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(334);\n            match(T__2);\n            setState(335);\n            expression();\n            }\n            }\n            setState(340);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(343);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(344);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-05-10 05:26:56","endLine":2098,"groupId":"69837","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/e0f4654df6d1a60b39e9842d7970072ae782a5.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(333);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(320);\n        match(T__0);\n        setState(329);\n        _la = _input.LA(1);\n        if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (ANALYZE - 1)) | (1L << (ANALYZED - 1)) | (1L << (CASE - 1)) | (1L << (CAST - 1)) | (1L << (CATALOGS - 1)) | (1L << (COLUMNS - 1)) | (1L << (CONVERT - 1)) | (1L << (CURRENT_DATE - 1)) | (1L << (CURRENT_TIME - 1)) | (1L << (CURRENT_TIMESTAMP - 1)) | (1L << (DAY - 1)) | (1L << (DEBUG - 1)) | (1L << (EXECUTABLE - 1)) | (1L << (EXISTS - 1)) | (1L << (EXPLAIN - 1)) | (1L << (EXTRACT - 1)) | (1L << (FALSE - 1)) | (1L << (FIRST - 1)) | (1L << (FORMAT - 1)) | (1L << (FULL - 1)) | (1L << (FUNCTIONS - 1)) | (1L << (GRAPHVIZ - 1)) | (1L << (HOUR - 1)) | (1L << (INTERVAL - 1)) | (1L << (LAST - 1)) | (1L << (LEFT - 1)) | (1L << (LIMIT - 1)) | (1L << (MAPPED - 1)) | (1L << (MATCH - 1)) | (1L << (MINUTE - 1)) | (1L << (MONTH - 1)) | (1L << (NOT - 1)) | (1L << (NULL - 1)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OPTIMIZED - 67)) | (1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(321);\n          expression();\n          setState(326);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(322);\n            match(T__2);\n            setState(323);\n            expression();\n            }\n            }\n            setState(328);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(331);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(332);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2038,"status":"M"}],"commitId":"2445a933915f420c7f51e8505afa0a7978ce6b0f","commitMessage":"@@@SQL: Add support for FROZEN indices (#41558)\n\nAllow querying of FROZEN indices both through dedicated SQL grammar\nextension:\n> SELECT field FROM FROZEN index\nand also through driver configuration parameter.  namely:\n> index.include.frozen: true/false\n\nFix #39390\nFix #39377","date":"2019-05-10 05:26:56","modifiedFileCount":"50","status":"M","submitter":"Costin Leau"},{"authorTime":"2019-09-23 23:59:46","codes":[{"authorDate":"2019-02-01 00:32:38","commitOrder":20,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-01 00:32:38","endLine":1305,"groupId":"33158","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/23ab42a94ad47d18279848cd1ad370fefbd548.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1286,"status":"N"},{"authorDate":"2019-09-23 23:59:46","commitOrder":20,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(349);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(336);\n        match(T__0);\n        setState(345);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)) | (1L << (IDENTIFIER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(337);\n          expression();\n          setState(342);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(338);\n            match(T__2);\n            setState(339);\n            expression();\n            }\n            }\n            setState(344);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(347);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(348);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-09-23 23:59:46","endLine":2098,"groupId":"69837","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/cc1bd7a3f5722321e9b9519d858e3c262dd9c3.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(345);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(332);\n        match(T__0);\n        setState(341);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NOT - 65)) | (1L << (NULL - 65)) | (1L << (OPTIMIZED - 65)) | (1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)))) != 0) || _la==QUOTED_IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {\n          {\n          setState(333);\n          expression();\n          setState(338);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(334);\n            match(T__2);\n            setState(335);\n            expression();\n            }\n            }\n            setState(340);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(343);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(344);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2038,"status":"M"}],"commitId":"d91263746a222915c570d4a662ec48c1d6b4f583","commitMessage":"@@@SQL: Add PIVOT support (#46489)\n\nAdd initial PIVOT support for transforming a regular table into a\nstatistics table around an arbitrary pivoting column:\n\nSELECT * FROM\n (SELECT languages.  country.  salary.  FROM mp)\n PIVOT (AVG(salary) FOR countries IN ('NL'.  'DE'.  'ES'.  'RO'.  'US'))\n\nIn the current implementation PIVOT allows only one aggregation however\nthis restriction is likely to be lifted in the future.\nAlso not all aggregations are working.  in particular MatrixStats are not yet supported.","date":"2019-09-23 23:59:46","modifiedFileCount":"39","status":"M","submitter":"Costin Leau"},{"authorTime":"2019-10-07 20:37:20","codes":[{"authorDate":"2019-02-01 00:32:38","commitOrder":21,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-01 00:32:38","endLine":1305,"groupId":"33158","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/23ab42a94ad47d18279848cd1ad370fefbd548.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1286,"status":"N"},{"authorDate":"2019-10-07 20:37:20","commitOrder":21,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(349);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(336);\n        match(T__0);\n        setState(345);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(337);\n          expression();\n          setState(342);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(338);\n            match(T__2);\n            setState(339);\n            expression();\n            }\n            }\n            setState(344);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(347);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(348);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-10-07 20:37:20","endLine":2099,"groupId":"69837","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6d/0c4a69f3240451d7d1ad7fd46250e3f74a66d6.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(349);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(336);\n        match(T__0);\n        setState(345);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)) | (1L << (IDENTIFIER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(337);\n          expression();\n          setState(342);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(338);\n            match(T__2);\n            setState(339);\n            expression();\n            }\n            }\n            setState(344);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(347);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(348);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2039,"status":"M"}],"commitId":"08a22d0b393f4a76c52dabc5e7b9cafcc19c30ca","commitMessage":"@@@SQL: Allow whitespaces in escape patterns (#47577)\n\n* SQL: Allow whitespaces in escape patterns\n\nPreviously.  we supported only the format `{fn <FUNCTION_NAME>()}`\nbut other DBs like MSSQL.  DB2.  MariaDB/MySQL alos allow whitespaces\nbetween `{` and `fn`. Furhermore.  also some applications - like PowerBI -\ngenerate escape sequences with spaces: `select { fn name(params) } etc.`\n\nAdd support for white spaces between `{` and the escape pattern definition\nlike `fn`.  `ts`.  `d`.  `guid` etc.\n\nCloses: #47401\n\n* Fix imports\n","date":"2019-10-07 20:37:20","modifiedFileCount":"3","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-10-07 20:37:20","codes":[{"authorDate":"2020-02-08 02:08:03","commitOrder":22,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(212);\n      expression();\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-02-08 02:08:03","endLine":1305,"groupId":"69837","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/e6e1545c1ebd1e24005831a17be6fa48480869.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(210);\n      expression(0);\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1286,"status":"M"},{"authorDate":"2019-10-07 20:37:20","commitOrder":22,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(349);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(336);\n        match(T__0);\n        setState(345);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(337);\n          expression();\n          setState(342);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(338);\n            match(T__2);\n            setState(339);\n            expression();\n            }\n            }\n            setState(344);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(347);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(348);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-10-07 20:37:20","endLine":2099,"groupId":"69837","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6d/0c4a69f3240451d7d1ad7fd46250e3f74a66d6.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(349);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(336);\n        match(T__0);\n        setState(345);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(337);\n          expression();\n          setState(342);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(338);\n            match(T__2);\n            setState(339);\n            expression();\n            }\n            }\n            setState(344);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(347);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(348);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2039,"status":"N"}],"commitId":"aec932aefa0c2696465ebd9ae2b6b4870f49f340","commitMessage":"@@@Improve Painless compilation performance for nested conditionals (#52056)\n\nThis PR changes how conditional expression is handled in `PainlessParser`\nin a way that avoids the need for backtracking.  which led to exponential\ncompilation times in case of nested conditionals.\n\nThe test was added ensures that we can compile deeply nested conditionals.\n\nCo-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>\n","date":"2020-02-08 02:08:03","modifiedFileCount":"6","status":"M","submitter":"Przemko Robakowski"},{"authorTime":"2019-10-07 20:37:20","codes":[{"authorDate":"2020-05-15 01:24:31","commitOrder":23,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(222);\n      expression();\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-05-15 01:24:31","endLine":1312,"groupId":"69837","id":45,"instanceNumber":1,"isCurCommit":1,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/58500303fdce657f5b952f1e9fc560777b4fd0.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(212);\n      expression();\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1293,"status":"M"},{"authorDate":"2019-10-07 20:37:20","commitOrder":23,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(349);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(336);\n        match(T__0);\n        setState(345);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(337);\n          expression();\n          setState(342);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(338);\n            match(T__2);\n            setState(339);\n            expression();\n            }\n            }\n            setState(344);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(347);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(348);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-10-07 20:37:20","endLine":2099,"groupId":"69837","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6d/0c4a69f3240451d7d1ad7fd46250e3f74a66d6.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(349);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(336);\n        match(T__0);\n        setState(345);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(337);\n          expression();\n          setState(342);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(338);\n            match(T__2);\n            setState(339);\n            expression();\n            }\n            }\n            setState(344);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(347);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(348);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2039,"status":"N"}],"commitId":"53ea60836198c4924c29e2416b9c4a6d23e0406c","commitMessage":"@@@Remove the lexer hack in Painless (#56293)\n\nBackground:\n\nThe lexer-hack (https://en.wikipedia.org/wiki/Lexer_hack) was used in Painless \nto add contextual information around types during lexing. This made the the \nlexer/grammar much simpler.  and allowed us to build a user tree with full typing \ninformation at creation.\n\nLimitations:\n\nForcing the lexer to know about type information up front requires that we \nknow all types when building the user tree.  so this limits us from a number of \nthings including the following:\n\n* good.  consistent error messages as types fail during lexing which gives very \npoor error messaging since this should be purely syntax errors\n* compiling against different contexts as a possible use case for ensuring a \nstored script is valid for at least one context\n* pursuing new front ends such as a possible template language based on \nPainless\n* using the existing grammar to introduce an auto-completion API\n* the potential of adding new features with specialized types\n\nResults:\n\nThis change removes the lexer hack by doing all type checking as part of the \nsemantic pass against the user tree. The lexer now keywords on the primitives \nand def types while the user tree will use a symbol node instead of a variable \nnode that can potentially be either a type.  a piece of a package name.  or a \nvariable. One important change is that the dot operator is now overridden. This \nmeans that a dot operator may indicate a piece of a package name or a field \n(a.b could be access field b from variable a or could be the static type a.b). Logic \nhas been introduced to account for this overloaded operator including checks in \nthe expression nodes to ensure they aren't mistakenly using an unexpected \nstatic type or an unknown partial type.","date":"2020-05-15 01:24:31","modifiedFileCount":"53","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-06-02 15:56:20","codes":[{"authorDate":"2020-05-15 01:24:31","commitOrder":24,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(222);\n      expression();\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-05-15 01:24:31","endLine":1312,"groupId":"69837","id":47,"instanceNumber":1,"isCurCommit":1,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/58500303fdce657f5b952f1e9fc560777b4fd0.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(222);\n      expression();\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1293,"status":"N"},{"authorDate":"2020-06-02 15:56:20","commitOrder":24,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(354);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(341);\n        match(T__0);\n        setState(350);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DECIMAL_VALUE - 130)) | (1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(342);\n          expression();\n          setState(347);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(343);\n            match(T__2);\n            setState(344);\n            expression();\n            }\n            }\n            setState(349);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(352);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(353);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-06-02 15:56:20","endLine":2116,"groupId":"69837","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/bef684c7e18aeed8d71039cd471287039ab143.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(349);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(336);\n        match(T__0);\n        setState(345);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(337);\n          expression();\n          setState(342);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(338);\n            match(T__2);\n            setState(339);\n            expression();\n            }\n            }\n            setState(344);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(347);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(348);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2056,"status":"M"}],"commitId":"2f5ab81b9ad884434d1faa60f4391f966ede73e8","commitMessage":"@@@SQL: Implement TOP as an alternative to LIMIT (#57428)\n\nAdd basic support for `TOP X` as a synonym to LIMIT X which is used\nby [MS-SQL server](https://docs.microsoft.com/en-us/sql/t-sql/queries/top-transact-sql?view=sql-server-ver15). \ne.g.:\n\n```\nSELECT TOP 5 a.  b.  c FROM test\n```\n\nTOP in SQL server also supports the `PERCENTAGE` and `WITH TIES`\nkeywords which this implementation doesn't.\n\nDon't allow usage of both TOP and LIMIT in the same query.\n\nRefers to #41195\n","date":"2020-06-02 15:56:20","modifiedFileCount":"8","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2020-11-24 04:47:51","codes":[{"authorDate":"2020-05-15 01:24:31","commitOrder":25,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(222);\n      expression();\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-05-15 01:24:31","endLine":1312,"groupId":"69837","id":49,"instanceNumber":1,"isCurCommit":1,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/58500303fdce657f5b952f1e9fc560777b4fd0.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(222);\n      expression();\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1293,"status":"N"},{"authorDate":"2020-11-24 04:47:51","commitOrder":25,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(354);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(341);\n        match(T__0);\n        setState(350);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(342);\n          expression();\n          setState(347);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(343);\n            match(T__2);\n            setState(344);\n            expression();\n            }\n            }\n            setState(349);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(352);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(353);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-11-24 04:47:51","endLine":2115,"groupId":"69837","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/e3528b71f5a0945a1b151f3ff26e3d424f0d72.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(354);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(341);\n        match(T__0);\n        setState(350);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DECIMAL_VALUE - 130)) | (1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(342);\n          expression();\n          setState(347);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(343);\n            match(T__2);\n            setState(344);\n            expression();\n            }\n            }\n            setState(349);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(352);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(353);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2055,"status":"M"}],"commitId":"afb9d48a2159b7ff7de6b74001a76e3a62b70876","commitMessage":"@@@SQL: Remove the unused CONCAT token (#65272)\n\nThe `||` token is a leftover from the original grammar definition.\nWe don't have a `||` operator.  the token is unused in our grammar.\nString concatenation is implemented via the `CONCAT` function instead.","date":"2020-11-24 04:47:51","modifiedFileCount":"2","status":"M","submitter":"Andras Palinkas"},{"authorTime":"2021-08-26 20:41:57","codes":[{"authorDate":"2020-05-15 01:24:31","commitOrder":26,"curCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(222);\n      expression();\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-05-15 01:24:31","endLine":1312,"groupId":"101301","id":51,"instanceNumber":1,"isCurCommit":1,"methodName":"afterthought","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/58500303fdce657f5b952f1e9fc560777b4fd0.src","preCode":"  public final AfterthoughtContext afterthought() throws RecognitionException {\n    AfterthoughtContext _localctx = new AfterthoughtContext(_ctx, getState());\n    enterRule(_localctx, 20, RULE_afterthought);\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(222);\n      expression();\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1293,"status":"N"},{"authorDate":"2021-08-26 20:41:57","commitOrder":26,"curCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(354);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(341);\n        match(T__0);\n        setState(350);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(342);\n          expression();\n          setState(347);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(343);\n            match(T__2);\n            setState(344);\n            expression();\n            }\n            }\n            setState(349);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(352);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(353);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2021-08-26 20:41:57","endLine":2190,"groupId":"101301","id":52,"instanceNumber":2,"isCurCommit":1,"methodName":"groupingExpressions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/d494e5390668eab2b6833facff621cc7a73b1e.src","preCode":"  public final GroupingExpressionsContext groupingExpressions() throws RecognitionException {\n    GroupingExpressionsContext _localctx = new GroupingExpressionsContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_groupingExpressions);\n    int _la;\n    try {\n      setState(354);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {\n      case 1:\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(341);\n        match(T__0);\n        setState(350);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(342);\n          expression();\n          setState(347);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(343);\n            match(T__2);\n            setState(344);\n            expression();\n            }\n            }\n            setState(349);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(352);\n        match(T__1);\n        }\n        break;\n      case 2:\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(353);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2129,"status":"M"}],"commitId":"d349f252476a0f50dbc3fd23bc796d77ec6c97fa","commitMessage":"@@@QL: regenerate parser due to ANTLR upgrade (#76970)\n\n* QL: regenerate parser due to ANTLR upgrade\n\nTo avoid warnings and subtle change in behavior.  regenerate the parser\nclasses using the upgraded ANTLR (4.9.2 vs 4.5.3).\n\nFix #76969","date":"2021-08-26 20:41:57","modifiedFileCount":"6","status":"M","submitter":"Costin Leau"}]
