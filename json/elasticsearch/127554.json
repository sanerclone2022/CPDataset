[{"authorTime":"2020-10-29 21:05:22","codes":[{"authorDate":"2020-10-09 14:52:34","commitOrder":3,"curCode":"    public void createDataStream(CreateDataStreamClusterStateUpdateRequest request,\n                                 ActionListener<AcknowledgedResponse> finalListener) {\n        AtomicReference<String> firstBackingIndexRef = new AtomicReference<>();\n        ActionListener<ClusterStateUpdateResponse> listener = ActionListener.wrap(\n            response -> {\n                if (response.isAcknowledged()) {\n                    String firstBackingIndexName = firstBackingIndexRef.get();\n                    assert firstBackingIndexName != null;\n                    activeShardsObserver.waitForActiveShards(\n                        new String[]{firstBackingIndexName},\n                        ActiveShardCount.DEFAULT,\n                        request.masterNodeTimeout(),\n                        shardsAcked -> finalListener.onResponse(AcknowledgedResponse.TRUE),\n                        finalListener::onFailure);\n                } else {\n                    finalListener.onResponse(AcknowledgedResponse.FALSE);\n                }\n            },\n            finalListener::onFailure\n        );\n        clusterService.submitStateUpdateTask(\"create-data-stream [\" + request.name + \"]\",\n            new AckedClusterStateUpdateTask<>(Priority.HIGH, request, listener) {\n\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    ClusterState clusterState = createDataStream(metadataCreateIndexService, currentState, request);\n                    firstBackingIndexRef.set(clusterState.metadata().dataStreams().get(request.name).getIndices().get(0).getName());\n                    return clusterState;\n                }\n\n                @Override\n                protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n                    return new ClusterStateUpdateResponse(acknowledged);\n                }\n            });\n    }\n","date":"2020-10-09 14:52:34","endLine":102,"groupId":"29705","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDataStream","params":"(CreateDataStreamClusterStateUpdateRequestrequest@ActionListener<AcknowledgedResponse>finalListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/7432d202d0ea33f954c1d42b95189519443096.src","preCode":"    public void createDataStream(CreateDataStreamClusterStateUpdateRequest request,\n                                 ActionListener<AcknowledgedResponse> finalListener) {\n        AtomicReference<String> firstBackingIndexRef = new AtomicReference<>();\n        ActionListener<ClusterStateUpdateResponse> listener = ActionListener.wrap(\n            response -> {\n                if (response.isAcknowledged()) {\n                    String firstBackingIndexName = firstBackingIndexRef.get();\n                    assert firstBackingIndexName != null;\n                    activeShardsObserver.waitForActiveShards(\n                        new String[]{firstBackingIndexName},\n                        ActiveShardCount.DEFAULT,\n                        request.masterNodeTimeout(),\n                        shardsAcked -> finalListener.onResponse(AcknowledgedResponse.TRUE),\n                        finalListener::onFailure);\n                } else {\n                    finalListener.onResponse(AcknowledgedResponse.FALSE);\n                }\n            },\n            finalListener::onFailure\n        );\n        clusterService.submitStateUpdateTask(\"create-data-stream [\" + request.name + \"]\",\n            new AckedClusterStateUpdateTask<>(Priority.HIGH, request, listener) {\n\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    ClusterState clusterState = createDataStream(metadataCreateIndexService, currentState, request);\n                    firstBackingIndexRef.set(clusterState.metadata().dataStreams().get(request.name).getIndices().get(0).getName());\n                    return clusterState;\n                }\n\n                @Override\n                protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n                    return new ClusterStateUpdateResponse(acknowledged);\n                }\n            });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"NB"},{"authorDate":"2020-10-29 21:05:22","commitOrder":3,"curCode":"    public void migrateToDataStream(MigrateToDataStreamClusterStateUpdateRequest request,\n                                    ActionListener<AcknowledgedResponse> finalListener) {\n        AtomicReference<String> writeIndexRef = new AtomicReference<>();\n        ActionListener<ClusterStateUpdateResponse> listener = ActionListener.wrap(\n            response -> {\n                if (response.isAcknowledged()) {\n                    String writeIndexName = writeIndexRef.get();\n                    assert writeIndexName != null;\n                    activeShardsObserver.waitForActiveShards(\n                        new String[]{writeIndexName},\n                        ActiveShardCount.DEFAULT,\n                        request.masterNodeTimeout(),\n                        shardsAcked -> {\n                            finalListener.onResponse(AcknowledgedResponse.TRUE);\n                        },\n                        finalListener::onFailure);\n                } else {\n                    finalListener.onResponse(AcknowledgedResponse.FALSE);\n                }\n            },\n            finalListener::onFailure\n        );\n        clusterService.submitStateUpdateTask(\"migrate-to-data-stream [\" + request.aliasName + \"]\",\n            new AckedClusterStateUpdateTask<>(Priority.HIGH, request, listener) {\n\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    ClusterState clusterState = migrateToDataStream(\n                        currentState,\n                        indexMetadata -> {\n                            try {\n                                return indexServices.createIndexMapperService(indexMetadata);\n                            } catch (IOException e) {\n                                throw new IllegalStateException(e);\n                            }\n                        },\n                        request);\n                    writeIndexRef.set(clusterState.metadata().dataStreams().get(request.aliasName).getWriteIndex().getName());\n                    return clusterState;\n                }\n\n                @Override\n                protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n                    return new ClusterStateUpdateResponse(acknowledged);\n                }\n            });\n    }\n","date":"2020-10-29 21:05:22","endLine":115,"groupId":"20647","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"migrateToDataStream","params":"(MigrateToDataStreamClusterStateUpdateRequestrequest@ActionListener<AcknowledgedResponse>finalListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2d/61873d25bd91f40bd8173e2fc473b9feb91dc1.src","preCode":"    public void migrateToDataStream(MigrateToDataStreamClusterStateUpdateRequest request,\n                                    ActionListener<AcknowledgedResponse> finalListener) {\n        AtomicReference<String> writeIndexRef = new AtomicReference<>();\n        ActionListener<ClusterStateUpdateResponse> listener = ActionListener.wrap(\n            response -> {\n                if (response.isAcknowledged()) {\n                    String writeIndexName = writeIndexRef.get();\n                    assert writeIndexName != null;\n                    activeShardsObserver.waitForActiveShards(\n                        new String[]{writeIndexName},\n                        ActiveShardCount.DEFAULT,\n                        request.masterNodeTimeout(),\n                        shardsAcked -> {\n                            finalListener.onResponse(AcknowledgedResponse.TRUE);\n                        },\n                        finalListener::onFailure);\n                } else {\n                    finalListener.onResponse(AcknowledgedResponse.FALSE);\n                }\n            },\n            finalListener::onFailure\n        );\n        clusterService.submitStateUpdateTask(\"migrate-to-data-stream [\" + request.aliasName + \"]\",\n            new AckedClusterStateUpdateTask<>(Priority.HIGH, request, listener) {\n\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    ClusterState clusterState = migrateToDataStream(\n                        currentState,\n                        indexMetadata -> {\n                            try {\n                                return indexServices.createIndexMapperService(indexMetadata);\n                            } catch (IOException e) {\n                                throw new IllegalStateException(e);\n                            }\n                        },\n                        request);\n                    writeIndexRef.set(clusterState.metadata().dataStreams().get(request.aliasName).getWriteIndex().getName());\n                    return clusterState;\n                }\n\n                @Override\n                protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n                    return new ClusterStateUpdateResponse(acknowledged);\n                }\n            });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/MetadataMigrateToDataStreamService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"}],"commitId":"7d2d737ecfad5e7f3693f1b6b24f457e4909d0c8","commitMessage":"@@@Migrate aliased indices to data stream (#61525)\n\n","date":"2020-10-29 21:05:22","modifiedFileCount":"10","status":"M","submitter":"Dan Hermann"},{"authorTime":"2020-11-04 04:48:19","codes":[{"authorDate":"2020-11-04 04:48:19","commitOrder":4,"curCode":"    public void createDataStream(CreateDataStreamClusterStateUpdateRequest request,\n                                 ActionListener<AcknowledgedResponse> finalListener) {\n        AtomicReference<String> firstBackingIndexRef = new AtomicReference<>();\n        ActionListener<AcknowledgedResponse> listener = ActionListener.wrap(\n            response -> {\n                if (response.isAcknowledged()) {\n                    String firstBackingIndexName = firstBackingIndexRef.get();\n                    assert firstBackingIndexName != null;\n                    activeShardsObserver.waitForActiveShards(\n                        new String[]{firstBackingIndexName},\n                        ActiveShardCount.DEFAULT,\n                        request.masterNodeTimeout(),\n                        shardsAcked -> finalListener.onResponse(AcknowledgedResponse.TRUE),\n                        finalListener::onFailure);\n                } else {\n                    finalListener.onResponse(AcknowledgedResponse.FALSE);\n                }\n            },\n            finalListener::onFailure\n        );\n        clusterService.submitStateUpdateTask(\"create-data-stream [\" + request.name + \"]\",\n            new AckedClusterStateUpdateTask(Priority.HIGH, request, listener) {\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    ClusterState clusterState = createDataStream(metadataCreateIndexService, currentState, request);\n                    firstBackingIndexRef.set(clusterState.metadata().dataStreams().get(request.name).getIndices().get(0).getName());\n                    return clusterState;\n                }\n            });\n    }\n","date":"2020-11-04 04:48:19","endLine":99,"groupId":"69061","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDataStream","params":"(CreateDataStreamClusterStateUpdateRequestrequest@ActionListener<AcknowledgedResponse>finalListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f9/0e7759f0b4a5f49a65889db8b481650050ab42.src","preCode":"    public void createDataStream(CreateDataStreamClusterStateUpdateRequest request,\n                                 ActionListener<AcknowledgedResponse> finalListener) {\n        AtomicReference<String> firstBackingIndexRef = new AtomicReference<>();\n        ActionListener<ClusterStateUpdateResponse> listener = ActionListener.wrap(\n            response -> {\n                if (response.isAcknowledged()) {\n                    String firstBackingIndexName = firstBackingIndexRef.get();\n                    assert firstBackingIndexName != null;\n                    activeShardsObserver.waitForActiveShards(\n                        new String[]{firstBackingIndexName},\n                        ActiveShardCount.DEFAULT,\n                        request.masterNodeTimeout(),\n                        shardsAcked -> finalListener.onResponse(AcknowledgedResponse.TRUE),\n                        finalListener::onFailure);\n                } else {\n                    finalListener.onResponse(AcknowledgedResponse.FALSE);\n                }\n            },\n            finalListener::onFailure\n        );\n        clusterService.submitStateUpdateTask(\"create-data-stream [\" + request.name + \"]\",\n            new AckedClusterStateUpdateTask<>(Priority.HIGH, request, listener) {\n\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    ClusterState clusterState = createDataStream(metadataCreateIndexService, currentState, request);\n                    firstBackingIndexRef.set(clusterState.metadata().dataStreams().get(request.name).getIndices().get(0).getName());\n                    return clusterState;\n                }\n\n                @Override\n                protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n                    return new ClusterStateUpdateResponse(acknowledged);\n                }\n            });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-11-04 04:48:19","commitOrder":4,"curCode":"    public void migrateToDataStream(MigrateToDataStreamClusterStateUpdateRequest request,\n                                    ActionListener<AcknowledgedResponse> finalListener) {\n        AtomicReference<String> writeIndexRef = new AtomicReference<>();\n        ActionListener<AcknowledgedResponse> listener = ActionListener.wrap(\n            response -> {\n                if (response.isAcknowledged()) {\n                    String writeIndexName = writeIndexRef.get();\n                    assert writeIndexName != null;\n                    activeShardsObserver.waitForActiveShards(\n                        new String[]{writeIndexName},\n                        ActiveShardCount.DEFAULT,\n                        request.masterNodeTimeout(),\n                        shardsAcked -> {\n                            finalListener.onResponse(AcknowledgedResponse.TRUE);\n                        },\n                        finalListener::onFailure);\n                } else {\n                    finalListener.onResponse(AcknowledgedResponse.FALSE);\n                }\n            },\n            finalListener::onFailure\n        );\n        clusterService.submitStateUpdateTask(\"migrate-to-data-stream [\" + request.aliasName + \"]\",\n            new AckedClusterStateUpdateTask(Priority.HIGH, request, listener) {\n\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    ClusterState clusterState = migrateToDataStream(\n                        currentState,\n                        indexMetadata -> {\n                            try {\n                                return indexServices.createIndexMapperService(indexMetadata);\n                            } catch (IOException e) {\n                                throw new IllegalStateException(e);\n                            }\n                        },\n                        request);\n                    writeIndexRef.set(clusterState.metadata().dataStreams().get(request.aliasName).getWriteIndex().getName());\n                    return clusterState;\n                }\n            });\n    }\n","date":"2020-11-04 04:48:19","endLine":109,"groupId":"20647","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"migrateToDataStream","params":"(MigrateToDataStreamClusterStateUpdateRequestrequest@ActionListener<AcknowledgedResponse>finalListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/755bfe7e88b8686ba4a8c6197ad51bf224a7f7.src","preCode":"    public void migrateToDataStream(MigrateToDataStreamClusterStateUpdateRequest request,\n                                    ActionListener<AcknowledgedResponse> finalListener) {\n        AtomicReference<String> writeIndexRef = new AtomicReference<>();\n        ActionListener<ClusterStateUpdateResponse> listener = ActionListener.wrap(\n            response -> {\n                if (response.isAcknowledged()) {\n                    String writeIndexName = writeIndexRef.get();\n                    assert writeIndexName != null;\n                    activeShardsObserver.waitForActiveShards(\n                        new String[]{writeIndexName},\n                        ActiveShardCount.DEFAULT,\n                        request.masterNodeTimeout(),\n                        shardsAcked -> {\n                            finalListener.onResponse(AcknowledgedResponse.TRUE);\n                        },\n                        finalListener::onFailure);\n                } else {\n                    finalListener.onResponse(AcknowledgedResponse.FALSE);\n                }\n            },\n            finalListener::onFailure\n        );\n        clusterService.submitStateUpdateTask(\"migrate-to-data-stream [\" + request.aliasName + \"]\",\n            new AckedClusterStateUpdateTask<>(Priority.HIGH, request, listener) {\n\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    ClusterState clusterState = migrateToDataStream(\n                        currentState,\n                        indexMetadata -> {\n                            try {\n                                return indexServices.createIndexMapperService(indexMetadata);\n                            } catch (IOException e) {\n                                throw new IllegalStateException(e);\n                            }\n                        },\n                        request);\n                    writeIndexRef.set(clusterState.metadata().dataStreams().get(request.aliasName).getWriteIndex().getName());\n                    return clusterState;\n                }\n\n                @Override\n                protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {\n                    return new ClusterStateUpdateResponse(acknowledged);\n                }\n            });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/MetadataMigrateToDataStreamService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"d904d48e8ddbea1f9f8e251fa539da5f4a34476b","commitMessage":"@@@Remove Redundant Cluster State Update Response Classes (#63646)\n\nThese intermediary response types don't contain any information\noutside of what the shard acknowledged and acknowledged responses\ncontain so this PR removes them.\nAlso.  it adds three constants for the three possible states of\n`ShardsAcknowledgedResponse`.\n\nFollow up to #63335\n","date":"2020-11-04 04:48:19","modifiedFileCount":"52","status":"M","submitter":"Armin Braun"},{"authorTime":"2021-04-21 21:28:12","codes":[{"authorDate":"2020-11-04 04:48:19","commitOrder":5,"curCode":"    public void createDataStream(CreateDataStreamClusterStateUpdateRequest request,\n                                 ActionListener<AcknowledgedResponse> finalListener) {\n        AtomicReference<String> firstBackingIndexRef = new AtomicReference<>();\n        ActionListener<AcknowledgedResponse> listener = ActionListener.wrap(\n            response -> {\n                if (response.isAcknowledged()) {\n                    String firstBackingIndexName = firstBackingIndexRef.get();\n                    assert firstBackingIndexName != null;\n                    activeShardsObserver.waitForActiveShards(\n                        new String[]{firstBackingIndexName},\n                        ActiveShardCount.DEFAULT,\n                        request.masterNodeTimeout(),\n                        shardsAcked -> finalListener.onResponse(AcknowledgedResponse.TRUE),\n                        finalListener::onFailure);\n                } else {\n                    finalListener.onResponse(AcknowledgedResponse.FALSE);\n                }\n            },\n            finalListener::onFailure\n        );\n        clusterService.submitStateUpdateTask(\"create-data-stream [\" + request.name + \"]\",\n            new AckedClusterStateUpdateTask(Priority.HIGH, request, listener) {\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    ClusterState clusterState = createDataStream(metadataCreateIndexService, currentState, request);\n                    firstBackingIndexRef.set(clusterState.metadata().dataStreams().get(request.name).getIndices().get(0).getName());\n                    return clusterState;\n                }\n            });\n    }\n","date":"2020-11-04 04:48:19","endLine":99,"groupId":"127554","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createDataStream","params":"(CreateDataStreamClusterStateUpdateRequestrequest@ActionListener<AcknowledgedResponse>finalListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f9/0e7759f0b4a5f49a65889db8b481650050ab42.src","preCode":"    public void createDataStream(CreateDataStreamClusterStateUpdateRequest request,\n                                 ActionListener<AcknowledgedResponse> finalListener) {\n        AtomicReference<String> firstBackingIndexRef = new AtomicReference<>();\n        ActionListener<AcknowledgedResponse> listener = ActionListener.wrap(\n            response -> {\n                if (response.isAcknowledged()) {\n                    String firstBackingIndexName = firstBackingIndexRef.get();\n                    assert firstBackingIndexName != null;\n                    activeShardsObserver.waitForActiveShards(\n                        new String[]{firstBackingIndexName},\n                        ActiveShardCount.DEFAULT,\n                        request.masterNodeTimeout(),\n                        shardsAcked -> finalListener.onResponse(AcknowledgedResponse.TRUE),\n                        finalListener::onFailure);\n                } else {\n                    finalListener.onResponse(AcknowledgedResponse.FALSE);\n                }\n            },\n            finalListener::onFailure\n        );\n        clusterService.submitStateUpdateTask(\"create-data-stream [\" + request.name + \"]\",\n            new AckedClusterStateUpdateTask(Priority.HIGH, request, listener) {\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    ClusterState clusterState = createDataStream(metadataCreateIndexService, currentState, request);\n                    firstBackingIndexRef.set(clusterState.metadata().dataStreams().get(request.name).getIndices().get(0).getName());\n                    return clusterState;\n                }\n            });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/MetadataCreateDataStreamService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"},{"authorDate":"2021-04-21 21:28:12","commitOrder":5,"curCode":"    public void migrateToDataStream(MigrateToDataStreamClusterStateUpdateRequest request,\n                                    ActionListener<AcknowledgedResponse> finalListener) {\n        metadataCreateIndexService.getSystemIndices().validateDataStreamAccess(request.aliasName, threadContext);\n        AtomicReference<String> writeIndexRef = new AtomicReference<>();\n        ActionListener<AcknowledgedResponse> listener = ActionListener.wrap(\n            response -> {\n                if (response.isAcknowledged()) {\n                    String writeIndexName = writeIndexRef.get();\n                    assert writeIndexName != null;\n                    activeShardsObserver.waitForActiveShards(\n                        new String[]{writeIndexName},\n                        ActiveShardCount.DEFAULT,\n                        request.masterNodeTimeout(),\n                        shardsAcked -> {\n                            finalListener.onResponse(AcknowledgedResponse.TRUE);\n                        },\n                        finalListener::onFailure);\n                } else {\n                    finalListener.onResponse(AcknowledgedResponse.FALSE);\n                }\n            },\n            finalListener::onFailure\n        );\n        clusterService.submitStateUpdateTask(\"migrate-to-data-stream [\" + request.aliasName + \"]\",\n            new AckedClusterStateUpdateTask(Priority.HIGH, request, listener) {\n\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    ClusterState clusterState = migrateToDataStream(\n                        currentState,\n                        indexMetadata -> {\n                            try {\n                                return indexServices.createIndexMapperService(indexMetadata);\n                            } catch (IOException e) {\n                                throw new IllegalStateException(e);\n                            }\n                        },\n                        request,\n                        threadContext,\n                        metadataCreateIndexService);\n                    writeIndexRef.set(clusterState.metadata().dataStreams().get(request.aliasName).getWriteIndex().getName());\n                    return clusterState;\n                }\n            });\n    }\n","date":"2021-04-21 21:28:12","endLine":104,"groupId":"127554","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"migrateToDataStream","params":"(MigrateToDataStreamClusterStateUpdateRequestrequest@ActionListener<AcknowledgedResponse>finalListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/ba3cd8e6633a1364775f75bab7ec845fcedd08.src","preCode":"    public void migrateToDataStream(MigrateToDataStreamClusterStateUpdateRequest request,\n                                    ActionListener<AcknowledgedResponse> finalListener) {\n        AtomicReference<String> writeIndexRef = new AtomicReference<>();\n        ActionListener<AcknowledgedResponse> listener = ActionListener.wrap(\n            response -> {\n                if (response.isAcknowledged()) {\n                    String writeIndexName = writeIndexRef.get();\n                    assert writeIndexName != null;\n                    activeShardsObserver.waitForActiveShards(\n                        new String[]{writeIndexName},\n                        ActiveShardCount.DEFAULT,\n                        request.masterNodeTimeout(),\n                        shardsAcked -> {\n                            finalListener.onResponse(AcknowledgedResponse.TRUE);\n                        },\n                        finalListener::onFailure);\n                } else {\n                    finalListener.onResponse(AcknowledgedResponse.FALSE);\n                }\n            },\n            finalListener::onFailure\n        );\n        clusterService.submitStateUpdateTask(\"migrate-to-data-stream [\" + request.aliasName + \"]\",\n            new AckedClusterStateUpdateTask(Priority.HIGH, request, listener) {\n\n                @Override\n                public ClusterState execute(ClusterState currentState) throws Exception {\n                    ClusterState clusterState = migrateToDataStream(\n                        currentState,\n                        indexMetadata -> {\n                            try {\n                                return indexServices.createIndexMapperService(indexMetadata);\n                            } catch (IOException e) {\n                                throw new IllegalStateException(e);\n                            }\n                        },\n                        request);\n                    writeIndexRef.set(clusterState.metadata().dataStreams().get(request.aliasName).getWriteIndex().getName());\n                    return clusterState;\n                }\n            });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/MetadataMigrateToDataStreamService.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"9a86dde3572a6f3999eea75bc3ce30b965837ba3","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-21 21:28:12","modifiedFileCount":"1285","status":"M","submitter":"iverase"}]
