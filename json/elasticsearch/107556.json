[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            Custom customIndexMetaData = lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        return builder.build();\n    }\n","date":"2018-04-26 03:22:53","endLine":746,"groupId":"3","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/41/4e06a236511f710b213b09bf45053945b029d2.src","preCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            Custom customIndexMetaData = lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":716,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            IndexMetaData.Custom customIndexMetaData = IndexMetaData.lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2018-04-26 03:22:53","endLine":238,"groupId":"52168","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c0/d254509c118192d4f6e33598a07da721190cc0.src","preCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            IndexMetaData.Custom customIndexMetaData = IndexMetaData.lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-06-16 01:16:05","commitOrder":2,"curCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            Custom customIndexMetaData = lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","date":"2018-06-16 01:16:05","endLine":775,"groupId":"3","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9e/4f8497878672980abb5da829dcf84d513e2e34.src","preCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            Custom customIndexMetaData = lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            IndexMetaData.Custom customIndexMetaData = IndexMetaData.lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2018-04-26 03:22:53","endLine":238,"groupId":"52168","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c0/d254509c118192d4f6e33598a07da721190cc0.src","preCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            IndexMetaData.Custom customIndexMetaData = IndexMetaData.lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"N"}],"commitId":"c54937731e9abbc1a0ae8145416fab34a3393198","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-16 01:16:05","modifiedFileCount":"33","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-06-21 04:29:47","commitOrder":3,"curCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            Custom customIndexMetaData = lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","date":"2018-06-21 04:29:47","endLine":775,"groupId":"3","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d9/78e214fc96c49e1779c7903ffb61e6e7101be9.src","preCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            Custom customIndexMetaData = lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            IndexMetaData.Custom customIndexMetaData = IndexMetaData.lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2018-04-26 03:22:53","endLine":238,"groupId":"52168","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c0/d254509c118192d4f6e33598a07da721190cc0.src","preCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            IndexMetaData.Custom customIndexMetaData = IndexMetaData.lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"N"}],"commitId":"4c55dbce1abaf695d1a4b40f87e9b6369b4950e4","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-21 04:29:47","modifiedFileCount":"4","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-08-28 05:35:19","commitOrder":4,"curCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.mappingVersion(in.readVLong());\n        } else {\n            builder.mappingVersion(1);\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            Custom customIndexMetaData = lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","date":"2018-08-28 05:35:19","endLine":801,"groupId":"3","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/c489f63abcde268d7ce36a6958e6d58aaadeb7.src","preCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            Custom customIndexMetaData = lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":760,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":4,"curCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            IndexMetaData.Custom customIndexMetaData = IndexMetaData.lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2018-04-26 03:22:53","endLine":238,"groupId":"52168","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c0/d254509c118192d4f6e33598a07da721190cc0.src","preCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            IndexMetaData.Custom customIndexMetaData = IndexMetaData.lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"N"}],"commitId":"50368656ee2cd7cacb7c029ce46743c523b09585","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-28 05:35:19","modifiedFileCount":"31","status":"M","submitter":"Gordon Brown"},{"authorTime":"2018-08-31 06:04:17","codes":[{"authorDate":"2018-08-31 06:04:17","commitOrder":5,"curCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.mappingVersion(in.readVLong());\n        } else {\n            builder.mappingVersion(1);\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {\n            for (int i = 0; i < customSize; i++) {\n                String key = in.readString();\n                DiffableStringMap custom = new DiffableStringMap(in);\n                builder.putCustom(key, custom);\n            }\n        } else {\n            assert customSize == 0 : \"expected no custom index metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","date":"2018-08-31 06:04:17","endLine":734,"groupId":"35362","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/af709ec5f0c5670d62b0aa905d62b7e407a828.src","preCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.mappingVersion(in.readVLong());\n        } else {\n            builder.mappingVersion(1);\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            Custom customIndexMetaData = lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":686,"status":"M"},{"authorDate":"2018-08-31 06:04:17","commitOrder":5,"curCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        if (in.getVersion().before(Version.V_7_0_0_alpha1)) {\n            \r\n            int customSize = in.readVInt();\n            assert customSize == 0 : \"expected no custom metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2018-08-31 06:04:17","endLine":223,"groupId":"52168","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/f0f86e3e9e130cf565f20805b9fe15a52d8e93.src","preCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String type = in.readString();\n            IndexMetaData.Custom customIndexMetaData = IndexMetaData.lookupPrototypeSafe(type).readFrom(in);\n            builder.putCustom(type, customIndexMetaData);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"13a0d822d0ef425a9b5f27b10a64e20485017833","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-31 06:04:17","modifiedFileCount":"91","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-08-31 21:45:22","codes":[{"authorDate":"2018-08-31 21:45:22","commitOrder":6,"curCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.mappingVersion(in.readVLong());\n        } else {\n            builder.mappingVersion(1);\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            for (int i = 0; i < customSize; i++) {\n                String key = in.readString();\n                DiffableStringMap custom = new DiffableStringMap(in);\n                builder.putCustom(key, custom);\n            }\n        } else {\n            assert customSize == 0 : \"expected no custom index metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","date":"2018-08-31 21:45:22","endLine":734,"groupId":"35362","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a8/8ad4418e0c8ef0b50576bd5463a1d85cb39287.src","preCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.mappingVersion(in.readVLong());\n        } else {\n            builder.mappingVersion(1);\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {\n            for (int i = 0; i < customSize; i++) {\n                String key = in.readString();\n                DiffableStringMap custom = new DiffableStringMap(in);\n                builder.putCustom(key, custom);\n            }\n        } else {\n            assert customSize == 0 : \"expected no custom index metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":686,"status":"M"},{"authorDate":"2018-08-31 21:45:22","commitOrder":6,"curCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        if (in.getVersion().before(Version.V_6_5_0)) {\n            \r\n            int customSize = in.readVInt();\n            assert customSize == 0 : \"expected no custom metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2018-08-31 21:45:22","endLine":223,"groupId":"52168","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7e/2d92563035e5988891aab1151d5a5ccf7c82fa.src","preCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        if (in.getVersion().before(Version.V_7_0_0_alpha1)) {\n            \r\n            int customSize = in.readVInt();\n            assert customSize == 0 : \"expected no custom metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"3eef74d5d582c19c29d7a297a120004bf4d38930","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-31 21:45:22","modifiedFileCount":"108","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-08-31 21:45:22","codes":[{"authorDate":"2018-10-17 04:58:53","commitOrder":7,"curCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.mappingVersion(in.readVLong());\n        } else {\n            builder.mappingVersion(1);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.settingsVersion(in.readVLong());\n        } else {\n            builder.settingsVersion(1);\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            for (int i = 0; i < customSize; i++) {\n                String key = in.readString();\n                DiffableStringMap custom = new DiffableStringMap(in);\n                builder.putCustom(key, custom);\n            }\n        } else {\n            assert customSize == 0 : \"expected no custom index metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","date":"2018-10-17 04:58:53","endLine":764,"groupId":"35362","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/a7733c62eedcba11fed62019b5ce3cc9b87f3e.src","preCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.mappingVersion(in.readVLong());\n        } else {\n            builder.mappingVersion(1);\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            for (int i = 0; i < customSize; i++) {\n                String key = in.readString();\n                DiffableStringMap custom = new DiffableStringMap(in);\n                builder.putCustom(key, custom);\n            }\n        } else {\n            assert customSize == 0 : \"expected no custom index metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":711,"status":"M"},{"authorDate":"2018-08-31 21:45:22","commitOrder":7,"curCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        if (in.getVersion().before(Version.V_6_5_0)) {\n            \r\n            int customSize = in.readVInt();\n            assert customSize == 0 : \"expected no custom metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2018-08-31 21:45:22","endLine":223,"groupId":"52168","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7e/2d92563035e5988891aab1151d5a5ccf7c82fa.src","preCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        if (in.getVersion().before(Version.V_6_5_0)) {\n            \r\n            int customSize = in.readVInt();\n            assert customSize == 0 : \"expected no custom metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"N"}],"commitId":"fbe8dc014c73b833fb5eb5f95215b4286af05644","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-10-17 04:58:53","modifiedFileCount":"144","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-01-24 01:52:17","codes":[{"authorDate":"2018-10-17 04:58:53","commitOrder":8,"curCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.mappingVersion(in.readVLong());\n        } else {\n            builder.mappingVersion(1);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.settingsVersion(in.readVLong());\n        } else {\n            builder.settingsVersion(1);\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            for (int i = 0; i < customSize; i++) {\n                String key = in.readString();\n                DiffableStringMap custom = new DiffableStringMap(in);\n                builder.putCustom(key, custom);\n            }\n        } else {\n            assert customSize == 0 : \"expected no custom index metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","date":"2018-10-17 04:58:53","endLine":764,"groupId":"35362","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/a7733c62eedcba11fed62019b5ce3cc9b87f3e.src","preCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.mappingVersion(in.readVLong());\n        } else {\n            builder.mappingVersion(1);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.settingsVersion(in.readVLong());\n        } else {\n            builder.settingsVersion(1);\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            for (int i = 0; i < customSize; i++) {\n                String key = in.readString();\n                DiffableStringMap custom = new DiffableStringMap(in);\n                builder.putCustom(key, custom);\n            }\n        } else {\n            assert customSize == 0 : \"expected no custom index metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":711,"status":"N"},{"authorDate":"2019-01-24 01:52:17","commitOrder":8,"curCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readStringList());\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        if (in.getVersion().before(Version.V_6_5_0)) {\n            \r\n            int customSize = in.readVInt();\n            assert customSize == 0 : \"expected no custom metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2019-01-24 01:52:17","endLine":216,"groupId":"52168","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e6/6b55b1a7ed6035eb0dcd99d7027ea61fd3706c.src","preCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readList(StreamInput::readString));\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        if (in.getVersion().before(Version.V_6_5_0)) {\n            \r\n            int customSize = in.readVInt();\n            assert customSize == 0 : \"expected no custom metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"169cb387784653262c8de13666772a4942edbecf","commitMessage":"@@@Liberalize StreamOutput#writeStringList (#37768)\n\nIn some cases we only have a string collection instead of a string list\nthat we want to serialize out. We have a convenience method for writing\na list of strings.  but no such method for writing a collection of\nstrings. Yet.  a list of strings is a collection of strings.  so we can\nsimply liberalize StreamOutput#writeStringList to be more generous in\nthe collections that it accepts and write out collections of strings\ntoo. On the other side.  we do not have a convenience method for reading\na list of strings. This commit addresses both of these issues.","date":"2019-01-24 01:52:17","modifiedFileCount":"29","status":"M","submitter":"Jason Tedor"},{"authorTime":"2019-03-14 21:04:36","codes":[{"authorDate":"2019-03-14 21:04:36","commitOrder":9,"curCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = new DiffableStringMap(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        return builder.build();\n    }\n","date":"2019-03-14 21:04:36","endLine":774,"groupId":"67922","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6f/c73ef5f7fa87faab510b93be08d63d09e6740e.src","preCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.mappingVersion(in.readVLong());\n        } else {\n            builder.mappingVersion(1);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            builder.settingsVersion(in.readVLong());\n        } else {\n            builder.settingsVersion(1);\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        if (in.getVersion().onOrAfter(Version.V_6_5_0)) {\n            for (int i = 0; i < customSize; i++) {\n                String key = in.readString();\n                DiffableStringMap custom = new DiffableStringMap(in);\n                builder.putCustom(key, custom);\n            }\n        } else {\n            assert customSize == 0 : \"expected no custom index metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        if (in.getVersion().onOrAfter(Version.V_6_4_0)) {\n            int rolloverAliasesSize = in.readVInt();\n            for (int i = 0; i < rolloverAliasesSize; i++) {\n                builder.putRolloverInfo(new RolloverInfo(in));\n            }\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":738,"status":"M"},{"authorDate":"2019-03-14 21:04:36","commitOrder":9,"curCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2019-03-14 21:04:36","endLine":203,"groupId":"52168","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/84e8ce9fc6a50938c0169e7d9cc344123dc447.src","preCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {\n            builder.patterns(in.readStringList());\n        } else {\n            builder.patterns(Collections.singletonList(in.readString()));\n        }\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        if (in.getVersion().before(Version.V_6_5_0)) {\n            \r\n            int customSize = in.readVInt();\n            assert customSize == 0 : \"expected no custom metadata\";\n            if (customSize > 0) {\n                throw new IllegalStateException(\"unexpected custom metadata when none is supported\");\n            }\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"74ba9cedcb72b5b94836e91af1a22c596b1db29c","commitMessage":"@@@Remove Obsolete BwC Serialization Code (#40032)\n\n* Same as #39879 and #39883 <- no need for BwC logic that covers pre-7.0 versions in 8.0","date":"2019-03-14 21:04:36","modifiedFileCount":"80","status":"M","submitter":"Armin Braun"},{"authorTime":"2019-03-14 21:04:36","codes":[{"authorDate":"2019-04-23 23:55:27","commitOrder":10,"curCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = new DiffableStringMap(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        return builder.build();\n    }\n","date":"2019-04-23 23:55:27","endLine":813,"groupId":"67922","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f3/c0af84a06c902c30e0609c7a7b9cc502ddcd4f.src","preCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = new DiffableStringMap(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":774,"status":"M"},{"authorDate":"2019-03-14 21:04:36","commitOrder":10,"curCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2019-03-14 21:04:36","endLine":203,"groupId":"52168","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/84e8ce9fc6a50938c0169e7d9cc344123dc447.src","preCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"ce5e0762d8184794e0b8de012223559d6047684a","commitMessage":"@@@Introduce aliases version (#41397)\n\nThis commit introduces aliases versions to index metadata. This will be\nuseful in CCR when we replicate aliases.","date":"2019-04-23 23:55:27","modifiedFileCount":"6","status":"M","submitter":"Jason Tedor"},{"authorTime":"2019-03-14 21:04:36","codes":[{"authorDate":"2019-04-24 00:10:05","commitOrder":11,"curCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_7_1_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = new DiffableStringMap(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        return builder.build();\n    }\n","date":"2019-04-24 00:19:37","endLine":813,"groupId":"67922","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/66/1cbb1bf81803661aef20aae00a850e415ca8db.src","preCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_8_0_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = new DiffableStringMap(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":774,"status":"M"},{"authorDate":"2019-03-14 21:04:36","commitOrder":11,"curCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2019-03-14 21:04:36","endLine":203,"groupId":"52168","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/84e8ce9fc6a50938c0169e7d9cc344123dc447.src","preCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"e77dfbc6987fb3293bc06e49cda908933f780cd4","commitMessage":"@@@Adjust BWC version on aliases version upon backport\n\nThis commit adjusts the BWC on the introduction of aliases version to\nindex metadata after that functionality was backported to the 7.x\nbranch.  which is currently targeting 7.1.0.\n","date":"2019-04-24 00:19:37","modifiedFileCount":"2","status":"M","submitter":"Jason Tedor"},{"authorTime":"2019-03-14 21:04:36","codes":[{"authorDate":"2019-04-09 22:57:55","commitOrder":12,"curCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_7_2_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = new DiffableStringMap(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        return builder.build();\n    }\n","date":"2019-05-02 01:54:45","endLine":813,"groupId":"67922","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/41/2e16e14a3a5ffb8713a2154c5d84177400c570.src","preCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_7_1_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = new DiffableStringMap(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":774,"status":"M"},{"authorDate":"2019-03-14 21:04:36","commitOrder":12,"curCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2019-03-14 21:04:36","endLine":203,"groupId":"52168","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/84e8ce9fc6a50938c0169e7d9cc344123dc447.src","preCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"434efd1664efafc535d2b359c09554ca621cff5d","commitMessage":"@@@Add version 7.2.0 constant to master branch\n\nThis commit adds the 7.2.0 constant to the master branch.  and bumps the\nBWC logic accordingly.\n","date":"2019-05-02 01:54:45","modifiedFileCount":"32","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":13,"curCode":"    public static IndexMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_7_2_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetadata mappingMd = new MappingMetadata(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = new DiffableStringMap(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        return builder.build();\n    }\n","date":"2020-04-01 03:52:01","endLine":789,"groupId":"67922","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ec/fd6a631141137b2e135b923ff0ed515e5925c6.src","preCode":"    public static IndexMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_7_2_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetaData mappingMd = new MappingMetaData(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = new DiffableStringMap(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":750,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":13,"curCode":"    public static IndexTemplateMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2020-04-01 03:52:01","endLine":203,"groupId":"52168","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c1/63f35955ec64a7cb5700c64db858a2feca7286.src","preCode":"    public static IndexTemplateMetaData readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetaData aliasMd = new AliasMetaData(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-08-11 22:44:55","commitOrder":14,"curCode":"    public static IndexMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_7_2_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetadata mappingMd = new MappingMetadata(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = new DiffableStringMap(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        if (in.getVersion().onOrAfter(SYSTEM_INDEX_FLAG_ADDED)) {\n            builder.system(in.readBoolean());\n        }\n        return builder.build();\n    }\n","date":"2020-08-11 22:44:55","endLine":870,"groupId":"67922","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/b367dce320599284aadad8f6675844e33d62ae.src","preCode":"    public static IndexMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_7_2_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetadata mappingMd = new MappingMetadata(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = new DiffableStringMap(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":828,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":14,"curCode":"    public static IndexTemplateMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2020-04-01 03:52:01","endLine":203,"groupId":"52168","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c1/63f35955ec64a7cb5700c64db858a2feca7286.src","preCode":"    public static IndexTemplateMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"fd8b557935c58913805044a03de3453e45ab0318","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-11 22:44:55","modifiedFileCount":"130","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-09-14 19:05:22","commitOrder":15,"curCode":"    public static IndexMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_7_2_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetadata mappingMd = new MappingMetadata(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = DiffableStringMap.readFrom(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        if (in.getVersion().onOrAfter(SYSTEM_INDEX_FLAG_ADDED)) {\n            builder.system(in.readBoolean());\n        }\n        return builder.build();\n    }\n","date":"2020-09-14 19:05:22","endLine":875,"groupId":"29255","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/a0a6395bc615e84da506465ef795352a282780.src","preCode":"    public static IndexMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_7_2_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetadata mappingMd = new MappingMetadata(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = new DiffableStringMap(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        if (in.getVersion().onOrAfter(SYSTEM_INDEX_FLAG_ADDED)) {\n            builder.system(in.readBoolean());\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":833,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":15,"curCode":"    public static IndexTemplateMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2020-04-01 03:52:01","endLine":203,"groupId":"52168","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c1/63f35955ec64a7cb5700c64db858a2feca7286.src","preCode":"    public static IndexTemplateMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"0ec40a0abeb85077285f585263b785a33a66ae39","commitMessage":"@@@Save Some Allocations when Working with ClusterState (#62060)\n\nJust a number of obvious spots where we were allocating\nduplicate empty structures or otherwise inefficient that I\nfound while investigating snapshot cluster state update performance.\n","date":"2020-09-14 19:05:22","modifiedFileCount":"12","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-12-01 23:41:48","commitOrder":16,"curCode":"    public static IndexMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_7_2_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetadata mappingMd = new MappingMetadata(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = DiffableStringMap.readFrom(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        if (in.getVersion().onOrAfter(SYSTEM_INDEX_FLAG_ADDED)) {\n            builder.system(in.readBoolean());\n        }\n        builder.timestampMillisRange(IndexLongFieldRange.readFrom(in));\n        return builder.build();\n    }\n","date":"2020-12-01 23:41:48","endLine":892,"groupId":"29255","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/85/f4aca4f4a3dbc0f06200337812a45d0086bd25.src","preCode":"    public static IndexMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_7_2_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetadata mappingMd = new MappingMetadata(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = DiffableStringMap.readFrom(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        if (in.getVersion().onOrAfter(SYSTEM_INDEX_FLAG_ADDED)) {\n            builder.system(in.readBoolean());\n        }\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":849,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":16,"curCode":"    public static IndexTemplateMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2020-04-01 03:52:01","endLine":203,"groupId":"52168","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c1/63f35955ec64a7cb5700c64db858a2feca7286.src","preCode":"    public static IndexTemplateMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"b902d807039d3adc3ae16f14af931d9748b0e92f","commitMessage":"@@@Record timestamp field range in index metadata (#65564)\n\nQueries including a filter by timestamp range are common in time-series\ndata. Moreover older time-series indices are typically made read-only so\nthat the timestamp range becomes immutable. By recording in the index\nmetadata the range of timestamps covered by each index we can very\nefficiently skip shards on the coordinating node.  even if those shards\nare not assigned.\n\nThis commit computes the timestamp range of immutable indices and\nrecords it in the index metadata as the shards start for the first time.\nNote that the only indices it considers immutable today are ones using\nthe `ReadOnlyEngine`.  which includes frozen indices and searchable\nsnapshots but not regular indices with a write block.","date":"2020-12-01 23:41:48","modifiedFileCount":"27","status":"M","submitter":"David Turner"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2021-01-04 23:34:30","commitOrder":17,"curCode":"    public static IndexMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_7_2_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetadata mappingMd = new MappingMetadata(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = DiffableStringMap.readFrom(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        if (in.getVersion().onOrAfter(SYSTEM_INDEX_FLAG_ADDED)) {\n            builder.system(in.readBoolean());\n        }\n        builder.timestampRange(IndexLongFieldRange.readFrom(in));\n        return builder.build();\n    }\n","date":"2021-01-04 23:34:30","endLine":892,"groupId":"107556","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0f/020bbc0568c464ae0ebe3727b1d986cb017eb6.src","preCode":"    public static IndexMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.version(in.readLong());\n        builder.mappingVersion(in.readVLong());\n        builder.settingsVersion(in.readVLong());\n        if (in.getVersion().onOrAfter(Version.V_7_2_0)) {\n            builder.aliasesVersion(in.readVLong());\n        }\n        builder.setRoutingNumShards(in.readInt());\n        builder.state(State.fromId(in.readByte()));\n        builder.settings(readSettingsFromStream(in));\n        builder.primaryTerms(in.readVLongArray());\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            MappingMetadata mappingMd = new MappingMetadata(in);\n            builder.putMapping(mappingMd);\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        int customSize = in.readVInt();\n        for (int i = 0; i < customSize; i++) {\n            String key = in.readString();\n            DiffableStringMap custom = DiffableStringMap.readFrom(in);\n            builder.putCustom(key, custom);\n        }\n        int inSyncAllocationIdsSize = in.readVInt();\n        for (int i = 0; i < inSyncAllocationIdsSize; i++) {\n            int key = in.readVInt();\n            Set<String> allocationIds = DiffableUtils.StringSetValueSerializer.getInstance().read(in, key);\n            builder.putInSyncAllocationIds(key, allocationIds);\n        }\n        int rolloverAliasesSize = in.readVInt();\n        for (int i = 0; i < rolloverAliasesSize; i++) {\n            builder.putRolloverInfo(new RolloverInfo(in));\n        }\n        if (in.getVersion().onOrAfter(SYSTEM_INDEX_FLAG_ADDED)) {\n            builder.system(in.readBoolean());\n        }\n        builder.timestampMillisRange(IndexLongFieldRange.readFrom(in));\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":849,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":17,"curCode":"    public static IndexTemplateMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","date":"2020-04-01 03:52:01","endLine":203,"groupId":"107556","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"readFrom","params":"(StreamInputin)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c1/63f35955ec64a7cb5700c64db858a2feca7286.src","preCode":"    public static IndexTemplateMetadata readFrom(StreamInput in) throws IOException {\n        Builder builder = new Builder(in.readString());\n        builder.order(in.readInt());\n        builder.patterns(in.readStringList());\n        builder.settings(Settings.readSettingsFromStream(in));\n        int mappingsSize = in.readVInt();\n        for (int i = 0; i < mappingsSize; i++) {\n            builder.putMapping(in.readString(), CompressedXContent.readCompressedString(in));\n        }\n        int aliasesSize = in.readVInt();\n        for (int i = 0; i < aliasesSize; i++) {\n            AliasMetadata aliasMd = new AliasMetadata(in);\n            builder.putAlias(aliasMd);\n        }\n        builder.version(in.readOptionalVInt());\n        return builder.build();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"6627ce15310aff7510a645e264500b1d7748882f","commitMessage":"@@@Remove millis qualifier on all the variables that hold the timestamp range in IndexMetadata. (#66688)\n\nSince we introduced (#65583) we are storing the timestamp range in the\nmappings resolution so the qualifier can be misleading.  for that\nreason we rename all related variables to remove any references\nto milliseconds.","date":"2021-01-04 23:34:30","modifiedFileCount":"20","status":"M","submitter":"Francisco Fern?ndez Casta?o"}]
