[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testPercolatorFieldMapper() throws Exception {\n        addQueryFieldMappings();\n        QueryBuilder queryBuilder = termQuery(\"field\", \"value\");\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(SourceToParse.source(\"test\", \"doc\", \"1\",\n                        BytesReference.bytes(XContentFactory\n                                .jsonBuilder()\n                                .startObject()\n                                .field(fieldName, queryBuilder)\n                                .endObject()),\n                        XContentType.JSON));\n\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name())[0].binaryValue().utf8ToString(), equalTo(\"field\\0value\"));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_COMPLETE));\n        BytesRef qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n\n        \r\n        queryBuilder = rangeQuery(\"field\").from(\"a\").to(\"z\");\n        doc = mapperService.documentMapper(\"doc\").parse(SourceToParse.source(\"test\", \"doc\", \"1\", BytesReference.bytes(XContentFactory\n                .jsonBuilder()\n                .startObject()\n                .field(fieldName, queryBuilder)\n                .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_FAILED));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(0));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n    }\n","date":"2018-04-26 03:22:53","endLine":496,"groupId":"29906","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPercolatorFieldMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/5ac41d25f1f852eb1f15d25d3dc3cbea4820ab.src","preCode":"    public void testPercolatorFieldMapper() throws Exception {\n        addQueryFieldMappings();\n        QueryBuilder queryBuilder = termQuery(\"field\", \"value\");\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(SourceToParse.source(\"test\", \"doc\", \"1\",\n                        BytesReference.bytes(XContentFactory\n                                .jsonBuilder()\n                                .startObject()\n                                .field(fieldName, queryBuilder)\n                                .endObject()),\n                        XContentType.JSON));\n\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name())[0].binaryValue().utf8ToString(), equalTo(\"field\\0value\"));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_COMPLETE));\n        BytesRef qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n\n        \r\n        queryBuilder = rangeQuery(\"field\").from(\"a\").to(\"z\");\n        doc = mapperService.documentMapper(\"doc\").parse(SourceToParse.source(\"test\", \"doc\", \"1\", BytesReference.bytes(XContentFactory\n                .jsonBuilder()\n                .startObject()\n                .field(fieldName, queryBuilder)\n                .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_FAILED));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(0));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n    }\n","realPath":"modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testPercolatorFieldMapper_noQuery() throws Exception {\n        addQueryFieldMappings();\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(SourceToParse.source(\"test\", \"doc\", \"1\", BytesReference\n                .bytes(XContentFactory\n                        .jsonBuilder()\n                        .startObject()\n                        .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(0));\n\n        try {\n            mapperService.documentMapper(\"doc\").parse(SourceToParse.source(\"test\", \"doc\", \"1\", BytesReference.bytes(XContentFactory\n                    .jsonBuilder()\n                    .startObject()\n                    .nullField(fieldName)\n                    .endObject()),\n                    XContentType.JSON));\n        } catch (MapperParsingException e) {\n            assertThat(e.getDetailedMessage(), containsString(\"query malformed, must start with start_object\"));\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":576,"groupId":"67844","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPercolatorFieldMapper_noQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/5ac41d25f1f852eb1f15d25d3dc3cbea4820ab.src","preCode":"    public void testPercolatorFieldMapper_noQuery() throws Exception {\n        addQueryFieldMappings();\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(SourceToParse.source(\"test\", \"doc\", \"1\", BytesReference\n                .bytes(XContentFactory\n                        .jsonBuilder()\n                        .startObject()\n                        .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(0));\n\n        try {\n            mapperService.documentMapper(\"doc\").parse(SourceToParse.source(\"test\", \"doc\", \"1\", BytesReference.bytes(XContentFactory\n                    .jsonBuilder()\n                    .startObject()\n                    .nullField(fieldName)\n                    .endObject()),\n                    XContentType.JSON));\n        } catch (MapperParsingException e) {\n            assertThat(e.getDetailedMessage(), containsString(\"query malformed, must start with start_object\"));\n        }\n    }\n","realPath":"modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":556,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-12-25 03:06:50","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testPercolatorFieldMapper() throws Exception {\n        addQueryFieldMappings();\n        QueryBuilder queryBuilder = termQuery(\"field\", \"value\");\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"doc\", \"1\",\n                        BytesReference.bytes(XContentFactory\n                                .jsonBuilder()\n                                .startObject()\n                                .field(fieldName, queryBuilder)\n                                .endObject()),\n                        XContentType.JSON));\n\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name())[0].binaryValue().utf8ToString(), equalTo(\"field\\0value\"));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_COMPLETE));\n        BytesRef qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n\n        \r\n        queryBuilder = rangeQuery(\"field\").from(\"a\").to(\"z\");\n        doc = mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"doc\", \"1\", BytesReference.bytes(XContentFactory\n                .jsonBuilder()\n                .startObject()\n                .field(fieldName, queryBuilder)\n                .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_FAILED));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(0));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n    }\n","date":"2018-12-25 03:06:50","endLine":514,"groupId":"29906","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPercolatorFieldMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/30e48690fe93c8b3151abf89faa3a34123eb8b.src","preCode":"    public void testPercolatorFieldMapper() throws Exception {\n        addQueryFieldMappings();\n        QueryBuilder queryBuilder = termQuery(\"field\", \"value\");\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(SourceToParse.source(\"test\", \"doc\", \"1\",\n                        BytesReference.bytes(XContentFactory\n                                .jsonBuilder()\n                                .startObject()\n                                .field(fieldName, queryBuilder)\n                                .endObject()),\n                        XContentType.JSON));\n\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name())[0].binaryValue().utf8ToString(), equalTo(\"field\\0value\"));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_COMPLETE));\n        BytesRef qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n\n        \r\n        queryBuilder = rangeQuery(\"field\").from(\"a\").to(\"z\");\n        doc = mapperService.documentMapper(\"doc\").parse(SourceToParse.source(\"test\", \"doc\", \"1\", BytesReference.bytes(XContentFactory\n                .jsonBuilder()\n                .startObject()\n                .field(fieldName, queryBuilder)\n                .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_FAILED));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(0));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n    }\n","realPath":"modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":479,"status":"M"},{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testPercolatorFieldMapper_noQuery() throws Exception {\n        addQueryFieldMappings();\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"doc\", \"1\", BytesReference\n                .bytes(XContentFactory\n                        .jsonBuilder()\n                        .startObject()\n                        .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(0));\n\n        try {\n            mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"doc\", \"1\", BytesReference.bytes(XContentFactory\n                    .jsonBuilder()\n                    .startObject()\n                    .nullField(fieldName)\n                    .endObject()),\n                    XContentType.JSON));\n        } catch (MapperParsingException e) {\n            assertThat(e.getDetailedMessage(), containsString(\"query malformed, must start with start_object\"));\n        }\n    }\n","date":"2018-12-25 03:06:50","endLine":594,"groupId":"20320","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPercolatorFieldMapper_noQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/30e48690fe93c8b3151abf89faa3a34123eb8b.src","preCode":"    public void testPercolatorFieldMapper_noQuery() throws Exception {\n        addQueryFieldMappings();\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(SourceToParse.source(\"test\", \"doc\", \"1\", BytesReference\n                .bytes(XContentFactory\n                        .jsonBuilder()\n                        .startObject()\n                        .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(0));\n\n        try {\n            mapperService.documentMapper(\"doc\").parse(SourceToParse.source(\"test\", \"doc\", \"1\", BytesReference.bytes(XContentFactory\n                    .jsonBuilder()\n                    .startObject()\n                    .nullField(fieldName)\n                    .endObject()),\n                    XContentType.JSON));\n        } catch (MapperParsingException e) {\n            assertThat(e.getDetailedMessage(), containsString(\"query malformed, must start with start_object\"));\n        }\n    }\n","realPath":"modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"M"}],"commitId":"7580d9d925d864b25466d693637b3bd3092d44cf","commitMessage":"@@@Make SourceToParse immutable (#36971)\n\nToday the routing of a SourceToParse is assigned in a separate step\nafter the object is created. We can easily forget to set the routing.\nWith this commit.  the routing must be provided in the constructor of\nSourceToParse.\n\nRelates #36921","date":"2018-12-25 03:06:50","modifiedFileCount":"66","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testPercolatorFieldMapper() throws Exception {\n        addQueryFieldMappings();\n        QueryBuilder queryBuilder = termQuery(\"field\", \"value\");\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"1\",\n                        BytesReference.bytes(XContentFactory\n                                .jsonBuilder()\n                                .startObject()\n                                .field(fieldName, queryBuilder)\n                                .endObject()),\n                        XContentType.JSON));\n\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name())[0].binaryValue().utf8ToString(), equalTo(\"field\\0value\"));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_COMPLETE));\n        BytesRef qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n\n        \r\n        queryBuilder = rangeQuery(\"field\").from(\"a\").to(\"z\");\n        doc = mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory\n                .jsonBuilder()\n                .startObject()\n                .field(fieldName, queryBuilder)\n                .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_FAILED));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(0));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n    }\n","date":"2019-10-15 16:05:29","endLine":493,"groupId":"29906","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPercolatorFieldMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b6/0d6e1a96be070204279662bc39dd38eec3524d.src","preCode":"    public void testPercolatorFieldMapper() throws Exception {\n        addQueryFieldMappings();\n        QueryBuilder queryBuilder = termQuery(\"field\", \"value\");\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"doc\", \"1\",\n                        BytesReference.bytes(XContentFactory\n                                .jsonBuilder()\n                                .startObject()\n                                .field(fieldName, queryBuilder)\n                                .endObject()),\n                        XContentType.JSON));\n\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name())[0].binaryValue().utf8ToString(), equalTo(\"field\\0value\"));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_COMPLETE));\n        BytesRef qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n\n        \r\n        queryBuilder = rangeQuery(\"field\").from(\"a\").to(\"z\");\n        doc = mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"doc\", \"1\", BytesReference.bytes(XContentFactory\n                .jsonBuilder()\n                .startObject()\n                .field(fieldName, queryBuilder)\n                .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_FAILED));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(0));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n    }\n","realPath":"modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":458,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testPercolatorFieldMapper_noQuery() throws Exception {\n        addQueryFieldMappings();\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory\n                        .jsonBuilder()\n                        .startObject()\n                        .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(0));\n\n        try {\n            mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory\n                    .jsonBuilder()\n                    .startObject()\n                    .nullField(fieldName)\n                    .endObject()),\n                    XContentType.JSON));\n        } catch (MapperParsingException e) {\n            assertThat(e.getDetailedMessage(), containsString(\"query malformed, must start with start_object\"));\n        }\n    }\n","date":"2019-10-15 16:05:29","endLine":573,"groupId":"21059","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPercolatorFieldMapper_noQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b6/0d6e1a96be070204279662bc39dd38eec3524d.src","preCode":"    public void testPercolatorFieldMapper_noQuery() throws Exception {\n        addQueryFieldMappings();\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"doc\", \"1\", BytesReference\n                .bytes(XContentFactory\n                        .jsonBuilder()\n                        .startObject()\n                        .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(0));\n\n        try {\n            mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"doc\", \"1\", BytesReference.bytes(XContentFactory\n                    .jsonBuilder()\n                    .startObject()\n                    .nullField(fieldName)\n                    .endObject()),\n                    XContentType.JSON));\n        } catch (MapperParsingException e) {\n            assertThat(e.getDetailedMessage(), containsString(\"query malformed, must start with start_object\"));\n        }\n    }\n","realPath":"modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2019-10-30 17:50:23","codes":[{"authorDate":"2019-10-30 17:50:23","commitOrder":4,"curCode":"    public void testPercolatorFieldMapper() throws Exception {\n        addQueryFieldMappings();\n        QueryBuilder queryBuilder = termQuery(\"field\", \"value\");\n        ParsedDocument doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\",\n                        BytesReference.bytes(XContentFactory\n                                .jsonBuilder()\n                                .startObject()\n                                .field(fieldName, queryBuilder)\n                                .endObject()),\n                        XContentType.JSON));\n\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name())[0].binaryValue().utf8ToString(), equalTo(\"field\\0value\"));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_COMPLETE));\n        BytesRef qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n\n        \r\n        queryBuilder = rangeQuery(\"field\").from(\"a\").to(\"z\");\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory\n                .jsonBuilder()\n                .startObject()\n                .field(fieldName, queryBuilder)\n                .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_FAILED));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(0));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n    }\n","date":"2019-10-30 17:50:23","endLine":493,"groupId":"41651","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPercolatorFieldMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/58/bcfce7ee0e99e725ed791fbec018bcd63d3a84.src","preCode":"    public void testPercolatorFieldMapper() throws Exception {\n        addQueryFieldMappings();\n        QueryBuilder queryBuilder = termQuery(\"field\", \"value\");\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"1\",\n                        BytesReference.bytes(XContentFactory\n                                .jsonBuilder()\n                                .startObject()\n                                .field(fieldName, queryBuilder)\n                                .endObject()),\n                        XContentType.JSON));\n\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name())[0].binaryValue().utf8ToString(), equalTo(\"field\\0value\"));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_COMPLETE));\n        BytesRef qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n\n        \r\n        queryBuilder = rangeQuery(\"field\").from(\"a\").to(\"z\");\n        doc = mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory\n                .jsonBuilder()\n                .startObject()\n                .field(fieldName, queryBuilder)\n                .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_FAILED));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(0));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n    }\n","realPath":"modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":458,"status":"M"},{"authorDate":"2019-10-30 17:50:23","commitOrder":4,"curCode":"    public void testPercolatorFieldMapper_noQuery() throws Exception {\n        addQueryFieldMappings();\n        ParsedDocument doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory\n                        .jsonBuilder()\n                        .startObject()\n                        .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(0));\n\n        try {\n            mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory\n                    .jsonBuilder()\n                    .startObject()\n                    .nullField(fieldName)\n                    .endObject()),\n                    XContentType.JSON));\n        } catch (MapperParsingException e) {\n            assertThat(e.getDetailedMessage(), containsString(\"query malformed, must start with start_object\"));\n        }\n    }\n","date":"2019-10-30 17:50:23","endLine":573,"groupId":"21059","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPercolatorFieldMapper_noQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/58/bcfce7ee0e99e725ed791fbec018bcd63d3a84.src","preCode":"    public void testPercolatorFieldMapper_noQuery() throws Exception {\n        addQueryFieldMappings();\n        ParsedDocument doc = mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory\n                        .jsonBuilder()\n                        .startObject()\n                        .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(0));\n\n        try {\n            mapperService.documentMapper(\"doc\").parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory\n                    .jsonBuilder()\n                    .startObject()\n                    .nullField(fieldName)\n                    .endObject()),\n                    XContentType.JSON));\n        } catch (MapperParsingException e) {\n            assertThat(e.getDetailedMessage(), containsString(\"query malformed, must start with start_object\"));\n        }\n    }\n","realPath":"modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"M"}],"commitId":"dbd33f776436c3267a4f0886fbfe168f7f856edd","commitMessage":"@@@Remove type parameter from MapperService.documentMapper() (#48593)\n\nWe only have a single mapper per MapperService now anyway.  so the extra\ntype parameter is surplus to requirements.\n\nRelates to #41059\n","date":"2019-10-30 17:50:23","modifiedFileCount":"24","status":"M","submitter":"Alan Woodward"},{"authorTime":"2019-10-30 17:50:23","codes":[{"authorDate":"2020-02-25 20:00:23","commitOrder":5,"curCode":"    public void testPercolatorFieldMapper() throws Exception {\n        addQueryFieldMappings();\n        QueryBuilder queryBuilder = termQuery(\"field\", \"value\");\n        ParsedDocument doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\",\n                        BytesReference.bytes(XContentFactory\n                                .jsonBuilder()\n                                .startObject()\n                                .field(fieldName, queryBuilder)\n                                .endObject()),\n                        XContentType.JSON));\n\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name())[0].binaryValue().utf8ToString(), equalTo(\"field\\0value\"));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_COMPLETE));\n        BytesRef qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n\n        \r\n        queryBuilder = rangeQuery(\"field\").from(\"a\").to(\"z\");\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory\n                .jsonBuilder()\n                .startObject()\n                .field(fieldName, queryBuilder)\n                .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_FAILED));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(0));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n\n        queryBuilder = rangeQuery(\"date_field\").from(\"now\");\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory\n            .jsonBuilder()\n            .startObject()\n            .field(fieldName, queryBuilder)\n            .endObject()),\n            XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n            equalTo(EXTRACTION_FAILED));\n    }\n","date":"2020-02-25 20:00:23","endLine":504,"groupId":"10608","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPercolatorFieldMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/1c4c400e2dd4033003a05fb86a02c63cd6233a.src","preCode":"    public void testPercolatorFieldMapper() throws Exception {\n        addQueryFieldMappings();\n        QueryBuilder queryBuilder = termQuery(\"field\", \"value\");\n        ParsedDocument doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\",\n                        BytesReference.bytes(XContentFactory\n                                .jsonBuilder()\n                                .startObject()\n                                .field(fieldName, queryBuilder)\n                                .endObject()),\n                        XContentType.JSON));\n\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name())[0].binaryValue().utf8ToString(), equalTo(\"field\\0value\"));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_COMPLETE));\n        BytesRef qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n\n        \r\n        queryBuilder = rangeQuery(\"field\").from(\"a\").to(\"z\");\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory\n                .jsonBuilder()\n                .startObject()\n                .field(fieldName, queryBuilder)\n                .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name()).length, equalTo(1));\n        assertThat(doc.rootDoc().getFields(fieldType.extractionResultField.name())[0].stringValue(),\n                equalTo(EXTRACTION_FAILED));\n        assertThat(doc.rootDoc().getFields(fieldType.queryTermsField.name()).length, equalTo(0));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(1));\n        qbSource = doc.rootDoc().getFields(fieldType.queryBuilderField.name())[0].binaryValue();\n        assertQueryBuilder(qbSource, queryBuilder);\n    }\n","realPath":"modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":458,"status":"M"},{"authorDate":"2019-10-30 17:50:23","commitOrder":5,"curCode":"    public void testPercolatorFieldMapper_noQuery() throws Exception {\n        addQueryFieldMappings();\n        ParsedDocument doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory\n                        .jsonBuilder()\n                        .startObject()\n                        .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(0));\n\n        try {\n            mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory\n                    .jsonBuilder()\n                    .startObject()\n                    .nullField(fieldName)\n                    .endObject()),\n                    XContentType.JSON));\n        } catch (MapperParsingException e) {\n            assertThat(e.getDetailedMessage(), containsString(\"query malformed, must start with start_object\"));\n        }\n    }\n","date":"2019-10-30 17:50:23","endLine":573,"groupId":"10608","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testPercolatorFieldMapper_noQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/58/bcfce7ee0e99e725ed791fbec018bcd63d3a84.src","preCode":"    public void testPercolatorFieldMapper_noQuery() throws Exception {\n        addQueryFieldMappings();\n        ParsedDocument doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory\n                        .jsonBuilder()\n                        .startObject()\n                        .endObject()),\n                XContentType.JSON));\n        assertThat(doc.rootDoc().getFields(fieldType.queryBuilderField.name()).length, equalTo(0));\n\n        try {\n            mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory\n                    .jsonBuilder()\n                    .startObject()\n                    .nullField(fieldName)\n                    .endObject()),\n                    XContentType.JSON));\n        } catch (MapperParsingException e) {\n            assertThat(e.getDetailedMessage(), containsString(\"query malformed, must start with start_object\"));\n        }\n    }\n","realPath":"modules/percolator/src/test/java/org/elasticsearch/percolator/PercolatorFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"N"}],"commitId":"2a95ecb7c1807024f62038a7ebd0dc25982763b3","commitMessage":"@@@Don't index ranges including NOW in percolator (#52748)\n\nCurrently.  date ranges queries using NOW-based date math are rewritten to\nMatchAllDocs queries when being preprocessed for the percolator. However. \nsince we added the verification step.  this can result in incorrect matches when\npercolator queries are run without scores. This commit changes things to instead\nwrap date queries that use NOW with a new DateRangeIncludingNowQuery.\nThis is a simple wrapper query that returns its delegate at rewrite time.  but it can\nbe detected by the percolator QueryAnalyzer and be dealt with accordingly.\n\nThis also allows us to remove a method on QueryRewriteContext.  and push all\nlogic relating to NOW-based ranges into the DateFieldMapper.\n\nFixes #52617","date":"2020-02-25 20:00:23","modifiedFileCount":"9","status":"M","submitter":"Alan Woodward"}]
