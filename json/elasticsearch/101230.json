[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(className), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(className), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(className);\n    }\n","date":"2018-04-26 03:22:53","endLine":268,"groupId":"37454","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStatefulFactory","params":"(Loaderloader@ScriptContext<T>context@MainMethodReservedreserved)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/9e58c763c78c5d7814955a18bf4ff4856654a8.src","preCode":"    private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(className), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(className), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(className);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, reserved);\n        writer.visitEnd();\n\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) { \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":344,"groupId":"61134","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateFactory","params":"(Loaderloader@ScriptContext<T>context@MainMethodReservedreserved@TypeclassType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/9e58c763c78c5d7814955a18bf4ff4856654a8.src","preCode":"    private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, reserved);\n        writer.visitEnd();\n\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) { \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-08-13 23:00:11","codes":[{"authorDate":"2019-08-13 23:00:11","commitOrder":2,"curCode":"    private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, Set<String> extractedVariables) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(className), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(className), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(className);\n    }\n","date":"2019-08-13 23:00:11","endLine":247,"groupId":"37454","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStatefulFactory","params":"(Loaderloader@ScriptContext<T>context@Set<String>extractedVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ce/3f1936f26efa5c41afde765fe2c6cd1719577f.src","preCode":"    private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(className), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(className), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, reserved);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(className);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2019-08-13 23:00:11","commitOrder":2,"curCode":"    private <T> T generateFactory(Loader loader, ScriptContext<T> context, Set<String> extractedVariables, Type classType) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) { \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","date":"2019-08-13 23:00:11","endLine":323,"groupId":"61134","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"generateFactory","params":"(Loaderloader@ScriptContext<T>context@Set<String>extractedVariables@TypeclassType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ce/3f1936f26efa5c41afde765fe2c6cd1719577f.src","preCode":"    private <T> T generateFactory(Loader loader, ScriptContext<T> context, MainMethodReserved reserved, Type classType) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, reserved);\n        writer.visitEnd();\n\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) { \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"7ee47227a1c89b4b0fd2008838a246d52044a842","commitMessage":"@@@Complete decoupling ANTLR AST from Painless AST (#45366)\n\nThis change removes the Reserved class used to track variables usages \nwithin the ANTLR grammar. That task is now performed by an existing pass \n\"extractVariables\" in the Painless AST. The Painless AST no longer has any \ndependencies on the ANTLR AST for state outside of the tree being built. \nThis will simplify future refactoring and opens the possibility of alternate \ngrammars.","date":"2019-08-13 23:00:11","modifiedFileCount":"10","status":"M","submitter":"Jack Conradson"},{"authorTime":"2019-08-13 23:00:11","codes":[{"authorDate":"2019-11-20 23:07:33","commitOrder":3,"curCode":"    private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, Set<String> extractedVariables) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","date":"2019-11-20 23:07:33","endLine":247,"groupId":"37454","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStatefulFactory","params":"(Loaderloader@ScriptContext<T>context@Set<String>extractedVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/bfbe3b40fc6c7fe27d2b1a3efb4fc5f5e468af.src","preCode":"    private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, Set<String> extractedVariables) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(className), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(className), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(className);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2019-08-13 23:00:11","commitOrder":3,"curCode":"    private <T> T generateFactory(Loader loader, ScriptContext<T> context, Set<String> extractedVariables, Type classType) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) { \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","date":"2019-08-13 23:00:11","endLine":323,"groupId":"61134","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"generateFactory","params":"(Loaderloader@ScriptContext<T>context@Set<String>extractedVariables@TypeclassType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ce/3f1936f26efa5c41afde765fe2c6cd1719577f.src","preCode":"    private <T> T generateFactory(Loader loader, ScriptContext<T> context, Set<String> extractedVariables, Type classType) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) { \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"}],"commitId":"3196ba557cb1ac05fb667197aa529ff6d3b4923f","commitMessage":"@@@Painless: Upgrade ASM to 7.2 (#49263)\n\nThis upgrades Painless to use the latest ASM libraries providing support up \nto Java 14. Note the library is not published with the latest versions in an \n\"all\" package.  so we pick up each lib independently that's required. There \nwere some changes to the getType method that require descriptors to be \nused in place of internal class names.","date":"2019-11-20 23:07:33","modifiedFileCount":"1","status":"M","submitter":"Jack Conradson"},{"authorTime":"2019-12-07 04:09:44","codes":[{"authorDate":"2019-12-07 04:09:44","commitOrder":4,"curCode":"    private <T extends ScriptFactory> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","date":"2019-12-07 04:09:44","endLine":262,"groupId":"37454","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStatefulFactory","params":"(Loaderloader@ScriptContext<T>context@Set<String>extractedVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/448a4a3788efc78e0ec65c9919b22a8eb44cde.src","preCode":"    private <T> Type generateStatefulFactory(Loader loader, ScriptContext<T> context, Set<String> extractedVariables) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2019-12-07 04:09:44","commitOrder":4,"curCode":"    private <T extends ScriptFactory> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables,\n        Type classType\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","date":"2019-12-07 04:09:44","endLine":344,"groupId":"61134","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"generateFactory","params":"(Loaderloader@ScriptContext<T>context@Set<String>extractedVariables@TypeclassType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/448a4a3788efc78e0ec65c9919b22a8eb44cde.src","preCode":"    private <T> T generateFactory(Loader loader, ScriptContext<T> context, Set<String> extractedVariables, Type classType) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String classInterfaces[] = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"}],"commitId":"356d1a274e3a7d5c01d9737e5dc47689774fa44b","commitMessage":"@@@Scripting: Groundwork for caching script results (#49895)\n\nIn order to cache script results in the query shard cache.  we need to\ncheck if scripts are deterministic.  This change adds a default method\nto the script factories.  `isResultDeterministic() -> false` which is\nused by the `QueryShardContext`.\n\nScript results were never cached and that does not change here.  Future\nchanges will implement this method based on whether the results of the\nscripts are deterministic or not and therefore cacheable.\n\nRefs: #49466\n","date":"2019-12-07 04:09:44","modifiedFileCount":"58","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2019-12-19 01:27:16","codes":[{"authorDate":"2019-12-07 04:09:44","commitOrder":5,"curCode":"    private <T extends ScriptFactory> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","date":"2019-12-07 04:09:44","endLine":262,"groupId":"37454","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStatefulFactory","params":"(Loaderloader@ScriptContext<T>context@Set<String>extractedVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/448a4a3788efc78e0ec65c9919b22a8eb44cde.src","preCode":"    private <T extends ScriptFactory> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"N"},{"authorDate":"2019-12-19 01:27:16","commitOrder":5,"curCode":"    private <T extends ScriptFactory> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables,\n        Type classType,\n        ScriptRoot scriptRoot\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, extractedVariables);\n\n        String methodName = \"isResultDeterministic\";\n        org.objectweb.asm.commons.Method isResultDeterministic = new org.objectweb.asm.commons.Method(methodName,\n            MethodType.methodType(boolean.class).toMethodDescriptorString());\n\n        GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n        deterAdapter.visitCode();\n        deterAdapter.push(scriptRoot.deterministic);\n        deterAdapter.returnValue();\n        deterAdapter.endMethod();\n\n        writer.visitEnd();\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","date":"2019-12-19 01:27:16","endLine":358,"groupId":"61134","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"generateFactory","params":"(Loaderloader@ScriptContext<T>context@Set<String>extractedVariables@TypeclassType@ScriptRootscriptRoot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/45/db4428aeced9da4bc6b8fb2ca9c4b53ca2351a.src","preCode":"    private <T extends ScriptFactory> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables,\n        Type classType\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"}],"commitId":"779462596b2914307b05284d2f577f13f8eb1eff","commitMessage":"@@@Scripting: Cache script results if deterministic (#50106)\n\nCache results from queries that use scripts if they use only\ndeterministic API calls.  Nondeterministic API calls are marked in the\nwhitelist with the `@nondeterministic` annotation.  Examples are\n`Math.random()` and `new Date()`.\n\nRefs: #49466","date":"2019-12-19 01:27:16","modifiedFileCount":"45","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2019-12-20 01:14:28","codes":[{"authorDate":"2019-12-20 01:14:28","commitOrder":6,"curCode":"    private <T> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","date":"2019-12-20 01:14:28","endLine":262,"groupId":"37454","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStatefulFactory","params":"(Loaderloader@ScriptContext<T>context@Set<String>extractedVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/67/aedf113c32c3341e3164057cab3bd733d32106.src","preCode":"    private <T extends ScriptFactory> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2019-12-20 01:14:28","commitOrder":6,"curCode":"    private <T> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables,\n        Type classType,\n        ScriptRoot scriptRoot\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, extractedVariables);\n\n        String methodName = \"isResultDeterministic\";\n        org.objectweb.asm.commons.Method isResultDeterministic = new org.objectweb.asm.commons.Method(methodName,\n            MethodType.methodType(boolean.class).toMethodDescriptorString());\n\n        GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n        deterAdapter.visitCode();\n        deterAdapter.push(scriptRoot.deterministic);\n        deterAdapter.returnValue();\n        deterAdapter.endMethod();\n\n        writer.visitEnd();\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","date":"2019-12-20 01:14:28","endLine":357,"groupId":"61134","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"generateFactory","params":"(Loaderloader@ScriptContext<T>context@Set<String>extractedVariables@TypeclassType@ScriptRootscriptRoot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/67/aedf113c32c3341e3164057cab3bd733d32106.src","preCode":"    private <T extends ScriptFactory> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables,\n        Type classType,\n        ScriptRoot scriptRoot\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, extractedVariables);\n\n        String methodName = \"isResultDeterministic\";\n        org.objectweb.asm.commons.Method isResultDeterministic = new org.objectweb.asm.commons.Method(methodName,\n            MethodType.methodType(boolean.class).toMethodDescriptorString());\n\n        GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n        deterAdapter.visitCode();\n        deterAdapter.push(scriptRoot.deterministic);\n        deterAdapter.returnValue();\n        deterAdapter.endMethod();\n\n        writer.visitEnd();\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"}],"commitId":"cd721b638658db2eada162444ece45b8eef773fc","commitMessage":"@@@Scripting: ScriptFactory not required by compile (#50344)\n\nAvoid backwards incompatible changes for 8.x and 7.6 by removing type\nrestriction on compile and Factory.  Factories may optionally implement\nScriptFactory.  If so.  then they can indicate determinism and thus\ncacheability.\n\nRelates: #49466\n","date":"2019-12-20 01:14:28","modifiedFileCount":"33","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2020-01-25 00:14:00","codes":[{"authorDate":"2019-12-20 01:14:28","commitOrder":7,"curCode":"    private <T> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","date":"2019-12-20 01:14:28","endLine":262,"groupId":"37454","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStatefulFactory","params":"(Loaderloader@ScriptContext<T>context@Set<String>extractedVariables)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/67/aedf113c32c3341e3164057cab3bd733d32106.src","preCode":"    private <T> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"N"},{"authorDate":"2020-01-25 00:14:00","commitOrder":7,"curCode":"    private <T> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables,\n        Type classType,\n        ScriptRoot scriptRoot\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, extractedVariables);\n\n        String methodName = \"isResultDeterministic\";\n        org.objectweb.asm.commons.Method isResultDeterministic = new org.objectweb.asm.commons.Method(methodName,\n            MethodType.methodType(boolean.class).toMethodDescriptorString());\n\n        GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n        deterAdapter.visitCode();\n        deterAdapter.push(scriptRoot.isDeterministic());\n        deterAdapter.returnValue();\n        deterAdapter.endMethod();\n\n        writer.visitEnd();\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","date":"2020-01-25 00:14:00","endLine":358,"groupId":"61134","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"generateFactory","params":"(Loaderloader@ScriptContext<T>context@Set<String>extractedVariables@TypeclassType@ScriptRootscriptRoot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/2fbbb060cbed55428c4dc9a487c125796e6ead.src","preCode":"    private <T> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables,\n        Type classType,\n        ScriptRoot scriptRoot\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, extractedVariables);\n\n        String methodName = \"isResultDeterministic\";\n        org.objectweb.asm.commons.Method isResultDeterministic = new org.objectweb.asm.commons.Method(methodName,\n            MethodType.methodType(boolean.class).toMethodDescriptorString());\n\n        GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n        deterAdapter.visitCode();\n        deterAdapter.push(scriptRoot.deterministic);\n        deterAdapter.returnValue();\n        deterAdapter.endMethod();\n\n        writer.visitEnd();\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"}],"commitId":"70729f37d47e62c404c965d61da2ddbcaf29f18e","commitMessage":"@@@Split Painless AST into a \"user\" tree and an \"ir\" tree (#51278)\n\nThis PR takes the existing Painless AST responsible for both semantic \nchecking and writing Java ASM and splits it into two separate trees. The first \ntree.  termed the \"user\" tree.  is now responsible for semantic checking and \ngeneration of a second \"ir\" tree. The second tree.  termed the \"ir\" tree.  is \nresponsible for generating the Java ASM bytecode. This change takes the \nnodes in nearly a 1:1 ratio with the exception of some improved super \nclasses for the \"ir\" nodes to help with reduction of boilerplate \ngetters/setters. The Painless AST remains mutable for this PR. This change \nsimply takes the existing AST nodes.  splits them into a \"user\" node and an \nequivalent \"ir\" node. Each \"user\" node will generate it's equivalent \"ir\" node \nduring a separate phase.  but eventually this will be combined into a single \nphase.","date":"2020-01-25 00:14:00","modifiedFileCount":"72","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-02-01 03:06:42","codes":[{"authorDate":"2020-02-01 03:06:42","commitOrder":8,"curCode":"    private <T> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        ScriptRoot scriptRoot\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, scriptRoot.getUsedVariables());\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","date":"2020-02-01 03:06:42","endLine":260,"groupId":"37454","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStatefulFactory","params":"(Loaderloader@ScriptContext<T>context@ScriptRootscriptRoot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/12/e360bab387f24aa2672e9ef5e163c61b9ac8d1.src","preCode":"    private <T> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, extractedVariables);\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2020-02-01 03:06:42","commitOrder":8,"curCode":"    private <T> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Type classType,\n        ScriptRoot scriptRoot\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, scriptRoot.getUsedVariables());\n\n        String methodName = \"isResultDeterministic\";\n        org.objectweb.asm.commons.Method isResultDeterministic = new org.objectweb.asm.commons.Method(methodName,\n            MethodType.methodType(boolean.class).toMethodDescriptorString());\n\n        GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n        deterAdapter.visitCode();\n        deterAdapter.push(scriptRoot.isDeterministic());\n        deterAdapter.returnValue();\n        deterAdapter.endMethod();\n\n        writer.visitEnd();\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","date":"2020-02-01 03:06:42","endLine":354,"groupId":"61134","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"generateFactory","params":"(Loaderloader@ScriptContext<T>context@TypeclassType@ScriptRootscriptRoot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/12/e360bab387f24aa2672e9ef5e163c61b9ac8d1.src","preCode":"    private <T> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Set<String> extractedVariables,\n        Type classType,\n        ScriptRoot scriptRoot\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, extractedVariables);\n\n        String methodName = \"isResultDeterministic\";\n        org.objectweb.asm.commons.Method isResultDeterministic = new org.objectweb.asm.commons.Method(methodName,\n            MethodType.methodType(boolean.class).toMethodDescriptorString());\n\n        GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n        deterAdapter.visitCode();\n        deterAdapter.push(scriptRoot.isDeterministic());\n        deterAdapter.returnValue();\n        deterAdapter.endMethod();\n\n        writer.visitEnd();\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"}],"commitId":"c3767b12e38d9acc8722b177183e41f19f29aed9","commitMessage":"@@@Remove \"extractVariables\" phase from Painless user tree (#51690)\n\nRemoves the \"extractVariables\" phase from the Painless user tree which is \nno longer necessary. The information to retrieve used variables is now \ncollected during the semantic (\"analysis\") phase and passed back through \nScriptRoot to generate the appropriate needs methods in the factories.","date":"2020-02-01 03:06:42","modifiedFileCount":"70","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":9,"curCode":"    private <T> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        ScriptScope scriptScope\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, scriptScope.getUsedVariables());\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","date":"2020-06-26 22:33:37","endLine":260,"groupId":"37454","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStatefulFactory","params":"(Loaderloader@ScriptContext<T>context@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/dfec9e7ddde4539c9570aaa874e0fe678f2efd.src","preCode":"    private <T> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        ScriptRoot scriptRoot\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, scriptRoot.getUsedVariables());\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2020-06-26 22:33:37","commitOrder":9,"curCode":"    private <T> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Type classType,\n        ScriptScope scriptScope\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, scriptScope.getUsedVariables());\n\n        String methodName = \"isResultDeterministic\";\n        org.objectweb.asm.commons.Method isResultDeterministic = new org.objectweb.asm.commons.Method(methodName,\n            MethodType.methodType(boolean.class).toMethodDescriptorString());\n\n        GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n        deterAdapter.visitCode();\n        deterAdapter.push(scriptScope.isDeterministic());\n        deterAdapter.returnValue();\n        deterAdapter.endMethod();\n\n        writer.visitEnd();\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","date":"2020-06-26 22:33:37","endLine":354,"groupId":"61134","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"generateFactory","params":"(Loaderloader@ScriptContext<T>context@TypeclassType@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/dfec9e7ddde4539c9570aaa874e0fe678f2efd.src","preCode":"    private <T> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Type classType,\n        ScriptRoot scriptRoot\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, scriptRoot.getUsedVariables());\n\n        String methodName = \"isResultDeterministic\";\n        org.objectweb.asm.commons.Method isResultDeterministic = new org.objectweb.asm.commons.Method(methodName,\n            MethodType.methodType(boolean.class).toMethodDescriptorString());\n\n        GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n        deterAdapter.visitCode();\n        deterAdapter.push(scriptRoot.isDeterministic());\n        deterAdapter.returnValue();\n        deterAdapter.endMethod();\n\n        writer.visitEnd();\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-08-18 01:34:59","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":10,"curCode":"    private <T> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        ScriptScope scriptScope\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, scriptScope.getUsedVariables());\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","date":"2020-06-26 22:33:37","endLine":260,"groupId":"37454","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStatefulFactory","params":"(Loaderloader@ScriptContext<T>context@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/dfec9e7ddde4539c9570aaa874e0fe678f2efd.src","preCode":"    private <T> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        ScriptScope scriptScope\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, scriptScope.getUsedVariables());\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"N"},{"authorDate":"2020-08-18 01:34:59","commitOrder":10,"curCode":"    private <T> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Type classType,\n        ScriptScope scriptScope\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n        Method docFieldsReflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n            } else if (\"docFields\".equals(method.getName())) {\n                docFieldsReflect = method;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, scriptScope.getUsedVariables());\n\n        String methodName = \"isResultDeterministic\";\n        org.objectweb.asm.commons.Method isResultDeterministic = new org.objectweb.asm.commons.Method(methodName,\n            MethodType.methodType(boolean.class).toMethodDescriptorString());\n\n        GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n        deterAdapter.visitCode();\n        deterAdapter.push(scriptScope.isDeterministic());\n        deterAdapter.returnValue();\n        deterAdapter.endMethod();\n\n        if (docFieldsReflect != null) {\n            if (false == docFieldsReflect.getReturnType().equals(List.class)) {\n                throw new IllegalArgumentException(\"doc_fields must return a List\");\n            }\n            if (docFieldsReflect.getParameterCount() != 0) {\n                throw new IllegalArgumentException(\"doc_fields may not take parameters\");\n            }\n            org.objectweb.asm.commons.Method docFields = new org.objectweb.asm.commons.Method(docFieldsReflect.getName(),\n                MethodType.methodType(List.class).toMethodDescriptorString());\n            GeneratorAdapter docAdapter = new GeneratorAdapter(Opcodes.ASM5, docFields,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, docFieldsReflect.getName(), docFields.getDescriptor(), null, null));\n            docAdapter.visitCode();\n            docAdapter.newInstance(WriterConstants.ARRAY_LIST_TYPE);\n            docAdapter.dup();\n            docAdapter.push(scriptScope.docFields().size());\n            docAdapter.invokeConstructor(WriterConstants.ARRAY_LIST_TYPE, WriterConstants.ARRAY_LIST_CTOR_WITH_SIZE);\n            for (int i = 0; i < scriptScope.docFields().size(); i++) {\n                docAdapter.dup();\n                docAdapter.push(scriptScope.docFields().get(i));\n                docAdapter.invokeInterface(WriterConstants.LIST_TYPE, WriterConstants.LIST_ADD);\n                docAdapter.pop(); \r\n            }\n            docAdapter.returnValue();\n            docAdapter.endMethod();\n        }\n\n        writer.visitEnd();\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","date":"2020-08-18 01:34:59","endLine":379,"groupId":"37455","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"generateFactory","params":"(Loaderloader@ScriptContext<T>context@TypeclassType@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a8/1d7c99e11ffcba82c030fd98aeb4bfe2d5e889.src","preCode":"    private <T> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Type classType,\n        ScriptScope scriptScope\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, scriptScope.getUsedVariables());\n\n        String methodName = \"isResultDeterministic\";\n        org.objectweb.asm.commons.Method isResultDeterministic = new org.objectweb.asm.commons.Method(methodName,\n            MethodType.methodType(boolean.class).toMethodDescriptorString());\n\n        GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n        deterAdapter.visitCode();\n        deterAdapter.push(scriptScope.isDeterministic());\n        deterAdapter.returnValue();\n        deterAdapter.endMethod();\n\n        writer.visitEnd();\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"}],"commitId":"99c885e5dad18c791ff91d03542abf85ad983ad7","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-18 01:34:59","modifiedFileCount":"346","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-07-31 00:01:06","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":11,"curCode":"    private <T> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        ScriptScope scriptScope\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, scriptScope.getUsedVariables());\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","date":"2020-06-26 22:33:37","endLine":260,"groupId":"101230","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStatefulFactory","params":"(Loaderloader@ScriptContext<T>context@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/dfec9e7ddde4539c9570aaa874e0fe678f2efd.src","preCode":"    private <T> Type generateStatefulFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        ScriptScope scriptScope\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER | Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.statefulFactoryClazz).getInternalName();\n        String className = interfaceBase + \"$StatefulFactory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        Method newFactory = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newFactory\".equals(method.getName())) {\n                newFactory = method;\n\n                break;\n            }\n        }\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            writer.visitField(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL, \"$arg\" + count,\n                Type.getType(newFactory.getParameterTypes()[count]).getDescriptor(), null, null).visitEnd();\n        }\n\n        org.objectweb.asm.commons.Method base =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method init = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, newFactory.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, base);\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            constructor.loadThis();\n            constructor.loadArg(count);\n            constructor.putField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method newInstance = null;\n\n        for (Method method : context.statefulFactoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                newInstance = method;\n\n                break;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(newInstance.getName(),\n            MethodType.methodType(newInstance.getReturnType(), newInstance.getParameterTypes()).toMethodDescriptorString());\n\n        List<Class<?>> parameters = new ArrayList<>(Arrays.asList(newFactory.getParameterTypes()));\n        parameters.addAll(Arrays.asList(newInstance.getParameterTypes()));\n\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, parameters.toArray(new Class<?>[] {})).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n            writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(WriterConstants.CLASS_TYPE);\n        adapter.dup();\n\n        for (int count = 0; count < newFactory.getParameterTypes().length; ++count) {\n            adapter.loadThis();\n            adapter.getField(Type.getType(\"L\" + className + \";\"), \"$arg\" + count, Type.getType(newFactory.getParameterTypes()[count]));\n        }\n\n        adapter.loadArgs();\n        adapter.invokeConstructor(WriterConstants.CLASS_TYPE, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.statefulFactoryClazz, writer, scriptScope.getUsedVariables());\n        writer.visitEnd();\n\n        loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        return Type.getType(\"L\" + className + \";\");\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"N"},{"authorDate":"2021-07-31 00:01:06","commitOrder":11,"curCode":"    private <T> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Type classType,\n        ScriptScope scriptScope\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n        Method docFieldsReflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, scriptScope.getUsedVariables());\n\n        String methodName = \"isResultDeterministic\";\n        org.objectweb.asm.commons.Method isResultDeterministic = new org.objectweb.asm.commons.Method(methodName,\n            MethodType.methodType(boolean.class).toMethodDescriptorString());\n\n        GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n        deterAdapter.visitCode();\n        deterAdapter.push(scriptScope.isDeterministic());\n        deterAdapter.returnValue();\n        deterAdapter.endMethod();\n\n        writer.visitEnd();\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","date":"2021-07-31 00:01:06","endLine":341,"groupId":"101230","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"generateFactory","params":"(Loaderloader@ScriptContext<T>context@TypeclassType@ScriptScopescriptScope)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/567750c6815f492233635fb28e4130a655a2aa.src","preCode":"    private <T> T generateFactory(\n        Loader loader,\n        ScriptContext<T> context,\n        Type classType,\n        ScriptScope scriptScope\n    ) {\n        int classFrames = ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS;\n        int classAccess = Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER| Opcodes.ACC_FINAL;\n        String interfaceBase = Type.getType(context.factoryClazz).getInternalName();\n        String className = interfaceBase + \"$Factory\";\n        String[] classInterfaces = new String[] { interfaceBase };\n\n        ClassWriter writer = new ClassWriter(classFrames);\n        writer.visit(WriterConstants.CLASS_VERSION, classAccess, className, null, OBJECT_TYPE.getInternalName(), classInterfaces);\n\n        org.objectweb.asm.commons.Method init =\n            new org.objectweb.asm.commons.Method(\"<init>\", MethodType.methodType(void.class).toMethodDescriptorString());\n\n        GeneratorAdapter constructor = new GeneratorAdapter(Opcodes.ASM5, init,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, init.getName(), init.getDescriptor(), null, null));\n        constructor.visitCode();\n        constructor.loadThis();\n        constructor.invokeConstructor(OBJECT_TYPE, init);\n        constructor.returnValue();\n        constructor.endMethod();\n\n        Method reflect = null;\n        Method docFieldsReflect = null;\n\n        for (Method method : context.factoryClazz.getMethods()) {\n            if (\"newInstance\".equals(method.getName())) {\n                reflect = method;\n            } else if (\"newFactory\".equals(method.getName())) {\n                reflect = method;\n            } else if (\"docFields\".equals(method.getName())) {\n                docFieldsReflect = method;\n            }\n        }\n\n        org.objectweb.asm.commons.Method instance = new org.objectweb.asm.commons.Method(reflect.getName(),\n            MethodType.methodType(reflect.getReturnType(), reflect.getParameterTypes()).toMethodDescriptorString());\n        org.objectweb.asm.commons.Method constru = new org.objectweb.asm.commons.Method(\"<init>\",\n            MethodType.methodType(void.class, reflect.getParameterTypes()).toMethodDescriptorString());\n\n        GeneratorAdapter adapter = new GeneratorAdapter(Opcodes.ASM5, instance,\n                writer.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_FINAL,\n                                   instance.getName(), instance.getDescriptor(), null, null));\n        adapter.visitCode();\n        adapter.newInstance(classType);\n        adapter.dup();\n        adapter.loadArgs();\n        adapter.invokeConstructor(classType, constru);\n        adapter.returnValue();\n        adapter.endMethod();\n\n        writeNeedsMethods(context.factoryClazz, writer, scriptScope.getUsedVariables());\n\n        String methodName = \"isResultDeterministic\";\n        org.objectweb.asm.commons.Method isResultDeterministic = new org.objectweb.asm.commons.Method(methodName,\n            MethodType.methodType(boolean.class).toMethodDescriptorString());\n\n        GeneratorAdapter deterAdapter = new GeneratorAdapter(Opcodes.ASM5, isResultDeterministic,\n            writer.visitMethod(Opcodes.ACC_PUBLIC, methodName, isResultDeterministic.getDescriptor(), null, null));\n        deterAdapter.visitCode();\n        deterAdapter.push(scriptScope.isDeterministic());\n        deterAdapter.returnValue();\n        deterAdapter.endMethod();\n\n        if (docFieldsReflect != null) {\n            if (false == docFieldsReflect.getReturnType().equals(List.class)) {\n                throw new IllegalArgumentException(\"doc_fields must return a List\");\n            }\n            if (docFieldsReflect.getParameterCount() != 0) {\n                throw new IllegalArgumentException(\"doc_fields may not take parameters\");\n            }\n            org.objectweb.asm.commons.Method docFields = new org.objectweb.asm.commons.Method(docFieldsReflect.getName(),\n                MethodType.methodType(List.class).toMethodDescriptorString());\n            GeneratorAdapter docAdapter = new GeneratorAdapter(Opcodes.ASM5, docFields,\n                writer.visitMethod(Opcodes.ACC_PUBLIC, docFieldsReflect.getName(), docFields.getDescriptor(), null, null));\n            docAdapter.visitCode();\n            docAdapter.newInstance(WriterConstants.ARRAY_LIST_TYPE);\n            docAdapter.dup();\n            docAdapter.push(scriptScope.docFields().size());\n            docAdapter.invokeConstructor(WriterConstants.ARRAY_LIST_TYPE, WriterConstants.ARRAY_LIST_CTOR_WITH_SIZE);\n            for (int i = 0; i < scriptScope.docFields().size(); i++) {\n                docAdapter.dup();\n                docAdapter.push(scriptScope.docFields().get(i));\n                docAdapter.invokeInterface(WriterConstants.LIST_TYPE, WriterConstants.LIST_ADD);\n                docAdapter.pop(); \r\n            }\n            docAdapter.returnValue();\n            docAdapter.endMethod();\n        }\n\n        writer.visitEnd();\n        Class<?> factory = loader.defineFactory(className.replace('/', '.'), writer.toByteArray());\n\n        try {\n            return context.factoryClazz.cast(factory.getConstructor().newInstance());\n        } catch (Exception exception) {\n            \r\n            throw new IllegalStateException(\n                \"An internal error occurred attempting to define the factory class [\" + className + \"].\", exception);\n        }\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/PainlessScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"}],"commitId":"33e9c07ce9e16babb3cc92dac8737d8f17ddb42e","commitMessage":"@@@Remove un-used doc fields phase in Painless (#75851)\n\nOriginally.  a doc fields phase was created to collect information about what fields are accessed using constant values. This was going to be used for detecting cyclical field access in runtime fields.  but another approach was taken instead. This change deletes the un-used phase.","date":"2021-07-31 00:01:06","modifiedFileCount":"4","status":"M","submitter":"Jack Conradson"}]
