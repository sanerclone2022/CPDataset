[{"authorTime":"2019-07-31 10:52:59","codes":[{"authorDate":"2018-12-18 04:38:14","commitOrder":2,"curCode":"    public void testOrientationParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"tree\", \"quadtree\")\n                .field(\"orientation\", \"left\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        ShapeBuilder.Orientation orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"tree\", \"quadtree\")\n                .field(\"orientation\", \"right\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n        assertFieldWarnings(\"tree\");\n    }\n","date":"2018-12-18 04:38:14","endLine":123,"groupId":"61784","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrientationParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/d8c72531db20d582f355aeece9105b3db672b6.src","preCode":"    public void testOrientationParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"tree\", \"quadtree\")\n                .field(\"orientation\", \"left\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        ShapeBuilder.Orientation orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"tree\", \"quadtree\")\n                .field(\"orientation\", \"right\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n        assertFieldWarnings(\"tree\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"NB"},{"authorDate":"2019-07-31 10:52:59","commitOrder":2,"curCode":"    public void testOrientationParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"orientation\", \"left\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        ShapeBuilder.Orientation orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"orientation\", \"right\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n    }\n","date":"2019-07-31 10:52:59","endLine":97,"groupId":"61784","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrientationParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d1/ca1a035a9bbf07a236fc9401a4ea70925e485a.src","preCode":"    public void testOrientationParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"orientation\", \"left\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        ShapeBuilder.Orientation orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"orientation\", \"right\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/ShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"}],"commitId":"b07310022d2ae66ef28b011d289a3da6b197ba1e","commitMessage":"@@@[SPATIAL] New ShapeFieldMapper for indexing cartesian geometries (#44980)\n\nThis commit adds a new ShapeFieldMapper to the xpack spatial module for\nindexing arbitrary cartesian geometries using a new field type called shape.\nThe indexing approach leverages lucene's new XYShape field type which is\nbacked by BKD in the same manner as LatLonShape but without the WGS84\nlatitude longitude restrictions. The new field mapper builds on and\nextends the refactoring effort in AbstractGeometryFieldMapper and accepts\nshapes in either GeoJSON or WKT format (both of which support non geospatial geometries).\n\nTests are provided in the ShapeFieldMapperTest class in the same manner\nas GeoShapeFieldMapperTests and LegacyGeoShapeFieldMapperTests.\nDocumentation for how to use the new field type and what parameters are\naccepted is included. The QueryBuilder for searching indexed shapes is provided in a separate commit.","date":"2019-07-31 10:52:59","modifiedFileCount":"6","status":"M","submitter":"Nick Knize"},{"authorTime":"2019-07-31 10:52:59","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":3,"curCode":"    public void testOrientationParsing() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"orientation\", \"left\"))\n        );\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        ShapeBuilder.Orientation orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"orientation\", \"right\"))\n        );\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n        assertFieldWarnings(\"tree\", \"strategy\");\n    }\n","date":"2020-08-25 01:10:47","endLine":161,"groupId":"66431","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrientationParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/73/82d4645d25bf6f8fa9932342b46e3e7b3008b6.src","preCode":"    public void testOrientationParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"tree\", \"quadtree\")\n                .field(\"orientation\", \"left\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        ShapeBuilder.Orientation orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"tree\", \"quadtree\")\n                .field(\"orientation\", \"right\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n        assertFieldWarnings(\"tree\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2019-07-31 10:52:59","commitOrder":3,"curCode":"    public void testOrientationParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"orientation\", \"left\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        ShapeBuilder.Orientation orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"orientation\", \"right\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n    }\n","date":"2019-07-31 10:52:59","endLine":97,"groupId":"61784","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrientationParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d1/ca1a035a9bbf07a236fc9401a4ea70925e485a.src","preCode":"    public void testOrientationParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"orientation\", \"left\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        ShapeBuilder.Orientation orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"orientation\", \"right\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/ShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"e2dd0bde26e6c1f9f1a5137a5bf432d348e4205e","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-25 01:10:47","modifiedFileCount":"48","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-11-06 23:20:25","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":4,"curCode":"    public void testOrientationParsing() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"orientation\", \"left\"))\n        );\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        ShapeBuilder.Orientation orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"orientation\", \"right\"))\n        );\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n        assertFieldWarnings(\"tree\", \"strategy\");\n    }\n","date":"2020-08-25 01:10:47","endLine":161,"groupId":"66431","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrientationParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/73/82d4645d25bf6f8fa9932342b46e3e7b3008b6.src","preCode":"    public void testOrientationParsing() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"orientation\", \"left\"))\n        );\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        ShapeBuilder.Orientation orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"orientation\", \"right\"))\n        );\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n        assertFieldWarnings(\"tree\", \"strategy\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"},{"authorDate":"2020-11-06 23:20:25","commitOrder":4,"curCode":"    public void testOrientationParsing() throws IOException {\n\n        DocumentMapper defaultMapper = createDocumentMapper(fieldMapping(b -> {\n            b.field(\"type\", \"shape\");\n            b.field(\"orientation\", \"left\");\n        }));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(FIELD_NAME);\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        ShapeBuilder.Orientation orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        defaultMapper = createDocumentMapper(fieldMapping(b -> {\n            b.field(\"type\", \"shape\");\n            b.field(\"orientation\", \"right\");\n        }));\n        fieldMapper = defaultMapper.mappers().getMapper(FIELD_NAME);\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n    }\n","date":"2020-11-06 23:20:25","endLine":93,"groupId":"5166","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrientationParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/51/a90405b731793e07e0539c143ab7a4e693405c.src","preCode":"    public void testOrientationParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"orientation\", \"left\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        ShapeBuilder.Orientation orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"orientation\", \"right\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/ShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"038fc354abe932c3fc7615beb4e3b991f1219533","commitMessage":"@@@Use MapperTestCase for cartesian mappers tests (#64705)\n\nThis commit changes the cartesian mapper tests (point and shape fields) so that they use MapperTestCase. ","date":"2020-11-06 23:20:25","modifiedFileCount":"0","status":"M","submitter":"Ignacio Vera"},{"authorTime":"2021-06-17 05:31:31","codes":[{"authorDate":"2021-06-17 05:31:31","commitOrder":5,"curCode":"    public void testOrientationParsing() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"orientation\", \"left\"))\n        );\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        Orientation orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(Orientation.LEFT));\n        assertThat(orientation, equalTo(Orientation.CW));\n\n        \r\n        mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"orientation\", \"right\"))\n        );\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(Orientation.RIGHT));\n        assertThat(orientation, equalTo(Orientation.CCW));\n        assertFieldWarnings(\"tree\", \"strategy\");\n    }\n","date":"2021-06-17 05:31:31","endLine":198,"groupId":"103097","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrientationParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/51/4a168a0a14ca1b42e33059d69eb2d328128814.src","preCode":"    public void testOrientationParsing() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"orientation\", \"left\"))\n        );\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        ShapeBuilder.Orientation orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"orientation\", \"right\"))\n        );\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        orientation = ((LegacyGeoShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n        assertFieldWarnings(\"tree\", \"strategy\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"},{"authorDate":"2021-06-17 05:31:31","commitOrder":5,"curCode":"    public void testOrientationParsing() throws IOException {\n\n        DocumentMapper defaultMapper = createDocumentMapper(fieldMapping(b -> {\n            b.field(\"type\", \"shape\");\n            b.field(\"orientation\", \"left\");\n        }));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(FIELD_NAME);\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        Orientation orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(Orientation.LEFT));\n        assertThat(orientation, equalTo(Orientation.CW));\n\n        \r\n        defaultMapper = createDocumentMapper(fieldMapping(b -> {\n            b.field(\"type\", \"shape\");\n            b.field(\"orientation\", \"right\");\n        }));\n        fieldMapper = defaultMapper.mappers().getMapper(FIELD_NAME);\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(Orientation.RIGHT));\n        assertThat(orientation, equalTo(Orientation.CCW));\n    }\n","date":"2021-06-17 05:31:31","endLine":100,"groupId":"103097","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testOrientationParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/75233ff52d02283691729d444ba739fd106bb1.src","preCode":"    public void testOrientationParsing() throws IOException {\n\n        DocumentMapper defaultMapper = createDocumentMapper(fieldMapping(b -> {\n            b.field(\"type\", \"shape\");\n            b.field(\"orientation\", \"left\");\n        }));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(FIELD_NAME);\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        ShapeBuilder.Orientation orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.LEFT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CW));\n\n        \r\n        defaultMapper = createDocumentMapper(fieldMapping(b -> {\n            b.field(\"type\", \"shape\");\n            b.field(\"orientation\", \"right\");\n        }));\n        fieldMapper = defaultMapper.mappers().getMapper(FIELD_NAME);\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        orientation = ((ShapeFieldMapper)fieldMapper).fieldType().orientation();\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.COUNTER_CLOCKWISE));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.RIGHT));\n        assertThat(orientation, equalTo(ShapeBuilder.Orientation.CCW));\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/ShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"6a8f8f3f718bd21bf14176049c9e1f1def13463b","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-17 05:31:31","modifiedFileCount":"4429","status":"M","submitter":"Igor Motov"}]
