[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testActiveInactive() {\n\n        createIndex(\"test\", Settings.builder().put(\"index.number_of_shards\", 2).put(\"index.number_of_replicas\", 0).build());\n        IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        IndexService test = indicesService.indexService(resolveIndex(\"test\"));\n\n        MockController controller = new MockController(Settings.builder()\n                                                       .put(\"indices.memory.index_buffer_size\", \"5mb\")\n                                                       .build());\n\n        IndexShard shard0 = test.getShard(0);\n        controller.simulateIndexing(shard0);\n        IndexShard shard1 = test.getShard(1);\n        controller.simulateIndexing(shard1);\n\n        controller.assertBuffer(shard0, 1);\n        controller.assertBuffer(shard1, 1);\n\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard1);\n\n        controller.assertBuffer(shard0, 2);\n        controller.assertBuffer(shard1, 2);\n\n        \r\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 2);\n\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n        controller.assertBuffer(shard1, 4);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n        \r\n        controller.assertBuffer(shard1, 0);\n    }\n","date":"2018-04-26 03:22:53","endLine":239,"groupId":"30712","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testActiveInactive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/cc771370e2138403ab4f06e6f57d8353e29823.src","preCode":"    public void testActiveInactive() {\n\n        createIndex(\"test\", Settings.builder().put(\"index.number_of_shards\", 2).put(\"index.number_of_replicas\", 0).build());\n        IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        IndexService test = indicesService.indexService(resolveIndex(\"test\"));\n\n        MockController controller = new MockController(Settings.builder()\n                                                       .put(\"indices.memory.index_buffer_size\", \"5mb\")\n                                                       .build());\n\n        IndexShard shard0 = test.getShard(0);\n        controller.simulateIndexing(shard0);\n        IndexShard shard1 = test.getShard(1);\n        controller.simulateIndexing(shard1);\n\n        controller.assertBuffer(shard0, 1);\n        controller.assertBuffer(shard1, 1);\n\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard1);\n\n        controller.assertBuffer(shard0, 2);\n        controller.assertBuffer(shard1, 2);\n\n        \r\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 2);\n\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n        controller.assertBuffer(shard1, 4);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n        \r\n        controller.assertBuffer(shard1, 0);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndexingMemoryControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testThrottling() throws Exception {\n        createIndex(\"test\", Settings.builder().put(\"index.number_of_shards\", 3).put(\"index.number_of_replicas\", 0).build());\n        IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        IndexService test = indicesService.indexService(resolveIndex(\"test\"));\n\n        MockController controller = new MockController(Settings.builder()\n                                                       .put(\"indices.memory.index_buffer_size\", \"4mb\").build());\n        IndexShard shard0 = test.getShard(0);\n        IndexShard shard1 = test.getShard(1);\n        IndexShard shard2 = test.getShard(2);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.assertBuffer(shard0, 3);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n\n        \r\n        controller.assertWriting(shard0, 3);\n        controller.assertWriting(shard1, 0);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 2);\n\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n\n        \r\n        controller.assertWriting(shard0, 3);\n        controller.assertWriting(shard1, 4);\n        controller.assertBuffer(shard0, 1);\n        controller.assertBuffer(shard1, 0);\n\n        controller.assertNotThrottled(shard0);\n        controller.assertThrottled(shard1);\n\n        logger.info(\"--> Indexing more data\");\n\n        \r\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n\n        \r\n        controller.assertWriting(shard0, 8);\n        controller.assertWriting(shard1, 4);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 0);\n\n        controller.assertThrottled(shard0);\n        controller.assertThrottled(shard1);\n\n        \r\n        controller.doneWriting(shard0);\n        controller.doneWriting(shard1);\n        controller.forceCheck();\n        controller.assertNotThrottled(shard0);\n        controller.assertNotThrottled(shard1);\n    }\n","date":"2018-04-26 03:22:53","endLine":348,"groupId":"36512","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testThrottling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/cc771370e2138403ab4f06e6f57d8353e29823.src","preCode":"    public void testThrottling() throws Exception {\n        createIndex(\"test\", Settings.builder().put(\"index.number_of_shards\", 3).put(\"index.number_of_replicas\", 0).build());\n        IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        IndexService test = indicesService.indexService(resolveIndex(\"test\"));\n\n        MockController controller = new MockController(Settings.builder()\n                                                       .put(\"indices.memory.index_buffer_size\", \"4mb\").build());\n        IndexShard shard0 = test.getShard(0);\n        IndexShard shard1 = test.getShard(1);\n        IndexShard shard2 = test.getShard(2);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.assertBuffer(shard0, 3);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n\n        \r\n        controller.assertWriting(shard0, 3);\n        controller.assertWriting(shard1, 0);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 2);\n\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n\n        \r\n        controller.assertWriting(shard0, 3);\n        controller.assertWriting(shard1, 4);\n        controller.assertBuffer(shard0, 1);\n        controller.assertBuffer(shard1, 0);\n\n        controller.assertNotThrottled(shard0);\n        controller.assertThrottled(shard1);\n\n        logger.info(\"--> Indexing more data\");\n\n        \r\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n\n        \r\n        controller.assertWriting(shard0, 8);\n        controller.assertWriting(shard1, 4);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 0);\n\n        controller.assertThrottled(shard0);\n        controller.assertThrottled(shard1);\n\n        \r\n        controller.doneWriting(shard0);\n        controller.doneWriting(shard1);\n        controller.forceCheck();\n        controller.assertNotThrottled(shard0);\n        controller.assertNotThrottled(shard1);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndexingMemoryControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-09-28 01:00:37","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testActiveInactive() {\n\n        createIndex(\"test\", Settings.builder().put(\"index.number_of_shards\", 2).put(\"index.number_of_replicas\", 0).build());\n        IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        IndexService test = indicesService.indexService(resolveIndex(\"test\"));\n\n        MockController controller = new MockController(Settings.builder()\n                                                       .put(\"indices.memory.index_buffer_size\", \"5mb\")\n                                                       .build());\n\n        IndexShard shard0 = test.getShard(0);\n        controller.simulateIndexing(shard0);\n        IndexShard shard1 = test.getShard(1);\n        controller.simulateIndexing(shard1);\n\n        controller.assertBuffer(shard0, 1);\n        controller.assertBuffer(shard1, 1);\n\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard1);\n\n        controller.assertBuffer(shard0, 2);\n        controller.assertBuffer(shard1, 2);\n\n        \r\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 2);\n\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n        controller.assertBuffer(shard1, 4);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n        \r\n        controller.assertBuffer(shard1, 0);\n    }\n","date":"2018-04-26 03:22:53","endLine":239,"groupId":"30712","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testActiveInactive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/cc771370e2138403ab4f06e6f57d8353e29823.src","preCode":"    public void testActiveInactive() {\n\n        createIndex(\"test\", Settings.builder().put(\"index.number_of_shards\", 2).put(\"index.number_of_replicas\", 0).build());\n        IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        IndexService test = indicesService.indexService(resolveIndex(\"test\"));\n\n        MockController controller = new MockController(Settings.builder()\n                                                       .put(\"indices.memory.index_buffer_size\", \"5mb\")\n                                                       .build());\n\n        IndexShard shard0 = test.getShard(0);\n        controller.simulateIndexing(shard0);\n        IndexShard shard1 = test.getShard(1);\n        controller.simulateIndexing(shard1);\n\n        controller.assertBuffer(shard0, 1);\n        controller.assertBuffer(shard1, 1);\n\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard1);\n\n        controller.assertBuffer(shard0, 2);\n        controller.assertBuffer(shard1, 2);\n\n        \r\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 2);\n\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n        controller.assertBuffer(shard1, 4);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n        \r\n        controller.assertBuffer(shard1, 0);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndexingMemoryControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"N"},{"authorDate":"2018-09-28 01:00:37","commitOrder":2,"curCode":"    public void testThrottling() throws Exception {\n        createIndex(\"test\", Settings.builder().put(\"index.number_of_shards\", 3).put(\"index.number_of_replicas\", 0).build());\n        IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        IndexService test = indicesService.indexService(resolveIndex(\"test\"));\n\n        MockController controller = new MockController(Settings.builder()\n                                                       .put(\"indices.memory.index_buffer_size\", \"4mb\").build());\n        IndexShard shard0 = test.getShard(0);\n        IndexShard shard1 = test.getShard(1);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.assertBuffer(shard0, 3);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n\n        \r\n        controller.assertWriting(shard0, 3);\n        controller.assertWriting(shard1, 0);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 2);\n\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n\n        \r\n        controller.assertWriting(shard0, 3);\n        controller.assertWriting(shard1, 4);\n        controller.assertBuffer(shard0, 1);\n        controller.assertBuffer(shard1, 0);\n\n        controller.assertNotThrottled(shard0);\n        controller.assertThrottled(shard1);\n\n        logger.info(\"--> Indexing more data\");\n\n        \r\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n\n        \r\n        controller.assertWriting(shard0, 8);\n        controller.assertWriting(shard1, 4);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 0);\n\n        controller.assertThrottled(shard0);\n        controller.assertThrottled(shard1);\n\n        \r\n        controller.doneWriting(shard0);\n        controller.doneWriting(shard1);\n        controller.forceCheck();\n        controller.assertNotThrottled(shard0);\n        controller.assertNotThrottled(shard1);\n    }\n","date":"2018-09-28 01:00:37","endLine":347,"groupId":"36512","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testThrottling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/a23b155e841a1b2c907c70f52fa43871b52b27.src","preCode":"    public void testThrottling() throws Exception {\n        createIndex(\"test\", Settings.builder().put(\"index.number_of_shards\", 3).put(\"index.number_of_replicas\", 0).build());\n        IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        IndexService test = indicesService.indexService(resolveIndex(\"test\"));\n\n        MockController controller = new MockController(Settings.builder()\n                                                       .put(\"indices.memory.index_buffer_size\", \"4mb\").build());\n        IndexShard shard0 = test.getShard(0);\n        IndexShard shard1 = test.getShard(1);\n        IndexShard shard2 = test.getShard(2);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.assertBuffer(shard0, 3);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n\n        \r\n        controller.assertWriting(shard0, 3);\n        controller.assertWriting(shard1, 0);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 2);\n\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n\n        \r\n        controller.assertWriting(shard0, 3);\n        controller.assertWriting(shard1, 4);\n        controller.assertBuffer(shard0, 1);\n        controller.assertBuffer(shard1, 0);\n\n        controller.assertNotThrottled(shard0);\n        controller.assertThrottled(shard1);\n\n        logger.info(\"--> Indexing more data\");\n\n        \r\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n\n        \r\n        controller.assertWriting(shard0, 8);\n        controller.assertWriting(shard1, 4);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 0);\n\n        controller.assertThrottled(shard0);\n        controller.assertThrottled(shard1);\n\n        \r\n        controller.doneWriting(shard0);\n        controller.doneWriting(shard1);\n        controller.forceCheck();\n        controller.assertNotThrottled(shard0);\n        controller.assertNotThrottled(shard1);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndexingMemoryControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"a26cc1a2422c7d6eda7d0c204f7588d79fa597e6","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-28 01:00:37","modifiedFileCount":"338","status":"M","submitter":"Lee Hinman"},{"authorTime":"2020-01-10 07:18:23","codes":[{"authorDate":"2020-01-10 07:18:23","commitOrder":3,"curCode":"    public void testActiveInactive() throws IOException {\n\n        MockController controller = new MockController(Settings.builder()\n                                                       .put(\"indices.memory.index_buffer_size\", \"5mb\")\n                                                       .build());\n\n        IndexShard shard0 = newStartedShard();\n        controller.simulateIndexing(shard0);\n        IndexShard shard1 = newStartedShard();\n        controller.simulateIndexing(shard1);\n\n        controller.assertBuffer(shard0, 1);\n        controller.assertBuffer(shard1, 1);\n\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard1);\n\n        controller.assertBuffer(shard0, 2);\n        controller.assertBuffer(shard1, 2);\n\n        \r\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 2);\n\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n        controller.assertBuffer(shard1, 4);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n        \r\n        controller.assertBuffer(shard1, 0);\n        closeShards(shard0, shard1);\n    }\n","date":"2020-01-10 07:18:23","endLine":234,"groupId":"103792","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testActiveInactive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/4fc6e07a873fa30375e6d87f62161fefa6a227.src","preCode":"    public void testActiveInactive() {\n\n        createIndex(\"test\", Settings.builder().put(\"index.number_of_shards\", 2).put(\"index.number_of_replicas\", 0).build());\n        IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        IndexService test = indicesService.indexService(resolveIndex(\"test\"));\n\n        MockController controller = new MockController(Settings.builder()\n                                                       .put(\"indices.memory.index_buffer_size\", \"5mb\")\n                                                       .build());\n\n        IndexShard shard0 = test.getShard(0);\n        controller.simulateIndexing(shard0);\n        IndexShard shard1 = test.getShard(1);\n        controller.simulateIndexing(shard1);\n\n        controller.assertBuffer(shard0, 1);\n        controller.assertBuffer(shard1, 1);\n\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard1);\n\n        controller.assertBuffer(shard0, 2);\n        controller.assertBuffer(shard1, 2);\n\n        \r\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 2);\n\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n        controller.assertBuffer(shard1, 4);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n        \r\n        controller.assertBuffer(shard1, 0);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndexingMemoryControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2020-01-10 07:18:23","commitOrder":3,"curCode":"    public void testThrottling() throws Exception {\n\n        MockController controller = new MockController(Settings.builder()\n                                                       .put(\"indices.memory.index_buffer_size\", \"4mb\").build());\n        IndexShard shard0 = newStartedShard();\n        IndexShard shard1 = newStartedShard();\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.assertBuffer(shard0, 3);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n\n        \r\n        controller.assertWriting(shard0, 3);\n        controller.assertWriting(shard1, 0);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 2);\n\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n\n        \r\n        \r\n        controller.assertWriting(shard0, 3);\n        controller.assertWriting(shard1, 4);\n        controller.assertBuffer(shard0, 1);\n        controller.assertBuffer(shard1, 0);\n\n        controller.assertNotThrottled(shard0);\n        controller.assertThrottled(shard1);\n\n        logger.info(\"--> Indexing more data\");\n\n        \r\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n\n        \r\n        controller.assertWriting(shard0, 8);\n        controller.assertWriting(shard1, 4);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 0);\n\n        controller.assertThrottled(shard0);\n        controller.assertThrottled(shard1);\n\n        \r\n        controller.doneWriting(shard0);\n        controller.doneWriting(shard1);\n        controller.forceCheck();\n        controller.assertNotThrottled(shard0);\n        controller.assertNotThrottled(shard1);\n        closeShards(shard0, shard1);\n    }\n","date":"2020-01-10 07:18:23","endLine":341,"groupId":"103792","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testThrottling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/4fc6e07a873fa30375e6d87f62161fefa6a227.src","preCode":"    public void testThrottling() throws Exception {\n        createIndex(\"test\", Settings.builder().put(\"index.number_of_shards\", 3).put(\"index.number_of_replicas\", 0).build());\n        IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        IndexService test = indicesService.indexService(resolveIndex(\"test\"));\n\n        MockController controller = new MockController(Settings.builder()\n                                                       .put(\"indices.memory.index_buffer_size\", \"4mb\").build());\n        IndexShard shard0 = test.getShard(0);\n        IndexShard shard1 = test.getShard(1);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.assertBuffer(shard0, 3);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n\n        \r\n        controller.assertWriting(shard0, 3);\n        controller.assertWriting(shard1, 0);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 2);\n\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard1);\n        controller.simulateIndexing(shard1);\n\n        \r\n        \r\n        controller.assertWriting(shard0, 3);\n        controller.assertWriting(shard1, 4);\n        controller.assertBuffer(shard0, 1);\n        controller.assertBuffer(shard1, 0);\n\n        controller.assertNotThrottled(shard0);\n        controller.assertThrottled(shard1);\n\n        logger.info(\"--> Indexing more data\");\n\n        \r\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n        controller.simulateIndexing(shard0);\n\n        \r\n        controller.assertWriting(shard0, 8);\n        controller.assertWriting(shard1, 4);\n        controller.assertBuffer(shard0, 0);\n        controller.assertBuffer(shard1, 0);\n\n        controller.assertThrottled(shard0);\n        controller.assertThrottled(shard1);\n\n        \r\n        controller.doneWriting(shard0);\n        controller.doneWriting(shard1);\n        controller.forceCheck();\n        controller.assertNotThrottled(shard0);\n        controller.assertNotThrottled(shard1);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndexingMemoryControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"}],"commitId":"0510af87868fd4951449ed224758d4cc184b6680","commitMessage":"@@@Do not force refresh when write indexing buffer (#50769)\n\nToday we periodically check the indexing buffer memory every 5 seconds \nor after we have used 1/30 of the configured memory. If the total used\nmemory is over the threshold.  then we refresh the \"largest\" shards. If \nrefreshing takes longer these intervals (i.e..  5s or 1/30 buffer).  then\nwe continue to enqueue refreshes to these shards. This leads to two\nissues:\n\n- The refresh thread pool can be exhausted and other shards can't refresh\n- Execute too many refreshes for the \"largest\" shards\n\nWith this change.  we only refresh the largest shards if they are not refreshing.\nHere we rely on the periodic check to trigger another refresh if needed. We can\nharden this by making the ongoing refresh triggers the memory check when\nit's completed. I opted out this option in this PR for simplicity.\n\nSee: https://discuss.elastic.co/t/write-queue-continue-to-rise/213652/","date":"2020-01-10 07:18:23","modifiedFileCount":"2","status":"M","submitter":"Nhat Nguyen"}]
