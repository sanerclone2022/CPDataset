[{"authorTime":"2019-11-01 21:23:46","codes":[{"authorDate":"2019-10-14 00:58:05","commitOrder":2,"curCode":"    public void testNotCancelIfPrimaryDoesNotHaveValidRetentionLease() {\n        RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders());\n        testAllocator.addData(node1, Collections.singletonList(newRetentionLease(node3, randomNonNegativeLong())),\n            \"MATCH\", new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.addData(node2, \"NOT_MATCH\", new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.addData(node3, \"NOT_MATCH\", new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.processExistingRecoveries(allocation);\n        assertThat(allocation.routingNodesChanged(), equalTo(false));\n        assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size(), equalTo(0));\n    }\n","date":"2019-10-14 00:58:05","endLine":224,"groupId":"49031","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotCancelIfPrimaryDoesNotHaveValidRetentionLease","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/82/1e721a1ac2712421269e46b6d31bde32460848.src","preCode":"    public void testNotCancelIfPrimaryDoesNotHaveValidRetentionLease() {\n        RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders());\n        testAllocator.addData(node1, Collections.singletonList(newRetentionLease(node3, randomNonNegativeLong())),\n            \"MATCH\", new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.addData(node2, \"NOT_MATCH\", new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.addData(node3, \"NOT_MATCH\", new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.processExistingRecoveries(allocation);\n        assertThat(allocation.routingNodesChanged(), equalTo(false));\n        assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size(), equalTo(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"NB"},{"authorDate":"2019-11-01 21:23:46","commitOrder":2,"curCode":"    public void testDoNotCancelForBrokenNode() {\n        Set<String> failedNodes = new HashSet<>();\n        failedNodes.add(node3.getId());\n        if (randomBoolean()) {\n            failedNodes.add(\"node4\");\n        }\n        UnassignedInfo unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.ALLOCATION_FAILED, null, null,\n            randomIntBetween(failedNodes.size(), 10), System.nanoTime(), System.currentTimeMillis(), false,\n            UnassignedInfo.AllocationStatus.NO_ATTEMPT, failedNodes);\n        RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders(), unassignedInfo);\n        long retainingSeqNoOnPrimary = randomLongBetween(0, Long.MAX_VALUE);\n        List<RetentionLease> retentionLeases = Arrays.asList(\n            newRetentionLease(node1, retainingSeqNoOnPrimary), newRetentionLease(node3, retainingSeqNoOnPrimary));\n        testAllocator\n            .addData(node1, retentionLeases, \"MATCH\", new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION))\n            .addData(node2, randomSyncId(), new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION))\n            .addData(node3, randomSyncId(), new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.processExistingRecoveries(allocation);\n        assertThat(allocation.routingNodesChanged(), equalTo(false));\n        assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED), empty());\n    }\n","date":"2019-11-01 21:23:46","endLine":432,"groupId":"49037","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoNotCancelForBrokenNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/1752a42580b67174a90b92ae7c00518b0cdec2.src","preCode":"    public void testDoNotCancelForBrokenNode() {\n        Set<String> failedNodes = new HashSet<>();\n        failedNodes.add(node3.getId());\n        if (randomBoolean()) {\n            failedNodes.add(\"node4\");\n        }\n        UnassignedInfo unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.ALLOCATION_FAILED, null, null,\n            randomIntBetween(failedNodes.size(), 10), System.nanoTime(), System.currentTimeMillis(), false,\n            UnassignedInfo.AllocationStatus.NO_ATTEMPT, failedNodes);\n        RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders(), unassignedInfo);\n        long retainingSeqNoOnPrimary = randomLongBetween(0, Long.MAX_VALUE);\n        List<RetentionLease> retentionLeases = Arrays.asList(\n            newRetentionLease(node1, retainingSeqNoOnPrimary), newRetentionLease(node3, retainingSeqNoOnPrimary));\n        testAllocator\n            .addData(node1, retentionLeases, \"MATCH\", new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION))\n            .addData(node2, randomSyncId(), new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION))\n            .addData(node3, randomSyncId(), new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.processExistingRecoveries(allocation);\n        assertThat(allocation.routingNodesChanged(), equalTo(false));\n        assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED), empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"B"}],"commitId":"36ee74fa9ec2d1ed0244de1c00d4cddbbdaa2684","commitMessage":"@@@Do not cancel recovery for copy on broken node (#48265)\n\nThis change fixes a poisonous situation where an ongoing recovery was\ncanceled because a better copy was found on a node that the cluster had\npreviously tried allocating the shard to but failed. The solution is to\nkeep track of the set of nodes that an allocation was failed on so that\nwe can avoid canceling the current recovery for a copy on failed nodes.\n\nCloses #47974","date":"2019-11-01 21:23:46","modifiedFileCount":"11","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testNotCancelIfPrimaryDoesNotHaveValidRetentionLease() {\n        RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders());\n        testAllocator.addData(node1, Collections.singletonList(newRetentionLease(node3, randomNonNegativeLong())),\n            \"MATCH\", new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.addData(node2, \"NOT_MATCH\", new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.addData(node3, \"NOT_MATCH\", new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.processExistingRecoveries(allocation);\n        assertThat(allocation.routingNodesChanged(), equalTo(false));\n        assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size(), equalTo(0));\n    }\n","date":"2020-04-01 03:52:01","endLine":241,"groupId":"49031","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotCancelIfPrimaryDoesNotHaveValidRetentionLease","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/af/12d12597dfcf7f7883a47fc12e170a0866c7ac.src","preCode":"    public void testNotCancelIfPrimaryDoesNotHaveValidRetentionLease() {\n        RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders());\n        testAllocator.addData(node1, Collections.singletonList(newRetentionLease(node3, randomNonNegativeLong())),\n            \"MATCH\", new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.addData(node2, \"NOT_MATCH\", new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.addData(node3, \"NOT_MATCH\", new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.processExistingRecoveries(allocation);\n        assertThat(allocation.routingNodesChanged(), equalTo(false));\n        assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size(), equalTo(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testDoNotCancelForBrokenNode() {\n        Set<String> failedNodes = new HashSet<>();\n        failedNodes.add(node3.getId());\n        if (randomBoolean()) {\n            failedNodes.add(\"node4\");\n        }\n        UnassignedInfo unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.ALLOCATION_FAILED, null, null,\n            randomIntBetween(failedNodes.size(), 10), System.nanoTime(), System.currentTimeMillis(), false,\n            UnassignedInfo.AllocationStatus.NO_ATTEMPT, failedNodes);\n        RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders(), unassignedInfo);\n        long retainingSeqNoOnPrimary = randomLongBetween(0, Long.MAX_VALUE);\n        List<RetentionLease> retentionLeases = Arrays.asList(\n            newRetentionLease(node1, retainingSeqNoOnPrimary), newRetentionLease(node3, retainingSeqNoOnPrimary));\n        testAllocator\n            .addData(node1, retentionLeases, \"MATCH\", new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION))\n            .addData(node2, randomSyncId(), new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION))\n            .addData(node3, randomSyncId(), new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.processExistingRecoveries(allocation);\n        assertThat(allocation.routingNodesChanged(), equalTo(false));\n        assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED), empty());\n    }\n","date":"2020-04-01 03:52:01","endLine":435,"groupId":"49037","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoNotCancelForBrokenNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/af/12d12597dfcf7f7883a47fc12e170a0866c7ac.src","preCode":"    public void testDoNotCancelForBrokenNode() {\n        Set<String> failedNodes = new HashSet<>();\n        failedNodes.add(node3.getId());\n        if (randomBoolean()) {\n            failedNodes.add(\"node4\");\n        }\n        UnassignedInfo unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.ALLOCATION_FAILED, null, null,\n            randomIntBetween(failedNodes.size(), 10), System.nanoTime(), System.currentTimeMillis(), false,\n            UnassignedInfo.AllocationStatus.NO_ATTEMPT, failedNodes);\n        RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders(), unassignedInfo);\n        long retainingSeqNoOnPrimary = randomLongBetween(0, Long.MAX_VALUE);\n        List<RetentionLease> retentionLeases = Arrays.asList(\n            newRetentionLease(node1, retainingSeqNoOnPrimary), newRetentionLease(node3, retainingSeqNoOnPrimary));\n        testAllocator\n            .addData(node1, retentionLeases, \"MATCH\", new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION))\n            .addData(node2, randomSyncId(), new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION))\n            .addData(node3, randomSyncId(), new StoreFileMetaData(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.processExistingRecoveries(allocation);\n        assertThat(allocation.routingNodesChanged(), equalTo(false));\n        assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED), empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2021-08-17 05:59:50","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void testNotCancelIfPrimaryDoesNotHaveValidRetentionLease() {\n        RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders());\n        testAllocator.addData(node1, Collections.singletonList(newRetentionLease(node3, randomNonNegativeLong())),\n            \"MATCH\", new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.addData(node2, \"NOT_MATCH\", new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.addData(node3, \"NOT_MATCH\", new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.processExistingRecoveries(allocation);\n        assertThat(allocation.routingNodesChanged(), equalTo(false));\n        assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size(), equalTo(0));\n    }\n","date":"2020-04-01 03:52:01","endLine":241,"groupId":"103760","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotCancelIfPrimaryDoesNotHaveValidRetentionLease","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/af/12d12597dfcf7f7883a47fc12e170a0866c7ac.src","preCode":"    public void testNotCancelIfPrimaryDoesNotHaveValidRetentionLease() {\n        RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders());\n        testAllocator.addData(node1, Collections.singletonList(newRetentionLease(node3, randomNonNegativeLong())),\n            \"MATCH\", new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.addData(node2, \"NOT_MATCH\", new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.addData(node3, \"NOT_MATCH\", new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.processExistingRecoveries(allocation);\n        assertThat(allocation.routingNodesChanged(), equalTo(false));\n        assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size(), equalTo(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"N"},{"authorDate":"2021-08-17 05:59:50","commitOrder":4,"curCode":"    public void testDoNotCancelForBrokenNode() {\n        Set<String> failedNodes = new HashSet<>();\n        failedNodes.add(node3.getId());\n        if (randomBoolean()) {\n            failedNodes.add(\"node4\");\n        }\n        UnassignedInfo unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.ALLOCATION_FAILED, null, null,\n            randomIntBetween(failedNodes.size(), 10), System.nanoTime(), System.currentTimeMillis(), false,\n            UnassignedInfo.AllocationStatus.NO_ATTEMPT, failedNodes, null);\n        RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders(), unassignedInfo);\n        long retainingSeqNoOnPrimary = randomLongBetween(0, Long.MAX_VALUE);\n        List<RetentionLease> retentionLeases = Arrays.asList(\n            newRetentionLease(node1, retainingSeqNoOnPrimary), newRetentionLease(node3, retainingSeqNoOnPrimary));\n        testAllocator\n            .addData(node1, retentionLeases, \"MATCH\", new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION))\n            .addData(node2, randomSyncId(), new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION))\n            .addData(node3, randomSyncId(), new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.processExistingRecoveries(allocation);\n        assertThat(allocation.routingNodesChanged(), equalTo(false));\n        assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED), empty());\n    }\n","date":"2021-08-17 05:59:50","endLine":452,"groupId":"103760","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testDoNotCancelForBrokenNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/369c0c89fd27defab09628654ed46a87647894.src","preCode":"    public void testDoNotCancelForBrokenNode() {\n        Set<String> failedNodes = new HashSet<>();\n        failedNodes.add(node3.getId());\n        if (randomBoolean()) {\n            failedNodes.add(\"node4\");\n        }\n        UnassignedInfo unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.ALLOCATION_FAILED, null, null,\n            randomIntBetween(failedNodes.size(), 10), System.nanoTime(), System.currentTimeMillis(), false,\n            UnassignedInfo.AllocationStatus.NO_ATTEMPT, failedNodes);\n        RoutingAllocation allocation = onePrimaryOnNode1And1ReplicaRecovering(yesAllocationDeciders(), unassignedInfo);\n        long retainingSeqNoOnPrimary = randomLongBetween(0, Long.MAX_VALUE);\n        List<RetentionLease> retentionLeases = Arrays.asList(\n            newRetentionLease(node1, retainingSeqNoOnPrimary), newRetentionLease(node3, retainingSeqNoOnPrimary));\n        testAllocator\n            .addData(node1, retentionLeases, \"MATCH\", new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION))\n            .addData(node2, randomSyncId(), new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION))\n            .addData(node3, randomSyncId(), new StoreFileMetadata(\"file1\", 10, \"MATCH_CHECKSUM\", MIN_SUPPORTED_LUCENE_VERSION));\n        testAllocator.processExistingRecoveries(allocation);\n        assertThat(allocation.routingNodesChanged(), equalTo(false));\n        assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED), empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/gateway/ReplicaShardAllocatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"}],"commitId":"58f66cf04a2fd3afcaa88e879e8dca991fb7a8c1","commitMessage":"@@@Delay shard reassignment from nodes which are known to be restarting (#75606)\n\nThis PR makes the delayed allocation infrastructure aware of registered node shutdowns.  so that reallocation of shards will be further delayed for nodes which are known to be restarting.\n\nTo make this more configurable.  the Node Shutdown APIs now support a `allocation_delay` parameter.  which defaults to 5 minutes. For example:\n```\nPUT /_nodes/USpTGYaBSIKbgSUJR2Z9lg/shutdown\n{\n  \"type\": \"restart\". \n  \"reason\": \"Demonstrating how the node shutdown API works\". \n  \"allocation_delay\": \"20m\"\n}\n```\n\nWill cause reallocation of shards assigned to that node to another node to be delayed by 20 minutes. Note that this delay will only be used if it's *longer* than the index-level allocation delay.  set via `index.unassigned.node_left.delayed_timeout`.\n\nThe `allocation_delay` parameter is only valid for `restart`-type shutdown registrations.  and the request will be rejected if it's used with another shutdown type.","date":"2021-08-17 05:59:50","modifiedFileCount":"26","status":"M","submitter":"Gordon Brown"}]
