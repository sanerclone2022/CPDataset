[{"authorTime":"2019-08-20 22:00:15","codes":[{"authorDate":"2019-08-20 22:00:15","commitOrder":1,"curCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\", null)\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator);\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n        bucketCollector.postCollection();\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2019-08-20 22:00:15","endLine":819,"groupId":"10785","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b8/41fffd0ba36a7bb14f3bff512b91e614481ce9.src","preCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\", null)\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator);\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n        bucketCollector.postCollection();\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":777,"status":"B"},{"authorDate":"2019-08-20 22:00:15","commitOrder":1,"curCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        multiValuesfieldType.setName(\"values\");\n\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        singleValueFieldType.setName(\"value\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\", null)\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\",  ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator, termsAggregator);\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n            bucketCollector.postCollection();\n\n            InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildAggregation(0L);\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2019-08-20 22:00:15","endLine":885,"groupId":"43076","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b8/41fffd0ba36a7bb14f3bff512b91e614481ce9.src","preCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        multiValuesfieldType.setName(\"values\");\n\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        singleValueFieldType.setName(\"value\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\", null)\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\",  ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator, termsAggregator);\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n            bucketCollector.postCollection();\n\n            InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildAggregation(0L);\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":821,"status":"B"}],"commitId":"09d8384578fbb3f90042087dd776f67d623d3647","commitMessage":"@@@Migrate tests from MaxIT to MaxAggregatorTests (#45030)\n\nThis PR migrates tests from MaxIT integration test to MaxAggregatorTests.  as described in #42893","date":"2019-08-20 22:00:15","modifiedFileCount":"2","status":"B","submitter":"Christos Soulios"},{"authorTime":"2020-03-27 03:01:07","codes":[{"authorDate":"2020-03-27 03:01:07","commitOrder":2,"curCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator);\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n        bucketCollector.postCollection();\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2020-03-27 03:01:07","endLine":857,"groupId":"10785","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1e/90a93180b51a4b9dde9465270a95871fa51c0c.src","preCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\", null)\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator);\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n        bucketCollector.postCollection();\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":815,"status":"M"},{"authorDate":"2020-03-27 03:01:07","commitOrder":2,"curCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        multiValuesfieldType.setName(\"values\");\n\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        singleValueFieldType.setName(\"value\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\")\n                .userValueTypeHint(ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator, termsAggregator);\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n            bucketCollector.postCollection();\n\n            InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildAggregation(0L);\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2020-03-27 03:01:07","endLine":924,"groupId":"4175","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1e/90a93180b51a4b9dde9465270a95871fa51c0c.src","preCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        multiValuesfieldType.setName(\"values\");\n\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        singleValueFieldType.setName(\"value\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\", null)\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\",  ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator, termsAggregator);\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n            bucketCollector.postCollection();\n\n            InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildAggregation(0L);\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":859,"status":"M"}],"commitId":"a90c1de8745681356a6516f4f22a8c40f71f6b12","commitMessage":"@@@Add ValuesSource Registry and associated logic (#54281)\n\n* Remove ValuesSourceType argument to ValuesSourceAggregationBuilder (#48638)\n\n* ValuesSourceRegistry Prototype (#48758)\n\n* Remove generics from ValuesSource related classes (#49606)\n\n* fix percentile aggregation tests (#50712)\n\n* Basic thread safety for ValuesSourceRegistry (#50340)\n\n* Remove target value type from ValuesSourceAggregationBuilder (#49943)\n\n* Cleanup default values source type (#50992)\n\n* CoreValuesSourceType no longer implements Writable (#51276)\n\n* Remove genereics & hard coded ValuesSource references from Matrix Stats (#51131)\n\n* Put values source types on fields (#51503)\n\n* Remove VST Any (#51539)\n\n* Rewire terms agg to use new VS registry (#51182)\n\nAlso adds some basic AggTestCases for untested code\npaths (and boilerplate for future tests once the IT are\nconverted over)\n\n* Wire Cardinality aggregation to work with the ValuesSourceRegistry (#51337)\n\n* Wire Percentiles aggregator into new VS framework (#51639)\n\nThis required a bit of a refactor to percentiles itself.  Before. \nthe Builder would switch on the chosen algo to generate an\nalgo-specific factory.  This doesn't work (or at least.  would be\ndifficult) in the new VS framework.\n\nThis refactor consolidates both factories together and introduces\na PercentilesConfig object to act as a standardized way to pass\nalgo-specific parameters through the factory.  This object\nis then used when deciding which kind of aggregator to create\n\nNote: CoreValuesSourceType.HISTOGRAM still lives in core.  and will\nbe moved in a subsequent PR.\n\n* Remove generics and target value type from MultiVSAB (#51647)\n\n* fix checkstyle after merge (#52008)\n\n* Plumb ValuesSourceRegistry through to QuerySearchContext (#51710)\n\n* Convert RareTerms to new VS registry (#52166)\n\n* Wire up Value Count (#52225)\n\n* Wire up Max & Min aggregations (#52219)\n\n* ValuesSource refactoring: Wire up Sum aggregation (#52571)\n\n* ValuesSource refactoring: Wire up SigTerms aggregation (#52590)\n\n* Soft immutability for VSConfig (#52729)\n\n* Unmute testSupportedFieldTypes.  fix Percentiles/Ranks/Terms tests (#52734)\n\nAlso fixes Percentiles which was incorrectly specified to only accept\nnumeric.  but in fact also accepts Boolean and Date (because those are\nnumeric on master - thanks `testSupportedFieldTypes` for catching it!)\n\n* VS refactoring: Wire up stats aggregation (#52891)\n\n* ValuesSource refactoring: Wire up string_stats aggregation (#52875)\n\n* VS refactoring: Wire up median (MAD) aggregation (#52945)\n\n* fix valuesourcetype issue with constant_keyword field (#53041)\n\nthis commit implements `getValuesSourceType` for\nthe ConstantKeyword field type.\n\nmaster was merged into feature/extensible-values-source\nintroducing a new field type that was not implementing\n`getValuesSourceType`.\n\n* ValuesSource refactoring: Wire up Avg aggregation (#52752)\n\n* Wire PercentileRanks aggregator into new VS framework  (#51693)\n\n* Add a VSConfig resolver for aggregations not using the registry (#53038)\n\n* Vs refactor wire up ranges and date ranges (#52918)\n\n* Wire up geo_bounds aggregation to ValuesSourceRegistry (#53034)\n\nThis commit updates the geo_bounds aggregation to depend\non registering itself in the ValuesSourceRegistry\n\nrelates #42949.\n\n* VS refactoring: convert Boxplot to new registry (#53132)\n\n* Wire-up geotile_grid and geohash_grid to ValuesSourceRegistry (#53037)\n\nThis commit updates the geo*_grid aggregations to depend\non registering itself in the ValuesSourceRegistry\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Wire-up geo_centroid agg to ValuesSourceRegistry (#53040)\n\nThis commit updates the geo_centroid aggregation to depend\non registering itself in the ValuesSourceRegistry.\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Fix type tests for Missing aggregation (#53501)\n\n* ValuesSource Refactor: move histo VSType into XPack module (#53298)\n\n- Introduces a new API (`getBareAggregatorRegistrar()`) which allows plugins to register aggregations against existing agg definitions defined in Core.\n- This moves the histogram VSType over to XPack where it belongs. `getHistogramValues()` still remains as a Core concept\n- Moves the histo-specific bits over to xpack (e.g. the actual aggregator logic). This requires extra boilerplate since we need to create a new \"Analytics\" Percentile/Rank aggregators to deal with the histo field. Doubly-so since percentiles/ranks are extra boiler-plate'y... should be much lighter for other aggs\n\n* Wire up DateHistogram to the ValuesSourceRegistry (#53484)\n\n* Vs refactor parser cleanup (#53198)\n\nCo-authored-by: Zachary Tong <polyfractal@elastic.co>\nCo-authored-by: Zachary Tong <zach@elastic.co>\nCo-authored-by: Christos Soulios <1561376+csoulios@users.noreply.github.com>\nCo-authored-by: Tal Levy <JubBoy333@gmail.com>","date":"2020-03-27 03:01:07","modifiedFileCount":"214","status":"M","submitter":"Mark Tozzi"},{"authorTime":"2020-05-09 03:39:49","codes":[{"authorDate":"2020-03-27 03:01:07","commitOrder":3,"curCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator);\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n        bucketCollector.postCollection();\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2020-03-27 03:01:07","endLine":857,"groupId":"10785","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1e/90a93180b51a4b9dde9465270a95871fa51c0c.src","preCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator);\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n        bucketCollector.postCollection();\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":815,"status":"N"},{"authorDate":"2020-05-09 03:39:49","commitOrder":3,"curCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        multiValuesfieldType.setName(\"values\");\n\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        singleValueFieldType.setName(\"value\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\")\n                .userValueTypeHint(ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator, termsAggregator);\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n            bucketCollector.postCollection();\n\n            InternalMax max = (InternalMax) maxAggregator.buildTopLevel();\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildTopLevel();\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildTopLevel();\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2020-05-09 03:39:49","endLine":909,"groupId":"4175","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/3eb54b46b9af73ecc5029d9f8d5b6778b80d78.src","preCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        multiValuesfieldType.setName(\"values\");\n\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        singleValueFieldType.setName(\"value\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\")\n                .userValueTypeHint(ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator, termsAggregator);\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n            bucketCollector.postCollection();\n\n            InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildAggregation(0L);\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":844,"status":"M"}],"commitId":"0d7320499d77e57e16b1789b9d1e91e42f4638c9","commitMessage":"@@@Save memory when numeric terms agg is not top (#55873)\n\nRight now all implementations of the `terms` agg allocate a new\n`Aggregator` per bucket. This uses a bunch of memory. Exactly how much\nisn't clear but each `Aggregator` ends up making its own objects to read\ndoc values which have non-trivial buffers. And it forces all of it\nsub-aggregations to do the same. We allocate a new `Aggregator` per\nbucket for two reasons:\n\n1. We didn't have an appropriate data structure to track the\n   sub-ordinals of each parent bucket.\n2. You can only make a single call to `runDeferredCollections(long...)`\n   per `Aggregator` which was the only way to delay collection of\n   sub-aggregations.\n\nThis change switches the method that builds aggregation results from\nbuilding them one at a time to building all of the results for the\nentire aggregator at the same time.\n\nIt also adds a fairly simplistic data structure to track the sub-ordinals\nfor `long`-keyed buckets.\n\nIt uses both of those to power numeric `terms` aggregations and removes\nthe per-bucket allocation of their `Aggregator`. This fairly\nsubstantially reduces memory consumption of numeric `terms` aggregations\nthat are not the \"top level\".  especially when those aggregations contain\nmany sub-aggregations. It also is a pretty big speed up.  especially when\nthe aggregation is under a non-selective aggregation like\nthe `date_histogram`.\n\nI picked numeric `terms` aggregations because those have the simplest\nimplementation. At least.  I could kind of fit it in my head. And I\nhaven't fully understood the \"bytes\"-based terms aggregations.  but I\nimagine I'll be able to make similar optimizations to them in follow up\nchanges.\n","date":"2020-05-09 03:39:49","modifiedFileCount":"62","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator);\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n        bucketCollector.postCollection();\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2020-06-16 00:47:15","endLine":823,"groupId":"10785","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d4/bc4c4c179e0ebf09e99659dd378006c58e4b4a.src","preCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator);\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n        bucketCollector.postCollection();\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":782,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\")\n                .userValueTypeHint(ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator, termsAggregator);\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n            bucketCollector.postCollection();\n\n            InternalMax max = (InternalMax) maxAggregator.buildTopLevel();\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildTopLevel();\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildTopLevel();\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2020-06-16 00:47:15","endLine":887,"groupId":"4175","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d4/bc4c4c179e0ebf09e99659dd378006c58e4b4a.src","preCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        multiValuesfieldType.setName(\"values\");\n\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        singleValueFieldType.setName(\"value\");\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\")\n                .userValueTypeHint(ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator, termsAggregator);\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n            bucketCollector.postCollection();\n\n            InternalMax max = (InternalMax) maxAggregator.buildTopLevel();\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildTopLevel();\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildTopLevel();\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":825,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-10-29 05:33:27","codes":[{"authorDate":"2020-10-29 05:33:27","commitOrder":5,"curCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator);\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2020-10-29 05:33:27","endLine":819,"groupId":"10785","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/980cbd8bb87b88bf84bda6ed38297654ddb7a4.src","preCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator);\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n        bucketCollector.postCollection();\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":779,"status":"M"},{"authorDate":"2020-10-29 05:33:27","commitOrder":5,"curCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\")\n                .userValueTypeHint(ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator, termsAggregator);\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n\n            InternalMax max = (InternalMax) maxAggregator.buildTopLevel();\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildTopLevel();\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildTopLevel();\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2020-10-29 05:33:27","endLine":882,"groupId":"58177","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/980cbd8bb87b88bf84bda6ed38297654ddb7a4.src","preCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\")\n                .userValueTypeHint(ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator, termsAggregator);\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n            bucketCollector.postCollection();\n\n            InternalMax max = (InternalMax) maxAggregator.buildTopLevel();\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildTopLevel();\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildTopLevel();\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":821,"status":"M"}],"commitId":"3af540b50dd526ee035c20d691d8ec32e8b5068a","commitMessage":"@@@Remove aggregation's postCollect phase (#64016)\n\nAfter #63811 it became clear to me that `postCollect` is kind of\ndangerous and not all that useful. So this removes it.\n\nThe trouble with `postCollect` is that it all happened right after we\nfinished calling `collect` on the `LeafBucketCollectors` but before we\nbuilt the aggregation results. But in #63811 we found out that we can't\ncall `postCollect` on the children of `parent` or `child` aggregators\nuntil we know which *which* aggregation results we're building.\n\nSo this removes `postCollect` and moves all of the things we did at\npost-collect phase into `buildAggregations` or into hooks called in\nthose methods.\n","date":"2020-10-29 05:33:27","modifiedFileCount":"41","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-02-11 08:12:50","codes":[{"authorDate":"2021-02-11 08:12:50","commitOrder":6,"curCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator);\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n        bucketCollector.postCollection();\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2021-02-11 08:12:50","endLine":817,"groupId":"10785","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7e/23012ccc0de86e766f0c2c79f105092df4f214.src","preCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator);\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":776,"status":"M"},{"authorDate":"2021-02-11 08:12:50","commitOrder":6,"curCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\")\n                .userValueTypeHint(ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator, termsAggregator);\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n            bucketCollector.postCollection();\n\n            InternalMax max = (InternalMax) maxAggregator.buildTopLevel();\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildTopLevel();\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildTopLevel();\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2021-02-11 08:12:50","endLine":881,"groupId":"4175","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7e/23012ccc0de86e766f0c2c79f105092df4f214.src","preCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\")\n                .userValueTypeHint(ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator, termsAggregator);\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n\n            InternalMax max = (InternalMax) maxAggregator.buildTopLevel();\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildTopLevel();\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildTopLevel();\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":819,"status":"M"}],"commitId":"0bbc6addd9b5314db9115fa4ac10211e43ba2d66","commitMessage":"@@@Revert \"Remove aggregation's postCollect phase (#68615)\n\nThis partially reverts #64016 and  and adds #67839 and adds\nadditional tests that would have caught issues with the changes\nin #64016. It's mostly Nik's code.  I am just cleaning things up\na bit.\n\nCo-authored-by: Nik Everett <nik9000@gmail.com>\n","date":"2021-02-11 08:12:50","modifiedFileCount":"40","status":"M","submitter":"Igor Motov"},{"authorTime":"2021-03-16 00:41:15","codes":[{"authorDate":"2021-03-16 00:41:15","commitOrder":7,"curCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(true, List.of(maxAggregator, countAggregator));\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n        bucketCollector.postCollection();\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2021-03-16 00:41:15","endLine":817,"groupId":"105454","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5c/c4f2c162381355197a2c460f4e9e8866be8306.src","preCode":"    public void testEarlyTermination() throws Exception {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\") .field(\"values\");\n        ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n            .field(\"values\");\n\n        MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, fieldType);\n        ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, fieldType);\n\n        BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator);\n        bucketCollector.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n        bucketCollector.postCollection();\n\n        InternalMax max = (InternalMax) maxAggregator.buildAggregation(0L);\n        assertNotNull(max);\n        assertEquals(12.0, max.getValue(), 0);\n        assertEquals(\"max\", max.getName());\n\n        InternalValueCount count = (InternalValueCount) countAggregator.buildAggregation(0L);\n        assertNotNull(count);\n        assertEquals(20L, count.getValue());\n        assertEquals(\"count\", count.getName());\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":776,"status":"M"},{"authorDate":"2021-03-16 00:41:15","commitOrder":7,"curCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\")\n                .userValueTypeHint(ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(true, List.of(maxAggregator, countAggregator, termsAggregator));\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n            bucketCollector.postCollection();\n\n            InternalMax max = (InternalMax) maxAggregator.buildTopLevel();\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildTopLevel();\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildTopLevel();\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2021-03-16 00:41:15","endLine":881,"groupId":"105454","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedEarlyTermination","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5c/c4f2c162381355197a2c460f4e9e8866be8306.src","preCode":"    public void testNestedEarlyTermination() throws Exception {\n        MappedFieldType multiValuesfieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n        MappedFieldType singleValueFieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            Document document = new Document();\n            document.add(new NumericDocValuesField(\"value\", i + 1));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n            document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n            indexWriter.addDocument(document);\n        }\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        for (Aggregator.SubAggCollectionMode collectionMode : Aggregator.SubAggCollectionMode.values()) {\n            MaxAggregationBuilder maxAggregationBuilder = new MaxAggregationBuilder(\"max\")\n                .field(\"values\");\n            ValueCountAggregationBuilder countAggregationBuilder = new ValueCountAggregationBuilder(\"count\")\n                .field(\"values\");\n            TermsAggregationBuilder termsAggregationBuilder = new TermsAggregationBuilder(\"terms\")\n                .userValueTypeHint(ValueType.NUMERIC)\n                .field(\"value\").collectMode(collectionMode)\n                .subAggregation(new MaxAggregationBuilder(\"sub_max\").field(\"invalid\"));\n\n            MaxAggregator maxAggregator = createAggregator(maxAggregationBuilder, indexSearcher, multiValuesfieldType);\n            ValueCountAggregator countAggregator = createAggregator(countAggregationBuilder, indexSearcher, multiValuesfieldType);\n            TermsAggregator termsAggregator = createAggregator(termsAggregationBuilder, indexSearcher, singleValueFieldType);\n\n            BucketCollector bucketCollector = MultiBucketCollector.wrap(maxAggregator, countAggregator, termsAggregator);\n            bucketCollector.preCollection();\n            indexSearcher.search(new MatchAllDocsQuery(), bucketCollector);\n            bucketCollector.postCollection();\n\n            InternalMax max = (InternalMax) maxAggregator.buildTopLevel();\n            assertNotNull(max);\n            assertEquals(12.0, max.getValue(), 0);\n            assertEquals(\"max\", max.getName());\n\n            InternalValueCount count = (InternalValueCount) countAggregator.buildTopLevel();\n            assertNotNull(count);\n            assertEquals(20L, count.getValue());\n            assertEquals(\"count\", count.getName());\n\n            Terms terms = (Terms) termsAggregator.buildTopLevel();\n            assertNotNull(terms);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            assertNotNull(buckets);\n            assertEquals(10, buckets.size());\n\n            for (Terms.Bucket b : buckets) {\n                InternalMax subMax = b.getAggregations().get(\"sub_max\");\n                assertEquals(Double.NEGATIVE_INFINITY, subMax.getValue(), 0);\n            }\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":819,"status":"M"}],"commitId":"c4233dfbb7c9b807da6778d1bc18a7318cb7cb3c","commitMessage":"@@@Refactor: Aggs use NOOP leaf collector (#70320)\n\nBefore this commit.  if an aggregator didn't have anything to do in\n`AggregatorBase#getLeafCollector` it was obligated to throw\n`CollectionTerminatedException` if there wasn't a parent aggregator. \notherwise it was obligated to return `LeafBucketCollector.NOOP`. This\nseems like something aggregators shouldn't have to do. So this commit\nchanges `getLeafCollector` so aggregators are obligated to return\n`LeafBucketCollector.NOOP` if they have no work to do. The aggregation\nframework will throw the exception if its appropriate. Otherwise it'll\nuse the `NOOP` collector. If they have work to do the\n`LeafBucketCollector`s that they do return may still throw\n`CollectionTerminatedException` to signal that they are done with the\nleaf.\n\n","date":"2021-03-16 00:41:15","modifiedFileCount":"20","status":"M","submitter":"Nik Everett"}]
