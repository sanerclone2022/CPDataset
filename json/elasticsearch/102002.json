[{"authorTime":"2021-05-12 20:50:26","codes":[{"authorDate":"2021-05-12 20:50:26","commitOrder":1,"curCode":"    public void testDataStreamAliases() {\n        Metadata.Builder mdBuilder = Metadata.builder();\n\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-eu\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\"), is(true));\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-us\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-us\"), is(true));\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-au\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-au\"), is(true));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-au\"), is(false));\n\n        Metadata metadata = mdBuilder.build();\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"), notNullValue());\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(),\n            containsInAnyOrder(\"logs-postgres-eu\", \"logs-postgres-us\", \"logs-postgres-au\"));\n    }\n","date":"2021-05-12 20:50:26","endLine":1249,"groupId":"13459","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDataStreamAliases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/de075aa96829631b9328225a5fb5844191a426.src","preCode":"    public void testDataStreamAliases() {\n        Metadata.Builder mdBuilder = Metadata.builder();\n\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-eu\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\"), is(true));\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-us\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-us\"), is(true));\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-au\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-au\"), is(true));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-au\"), is(false));\n\n        Metadata metadata = mdBuilder.build();\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"), notNullValue());\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(),\n            containsInAnyOrder(\"logs-postgres-eu\", \"logs-postgres-us\", \"logs-postgres-au\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1234,"status":"B"},{"authorDate":"2021-05-12 20:50:26","commitOrder":1,"curCode":"    public void testDataStreamReferToNonExistingDataStream() {\n        Metadata.Builder mdBuilder = Metadata.builder();\n\n        Exception e = expectThrows(IllegalArgumentException.class, () -> mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\"));\n        assertThat(e.getMessage(), equalTo(\"alias [logs-postgres] refers to a non existing data stream [logs-postgres-eu]\"));\n\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-eu\"));\n        mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\");\n        Metadata metadata = mdBuilder.build();\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"), notNullValue());\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(), containsInAnyOrder(\"logs-postgres-eu\"));\n    }\n","date":"2021-05-12 20:50:26","endLine":1262,"groupId":"13460","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDataStreamReferToNonExistingDataStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/de075aa96829631b9328225a5fb5844191a426.src","preCode":"    public void testDataStreamReferToNonExistingDataStream() {\n        Metadata.Builder mdBuilder = Metadata.builder();\n\n        Exception e = expectThrows(IllegalArgumentException.class, () -> mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\"));\n        assertThat(e.getMessage(), equalTo(\"alias [logs-postgres] refers to a non existing data stream [logs-postgres-eu]\"));\n\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-eu\"));\n        mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\");\n        Metadata metadata = mdBuilder.build();\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"), notNullValue());\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(), containsInAnyOrder(\"logs-postgres-eu\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1251,"status":"B"}],"commitId":"4528e780c48ada91fd452b9c51dc1a37772c5f07","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n\n# Conflicts:\n#\tx-pack/plugin/spatial/build.gradle\n#\tx-pack/plugin/spatial/src/main/java/org/elasticsearch/xpack/spatial/SpatialPlugin.java\n","date":"2021-05-12 20:50:26","modifiedFileCount":"564","status":"B","submitter":"iverase"},{"authorTime":"2021-06-02 12:51:49","codes":[{"authorDate":"2021-06-02 12:51:49","commitOrder":2,"curCode":"    public void testDataStreamAliases() {\n        Metadata.Builder mdBuilder = Metadata.builder();\n\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-eu\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\", null), is(true));\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-us\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-us\", null), is(true));\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-au\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-au\", null), is(true));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-au\", null), is(false));\n\n        Metadata metadata = mdBuilder.build();\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"), notNullValue());\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(),\n            containsInAnyOrder(\"logs-postgres-eu\", \"logs-postgres-us\", \"logs-postgres-au\"));\n    }\n","date":"2021-06-02 12:51:49","endLine":1250,"groupId":"13459","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDataStreamAliases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/94/0f8c72e6b91e671fcc05e71d6064fcc3446898.src","preCode":"    public void testDataStreamAliases() {\n        Metadata.Builder mdBuilder = Metadata.builder();\n\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-eu\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\"), is(true));\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-us\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-us\"), is(true));\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-au\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-au\"), is(true));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-au\"), is(false));\n\n        Metadata metadata = mdBuilder.build();\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"), notNullValue());\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(),\n            containsInAnyOrder(\"logs-postgres-eu\", \"logs-postgres-us\", \"logs-postgres-au\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1235,"status":"M"},{"authorDate":"2021-06-02 12:51:49","commitOrder":2,"curCode":"    public void testDataStreamReferToNonExistingDataStream() {\n        Metadata.Builder mdBuilder = Metadata.builder();\n\n        Exception e = expectThrows(IllegalArgumentException.class, () -> mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\", null));\n        assertThat(e.getMessage(), equalTo(\"alias [logs-postgres] refers to a non existing data stream [logs-postgres-eu]\"));\n\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-eu\"));\n        mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\", null);\n        Metadata metadata = mdBuilder.build();\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"), notNullValue());\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(), containsInAnyOrder(\"logs-postgres-eu\"));\n    }\n","date":"2021-06-02 12:51:49","endLine":1263,"groupId":"13460","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDataStreamReferToNonExistingDataStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/94/0f8c72e6b91e671fcc05e71d6064fcc3446898.src","preCode":"    public void testDataStreamReferToNonExistingDataStream() {\n        Metadata.Builder mdBuilder = Metadata.builder();\n\n        Exception e = expectThrows(IllegalArgumentException.class, () -> mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\"));\n        assertThat(e.getMessage(), equalTo(\"alias [logs-postgres] refers to a non existing data stream [logs-postgres-eu]\"));\n\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-eu\"));\n        mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\");\n        Metadata metadata = mdBuilder.build();\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"), notNullValue());\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(), containsInAnyOrder(\"logs-postgres-eu\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1252,"status":"M"}],"commitId":"2afb4ace3e8ebea532bd7493c301eacf4f65c728","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-06-02 12:51:49","modifiedFileCount":"58","status":"M","submitter":"iverase"},{"authorTime":"2021-07-20 17:21:27","codes":[{"authorDate":"2021-07-20 17:21:27","commitOrder":3,"curCode":"    public void testDataStreamAliases() {\n        Metadata.Builder mdBuilder = Metadata.builder();\n\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-eu\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\", null, null), is(true));\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-us\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-us\", null, null), is(true));\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-au\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-au\", null, null), is(true));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-au\", null, null), is(false));\n\n        Metadata metadata = mdBuilder.build();\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"), notNullValue());\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(),\n            containsInAnyOrder(\"logs-postgres-eu\", \"logs-postgres-us\", \"logs-postgres-au\"));\n    }\n","date":"2021-07-20 17:21:27","endLine":1250,"groupId":"102002","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDataStreamAliases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6d/ff09a6a9f7412730862fd7aea208697d6e2d44.src","preCode":"    public void testDataStreamAliases() {\n        Metadata.Builder mdBuilder = Metadata.builder();\n\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-eu\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\", null), is(true));\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-us\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-us\", null), is(true));\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-au\"));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-au\", null), is(true));\n        assertThat(mdBuilder.put(\"logs-postgres\", \"logs-postgres-au\", null), is(false));\n\n        Metadata metadata = mdBuilder.build();\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"), notNullValue());\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(),\n            containsInAnyOrder(\"logs-postgres-eu\", \"logs-postgres-us\", \"logs-postgres-au\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1235,"status":"M"},{"authorDate":"2021-07-20 17:21:27","commitOrder":3,"curCode":"    public void testDataStreamReferToNonExistingDataStream() {\n        Metadata.Builder mdBuilder = Metadata.builder();\n\n        Exception e = expectThrows(IllegalArgumentException.class, () -> mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\", null, null));\n        assertThat(e.getMessage(), equalTo(\"alias [logs-postgres] refers to a non existing data stream [logs-postgres-eu]\"));\n\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-eu\"));\n        mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\", null, null);\n        Metadata metadata = mdBuilder.build();\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"), notNullValue());\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(), containsInAnyOrder(\"logs-postgres-eu\"));\n    }\n","date":"2021-07-20 17:21:27","endLine":1263,"groupId":"102002","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDataStreamReferToNonExistingDataStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6d/ff09a6a9f7412730862fd7aea208697d6e2d44.src","preCode":"    public void testDataStreamReferToNonExistingDataStream() {\n        Metadata.Builder mdBuilder = Metadata.builder();\n\n        Exception e = expectThrows(IllegalArgumentException.class, () -> mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\", null));\n        assertThat(e.getMessage(), equalTo(\"alias [logs-postgres] refers to a non existing data stream [logs-postgres-eu]\"));\n\n        mdBuilder.put(DataStreamTestHelper.randomInstance(\"logs-postgres-eu\"));\n        mdBuilder.put(\"logs-postgres\", \"logs-postgres-eu\", null);\n        Metadata metadata = mdBuilder.build();\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\"), notNullValue());\n        assertThat(metadata.dataStreamAliases().get(\"logs-postgres\").getDataStreams(), containsInAnyOrder(\"logs-postgres-eu\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/MetadataTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1252,"status":"M"}],"commitId":"3dde09a7b4d928460c4f4ec2568db09336917e08","commitMessage":"@@@Add filter support to data stream aliases (#74784)\n\nThis allows specifying a query as filter on data stream alias. \nwhich will then always be applied when searching via this alias.\n\nRelates #66163","date":"2021-07-20 17:21:27","modifiedFileCount":"17","status":"M","submitter":"Martijn van Groningen"}]
