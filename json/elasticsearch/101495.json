[{"authorTime":"2018-11-08 21:13:00","codes":[{"authorDate":"2018-10-27 03:46:21","commitOrder":2,"curCode":"    protected Aggregator doCreateInternal(WithOrdinals valuesSource,\n                                            Aggregator parent,\n                                            boolean collectsFromSingleBucket,\n                                            List<PipelineAggregator> pipelineAggregators,\n                                            Map<String, Object> metaData) throws IOException {\n\n        long maxOrd = valuesSource.globalMaxOrd(context.searcher());\n        if (collectsFromSingleBucket) {\n            return new ParentToChildrenAggregator(name, factories, context, parent, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, context, parent);\n        }\n    }\n","date":"2018-10-27 03:46:21","endLine":82,"groupId":"33859","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doCreateInternal","params":"(WithOrdinalsvaluesSource@Aggregatorparent@booleancollectsFromSingleBucket@List<PipelineAggregator>pipelineAggregators@Map<String@Object>metaData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/466f1020d189a4431a6b5965210a387bbf95dd.src","preCode":"    protected Aggregator doCreateInternal(WithOrdinals valuesSource,\n                                            Aggregator parent,\n                                            boolean collectsFromSingleBucket,\n                                            List<PipelineAggregator> pipelineAggregators,\n                                            Map<String, Object> metaData) throws IOException {\n\n        long maxOrd = valuesSource.globalMaxOrd(context.searcher());\n        if (collectsFromSingleBucket) {\n            return new ParentToChildrenAggregator(name, factories, context, parent, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, context, parent);\n        }\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"NB"},{"authorDate":"2018-11-08 21:13:00","commitOrder":2,"curCode":"    protected Aggregator doCreateInternal(WithOrdinals valuesSource,\n                                          Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metaData) throws IOException {\n\n        long maxOrd = valuesSource.globalMaxOrd(context.searcher());\n        if (collectsFromSingleBucket) {\n            return new ChildrenToParentAggregator(name, factories, context, children, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, context, children);\n        }\n    }\n","date":"2018-11-08 21:13:00","endLine":82,"groupId":"33859","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doCreateInternal","params":"(WithOrdinalsvaluesSource@Aggregatorchildren@booleancollectsFromSingleBucket@List<PipelineAggregator>pipelineAggregators@Map<String@Object>metaData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2a/e3da7c47af3a0c9e5c3ee0b8a082dce1cea7ac.src","preCode":"    protected Aggregator doCreateInternal(WithOrdinals valuesSource,\n                                          Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metaData) throws IOException {\n\n        long maxOrd = valuesSource.globalMaxOrd(context.searcher());\n        if (collectsFromSingleBucket) {\n            return new ChildrenToParentAggregator(name, factories, context, children, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, context, children);\n        }\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"}],"commitId":"d351422215548f518e497f78df32210ae245e260","commitMessage":"@@@Add parent-aggregation to parent-join module (#34210)\n\nAdd `parent` aggregation.  a special single bucket aggregation that joins children documents to their parent.","date":"2018-11-08 21:13:00","modifiedFileCount":"7","status":"M","submitter":"Dominik Stadler"},{"authorTime":"2019-09-11 22:12:34","codes":[{"authorDate":"2019-09-11 22:12:34","commitOrder":3,"curCode":"    protected Aggregator doCreateInternal(WithOrdinals valuesSource,\n                                          SearchContext searchContext, Aggregator parent,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metaData) throws IOException {\n\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, parent);\n        }\n    }\n","date":"2019-09-11 22:12:34","endLine":83,"groupId":"33859","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doCreateInternal","params":"(WithOrdinalsvaluesSource@SearchContextsearchContext@Aggregatorparent@booleancollectsFromSingleBucket@List<PipelineAggregator>pipelineAggregators@Map<String@Object>metaData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/57/a746677f881ddc59c0a19b1c1ab139a5dec774.src","preCode":"    protected Aggregator doCreateInternal(WithOrdinals valuesSource,\n                                            Aggregator parent,\n                                            boolean collectsFromSingleBucket,\n                                            List<PipelineAggregator> pipelineAggregators,\n                                            Map<String, Object> metaData) throws IOException {\n\n        long maxOrd = valuesSource.globalMaxOrd(context.searcher());\n        if (collectsFromSingleBucket) {\n            return new ParentToChildrenAggregator(name, factories, context, parent, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, context, parent);\n        }\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2019-09-11 22:12:34","commitOrder":3,"curCode":"    protected Aggregator doCreateInternal(WithOrdinals valuesSource,\n                                          SearchContext searchContext, Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metaData) throws IOException {\n\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, children);\n        }\n    }\n","date":"2019-09-11 22:12:34","endLine":83,"groupId":"33859","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doCreateInternal","params":"(WithOrdinalsvaluesSource@SearchContextsearchContext@Aggregatorchildren@booleancollectsFromSingleBucket@List<PipelineAggregator>pipelineAggregators@Map<String@Object>metaData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/64d0308cd0915ad7e8acc23ba29289e2992349.src","preCode":"    protected Aggregator doCreateInternal(WithOrdinals valuesSource,\n                                          Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metaData) throws IOException {\n\n        long maxOrd = valuesSource.globalMaxOrd(context.searcher());\n        if (collectsFromSingleBucket) {\n            return new ChildrenToParentAggregator(name, factories, context, children, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, context, children);\n        }\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"5eeb3c5c5e86c50d078250aa42a44e7af017f0bd","commitMessage":"@@@Replace the SearchContext with QueryShardContext when building aggregator factories (#46527)\n\nThis commit replaces the `SearchContext` with the `QueryShardContext` when building aggregator factories. Aggregator factories are part of the `SearchContext` so they shouldn't require a `SearchContext` to create them.\nThe main changes here are the signatures of `AggregationBuilder#build` that now takes a `QueryShardContext` and `AggregatorFactory#createInternal` that passes the `SearchContext` to build the `Aggregator`.\n\nRelates #46523","date":"2019-09-11 22:12:34","modifiedFileCount":"130","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-03-27 03:01:07","codes":[{"authorDate":"2020-03-27 03:01:07","commitOrder":4,"curCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator parent,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metaData) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, parent);\n        }\n    }\n","date":"2020-03-27 03:01:07","endLine":90,"groupId":"33859","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doCreateInternal","params":"(ValuesSourcerawValuesSource@SearchContextsearchContext@Aggregatorparent@booleancollectsFromSingleBucket@List<PipelineAggregator>pipelineAggregators@Map<String@Object>metaData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f0/c18e4eb46e592ae1a09f0ea3e7f98b558d4553.src","preCode":"    protected Aggregator doCreateInternal(WithOrdinals valuesSource,\n                                          SearchContext searchContext, Aggregator parent,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metaData) throws IOException {\n\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, parent);\n        }\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-03-27 03:01:07","commitOrder":4,"curCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metaData) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, children);\n        }\n    }\n","date":"2020-03-27 03:01:07","endLine":90,"groupId":"33859","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doCreateInternal","params":"(ValuesSourcerawValuesSource@SearchContextsearchContext@Aggregatorchildren@booleancollectsFromSingleBucket@List<PipelineAggregator>pipelineAggregators@Map<String@Object>metaData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/a2730f41435aaf10f163dca80fccf9c01f8d13.src","preCode":"    protected Aggregator doCreateInternal(WithOrdinals valuesSource,\n                                          SearchContext searchContext, Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metaData) throws IOException {\n\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, children);\n        }\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"a90c1de8745681356a6516f4f22a8c40f71f6b12","commitMessage":"@@@Add ValuesSource Registry and associated logic (#54281)\n\n* Remove ValuesSourceType argument to ValuesSourceAggregationBuilder (#48638)\n\n* ValuesSourceRegistry Prototype (#48758)\n\n* Remove generics from ValuesSource related classes (#49606)\n\n* fix percentile aggregation tests (#50712)\n\n* Basic thread safety for ValuesSourceRegistry (#50340)\n\n* Remove target value type from ValuesSourceAggregationBuilder (#49943)\n\n* Cleanup default values source type (#50992)\n\n* CoreValuesSourceType no longer implements Writable (#51276)\n\n* Remove genereics & hard coded ValuesSource references from Matrix Stats (#51131)\n\n* Put values source types on fields (#51503)\n\n* Remove VST Any (#51539)\n\n* Rewire terms agg to use new VS registry (#51182)\n\nAlso adds some basic AggTestCases for untested code\npaths (and boilerplate for future tests once the IT are\nconverted over)\n\n* Wire Cardinality aggregation to work with the ValuesSourceRegistry (#51337)\n\n* Wire Percentiles aggregator into new VS framework (#51639)\n\nThis required a bit of a refactor to percentiles itself.  Before. \nthe Builder would switch on the chosen algo to generate an\nalgo-specific factory.  This doesn't work (or at least.  would be\ndifficult) in the new VS framework.\n\nThis refactor consolidates both factories together and introduces\na PercentilesConfig object to act as a standardized way to pass\nalgo-specific parameters through the factory.  This object\nis then used when deciding which kind of aggregator to create\n\nNote: CoreValuesSourceType.HISTOGRAM still lives in core.  and will\nbe moved in a subsequent PR.\n\n* Remove generics and target value type from MultiVSAB (#51647)\n\n* fix checkstyle after merge (#52008)\n\n* Plumb ValuesSourceRegistry through to QuerySearchContext (#51710)\n\n* Convert RareTerms to new VS registry (#52166)\n\n* Wire up Value Count (#52225)\n\n* Wire up Max & Min aggregations (#52219)\n\n* ValuesSource refactoring: Wire up Sum aggregation (#52571)\n\n* ValuesSource refactoring: Wire up SigTerms aggregation (#52590)\n\n* Soft immutability for VSConfig (#52729)\n\n* Unmute testSupportedFieldTypes.  fix Percentiles/Ranks/Terms tests (#52734)\n\nAlso fixes Percentiles which was incorrectly specified to only accept\nnumeric.  but in fact also accepts Boolean and Date (because those are\nnumeric on master - thanks `testSupportedFieldTypes` for catching it!)\n\n* VS refactoring: Wire up stats aggregation (#52891)\n\n* ValuesSource refactoring: Wire up string_stats aggregation (#52875)\n\n* VS refactoring: Wire up median (MAD) aggregation (#52945)\n\n* fix valuesourcetype issue with constant_keyword field (#53041)\n\nthis commit implements `getValuesSourceType` for\nthe ConstantKeyword field type.\n\nmaster was merged into feature/extensible-values-source\nintroducing a new field type that was not implementing\n`getValuesSourceType`.\n\n* ValuesSource refactoring: Wire up Avg aggregation (#52752)\n\n* Wire PercentileRanks aggregator into new VS framework  (#51693)\n\n* Add a VSConfig resolver for aggregations not using the registry (#53038)\n\n* Vs refactor wire up ranges and date ranges (#52918)\n\n* Wire up geo_bounds aggregation to ValuesSourceRegistry (#53034)\n\nThis commit updates the geo_bounds aggregation to depend\non registering itself in the ValuesSourceRegistry\n\nrelates #42949.\n\n* VS refactoring: convert Boxplot to new registry (#53132)\n\n* Wire-up geotile_grid and geohash_grid to ValuesSourceRegistry (#53037)\n\nThis commit updates the geo*_grid aggregations to depend\non registering itself in the ValuesSourceRegistry\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Wire-up geo_centroid agg to ValuesSourceRegistry (#53040)\n\nThis commit updates the geo_centroid aggregation to depend\non registering itself in the ValuesSourceRegistry.\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Fix type tests for Missing aggregation (#53501)\n\n* ValuesSource Refactor: move histo VSType into XPack module (#53298)\n\n- Introduces a new API (`getBareAggregatorRegistrar()`) which allows plugins to register aggregations against existing agg definitions defined in Core.\n- This moves the histogram VSType over to XPack where it belongs. `getHistogramValues()` still remains as a Core concept\n- Moves the histo-specific bits over to xpack (e.g. the actual aggregator logic). This requires extra boilerplate since we need to create a new \"Analytics\" Percentile/Rank aggregators to deal with the histo field. Doubly-so since percentiles/ranks are extra boiler-plate'y... should be much lighter for other aggs\n\n* Wire up DateHistogram to the ValuesSourceRegistry (#53484)\n\n* Vs refactor parser cleanup (#53198)\n\nCo-authored-by: Zachary Tong <polyfractal@elastic.co>\nCo-authored-by: Zachary Tong <zach@elastic.co>\nCo-authored-by: Christos Soulios <1561376+csoulios@users.noreply.github.com>\nCo-authored-by: Tal Levy <JubBoy333@gmail.com>","date":"2020-03-27 03:01:07","modifiedFileCount":"214","status":"M","submitter":"Mark Tozzi"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":5,"curCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator parent,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metadata) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metadata);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, parent);\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":90,"groupId":"33859","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doCreateInternal","params":"(ValuesSourcerawValuesSource@SearchContextsearchContext@Aggregatorparent@booleancollectsFromSingleBucket@List<PipelineAggregator>pipelineAggregators@Map<String@Object>metadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/45/b5c30c6c37051714b4b688114db40c03fc2cc7.src","preCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator parent,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metaData) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, parent);\n        }\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":5,"curCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metadata) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metadata);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, children);\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":90,"groupId":"33859","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doCreateInternal","params":"(ValuesSourcerawValuesSource@SearchContextsearchContext@Aggregatorchildren@booleancollectsFromSingleBucket@List<PipelineAggregator>pipelineAggregators@Map<String@Object>metadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/1c66089fe49800d954f073621c41f346e7f062.src","preCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metaData) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metaData);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, children);\n        }\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-04-08 02:13:39","codes":[{"authorDate":"2020-04-08 02:13:39","commitOrder":6,"curCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator parent,\n                                          boolean collectsFromSingleBucket,\n                                          Map<String, Object> metadata) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n                parentFilter, valuesSource, maxOrd, metadata);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, parent);\n        }\n    }\n","date":"2020-04-08 02:13:39","endLine":86,"groupId":"33859","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doCreateInternal","params":"(ValuesSourcerawValuesSource@SearchContextsearchContext@Aggregatorparent@booleancollectsFromSingleBucket@Map<String@Object>metadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/07/8c1015420bfc0fb2137bc64a49ed4293a671d3.src","preCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator parent,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metadata) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metadata);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, parent);\n        }\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2020-04-08 02:13:39","commitOrder":6,"curCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          Map<String, Object> metadata) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n                parentFilter, valuesSource, maxOrd, metadata);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, children);\n        }\n    }\n","date":"2020-04-08 02:13:39","endLine":87,"groupId":"33859","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doCreateInternal","params":"(ValuesSourcerawValuesSource@SearchContextsearchContext@Aggregatorchildren@booleancollectsFromSingleBucket@Map<String@Object>metadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8d/dc2b1c56bb516037ae3aa3e70cf7154120de39.src","preCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          List<PipelineAggregator> pipelineAggregators,\n                                          Map<String, Object> metadata) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n                parentFilter, valuesSource, maxOrd, pipelineAggregators, metadata);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, children);\n        }\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"b8564b01594ef2511b107e5cc3d8258231d8a5da","commitMessage":"@@@Remove pipline aggs from agg result tree (backport of #54716)\n\nThis removes pipeline aggregators from the aggregation result tree\nexcept for a single field used for backwards compatibility with pre-7.8\nversions of Elasticsearch. That field isn't populated unless we are\nserializing to pre-7.8 Elasticsearch. So.  good news! We no longer build\npipeline aggregators on the data node. Most of the time.\n","date":"2020-04-08 02:13:39","modifiedFileCount":"208","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-06-11 01:27:38","codes":[{"authorDate":"2020-06-11 01:27:38","commitOrder":7,"curCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator parent,\n                                          boolean collectsFromSingleBucket,\n                                          Map<String, Object> metadata) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n            parentFilter, valuesSource, maxOrd, collectsFromSingleBucket, metadata);\n    }\n","date":"2020-06-11 01:27:38","endLine":84,"groupId":"23247","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doCreateInternal","params":"(ValuesSourcerawValuesSource@SearchContextsearchContext@Aggregatorparent@booleancollectsFromSingleBucket@Map<String@Object>metadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f1/3c0d19453d16fc15de266f4c8a6e3e8e4c59e9.src","preCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator parent,\n                                          boolean collectsFromSingleBucket,\n                                          Map<String, Object> metadata) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n                parentFilter, valuesSource, maxOrd, metadata);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, parent);\n        }\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-06-11 01:27:38","commitOrder":7,"curCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          Map<String, Object> metadata) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n            parentFilter, valuesSource, maxOrd, collectsFromSingleBucket, metadata);\n    }\n","date":"2020-06-11 01:27:38","endLine":85,"groupId":"23247","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"doCreateInternal","params":"(ValuesSourcerawValuesSource@SearchContextsearchContext@Aggregatorchildren@booleancollectsFromSingleBucket@Map<String@Object>metadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/a45b457c016f1cfb6659490fd1f671586a8400.src","preCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          Map<String, Object> metadata) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        if (collectsFromSingleBucket) {\n            return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n                parentFilter, valuesSource, maxOrd, metadata);\n        } else {\n            return asMultiBucketAggregator(this, searchContext, children);\n        }\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"3adbe5b106e0d124dce896d9d8b2a63ec4c70a53","commitMessage":"@@@Save memory when parent and child are not on top (#57892)\n\nReworks the `parent` and `child` aggregation are not at the top level\nusing the optimization from #55873. Instead of wrapping all\nnon-top-level `parent` and `child` aggregators we now handle being a\nchild aggregator in the aggregator.  specifically by adding recording\nwhich global ordinals show up in the parent and then checking if they\nmatch the child.\n\n","date":"2020-06-11 01:27:38","modifiedFileCount":"7","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-06-12 04:17:56","codes":[{"authorDate":"2020-06-12 04:17:56","commitOrder":8,"curCode":"    protected Aggregator doCreateInternal(SearchContext searchContext, Aggregator parent,\n                                          boolean collectsFromSingleBucket,\n                                          Map<String, Object> metadata) throws IOException {\n\n        ValuesSource rawValuesSource = config.getValuesSource();\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n            parentFilter, valuesSource, maxOrd, collectsFromSingleBucket, metadata);\n    }\n","date":"2020-06-12 04:17:56","endLine":84,"groupId":"23247","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"doCreateInternal","params":"(SearchContextsearchContext@Aggregatorparent@booleancollectsFromSingleBucket@Map<String@Object>metadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d1/6a8aea46d231a4527fb57660a342f2a4903be2.src","preCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator parent,\n                                          boolean collectsFromSingleBucket,\n                                          Map<String, Object> metadata) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n            parentFilter, valuesSource, maxOrd, collectsFromSingleBucket, metadata);\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-06-12 04:17:56","commitOrder":8,"curCode":"    protected Aggregator doCreateInternal(SearchContext searchContext, Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          Map<String, Object> metadata) throws IOException {\n\n        ValuesSource rawValuesSource = config.getValuesSource();\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n            parentFilter, valuesSource, maxOrd, collectsFromSingleBucket, metadata);\n    }\n","date":"2020-06-12 04:17:56","endLine":85,"groupId":"23247","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"doCreateInternal","params":"(SearchContextsearchContext@Aggregatorchildren@booleancollectsFromSingleBucket@Map<String@Object>metadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/fc2fd009879175c7d062ff6fd22353fbb6b9cd.src","preCode":"    protected Aggregator doCreateInternal(ValuesSource rawValuesSource,\n                                          SearchContext searchContext, Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          Map<String, Object> metadata) throws IOException {\n\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n            parentFilter, valuesSource, maxOrd, collectsFromSingleBucket, metadata);\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"9cbeb8ec91d567648b365ca2745e75722ee0d0ec","commitMessage":"@@@Make ValuesSourceConfig behave like a config object (#57762)\n\n","date":"2020-06-12 04:17:56","modifiedFileCount":"82","status":"M","submitter":"Mark Tozzi"},{"authorTime":"2020-07-10 21:44:56","codes":[{"authorDate":"2020-07-10 21:44:56","commitOrder":9,"curCode":"    protected Aggregator doCreateInternal(SearchContext searchContext, Aggregator parent,\n                                          CardinalityUpperBound cardinality,\n                                          Map<String, Object> metadata) throws IOException {\n\n        ValuesSource rawValuesSource = config.getValuesSource();\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n            parentFilter, valuesSource, maxOrd, cardinality, metadata);\n    }\n","date":"2020-07-10 21:44:56","endLine":85,"groupId":"23247","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"doCreateInternal","params":"(SearchContextsearchContext@Aggregatorparent@CardinalityUpperBoundcardinality@Map<String@Object>metadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/65/378876c3ee854533d217c5187b1db629ea7817.src","preCode":"    protected Aggregator doCreateInternal(SearchContext searchContext, Aggregator parent,\n                                          boolean collectsFromSingleBucket,\n                                          Map<String, Object> metadata) throws IOException {\n\n        ValuesSource rawValuesSource = config.getValuesSource();\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n            parentFilter, valuesSource, maxOrd, collectsFromSingleBucket, metadata);\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-07-10 21:44:56","commitOrder":9,"curCode":"    protected Aggregator doCreateInternal(SearchContext searchContext, Aggregator children,\n                                          CardinalityUpperBound cardinality,\n                                          Map<String, Object> metadata) throws IOException {\n\n        ValuesSource rawValuesSource = config.getValuesSource();\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n            parentFilter, valuesSource, maxOrd, cardinality, metadata);\n    }\n","date":"2020-07-10 21:44:56","endLine":85,"groupId":"23247","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"doCreateInternal","params":"(SearchContextsearchContext@Aggregatorchildren@CardinalityUpperBoundcardinality@Map<String@Object>metadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/50/3d8e6763040d896af2fd80fb205ec219ef55c4.src","preCode":"    protected Aggregator doCreateInternal(SearchContext searchContext, Aggregator children,\n                                          boolean collectsFromSingleBucket,\n                                          Map<String, Object> metadata) throws IOException {\n\n        ValuesSource rawValuesSource = config.getValuesSource();\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n            parentFilter, valuesSource, maxOrd, collectsFromSingleBucket, metadata);\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"366ca378a8644d6654417988820c67f4feb714fe","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-10 21:44:56","modifiedFileCount":"565","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-12-01 02:19:44","codes":[{"authorDate":"2020-12-01 02:19:44","commitOrder":10,"curCode":"    protected Aggregator doCreateInternal(Aggregator parent, CardinalityUpperBound cardinality, Map<String, Object> metadata)\n        throws IOException {\n        ValuesSource rawValuesSource = config.getValuesSource();\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(context.searcher());\n        return new ParentToChildrenAggregator(name, factories, context, parent, childFilter,\n            parentFilter, valuesSource, maxOrd, cardinality, metadata);\n    }\n","date":"2020-12-01 02:19:44","endLine":82,"groupId":"101495","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"doCreateInternal","params":"(Aggregatorparent@CardinalityUpperBoundcardinality@Map<String@Object>metadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/15/0381f450598ceff96b117c80a80c9799c4f56f.src","preCode":"    protected Aggregator doCreateInternal(SearchContext searchContext, Aggregator parent,\n                                          CardinalityUpperBound cardinality,\n                                          Map<String, Object> metadata) throws IOException {\n\n        ValuesSource rawValuesSource = config.getValuesSource();\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        return new ParentToChildrenAggregator(name, factories, searchContext, parent, childFilter,\n            parentFilter, valuesSource, maxOrd, cardinality, metadata);\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-12-01 02:19:44","commitOrder":10,"curCode":"    protected Aggregator doCreateInternal(Aggregator children, CardinalityUpperBound cardinality, Map<String, Object> metadata)\n        throws IOException {\n        ValuesSource rawValuesSource = config.getValuesSource();\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(context.searcher());\n        return new ChildrenToParentAggregator(name, factories, context, children, childFilter,\n            parentFilter, valuesSource, maxOrd, cardinality, metadata);\n    }\n","date":"2020-12-01 02:19:44","endLine":82,"groupId":"101495","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"doCreateInternal","params":"(Aggregatorchildren@CardinalityUpperBoundcardinality@Map<String@Object>metadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/da/7b51e7ba18441eeaeb8c44298b4191e05b7d74.src","preCode":"    protected Aggregator doCreateInternal(SearchContext searchContext, Aggregator children,\n                                          CardinalityUpperBound cardinality,\n                                          Map<String, Object> metadata) throws IOException {\n\n        ValuesSource rawValuesSource = config.getValuesSource();\n        if (rawValuesSource instanceof WithOrdinals == false) {\n            throw new AggregationExecutionException(\"ValuesSource type \" + rawValuesSource.toString() +\n                \"is not supported for aggregation \" + this.name());\n        }\n        WithOrdinals valuesSource = (WithOrdinals) rawValuesSource;\n        long maxOrd = valuesSource.globalMaxOrd(searchContext.searcher());\n        return new ChildrenToParentAggregator(name, factories, searchContext, children, childFilter,\n            parentFilter, valuesSource, maxOrd, cardinality, metadata);\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregatorFactory.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"c2275540808beb6e4499dafcd1e5474f1b4821a0","commitMessage":"@@@Remove SearchContext from constructing aggregations (#64953)\n\nThis replaces the `SearchContext` passed to the ctor of `Aggregation`s\nwith `AggregationContext`. It ends up adding a fairly large number of\nmethods to `AggregationContext` but in exchange it shows a path to\nremoving a few methods from `SearchContext`. That seems nice!\n\nIt also gives us an accurate inventory of \"all of the stuff\" that\naggregations use to build and run.\n","date":"2020-12-01 02:19:44","modifiedFileCount":"193","status":"M","submitter":"Nik Everett"}]
