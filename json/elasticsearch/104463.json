[{"authorTime":"2018-10-24 00:43:46","codes":[{"authorDate":"2018-10-24 00:43:46","commitOrder":2,"curCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument);\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2018-10-24 00:43:46","endLine":242,"groupId":"38799","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/047283ed1bb4ca5add784bb6dfc1cae45b4fb7.src","preCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument);\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"MB"},{"authorDate":"2018-10-24 00:43:46","commitOrder":2,"curCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument);\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","date":"2018-10-24 00:43:46","endLine":503,"groupId":"30812","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorRepeatedInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/047283ed1bb4ca5add784bb6dfc1cae45b4fb7.src","preCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument);\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":466,"status":"MB"}],"commitId":"62ac2fa5ec57a4701323d1c2a0077e2179a7d422","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-10-24 00:43:46","modifiedFileCount":"121","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-09-25 22:03:06","codes":[{"authorDate":"2019-09-25 22:03:06","commitOrder":3,"curCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2019-09-25 22:03:06","endLine":239,"groupId":"38799","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/afb13deaface07d2ede6a1f1419cfd7f79acf5.src","preCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument);\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"},{"authorDate":"2019-09-25 22:03:06","commitOrder":3,"curCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","date":"2019-09-25 22:03:06","endLine":502,"groupId":"30812","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorRepeatedInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/afb13deaface07d2ede6a1f1419cfd7f79acf5.src","preCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument);\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":465,"status":"M"}],"commitId":"2c7fd822930b4ecb651d1903d99798e6f0c504b2","commitMessage":"@@@Allow ingest processors to execute in a non blocking manner. (#46241)\n\nThis PR changes the ingest executing to be non blocking\nby adding an additional method to the Processor interface\nthat accepts a BiConsumer as handler and changing\nIngestService#executeBulkRequest(...) to ingest document\nin a non blocking fashion iff a processor executes\nin a non blocking fashion.\n\nThis is the second PR that merges changes made to server module from\nthe enrich branch (see #32789) into the master branch.\n\nThe plan is to merge changes made to the server module separately from\nthe pr that will merge enrich into master.  so that these changes can\nbe reviewed in isolation.\n\nThis change originates from the enrich branch and was introduced there\nin #43361.","date":"2019-09-25 22:03:06","modifiedFileCount":"20","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2019-11-27 20:45:11","codes":[{"authorDate":"2019-11-27 20:45:11","commitOrder":4,"curCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2019-11-27 20:45:11","endLine":238,"groupId":"38799","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/6d4742b991bf6105bf7a66ab8c005a41ca2a1a.src","preCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"},{"authorDate":"2019-11-27 20:45:11","commitOrder":4,"curCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","date":"2019-11-27 20:45:11","endLine":500,"groupId":"30812","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorRepeatedInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/6d4742b991bf6105bf7a66ab8c005a41ca2a1a.src","preCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"M"}],"commitId":"88aea2107dc0591d3954b4696f473b95e128fcf7","commitMessage":"@@@Add templating support to pipeline processor. (#49030)\n\nThis commit adds templating support to the pipeline processor's `name` option.\n\nCloses #39955","date":"2019-11-27 20:45:11","modifiedFileCount":"6","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2020-01-15 23:17:05","codes":[{"authorDate":"2020-01-15 23:17:05","commitOrder":5,"curCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2020-01-15 23:17:05","endLine":239,"groupId":"38799","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/4613ce2ffd1bb722e28bf2de36ac9e4540eb59.src","preCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"},{"authorDate":"2020-01-15 23:17:05","commitOrder":5,"curCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","date":"2020-01-15 23:17:05","endLine":505,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorRepeatedInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/4613ce2ffd1bb722e28bf2de36ac9e4540eb59.src","preCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":467,"status":"M"}],"commitId":"2b2935fd52368928307ff2e8614e9d4e4b56e027","commitMessage":"@@@Add pipeline name to ingest metadata (#50467)\n\nThis commit adds the name of the current pipeline to ingest metadata.\nThis pipeline name is accessible under the following key: '_ingest.pipeline'.\n\nExample usage in pipeline:\nPUT /_ingest/pipeline/2\n{\n    \"processors\": [\n        {\n            \"set\": {\n                \"field\": \"pipeline_name\". \n                \"value\": \"{{_ingest.pipeline}}\"\n            }\n        }\n    ]\n}\n\nCloses #42106","date":"2020-01-15 23:17:05","modifiedFileCount":"6","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2020-05-13 03:36:16","codes":[{"authorDate":"2020-05-13 03:36:16","commitOrder":6,"curCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2020-05-13 03:36:16","endLine":280,"groupId":"38799","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/ec8a5fcde0062c0dce0c265a0ef597f3532496.src","preCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2020-05-13 03:36:16","commitOrder":6,"curCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","date":"2020-05-13 03:36:16","endLine":546,"groupId":"30812","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorRepeatedInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/ec8a5fcde0062c0dce0c265a0ef597f3532496.src","preCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"M"}],"commitId":"db2c82c5a52b5c5b4dbaebaf9b6c8d41961608fc","commitMessage":"@@@Fix ingest simulate verbose on failure with conditional (#56478)\n\nIf a conditional is added to a processor.  and that processor fails.  and \nthat processor has an on_failure handler.  the full trace of all of the \nexecuted processors may not be displayed in simulate verbose. The \ninformation is correct.  but misses displaying some of the steps used \nto get there.\n\nThis happens because a processor that is conditional processor is a \nwrapper around the real processor and a processor with an on_failure \nhandler is also a wrapper around the processor(s). When decorating for \nsimulation we treat compound processor specially.  but if a compound processor\nis wrapped by a conditional processor that compound processor's processors \ncan be missed for decoration resulting in the missing displayed steps.\n\nThe fix to this is to treat the conditional processor specially and\nexplicitly seperate it from the processor it is wrapping. This requires\nus to keep track of 2 processors a possible conditional processor and\nthe actual processor it may be wrapping.\n\nrelated: #56004","date":"2020-05-13 03:36:16","modifiedFileCount":"3","status":"M","submitter":"Jake Landis"},{"authorTime":"2020-06-16 05:08:29","codes":[{"authorDate":"2020-06-16 05:08:29","commitOrder":7,"curCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2020-06-16 05:08:29","endLine":282,"groupId":"38799","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/e1e6d32559bb0a4ae068f2fc14a817960c2718.src","preCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2020-06-16 05:08:29","commitOrder":7,"curCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","date":"2020-06-16 05:08:29","endLine":550,"groupId":"30812","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorRepeatedInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/e1e6d32559bb0a4ae068f2fc14a817960c2718.src","preCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":512,"status":"M"}],"commitId":"69a6a18d8dc3f95001cfe6f55c1451ac616f7e84","commitMessage":"@@@Add optional description parameter to ingest processors. (#57906)\n\nThis commit adds an optional field.  `description`.  to all ingest processors\nso that users can explain the purpose of the specific processor instance.\n\nCloses #56000.","date":"2020-06-16 05:08:29","modifiedFileCount":"125","status":"M","submitter":"Tal Levy"},{"authorTime":"2020-07-22 18:29:36","codes":[{"authorDate":"2020-07-22 18:29:36","commitOrder":8,"curCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2020-07-22 18:29:36","endLine":291,"groupId":"38799","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/6aa815c916bf345279c803b11cb6c9d62068a5.src","preCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2020-07-22 18:29:36","commitOrder":8,"curCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","date":"2020-07-22 18:29:36","endLine":563,"groupId":"30812","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorRepeatedInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/6aa815c916bf345279c803b11cb6c9d62068a5.src","preCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":524,"status":"M"}],"commitId":"5fcef9a90090b170ef0e963f3e3e56b6fdeaf2d9","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-22 18:29:36","modifiedFileCount":"81","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-08-06 04:58:53","codes":[{"authorDate":"2020-08-06 04:58:53","commitOrder":9,"curCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getType(), actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument, null);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n\n        assertThat(resultList.size(), equalTo(4));\n\n        assertNull(resultList.get(0).getConditionalWithResult());\n        assertThat(resultList.get(0).getType(), equalTo(\"pipeline\"));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(2).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(2).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(2).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(3).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(3).getFailure(), nullValue());\n        assertThat(resultList.get(3).getProcessorTag(), nullValue());\n    }\n","date":"2020-08-06 04:58:53","endLine":301,"groupId":"38799","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2d/5a6f184aa7ac47e10590ac509a41df2ecdc1ff.src","preCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2020-08-06 04:58:53","commitOrder":9,"curCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        \r\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getType(), actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument, null);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(4));\n\n        assertNull(resultList.get(0).getConditionalWithResult());\n        assertThat(resultList.get(0).getType(), equalTo(\"pipeline\"));\n\n        assertThat(resultList.get(1).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        assertNull(resultList.get(2).getConditionalWithResult());\n        assertThat(resultList.get(2).getType(), equalTo(\"pipeline\"));\n\n        assertThat(resultList.get(3).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(3).getFailure(), nullValue());\n        assertThat(resultList.get(3).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(3).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","date":"2020-08-06 04:58:53","endLine":594,"groupId":"38797","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorRepeatedInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2d/5a6f184aa7ac47e10590ac509a41df2ecdc1ff.src","preCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(2));\n\n        assertThat(resultList.get(0).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(0).getFailure(), nullValue());\n        assertThat(resultList.get(0).getProcessorTag(), nullValue());\n\n        assertThat(resultList.get(1).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(0).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":548,"status":"M"}],"commitId":"45402118936d96100445723a849c869627cf1dc2","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-06 04:58:53","modifiedFileCount":"224","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-08-11 21:30:36","codes":[{"authorDate":"2021-08-11 21:30:36","commitOrder":10,"curCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getType(), actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument, null);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n\n        assertThat(resultList.size(), equalTo(4));\n\n        assertNull(resultList.get(0).getConditionalWithResult());\n        assertThat(resultList.get(0).getType(), equalTo(\"pipeline\"));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(2).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(2).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(2).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(3).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(3).getFailure(), nullValue());\n        assertThat(resultList.get(3).getProcessorTag(), nullValue());\n    }\n","date":"2021-08-11 21:30:36","endLine":290,"groupId":"104463","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"testActualPipelineProcessor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/e0928871ec5cd71d90fa61cb3b752e6e3d25bf.src","preCode":"    public void testActualPipelineProcessor() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key2, randomInt()); }),\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key3, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getType(), actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument, null);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(1)).getPipeline(pipelineId);\n\n        assertThat(resultList.size(), equalTo(4));\n\n        assertNull(resultList.get(0).getConditionalWithResult());\n        assertThat(resultList.get(0).getType(), equalTo(\"pipeline\"));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(2).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(2).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(2).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(3).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(3).getFailure(), nullValue());\n        assertThat(resultList.get(3).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2021-08-11 21:30:36","commitOrder":10,"curCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        \r\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getType(), actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument, null);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(4));\n\n        assertNull(resultList.get(0).getConditionalWithResult());\n        assertThat(resultList.get(0).getType(), equalTo(\"pipeline\"));\n\n        assertThat(resultList.get(1).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        assertNull(resultList.get(2).getConditionalWithResult());\n        assertThat(resultList.get(2).getType(), equalTo(\"pipeline\"));\n\n        assertThat(resultList.get(3).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(3).getFailure(), nullValue());\n        assertThat(resultList.get(3).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(3).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","date":"2021-08-11 21:30:36","endLine":620,"groupId":"104463","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"testActualPipelineProcessorRepeatedInvocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/e0928871ec5cd71d90fa61cb3b752e6e3d25bf.src","preCode":"    public void testActualPipelineProcessorRepeatedInvocation() throws Exception {\n        String pipelineId = \"pipeline1\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig = new HashMap<>();\n        pipelineConfig.put(\"name\", pipelineId);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig);\n        Pipeline pipeline = new Pipeline(\n            pipelineId, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key1, randomInt()); }))\n        );\n        when(ingestService.getPipeline(pipelineId)).thenReturn(pipeline);\n\n        \r\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor, pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getType(), actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument, null);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId);\n\n        verify(ingestService,  Mockito.atLeast(2)).getPipeline(pipelineId);\n        assertThat(resultList.size(), equalTo(4));\n\n        assertNull(resultList.get(0).getConditionalWithResult());\n        assertThat(resultList.get(0).getType(), equalTo(\"pipeline\"));\n\n        assertThat(resultList.get(1).getIngestDocument(), not(equalTo(expectedResult.getIngestDocument())));\n        assertThat(resultList.get(1).getFailure(), nullValue());\n        assertThat(resultList.get(1).getProcessorTag(), nullValue());\n\n        assertNull(resultList.get(2).getConditionalWithResult());\n        assertThat(resultList.get(2).getType(), equalTo(\"pipeline\"));\n\n        assertThat(resultList.get(3).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(3).getFailure(), nullValue());\n        assertThat(resultList.get(3).getProcessorTag(), nullValue());\n\n        \r\n        assertNotEquals(resultList.get(1).getIngestDocument().getSourceAndMetadata().get(key1),\n            resultList.get(3).getIngestDocument().getSourceAndMetadata().get(key1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"M"}],"commitId":"498684a696fb2d81689a9c5e51fbc3c370e234f6","commitMessage":"@@@Add support for _meta field to ingest pipelines (#75905)\n\nWe are adding a _meta field to many of our REST APIs so that users can attach whatever metadata they\nwant. The data in this field will not be used by Elasticsearch. This commit add the _meta field to ingest\npipelines.","date":"2021-08-11 21:30:36","modifiedFileCount":"13","status":"M","submitter":"Keith Massey"}]
