[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static RepositoriesMetaData fromXContent(XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        List<RepositoryMetaData> repository = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String name = parser.currentName();\n                if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], expected object\", name);\n                }\n                String type = null;\n                Settings settings = Settings.EMPTY;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        String currentFieldName = parser.currentName();\n                        if (\"type\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            type = parser.text();\n                        } else if (\"settings\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], incompatible params\", name);\n                            }\n                            settings = Settings.fromXContent(parser);\n                        } else {\n                            throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown field [{}]\", name, currentFieldName);\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse repository [{}]\", name);\n                    }\n                }\n                if (type == null) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], missing repository type\", name);\n                }\n                repository.add(new RepositoryMetaData(name, type, settings));\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse repositories\");\n            }\n        }\n        return new RepositoriesMetaData(repository.toArray(new RepositoryMetaData[repository.size()]));\n    }\n","date":"2018-04-26 03:22:53","endLine":168,"groupId":"2029","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/a2d83fa8d470b0dbccc92a3f3993bf0c1dec0a.src","preCode":"    public static RepositoriesMetaData fromXContent(XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        List<RepositoryMetaData> repository = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String name = parser.currentName();\n                if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], expected object\", name);\n                }\n                String type = null;\n                Settings settings = Settings.EMPTY;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        String currentFieldName = parser.currentName();\n                        if (\"type\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            type = parser.text();\n                        } else if (\"settings\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], incompatible params\", name);\n                            }\n                            settings = Settings.fromXContent(parser);\n                        } else {\n                            throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown field [{}]\", name, currentFieldName);\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse repository [{}]\", name);\n                    }\n                }\n                if (type == null) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], missing repository type\", name);\n                }\n                repository.add(new RepositoryMetaData(name, type, settings));\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse repositories\");\n            }\n        }\n        return new RepositoriesMetaData(repository.toArray(new RepositoryMetaData[repository.size()]));\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/RepositoriesMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static <T extends MetaData.Custom> T fromXContent(Function<String, MetaData.Custom> supplier, XContentParser parser)\n        throws IOException {\n        XContentParser.Token token;\n        String data = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String currentFieldName = parser.currentName();\n                if (\"data\".equals(currentFieldName)) {\n                    if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                        throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, invalid data type\");\n                    }\n                    data = parser.text();\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, unknown field [{}]\", currentFieldName);\n                }\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse snapshottable metadata\");\n            }\n        }\n        if (data == null) {\n            throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, data not found\");\n        }\n        return (T) supplier.apply(data);\n    }\n","date":"2018-04-26 03:22:53","endLine":103,"groupId":"30953","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fromXContent","params":"(Function<String@MetaData.Custom>supplier@XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fb/709a7fd06d91302102bc65fc9f5033d1e2811c.src","preCode":"    public static <T extends MetaData.Custom> T fromXContent(Function<String, MetaData.Custom> supplier, XContentParser parser)\n        throws IOException {\n        XContentParser.Token token;\n        String data = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String currentFieldName = parser.currentName();\n                if (\"data\".equals(currentFieldName)) {\n                    if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                        throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, invalid data type\");\n                    }\n                    data = parser.text();\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, unknown field [{}]\", currentFieldName);\n                }\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse snapshottable metadata\");\n            }\n        }\n        if (data == null) {\n            throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, data not found\");\n        }\n        return (T) supplier.apply(data);\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/TestCustomMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-05-02 16:01:08","commitOrder":2,"curCode":"    public static RepositoriesMetaData fromXContent(XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        List<RepositoryMetaData> repository = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String name = parser.currentName();\n                if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], expected object\", name);\n                }\n                String type = null;\n                Settings settings = Settings.EMPTY;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        String currentFieldName = parser.currentName();\n                        if (\"type\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            type = parser.text();\n                        } else if (\"settings\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], incompatible params\", name);\n                            }\n                            settings = Settings.fromXContent(parser);\n                        } else {\n                            throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown field [{}]\", name, currentFieldName);\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse repository [{}]\", name);\n                    }\n                }\n                if (type == null) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], missing repository type\", name);\n                }\n                repository.add(new RepositoryMetaData(name, type, settings));\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse repositories\");\n            }\n        }\n        return new RepositoriesMetaData(repository);\n    }\n","date":"2018-05-02 16:01:08","endLine":168,"groupId":"2029","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7a/0b92858966f0cd58e7c33aceb3b97b93b7f9ac.src","preCode":"    public static RepositoriesMetaData fromXContent(XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        List<RepositoryMetaData> repository = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String name = parser.currentName();\n                if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], expected object\", name);\n                }\n                String type = null;\n                Settings settings = Settings.EMPTY;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        String currentFieldName = parser.currentName();\n                        if (\"type\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            type = parser.text();\n                        } else if (\"settings\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], incompatible params\", name);\n                            }\n                            settings = Settings.fromXContent(parser);\n                        } else {\n                            throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown field [{}]\", name, currentFieldName);\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse repository [{}]\", name);\n                    }\n                }\n                if (type == null) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], missing repository type\", name);\n                }\n                repository.add(new RepositoryMetaData(name, type, settings));\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse repositories\");\n            }\n        }\n        return new RepositoriesMetaData(repository.toArray(new RepositoryMetaData[repository.size()]));\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/RepositoriesMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public static <T extends MetaData.Custom> T fromXContent(Function<String, MetaData.Custom> supplier, XContentParser parser)\n        throws IOException {\n        XContentParser.Token token;\n        String data = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String currentFieldName = parser.currentName();\n                if (\"data\".equals(currentFieldName)) {\n                    if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                        throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, invalid data type\");\n                    }\n                    data = parser.text();\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, unknown field [{}]\", currentFieldName);\n                }\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse snapshottable metadata\");\n            }\n        }\n        if (data == null) {\n            throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, data not found\");\n        }\n        return (T) supplier.apply(data);\n    }\n","date":"2018-04-26 03:22:53","endLine":103,"groupId":"30953","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fromXContent","params":"(Function<String@MetaData.Custom>supplier@XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fb/709a7fd06d91302102bc65fc9f5033d1e2811c.src","preCode":"    public static <T extends MetaData.Custom> T fromXContent(Function<String, MetaData.Custom> supplier, XContentParser parser)\n        throws IOException {\n        XContentParser.Token token;\n        String data = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String currentFieldName = parser.currentName();\n                if (\"data\".equals(currentFieldName)) {\n                    if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                        throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, invalid data type\");\n                    }\n                    data = parser.text();\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, unknown field [{}]\", currentFieldName);\n                }\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse snapshottable metadata\");\n            }\n        }\n        if (data == null) {\n            throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, data not found\");\n        }\n        return (T) supplier.apply(data);\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/TestCustomMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"4ad44a76b0c41bc07b661320fd2eee2761028ce1","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-02 16:01:08","modifiedFileCount":"44","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2019-12-04 20:01:06","commitOrder":3,"curCode":"    public static RepositoriesMetaData fromXContent(XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        List<RepositoryMetaData> repository = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String name = parser.currentName();\n                if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], expected object\", name);\n                }\n                String type = null;\n                Settings settings = Settings.EMPTY;\n                long generation = RepositoryData.UNKNOWN_REPO_GEN;\n                long pendingGeneration = RepositoryData.EMPTY_REPO_GEN;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        String currentFieldName = parser.currentName();\n                        if (\"type\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            type = parser.text();\n                        } else if (\"settings\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], incompatible params\", name);\n                            }\n                            settings = Settings.fromXContent(parser);\n                        } else if (\"generation\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_NUMBER) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            generation = parser.longValue();\n                        } else if (\"pending_generation\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_NUMBER) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            pendingGeneration = parser.longValue();\n                        } else {\n                            throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown field [{}]\",\n                                name, currentFieldName);\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse repository [{}]\", name);\n                    }\n                }\n                if (type == null) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], missing repository type\", name);\n                }\n                repository.add(new RepositoryMetaData(name, type, settings, generation, pendingGeneration));\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse repositories\");\n            }\n        }\n        return new RepositoriesMetaData(repository);\n    }\n","date":"2019-12-04 20:01:06","endLine":242,"groupId":"2029","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/8850a9b47ce4dc9955dc340b4f06f925e7ef2e.src","preCode":"    public static RepositoriesMetaData fromXContent(XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        List<RepositoryMetaData> repository = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String name = parser.currentName();\n                if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], expected object\", name);\n                }\n                String type = null;\n                Settings settings = Settings.EMPTY;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        String currentFieldName = parser.currentName();\n                        if (\"type\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            type = parser.text();\n                        } else if (\"settings\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], incompatible params\", name);\n                            }\n                            settings = Settings.fromXContent(parser);\n                        } else {\n                            throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown field [{}]\",\n                                name, currentFieldName);\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse repository [{}]\", name);\n                    }\n                }\n                if (type == null) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], missing repository type\", name);\n                }\n                repository.add(new RepositoryMetaData(name, type, settings));\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse repositories\");\n            }\n        }\n        return new RepositoriesMetaData(repository);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/RepositoriesMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"    public static <T extends MetaData.Custom> T fromXContent(Function<String, MetaData.Custom> supplier, XContentParser parser)\n        throws IOException {\n        XContentParser.Token token;\n        String data = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String currentFieldName = parser.currentName();\n                if (\"data\".equals(currentFieldName)) {\n                    if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                        throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, invalid data type\");\n                    }\n                    data = parser.text();\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, unknown field [{}]\", currentFieldName);\n                }\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse snapshottable metadata\");\n            }\n        }\n        if (data == null) {\n            throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, data not found\");\n        }\n        return (T) supplier.apply(data);\n    }\n","date":"2018-04-26 03:22:53","endLine":103,"groupId":"30953","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fromXContent","params":"(Function<String@MetaData.Custom>supplier@XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fb/709a7fd06d91302102bc65fc9f5033d1e2811c.src","preCode":"    public static <T extends MetaData.Custom> T fromXContent(Function<String, MetaData.Custom> supplier, XContentParser parser)\n        throws IOException {\n        XContentParser.Token token;\n        String data = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String currentFieldName = parser.currentName();\n                if (\"data\".equals(currentFieldName)) {\n                    if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                        throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, invalid data type\");\n                    }\n                    data = parser.text();\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, unknown field [{}]\", currentFieldName);\n                }\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse snapshottable metadata\");\n            }\n        }\n        if (data == null) {\n            throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, data not found\");\n        }\n        return (T) supplier.apply(data);\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/TestCustomMetaData.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"b34daeb64b7efd601993a7e46eea08834596a43f","commitMessage":"@@@Use Cluster State to Track Repository Generation (#49729)\n\nStep on the road to #49060. \n\nThis commit adds the logic to keep track of a repository's generation\nacross repository operations. See changes to package level Javadoc for the concrete changes in the distributed state machine.\n\nIt updates the write side of new repository generations to be fully consistent via the cluster state. With this change.  no `index-N` will be overwritten for the same repository ever. So eventual consistency issues around conflicting updates to the same `index-N` are not a possibility any longer. \n\nWith this change the read side will still use listing of repository contents instead of relying solely on the cluster state contents.\nThe logic for that will be introduced in #49060. This retains the ability to externally delete the contents of a repository and continue using it afterwards for the time being. In #49060 the use of listing to determine the repository generation will be removed in all cases (except for full-cluster restart) as the last step in this effort.","date":"2019-12-04 20:01:06","modifiedFileCount":"18","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public static RepositoriesMetadata fromXContent(XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        List<RepositoryMetadata> repository = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String name = parser.currentName();\n                if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], expected object\", name);\n                }\n                String type = null;\n                Settings settings = Settings.EMPTY;\n                long generation = RepositoryData.UNKNOWN_REPO_GEN;\n                long pendingGeneration = RepositoryData.EMPTY_REPO_GEN;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        String currentFieldName = parser.currentName();\n                        if (\"type\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            type = parser.text();\n                        } else if (\"settings\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], incompatible params\", name);\n                            }\n                            settings = Settings.fromXContent(parser);\n                        } else if (\"generation\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_NUMBER) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            generation = parser.longValue();\n                        } else if (\"pending_generation\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_NUMBER) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            pendingGeneration = parser.longValue();\n                        } else {\n                            throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown field [{}]\",\n                                name, currentFieldName);\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse repository [{}]\", name);\n                    }\n                }\n                if (type == null) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], missing repository type\", name);\n                }\n                repository.add(new RepositoryMetadata(name, type, settings, generation, pendingGeneration));\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse repositories\");\n            }\n        }\n        return new RepositoriesMetadata(repository);\n    }\n","date":"2020-04-01 03:52:01","endLine":242,"groupId":"2029","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e8/a55b0759359a8ff246a2266268f113b38e45ae.src","preCode":"    public static RepositoriesMetaData fromXContent(XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        List<RepositoryMetaData> repository = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String name = parser.currentName();\n                if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], expected object\", name);\n                }\n                String type = null;\n                Settings settings = Settings.EMPTY;\n                long generation = RepositoryData.UNKNOWN_REPO_GEN;\n                long pendingGeneration = RepositoryData.EMPTY_REPO_GEN;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        String currentFieldName = parser.currentName();\n                        if (\"type\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            type = parser.text();\n                        } else if (\"settings\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], incompatible params\", name);\n                            }\n                            settings = Settings.fromXContent(parser);\n                        } else if (\"generation\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_NUMBER) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            generation = parser.longValue();\n                        } else if (\"pending_generation\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_NUMBER) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            pendingGeneration = parser.longValue();\n                        } else {\n                            throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown field [{}]\",\n                                name, currentFieldName);\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse repository [{}]\", name);\n                    }\n                }\n                if (type == null) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], missing repository type\", name);\n                }\n                repository.add(new RepositoryMetaData(name, type, settings, generation, pendingGeneration));\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse repositories\");\n            }\n        }\n        return new RepositoriesMetaData(repository);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/RepositoriesMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public static <T extends Metadata.Custom> T fromXContent(Function<String, Metadata.Custom> supplier, XContentParser parser)\n        throws IOException {\n        XContentParser.Token token;\n        String data = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String currentFieldName = parser.currentName();\n                if (\"data\".equals(currentFieldName)) {\n                    if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                        throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, invalid data type\");\n                    }\n                    data = parser.text();\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, unknown field [{}]\", currentFieldName);\n                }\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse snapshottable metadata\");\n            }\n        }\n        if (data == null) {\n            throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, data not found\");\n        }\n        return (T) supplier.apply(data);\n    }\n","date":"2020-04-01 03:52:01","endLine":99,"groupId":"30953","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"fromXContent","params":"(Function<String@Metadata.Custom>supplier@XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/7e3f5e3ad7548fc086bec68450e110a62da7b7.src","preCode":"    public static <T extends MetaData.Custom> T fromXContent(Function<String, MetaData.Custom> supplier, XContentParser parser)\n        throws IOException {\n        XContentParser.Token token;\n        String data = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String currentFieldName = parser.currentName();\n                if (\"data\".equals(currentFieldName)) {\n                    if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                        throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, invalid data type\");\n                    }\n                    data = parser.text();\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, unknown field [{}]\", currentFieldName);\n                }\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse snapshottable metadata\");\n            }\n        }\n        if (data == null) {\n            throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, data not found\");\n        }\n        return (T) supplier.apply(data);\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/TestCustomMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2021-01-25 20:17:52","commitOrder":5,"curCode":"    public static RepositoriesMetadata fromXContent(XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        List<RepositoryMetadata> repository = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String name = parser.currentName();\n                if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], expected object\", name);\n                }\n                String uuid = RepositoryData.MISSING_UUID;\n                String type = null;\n                Settings settings = Settings.EMPTY;\n                long generation = RepositoryData.UNKNOWN_REPO_GEN;\n                long pendingGeneration = RepositoryData.EMPTY_REPO_GEN;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        String currentFieldName = parser.currentName();\n                        if (\"uuid\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], uuid not a string\", name);\n                            }\n                            uuid = parser.text();\n                        } else if (\"type\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            type = parser.text();\n                        } else if (\"settings\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], incompatible params\", name);\n                            }\n                            settings = Settings.fromXContent(parser);\n                        } else if (\"generation\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_NUMBER) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            generation = parser.longValue();\n                        } else if (\"pending_generation\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_NUMBER) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            pendingGeneration = parser.longValue();\n                        } else {\n                            throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown field [{}]\",\n                                name, currentFieldName);\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse repository [{}]\", name);\n                    }\n                }\n                if (type == null) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], missing repository type\", name);\n                }\n                repository.add(new RepositoryMetadata(name, uuid, type, settings, generation, pendingGeneration));\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse repositories\");\n            }\n        }\n        return new RepositoriesMetadata(repository);\n    }\n","date":"2021-01-25 20:17:52","endLine":259,"groupId":"107589","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/4dc87e917478a164f38ea63b8fc517369daea1.src","preCode":"    public static RepositoriesMetadata fromXContent(XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        List<RepositoryMetadata> repository = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String name = parser.currentName();\n                if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], expected object\", name);\n                }\n                String type = null;\n                Settings settings = Settings.EMPTY;\n                long generation = RepositoryData.UNKNOWN_REPO_GEN;\n                long pendingGeneration = RepositoryData.EMPTY_REPO_GEN;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        String currentFieldName = parser.currentName();\n                        if (\"type\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            type = parser.text();\n                        } else if (\"settings\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.START_OBJECT) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], incompatible params\", name);\n                            }\n                            settings = Settings.fromXContent(parser);\n                        } else if (\"generation\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_NUMBER) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            generation = parser.longValue();\n                        } else if (\"pending_generation\".equals(currentFieldName)) {\n                            if (parser.nextToken() != XContentParser.Token.VALUE_NUMBER) {\n                                throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown type\", name);\n                            }\n                            pendingGeneration = parser.longValue();\n                        } else {\n                            throw new ElasticsearchParseException(\"failed to parse repository [{}], unknown field [{}]\",\n                                name, currentFieldName);\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse repository [{}]\", name);\n                    }\n                }\n                if (type == null) {\n                    throw new ElasticsearchParseException(\"failed to parse repository [{}], missing repository type\", name);\n                }\n                repository.add(new RepositoryMetadata(name, type, settings, generation, pendingGeneration));\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse repositories\");\n            }\n        }\n        return new RepositoriesMetadata(repository);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/metadata/RepositoriesMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":5,"curCode":"    public static <T extends Metadata.Custom> T fromXContent(Function<String, Metadata.Custom> supplier, XContentParser parser)\n        throws IOException {\n        XContentParser.Token token;\n        String data = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String currentFieldName = parser.currentName();\n                if (\"data\".equals(currentFieldName)) {\n                    if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                        throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, invalid data type\");\n                    }\n                    data = parser.text();\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, unknown field [{}]\", currentFieldName);\n                }\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse snapshottable metadata\");\n            }\n        }\n        if (data == null) {\n            throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, data not found\");\n        }\n        return (T) supplier.apply(data);\n    }\n","date":"2020-04-01 03:52:01","endLine":99,"groupId":"107589","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"fromXContent","params":"(Function<String@Metadata.Custom>supplier@XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/7e3f5e3ad7548fc086bec68450e110a62da7b7.src","preCode":"    public static <T extends Metadata.Custom> T fromXContent(Function<String, Metadata.Custom> supplier, XContentParser parser)\n        throws IOException {\n        XContentParser.Token token;\n        String data = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                String currentFieldName = parser.currentName();\n                if (\"data\".equals(currentFieldName)) {\n                    if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {\n                        throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, invalid data type\");\n                    }\n                    data = parser.text();\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, unknown field [{}]\", currentFieldName);\n                }\n            } else {\n                throw new ElasticsearchParseException(\"failed to parse snapshottable metadata\");\n            }\n        }\n        if (data == null) {\n            throw new ElasticsearchParseException(\"failed to parse snapshottable metadata, data not found\");\n        }\n        return (T) supplier.apply(data);\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/TestCustomMetadata.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"}],"commitId":"e5a15d4fcb2a4eff0ecfa54168e992217ab5d409","commitMessage":"@@@Introduce repository UUIDs (#67829)\n\nToday a snapshot repository does not have a well-defined identity. It\ncan be reregistered with a different cluster under a different name.  and\ncan even be registered with multiple clusters in readonly mode.\n\nThis presents problems for cases where we need to refer to a specific\nsnapshot in a globally-unique fashion. Today we rely on the repository\nbeing registered under the same name on every cluster.  but this is not a\nsafe assumption.\n\nThis commit adds a UUID that can be used to uniquely identify a\nrepository. The UUID is stored in the top-level index blob.  represented\nby `RepositoryData`.  and is also usually copied into the\n`RepositoryMetadata` that represents the repository in the cluster\nstate. The repository UUID is exposed in the get-repositories API; other\nmore meaningful consumers will be added in due course.","date":"2021-01-25 20:17:52","modifiedFileCount":"20","status":"M","submitter":"David Turner"}]
