[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testNgram() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"USA Hero\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        WordScorer wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d, new BytesRef(\" \"), 0.5f);\n\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker();\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.95, 5);\n        Result result = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1, ir, \"body\", wordScorer, 1, 2);\n        Correction[] corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ace\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american <em>ace</em>\"));\n        assertThat(result.cutoffScore, greaterThan(0d));\n\n        result = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1, ir, \"body\", wordScorer, 0, 1);\n        corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(result.cutoffScore, equalTo(Double.MIN_VALUE));\n\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d, new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 4, ir, \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the <em>god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor the <em>god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn</em> the <em>god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the got jewel\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n\n        \r\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d, new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor teh Got-Jewel\"), generator, 4f, 4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xor teh god jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr the god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor <em>the god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn the god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor teh <em>god</em> jewel\"));\n\n        \r\n\n        Analyzer analyzer = new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                TokenFilter filter = new LowerCaseFilter(t);\n                try {\n                    SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer());\n                    parser.parse(new StringReader(\"usa => usa, america, american\"));\n                    filter = new SynonymFilter(filter, parser.build(), true);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                return new TokenStreamComponents(t, filter);\n            }\n        };\n\n        spellchecker.setAccuracy(0.0f);\n        spellchecker.setMinPrefix(1);\n        spellchecker.setMinQueryLength(1);\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d, new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captian usa\"), generator, 2, 4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85, 10, null, analyzer, MultiFields.getTerms(ir, \"body\"));\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captian usw\"), generator, 2, 4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        \r\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85, 10, null, analyzer, MultiFields.getTerms(ir, \"body\"));\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captain usw\"), generator, 2, 4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"captain <em>america</em>\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":205,"groupId":"56419","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNgram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/40/b2b023334cabe8b9b0411f4260e5ef4050de9e.src","preCode":"    public void testNgram() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"USA Hero\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        WordScorer wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d, new BytesRef(\" \"), 0.5f);\n\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker();\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.95, 5);\n        Result result = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1, ir, \"body\", wordScorer, 1, 2);\n        Correction[] corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ace\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american <em>ace</em>\"));\n        assertThat(result.cutoffScore, greaterThan(0d));\n\n        result = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1, ir, \"body\", wordScorer, 0, 1);\n        corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(result.cutoffScore, equalTo(Double.MIN_VALUE));\n\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d, new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 4, ir, \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the <em>god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor the <em>god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn</em> the <em>god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the got jewel\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n\n        \r\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d, new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor teh Got-Jewel\"), generator, 4f, 4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xor teh god jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr the god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor <em>the god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn the god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor teh <em>god</em> jewel\"));\n\n        \r\n\n        Analyzer analyzer = new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                TokenFilter filter = new LowerCaseFilter(t);\n                try {\n                    SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer());\n                    parser.parse(new StringReader(\"usa => usa, america, american\"));\n                    filter = new SynonymFilter(filter, parser.build(), true);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                return new TokenStreamComponents(t, filter);\n            }\n        };\n\n        spellchecker.setAccuracy(0.0f);\n        spellchecker.setMinPrefix(1);\n        spellchecker.setMinQueryLength(1);\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d, new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captian usa\"), generator, 2, 4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85, 10, null, analyzer, MultiFields.getTerms(ir, \"body\"));\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captian usw\"), generator, 2, 4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        \r\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85, 10, null, analyzer, MultiFields.getTerms(ir, \"body\"));\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captain usw\"), generator, 2, 4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"captain <em>america</em>\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellCheckerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testMultiGenerator() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        mapping.put(\"body_reverse\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new ReverseStringFilter(new LowerCaseFilter(t)));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_reverse\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        LaplaceScorer wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d, new BytesRef(\" \"), 0.5f);\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker();\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator forward = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_ALWAYS, ir, 0.95, 10);\n        DirectCandidateGenerator reverse = new DirectCandidateGenerator(spellchecker, \"body_reverse\", SuggestMode.SUGGEST_ALWAYS, ir, 0.95, 10, wrapper, wrapper,  MultiFields.getTerms(ir, \"body_reverse\"));\n        CandidateGenerator generator = new MultiCandidateGeneratorWrapper(10, forward, reverse);\n\n        Correction[] corrections = suggester.getCorrections(wrapper, new BytesRef(\"american cae\"), generator, 1, 1, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        generator = new MultiCandidateGeneratorWrapper(5, forward, reverse);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"american cae\"), forward, 1, 1, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(0)); \r\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"america cae\"), generator, 2, 1, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 4, ir, \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"zorr the god jewel\"));\n        assertThat(corrections[2].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"four the god jewel\"));\n\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 1, ir, \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 1, ir, \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        \r\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Quazar II\"), generator, 1, 1, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"quasar ii\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":311,"groupId":"56418","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/40/b2b023334cabe8b9b0411f4260e5ef4050de9e.src","preCode":"    public void testMultiGenerator() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        mapping.put(\"body_reverse\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new ReverseStringFilter(new LowerCaseFilter(t)));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_reverse\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        LaplaceScorer wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d, new BytesRef(\" \"), 0.5f);\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker();\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator forward = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_ALWAYS, ir, 0.95, 10);\n        DirectCandidateGenerator reverse = new DirectCandidateGenerator(spellchecker, \"body_reverse\", SuggestMode.SUGGEST_ALWAYS, ir, 0.95, 10, wrapper, wrapper,  MultiFields.getTerms(ir, \"body_reverse\"));\n        CandidateGenerator generator = new MultiCandidateGeneratorWrapper(10, forward, reverse);\n\n        Correction[] corrections = suggester.getCorrections(wrapper, new BytesRef(\"american cae\"), generator, 1, 1, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        generator = new MultiCandidateGeneratorWrapper(5, forward, reverse);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"american cae\"), forward, 1, 1, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(0)); \r\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"america cae\"), generator, 2, 1, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 4, ir, \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"zorr the god jewel\"));\n        assertThat(corrections[2].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"four the god jewel\"));\n\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 1, ir, \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 1, ir, \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        \r\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Quazar II\"), generator, 1, 1, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"quasar ii\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellCheckerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-11-06 18:55:23","codes":[{"authorDate":"2018-11-06 18:55:23","commitOrder":2,"curCode":"    public void testNgram() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"USA Hero\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        WordScorer wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d,\n            new BytesRef(\" \"), 0.5f);\n\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker();\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR,\n            ir, 0.95, 5);\n        Result result = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 1, 2);\n        Correction[] corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ace\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american <em>ace</em>\"));\n        assertThat(result.cutoffScore, greaterThan(0d));\n\n        result = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 0, 1);\n        corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(result.cutoffScore, equalTo(Double.MIN_VALUE));\n\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 4,\n            ir, \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the <em>god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor the <em>god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn</em> the <em>god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the got jewel\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f,\n            4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n\n        \r\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor teh Got-Jewel\"), generator, 4f, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xor teh god jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr the god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor <em>the god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn the god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor teh <em>god</em> jewel\"));\n\n        \r\n\n        Analyzer analyzer = new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                TokenFilter filter = new LowerCaseFilter(t);\n                try {\n                    SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer());\n                    parser.parse(new StringReader(\"usa => usa, america, american\"));\n                    filter = new SynonymFilter(filter, parser.build(), true);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                return new TokenStreamComponents(t, filter);\n            }\n        };\n\n        spellchecker.setAccuracy(0.0f);\n        spellchecker.setMinPrefix(1);\n        spellchecker.setMinQueryLength(1);\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captian usa\"), generator, 2, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85,\n            10, null, analyzer, MultiTerms.getTerms(ir, \"body\"));\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captian usw\"), generator, 2, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        \r\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85,\n            10, null, analyzer, MultiTerms.getTerms(ir, \"body\"));\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captain usw\"), generator, 2, 4, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"captain <em>america</em>\"));\n    }\n","date":"2018-11-06 18:55:23","endLine":220,"groupId":"56419","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNgram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/19d880c86d38143a0807ed83c2ab310f6ea8fc.src","preCode":"    public void testNgram() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"USA Hero\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        WordScorer wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d,\n            new BytesRef(\" \"), 0.5f);\n\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker();\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR,\n            ir, 0.95, 5);\n        Result result = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 1, 2);\n        Correction[] corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ace\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american <em>ace</em>\"));\n        assertThat(result.cutoffScore, greaterThan(0d));\n\n        result = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 0, 1);\n        corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(result.cutoffScore, equalTo(Double.MIN_VALUE));\n\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 4,\n            ir, \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the <em>god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor the <em>god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn</em> the <em>god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the got jewel\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f,\n            4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n\n        \r\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor teh Got-Jewel\"), generator, 4f, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xor teh god jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr the god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor <em>the god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn the god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor teh <em>god</em> jewel\"));\n\n        \r\n\n        Analyzer analyzer = new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                TokenFilter filter = new LowerCaseFilter(t);\n                try {\n                    SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer());\n                    parser.parse(new StringReader(\"usa => usa, america, american\"));\n                    filter = new SynonymFilter(filter, parser.build(), true);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                return new TokenStreamComponents(t, filter);\n            }\n        };\n\n        spellchecker.setAccuracy(0.0f);\n        spellchecker.setMinPrefix(1);\n        spellchecker.setMinQueryLength(1);\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captian usa\"), generator, 2, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85,\n            10, null, analyzer, MultiFields.getTerms(ir, \"body\"));\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captian usw\"), generator, 2, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        \r\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85,\n            10, null, analyzer, MultiFields.getTerms(ir, \"body\"));\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captain usw\"), generator, 2, 4, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"captain <em>america</em>\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellCheckerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2018-11-06 18:55:23","commitOrder":2,"curCode":"    public void testMultiGenerator() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        mapping.put(\"body_reverse\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new ReverseStringFilter(new LowerCaseFilter(t)));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_reverse\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        LaplaceScorer wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d,\n            new BytesRef(\" \"), 0.5f);\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker();\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator forward = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_ALWAYS, ir,\n            0.95, 10);\n        DirectCandidateGenerator reverse = new DirectCandidateGenerator(spellchecker, \"body_reverse\", SuggestMode.SUGGEST_ALWAYS, ir,\n            0.95, 10, wrapper, wrapper,  MultiTerms.getTerms(ir, \"body_reverse\"));\n        CandidateGenerator generator = new MultiCandidateGeneratorWrapper(10, forward, reverse);\n\n        Correction[] corrections = suggester.getCorrections(wrapper, new BytesRef(\"american cae\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        generator = new MultiCandidateGeneratorWrapper(5, forward, reverse);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"american cae\"), forward, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(0)); \r\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"america cae\"), generator, 2, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 4, ir,\n            \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"zorr the god jewel\"));\n        assertThat(corrections[2].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"four the god jewel\"));\n\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 1, ir,\n            \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 1, ir,\n            \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        \r\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Quazar II\"), generator, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"quasar ii\"));\n    }\n","date":"2018-11-06 18:55:23","endLine":337,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/19d880c86d38143a0807ed83c2ab310f6ea8fc.src","preCode":"    public void testMultiGenerator() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        mapping.put(\"body_reverse\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new ReverseStringFilter(new LowerCaseFilter(t)));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_reverse\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        LaplaceScorer wordScorer = new LaplaceScorer(ir, MultiFields.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d,\n            new BytesRef(\" \"), 0.5f);\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker();\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator forward = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_ALWAYS, ir,\n            0.95, 10);\n        DirectCandidateGenerator reverse = new DirectCandidateGenerator(spellchecker, \"body_reverse\", SuggestMode.SUGGEST_ALWAYS, ir,\n            0.95, 10, wrapper, wrapper,  MultiFields.getTerms(ir, \"body_reverse\"));\n        CandidateGenerator generator = new MultiCandidateGeneratorWrapper(10, forward, reverse);\n\n        Correction[] corrections = suggester.getCorrections(wrapper, new BytesRef(\"american cae\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        generator = new MultiCandidateGeneratorWrapper(5, forward, reverse);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"american cae\"), forward, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(0)); \r\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"america cae\"), generator, 2, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 4, ir,\n            \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"zorr the god jewel\"));\n        assertThat(corrections[2].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"four the god jewel\"));\n\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 1, ir,\n            \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 1, ir,\n            \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        \r\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Quazar II\"), generator, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"quasar ii\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellCheckerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"a5e1f4d3a2b6f03f5b6268555ebb4271ea3c153b","commitMessage":"@@@Upgrade to lucene-8.0.0-snapshot-31d7dfe6b1 (#35224)\n\n\n","date":"2018-11-06 18:55:23","modifiedFileCount":"30","status":"M","submitter":"Nick Knize"},{"authorTime":"2019-04-17 16:21:44","codes":[{"authorDate":"2019-04-17 16:21:44","commitOrder":3,"curCode":"    public void testNgram() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"USA Hero\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        WordScorer wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d,\n            new BytesRef(\" \"), 0.5f);\n\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker(REAL_WORD_LIKELIHOOD, true, DEFAULT_TOKEN_LIMIT);\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR,\n            ir, 0.95, 5);\n        Result result = getCorrections(suggester, wrapper, new BytesRef(\"american ame\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 1, 2);\n        Correction[] corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ace\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american <em>ace</em>\"));\n        assertThat(result.cutoffScore, greaterThan(0d));\n\n        result = getCorrections(suggester, wrapper, new BytesRef(\"american ame\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 0, 1);\n        corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(result.cutoffScore, equalTo(Double.MIN_VALUE));\n\n        suggester = new NoisyChannelSpellChecker(0.85, true, DEFAULT_TOKEN_LIMIT);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 4,\n            ir, \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the <em>god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor the <em>god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn</em> the <em>god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the got jewel\"));\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f,\n            4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n\n        \r\n        suggester = new NoisyChannelSpellChecker(0.85, true, DEFAULT_TOKEN_LIMIT);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Xor teh Got-Jewel\"), generator, 4f, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xor teh god jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr the god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor <em>the god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn the god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor teh <em>god</em> jewel\"));\n\n        \r\n\n        Analyzer analyzer = new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                TokenFilter filter = new LowerCaseFilter(t);\n                try {\n                    SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer());\n                    parser.parse(new StringReader(\"usa => usa, america, american\"));\n                    filter = new SynonymFilter(filter, parser.build(), true);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                return new TokenStreamComponents(t, filter);\n            }\n        };\n\n        spellchecker.setAccuracy(0.0f);\n        spellchecker.setMinPrefix(1);\n        spellchecker.setMinQueryLength(1);\n        suggester = new NoisyChannelSpellChecker(0.85, true, DEFAULT_TOKEN_LIMIT);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = getCorrections(suggester, analyzer, new BytesRef(\"captian usa\"), generator, 2, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85,\n            10, null, analyzer, MultiTerms.getTerms(ir, \"body\"));\n        corrections = getCorrections(suggester, analyzer, new BytesRef(\"captian usw\"), generator, 2, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        \r\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85,\n            10, null, analyzer, MultiTerms.getTerms(ir, \"body\"));\n        corrections = getCorrections(suggester, analyzer, new BytesRef(\"captain usw\"), generator, 2, 4, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"captain <em>america</em>\"));\n    }\n","date":"2019-04-17 16:21:44","endLine":226,"groupId":"58220","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNgram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/94/c5bf329eb743c204b48ba0580ccbc50a7c7d6c.src","preCode":"    public void testNgram() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"USA Hero\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        WordScorer wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d,\n            new BytesRef(\" \"), 0.5f);\n\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker();\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR,\n            ir, 0.95, 5);\n        Result result = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 1, 2);\n        Correction[] corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ace\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american <em>ace</em>\"));\n        assertThat(result.cutoffScore, greaterThan(0d));\n\n        result = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 0, 1);\n        corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(result.cutoffScore, equalTo(Double.MIN_VALUE));\n\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 4,\n            ir, \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the <em>god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor the <em>god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn</em> the <em>god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the got jewel\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f,\n            4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n\n        \r\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor teh Got-Jewel\"), generator, 4f, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xor teh god jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr the god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor <em>the god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn the god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor teh <em>god</em> jewel\"));\n\n        \r\n\n        Analyzer analyzer = new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                TokenFilter filter = new LowerCaseFilter(t);\n                try {\n                    SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer());\n                    parser.parse(new StringReader(\"usa => usa, america, american\"));\n                    filter = new SynonymFilter(filter, parser.build(), true);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                return new TokenStreamComponents(t, filter);\n            }\n        };\n\n        spellchecker.setAccuracy(0.0f);\n        spellchecker.setMinPrefix(1);\n        spellchecker.setMinQueryLength(1);\n        suggester = new NoisyChannelSpellChecker(0.85);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captian usa\"), generator, 2, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85,\n            10, null, analyzer, MultiTerms.getTerms(ir, \"body\"));\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captian usw\"), generator, 2, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        \r\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85,\n            10, null, analyzer, MultiTerms.getTerms(ir, \"body\"));\n        corrections = suggester.getCorrections(analyzer, new BytesRef(\"captain usw\"), generator, 2, 4, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"captain <em>america</em>\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellCheckerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2019-04-17 16:21:44","commitOrder":3,"curCode":"    public void testMultiGenerator() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        mapping.put(\"body_reverse\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new ReverseStringFilter(new LowerCaseFilter(t)));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_reverse\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        LaplaceScorer wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d,\n            new BytesRef(\" \"), 0.5f);\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker(REAL_WORD_LIKELIHOOD, true, DEFAULT_TOKEN_LIMIT);\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator forward = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_ALWAYS, ir,\n            0.95, 10);\n        DirectCandidateGenerator reverse = new DirectCandidateGenerator(spellchecker, \"body_reverse\", SuggestMode.SUGGEST_ALWAYS, ir,\n            0.95, 10, wrapper, wrapper,  MultiTerms.getTerms(ir, \"body_reverse\"));\n        CandidateGenerator generator = new MultiCandidateGeneratorWrapper(10, forward, reverse);\n\n        Correction[] corrections = getCorrections(suggester, wrapper, new BytesRef(\"american cae\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        generator = new MultiCandidateGeneratorWrapper(5, forward, reverse);\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"american ame\"), generator, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"american cae\"), forward, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(0)); \r\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"america cae\"), generator, 2, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 4, ir,\n            \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"zorr the god jewel\"));\n        assertThat(corrections[2].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"four the god jewel\"));\n\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 1, ir,\n            \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 1, ir,\n            \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        \r\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Quazar II\"), generator, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"quasar ii\"));\n    }\n","date":"2019-04-17 16:21:44","endLine":343,"groupId":"29447","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/94/c5bf329eb743c204b48ba0580ccbc50a7c7d6c.src","preCode":"    public void testMultiGenerator() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        mapping.put(\"body_reverse\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new ReverseStringFilter(new LowerCaseFilter(t)));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_reverse\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        LaplaceScorer wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d,\n            new BytesRef(\" \"), 0.5f);\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker();\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator forward = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_ALWAYS, ir,\n            0.95, 10);\n        DirectCandidateGenerator reverse = new DirectCandidateGenerator(spellchecker, \"body_reverse\", SuggestMode.SUGGEST_ALWAYS, ir,\n            0.95, 10, wrapper, wrapper,  MultiTerms.getTerms(ir, \"body_reverse\"));\n        CandidateGenerator generator = new MultiCandidateGeneratorWrapper(10, forward, reverse);\n\n        Correction[] corrections = suggester.getCorrections(wrapper, new BytesRef(\"american cae\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        generator = new MultiCandidateGeneratorWrapper(5, forward, reverse);\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"american ame\"), generator, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"american cae\"), forward, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(0)); \r\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"america cae\"), generator, 2, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 4, ir,\n            \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"zorr the god jewel\"));\n        assertThat(corrections[2].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"four the god jewel\"));\n\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 1, ir,\n            \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 1, ir,\n            \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        \r\n        corrections = suggester.getCorrections(wrapper, new BytesRef(\"Quazar II\"), generator, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"quasar ii\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellCheckerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"777408df78f1595c32cfa145d517facb2da42d42","commitMessage":"@@@Some cleanups in NoisyChannelSpellChecker (#40949)\n\nOne of the two #getCorrections methods is only used in tests.  so we can move\nit and any of the required helper methods to that test. Also reducing the\nvisibility of several methods to package private since the class isn't used\nelsewhere outside the package.","date":"2019-04-17 16:21:44","modifiedFileCount":"3","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2020-02-25 23:39:28","codes":[{"authorDate":"2020-02-25 23:39:28","commitOrder":4,"curCode":"    public void testNgram() throws IOException {\n        Directory dir = new ByteBuffersDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"USA Hero\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        WordScorer wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d,\n            new BytesRef(\" \"), 0.5f);\n\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker(REAL_WORD_LIKELIHOOD, true, DEFAULT_TOKEN_LIMIT);\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR,\n            ir, 0.95, 5);\n        Result result = getCorrections(suggester, wrapper, new BytesRef(\"american ame\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 1, 2);\n        Correction[] corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ace\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american <em>ace</em>\"));\n        assertThat(result.cutoffScore, greaterThan(0d));\n\n        result = getCorrections(suggester, wrapper, new BytesRef(\"american ame\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 0, 1);\n        corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(result.cutoffScore, equalTo(Double.MIN_VALUE));\n\n        suggester = new NoisyChannelSpellChecker(0.85, true, DEFAULT_TOKEN_LIMIT);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 4,\n            ir, \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the <em>god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor the <em>god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn</em> the <em>god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the got jewel\"));\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f,\n            4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n\n        \r\n        suggester = new NoisyChannelSpellChecker(0.85, true, DEFAULT_TOKEN_LIMIT);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Xor teh Got-Jewel\"), generator, 4f, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xor teh god jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr the god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor <em>the god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn the god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor teh <em>god</em> jewel\"));\n\n        \r\n\n        Analyzer analyzer = new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                TokenFilter filter = new LowerCaseFilter(t);\n                try {\n                    SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer());\n                    parser.parse(new StringReader(\"usa => usa, america, american\"));\n                    filter = new SynonymFilter(filter, parser.build(), true);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                return new TokenStreamComponents(t, filter);\n            }\n        };\n\n        spellchecker.setAccuracy(0.0f);\n        spellchecker.setMinPrefix(1);\n        spellchecker.setMinQueryLength(1);\n        suggester = new NoisyChannelSpellChecker(0.85, true, DEFAULT_TOKEN_LIMIT);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = getCorrections(suggester, analyzer, new BytesRef(\"captian usa\"), generator, 2, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85,\n            10, null, analyzer, MultiTerms.getTerms(ir, \"body\"));\n        corrections = getCorrections(suggester, analyzer, new BytesRef(\"captian usw\"), generator, 2, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        \r\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85,\n            10, null, analyzer, MultiTerms.getTerms(ir, \"body\"));\n        corrections = getCorrections(suggester, analyzer, new BytesRef(\"captain usw\"), generator, 2, 4, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"captain <em>america</em>\"));\n    }\n","date":"2020-02-25 23:39:28","endLine":226,"groupId":"104720","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNgram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f7/a0827affa7efd880b64320efa6ba02b09efc47.src","preCode":"    public void testNgram() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"USA Hero\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        WordScorer wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d,\n            new BytesRef(\" \"), 0.5f);\n\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker(REAL_WORD_LIKELIHOOD, true, DEFAULT_TOKEN_LIMIT);\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR,\n            ir, 0.95, 5);\n        Result result = getCorrections(suggester, wrapper, new BytesRef(\"american ame\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 1, 2);\n        Correction[] corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ace\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american <em>ace</em>\"));\n        assertThat(result.cutoffScore, greaterThan(0d));\n\n        result = getCorrections(suggester, wrapper, new BytesRef(\"american ame\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 0, 1);\n        corrections = result.corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"american ame\"));\n        assertThat(result.cutoffScore, equalTo(Double.MIN_VALUE));\n\n        suggester = new NoisyChannelSpellChecker(0.85, true, DEFAULT_TOKEN_LIMIT);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 4,\n            ir, \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the <em>god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor the <em>god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn</em> the <em>god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr</em> the got jewel\"));\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f,\n            4, ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xorr the got jewel\"));\n\n        \r\n        suggester = new NoisyChannelSpellChecker(0.85, true, DEFAULT_TOKEN_LIMIT);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Xor teh Got-Jewel\"), generator, 4f, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(space).utf8ToString(), equalTo(\"xor the god jewel\"));\n        assertThat(corrections[2].join(space).utf8ToString(), equalTo(\"xorn the god jewel\"));\n        assertThat(corrections[3].join(space).utf8ToString(), equalTo(\"xor teh god jewel\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorr the god</em> jewel\"));\n        assertThat(corrections[1].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor <em>the god</em> jewel\"));\n        assertThat(corrections[2].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>xorn the god</em> jewel\"));\n        assertThat(corrections[3].join(space, preTag, postTag).utf8ToString(), equalTo(\"xor teh <em>god</em> jewel\"));\n\n        \r\n\n        Analyzer analyzer = new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                TokenFilter filter = new LowerCaseFilter(t);\n                try {\n                    SolrSynonymParser parser = new SolrSynonymParser(true, false, new WhitespaceAnalyzer());\n                    parser.parse(new StringReader(\"usa => usa, america, american\"));\n                    filter = new SynonymFilter(filter, parser.build(), true);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                return new TokenStreamComponents(t, filter);\n            }\n        };\n\n        spellchecker.setAccuracy(0.0f);\n        spellchecker.setMinPrefix(1);\n        spellchecker.setMinQueryLength(1);\n        suggester = new NoisyChannelSpellChecker(0.85, true, DEFAULT_TOKEN_LIMIT);\n        wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.85d,\n            new BytesRef(\" \"), 0.5f);\n        corrections = getCorrections(suggester, analyzer, new BytesRef(\"captian usa\"), generator, 2, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(space).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85,\n            10, null, analyzer, MultiTerms.getTerms(ir, \"body\"));\n        corrections = getCorrections(suggester, analyzer, new BytesRef(\"captian usw\"), generator, 2, 4,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"<em>captain america</em>\"));\n\n        \r\n        generator = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_MORE_POPULAR, ir, 0.85,\n            10, null, analyzer, MultiTerms.getTerms(ir, \"body\"));\n        corrections = getCorrections(suggester, analyzer, new BytesRef(\"captain usw\"), generator, 2, 4, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"captain america\"));\n        assertThat(corrections[0].join(space, preTag, postTag).utf8ToString(), equalTo(\"captain <em>america</em>\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellCheckerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-02-25 23:39:28","commitOrder":4,"curCode":"    public void testMultiGenerator() throws IOException {\n        Directory dir = new ByteBuffersDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        mapping.put(\"body_reverse\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new ReverseStringFilter(new LowerCaseFilter(t)));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_reverse\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        LaplaceScorer wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d,\n            new BytesRef(\" \"), 0.5f);\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker(REAL_WORD_LIKELIHOOD, true, DEFAULT_TOKEN_LIMIT);\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator forward = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_ALWAYS, ir,\n            0.95, 10);\n        DirectCandidateGenerator reverse = new DirectCandidateGenerator(spellchecker, \"body_reverse\", SuggestMode.SUGGEST_ALWAYS, ir,\n            0.95, 10, wrapper, wrapper,  MultiTerms.getTerms(ir, \"body_reverse\"));\n        CandidateGenerator generator = new MultiCandidateGeneratorWrapper(10, forward, reverse);\n\n        Correction[] corrections = getCorrections(suggester, wrapper, new BytesRef(\"american cae\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        generator = new MultiCandidateGeneratorWrapper(5, forward, reverse);\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"american ame\"), generator, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"american cae\"), forward, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(0)); \r\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"america cae\"), generator, 2, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 4, ir,\n            \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"zorr the god jewel\"));\n        assertThat(corrections[2].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"four the god jewel\"));\n\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 1, ir,\n            \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 1, ir,\n            \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        \r\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Quazar II\"), generator, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"quasar ii\"));\n    }\n","date":"2020-02-25 23:39:28","endLine":343,"groupId":"104720","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiGenerator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f7/a0827affa7efd880b64320efa6ba02b09efc47.src","preCode":"    public void testMultiGenerator() throws IOException {\n        RAMDirectory dir = new RAMDirectory();\n        Map<String, Analyzer> mapping = new HashMap<>();\n        mapping.put(\"body_ngram\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                ShingleFilter tf = new ShingleFilter(t, 2, 3);\n                tf.setOutputUnigrams(false);\n                return new TokenStreamComponents(t, new LowerCaseFilter(tf));\n            }\n\n        });\n\n        mapping.put(\"body\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new LowerCaseFilter(t));\n            }\n\n        });\n        mapping.put(\"body_reverse\", new Analyzer() {\n\n            @Override\n            protected TokenStreamComponents createComponents(String fieldName) {\n                Tokenizer t = new StandardTokenizer();\n                return new TokenStreamComponents(t, new ReverseStringFilter(new LowerCaseFilter(t)));\n            }\n\n        });\n        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(), mapping);\n\n        IndexWriterConfig conf = new IndexWriterConfig(wrapper);\n        IndexWriter writer = new IndexWriter(dir, conf);\n        String[] strings = new String[]{\n            \"Xorr the God-Jewel\",\n            \"Grog the God-Crusher\",\n            \"Xorn\",\n            \"Walter Newell\",\n            \"Wanda Maximoff\",\n            \"Captain America\",\n            \"American Ace\",\n            \"Wundarr the Aquarian\",\n            \"Will o' the Wisp\",\n            \"Xemnu the Titan\",\n            \"Fantastic Four\",\n            \"Quasar\",\n            \"Quasar II\"\n        };\n        for (String line : strings) {\n            Document doc = new Document();\n            doc.add(new Field(\"body\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_reverse\", line, TextField.TYPE_NOT_STORED));\n            doc.add(new Field(\"body_ngram\", line, TextField.TYPE_NOT_STORED));\n            writer.addDocument(doc);\n        }\n\n        DirectoryReader ir = DirectoryReader.open(writer);\n        LaplaceScorer wordScorer = new LaplaceScorer(ir, MultiTerms.getTerms(ir, \"body_ngram\"), \"body_ngram\", 0.95d,\n            new BytesRef(\" \"), 0.5f);\n        NoisyChannelSpellChecker suggester = new NoisyChannelSpellChecker(REAL_WORD_LIKELIHOOD, true, DEFAULT_TOKEN_LIMIT);\n        DirectSpellChecker spellchecker = new DirectSpellChecker();\n        spellchecker.setMinQueryLength(1);\n        DirectCandidateGenerator forward = new DirectCandidateGenerator(spellchecker, \"body\", SuggestMode.SUGGEST_ALWAYS, ir,\n            0.95, 10);\n        DirectCandidateGenerator reverse = new DirectCandidateGenerator(spellchecker, \"body_reverse\", SuggestMode.SUGGEST_ALWAYS, ir,\n            0.95, 10, wrapper, wrapper,  MultiTerms.getTerms(ir, \"body_reverse\"));\n        CandidateGenerator generator = new MultiCandidateGeneratorWrapper(10, forward, reverse);\n\n        Correction[] corrections = getCorrections(suggester, wrapper, new BytesRef(\"american cae\"), generator, 1, 1,\n            ir, \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        generator = new MultiCandidateGeneratorWrapper(5, forward, reverse);\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"american ame\"), generator, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"american cae\"), forward, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(0)); \r\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"america cae\"), generator, 2, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"american ace\"));\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 4, ir,\n            \"body\", wordScorer, 0, 2).corrections;\n        assertThat(corrections.length, equalTo(4));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n        assertThat(corrections[1].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"zorr the god jewel\"));\n        assertThat(corrections[2].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"four the god jewel\"));\n\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Zorr the Got-Jewel\"), generator, 0.5f, 1, ir,\n            \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Xor the Got-Jewel\"), generator, 0.5f, 1, ir,\n            \"body\", wordScorer, 1.5f, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"xorr the god jewel\"));\n\n        \r\n        corrections = getCorrections(suggester, wrapper, new BytesRef(\"Quazar II\"), generator, 1, 1, ir,\n            \"body\", wordScorer, 1, 2).corrections;\n        assertThat(corrections.length, equalTo(1));\n        assertThat(corrections[0].join(new BytesRef(\" \")).utf8ToString(), equalTo(\"quasar ii\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/suggest/phrase/NoisyChannelSpellCheckerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"e67beed573547ac3757f6cc4c81b0c7feb440219","commitMessage":"@@@Use ByteBuffersDirectory rather than RAMDirectory (#52768)\n\nLucene's RAMDirectory has been deprecated. This commit replaces all uses of\nRAMDirectory in elasticsearch with the newer ByteBuffersDirectory. Most uses\nare in tests.  but the percolator and painless executor may get some small speedups.","date":"2020-02-25 23:39:28","modifiedFileCount":"21","status":"M","submitter":"Alan Woodward"}]
