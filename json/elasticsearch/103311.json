[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testDefaultField() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        QueryShardContext context = createShardContext();\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n        );\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        Query expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 1.0f\n        );\n        assertEquals(expected, query);\n        \r\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\",\n                context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n        );\n    }\n","date":"2018-04-26 03:22:53","endLine":598,"groupId":"54037","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7f/f2b7ec12285f87fca47f39377f9738f00fba9c.src","preCode":"    public void testDefaultField() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        QueryShardContext context = createShardContext();\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n        );\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        Query expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 1.0f\n        );\n        assertEquals(expected, query);\n        \r\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\",\n                context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":577,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testDefaultField() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n        );\n\n        MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n        query = qb.toQuery(context);\n        DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\", INT_FIELD_NAME).build())\n        );\n        \r\n        IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n        assertThat(exc, instanceOf(NumberFormatException.class));\n        assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n        \r\n        qb.lenient(true);\n        query = qb.toQuery(context);\n        expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f),\n                new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\")\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n    }\n","date":"2018-04-26 03:22:53","endLine":395,"groupId":"54037","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b6/d4816b01f4a975e26ad4031e1a10f0accb1346.src","preCode":"    public void testDefaultField() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n        );\n\n        MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n        query = qb.toQuery(context);\n        DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\", INT_FIELD_NAME).build())\n        );\n        \r\n        IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n        assertThat(exc, instanceOf(NumberFormatException.class));\n        assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n        \r\n        qb.lenient(true);\n        query = qb.toQuery(context);\n        expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f),\n                new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\")\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-07-27 17:51:09","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":2,"curCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n        );\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        Query expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 1.0f\n        );\n        assertEquals(expected, query);\n        \r\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\",\n                context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n        );\n    }\n","date":"2018-07-27 17:51:09","endLine":585,"groupId":"54037","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/d6e3ab361b755a02b8edda861c1b0ce76e7279.src","preCode":"    public void testDefaultField() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        QueryShardContext context = createShardContext();\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n        );\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        Query expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 1.0f\n        );\n        assertEquals(expected, query);\n        \r\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\",\n                context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":565,"status":"M"},{"authorDate":"2018-07-27 17:51:09","commitOrder":2,"curCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n        );\n\n        MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n        query = qb.toQuery(context);\n        DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\", INT_FIELD_NAME).build())\n        );\n        \r\n        IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n        assertThat(exc, instanceOf(NumberFormatException.class));\n        assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n        \r\n        qb.lenient(true);\n        query = qb.toQuery(context);\n        expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f),\n                new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\")\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n    }\n","date":"2018-07-27 17:51:09","endLine":382,"groupId":"54037","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/0cdaca40204ff2535233ebe1e814f7ff60e954.src","preCode":"    public void testDefaultField() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n        );\n\n        MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n        query = qb.toQuery(context);\n        DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\", INT_FIELD_NAME).build())\n        );\n        \r\n        IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n        assertThat(exc, instanceOf(NumberFormatException.class));\n        assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n        \r\n        qb.lenient(true);\n        query = qb.toQuery(context);\n        expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f),\n                new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\")\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"}],"commitId":"dfb277cfb7969ad543a31dea234579d0e886a73a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-27 17:51:09","modifiedFileCount":"105","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2019-01-17 22:10:28","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":3,"curCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n        );\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        Query expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 1.0f\n        );\n        assertEquals(expected, query);\n        \r\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\",\n                context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n        );\n    }\n","date":"2018-07-27 17:51:09","endLine":585,"groupId":"54037","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/d6e3ab361b755a02b8edda861c1b0ce76e7279.src","preCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n        );\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        Query expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 1.0f\n        );\n        assertEquals(expected, query);\n        \r\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\",\n                context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":565,"status":"N"},{"authorDate":"2019-01-17 22:10:28","commitOrder":3,"curCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                Settings.builder().putList(\"index.query.default_field\", STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\")\n                    .build())\n        );\n\n        MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n        query = qb.toQuery(context);\n        DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\", INT_FIELD_NAME).build())\n        );\n        \r\n        IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n        assertThat(exc, instanceOf(NumberFormatException.class));\n        assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n        \r\n        qb.lenient(true);\n        query = qb.toQuery(context);\n        expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f),\n                new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\")\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                Settings.builder().putNull(\"index.query.default_field\").build())\n        );\n    }\n","date":"2019-01-17 22:10:28","endLine":397,"groupId":"54037","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/27/651e0da0de462aff0ee92a42744ea330183331.src","preCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                Settings.builder().putList(\"index.query.default_field\", STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\")\n                    .build())\n        );\n\n        MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n        query = qb.toQuery(context);\n        DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\", INT_FIELD_NAME).build())\n        );\n        \r\n        IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n        assertThat(exc, instanceOf(NumberFormatException.class));\n        assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n        \r\n        qb.lenient(true);\n        query = qb.toQuery(context);\n        expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f),\n                new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\")\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"M"}],"commitId":"4351a5e5375237b8259fbcbd3ff4d7c59cc2d215","commitMessage":"@@@Allow field types to optimize phrase prefix queries (#37436)\n\nThis change adds a way to customize how phrase prefix queries should be created\non field types. The match phrase prefix query is exposed in field types in order\nto allow optimizations based on the options set on the field.\nFor instance the text field uses the configured prefix field (if available) to\nbuild a span near that mixes the original field and the prefix field on the last\nposition.\nThis change also contains a small refactoring of the match/multi_match query that\nsimplifies the interactions between the builders.\n\nCloses #31921","date":"2019-01-17 22:10:28","modifiedFileCount":"16","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2019-05-23 16:10:07","codes":[{"authorDate":"2019-05-23 16:10:07","commitOrder":4,"curCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        \r\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, \"*\", STRING_FIELD_NAME_2).build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            Query expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 1.0f\n            );\n            assertEquals(expected, query);\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\",\n                    context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n            );\n        }\n    }\n","date":"2019-05-23 16:10:07","endLine":615,"groupId":"54037","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ab/479d89fe9d6a2def5c4080d58efdd903e72562.src","preCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n        );\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        Query expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 1.0f\n        );\n        assertEquals(expected, query);\n        \r\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\",\n                context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"M"},{"authorDate":"2019-05-23 16:10:07","commitOrder":4,"curCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, \"*\", STRING_FIELD_NAME_2).build())\n            );\n            query = new MultiMatchQueryBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\", STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\")\n                        .build())\n            );\n            MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n            query = qb.toQuery(context);\n            DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\",\n                        STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\", INT_FIELD_NAME).build())\n            );\n            \r\n            IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n            assertThat(exc, instanceOf(NumberFormatException.class));\n            assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n            \r\n            qb.lenient(true);\n            query = qb.toQuery(context);\n            expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f),\n                    new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\")\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putNull(\"index.query.default_field\").build())\n            );\n        }\n    }\n","date":"2019-05-23 16:10:07","endLine":471,"groupId":"54037","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/65/90a5609353a9dc05e8a3ddc610f0d83e7fcf77.src","preCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                Settings.builder().putList(\"index.query.default_field\", STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\")\n                    .build())\n        );\n\n        MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n        query = qb.toQuery(context);\n        DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                Settings.builder().putList(\"index.query.default_field\",\n                STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\", INT_FIELD_NAME).build())\n        );\n        \r\n        IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n        assertThat(exc, instanceOf(NumberFormatException.class));\n        assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n        \r\n        qb.lenient(true);\n        query = qb.toQuery(context);\n        expected = new DisjunctionMaxQuery(\n            Arrays.asList(\n                new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f),\n                new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\")\n            ), 0.0f\n        );\n        assertEquals(expected, query);\n\n        context.getIndexSettings().updateIndexMetaData(\n            newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                Settings.builder().putNull(\"index.query.default_field\").build())\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"M"}],"commitId":"e75ff0c748e6b68232c2b08e19ac4a4934918264","commitMessage":"@@@Allow `fields` to be set to `*` (#42301)\n\nAllow for SimpleQueryString.  QueryString and MultiMatchQuery\nto set the `fields` parameter to the wildcard `*`. If so.  set\nthe leniency to `true`.  to achieve the same behaviour as from the\n`\"default_field\" : \"*\" setting.\n\nFurthermore.   check if `*` is in the list of the `default_field` but\nnot necessarily as the 1st element.\n\nCloses: #39577\n","date":"2019-05-23 16:10:07","modifiedFileCount":"7","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-06-05 14:47:33","codes":[{"authorDate":"2019-05-23 16:10:07","commitOrder":5,"curCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        \r\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, \"*\", STRING_FIELD_NAME_2).build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            Query expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 1.0f\n            );\n            assertEquals(expected, query);\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\",\n                    context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n            );\n        }\n    }\n","date":"2019-05-23 16:10:07","endLine":615,"groupId":"54037","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ab/479d89fe9d6a2def5c4080d58efdd903e72562.src","preCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        \r\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, \"*\", STRING_FIELD_NAME_2).build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            Query expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 1.0f\n            );\n            assertEquals(expected, query);\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\",\n                    context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n            );\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"N"},{"authorDate":"2019-06-05 14:47:33","commitOrder":5,"curCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, \"*\", STRING_FIELD_NAME_2).build())\n            );\n            query = new MultiMatchQueryBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\", STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\")\n                        .build())\n            );\n            MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n            query = qb.toQuery(context);\n            DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\",\n                        STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\", INT_FIELD_NAME).build())\n            );\n            \r\n            IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n            assertThat(exc, instanceOf(NumberFormatException.class));\n            assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n            \r\n            qb.lenient(true);\n            query = qb.toQuery(context);\n            expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\"),\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putNull(\"index.query.default_field\").build())\n            );\n        }\n    }\n","date":"2019-06-05 14:47:33","endLine":448,"groupId":"54037","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/810d6686c4be97de2039963ad0e18e6ad64cb7.src","preCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, \"*\", STRING_FIELD_NAME_2).build())\n            );\n            query = new MultiMatchQueryBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\", STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\")\n                        .build())\n            );\n            MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n            query = qb.toQuery(context);\n            DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\",\n                        STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\", INT_FIELD_NAME).build())\n            );\n            \r\n            IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n            assertThat(exc, instanceOf(NumberFormatException.class));\n            assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n            \r\n            qb.lenient(true);\n            query = qb.toQuery(context);\n            expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f),\n                    new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\")\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putNull(\"index.query.default_field\").build())\n            );\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"M"}],"commitId":"3cfa4a6aa86499f57d72a7aca0a4440e48523e92","commitMessage":"@@@Deduplicate alias and concrete fields in query field expansion (#42328)\n\nThe full-text query parsers accept field pattern that are expanded using the mapping.\nAlias field are also detected during the expansion but they are not deduplicated with the\nconcrete fields that are found from other patterns (or the same). This change ensures\nthat we deduplicate the target fields of the full-text query parsers in order to avoid\nadding the same clause multiple times. Boolean queries are already able to deduplicate\nclauses during rewrite but since we also use DisjunctionMaxQuery it is preferable to detect\n these duplicates early on.\n","date":"2019-06-05 14:47:33","modifiedFileCount":"5","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":6,"curCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        \r\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, \"*\", STRING_FIELD_NAME_2).build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            Query expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 1.0f\n            );\n            assertEquals(expected, query);\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\",\n                    context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n            );\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":603,"groupId":"54037","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/0c94c6de2bccbed6ece43db7e3c915fcaec45d.src","preCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        \r\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, \"*\", STRING_FIELD_NAME_2).build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            Query expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 1.0f\n            );\n            assertEquals(expected, query);\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\",\n                    context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n            );\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":6,"curCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, \"*\", STRING_FIELD_NAME_2).build())\n            );\n            query = new MultiMatchQueryBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\", STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\")\n                        .build())\n            );\n            MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n            query = qb.toQuery(context);\n            DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\",\n                        STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\", INT_FIELD_NAME).build())\n            );\n            \r\n            IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n            assertThat(exc, instanceOf(NumberFormatException.class));\n            assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n            \r\n            qb.lenient(true);\n            query = qb.toQuery(context);\n            expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\"),\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putNull(\"index.query.default_field\").build())\n            );\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":442,"groupId":"54037","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2a/31d2885eb3083b5d69261799efe1de1366c1e6.src","preCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, \"*\", STRING_FIELD_NAME_2).build())\n            );\n            query = new MultiMatchQueryBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\", STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\")\n                        .build())\n            );\n            MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n            query = qb.toQuery(context);\n            DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\",\n                        STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\", INT_FIELD_NAME).build())\n            );\n            \r\n            IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n            assertThat(exc, instanceOf(NumberFormatException.class));\n            assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n            \r\n            qb.lenient(true);\n            query = qb.toQuery(context);\n            expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\"),\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetaData(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putNull(\"index.query.default_field\").build())\n            );\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-04-03 22:00:46","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":7,"curCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        \r\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    TEXT_FIELD_NAME, \"*\", KEYWORD_FIELD_NAME).build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    TEXT_FIELD_NAME, KEYWORD_FIELD_NAME + \"^5\").build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            Query expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(TEXT_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(KEYWORD_FIELD_NAME, \"hello\")), 5.0f)\n                ), 1.0f\n            );\n            assertEquals(expected, query);\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\",\n                    context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n            );\n        }\n    }\n","date":"2020-04-03 22:00:46","endLine":603,"groupId":"54037","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c0/24a79cf526a32058b972c3f07aea4d4785190f.src","preCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        \r\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, \"*\", STRING_FIELD_NAME_2).build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\").build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            Query expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 1.0f\n            );\n            assertEquals(expected, query);\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\",\n                    context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n            );\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"},{"authorDate":"2020-04-03 22:00:46","commitOrder":7,"curCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    TEXT_FIELD_NAME, \"*\", KEYWORD_FIELD_NAME).build())\n            );\n            query = new MultiMatchQueryBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\", TEXT_FIELD_NAME, KEYWORD_FIELD_NAME + \"^5\")\n                        .build())\n            );\n            MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n            query = qb.toQuery(context);\n            DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(TEXT_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(KEYWORD_FIELD_NAME, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\",\n                        TEXT_FIELD_NAME, KEYWORD_FIELD_NAME + \"^5\", INT_FIELD_NAME).build())\n            );\n            \r\n            IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n            assertThat(exc, instanceOf(NumberFormatException.class));\n            assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n            \r\n            qb.lenient(true);\n            query = qb.toQuery(context);\n            expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\"),\n                    new TermQuery(new Term(TEXT_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(KEYWORD_FIELD_NAME, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putNull(\"index.query.default_field\").build())\n            );\n        }\n    }\n","date":"2020-04-03 22:00:46","endLine":442,"groupId":"54037","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4b/227541b3a9d022dfdc905e2b00e19d548e5786.src","preCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    STRING_FIELD_NAME, \"*\", STRING_FIELD_NAME_2).build())\n            );\n            query = new MultiMatchQueryBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\", STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\")\n                        .build())\n            );\n            MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n            query = qb.toQuery(context);\n            DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\",\n                        STRING_FIELD_NAME, STRING_FIELD_NAME_2 + \"^5\", INT_FIELD_NAME).build())\n            );\n            \r\n            IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n            assertThat(exc, instanceOf(NumberFormatException.class));\n            assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n            \r\n            qb.lenient(true);\n            query = qb.toQuery(context);\n            expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\"),\n                    new TermQuery(new Term(STRING_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(STRING_FIELD_NAME_2, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putNull(\"index.query.default_field\").build())\n            );\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"M"}],"commitId":"f5759bb2092f1a957e79626c872c3f5707c1ee04","commitMessage":"@@@Rename field name constants in AbstractBuilderTestCase (#53234)\n\nSome field name constants were not updaten when we moved from \"string\" to \"text\"\nand \"keyword\" fields. Renaming them makes it easier and faster to know which\nfield type is used in test subclassing this base test case.","date":"2020-04-03 22:00:46","modifiedFileCount":"34","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":8,"curCode":"    public void testDefaultField() throws Exception {\n        SearchExecutionContext context = createSearchExecutionContext();\n        \r\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    TEXT_FIELD_NAME, \"*\", KEYWORD_FIELD_NAME).build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    TEXT_FIELD_NAME, KEYWORD_FIELD_NAME + \"^5\").build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            Query expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(TEXT_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(KEYWORD_FIELD_NAME, \"hello\")), 5.0f)\n                ), 1.0f\n            );\n            assertEquals(expected, query);\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\",\n                    context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n            );\n        }\n    }\n","date":"2021-01-15 01:11:59","endLine":603,"groupId":"103311","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f6/a18686011df0b5c9401cd81a33ca2570763708.src","preCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        \r\n        Query query = new SimpleQueryStringBuilder(\"hello\")\n            .toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    TEXT_FIELD_NAME, \"*\", KEYWORD_FIELD_NAME).build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    TEXT_FIELD_NAME, KEYWORD_FIELD_NAME + \"^5\").build())\n            );\n            query = new SimpleQueryStringBuilder(\"hello\")\n                .toQuery(context);\n            Query expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(TEXT_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(KEYWORD_FIELD_NAME, \"hello\")), 5.0f)\n                ), 1.0f\n            );\n            assertEquals(expected, query);\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\",\n                    context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\", \"*\").build())\n            );\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":8,"curCode":"    public void testDefaultField() throws Exception {\n        SearchExecutionContext context = createSearchExecutionContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    TEXT_FIELD_NAME, \"*\", KEYWORD_FIELD_NAME).build())\n            );\n            query = new MultiMatchQueryBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\", TEXT_FIELD_NAME, KEYWORD_FIELD_NAME + \"^5\")\n                        .build())\n            );\n            MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n            query = qb.toQuery(context);\n            DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(TEXT_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(KEYWORD_FIELD_NAME, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\",\n                        TEXT_FIELD_NAME, KEYWORD_FIELD_NAME + \"^5\", INT_FIELD_NAME).build())\n            );\n            \r\n            IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n            assertThat(exc, instanceOf(NumberFormatException.class));\n            assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n            \r\n            qb.lenient(true);\n            query = qb.toQuery(context);\n            expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\"),\n                    new TermQuery(new Term(TEXT_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(KEYWORD_FIELD_NAME, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putNull(\"index.query.default_field\").build())\n            );\n        }\n    }\n","date":"2021-01-15 01:11:59","endLine":443,"groupId":"103311","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/c52824fefbdd7894f0f7f5324cc199b7229240.src","preCode":"    public void testDefaultField() throws Exception {\n        QueryShardContext context = createShardContext();\n        MultiMatchQueryBuilder builder = new MultiMatchQueryBuilder(\"hello\");\n        \r\n        Query query = builder.toQuery(context);\n        assertQueryWithAllFieldsWildcard(query);\n\n        try {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(), Settings.builder().putList(\"index.query.default_field\",\n                    TEXT_FIELD_NAME, \"*\", KEYWORD_FIELD_NAME).build())\n            );\n            query = new MultiMatchQueryBuilder(\"hello\")\n                .toQuery(context);\n            assertQueryWithAllFieldsWildcard(query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\", TEXT_FIELD_NAME, KEYWORD_FIELD_NAME + \"^5\")\n                        .build())\n            );\n            MultiMatchQueryBuilder qb = new MultiMatchQueryBuilder(\"hello\");\n            query = qb.toQuery(context);\n            DisjunctionMaxQuery expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new TermQuery(new Term(TEXT_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(KEYWORD_FIELD_NAME, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putList(\"index.query.default_field\",\n                        TEXT_FIELD_NAME, KEYWORD_FIELD_NAME + \"^5\", INT_FIELD_NAME).build())\n            );\n            \r\n            IllegalArgumentException exc = expectThrows(IllegalArgumentException.class, () -> qb.toQuery(context));\n            assertThat(exc, instanceOf(NumberFormatException.class));\n            assertThat(exc.getMessage(), equalTo(\"For input string: \\\"hello\\\"\"));\n\n            \r\n            qb.lenient(true);\n            query = qb.toQuery(context);\n            expected = new DisjunctionMaxQuery(\n                Arrays.asList(\n                    new MatchNoDocsQuery(\"failed [mapped_int] query, caused by number_format_exception:[For input string: \\\"hello\\\"]\"),\n                    new TermQuery(new Term(TEXT_FIELD_NAME, \"hello\")),\n                    new BoostQuery(new TermQuery(new Term(KEYWORD_FIELD_NAME, \"hello\")), 5.0f)\n                ), 0.0f\n            );\n            assertEquals(expected, query);\n\n        } finally {\n            \r\n            context.getIndexSettings().updateIndexMetadata(\n                newIndexMeta(\"index\", context.getIndexSettings().getSettings(),\n                    Settings.builder().putNull(\"index.query.default_field\").build())\n            );\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MultiMatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
