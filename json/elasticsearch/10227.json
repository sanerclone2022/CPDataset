[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testBasics() throws Exception {\n        indexRandom(true, client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n                client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setTypes(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").refresh(true).get(), matcher().updated(4));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"no_match\")).refresh(true).get(), matcher().updated(0));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"a\")).refresh(true).get(), matcher().updated(2));\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        UpdateByQueryRequestBuilder request = updateByQuery().source(\"test\").size(3).refresh(true);\n        request.source().addSort(\"foo.keyword\", SortOrder.ASC);\n        assertThat(request.get(), matcher().updated(3));\n        \r\n        assertEquals(4, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(4, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n    }\n","date":"2018-04-26 03:22:53","endLine":74,"groupId":"70239","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/a92005c2cdc21118bd39af462df41520caef10.src","preCode":"    public void testBasics() throws Exception {\n        indexRandom(true, client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n                client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setTypes(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").refresh(true).get(), matcher().updated(4));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"no_match\")).refresh(true).get(), matcher().updated(0));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"a\")).refresh(true).get(), matcher().updated(2));\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        UpdateByQueryRequestBuilder request = updateByQuery().source(\"test\").size(3).refresh(true);\n        request.source().addSort(\"foo.keyword\", SortOrder.ASC);\n        assertThat(request.get(), matcher().updated(3));\n        \r\n        assertEquals(4, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(4, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/UpdateByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testSlices() throws Exception {\n        indexRandom(true,\n            client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n            client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setTypes(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        int slices = randomSlices(2, 10);\n        int expectedSlices = expectedSliceStatuses(slices, \"test\");\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(4)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"no_match\"))\n                .setSlices(slices)\n                .refresh(true).get(),\n            matcher()\n                .updated(0)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"a\"))\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(2)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n    }\n","date":"2018-04-26 03:22:53","endLine":128,"groupId":"2317","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlices","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/a92005c2cdc21118bd39af462df41520caef10.src","preCode":"    public void testSlices() throws Exception {\n        indexRandom(true,\n            client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n            client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setTypes(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        int slices = randomSlices(2, 10);\n        int expectedSlices = expectedSliceStatuses(slices, \"test\");\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(4)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"no_match\"))\n                .setSlices(slices)\n                .refresh(true).get(),\n            matcher()\n                .updated(0)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"a\"))\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(2)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/UpdateByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-05-29 15:50:30","codes":[{"authorDate":"2019-05-29 15:50:30","commitOrder":2,"curCode":"    public void testBasics() throws Exception {\n        indexRandom(true, client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n                client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").refresh(true).get(), matcher().updated(4));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"no_match\")).refresh(true).get(), matcher().updated(0));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"a\")).refresh(true).get(), matcher().updated(2));\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        UpdateByQueryRequestBuilder request = updateByQuery().source(\"test\").size(3).refresh(true);\n        request.source().addSort(\"foo.keyword\", SortOrder.ASC);\n        assertThat(request.get(), matcher().updated(3));\n        \r\n        assertEquals(4, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(4, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n    }\n","date":"2019-05-29 15:50:30","endLine":74,"groupId":"70239","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c4/0114c7346093f74cde45465ec4c020ec968658.src","preCode":"    public void testBasics() throws Exception {\n        indexRandom(true, client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n                client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setTypes(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").refresh(true).get(), matcher().updated(4));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"no_match\")).refresh(true).get(), matcher().updated(0));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"a\")).refresh(true).get(), matcher().updated(2));\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        UpdateByQueryRequestBuilder request = updateByQuery().source(\"test\").size(3).refresh(true);\n        request.source().addSort(\"foo.keyword\", SortOrder.ASC);\n        assertThat(request.get(), matcher().updated(3));\n        \r\n        assertEquals(4, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(4, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/UpdateByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2019-05-29 15:50:30","commitOrder":2,"curCode":"    public void testSlices() throws Exception {\n        indexRandom(true,\n            client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n            client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        int slices = randomSlices(2, 10);\n        int expectedSlices = expectedSliceStatuses(slices, \"test\");\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(4)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"no_match\"))\n                .setSlices(slices)\n                .refresh(true).get(),\n            matcher()\n                .updated(0)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"a\"))\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(2)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n    }\n","date":"2019-05-29 15:50:30","endLine":128,"groupId":"2317","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlices","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c4/0114c7346093f74cde45465ec4c020ec968658.src","preCode":"    public void testSlices() throws Exception {\n        indexRandom(true,\n            client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n            client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setTypes(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        int slices = randomSlices(2, 10);\n        int expectedSlices = expectedSliceStatuses(slices, \"test\");\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(4)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"no_match\"))\n                .setSlices(slices)\n                .refresh(true).get(),\n            matcher()\n                .updated(0)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"a\"))\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(2)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/UpdateByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"3f10cea87ac658b037a256bbf99b62e5dcae05b3","commitMessage":"@@@Removes types from SearchRequest and QueryShardContext (#42112)\n\n\n","date":"2019-05-29 15:50:30","modifiedFileCount":"112","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2019-09-20 21:22:57","codes":[{"authorDate":"2019-09-20 21:22:57","commitOrder":3,"curCode":"    public void testBasics() throws Exception {\n        indexRandom(true, client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n                client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").refresh(true).get(), matcher().updated(4));\n        assertEquals(2, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"no_match\")).refresh(true).get(), matcher().updated(0));\n        assertEquals(2, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"a\")).refresh(true).get(), matcher().updated(2));\n        assertEquals(3, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        UpdateByQueryRequestBuilder request = updateByQuery().source(\"test\").size(3).refresh(true);\n        request.source().addSort(\"foo.keyword\", SortOrder.ASC);\n        assertThat(request.get(), matcher().updated(3));\n        \r\n        assertEquals(4, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(4, client().prepareGet(\"test\", \"2\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n    }\n","date":"2019-09-20 21:22:57","endLine":72,"groupId":"34686","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/71b2969a5133c4518e99fb6c2ce283c0a75fcd.src","preCode":"    public void testBasics() throws Exception {\n        indexRandom(true, client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n                client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").refresh(true).get(), matcher().updated(4));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"no_match\")).refresh(true).get(), matcher().updated(0));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"a\")).refresh(true).get(), matcher().updated(2));\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        UpdateByQueryRequestBuilder request = updateByQuery().source(\"test\").size(3).refresh(true);\n        request.source().addSort(\"foo.keyword\", SortOrder.ASC);\n        assertThat(request.get(), matcher().updated(3));\n        \r\n        assertEquals(4, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(4, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/UpdateByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2019-09-20 21:22:57","commitOrder":3,"curCode":"    public void testSlices() throws Exception {\n        indexRandom(true,\n            client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n            client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        int slices = randomSlices(2, 10);\n        int expectedSlices = expectedSliceStatuses(slices, \"test\");\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(4)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"no_match\"))\n                .setSlices(slices)\n                .refresh(true).get(),\n            matcher()\n                .updated(0)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"a\"))\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(2)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(3, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n    }\n","date":"2019-09-20 21:22:57","endLine":126,"groupId":"61015","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlices","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/71b2969a5133c4518e99fb6c2ce283c0a75fcd.src","preCode":"    public void testSlices() throws Exception {\n        indexRandom(true,\n            client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n            client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        int slices = randomSlices(2, 10);\n        int expectedSlices = expectedSliceStatuses(slices, \"test\");\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(4)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"no_match\"))\n                .setSlices(slices)\n                .refresh(true).get(),\n            matcher()\n                .updated(0)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"a\"))\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(2)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"test\", \"4\").get().getVersion());\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/UpdateByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"7c90801aff398d9b73e4fa24933550d2320a5a4d","commitMessage":"@@@Remove types from Get/MultiGet (#46587)\n\nThis commit removes types from the ShardGetService.  and propagates this API change\nup through the Transport and Rest actions for Get and MultiGet\n\nRelates to #41059","date":"2019-09-20 21:22:57","modifiedFileCount":"136","status":"M","submitter":"Alan Woodward"},{"authorTime":"2019-10-25 18:09:52","codes":[{"authorDate":"2019-10-25 18:09:52","commitOrder":4,"curCode":"    public void testBasics() throws Exception {\n        indexRandom(true, client().prepareIndex(\"test\").setId(\"1\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\").setId(\"2\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\").setId(\"3\").setSource(\"foo\", \"b\"),\n                client().prepareIndex(\"test\").setId(\"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").refresh(true).get(), matcher().updated(4));\n        assertEquals(2, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"no_match\")).refresh(true).get(), matcher().updated(0));\n        assertEquals(2, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"a\")).refresh(true).get(), matcher().updated(2));\n        assertEquals(3, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        UpdateByQueryRequestBuilder request = updateByQuery().source(\"test\").size(3).refresh(true);\n        request.source().addSort(\"foo.keyword\", SortOrder.ASC);\n        assertThat(request.get(), matcher().updated(3));\n        \r\n        assertEquals(4, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(4, client().prepareGet(\"test\", \"2\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n    }\n","date":"2019-10-25 18:09:52","endLine":72,"groupId":"10227","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/753bd868a5bfadeb7bfb74b383e3f3580bc90a.src","preCode":"    public void testBasics() throws Exception {\n        indexRandom(true, client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n                client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n                client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").refresh(true).get(), matcher().updated(4));\n        assertEquals(2, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"no_match\")).refresh(true).get(), matcher().updated(0));\n        assertEquals(2, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(updateByQuery().source(\"test\").filter(termQuery(\"foo\", \"a\")).refresh(true).get(), matcher().updated(2));\n        assertEquals(3, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        UpdateByQueryRequestBuilder request = updateByQuery().source(\"test\").size(3).refresh(true);\n        request.source().addSort(\"foo.keyword\", SortOrder.ASC);\n        assertThat(request.get(), matcher().updated(3));\n        \r\n        assertEquals(4, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(4, client().prepareGet(\"test\", \"2\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/UpdateByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2019-10-25 18:09:52","commitOrder":4,"curCode":"    public void testSlices() throws Exception {\n        indexRandom(true,\n            client().prepareIndex(\"test\").setId(\"1\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\").setId(\"2\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\").setId(\"3\").setSource(\"foo\", \"b\"),\n            client().prepareIndex(\"test\").setId(\"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        int slices = randomSlices(2, 10);\n        int expectedSlices = expectedSliceStatuses(slices, \"test\");\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(4)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"no_match\"))\n                .setSlices(slices)\n                .refresh(true).get(),\n            matcher()\n                .updated(0)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"a\"))\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(2)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(3, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n    }\n","date":"2019-10-25 18:09:52","endLine":126,"groupId":"10227","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSlices","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/753bd868a5bfadeb7bfb74b383e3f3580bc90a.src","preCode":"    public void testSlices() throws Exception {\n        indexRandom(true,\n            client().prepareIndex(\"test\", \"test\", \"1\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"2\").setSource(\"foo\", \"a\"),\n            client().prepareIndex(\"test\", \"test\", \"3\").setSource(\"foo\", \"b\"),\n            client().prepareIndex(\"test\", \"test\", \"4\").setSource(\"foo\", \"c\"));\n        assertHitCount(client().prepareSearch(\"test\").setSize(0).get(), 4);\n        assertEquals(1, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(1, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        int slices = randomSlices(2, 10);\n        int expectedSlices = expectedSliceStatuses(slices, \"test\");\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(4)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"no_match\"))\n                .setSlices(slices)\n                .refresh(true).get(),\n            matcher()\n                .updated(0)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(2, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n\n        \r\n        assertThat(\n            updateByQuery()\n                .source(\"test\")\n                .filter(termQuery(\"foo\", \"a\"))\n                .refresh(true)\n                .setSlices(slices).get(),\n            matcher()\n                .updated(2)\n                .slices(hasSize(expectedSlices)));\n        assertEquals(3, client().prepareGet(\"test\", \"1\").get().getVersion());\n        assertEquals(3, client().prepareGet(\"test\", \"2\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"3\").get().getVersion());\n        assertEquals(2, client().prepareGet(\"test\", \"4\").get().getVersion());\n    }\n","realPath":"modules/reindex/src/test/java/org/elasticsearch/index/reindex/UpdateByQueryBasicTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"750c6d8bb1c751774f01fd12778f8bcc0a6f4d57","commitMessage":"@@@Remove Client.prepareIndex(index.  type.  id) method (#48443)\n\nAs types are no longer used in index requests.  we can remove the type parameter\nfrom `prepareIndex` methods in the `Client` interface. However.  just changing the signature\nof `prepareIndex(index.  type.  id)` to `prepareIndex(index.  id)` risks confusion when\nupgrading with the previous (now removed) `prepareIndex(index.  type)` method -\njust changing the dependency version of java code would end up silently changing the\nsemantics of the method call. Instead we should just remove this method entirely.  and\nreplace it by calling `prepareIndex(index).setId(id)`","date":"2019-10-25 18:09:52","modifiedFileCount":"267","status":"M","submitter":"Alan Woodward"}]
