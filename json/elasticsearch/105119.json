[{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":1,"curCode":"    public void testMoreClustersThanDocs() throws Exception {\n        final List<Number> dataset = Arrays.asList(-3L, 10L, -200L);\n        double doubleError = 1d / 10000d;\n\n        \r\n        final Map<Double, Integer> expectedDocCount = new HashMap<>();\n        expectedDocCount.put(-200d, 1);\n        expectedDocCount.put(-3d, 1);\n        expectedDocCount.put(10d, 1);\n        final Map<Double, Double> expectedMins = new HashMap<>();\n        expectedMins.put(-200d, -200d);\n        expectedMins.put(-3d, -3d);\n        expectedMins.put(10d, 10d);\n\n        testBothCases(DEFAULT_QUERY, dataset, true,\n            aggregation -> aggregation.field(NUMERIC_FIELD).setNumBuckets(4).setShardSize(4),\n            histogram -> {\n                final List<InternalVariableWidthHistogram.Bucket> buckets = histogram.getBuckets();\n                assertEquals(expectedDocCount.size(), buckets.size());\n                buckets.forEach(bucket -> {\n                    assertEquals(expectedDocCount.getOrDefault(bucket.getKey(), 0).longValue(), bucket.getDocCount());\n                    assertEquals(expectedMins.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.min(), doubleError);\n                });\n            });\n    }\n","date":"2020-06-26 22:33:37","endLine":95,"groupId":"67965","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMoreClustersThanDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/1e5abaac3b11635400f66236cf0bd04aa9f1d9.src","preCode":"    public void testMoreClustersThanDocs() throws Exception {\n        final List<Number> dataset = Arrays.asList(-3L, 10L, -200L);\n        double doubleError = 1d / 10000d;\n\n        \r\n        final Map<Double, Integer> expectedDocCount = new HashMap<>();\n        expectedDocCount.put(-200d, 1);\n        expectedDocCount.put(-3d, 1);\n        expectedDocCount.put(10d, 1);\n        final Map<Double, Double> expectedMins = new HashMap<>();\n        expectedMins.put(-200d, -200d);\n        expectedMins.put(-3d, -3d);\n        expectedMins.put(10d, 10d);\n\n        testBothCases(DEFAULT_QUERY, dataset, true,\n            aggregation -> aggregation.field(NUMERIC_FIELD).setNumBuckets(4).setShardSize(4),\n            histogram -> {\n                final List<InternalVariableWidthHistogram.Bucket> buckets = histogram.getBuckets();\n                assertEquals(expectedDocCount.size(), buckets.size());\n                buckets.forEach(bucket -> {\n                    assertEquals(expectedDocCount.getOrDefault(bucket.getKey(), 0).longValue(), bucket.getDocCount());\n                    assertEquals(expectedMins.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.min(), doubleError);\n                });\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2020-06-26 22:33:37","commitOrder":1,"curCode":"    public void testNewBucketLimit() throws Exception{\n        final List<Number> dataset =  Arrays.asList(1,2,3,4,5, 10, 20, 50, 100, 5400, -900);\n        double doubleError = 1d / 10000d;\n\n        \r\n        \r\n        final Map<Double, Integer> expectedDocCount = new HashMap<>();\n        expectedDocCount.put(-299d, 3);\n        expectedDocCount.put(3.5d, 2);\n        expectedDocCount.put(5d, 1);\n        expectedDocCount.put(1116d, 5);\n\n        final Map<Double, Double> expectedMins = new HashMap<>();\n        expectedMins.put(-299d, -900d);\n        expectedMins.put(3.5d, 3d);\n        expectedMins.put(5d, 5d);\n        expectedMins.put(1116d, 10d);\n\n        final Map<Double, Double> expectedMaxes = new HashMap<>();\n        expectedMaxes.put(-299d, 2d);\n        expectedMaxes.put(3.5d, 4d);\n        expectedMaxes.put(5d, 5d);\n        expectedMaxes.put(1116d, 5400d);\n\n        testSearchCase(DEFAULT_QUERY, dataset, false,\n            aggregation -> aggregation.field(NUMERIC_FIELD) .setNumBuckets(2).setShardSize(4).setInitialBuffer(5),\n            histogram -> {\n                final List<InternalVariableWidthHistogram.Bucket> buckets = histogram.getBuckets();\n                assertEquals(expectedDocCount.size(), buckets.size());\n                buckets.forEach(bucket -> {\n                    assertEquals(expectedDocCount.getOrDefault(bucket.getKey(), 0).longValue(), bucket.getDocCount());\n                    assertEquals(expectedMins.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.min(), doubleError);\n                    assertEquals(expectedMaxes.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.max(), doubleError);\n                });\n            });\n\n    }\n","date":"2020-06-26 22:33:37","endLine":292,"groupId":"15795","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNewBucketLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/1e5abaac3b11635400f66236cf0bd04aa9f1d9.src","preCode":"    public void testNewBucketLimit() throws Exception{\n        final List<Number> dataset =  Arrays.asList(1,2,3,4,5, 10, 20, 50, 100, 5400, -900);\n        double doubleError = 1d / 10000d;\n\n        \r\n        \r\n        final Map<Double, Integer> expectedDocCount = new HashMap<>();\n        expectedDocCount.put(-299d, 3);\n        expectedDocCount.put(3.5d, 2);\n        expectedDocCount.put(5d, 1);\n        expectedDocCount.put(1116d, 5);\n\n        final Map<Double, Double> expectedMins = new HashMap<>();\n        expectedMins.put(-299d, -900d);\n        expectedMins.put(3.5d, 3d);\n        expectedMins.put(5d, 5d);\n        expectedMins.put(1116d, 10d);\n\n        final Map<Double, Double> expectedMaxes = new HashMap<>();\n        expectedMaxes.put(-299d, 2d);\n        expectedMaxes.put(3.5d, 4d);\n        expectedMaxes.put(5d, 5d);\n        expectedMaxes.put(1116d, 5400d);\n\n        testSearchCase(DEFAULT_QUERY, dataset, false,\n            aggregation -> aggregation.field(NUMERIC_FIELD) .setNumBuckets(2).setShardSize(4).setInitialBuffer(5),\n            histogram -> {\n                final List<InternalVariableWidthHistogram.Bucket> buckets = histogram.getBuckets();\n                assertEquals(expectedDocCount.size(), buckets.size());\n                buckets.forEach(bucket -> {\n                    assertEquals(expectedDocCount.getOrDefault(bucket.getKey(), 0).longValue(), bucket.getDocCount());\n                    assertEquals(expectedMins.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.min(), doubleError);\n                    assertEquals(expectedMaxes.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.max(), doubleError);\n                });\n            });\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"B"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"B","submitter":"Nik Everett"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-07-20 22:44:31","commitOrder":2,"curCode":"    public void testMoreClustersThanDocs() throws Exception {\n        final List<Number> dataset = Arrays.asList(-3L, 10L, -200L);\n        double doubleError = 1d / 10000d;\n\n        \r\n        final Map<Double, Integer> expectedDocCount = new HashMap<>();\n        expectedDocCount.put(-200d, 1);\n        expectedDocCount.put(-3d, 1);\n        expectedDocCount.put(10d, 1);\n        final Map<Double, Double> expectedMins = new HashMap<>();\n        expectedMins.put(-200d, -200d);\n        expectedMins.put(-3d, -3d);\n        expectedMins.put(10d, 10d);\n\n        testBothCases(DEFAULT_QUERY, dataset, true,\n            aggregation -> aggregation.field(NUMERIC_FIELD).setNumBuckets(4),\n            histogram -> {\n                final List<InternalVariableWidthHistogram.Bucket> buckets = histogram.getBuckets();\n                assertEquals(expectedDocCount.size(), buckets.size());\n                buckets.forEach(bucket -> {\n                    assertEquals(expectedDocCount.getOrDefault(bucket.getKey(), 0).longValue(), bucket.getDocCount());\n                    assertEquals(expectedMins.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.min(), doubleError);\n                });\n            });\n    }\n","date":"2020-07-20 22:44:31","endLine":100,"groupId":"67965","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMoreClustersThanDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/24e92f6bb0e4c0dd999578bf857f8c841853b9.src","preCode":"    public void testMoreClustersThanDocs() throws Exception {\n        final List<Number> dataset = Arrays.asList(-3L, 10L, -200L);\n        double doubleError = 1d / 10000d;\n\n        \r\n        final Map<Double, Integer> expectedDocCount = new HashMap<>();\n        expectedDocCount.put(-200d, 1);\n        expectedDocCount.put(-3d, 1);\n        expectedDocCount.put(10d, 1);\n        final Map<Double, Double> expectedMins = new HashMap<>();\n        expectedMins.put(-200d, -200d);\n        expectedMins.put(-3d, -3d);\n        expectedMins.put(10d, 10d);\n\n        testBothCases(DEFAULT_QUERY, dataset, true,\n            aggregation -> aggregation.field(NUMERIC_FIELD).setNumBuckets(4).setShardSize(4),\n            histogram -> {\n                final List<InternalVariableWidthHistogram.Bucket> buckets = histogram.getBuckets();\n                assertEquals(expectedDocCount.size(), buckets.size());\n                buckets.forEach(bucket -> {\n                    assertEquals(expectedDocCount.getOrDefault(bucket.getKey(), 0).longValue(), bucket.getDocCount());\n                    assertEquals(expectedMins.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.min(), doubleError);\n                });\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2020-06-26 22:33:37","commitOrder":2,"curCode":"    public void testNewBucketLimit() throws Exception{\n        final List<Number> dataset =  Arrays.asList(1,2,3,4,5, 10, 20, 50, 100, 5400, -900);\n        double doubleError = 1d / 10000d;\n\n        \r\n        \r\n        final Map<Double, Integer> expectedDocCount = new HashMap<>();\n        expectedDocCount.put(-299d, 3);\n        expectedDocCount.put(3.5d, 2);\n        expectedDocCount.put(5d, 1);\n        expectedDocCount.put(1116d, 5);\n\n        final Map<Double, Double> expectedMins = new HashMap<>();\n        expectedMins.put(-299d, -900d);\n        expectedMins.put(3.5d, 3d);\n        expectedMins.put(5d, 5d);\n        expectedMins.put(1116d, 10d);\n\n        final Map<Double, Double> expectedMaxes = new HashMap<>();\n        expectedMaxes.put(-299d, 2d);\n        expectedMaxes.put(3.5d, 4d);\n        expectedMaxes.put(5d, 5d);\n        expectedMaxes.put(1116d, 5400d);\n\n        testSearchCase(DEFAULT_QUERY, dataset, false,\n            aggregation -> aggregation.field(NUMERIC_FIELD) .setNumBuckets(2).setShardSize(4).setInitialBuffer(5),\n            histogram -> {\n                final List<InternalVariableWidthHistogram.Bucket> buckets = histogram.getBuckets();\n                assertEquals(expectedDocCount.size(), buckets.size());\n                buckets.forEach(bucket -> {\n                    assertEquals(expectedDocCount.getOrDefault(bucket.getKey(), 0).longValue(), bucket.getDocCount());\n                    assertEquals(expectedMins.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.min(), doubleError);\n                    assertEquals(expectedMaxes.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.max(), doubleError);\n                });\n            });\n\n    }\n","date":"2020-06-26 22:33:37","endLine":292,"groupId":"15795","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNewBucketLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/1e5abaac3b11635400f66236cf0bd04aa9f1d9.src","preCode":"    public void testNewBucketLimit() throws Exception{\n        final List<Number> dataset =  Arrays.asList(1,2,3,4,5, 10, 20, 50, 100, 5400, -900);\n        double doubleError = 1d / 10000d;\n\n        \r\n        \r\n        final Map<Double, Integer> expectedDocCount = new HashMap<>();\n        expectedDocCount.put(-299d, 3);\n        expectedDocCount.put(3.5d, 2);\n        expectedDocCount.put(5d, 1);\n        expectedDocCount.put(1116d, 5);\n\n        final Map<Double, Double> expectedMins = new HashMap<>();\n        expectedMins.put(-299d, -900d);\n        expectedMins.put(3.5d, 3d);\n        expectedMins.put(5d, 5d);\n        expectedMins.put(1116d, 10d);\n\n        final Map<Double, Double> expectedMaxes = new HashMap<>();\n        expectedMaxes.put(-299d, 2d);\n        expectedMaxes.put(3.5d, 4d);\n        expectedMaxes.put(5d, 5d);\n        expectedMaxes.put(1116d, 5400d);\n\n        testSearchCase(DEFAULT_QUERY, dataset, false,\n            aggregation -> aggregation.field(NUMERIC_FIELD) .setNumBuckets(2).setShardSize(4).setInitialBuffer(5),\n            histogram -> {\n                final List<InternalVariableWidthHistogram.Bucket> buckets = histogram.getBuckets();\n                assertEquals(expectedDocCount.size(), buckets.size());\n                buckets.forEach(bucket -> {\n                    assertEquals(expectedDocCount.getOrDefault(bucket.getKey(), 0).longValue(), bucket.getDocCount());\n                    assertEquals(expectedMins.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.min(), doubleError);\n                    assertEquals(expectedMaxes.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.max(), doubleError);\n                });\n            });\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"N"}],"commitId":"2c5c478875ee5e7534a13fe8c88368602a7ff437","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-20 22:44:31","modifiedFileCount":"143","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-08-07 05:14:20","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":3,"curCode":"    public void testMoreClustersThanDocs() throws Exception {\n        final List<Number> dataset = Arrays.asList(-3L, 10L, -200L);\n        double doubleError = 1d / 10000d;\n\n        \r\n        final Map<Double, Integer> expectedDocCount = new HashMap<>();\n        expectedDocCount.put(-200d, 1);\n        expectedDocCount.put(-3d, 1);\n        expectedDocCount.put(10d, 1);\n        final Map<Double, Double> expectedMins = new HashMap<>();\n        expectedMins.put(-200d, -200d);\n        expectedMins.put(-3d, -3d);\n        expectedMins.put(10d, 10d);\n\n        testSearchCase(DEFAULT_QUERY, dataset, true,\n            aggregation -> aggregation.field(NUMERIC_FIELD).setNumBuckets(4),\n            histogram -> {\n                final List<InternalVariableWidthHistogram.Bucket> buckets = histogram.getBuckets();\n                assertEquals(expectedDocCount.size(), buckets.size());\n                buckets.forEach(bucket -> {\n                    assertEquals(expectedDocCount.getOrDefault(bucket.getKey(), 0).longValue(), bucket.getDocCount());\n                    assertEquals(expectedMins.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.min(), doubleError);\n                });\n            });\n    }\n","date":"2020-08-07 05:14:20","endLine":100,"groupId":"105119","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMoreClustersThanDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/fca52645a2cf360113e8cf97c5d10c8a0986b6.src","preCode":"    public void testMoreClustersThanDocs() throws Exception {\n        final List<Number> dataset = Arrays.asList(-3L, 10L, -200L);\n        double doubleError = 1d / 10000d;\n\n        \r\n        final Map<Double, Integer> expectedDocCount = new HashMap<>();\n        expectedDocCount.put(-200d, 1);\n        expectedDocCount.put(-3d, 1);\n        expectedDocCount.put(10d, 1);\n        final Map<Double, Double> expectedMins = new HashMap<>();\n        expectedMins.put(-200d, -200d);\n        expectedMins.put(-3d, -3d);\n        expectedMins.put(10d, 10d);\n\n        testBothCases(DEFAULT_QUERY, dataset, true,\n            aggregation -> aggregation.field(NUMERIC_FIELD).setNumBuckets(4),\n            histogram -> {\n                final List<InternalVariableWidthHistogram.Bucket> buckets = histogram.getBuckets();\n                assertEquals(expectedDocCount.size(), buckets.size());\n                buckets.forEach(bucket -> {\n                    assertEquals(expectedDocCount.getOrDefault(bucket.getKey(), 0).longValue(), bucket.getDocCount());\n                    assertEquals(expectedMins.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.min(), doubleError);\n                });\n            });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2020-08-07 05:14:20","commitOrder":3,"curCode":"    public void testNewBucketLimit() throws Exception{\n        final List<Number> dataset =  Arrays.asList(1, 2, 3, 4, 5, 10, 20, 50, 100, 5400, -900);\n        double doubleError = 1d / 10000d;\n\n        \r\n        \r\n        final Map<Double, Integer> expectedDocCount = new HashMap<>();\n        expectedDocCount.put(-147.5d, 6);\n        expectedDocCount.put(1116.0d, 5);\n\n        final Map<Double, Double> expectedMins = new HashMap<>();\n        expectedMins.put(-147.5d, -900d);\n        expectedMins.put(1116.0d, 10d);\n\n        final Map<Double, Double> expectedMaxes = new HashMap<>();\n        expectedMaxes.put(-147.5d, 5d);\n        expectedMaxes.put(1116.0d, 5400d);\n\n        testSearchCase(DEFAULT_QUERY, dataset, false,\n            aggregation -> aggregation.field(NUMERIC_FIELD) .setNumBuckets(2).setShardSize(4).setInitialBuffer(5),\n            histogram -> {\n                final List<InternalVariableWidthHistogram.Bucket> buckets = histogram.getBuckets();\n                assertEquals(expectedDocCount.size(), buckets.size());\n                buckets.forEach(bucket -> {\n                    assertEquals(expectedDocCount.getOrDefault(bucket.getKey(), 0).longValue(), bucket.getDocCount());\n                    assertEquals(expectedMins.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.min(), doubleError);\n                    assertEquals(expectedMaxes.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.max(), doubleError);\n                });\n            });\n\n    }\n","date":"2020-08-07 05:14:20","endLine":312,"groupId":"105119","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNewBucketLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/fca52645a2cf360113e8cf97c5d10c8a0986b6.src","preCode":"    public void testNewBucketLimit() throws Exception{\n        final List<Number> dataset =  Arrays.asList(1,2,3,4,5, 10, 20, 50, 100, 5400, -900);\n        double doubleError = 1d / 10000d;\n\n        \r\n        \r\n        final Map<Double, Integer> expectedDocCount = new HashMap<>();\n        expectedDocCount.put(-299d, 3);\n        expectedDocCount.put(3.5d, 2);\n        expectedDocCount.put(5d, 1);\n        expectedDocCount.put(1116d, 5);\n\n        final Map<Double, Double> expectedMins = new HashMap<>();\n        expectedMins.put(-299d, -900d);\n        expectedMins.put(3.5d, 3d);\n        expectedMins.put(5d, 5d);\n        expectedMins.put(1116d, 10d);\n\n        final Map<Double, Double> expectedMaxes = new HashMap<>();\n        expectedMaxes.put(-299d, 2d);\n        expectedMaxes.put(3.5d, 4d);\n        expectedMaxes.put(5d, 5d);\n        expectedMaxes.put(1116d, 5400d);\n\n        testSearchCase(DEFAULT_QUERY, dataset, false,\n            aggregation -> aggregation.field(NUMERIC_FIELD) .setNumBuckets(2).setShardSize(4).setInitialBuffer(5),\n            histogram -> {\n                final List<InternalVariableWidthHistogram.Bucket> buckets = histogram.getBuckets();\n                assertEquals(expectedDocCount.size(), buckets.size());\n                buckets.forEach(bucket -> {\n                    assertEquals(expectedDocCount.getOrDefault(bucket.getKey(), 0).longValue(), bucket.getDocCount());\n                    assertEquals(expectedMins.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.min(), doubleError);\n                    assertEquals(expectedMaxes.getOrDefault(bucket.getKey(), 0d).doubleValue(), bucket.max(), doubleError);\n                });\n            });\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/histogram/VariableWidthHistogramAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"}],"commitId":"5e3ea6eb11c68bdcc9adda51715a6e1fea9186d6","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-07 05:14:20","modifiedFileCount":"73","status":"M","submitter":"Nik Everett"}]
