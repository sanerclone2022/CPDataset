[{"authorTime":"2019-11-28 21:35:35","codes":[{"authorDate":"2019-11-28 21:35:35","commitOrder":9,"curCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(id, new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id),\n                    null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertFinalReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","date":"2019-11-28 21:35:35","endLine":446,"groupId":"29020","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/64/1d5bf2c59b4126abf33225252a40f13163877e.src","preCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(id, new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id),\n                    null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertFinalReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"MB"},{"authorDate":"2019-11-28 21:35:35","commitOrder":9,"curCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int version) {\n                    assertEquals(numReduceListener.incrementAndGet(), version);\n                }\n\n                @Override\n                public void onReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(id, new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id),\n                        null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                        DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertFinalReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","date":"2019-11-28 21:35:35","endLine":841,"groupId":"29020","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProgressListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/64/1d5bf2c59b4126abf33225252a40f13163877e.src","preCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int version) {\n                    assertEquals(numReduceListener.incrementAndGet(), version);\n                }\n\n                @Override\n                public void onReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(id, new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id),\n                        null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                        DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertFinalReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":759,"status":"B"}],"commitId":"cab99c036a665f6864dbb38fdf7059b03b0ea767","commitMessage":"@@@Add a listener to track the progress of a search request locally (#49471)\n\nThis commit adds a function in NodeClient that allows to track the progress\nof a search request locally. Progress is tracked through a SearchProgressListener\nthat exposes query and fetch responses as well as partial and final reduces.\nThis new method can be used by modules/plugins inside a node in order to track the\nprogress of a local search request.\n\nRelates #49091","date":"2019-11-28 21:35:35","modifiedFileCount":"28","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-03-09 23:59:30","codes":[{"authorDate":"2020-03-09 23:59:30","commitOrder":10,"curCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertFinalReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","date":"2020-03-09 23:59:30","endLine":489,"groupId":"29020","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ee/174823f17f6cf4bfc48528252cc6287f993602.src","preCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(id, new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id),\n                    null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertFinalReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"M"},{"authorDate":"2020-03-09 23:59:30","commitOrder":10,"curCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int version) {\n                    assertEquals(numReduceListener.incrementAndGet(), version);\n                }\n\n                @Override\n                public void onReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                        DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertFinalReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","date":"2020-03-09 23:59:30","endLine":884,"groupId":"29020","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProgressListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ee/174823f17f6cf4bfc48528252cc6287f993602.src","preCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int version) {\n                    assertEquals(numReduceListener.incrementAndGet(), version);\n                }\n\n                @Override\n                public void onReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(id, new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id),\n                        null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                        DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertFinalReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":802,"status":"M"}],"commitId":"b2ea32959103b93c03cc487ce475adde792f21e3","commitMessage":"@@@Harden search context id (#53143)\n\nUsing a Long alone is not strong enough for the id of search contexts \nbecause we reset the id generator whenever a data node is restarted.\nThis can lead to two issues:\n\n1. Fetch phase can fetch documents from another index\n2. A scroll search can return documents from another index\n\nThis commit avoids these issues by adding a UUID to SearchContexId.","date":"2020-03-09 23:59:30","modifiedFileCount":"49","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2020-03-10 23:33:15","codes":[{"authorDate":"2020-03-09 23:59:30","commitOrder":11,"curCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertFinalReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","date":"2020-03-09 23:59:30","endLine":489,"groupId":"29020","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ee/174823f17f6cf4bfc48528252cc6287f993602.src","preCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertFinalReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"N"},{"authorDate":"2020-03-10 23:33:15","commitOrder":11,"curCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                        DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertFinalReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","date":"2020-03-10 23:33:15","endLine":884,"groupId":"29020","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testProgressListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/4913896b8483afd8f6793a038e2591e5b05d7a.src","preCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int version) {\n                    assertEquals(numReduceListener.incrementAndGet(), version);\n                }\n\n                @Override\n                public void onReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                        DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertFinalReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":802,"status":"M"}],"commitId":"146b2a85b42220a5f653a543a5107d8f960464d5","commitMessage":"@@@Add new x-pack endpoints to track the progress of a search asynchronously (#49931)\n\n\n High level view\n\nThis change introduces a new API in x-pack basic that allows to track the progress of a search.\nUsers can submit an asynchronous search through a new endpoint called `_async_search` that\nworks exactly the same as the `_search` endpoint but instead of blocking and returning the final response when available.  it returns a response after a provided `wait_for_completion` time.\n\n````\n# Submit an _async_search and waits up to 100ms for a final response\nGET my_index_pattern*/_async_search?wait_for_completion=100ms\n{\n  \"aggs\": {\n    \"date_histogram\": {\n      \"field\": \"@timestamp\". \n      \"fixed_interval\": \"1h\"\n    }\n  }\n}\n````\n\nIf after 100ms the final response is not available.  a `partial_response` is included in the body:\n\n````\n{\n  \"id\": \"9N3J1m4BgyzUDzqgC15b\". \n  \"version\": 1. \n  \"is_running\": true. \n  \"is_partial\": true. \n  \"response\": {\n   \"_shards\": {\n       \"total\": 100. \n       \"successful\": 5. \n       \"failed\": 0\n    }. \n    \"total_hits\": {\n      \"value\": 1653433. \n      \"relation\": \"eq\"\n    }. \n    \"aggs\": {\n      ...\n    }\n  }\n}\n````\n\nThe partial response contains the total number of requested shards.  the number of shards that successfully returned and the number of shards that failed.\nIt also contains the total hits as well as partial aggregations computed from the successful shards.\nTo continue to monitor the progress of the search users can call the get `_async_search` API like the following:\n\n````\nGET _async_search/9N3J1m4BgyzUDzqgC15b/?wait_for_completion=100ms\n````\n\nThat returns a new response that can contain the same partial response than the previous call if the search didn't progress.  in such case the returned `version`\nshould be the same. If new partial results are available.  the version is incremented and the `partial_response` contains the updated progress.\nFinally if the response is fully available while or after waiting for completion.  the `partial_response` is replaced by a `response` section that contains the usual _search response:\n\n````\n{\n  \"id\": \"9N3J1m4BgyzUDzqgC15b\". \n  \"version\": 10. \n  \"is_running\": false. \n  \"response\": {\n     \"is_partial\": false. \n     ...\n  }\n}\n````\n\n## Persistency\n\nAsynchronous search are stored in a restricted index called `.async-search` if they survive (still running) after the initial submit. Each request has a keep alive that defaults to 5 days but this value can be changed/updated any time:\n`````\nGET my_index_pattern*/_async_search?wait_for_completion=100ms&keep_alive=10d\n`````\nThe default can be changed when submitting the search.  the example above raises the default value for the search to `10d`. \n`````\nGET _async_search/9N3J1m4BgyzUDzqgC15b/?wait_for_completion=100ms&keep_alive=10d\n`````\nThe time to live for a specific search can be extended when getting the progress/result. In the example above we extend the keep alive to 10 more days.\nA background service that runs only on the node that holds the first primary shard of the `async-search` index is responsible for deleting the expired results. It runs every hour but the expiration is also checked by running queries (if they take longer than the keep_alive) and when getting a result.\n\nLike a normal `_search`.  if the http channel that is used to submit a request is closed before getting a response.  the search is automatically cancelled. Note that this behavior is only for the submit API.  subsequent GET requests will not cancel if they are closed. \n\n## Resiliency\n\nAsynchronous search are not persistent.  if the coordinator node crashes or is restarted during the search.  the asynchronous search will stop. To know if the search is still running or not the response contains a field called `is_running` that indicates if the task is up or not. It is the responsibility of the user to resume an asynchronous search that didn't reach a final response by re-submitting the query. However final responses and failures are persisted in a system index that allows\nto retrieve a response even if the task finishes.\n\n````\nDELETE _async_search/9N3J1m4BgyzUDzqgC15b\n````\n\nThe response is also not stored if the initial submit action returns a final response. This allows to not add any overhead to queries that completes within the initial `wait_for_completion`.\n\n## Security\n\nThe `.async-search` index is a restricted index (should be migrated to a system index in +8.0) that is accessible only through the async search APIs. These APIs also ensure that only the user that submitted the initial query can retrieve or delete the running search. Note that admins/superusers would still be able to cancel the search task through the task manager like any other tasks.\n\nRelates #49091\n\nCo-authored-by: Luca Cavanna <javanna@users.noreply.github.com>","date":"2020-03-10 23:33:15","modifiedFileCount":"19","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-03-11 21:29:13","codes":[{"authorDate":"2020-03-09 23:59:30","commitOrder":12,"curCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertFinalReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","date":"2020-03-09 23:59:30","endLine":489,"groupId":"29020","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ee/174823f17f6cf4bfc48528252cc6287f993602.src","preCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertFinalReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"N"},{"authorDate":"2020-03-11 21:29:13","commitOrder":12,"curCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                        DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertFinalReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","date":"2020-03-11 21:29:13","endLine":884,"groupId":"29020","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testProgressListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/65487fe59277f875a3cf2926532d0a9949732a.src","preCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                        DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertFinalReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":802,"status":"M"}],"commitId":"99513c0e7a120589b648c26140295f2f6ef86d1f","commitMessage":"@@@Refine SearchProgressListener internal API (#53373)\n\nThe following cumulative improvements have been made:\n- rename `onReduce` and `notifyReduce` to `onFinalReduce` and `notifyFinalReduce`\n- add unit test for `SearchShard`\n- on* methods in `SearchProgressListener` shouldn't need to be public as they should never be called directly.  they only need to be overridden hence they can be made protected. They are actually called directly from a test which required some adapting.  like making `AsyncSearchTask.Listener` class package private instead of private\n- Instead of overriding `getProgressListener` in `AsyncSearchTask`.  as it feels weird to override a getter method.  added a specific method that allows to retrieve the Listener directly without needing to cast it. Made the getter and setter for the listener final in the base class.\n- rename `SearchProgressListener#searchShards` methods to `buildSearchShards` and make it static given that it accesses no instance members\n- make `SearchShard` and `SearchShardTask` classes final\n","date":"2020-03-11 21:29:13","modifiedFileCount":"14","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-03-17 02:51:54","codes":[{"authorDate":"2020-03-17 02:51:54","commitOrder":13,"curCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","date":"2020-03-17 02:51:54","endLine":501,"groupId":"29020","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/73/88d44e6b78575298619018d5783bd7bd5008d8.src","preCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertFinalReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":455,"status":"M"},{"authorDate":"2020-03-17 02:51:54","commitOrder":13,"curCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                        DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","date":"2020-03-17 02:51:54","endLine":902,"groupId":"29020","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testProgressListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/73/88d44e6b78575298619018d5783bd7bd5008d8.src","preCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                        DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertFinalReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":820,"status":"M"}],"commitId":"4d81edb6257732a73adc3e5bc5157ad01d1a42c4","commitMessage":"@@@Stop using round-tripped PipelineAggregators (#53423)\n\nThis begins to clean up how `PipelineAggregator`s and executed.\nPreviously.  we would create the `PipelineAggregator`s on the data nodes\nand embed them in the aggregation tree. When it came time to execute the\npipeline aggregation we'd use the `PipelineAggregator`s that were on the\nfirst shard's results. This is inefficient because:\n1. The data node needs to make the `PipelineAggregator` only to\n   serialize it and then throw it away.\n2. The coordinating node needs to deserialize all of the\n   `PipelineAggregator`s even though it only needs one of them.\n3. You end up with many `PipelineAggregator` instances when you only\n   really *need* one per pipeline.\n4. `PipelineAggregator` needs to implement serialization.\n\nThis begins to undo these by building the `PipelineAggregator`s directly\non the coordinating node and using those instead of the\n`PipelineAggregator`s in the aggregtion tree. In a follow up change\nwe'll stop serializing the `PipelineAggregator`s to node versions that\nsupport this behavior. And.  one day.  we'll be able to remove\n`PipelineAggregator` from the aggregation result tree entirely.\n\nImportantly.  this doesn't change how pipeline aggregations are declared\nor parsed or requested. They are still part of the `AggregationBuilder`\ntree because *that* makes sense.\n","date":"2020-03-17 02:51:54","modifiedFileCount":"35","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-04-02 22:39:30","codes":[{"authorDate":"2020-04-02 22:39:30","commitOrder":14,"curCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","date":"2020-04-02 22:39:30","endLine":501,"groupId":"29020","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/ed48cc4c0f8a60764005bff0c05162e5025f0e.src","preCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":455,"status":"M"},{"authorDate":"2020-04-02 22:39:30","commitOrder":14,"curCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(\n                        new InternalMax(\"test\", (double) number, DocValueFormat.RAW, Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","date":"2020-04-02 22:39:30","endLine":902,"groupId":"29020","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testProgressListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/ed48cc4c0f8a60764005bff0c05162e5025f0e.src","preCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                        DocValueFormat.RAW, Collections.emptyList(), Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":820,"status":"M"}],"commitId":"dbe9b48b830c4aea5c59abac322e77ca5f98a8af","commitMessage":"@@@Begin to drop pipeline aggs from the result tree (#54311)\n\nRemoves pipeline aggregations from the aggregation result tree as they\nare no longer used. This stops us from building the pipeline aggregators\nat all on data nodes except for backwards compatibility serialization.\nThis will save a tiny bit of space in the aggregation tree which is\nlovely.  but the biggest benefit is that it is a step towards simplifying\npipeline aggregators.\n\nThis only does about half of the work to remove the pipeline aggs from\nthe tree. Removing all of it would.  well.  double the size of the change\nand make it harder to review.\n","date":"2020-04-02 22:39:30","modifiedFileCount":"158","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-04-29 00:54:29","codes":[{"authorDate":"2020-04-02 22:39:30","commitOrder":15,"curCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","date":"2020-04-02 22:39:30","endLine":501,"groupId":"29020","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/ed48cc4c0f8a60764005bff0c05162e5025f0e.src","preCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":455,"status":"N"},{"authorDate":"2020-04-29 00:54:29","commitOrder":15,"curCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits,\n                        DelayableWriteable.Serialized<InternalAggregations> aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(\n                        new InternalMax(\"test\", (double) number, DocValueFormat.RAW, Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","date":"2020-04-29 00:54:29","endLine":913,"groupId":"29020","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testProgressListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/48/1a907d4ebc21e474a765ec84bd9d0368dd7c83.src","preCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(\n                        new InternalMax(\"test\", (double) number, DocValueFormat.RAW, Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":830,"status":"M"}],"commitId":"55874c94e47ed12d066cfeb03af761411e235b2b","commitMessage":"@@@Save memory in on aggs in async search (#55683)\n\nThis replaces a reference to the result of partially reducing\naggregations that async search keeps with a reference to the serialized\nform of the result of the partial reduction which we need to keep\nanyway.\n","date":"2020-04-29 00:54:29","modifiedFileCount":"7","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-07-02 18:25:49","codes":[{"authorDate":"2020-07-02 18:25:49","commitOrder":16,"curCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","date":"2020-07-02 18:25:49","endLine":511,"groupId":"29020","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/51/b7efea3c6e8192775d4eb86426840c2c7e164f.src","preCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = new InternalAggregations(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":465,"status":"M"},{"authorDate":"2020-07-02 18:25:49","commitOrder":16,"curCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits,\n                        DelayableWriteable.Serialized<InternalAggregations> aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(\n                        new InternalMax(\"test\", (double) number, DocValueFormat.RAW, Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","date":"2020-07-02 18:25:49","endLine":913,"groupId":"29020","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testProgressListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/51/b7efea3c6e8192775d4eb86426840c2c7e164f.src","preCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits,\n                        DelayableWriteable.Serialized<InternalAggregations> aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = new InternalAggregations(Collections.singletonList(\n                        new InternalMax(\"test\", (double) number, DocValueFormat.RAW, Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":830,"status":"M"}],"commitId":"59fc3d74d58c390828267569022ac177e77ffbd1","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-02 18:25:49","modifiedFileCount":"724","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-07-29 01:14:40","codes":[{"authorDate":"2020-07-29 01:14:40","commitOrder":17,"curCode":"    public void testConsumerConcurrently() throws Exception {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n                NOOP, request, expectedNumResults, exc  -> {});\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        CountDownLatch latch = new CountDownLatch(expectedNumResults);\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result, latch::countDown);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        latch.await();\n\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","date":"2020-07-29 01:42:59","endLine":549,"groupId":"41131","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/bd5f60135a699267473deddc1f50b3b2518c98.src","preCode":"    public void testConsumerConcurrently() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer =\n            searchPhaseController.newSearchPhaseResults(NOOP, request, expectedNumResults);\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"M"},{"authorDate":"2020-07-29 01:14:40","commitOrder":17,"curCode":"    public void testProgressListener() throws Exception {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits,\n                        DelayableWriteable.Serialized<InternalAggregations> aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n                progressListener, request, expectedNumResults, exc  -> {});\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            CountDownLatch latch = new CountDownLatch(expectedNumResults);\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(\n                        new InternalMax(\"test\", (double) number, DocValueFormat.RAW, Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result, latch::countDown);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            latch.await();\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","date":"2020-07-29 01:42:59","endLine":932,"groupId":"41131","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testProgressListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/bd5f60135a699267473deddc1f50b3b2518c98.src","preCode":"    public void testProgressListener() throws InterruptedException {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits,\n                        DelayableWriteable.Serialized<InternalAggregations> aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    numReduceListener.incrementAndGet();\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer =\n                searchPhaseController.newSearchPhaseResults(progressListener, request, expectedNumResults);\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(\n                        new InternalMax(\"test\", (double) number, DocValueFormat.RAW, Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":847,"status":"M"}],"commitId":"e3bbb3bed4ed9430ab43eb4a3e8276ae503c13ab","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-29 01:42:59","modifiedFileCount":"261","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-08-27 20:29:24","codes":[{"authorDate":"2020-08-27 20:29:24","commitOrder":18,"curCode":"    public void testConsumerConcurrently() throws Exception {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n                NOOP, request, expectedNumResults, exc  -> {});\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        CountDownLatch latch = new CountDownLatch(expectedNumResults);\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new ShardSearchContextId(\"\", id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE), null);\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result, latch::countDown);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        latch.await();\n\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","date":"2020-08-27 20:29:24","endLine":549,"groupId":"41131","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/6de3fc7c0c7bcc04c8d9e9c08f26bdfa1cdfd2.src","preCode":"    public void testConsumerConcurrently() throws Exception {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n                NOOP, request, expectedNumResults, exc  -> {});\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        CountDownLatch latch = new CountDownLatch(expectedNumResults);\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result, latch::countDown);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        latch.await();\n\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"M"},{"authorDate":"2020-08-27 20:29:24","commitOrder":18,"curCode":"    public void testProgressListener() throws Exception {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits,\n                        DelayableWriteable.Serialized<InternalAggregations> aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n                progressListener, request, expectedNumResults, exc  -> {});\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            CountDownLatch latch = new CountDownLatch(expectedNumResults);\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new ShardSearchContextId(\"\", id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE), null);\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(\n                        new InternalMax(\"test\", (double) number, DocValueFormat.RAW, Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result, latch::countDown);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            latch.await();\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","date":"2020-08-27 20:29:24","endLine":932,"groupId":"41131","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testProgressListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/6de3fc7c0c7bcc04c8d9e9c08f26bdfa1cdfd2.src","preCode":"    public void testProgressListener() throws Exception {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits,\n                        DelayableWriteable.Serialized<InternalAggregations> aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n                progressListener, request, expectedNumResults, exc  -> {});\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            CountDownLatch latch = new CountDownLatch(expectedNumResults);\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new SearchContextId(UUIDs.randomBase64UUID(), id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE));\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(\n                        new InternalMax(\"test\", (double) number, DocValueFormat.RAW, Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result, latch::countDown);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            latch.await();\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":847,"status":"M"}],"commitId":"0a3d3919a141e6e3c9bbddc43d046a4c9211b6be","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-27 20:29:24","modifiedFileCount":"256","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-09-03 15:51:57","codes":[{"authorDate":"2020-08-27 20:29:24","commitOrder":19,"curCode":"    public void testConsumerConcurrently() throws Exception {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n                NOOP, request, expectedNumResults, exc  -> {});\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        CountDownLatch latch = new CountDownLatch(expectedNumResults);\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new ShardSearchContextId(\"\", id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE), null);\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result, latch::countDown);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        latch.await();\n\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","date":"2020-08-27 20:29:24","endLine":549,"groupId":"41131","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/6de3fc7c0c7bcc04c8d9e9c08f26bdfa1cdfd2.src","preCode":"    public void testConsumerConcurrently() throws Exception {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n                NOOP, request, expectedNumResults, exc  -> {});\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        CountDownLatch latch = new CountDownLatch(expectedNumResults);\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new ShardSearchContextId(\"\", id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE), null);\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result, latch::countDown);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        latch.await();\n\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"N"},{"authorDate":"2020-09-03 15:51:57","commitOrder":19,"curCode":"    public void testProgressListener() throws Exception {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits,\n                        DelayableWriteable.Serialized<InternalAggregations> aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n            };\n            QueryPhaseResultConsumer consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n                progressListener, request, expectedNumResults, exc  -> {});\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            CountDownLatch latch = new CountDownLatch(expectedNumResults);\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new ShardSearchContextId(\"\", id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE), null);\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(\n                        new InternalMax(\"test\", (double) number, DocValueFormat.RAW, Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result, latch::countDown);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            latch.await();\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","date":"2020-09-03 15:51:57","endLine":932,"groupId":"34297","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testProgressListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/635491ce60262f7303557c0cd2b8c633216ed0.src","preCode":"    public void testProgressListener() throws Exception {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits,\n                        DelayableWriteable.Serialized<InternalAggregations> aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n            };\n            ArraySearchPhaseResults<SearchPhaseResult> consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n                progressListener, request, expectedNumResults, exc  -> {});\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            CountDownLatch latch = new CountDownLatch(expectedNumResults);\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new ShardSearchContextId(\"\", id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE), null);\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(\n                        new InternalMax(\"test\", (double) number, DocValueFormat.RAW, Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result, latch::countDown);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            latch.await();\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":847,"status":"M"}],"commitId":"60cda2a311f60e4d1d05cfde1347ef53558861ca","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-09-03 15:51:57","modifiedFileCount":"59","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-09-24 20:02:49","codes":[{"authorDate":"2020-09-24 20:02:49","commitOrder":20,"curCode":"    public void testConsumerConcurrently() throws Exception {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n            new NoopCircuitBreaker(CircuitBreaker.REQUEST), SearchProgressListener.NOOP,\n            request, expectedNumResults, exc  -> {});\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        CountDownLatch latch = new CountDownLatch(expectedNumResults);\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new ShardSearchContextId(\"\", id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE), null);\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result, latch::countDown);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        latch.await();\n\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","date":"2020-09-24 20:02:49","endLine":547,"groupId":"105812","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConcurrently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2e/a120c9b1e8c1c27848036bcb68d3ef443e1dd8.src","preCode":"    public void testConsumerConcurrently() throws Exception {\n        int expectedNumResults = randomIntBetween(1, 100);\n        int bufferSize = randomIntBetween(2, 200);\n\n        SearchRequest request = randomSearchRequest();\n        request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n        request.setBatchedReduceSize(bufferSize);\n        ArraySearchPhaseResults<SearchPhaseResult> consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n                NOOP, request, expectedNumResults, exc  -> {});\n        AtomicInteger max = new AtomicInteger();\n        Thread[] threads = new Thread[expectedNumResults];\n        CountDownLatch latch = new CountDownLatch(expectedNumResults);\n        for (int i = 0; i < expectedNumResults; i++) {\n            int id = i;\n            threads[i] = new Thread(() -> {\n                int number = randomIntBetween(1, 1000);\n                max.updateAndGet(prev -> Math.max(prev, number));\n                QuerySearchResult result = new QuerySearchResult(new ShardSearchContextId(\"\", id),\n                    new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE), null);\n                result.topDocs(new TopDocsAndMaxScore(\n                    new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[] {new ScoreDoc(0, number)}), number),\n                    new DocValueFormat[0]);\n                InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(new InternalMax(\"test\", (double) number,\n                    DocValueFormat.RAW, Collections.emptyMap())));\n                result.aggregations(aggs);\n                result.setShardIndex(id);\n                result.size(1);\n                consumer.consumeResult(result, latch::countDown);\n\n            });\n            threads[i].start();\n        }\n        for (int i = 0; i < expectedNumResults; i++) {\n            threads[i].join();\n        }\n        latch.await();\n\n        SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n        assertAggReduction(request);\n        InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n        assertEquals(max.get(), internalMax.getValue(), 0.0D);\n        assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n        assertEquals(max.get(), reduce.maxScore, 0.0f);\n        assertEquals(expectedNumResults, reduce.totalHits.value);\n        assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n        assertFalse(reduce.sortedTopDocs.isSortedByField);\n        assertNull(reduce.sortedTopDocs.sortFields);\n        assertNull(reduce.sortedTopDocs.collapseField);\n        assertNull(reduce.sortedTopDocs.collapseValues);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":497,"status":"M"},{"authorDate":"2020-09-24 20:02:49","commitOrder":20,"curCode":"    public void testProgressListener() throws Exception {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits,\n                                            InternalAggregations aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n            };\n            QueryPhaseResultConsumer consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n                new NoopCircuitBreaker(CircuitBreaker.REQUEST), progressListener, request, expectedNumResults, exc  -> {});\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            CountDownLatch latch = new CountDownLatch(expectedNumResults);\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new ShardSearchContextId(\"\", id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE), null);\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(\n                        new InternalMax(\"test\", (double) number, DocValueFormat.RAW, Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result, latch::countDown);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            latch.await();\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","date":"2020-09-24 20:02:49","endLine":936,"groupId":"105812","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testProgressListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2e/a120c9b1e8c1c27848036bcb68d3ef443e1dd8.src","preCode":"    public void testProgressListener() throws Exception {\n        int expectedNumResults = randomIntBetween(10, 100);\n        for (int bufferSize : new int[] {expectedNumResults, expectedNumResults/2, expectedNumResults/4, 2}) {\n            SearchRequest request = randomSearchRequest();\n            request.source(new SearchSourceBuilder().aggregation(AggregationBuilders.avg(\"foo\")));\n            request.setBatchedReduceSize(bufferSize);\n            AtomicInteger numQueryResultListener = new AtomicInteger();\n            AtomicInteger numQueryFailureListener = new AtomicInteger();\n            AtomicInteger numReduceListener = new AtomicInteger();\n            AtomicReference<InternalAggregations> finalAggsListener = new AtomicReference<>();\n            AtomicReference<TotalHits> totalHitsListener = new AtomicReference<>();\n            SearchProgressListener progressListener = new SearchProgressListener() {\n                @Override\n                public void onQueryResult(int shardIndex) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryResultListener.incrementAndGet();\n                }\n\n                @Override\n                public void onQueryFailure(int shardIndex, SearchShardTarget shardTarget, Exception exc) {\n                    assertThat(shardIndex, lessThan(expectedNumResults));\n                    numQueryFailureListener.incrementAndGet();\n                }\n\n                @Override\n                public void onPartialReduce(List<SearchShard> shards, TotalHits totalHits,\n                        DelayableWriteable.Serialized<InternalAggregations> aggs, int reducePhase) {\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n\n                @Override\n                public void onFinalReduce(List<SearchShard> shards, TotalHits totalHits, InternalAggregations aggs, int reducePhase) {\n                    totalHitsListener.set(totalHits);\n                    finalAggsListener.set(aggs);\n                    assertEquals(numReduceListener.incrementAndGet(), reducePhase);\n                }\n            };\n            QueryPhaseResultConsumer consumer = searchPhaseController.newSearchPhaseResults(fixedExecutor,\n                progressListener, request, expectedNumResults, exc  -> {});\n            AtomicInteger max = new AtomicInteger();\n            Thread[] threads = new Thread[expectedNumResults];\n            CountDownLatch latch = new CountDownLatch(expectedNumResults);\n            for (int i = 0; i < expectedNumResults; i++) {\n                int id = i;\n                threads[i] = new Thread(() -> {\n                    int number = randomIntBetween(1, 1000);\n                    max.updateAndGet(prev -> Math.max(prev, number));\n                    QuerySearchResult result = new QuerySearchResult(new ShardSearchContextId(\"\", id),\n                        new SearchShardTarget(\"node\", new ShardId(\"a\", \"b\", id), null, OriginalIndices.NONE), null);\n                    result.topDocs(new TopDocsAndMaxScore(\n                            new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, number)}), number),\n                        new DocValueFormat[0]);\n                    InternalAggregations aggs = InternalAggregations.from(Collections.singletonList(\n                        new InternalMax(\"test\", (double) number, DocValueFormat.RAW, Collections.emptyMap())));\n                    result.aggregations(aggs);\n                    result.setShardIndex(id);\n                    result.size(1);\n                    consumer.consumeResult(result, latch::countDown);\n                });\n                threads[i].start();\n            }\n            for (int i = 0; i < expectedNumResults; i++) {\n                threads[i].join();\n            }\n            latch.await();\n            SearchPhaseController.ReducedQueryPhase reduce = consumer.reduce();\n            assertAggReduction(request);\n            InternalMax internalMax = (InternalMax) reduce.aggregations.asList().get(0);\n            assertEquals(max.get(), internalMax.getValue(), 0.0D);\n            assertEquals(1, reduce.sortedTopDocs.scoreDocs.length);\n            assertEquals(max.get(), reduce.maxScore, 0.0f);\n            assertEquals(expectedNumResults, reduce.totalHits.value);\n            assertEquals(max.get(), reduce.sortedTopDocs.scoreDocs[0].score, 0.0f);\n            assertFalse(reduce.sortedTopDocs.isSortedByField);\n            assertNull(reduce.sortedTopDocs.sortFields);\n            assertNull(reduce.sortedTopDocs.collapseField);\n            assertNull(reduce.sortedTopDocs.collapseValues);\n\n            assertEquals(reduce.aggregations, finalAggsListener.get());\n            assertEquals(reduce.totalHits, totalHitsListener.get());\n\n            assertEquals(expectedNumResults, numQueryResultListener.get());\n            assertEquals(0, numQueryFailureListener.get());\n            assertEquals(numReduceListener.get(), reduce.numReducePhases);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchPhaseControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":851,"status":"M"}],"commitId":"fbed2a1709c7657a1104379fba5687d7f94d0afa","commitMessage":"@@@Request-level circuit breaker support on coordinating nodes (#62223)\n\nThis commit allows coordinating node to account the memory used to perform partial and final reduce of\naggregations in the request circuit breaker. The search coordinator adds the memory that it used to save\nand reduce the results of shard aggregations in the request circuit breaker. Before any partial or final\nreduce.  the memory needed to reduce the aggregations is estimated and a CircuitBreakingException} is thrown\nif exceeds the maximum memory allowed in this breaker.\nThis size is estimated as roughly 1.5 times the size of the serialized aggregations that need to be reduced.\nThis estimation can be completely off for some aggregations but it is corrected with the real size after\nthe reduce completes.\nIf the reduce is successful.  we update the circuit breaker to remove the size of the source aggregations\nand replace the estimation with the serialized size of the newly reduced result.\n\nAs a follow up we could trigger partial reduces based on the memory accounted in the circuit breaker instead\nof relying on a static number of shard responses. A simpler follow up that could be done in the mean time is\nto [reduce the default batch reduce size](https://github.com/elastic/elasticsearch/issues/51857) of blocking\nsearch request to a more sane number.\n\nCloses #37182","date":"2020-09-24 20:02:49","modifiedFileCount":"25","status":"M","submitter":"Jim Ferenczi"}]
