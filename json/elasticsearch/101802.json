[{"authorTime":"2019-08-10 01:22:00","codes":[{"authorDate":"2019-08-10 01:22:00","commitOrder":1,"curCode":"    public void testBasicSerialization() throws IOException, ParseException {\n        WellKnownText wkt = new WellKnownText(true, new GeographyValidator(true));\n        assertEquals(\"point (20.0 10.0)\", wkt.toWKT(new Point(20, 10)));\n        assertEquals(new Point(20, 10), wkt.fromWKT(\"point (20.0 10.0)\"));\n\n        assertEquals(\"point (20.0 10.0 100.0)\", wkt.toWKT(new Point(20, 10, 100)));\n        assertEquals(new Point(20, 10, 100), wkt.fromWKT(\"point (20.0 10.0 100.0)\"));\n\n        assertEquals(\"point EMPTY\", wkt.toWKT(Point.EMPTY));\n        assertEquals(Point.EMPTY, wkt.fromWKT(\"point EMPTY)\"));\n    }\n","date":"2019-08-10 01:22:00","endLine":47,"groupId":"50500","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/70/920aac49b8816d06febc4646fa57b653804e8e.src","preCode":"    public void testBasicSerialization() throws IOException, ParseException {\n        WellKnownText wkt = new WellKnownText(true, new GeographyValidator(true));\n        assertEquals(\"point (20.0 10.0)\", wkt.toWKT(new Point(20, 10)));\n        assertEquals(new Point(20, 10), wkt.fromWKT(\"point (20.0 10.0)\"));\n\n        assertEquals(\"point (20.0 10.0 100.0)\", wkt.toWKT(new Point(20, 10, 100)));\n        assertEquals(new Point(20, 10, 100), wkt.fromWKT(\"point (20.0 10.0 100.0)\"));\n\n        assertEquals(\"point EMPTY\", wkt.toWKT(Point.EMPTY));\n        assertEquals(Point.EMPTY, wkt.fromWKT(\"point EMPTY)\"));\n    }\n","realPath":"libs/geo/src/test/java/org/elasticsearch/geometry/PointTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"},{"authorDate":"2019-08-10 01:22:00","commitOrder":1,"curCode":"    public void testBasicSerialization() throws IOException, ParseException {\n        WellKnownText wkt = new WellKnownText(true, new GeographyValidator(true));\n        assertEquals(\"multipoint (2.0 1.0)\", wkt.toWKT(\n            new MultiPoint(Collections.singletonList(new Point(2, 1)))));\n        assertEquals(new MultiPoint(Collections.singletonList(new Point(2, 1))),\n            wkt.fromWKT(\"multipoint (2 1)\"));\n\n        assertEquals(\"multipoint (2.0 1.0, 3.0 4.0)\",\n            wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2, 1), new Point(3, 4)))));\n        assertEquals(new MultiPoint(Arrays.asList(new Point(2, 1), new Point(3, 4))),\n            wkt.fromWKT(\"multipoint (2 1, 3 4)\"));\n\n        assertEquals(\"multipoint (2.0 1.0 10.0, 3.0 4.0 20.0)\",\n            wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2, 1, 10), new Point(3, 4, 20)))));\n        assertEquals(new MultiPoint(Arrays.asList(new Point(2, 1, 10), new Point(3, 4, 20))),\n            wkt.fromWKT(\"multipoint (2 1 10, 3 4 20)\"));\n\n        assertEquals(\"multipoint EMPTY\", wkt.toWKT(MultiPoint.EMPTY));\n        assertEquals(MultiPoint.EMPTY, wkt.fromWKT(\"multipoint EMPTY)\"));\n    }\n","date":"2019-08-10 01:22:00","endLine":65,"groupId":"49932","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasicSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/9801279ee174b11c2af761dd91270db1147555.src","preCode":"    public void testBasicSerialization() throws IOException, ParseException {\n        WellKnownText wkt = new WellKnownText(true, new GeographyValidator(true));\n        assertEquals(\"multipoint (2.0 1.0)\", wkt.toWKT(\n            new MultiPoint(Collections.singletonList(new Point(2, 1)))));\n        assertEquals(new MultiPoint(Collections.singletonList(new Point(2, 1))),\n            wkt.fromWKT(\"multipoint (2 1)\"));\n\n        assertEquals(\"multipoint (2.0 1.0, 3.0 4.0)\",\n            wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2, 1), new Point(3, 4)))));\n        assertEquals(new MultiPoint(Arrays.asList(new Point(2, 1), new Point(3, 4))),\n            wkt.fromWKT(\"multipoint (2 1, 3 4)\"));\n\n        assertEquals(\"multipoint (2.0 1.0 10.0, 3.0 4.0 20.0)\",\n            wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2, 1, 10), new Point(3, 4, 20)))));\n        assertEquals(new MultiPoint(Arrays.asList(new Point(2, 1, 10), new Point(3, 4, 20))),\n            wkt.fromWKT(\"multipoint (2 1 10, 3 4 20)\"));\n\n        assertEquals(\"multipoint EMPTY\", wkt.toWKT(MultiPoint.EMPTY));\n        assertEquals(MultiPoint.EMPTY, wkt.fromWKT(\"multipoint EMPTY)\"));\n    }\n","realPath":"libs/geo/src/test/java/org/elasticsearch/geometry/MultiPointTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"}],"commitId":"13a8835e5a8615aeb8304b48fd9e543a83361e13","commitMessage":"@@@Geo: Change order of parameter in Geometries to lon.  lat (#45332)\n\nChanges the order of parameters in Geometries from lat.  lon to lon.  lat\nand moves all Geometry classes are moved to the\norg.elasticsearch.geomtery package.\n\nCloses #45048","date":"2019-08-10 01:22:00","modifiedFileCount":"65","status":"B","submitter":"Igor Motov"},{"authorTime":"2019-12-19 01:28:56","codes":[{"authorDate":"2019-12-19 01:28:56","commitOrder":2,"curCode":"    public void testBasicSerialization() throws IOException, ParseException {\n        WellKnownText wkt = new WellKnownText(true, new GeographyValidator(true));\n        assertEquals(\"POINT (20.0 10.0)\", wkt.toWKT(new Point(20, 10)));\n        assertEquals(new Point(20, 10), wkt.fromWKT(\"point (20.0 10.0)\"));\n\n        assertEquals(\"POINT (20.0 10.0 100.0)\", wkt.toWKT(new Point(20, 10, 100)));\n        assertEquals(new Point(20, 10, 100), wkt.fromWKT(\"POINT (20.0 10.0 100.0)\"));\n\n        assertEquals(\"POINT EMPTY\", wkt.toWKT(Point.EMPTY));\n        assertEquals(Point.EMPTY, wkt.fromWKT(\"POINT EMPTY)\"));\n    }\n","date":"2019-12-19 01:28:56","endLine":47,"groupId":"50500","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/79/c9371e58ce6591ff384fc92cfe318f113f55a0.src","preCode":"    public void testBasicSerialization() throws IOException, ParseException {\n        WellKnownText wkt = new WellKnownText(true, new GeographyValidator(true));\n        assertEquals(\"point (20.0 10.0)\", wkt.toWKT(new Point(20, 10)));\n        assertEquals(new Point(20, 10), wkt.fromWKT(\"point (20.0 10.0)\"));\n\n        assertEquals(\"point (20.0 10.0 100.0)\", wkt.toWKT(new Point(20, 10, 100)));\n        assertEquals(new Point(20, 10, 100), wkt.fromWKT(\"point (20.0 10.0 100.0)\"));\n\n        assertEquals(\"point EMPTY\", wkt.toWKT(Point.EMPTY));\n        assertEquals(Point.EMPTY, wkt.fromWKT(\"point EMPTY)\"));\n    }\n","realPath":"libs/geo/src/test/java/org/elasticsearch/geometry/PointTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2019-12-19 01:28:56","commitOrder":2,"curCode":"    public void testBasicSerialization() throws IOException, ParseException {\n        WellKnownText wkt = new WellKnownText(true, new GeographyValidator(true));\n        assertEquals(\"MULTIPOINT (2.0 1.0)\", wkt.toWKT(\n            new MultiPoint(Collections.singletonList(new Point(2, 1)))));\n        assertEquals(new MultiPoint(Collections.singletonList(new Point(2, 1))),\n            wkt.fromWKT(\"MULTIPOINT (2 1)\"));\n\n        assertEquals(\"MULTIPOINT (2.0 1.0, 3.0 4.0)\",\n            wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2, 1), new Point(3, 4)))));\n        assertEquals(new MultiPoint(Arrays.asList(new Point(2, 1), new Point(3, 4))),\n            wkt.fromWKT(\"MULTIPOINT (2 1, 3 4)\"));\n\n        assertEquals(\"MULTIPOINT (2.0 1.0 10.0, 3.0 4.0 20.0)\",\n            wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2, 1, 10), new Point(3, 4, 20)))));\n        assertEquals(new MultiPoint(Arrays.asList(new Point(2, 1, 10), new Point(3, 4, 20))),\n            wkt.fromWKT(\"MULTIPOINT (2 1 10, 3 4 20)\"));\n\n        assertEquals(\"MULTIPOINT EMPTY\", wkt.toWKT(MultiPoint.EMPTY));\n        assertEquals(MultiPoint.EMPTY, wkt.fromWKT(\"MULTIPOINT EMPTY)\"));\n    }\n","date":"2019-12-19 01:28:56","endLine":65,"groupId":"49932","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasicSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c5/12603d0b7624f62e59c7093bb6fabd959bc153.src","preCode":"    public void testBasicSerialization() throws IOException, ParseException {\n        WellKnownText wkt = new WellKnownText(true, new GeographyValidator(true));\n        assertEquals(\"multipoint (2.0 1.0)\", wkt.toWKT(\n            new MultiPoint(Collections.singletonList(new Point(2, 1)))));\n        assertEquals(new MultiPoint(Collections.singletonList(new Point(2, 1))),\n            wkt.fromWKT(\"multipoint (2 1)\"));\n\n        assertEquals(\"multipoint (2.0 1.0, 3.0 4.0)\",\n            wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2, 1), new Point(3, 4)))));\n        assertEquals(new MultiPoint(Arrays.asList(new Point(2, 1), new Point(3, 4))),\n            wkt.fromWKT(\"multipoint (2 1, 3 4)\"));\n\n        assertEquals(\"multipoint (2.0 1.0 10.0, 3.0 4.0 20.0)\",\n            wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2, 1, 10), new Point(3, 4, 20)))));\n        assertEquals(new MultiPoint(Arrays.asList(new Point(2, 1, 10), new Point(3, 4, 20))),\n            wkt.fromWKT(\"multipoint (2 1 10, 3 4 20)\"));\n\n        assertEquals(\"multipoint EMPTY\", wkt.toWKT(MultiPoint.EMPTY));\n        assertEquals(MultiPoint.EMPTY, wkt.fromWKT(\"multipoint EMPTY)\"));\n    }\n","realPath":"libs/geo/src/test/java/org/elasticsearch/geometry/MultiPointTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"a26e4d1e5e17d9033ba1bb1d3272cdee8709d8bd","commitMessage":"@@@Geo: Switch generated WKT to upper case (#50285)\n\nSwitches generated WKT to upper case to\nconform to the standard recommendation.\n\nRelates #49568\n","date":"2019-12-19 01:28:56","modifiedFileCount":"14","status":"M","submitter":"Igor Motov"},{"authorTime":"2021-06-17 05:31:31","codes":[{"authorDate":"2021-06-17 05:31:31","commitOrder":3,"curCode":"    public void testBasicSerialization() throws IOException, ParseException {\n        GeometryValidator validator = GeographyValidator.instance(true);\n        assertEquals(\"POINT (20.0 10.0)\", WellKnownText.toWKT(new Point(20, 10)));\n        assertEquals(new Point(20, 10), WellKnownText.fromWKT(validator, true, \"point (20.0 10.0)\"));\n\n        assertEquals(\"POINT (20.0 10.0 100.0)\", WellKnownText.toWKT(new Point(20, 10, 100)));\n        assertEquals(new Point(20, 10, 100), WellKnownText.fromWKT(validator, true, \"POINT (20.0 10.0 100.0)\"));\n\n        assertEquals(\"POINT EMPTY\", WellKnownText.toWKT(Point.EMPTY));\n        assertEquals(Point.EMPTY, WellKnownText.fromWKT(validator, true, \"POINT EMPTY)\"));\n    }\n","date":"2021-06-17 05:31:31","endLine":36,"groupId":"101802","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testBasicSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/35f658d48a59fc2216ecb2b2efaee0d0c7cd39.src","preCode":"    public void testBasicSerialization() throws IOException, ParseException {\n        WellKnownText wkt = new WellKnownText(true, new GeographyValidator(true));\n        assertEquals(\"POINT (20.0 10.0)\", wkt.toWKT(new Point(20, 10)));\n        assertEquals(new Point(20, 10), wkt.fromWKT(\"point (20.0 10.0)\"));\n\n        assertEquals(\"POINT (20.0 10.0 100.0)\", wkt.toWKT(new Point(20, 10, 100)));\n        assertEquals(new Point(20, 10, 100), wkt.fromWKT(\"POINT (20.0 10.0 100.0)\"));\n\n        assertEquals(\"POINT EMPTY\", wkt.toWKT(Point.EMPTY));\n        assertEquals(Point.EMPTY, wkt.fromWKT(\"POINT EMPTY)\"));\n    }\n","realPath":"libs/geo/src/test/java/org/elasticsearch/geometry/PointTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":26,"status":"M"},{"authorDate":"2021-06-17 05:31:31","commitOrder":3,"curCode":"    public void testBasicSerialization() throws IOException, ParseException {\n        GeometryValidator validator = GeographyValidator.instance(true);\n        assertEquals(\"MULTIPOINT (2.0 1.0)\", WellKnownText.toWKT(\n            new MultiPoint(Collections.singletonList(new Point(2, 1)))));\n        assertEquals(new MultiPoint(Collections.singletonList(new Point(2, 1))),\n            WellKnownText.fromWKT(validator, true, \"MULTIPOINT (2 1)\"));\n\n        assertEquals(\"MULTIPOINT (2.0 1.0, 3.0 4.0)\",\n            WellKnownText.toWKT(new MultiPoint(Arrays.asList(new Point(2, 1), new Point(3, 4)))));\n        assertEquals(new MultiPoint(Arrays.asList(new Point(2, 1), new Point(3, 4))),\n            WellKnownText.fromWKT(validator, true, \"MULTIPOINT (2 1, 3 4)\"));\n\n        assertEquals(\"MULTIPOINT (2.0 1.0 10.0, 3.0 4.0 20.0)\",\n            WellKnownText.toWKT(new MultiPoint(Arrays.asList(new Point(2, 1, 10), new Point(3, 4, 20)))));\n        assertEquals(new MultiPoint(Arrays.asList(new Point(2, 1, 10), new Point(3, 4, 20))),\n            WellKnownText.fromWKT(validator, true, \"MULTIPOINT (2 1 10, 3 4 20)\"));\n\n        assertEquals(\"MULTIPOINT EMPTY\", WellKnownText.toWKT(MultiPoint.EMPTY));\n        assertEquals(MultiPoint.EMPTY, WellKnownText.fromWKT(validator, true, \"MULTIPOINT EMPTY)\"));\n    }\n","date":"2021-06-17 05:31:31","endLine":55,"groupId":"101802","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testBasicSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/39/199a9171bd933f84454d8579e5c782a3a677c0.src","preCode":"    public void testBasicSerialization() throws IOException, ParseException {\n        WellKnownText wkt = new WellKnownText(true, new GeographyValidator(true));\n        assertEquals(\"MULTIPOINT (2.0 1.0)\", wkt.toWKT(\n            new MultiPoint(Collections.singletonList(new Point(2, 1)))));\n        assertEquals(new MultiPoint(Collections.singletonList(new Point(2, 1))),\n            wkt.fromWKT(\"MULTIPOINT (2 1)\"));\n\n        assertEquals(\"MULTIPOINT (2.0 1.0, 3.0 4.0)\",\n            wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2, 1), new Point(3, 4)))));\n        assertEquals(new MultiPoint(Arrays.asList(new Point(2, 1), new Point(3, 4))),\n            wkt.fromWKT(\"MULTIPOINT (2 1, 3 4)\"));\n\n        assertEquals(\"MULTIPOINT (2.0 1.0 10.0, 3.0 4.0 20.0)\",\n            wkt.toWKT(new MultiPoint(Arrays.asList(new Point(2, 1, 10), new Point(3, 4, 20)))));\n        assertEquals(new MultiPoint(Arrays.asList(new Point(2, 1, 10), new Point(3, 4, 20))),\n            wkt.fromWKT(\"MULTIPOINT (2 1 10, 3 4 20)\"));\n\n        assertEquals(\"MULTIPOINT EMPTY\", wkt.toWKT(MultiPoint.EMPTY));\n        assertEquals(MultiPoint.EMPTY, wkt.fromWKT(\"MULTIPOINT EMPTY)\"));\n    }\n","realPath":"libs/geo/src/test/java/org/elasticsearch/geometry/MultiPointTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"6a8f8f3f718bd21bf14176049c9e1f1def13463b","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-17 05:31:31","modifiedFileCount":"4429","status":"M","submitter":"Igor Motov"}]
