[{"authorTime":"2019-07-01 22:02:36","codes":[{"authorDate":"2019-07-01 22:02:36","commitOrder":1,"curCode":"    public void testEmbeddedMaxAgg() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }, ValueType.NUMERIC\n        );\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }, ValueType.STRING\n        );\n    }\n","date":"2019-07-01 22:02:36","endLine":226,"groupId":"57760","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmbeddedMaxAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a0/d48b7ab778f30d1fe6ac2a993519363c68ec52.src","preCode":"    public void testEmbeddedMaxAgg() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }, ValueType.NUMERIC\n        );\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }, ValueType.STRING\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"},{"authorDate":"2019-07-01 22:02:36","commitOrder":1,"curCode":"    public void testNestedTerms() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\", ValueType.STRING).field(KEYWORD_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }, ValueType.NUMERIC\n        );\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\", ValueType.STRING).field(KEYWORD_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }, ValueType.STRING\n        );\n    }\n","date":"2019-07-01 22:02:36","endLine":326,"groupId":"14773","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a0/d48b7ab778f30d1fe6ac2a993519363c68ec52.src","preCode":"    public void testNestedTerms() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\", ValueType.STRING).field(KEYWORD_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }, ValueType.NUMERIC\n        );\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\", ValueType.STRING).field(KEYWORD_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }, ValueType.STRING\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"B"}],"commitId":"baf155dced6280951320bc188c13f4307f2bd5b9","commitMessage":"@@@Add RareTerms aggregation (#35718)\n\nThis adds a `rare_terms` aggregation.  It is an aggregation designed\nto identify the long-tail of keywords.  e.g. terms that are \"rare\" or\nhave low doc counts.\n\nThis aggregation is designed to be more memory efficient than the\nalternative.  which is setting a terms aggregation to size: LONG_MAX\n(or worse.  ordering a terms agg by count ascending.  which has\nunbounded error).\n\nThis aggregation works by maintaining a map of terms that have\nbeen seen. A counter associated with each value is incremented\nwhen we see the term again.  If the counter surpasses a predefined\nthreshold.  the term is removed from the map and inserted into a cuckoo\nfilter.  If a future term is found in the cuckoo filter we assume it\nwas previously removed from the map and is \"common\".\n\nThe map keys are the \"rare\" terms after collection is done.\n\n","date":"2019-07-01 22:02:36","modifiedFileCount":"7","status":"B","submitter":"Zachary Tong"},{"authorTime":"2020-03-27 03:01:07","codes":[{"authorDate":"2019-07-01 22:02:36","commitOrder":2,"curCode":"    public void testEmbeddedMaxAgg() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }, ValueType.NUMERIC\n        );\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }, ValueType.STRING\n        );\n    }\n","date":"2019-07-01 22:02:36","endLine":226,"groupId":"57760","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmbeddedMaxAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a0/d48b7ab778f30d1fe6ac2a993519363c68ec52.src","preCode":"    public void testEmbeddedMaxAgg() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }, ValueType.NUMERIC\n        );\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }, ValueType.STRING\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"},{"authorDate":"2020-03-27 03:01:07","commitOrder":2,"curCode":"    public void testNestedTerms() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\").userValueTypeHint(ValueType.STRING)\n                    .field(KEYWORD_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }, ValueType.NUMERIC\n        );\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\").userValueTypeHint(ValueType.STRING)\n                    .field(KEYWORD_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }, ValueType.STRING\n        );\n    }\n","date":"2020-03-27 03:01:07","endLine":361,"groupId":"14773","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/ffa9b768d9f329ba93676281cc6c5c12b92bb6.src","preCode":"    public void testNestedTerms() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\", ValueType.STRING).field(KEYWORD_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }, ValueType.NUMERIC\n        );\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\", ValueType.STRING).field(KEYWORD_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }, ValueType.STRING\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"a90c1de8745681356a6516f4f22a8c40f71f6b12","commitMessage":"@@@Add ValuesSource Registry and associated logic (#54281)\n\n* Remove ValuesSourceType argument to ValuesSourceAggregationBuilder (#48638)\n\n* ValuesSourceRegistry Prototype (#48758)\n\n* Remove generics from ValuesSource related classes (#49606)\n\n* fix percentile aggregation tests (#50712)\n\n* Basic thread safety for ValuesSourceRegistry (#50340)\n\n* Remove target value type from ValuesSourceAggregationBuilder (#49943)\n\n* Cleanup default values source type (#50992)\n\n* CoreValuesSourceType no longer implements Writable (#51276)\n\n* Remove genereics & hard coded ValuesSource references from Matrix Stats (#51131)\n\n* Put values source types on fields (#51503)\n\n* Remove VST Any (#51539)\n\n* Rewire terms agg to use new VS registry (#51182)\n\nAlso adds some basic AggTestCases for untested code\npaths (and boilerplate for future tests once the IT are\nconverted over)\n\n* Wire Cardinality aggregation to work with the ValuesSourceRegistry (#51337)\n\n* Wire Percentiles aggregator into new VS framework (#51639)\n\nThis required a bit of a refactor to percentiles itself.  Before. \nthe Builder would switch on the chosen algo to generate an\nalgo-specific factory.  This doesn't work (or at least.  would be\ndifficult) in the new VS framework.\n\nThis refactor consolidates both factories together and introduces\na PercentilesConfig object to act as a standardized way to pass\nalgo-specific parameters through the factory.  This object\nis then used when deciding which kind of aggregator to create\n\nNote: CoreValuesSourceType.HISTOGRAM still lives in core.  and will\nbe moved in a subsequent PR.\n\n* Remove generics and target value type from MultiVSAB (#51647)\n\n* fix checkstyle after merge (#52008)\n\n* Plumb ValuesSourceRegistry through to QuerySearchContext (#51710)\n\n* Convert RareTerms to new VS registry (#52166)\n\n* Wire up Value Count (#52225)\n\n* Wire up Max & Min aggregations (#52219)\n\n* ValuesSource refactoring: Wire up Sum aggregation (#52571)\n\n* ValuesSource refactoring: Wire up SigTerms aggregation (#52590)\n\n* Soft immutability for VSConfig (#52729)\n\n* Unmute testSupportedFieldTypes.  fix Percentiles/Ranks/Terms tests (#52734)\n\nAlso fixes Percentiles which was incorrectly specified to only accept\nnumeric.  but in fact also accepts Boolean and Date (because those are\nnumeric on master - thanks `testSupportedFieldTypes` for catching it!)\n\n* VS refactoring: Wire up stats aggregation (#52891)\n\n* ValuesSource refactoring: Wire up string_stats aggregation (#52875)\n\n* VS refactoring: Wire up median (MAD) aggregation (#52945)\n\n* fix valuesourcetype issue with constant_keyword field (#53041)\n\nthis commit implements `getValuesSourceType` for\nthe ConstantKeyword field type.\n\nmaster was merged into feature/extensible-values-source\nintroducing a new field type that was not implementing\n`getValuesSourceType`.\n\n* ValuesSource refactoring: Wire up Avg aggregation (#52752)\n\n* Wire PercentileRanks aggregator into new VS framework  (#51693)\n\n* Add a VSConfig resolver for aggregations not using the registry (#53038)\n\n* Vs refactor wire up ranges and date ranges (#52918)\n\n* Wire up geo_bounds aggregation to ValuesSourceRegistry (#53034)\n\nThis commit updates the geo_bounds aggregation to depend\non registering itself in the ValuesSourceRegistry\n\nrelates #42949.\n\n* VS refactoring: convert Boxplot to new registry (#53132)\n\n* Wire-up geotile_grid and geohash_grid to ValuesSourceRegistry (#53037)\n\nThis commit updates the geo*_grid aggregations to depend\non registering itself in the ValuesSourceRegistry\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Wire-up geo_centroid agg to ValuesSourceRegistry (#53040)\n\nThis commit updates the geo_centroid aggregation to depend\non registering itself in the ValuesSourceRegistry.\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Fix type tests for Missing aggregation (#53501)\n\n* ValuesSource Refactor: move histo VSType into XPack module (#53298)\n\n- Introduces a new API (`getBareAggregatorRegistrar()`) which allows plugins to register aggregations against existing agg definitions defined in Core.\n- This moves the histogram VSType over to XPack where it belongs. `getHistogramValues()` still remains as a Core concept\n- Moves the histo-specific bits over to xpack (e.g. the actual aggregator logic). This requires extra boilerplate since we need to create a new \"Analytics\" Percentile/Rank aggregators to deal with the histo field. Doubly-so since percentiles/ranks are extra boiler-plate'y... should be much lighter for other aggs\n\n* Wire up DateHistogram to the ValuesSourceRegistry (#53484)\n\n* Vs refactor parser cleanup (#53198)\n\nCo-authored-by: Zachary Tong <polyfractal@elastic.co>\nCo-authored-by: Zachary Tong <zach@elastic.co>\nCo-authored-by: Christos Soulios <1561376+csoulios@users.noreply.github.com>\nCo-authored-by: Tal Levy <JubBoy333@gmail.com>","date":"2020-03-27 03:01:07","modifiedFileCount":"214","status":"M","submitter":"Mark Tozzi"},{"authorTime":"2020-06-13 04:23:20","codes":[{"authorDate":"2020-06-13 04:23:20","commitOrder":3,"curCode":"    public void testEmbeddedMaxAgg() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }\n        );\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }\n        );\n    }\n","date":"2020-06-13 04:23:20","endLine":229,"groupId":"57760","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmbeddedMaxAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/4baa80b8da810db0c045b63a9e3373b8348b46.src","preCode":"    public void testEmbeddedMaxAgg() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }, ValueType.NUMERIC\n        );\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }, ValueType.STRING\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2020-06-13 04:23:20","commitOrder":3,"curCode":"    public void testNestedTerms() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\")\n                    .field(KEYWORD_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }\n        );\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\")\n                    .field(KEYWORD_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }\n        );\n    }\n","date":"2020-06-13 04:23:20","endLine":358,"groupId":"14773","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/4baa80b8da810db0c045b63a9e3373b8348b46.src","preCode":"    public void testNestedTerms() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\").userValueTypeHint(ValueType.STRING)\n                    .field(KEYWORD_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }, ValueType.NUMERIC\n        );\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\").userValueTypeHint(ValueType.STRING)\n                    .field(KEYWORD_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }, ValueType.STRING\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"933565d54c81fac7830e721a823abd8f98cbb1a8","commitMessage":"@@@Save memory when rare_terms is not on top (#57948)\n\nThis uses the optimization that we started making in #55873 for\n`rare_terms` to save a bit of memory when that aggregation is not on the\ntop level.\n","date":"2020-06-13 04:23:20","modifiedFileCount":"8","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-08-07 05:14:20","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":4,"curCode":"    public void testEmbeddedMaxAgg() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testSearchCase(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }\n        );\n        testSearchCase(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }\n        );\n    }\n","date":"2020-08-07 05:14:20","endLine":229,"groupId":"105184","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testEmbeddedMaxAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/e8ca6f681478850bed8393aeea8a5d0baf6433.src","preCode":"    public void testEmbeddedMaxAgg() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }\n        );\n        testBothCases(query, dataset, aggregation -> {\n                MaxAggregationBuilder max = new MaxAggregationBuilder(\"the_max\").field(LONG_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(max);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_max\"));\n                assertThat(((Max)(children.asList().get(0))).getValue(), equalTo(1.0));\n            }\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2020-08-07 05:14:20","commitOrder":4,"curCode":"    public void testNestedTerms() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testSearchCase(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\")\n                    .field(KEYWORD_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }\n        );\n\n        testSearchCase(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\")\n                    .field(KEYWORD_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }\n        );\n    }\n","date":"2020-08-07 05:14:20","endLine":352,"groupId":"105184","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/e8ca6f681478850bed8393aeea8a5d0baf6433.src","preCode":"    public void testNestedTerms() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\")\n                    .field(KEYWORD_FIELD);\n                aggregation.field(LONG_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }\n        );\n\n        testBothCases(query, dataset, aggregation -> {\n                TermsAggregationBuilder terms = new TermsAggregationBuilder(\"the_terms\")\n                    .field(KEYWORD_FIELD);\n                aggregation.field(KEYWORD_FIELD).maxDocCount(1).subAggregation(terms);\n            },\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n\n                Aggregations children = bucket.getAggregations();\n                assertThat(children.asList().size(), equalTo(1));\n                assertThat(children.asList().get(0).getName(), equalTo(\"the_terms\"));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().size(), equalTo(1));\n                assertThat(((Terms)(children.asList().get(0))).getBuckets().get(0).getKeyAsString(), equalTo(\"1\"));\n            }\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"}],"commitId":"5e3ea6eb11c68bdcc9adda51715a6e1fea9186d6","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-07 05:14:20","modifiedFileCount":"73","status":"M","submitter":"Nik Everett"}]
