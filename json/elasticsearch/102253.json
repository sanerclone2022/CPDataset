[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testJKDMapDiff() throws IOException {\n        new JdkMapDriver<TestDiffable>() {\n            @Override\n            protected boolean diffableValues() {\n                return true;\n            }\n\n            @Override\n            protected TestDiffable createValue(Integer key, boolean before) {\n                return new TestDiffable(String.valueOf(before ? key : key + 1));\n            }\n\n            @Override\n            protected MapDiff diff(Map<Integer, TestDiffable> before, Map<Integer, TestDiffable> after) {\n                return DiffableUtils.diff(before, after, keySerializer);\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return useProtoForDiffableSerialization\n                        ? DiffableUtils.readJdkMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom)\n                        : DiffableUtils.readJdkMapDiff(in, keySerializer, diffableValueSerializer());\n            }\n        }.execute();\n\n        new JdkMapDriver<String>() {\n            @Override\n            protected boolean diffableValues() {\n                return false;\n            }\n\n            @Override\n            protected String createValue(Integer key, boolean before) {\n                return String.valueOf(before ? key : key + 1);\n            }\n\n            @Override\n            protected MapDiff diff(Map<Integer, String> before, Map<Integer, String> after) {\n                return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer());\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return DiffableUtils.readJdkMapDiff(in, keySerializer, nonDiffableValueSerializer());\n            }\n        }.execute();\n    }\n","date":"2018-04-26 03:22:53","endLine":94,"groupId":"60262","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJKDMapDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/44/75aed7dc398d90f0258e9fc88b069b09b95a75.src","preCode":"    public void testJKDMapDiff() throws IOException {\n        new JdkMapDriver<TestDiffable>() {\n            @Override\n            protected boolean diffableValues() {\n                return true;\n            }\n\n            @Override\n            protected TestDiffable createValue(Integer key, boolean before) {\n                return new TestDiffable(String.valueOf(before ? key : key + 1));\n            }\n\n            @Override\n            protected MapDiff diff(Map<Integer, TestDiffable> before, Map<Integer, TestDiffable> after) {\n                return DiffableUtils.diff(before, after, keySerializer);\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return useProtoForDiffableSerialization\n                        ? DiffableUtils.readJdkMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom)\n                        : DiffableUtils.readJdkMapDiff(in, keySerializer, diffableValueSerializer());\n            }\n        }.execute();\n\n        new JdkMapDriver<String>() {\n            @Override\n            protected boolean diffableValues() {\n                return false;\n            }\n\n            @Override\n            protected String createValue(Integer key, boolean before) {\n                return String.valueOf(before ? key : key + 1);\n            }\n\n            @Override\n            protected MapDiff diff(Map<Integer, String> before, Map<Integer, String> after) {\n                return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer());\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return DiffableUtils.readJdkMapDiff(in, keySerializer, nonDiffableValueSerializer());\n            }\n        }.execute();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/serialization/DiffableTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testImmutableOpenMapDiff() throws IOException {\n        new ImmutableOpenMapDriver<TestDiffable>() {\n            @Override\n            protected boolean diffableValues() {\n                return true;\n            }\n\n            @Override\n            protected TestDiffable createValue(Integer key, boolean before) {\n                return new TestDiffable(String.valueOf(before ? key : key + 1));\n            }\n\n            @Override\n            protected MapDiff diff(ImmutableOpenMap<Integer, TestDiffable> before, ImmutableOpenMap<Integer, TestDiffable> after) {\n                return DiffableUtils.diff(before, after, keySerializer);\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return useProtoForDiffableSerialization\n                        ? DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom)\n                        : DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, diffableValueSerializer());\n            }\n        }.execute();\n\n        new ImmutableOpenMapDriver<String>() {\n            @Override\n            protected boolean diffableValues() {\n                return false;\n            }\n\n            @Override\n            protected String createValue(Integer key, boolean before) {\n                return String.valueOf(before ? key : key + 1);\n            }\n\n            @Override\n            protected MapDiff diff(ImmutableOpenMap<Integer, String> before, ImmutableOpenMap<Integer, String> after) {\n                return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer());\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, nonDiffableValueSerializer());\n            }\n        }.execute();\n    }\n","date":"2018-04-26 03:22:53","endLine":142,"groupId":"60262","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testImmutableOpenMapDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/44/75aed7dc398d90f0258e9fc88b069b09b95a75.src","preCode":"    public void testImmutableOpenMapDiff() throws IOException {\n        new ImmutableOpenMapDriver<TestDiffable>() {\n            @Override\n            protected boolean diffableValues() {\n                return true;\n            }\n\n            @Override\n            protected TestDiffable createValue(Integer key, boolean before) {\n                return new TestDiffable(String.valueOf(before ? key : key + 1));\n            }\n\n            @Override\n            protected MapDiff diff(ImmutableOpenMap<Integer, TestDiffable> before, ImmutableOpenMap<Integer, TestDiffable> after) {\n                return DiffableUtils.diff(before, after, keySerializer);\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return useProtoForDiffableSerialization\n                        ? DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom)\n                        : DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, diffableValueSerializer());\n            }\n        }.execute();\n\n        new ImmutableOpenMapDriver<String>() {\n            @Override\n            protected boolean diffableValues() {\n                return false;\n            }\n\n            @Override\n            protected String createValue(Integer key, boolean before) {\n                return String.valueOf(before ? key : key + 1);\n            }\n\n            @Override\n            protected MapDiff diff(ImmutableOpenMap<Integer, String> before, ImmutableOpenMap<Integer, String> after) {\n                return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer());\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, nonDiffableValueSerializer());\n            }\n        }.execute();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/serialization/DiffableTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2020-09-14 19:05:22","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testJKDMapDiff() throws IOException {\n        new JdkMapDriver<TestDiffable>() {\n            @Override\n            protected boolean diffableValues() {\n                return true;\n            }\n\n            @Override\n            protected TestDiffable createValue(Integer key, boolean before) {\n                return new TestDiffable(String.valueOf(before ? key : key + 1));\n            }\n\n            @Override\n            protected MapDiff diff(Map<Integer, TestDiffable> before, Map<Integer, TestDiffable> after) {\n                return DiffableUtils.diff(before, after, keySerializer);\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return useProtoForDiffableSerialization\n                        ? DiffableUtils.readJdkMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom)\n                        : DiffableUtils.readJdkMapDiff(in, keySerializer, diffableValueSerializer());\n            }\n        }.execute();\n\n        new JdkMapDriver<String>() {\n            @Override\n            protected boolean diffableValues() {\n                return false;\n            }\n\n            @Override\n            protected String createValue(Integer key, boolean before) {\n                return String.valueOf(before ? key : key + 1);\n            }\n\n            @Override\n            protected MapDiff diff(Map<Integer, String> before, Map<Integer, String> after) {\n                return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer());\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return DiffableUtils.readJdkMapDiff(in, keySerializer, nonDiffableValueSerializer());\n            }\n        }.execute();\n    }\n","date":"2018-04-26 03:22:53","endLine":94,"groupId":"60262","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJKDMapDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/44/75aed7dc398d90f0258e9fc88b069b09b95a75.src","preCode":"    public void testJKDMapDiff() throws IOException {\n        new JdkMapDriver<TestDiffable>() {\n            @Override\n            protected boolean diffableValues() {\n                return true;\n            }\n\n            @Override\n            protected TestDiffable createValue(Integer key, boolean before) {\n                return new TestDiffable(String.valueOf(before ? key : key + 1));\n            }\n\n            @Override\n            protected MapDiff diff(Map<Integer, TestDiffable> before, Map<Integer, TestDiffable> after) {\n                return DiffableUtils.diff(before, after, keySerializer);\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return useProtoForDiffableSerialization\n                        ? DiffableUtils.readJdkMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom)\n                        : DiffableUtils.readJdkMapDiff(in, keySerializer, diffableValueSerializer());\n            }\n        }.execute();\n\n        new JdkMapDriver<String>() {\n            @Override\n            protected boolean diffableValues() {\n                return false;\n            }\n\n            @Override\n            protected String createValue(Integer key, boolean before) {\n                return String.valueOf(before ? key : key + 1);\n            }\n\n            @Override\n            protected MapDiff diff(Map<Integer, String> before, Map<Integer, String> after) {\n                return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer());\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return DiffableUtils.readJdkMapDiff(in, keySerializer, nonDiffableValueSerializer());\n            }\n        }.execute();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/serialization/DiffableTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2020-09-14 19:05:22","commitOrder":2,"curCode":"    public void testImmutableOpenMapDiff() throws IOException {\n        new ImmutableOpenMapDriver<TestDiffable>() {\n            @Override\n            protected boolean diffableValues() {\n                return true;\n            }\n\n            @Override\n            protected TestDiffable createValue(Integer key, boolean before) {\n                return new TestDiffable(String.valueOf(before ? key : key + 1));\n            }\n\n            @Override\n            protected MapDiff diff(ImmutableOpenMap<Integer, TestDiffable> before, ImmutableOpenMap<Integer, TestDiffable> after) {\n                return DiffableUtils.diff(before, after, keySerializer);\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return useProtoForDiffableSerialization\n                        ? DiffableUtils.readImmutableOpenMapDiff(in, keySerializer,\n                        new DiffableUtils.DiffableValueReader<>(TestDiffable::readFrom, TestDiffable::readDiffFrom))\n                        : DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, diffableValueSerializer());\n            }\n        }.execute();\n\n        new ImmutableOpenMapDriver<String>() {\n            @Override\n            protected boolean diffableValues() {\n                return false;\n            }\n\n            @Override\n            protected String createValue(Integer key, boolean before) {\n                return String.valueOf(before ? key : key + 1);\n            }\n\n            @Override\n            protected MapDiff diff(ImmutableOpenMap<Integer, String> before, ImmutableOpenMap<Integer, String> after) {\n                return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer());\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, nonDiffableValueSerializer());\n            }\n        }.execute();\n    }\n","date":"2020-09-14 19:05:22","endLine":143,"groupId":"45753","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testImmutableOpenMapDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/bd07d902cdc856c08e8573446623ecd4cfac0d.src","preCode":"    public void testImmutableOpenMapDiff() throws IOException {\n        new ImmutableOpenMapDriver<TestDiffable>() {\n            @Override\n            protected boolean diffableValues() {\n                return true;\n            }\n\n            @Override\n            protected TestDiffable createValue(Integer key, boolean before) {\n                return new TestDiffable(String.valueOf(before ? key : key + 1));\n            }\n\n            @Override\n            protected MapDiff diff(ImmutableOpenMap<Integer, TestDiffable> before, ImmutableOpenMap<Integer, TestDiffable> after) {\n                return DiffableUtils.diff(before, after, keySerializer);\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return useProtoForDiffableSerialization\n                        ? DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom)\n                        : DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, diffableValueSerializer());\n            }\n        }.execute();\n\n        new ImmutableOpenMapDriver<String>() {\n            @Override\n            protected boolean diffableValues() {\n                return false;\n            }\n\n            @Override\n            protected String createValue(Integer key, boolean before) {\n                return String.valueOf(before ? key : key + 1);\n            }\n\n            @Override\n            protected MapDiff diff(ImmutableOpenMap<Integer, String> before, ImmutableOpenMap<Integer, String> after) {\n                return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer());\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, nonDiffableValueSerializer());\n            }\n        }.execute();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/serialization/DiffableTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"0ec40a0abeb85077285f585263b785a33a66ae39","commitMessage":"@@@Save Some Allocations when Working with ClusterState (#62060)\n\nJust a number of obvious spots where we were allocating\nduplicate empty structures or otherwise inefficient that I\nfound while investigating snapshot cluster state update performance.\n","date":"2020-09-14 19:05:22","modifiedFileCount":"12","status":"M","submitter":"Armin Braun"},{"authorTime":"2021-08-10 22:05:55","codes":[{"authorDate":"2021-08-10 22:05:55","commitOrder":3,"curCode":"    public void testJKDMapDiff() throws IOException {\n        new JdkMapDriver<TestDiffable>() {\n            @Override\n            protected boolean diffableValues() {\n                return true;\n            }\n\n            @Override\n            protected TestDiffable createValue(Integer key, boolean before) {\n                return new TestDiffable(String.valueOf(before ? key : key + 1));\n            }\n\n            @Override\n            protected MapDiff<Integer, TestDiffable, Map<Integer, TestDiffable>> diff(\n                Map<Integer, TestDiffable> before,\n                Map<Integer, TestDiffable> after\n            ) {\n                return DiffableUtils.diff(before, after, keySerializer);\n            }\n\n            @Override\n            protected MapDiff<Integer, TestDiffable, Map<Integer, TestDiffable>> readDiff(StreamInput in) throws IOException {\n                return useProtoForDiffableSerialization\n                        ? DiffableUtils.readJdkMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom)\n                        : DiffableUtils.readJdkMapDiff(in, keySerializer, diffableValueSerializer());\n            }\n        }.execute();\n\n        new JdkMapDriver<String>() {\n            @Override\n            protected boolean diffableValues() {\n                return false;\n            }\n\n            @Override\n            protected String createValue(Integer key, boolean before) {\n                return String.valueOf(before ? key : key + 1);\n            }\n\n            @Override\n            protected MapDiff<Integer, String, Map<Integer, String>> diff(Map<Integer, String> before, Map<Integer, String> after) {\n                return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer());\n            }\n\n            @Override\n            protected MapDiff<Integer, String, Map<Integer, String>> readDiff(StreamInput in) throws IOException {\n                return DiffableUtils.readJdkMapDiff(in, keySerializer, nonDiffableValueSerializer());\n            }\n        }.execute();\n    }\n","date":"2021-08-10 22:05:55","endLine":87,"groupId":"102253","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testJKDMapDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2e/df28a07da83827923e76a79b890adccfe83e37.src","preCode":"    public void testJKDMapDiff() throws IOException {\n        new JdkMapDriver<TestDiffable>() {\n            @Override\n            protected boolean diffableValues() {\n                return true;\n            }\n\n            @Override\n            protected TestDiffable createValue(Integer key, boolean before) {\n                return new TestDiffable(String.valueOf(before ? key : key + 1));\n            }\n\n            @Override\n            protected MapDiff diff(Map<Integer, TestDiffable> before, Map<Integer, TestDiffable> after) {\n                return DiffableUtils.diff(before, after, keySerializer);\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return useProtoForDiffableSerialization\n                        ? DiffableUtils.readJdkMapDiff(in, keySerializer, TestDiffable::readFrom, TestDiffable::readDiffFrom)\n                        : DiffableUtils.readJdkMapDiff(in, keySerializer, diffableValueSerializer());\n            }\n        }.execute();\n\n        new JdkMapDriver<String>() {\n            @Override\n            protected boolean diffableValues() {\n                return false;\n            }\n\n            @Override\n            protected String createValue(Integer key, boolean before) {\n                return String.valueOf(before ? key : key + 1);\n            }\n\n            @Override\n            protected MapDiff diff(Map<Integer, String> before, Map<Integer, String> after) {\n                return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer());\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return DiffableUtils.readJdkMapDiff(in, keySerializer, nonDiffableValueSerializer());\n            }\n        }.execute();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/serialization/DiffableTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2021-08-10 22:05:55","commitOrder":3,"curCode":"    public void testImmutableOpenMapDiff() throws IOException {\n        new ImmutableOpenMapDriver<TestDiffable>() {\n            @Override\n            protected boolean diffableValues() {\n                return true;\n            }\n\n            @Override\n            protected TestDiffable createValue(Integer key, boolean before) {\n                return new TestDiffable(String.valueOf(before ? key : key + 1));\n            }\n\n            @Override\n            protected MapDiff<Integer, TestDiffable, ImmutableOpenMap<Integer, TestDiffable>> diff(\n                ImmutableOpenMap<Integer, TestDiffable> before,\n                ImmutableOpenMap<Integer, TestDiffable> after\n            ) {\n                return DiffableUtils.diff(before, after, keySerializer);\n            }\n\n            @Override\n            protected MapDiff<Integer, TestDiffable, ImmutableOpenMap<Integer, TestDiffable>> readDiff(StreamInput in) throws IOException {\n                return useProtoForDiffableSerialization\n                        ? DiffableUtils.readImmutableOpenMapDiff(in, keySerializer,\n                        new DiffableUtils.DiffableValueReader<>(TestDiffable::readFrom, TestDiffable::readDiffFrom))\n                        : DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, diffableValueSerializer());\n            }\n        }.execute();\n\n        new ImmutableOpenMapDriver<String>() {\n            @Override\n            protected boolean diffableValues() {\n                return false;\n            }\n\n            @Override\n            protected String createValue(Integer key, boolean before) {\n                return String.valueOf(before ? key : key + 1);\n            }\n\n            @Override\n            protected MapDiff<Integer, String, ImmutableOpenMap<Integer, String>> diff(\n                ImmutableOpenMap<Integer, String> before,\n                ImmutableOpenMap<Integer, String> after\n            ) {\n                return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer());\n            }\n\n            @Override\n            protected MapDiff<Integer, String, ImmutableOpenMap<Integer, String>> readDiff(StreamInput in) throws IOException {\n                return DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, nonDiffableValueSerializer());\n            }\n        }.execute();\n    }\n","date":"2021-08-10 22:05:55","endLine":142,"groupId":"102253","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testImmutableOpenMapDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2e/df28a07da83827923e76a79b890adccfe83e37.src","preCode":"    public void testImmutableOpenMapDiff() throws IOException {\n        new ImmutableOpenMapDriver<TestDiffable>() {\n            @Override\n            protected boolean diffableValues() {\n                return true;\n            }\n\n            @Override\n            protected TestDiffable createValue(Integer key, boolean before) {\n                return new TestDiffable(String.valueOf(before ? key : key + 1));\n            }\n\n            @Override\n            protected MapDiff diff(ImmutableOpenMap<Integer, TestDiffable> before, ImmutableOpenMap<Integer, TestDiffable> after) {\n                return DiffableUtils.diff(before, after, keySerializer);\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return useProtoForDiffableSerialization\n                        ? DiffableUtils.readImmutableOpenMapDiff(in, keySerializer,\n                        new DiffableUtils.DiffableValueReader<>(TestDiffable::readFrom, TestDiffable::readDiffFrom))\n                        : DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, diffableValueSerializer());\n            }\n        }.execute();\n\n        new ImmutableOpenMapDriver<String>() {\n            @Override\n            protected boolean diffableValues() {\n                return false;\n            }\n\n            @Override\n            protected String createValue(Integer key, boolean before) {\n                return String.valueOf(before ? key : key + 1);\n            }\n\n            @Override\n            protected MapDiff diff(ImmutableOpenMap<Integer, String> before, ImmutableOpenMap<Integer, String> after) {\n                return DiffableUtils.diff(before, after, keySerializer, nonDiffableValueSerializer());\n            }\n\n            @Override\n            protected MapDiff readDiff(StreamInput in) throws IOException {\n                return DiffableUtils.readImmutableOpenMapDiff(in, keySerializer, nonDiffableValueSerializer());\n            }\n        }.execute();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/serialization/DiffableTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"128a7e774437e80fef3e0d35fb74a9c0fb42c080","commitMessage":"@@@Fix compiler warnings in :server - part 3 (#76024)\n\nPart of #40366. Fix a number of javac issues when linting is enforced in `server/`.","date":"2021-08-10 22:05:55","modifiedFileCount":"50","status":"M","submitter":"Rory Hunter"}]
