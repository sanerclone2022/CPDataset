[{"authorTime":"2020-02-13 01:06:04","codes":[{"authorDate":"2020-02-13 01:06:04","commitOrder":3,"curCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script] queries cannot be executed when '\" +\n                    ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        FilterScript.Factory factory = context.compile(script, FilterScript.CONTEXT);\n        FilterScript.LeafFactory filterScript = factory.newFactory(script.getParams(), context.lookup());\n        return new ScriptQuery(script, filterScript);\n    }\n","date":"2020-02-13 01:06:04","endLine":143,"groupId":"67857","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doToQuery","params":"(QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/da/3f7850c0eb527f44252591a80b21140f10c7d7.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script] queries cannot be executed when '\" +\n                    ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        FilterScript.Factory factory = context.compile(script, FilterScript.CONTEXT);\n        FilterScript.LeafFactory filterScript = factory.newFactory(script.getParams(), context.lookup());\n        return new ScriptQuery(script, filterScript);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"},{"authorDate":"2020-02-13 01:06:04","commitOrder":3,"curCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script score] queries cannot be executed when '\"\n                    + ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        ScoreScript.Factory factory = context.compile(script, ScoreScript.CONTEXT);\n        ScoreScript.LeafFactory scoreScriptFactory = factory.newFactory(script.getParams(), context.lookup());\n        Query query = this.query.toQuery(context);\n        return new ScriptScoreQuery(query, script, scoreScriptFactory, minScore,\n            context.index().getName(), context.getShardId(), context.indexVersionCreated());\n    }\n","date":"2020-02-13 01:06:04","endLine":184,"groupId":"17064","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doToQuery","params":"(QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/1db8a9e8c8f2a09d34bfe7f4bfc804242902a2.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script score] queries cannot be executed when '\"\n                    + ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        ScoreScript.Factory factory = context.compile(script, ScoreScript.CONTEXT);\n        ScoreScript.LeafFactory scoreScriptFactory = factory.newFactory(script.getParams(), context.lookup());\n        Query query = this.query.toQuery(context);\n        return new ScriptScoreQuery(query, script, scoreScriptFactory, minScore,\n            context.index().getName(), context.getShardId(), context.indexVersionCreated());\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/functionscore/ScriptScoreQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"MB"}],"commitId":"a8b39ed842c7770bd9275958c9f747502fd9a3ea","commitMessage":"@@@Add a cluster setting to disallow expensive queries (#51385)\n\nAdd a new cluster setting `search.allow_expensive_queries` which by\ndefault is `true`. If set to `false`.  certain queries that have \nusually slow performance cannot be executed and an error message\nis returned.\n\n- Queries that need to do linear scans to identify matches:\n  - Script queries\n- Queries that have a high up-front cost:\n  - Fuzzy queries\n  - Regexp queries\n  - Prefix queries (without index_prefixes enabled\n  - Wildcard queries\n  - Range queries on text and keyword fields\n- Joining queries\n  - HasParent queries\n  - HasChild queries\n  - ParentId queries\n  - Nested queries\n- Queries on deprecated 6.x geo shapes (using PrefixTree implementation)\n- Queries that may have a high per-document cost:\n  - Script score queries\n  - Percolate queries\n\nCloses: #29050","date":"2020-02-13 01:06:04","modifiedFileCount":"66","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script] queries cannot be executed when '\" +\n                    ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        FilterScript.Factory factory = context.compile(script, FilterScript.CONTEXT);\n        FilterScript.LeafFactory filterScript = factory.newFactory(script.getParams(), context.lookup());\n        return new ScriptQuery(script, filterScript);\n    }\n","date":"2021-01-15 01:11:59","endLine":143,"groupId":"67857","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/c53878e9ad6b277e5fdb8aa2ed0affeb24b1af.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script] queries cannot be executed when '\" +\n                    ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        FilterScript.Factory factory = context.compile(script, FilterScript.CONTEXT);\n        FilterScript.LeafFactory filterScript = factory.newFactory(script.getParams(), context.lookup());\n        return new ScriptQuery(script, filterScript);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script score] queries cannot be executed when '\"\n                    + ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        ScoreScript.Factory factory = context.compile(script, ScoreScript.CONTEXT);\n        ScoreScript.LeafFactory scoreScriptFactory = factory.newFactory(script.getParams(), context.lookup());\n        Query query = this.query.toQuery(context);\n        return new ScriptScoreQuery(query, script, scoreScriptFactory, minScore,\n            context.index().getName(), context.getShardId(), context.indexVersionCreated());\n    }\n","date":"2021-01-15 01:11:59","endLine":176,"groupId":"17064","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/55/1db7acdc6b7ea53279246c17772c3c88565da5.src","preCode":"    protected Query doToQuery(QueryShardContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script score] queries cannot be executed when '\"\n                    + ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        ScoreScript.Factory factory = context.compile(script, ScoreScript.CONTEXT);\n        ScoreScript.LeafFactory scoreScriptFactory = factory.newFactory(script.getParams(), context.lookup());\n        Query query = this.query.toQuery(context);\n        return new ScriptScoreQuery(query, script, scoreScriptFactory, minScore,\n            context.index().getName(), context.getShardId(), context.indexVersionCreated());\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/functionscore/ScriptScoreQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-08-04 23:11:12","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":5,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script] queries cannot be executed when '\" +\n                    ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        FilterScript.Factory factory = context.compile(script, FilterScript.CONTEXT);\n        FilterScript.LeafFactory filterScript = factory.newFactory(script.getParams(), context.lookup());\n        return new ScriptQuery(script, filterScript);\n    }\n","date":"2021-01-15 01:11:59","endLine":143,"groupId":"67857","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/c53878e9ad6b277e5fdb8aa2ed0affeb24b1af.src","preCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script] queries cannot be executed when '\" +\n                    ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        FilterScript.Factory factory = context.compile(script, FilterScript.CONTEXT);\n        FilterScript.LeafFactory filterScript = factory.newFactory(script.getParams(), context.lookup());\n        return new ScriptQuery(script, filterScript);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"N"},{"authorDate":"2021-08-04 23:11:12","commitOrder":5,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script score] queries cannot be executed when '\"\n                    + ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        ScoreScript.Factory factory = context.compile(script, ScoreScript.CONTEXT);\n        SearchLookup lookup = context.lookup();\n        ScoreScript.LeafFactory scoreScriptFactory = factory.newFactory(script.getParams(), lookup);\n        Query query = this.query.toQuery(context);\n        return new ScriptScoreQuery(query, script, scoreScriptFactory, context.lookup(), minScore,\n            context.index().getName(), context.getShardId(), context.indexVersionCreated());\n    }\n","date":"2021-08-04 23:11:12","endLine":167,"groupId":"30308","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/64/66f848735e040ffeb19ab6429d438c72e9bf0c.src","preCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script score] queries cannot be executed when '\"\n                    + ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        ScoreScript.Factory factory = context.compile(script, ScoreScript.CONTEXT);\n        ScoreScript.LeafFactory scoreScriptFactory = factory.newFactory(script.getParams(), context.lookup());\n        Query query = this.query.toQuery(context);\n        return new ScriptScoreQuery(query, script, scoreScriptFactory, minScore,\n            context.index().getName(), context.getShardId(), context.indexVersionCreated());\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/functionscore/ScriptScoreQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"6c02a6c65749eb684d924a14922f5d0a3a769d6b","commitMessage":"@@@Script: Fields API for Sort and Score scripts (#75863)\n\nAdds minimal fields API support to sort and score scripts.\n\nExample: `field('myfield').getValue(123)` where `123` is the default if the field has no values.\n\nRefs: #61388","date":"2021-08-04 23:11:12","modifiedFileCount":"29","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2021-08-04 23:11:12","codes":[{"authorDate":"2021-08-05 03:29:43","commitOrder":6,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script] queries cannot be executed when '\" +\n                    ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        FilterScript.Factory factory = context.compile(script, FilterScript.CONTEXT);\n        SearchLookup lookup = context.lookup();\n        FilterScript.LeafFactory filterScript = factory.newFactory(script.getParams(), lookup);\n        return new ScriptQuery(script, filterScript, lookup);\n    }\n","date":"2021-08-05 03:29:43","endLine":135,"groupId":"107904","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/b949ab75f536b5a1a788968ab9ce20d5eb1d1f.src","preCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script] queries cannot be executed when '\" +\n                    ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        FilterScript.Factory factory = context.compile(script, FilterScript.CONTEXT);\n        FilterScript.LeafFactory filterScript = factory.newFactory(script.getParams(), context.lookup());\n        return new ScriptQuery(script, filterScript);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/ScriptQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2021-08-04 23:11:12","commitOrder":6,"curCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script score] queries cannot be executed when '\"\n                    + ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        ScoreScript.Factory factory = context.compile(script, ScoreScript.CONTEXT);\n        SearchLookup lookup = context.lookup();\n        ScoreScript.LeafFactory scoreScriptFactory = factory.newFactory(script.getParams(), lookup);\n        Query query = this.query.toQuery(context);\n        return new ScriptScoreQuery(query, script, scoreScriptFactory, context.lookup(), minScore,\n            context.index().getName(), context.getShardId(), context.indexVersionCreated());\n    }\n","date":"2021-08-04 23:11:12","endLine":167,"groupId":"107904","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"doToQuery","params":"(SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/64/66f848735e040ffeb19ab6429d438c72e9bf0c.src","preCode":"    protected Query doToQuery(SearchExecutionContext context) throws IOException {\n        if (context.allowExpensiveQueries() == false) {\n            throw new ElasticsearchException(\"[script score] queries cannot be executed when '\"\n                    + ALLOW_EXPENSIVE_QUERIES.getKey() + \"' is set to false.\");\n        }\n        ScoreScript.Factory factory = context.compile(script, ScoreScript.CONTEXT);\n        SearchLookup lookup = context.lookup();\n        ScoreScript.LeafFactory scoreScriptFactory = factory.newFactory(script.getParams(), lookup);\n        Query query = this.query.toQuery(context);\n        return new ScriptScoreQuery(query, script, scoreScriptFactory, context.lookup(), minScore,\n            context.index().getName(), context.getShardId(), context.indexVersionCreated());\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/functionscore/ScriptScoreQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"}],"commitId":"bb9c91fc5729d1fa474e249318634971c57d3f74","commitMessage":"@@@Script: Fields API for Filter context (#76119)\n\n","date":"2021-08-05 03:29:43","modifiedFileCount":"6","status":"M","submitter":"Stuart Tettemer"}]
