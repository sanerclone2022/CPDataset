[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static MatchPhraseQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        ZeroTermsQuery zeroTermsQuery = MatchQuery.DEFAULT_ZERO_TERMS_QUERY;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String zeroTermsValue = parser.text();\n                            if (\"none\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.NONE;\n                            } else if (\"all\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.ALL;\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"Unsupported zero_terms_query value [\" + zeroTermsValue + \"]\");\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhraseQueryBuilder matchQuery = new MatchPhraseQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.zeroTermsQuery(zeroTermsQuery);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return matchQuery;\n    }\n","date":"2018-04-26 03:22:53","endLine":262,"groupId":"61063","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/88db6c12ce07360038de2bbe2e22bc9c46de46.src","preCode":"    public static MatchPhraseQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        ZeroTermsQuery zeroTermsQuery = MatchQuery.DEFAULT_ZERO_TERMS_QUERY;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String zeroTermsValue = parser.text();\n                            if (\"none\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.NONE;\n                            } else if (\"all\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.ALL;\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"Unsupported zero_terms_query value [\" + zeroTermsValue + \"]\");\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhraseQueryBuilder matchQuery = new MatchPhraseQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.zeroTermsQuery(zeroTermsQuery);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return matchQuery;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhraseQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static MatchPhrasePrefixQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        int maxExpansion = FuzzyQuery.defaultMaxExpansions;\n        String queryName = null;\n        XContentParser.Token token;\n        String currentFieldName = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (MatchPhraseQueryBuilder.SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (MAX_EXPANSIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxExpansion = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.maxExpansions(maxExpansion);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return matchQuery;\n    }\n","date":"2018-04-26 03:22:53","endLine":249,"groupId":"68391","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/90ba5ae575b74ffca5d53b6b61f18ce390db80.src","preCode":"    public static MatchPhrasePrefixQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        int maxExpansion = FuzzyQuery.defaultMaxExpansions;\n        String queryName = null;\n        XContentParser.Token token;\n        String currentFieldName = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (MatchPhraseQueryBuilder.SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (MAX_EXPANSIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxExpansion = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.maxExpansions(maxExpansion);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return matchQuery;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2020-07-20 22:44:31","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public static MatchPhraseQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        ZeroTermsQuery zeroTermsQuery = MatchQuery.DEFAULT_ZERO_TERMS_QUERY;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String zeroTermsValue = parser.text();\n                            if (\"none\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.NONE;\n                            } else if (\"all\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.ALL;\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"Unsupported zero_terms_query value [\" + zeroTermsValue + \"]\");\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhraseQueryBuilder matchQuery = new MatchPhraseQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.zeroTermsQuery(zeroTermsQuery);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return matchQuery;\n    }\n","date":"2018-04-26 03:22:53","endLine":262,"groupId":"61063","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/88db6c12ce07360038de2bbe2e22bc9c46de46.src","preCode":"    public static MatchPhraseQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        ZeroTermsQuery zeroTermsQuery = MatchQuery.DEFAULT_ZERO_TERMS_QUERY;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String zeroTermsValue = parser.text();\n                            if (\"none\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.NONE;\n                            } else if (\"all\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.ALL;\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"Unsupported zero_terms_query value [\" + zeroTermsValue + \"]\");\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhraseQueryBuilder matchQuery = new MatchPhraseQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.zeroTermsQuery(zeroTermsQuery);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return matchQuery;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhraseQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"N"},{"authorDate":"2020-07-20 22:44:31","commitOrder":2,"curCode":"    public static MatchPhrasePrefixQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        int maxExpansion = FuzzyQuery.defaultMaxExpansions;\n        String queryName = null;\n        XContentParser.Token token;\n        String currentFieldName = null;\n        ZeroTermsQuery zeroTermsQuery = MatchQuery.DEFAULT_ZERO_TERMS_QUERY;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (MatchPhraseQueryBuilder.SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (MAX_EXPANSIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxExpansion = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String zeroTermsValue = parser.text();\n                            if (\"none\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.NONE;\n                            } else if (\"all\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.ALL;\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"Unsupported zero_terms_query value [\" + zeroTermsValue + \"]\");\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.maxExpansions(maxExpansion);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        matchQuery.zeroTermsQuery(zeroTermsQuery);\n        return matchQuery;\n    }\n","date":"2020-07-20 22:44:31","endLine":292,"groupId":"56662","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0f/e41a94ddc3674ea8d3b0c46189789e79ba5ba4.src","preCode":"    public static MatchPhrasePrefixQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        int maxExpansion = FuzzyQuery.defaultMaxExpansions;\n        String queryName = null;\n        XContentParser.Token token;\n        String currentFieldName = null;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (MatchPhraseQueryBuilder.SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (MAX_EXPANSIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxExpansion = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.maxExpansions(maxExpansion);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return matchQuery;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"}],"commitId":"2c5c478875ee5e7534a13fe8c88368602a7ff437","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-20 22:44:31","modifiedFileCount":"143","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-02-10 00:56:00","codes":[{"authorDate":"2021-02-10 00:56:00","commitOrder":3,"curCode":"    public static MatchPhraseQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQueryParser.DEFAULT_PHRASE_SLOP;\n        ZeroTermsQuery zeroTermsQuery = MatchQueryParser.DEFAULT_ZERO_TERMS_QUERY;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String zeroTermsValue = parser.text();\n                            if (\"none\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.NONE;\n                            } else if (\"all\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.ALL;\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"Unsupported zero_terms_query value [\" + zeroTermsValue + \"]\");\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhraseQueryBuilder matchQuery = new MatchPhraseQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.zeroTermsQuery(zeroTermsQuery);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return matchQuery;\n    }\n","date":"2021-02-10 00:56:00","endLine":246,"groupId":"61063","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ba/568a594ada4a96dbd84ce1e610bab82b6c8f58.src","preCode":"    public static MatchPhraseQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        ZeroTermsQuery zeroTermsQuery = MatchQuery.DEFAULT_ZERO_TERMS_QUERY;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String zeroTermsValue = parser.text();\n                            if (\"none\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.NONE;\n                            } else if (\"all\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.ALL;\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"Unsupported zero_terms_query value [\" + zeroTermsValue + \"]\");\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhraseQueryBuilder matchQuery = new MatchPhraseQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.zeroTermsQuery(zeroTermsQuery);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return matchQuery;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhraseQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"},{"authorDate":"2021-02-10 00:56:00","commitOrder":3,"curCode":"    public static MatchPhrasePrefixQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQueryParser.DEFAULT_PHRASE_SLOP;\n        int maxExpansion = FuzzyQuery.defaultMaxExpansions;\n        String queryName = null;\n        XContentParser.Token token;\n        String currentFieldName = null;\n        ZeroTermsQuery zeroTermsQuery = MatchQueryParser.DEFAULT_ZERO_TERMS_QUERY;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (MatchPhraseQueryBuilder.SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (MAX_EXPANSIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxExpansion = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String zeroTermsValue = parser.text();\n                            if (\"none\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.NONE;\n                            } else if (\"all\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.ALL;\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"Unsupported zero_terms_query value [\" + zeroTermsValue + \"]\");\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.maxExpansions(maxExpansion);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        matchQuery.zeroTermsQuery(zeroTermsQuery);\n        return matchQuery;\n    }\n","date":"2021-02-10 00:56:00","endLine":281,"groupId":"56662","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/c7896bd730eb8afa5ce90ee9420e3989441688.src","preCode":"    public static MatchPhrasePrefixQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQuery.DEFAULT_PHRASE_SLOP;\n        int maxExpansion = FuzzyQuery.defaultMaxExpansions;\n        String queryName = null;\n        XContentParser.Token token;\n        String currentFieldName = null;\n        ZeroTermsQuery zeroTermsQuery = MatchQuery.DEFAULT_ZERO_TERMS_QUERY;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (MatchPhraseQueryBuilder.SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (MAX_EXPANSIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxExpansion = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String zeroTermsValue = parser.text();\n                            if (\"none\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.NONE;\n                            } else if (\"all\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.ALL;\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"Unsupported zero_terms_query value [\" + zeroTermsValue + \"]\");\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.maxExpansions(maxExpansion);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        matchQuery.zeroTermsQuery(zeroTermsQuery);\n        return matchQuery;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"}],"commitId":"936abca50a6d1dd68ed69317baa7016c9a66b843","commitMessage":"@@@Rename MatchQuery -> MatchQueryParser. (#68716)\n\nThis commit renames `MatchQuery` to make it clear it's not a query. Its purpose\nis actually to produce Lucene queries through its `parse` method.\n\nIt also renames `MultiMatchQuery` -> `MultiMatchQueryParser`.","date":"2021-02-10 00:56:00","modifiedFileCount":"17","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-04-21 21:28:12","codes":[{"authorDate":"2021-04-21 21:28:12","commitOrder":4,"curCode":"    public static MatchPhraseQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQueryParser.DEFAULT_PHRASE_SLOP;\n        ZeroTermsQueryOption zeroTermsQuery = MatchQueryParser.DEFAULT_ZERO_TERMS_QUERY;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String zeroTermsValue = parser.text();\n                            if (\"none\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQueryOption.NONE;\n                            } else if (\"all\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQueryOption.ALL;\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"Unsupported zero_terms_query value [\" + zeroTermsValue + \"]\");\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhraseQueryBuilder matchQuery = new MatchPhraseQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.zeroTermsQuery(zeroTermsQuery);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return matchQuery;\n    }\n","date":"2021-04-21 21:28:12","endLine":245,"groupId":"107871","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2d/a081ceef59ceb4b15babdb7a08beca0c1e3c19.src","preCode":"    public static MatchPhraseQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQueryParser.DEFAULT_PHRASE_SLOP;\n        ZeroTermsQuery zeroTermsQuery = MatchQueryParser.DEFAULT_ZERO_TERMS_QUERY;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String zeroTermsValue = parser.text();\n                            if (\"none\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.NONE;\n                            } else if (\"all\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.ALL;\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"Unsupported zero_terms_query value [\" + zeroTermsValue + \"]\");\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhraseQueryBuilder matchQuery = new MatchPhraseQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.zeroTermsQuery(zeroTermsQuery);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        return matchQuery;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhraseQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2021-04-21 21:28:12","commitOrder":4,"curCode":"    public static MatchPhrasePrefixQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQueryParser.DEFAULT_PHRASE_SLOP;\n        int maxExpansion = FuzzyQuery.defaultMaxExpansions;\n        String queryName = null;\n        XContentParser.Token token;\n        String currentFieldName = null;\n        ZeroTermsQueryOption zeroTermsQuery = MatchQueryParser.DEFAULT_ZERO_TERMS_QUERY;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (MatchPhraseQueryBuilder.SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (MAX_EXPANSIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxExpansion = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String zeroTermsValue = parser.text();\n                            if (\"none\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQueryOption.NONE;\n                            } else if (\"all\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQueryOption.ALL;\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"Unsupported zero_terms_query value [\" + zeroTermsValue + \"]\");\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.maxExpansions(maxExpansion);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        matchQuery.zeroTermsQuery(zeroTermsQuery);\n        return matchQuery;\n    }\n","date":"2021-04-21 21:28:12","endLine":280,"groupId":"107871","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/e7b5450484e33067da20878f34d3e74f8aa173.src","preCode":"    public static MatchPhrasePrefixQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        Object value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String analyzer = null;\n        int slop = MatchQueryParser.DEFAULT_PHRASE_SLOP;\n        int maxExpansion = FuzzyQuery.defaultMaxExpansions;\n        String queryName = null;\n        XContentParser.Token token;\n        String currentFieldName = null;\n        ZeroTermsQuery zeroTermsQuery = MatchQueryParser.DEFAULT_ZERO_TERMS_QUERY;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else if (token.isValue()) {\n                        if (MatchQueryBuilder.QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.objectText();\n                        } else if (MatchQueryBuilder.ANALYZER_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            analyzer = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (MatchPhraseQueryBuilder.SLOP_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            slop = parser.intValue();\n                        } else if (MAX_EXPANSIONS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxExpansion = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else if (ZERO_TERMS_QUERY_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String zeroTermsValue = parser.text();\n                            if (\"none\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.NONE;\n                            } else if (\"all\".equalsIgnoreCase(zeroTermsValue)) {\n                                zeroTermsQuery = ZeroTermsQuery.ALL;\n                            } else {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"Unsupported zero_terms_query value [\" + zeroTermsValue + \"]\");\n                            }\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    } else {\n                        throw new ParsingException(parser.getTokenLocation(),\n                                \"[\" + NAME + \"] unknown token [\" + token + \"] after [\" + currentFieldName + \"]\");\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.objectText();\n            }\n        }\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(fieldName, value);\n        matchQuery.analyzer(analyzer);\n        matchQuery.slop(slop);\n        matchQuery.maxExpansions(maxExpansion);\n        matchQuery.queryName(queryName);\n        matchQuery.boost(boost);\n        matchQuery.zeroTermsQuery(zeroTermsQuery);\n        return matchQuery;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"9a86dde3572a6f3999eea75bc3ce30b965837ba3","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-21 21:28:12","modifiedFileCount":"1285","status":"M","submitter":"iverase"}]
