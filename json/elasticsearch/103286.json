[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testNumeric() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        RegexpQueryBuilder query = new RegexpQueryBuilder(INT_FIELD_NAME, \"12\");\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class, () -> query.toQuery(context));\n        assertEquals(\"Can only use regexp queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n    }\n","date":"2018-04-26 03:22:53","endLine":123,"groupId":"69027","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/bb84c3239dd364a895bad45ae35c82f47a92a0.src","preCode":"    public void testNumeric() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        RegexpQueryBuilder query = new RegexpQueryBuilder(INT_FIELD_NAME, \"12\");\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class, () -> query.toQuery(context));\n        assertEquals(\"Can only use regexp queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RegexpQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testFuzzyNumeric() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        QueryStringQueryBuilder query = queryStringQuery(\"12~0.2\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use fuzzy queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","date":"2018-04-26 03:22:53","endLine":801,"groupId":"69027","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFuzzyNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/fc66b3985e19e663446f001ab216edcf8db93e.src","preCode":"    public void testFuzzyNumeric() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        QueryStringQueryBuilder query = queryStringQuery(\"12~0.2\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use fuzzy queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":791,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-07-27 17:51:09","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":2,"curCode":"    public void testNumeric() throws Exception {\n        RegexpQueryBuilder query = new RegexpQueryBuilder(INT_FIELD_NAME, \"12\");\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class, () -> query.toQuery(context));\n        assertEquals(\"Can only use regexp queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n    }\n","date":"2018-07-27 17:51:09","endLine":124,"groupId":"69027","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4b/a6165c061b24f765d8ea142210b3c27b01d7db.src","preCode":"    public void testNumeric() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        RegexpQueryBuilder query = new RegexpQueryBuilder(INT_FIELD_NAME, \"12\");\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class, () -> query.toQuery(context));\n        assertEquals(\"Can only use regexp queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RegexpQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2018-07-27 17:51:09","commitOrder":2,"curCode":"    public void testFuzzyNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12~0.2\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use fuzzy queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","date":"2018-07-27 17:51:09","endLine":782,"groupId":"69027","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFuzzyNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/87/197b662d142956ef2108dfad7672add3fb9657.src","preCode":"    public void testFuzzyNumeric() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        QueryStringQueryBuilder query = queryStringQuery(\"12~0.2\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use fuzzy queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":773,"status":"M"}],"commitId":"dfb277cfb7969ad543a31dea234579d0e886a73a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-27 17:51:09","modifiedFileCount":"105","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2019-04-05 16:35:35","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":3,"curCode":"    public void testNumeric() throws Exception {\n        RegexpQueryBuilder query = new RegexpQueryBuilder(INT_FIELD_NAME, \"12\");\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class, () -> query.toQuery(context));\n        assertEquals(\"Can only use regexp queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n    }\n","date":"2018-07-27 17:51:09","endLine":124,"groupId":"69027","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4b/a6165c061b24f765d8ea142210b3c27b01d7db.src","preCode":"    public void testNumeric() throws Exception {\n        RegexpQueryBuilder query = new RegexpQueryBuilder(INT_FIELD_NAME, \"12\");\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class, () -> query.toQuery(context));\n        assertEquals(\"Can only use regexp queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RegexpQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"},{"authorDate":"2019-04-05 16:35:35","commitOrder":3,"curCode":"    public void testFuzzyNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12~1.0\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use fuzzy queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","date":"2019-04-05 16:35:35","endLine":819,"groupId":"69027","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFuzzyNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/5ef842d68703b73ca131f2084ff91366168d21.src","preCode":"    public void testFuzzyNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12~0.2\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use fuzzy queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":810,"status":"M"}],"commitId":"1597f69e440fc288deb8cbab7545ad1bbf84eb79","commitMessage":"@@@Make Fuzziness reject illegal values earlier (#33511)\n\nThe current java implementation of Fuzziness leaves a lot of room for\ninitializing it with illegal values that either cause errors later when the\nqueries reach the shards where they are executed or values that are silently\nignored in favour of defaults. We should instead tighten the java implementation\nof the class so that we only accept supported values. Currently those are\nnumeric values representing the edit distances 0.  1 and 2.  optionally also as\nfloat or string.  and the \"AUTO\" fuzziness.  which can come in a cusomizable\nvariant that allows specifying two value that define the positions in a term\nwhere the AUTO option increases the allowed edit distance.\n\nThis change removes several redundant ways of object construction and adds input\nvalidation to the remaining ones. Java users should either use one of the\npredefined constants or use the static factory methods `fromEdits(int)` or\n`fromString(String)` to create instances of the class.  while other ctors are\nhidden. This allows for instance control.  e.g. returning one of the constants\nwhen creating instances from an integer value.\n\nPreviously the class would accept any positive integer value and any float\nvalue.  while in effect the maximum allowed edit distance was capped at 2 in\npractice. These values while throw an error now.  as will any other String value\nother than \"AUTO\" that where previously accepted but led to numeric exceptions\nwhen the query was executed.","date":"2019-04-05 16:35:35","modifiedFileCount":"14","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2020-10-13 17:05:43","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":4,"curCode":"    public void testNumeric() throws Exception {\n        RegexpQueryBuilder query = new RegexpQueryBuilder(INT_FIELD_NAME, \"12\");\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class, () -> query.toQuery(context));\n        assertEquals(\"Can only use regexp queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n    }\n","date":"2018-07-27 17:51:09","endLine":124,"groupId":"69027","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4b/a6165c061b24f765d8ea142210b3c27b01d7db.src","preCode":"    public void testNumeric() throws Exception {\n        RegexpQueryBuilder query = new RegexpQueryBuilder(INT_FIELD_NAME, \"12\");\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class, () -> query.toQuery(context));\n        assertEquals(\"Can only use regexp queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RegexpQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"},{"authorDate":"2020-10-13 17:05:43","commitOrder":4,"curCode":"    public void testFuzzyNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12~1.0\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use fuzzy queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), Matchers.instanceOf(MatchNoDocsQuery.class));\n    }\n","date":"2020-10-13 17:05:43","endLine":846,"groupId":"69027","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFuzzyNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4a/f6362b36df743eddff434b6a83acf6c5ea297b.src","preCode":"    public void testFuzzyNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12~1.0\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use fuzzy queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":837,"status":"M"}],"commitId":"f491422e1edf79ea08d5657b5035f4a5ee444442","commitMessage":"@@@Ensure field types consistency on supporting text queries (#63487)\n\nSome supported field types don't support term queries.  and throw exception in their termQuery method. That exception is either an IllegalArgumentException or a QueryShardException. There is logic in MatchQuery that skips the field or not depending on the exception that is thrown.\n\nAlso.  such field types should hold a TextSearchInfo.NONE while that is not always the case.\n\nWith this commit we make the following changes:\n\n- streamline using TextSearchInfo.NONE in all field types that don't support text queries\n- standardize the exception being thrown when a field type does not support term queries to be IllegalArgumentException. Note that this is not a breaking change as both exceptions previously returned translated to 400 status code.\n- Adapt the MatchQuery logic to skip fields that don't support term queries. There is no need to call termQuery passing an empty string and catch exceptions potentially thrown. We can rather check the TextSearchInfo which tells already whether the field supports text queries or not.\n- add a test method to MapperTestCase that verifies the consistency of a field type by verifying that it is not searchable whenever it uses TextSearchInfo.NONE.  while it is otherwise. This is what triggered all of the above changes.","date":"2020-10-13 17:05:43","modifiedFileCount":"41","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":5,"curCode":"    public void testNumeric() throws Exception {\n        RegexpQueryBuilder query = new RegexpQueryBuilder(INT_FIELD_NAME, \"12\");\n        SearchExecutionContext context = createSearchExecutionContext();\n        QueryShardException e = expectThrows(QueryShardException.class, () -> query.toQuery(context));\n        assertEquals(\"Can only use regexp queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n    }\n","date":"2021-01-15 01:11:59","endLine":127,"groupId":"103286","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f8/ad6e2cb56d14e1633229914e7af4a63c886575.src","preCode":"    public void testNumeric() throws Exception {\n        RegexpQueryBuilder query = new RegexpQueryBuilder(INT_FIELD_NAME, \"12\");\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class, () -> query.toQuery(context));\n        assertEquals(\"Can only use regexp queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RegexpQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":5,"curCode":"    public void testFuzzyNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12~1.0\").defaultField(INT_FIELD_NAME);\n        SearchExecutionContext context = createSearchExecutionContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use fuzzy queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), Matchers.instanceOf(MatchNoDocsQuery.class));\n    }\n","date":"2021-01-15 01:11:59","endLine":846,"groupId":"103286","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testFuzzyNumeric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/f2b7c45a7bb331c91e314966d9eec736b3e669.src","preCode":"    public void testFuzzyNumeric() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"12~1.0\").defaultField(INT_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n                () -> query.toQuery(context));\n        assertEquals(\"Can only use fuzzy queries on keyword and text fields - not on [mapped_int] which is of type [integer]\",\n                e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), Matchers.instanceOf(MatchNoDocsQuery.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":837,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
