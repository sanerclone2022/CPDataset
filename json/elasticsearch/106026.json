[{"authorTime":"2019-10-21 17:10:34","codes":[{"authorDate":"2019-10-21 17:10:34","commitOrder":4,"curCode":"    protected GetIndexResponse createTestInstance() {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetaData> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetaData>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, GetMappingsResponseTests.createMappingsForIndex());\n\n            List<AliasMetaData> aliasMetaDataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetaDataList.add(GetAliasesResponseTests.createAliasMetaData());\n            }\n            CollectionUtil.timSort(aliasMetaDataList, Comparator.comparing(AliasMetaData::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetaDataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n        }\n        return new GetIndexResponse(\n            indices, mappings.build(), aliases.build(), settings.build(), defaultSettings.build()\n        );\n    }\n","date":"2019-10-21 17:10:34","endLine":77,"groupId":"21538","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/6b6ff11288c74819ffaa1f5fded8d08e267458.src","preCode":"    protected GetIndexResponse createTestInstance() {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetaData> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetaData>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, GetMappingsResponseTests.createMappingsForIndex());\n\n            List<AliasMetaData> aliasMetaDataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetaDataList.add(GetAliasesResponseTests.createAliasMetaData());\n            }\n            CollectionUtil.timSort(aliasMetaDataList, Comparator.comparing(AliasMetaData::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetaDataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n        }\n        return new GetIndexResponse(\n            indices, mappings.build(), aliases.build(), settings.build(), defaultSettings.build()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/indices/get/GetIndexResponseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"MB"},{"authorDate":"2019-10-21 17:10:34","commitOrder":4,"curCode":"    protected org.elasticsearch.action.admin.indices.get.GetIndexResponse createServerTestInstance(XContentType xContentType) {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetaData> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetaData>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, createMappingsForIndex());\n\n            List<AliasMetaData> aliasMetaDataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetaDataList.add(GetAliasesResponseTests.createAliasMetaData());\n            }\n            CollectionUtil.timSort(aliasMetaDataList, Comparator.comparing(AliasMetaData::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetaDataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n        }\n        return new org.elasticsearch.action.admin.indices.get.GetIndexResponse(indices,\n            mappings.build(), aliases.build(), settings.build(), defaultSettings.build());\n    }\n","date":"2019-10-21 17:10:34","endLine":77,"groupId":"21538","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createServerTestInstance","params":"(XContentTypexContentType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/82/96b3bce03f1da2a177ce51b4b05071e4f83788.src","preCode":"    protected org.elasticsearch.action.admin.indices.get.GetIndexResponse createServerTestInstance(XContentType xContentType) {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetaData> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetaData>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, createMappingsForIndex());\n\n            List<AliasMetaData> aliasMetaDataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetaDataList.add(GetAliasesResponseTests.createAliasMetaData());\n            }\n            CollectionUtil.timSort(aliasMetaDataList, Comparator.comparing(AliasMetaData::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetaDataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n        }\n        return new org.elasticsearch.action.admin.indices.get.GetIndexResponse(indices,\n            mappings.build(), aliases.build(), settings.build(), defaultSettings.build());\n    }\n","realPath":"client/rest-high-level/src/test/java/org/elasticsearch/client/indices/GetIndexResponseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"afeee4be9ebdd675459e01b6954ac575cb156c2f","commitMessage":"@@@Remove type filter from GetMappings API (#47364)\n\nThis commit removes the types filter from the GetMappings API.  which is no longer\nuseful seeing as we can only have a single mapping type per index. It also changes\nthe structure of GetMappingsResponse and GetIndexResponse to remove the extra\nnesting of mappings below the no-longer-relevant type name.  and removes the types\nmethods from the equivalent request classes.\n\nRelates to #41059","date":"2019-10-21 17:10:34","modifiedFileCount":"55","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":5,"curCode":"    protected GetIndexResponse createTestInstance() {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetadata> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetadata>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, GetMappingsResponseTests.createMappingsForIndex());\n\n            List<AliasMetadata> aliasMetadataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetadataList.add(GetAliasesResponseTests.createAliasMetadata());\n            }\n            CollectionUtil.timSort(aliasMetadataList, Comparator.comparing(AliasMetadata::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetadataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n        }\n        return new GetIndexResponse(\n            indices, mappings.build(), aliases.build(), settings.build(), defaultSettings.build()\n        );\n    }\n","date":"2020-04-01 03:52:01","endLine":77,"groupId":"21538","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/59/963e191976a4a6a09630b9293fdb3d49548e67.src","preCode":"    protected GetIndexResponse createTestInstance() {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetaData> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetaData>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, GetMappingsResponseTests.createMappingsForIndex());\n\n            List<AliasMetaData> aliasMetaDataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetaDataList.add(GetAliasesResponseTests.createAliasMetaData());\n            }\n            CollectionUtil.timSort(aliasMetaDataList, Comparator.comparing(AliasMetaData::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetaDataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n        }\n        return new GetIndexResponse(\n            indices, mappings.build(), aliases.build(), settings.build(), defaultSettings.build()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/indices/get/GetIndexResponseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":5,"curCode":"    protected org.elasticsearch.action.admin.indices.get.GetIndexResponse createServerTestInstance(XContentType xContentType) {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetadata> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetadata>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, createMappingsForIndex());\n\n            List<AliasMetadata> aliasMetadataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetadataList.add(GetAliasesResponseTests.createAliasMetadata());\n            }\n            CollectionUtil.timSort(aliasMetadataList, Comparator.comparing(AliasMetadata::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetadataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n        }\n        return new org.elasticsearch.action.admin.indices.get.GetIndexResponse(indices,\n            mappings.build(), aliases.build(), settings.build(), defaultSettings.build());\n    }\n","date":"2020-04-01 03:52:01","endLine":77,"groupId":"21538","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createServerTestInstance","params":"(XContentTypexContentType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/6ca851ecec6344664259287e354b7d9b2e8b67.src","preCode":"    protected org.elasticsearch.action.admin.indices.get.GetIndexResponse createServerTestInstance(XContentType xContentType) {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetaData> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetaData>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, createMappingsForIndex());\n\n            List<AliasMetaData> aliasMetaDataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetaDataList.add(GetAliasesResponseTests.createAliasMetaData());\n            }\n            CollectionUtil.timSort(aliasMetaDataList, Comparator.comparing(AliasMetaData::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetaDataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n        }\n        return new org.elasticsearch.action.admin.indices.get.GetIndexResponse(indices,\n            mappings.build(), aliases.build(), settings.build(), defaultSettings.build());\n    }\n","realPath":"client/rest-high-level/src/test/java/org/elasticsearch/client/indices/GetIndexResponseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-05-06 02:40:15","codes":[{"authorDate":"2020-05-06 02:40:15","commitOrder":6,"curCode":"    protected GetIndexResponse createTestInstance() {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetadata> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetadata>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, String> dataStreams = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, GetMappingsResponseTests.createMappingsForIndex());\n\n            List<AliasMetadata> aliasMetadataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetadataList.add(GetAliasesResponseTests.createAliasMetadata());\n            }\n            CollectionUtil.timSort(aliasMetadataList, Comparator.comparing(AliasMetadata::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetadataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n\n            if (randomBoolean()) {\n                dataStreams.put(index, randomAlphaOfLength(5).toLowerCase(Locale.ROOT));\n            }\n        }\n        return new GetIndexResponse(\n            indices, mappings.build(), aliases.build(), settings.build(), defaultSettings.build(), dataStreams.build()\n        );\n    }\n","date":"2020-05-06 02:40:15","endLine":83,"groupId":"72733","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/55/f73827df3df82e5981e2b5227cbf512960e4a2.src","preCode":"    protected GetIndexResponse createTestInstance() {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetadata> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetadata>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, GetMappingsResponseTests.createMappingsForIndex());\n\n            List<AliasMetadata> aliasMetadataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetadataList.add(GetAliasesResponseTests.createAliasMetadata());\n            }\n            CollectionUtil.timSort(aliasMetadataList, Comparator.comparing(AliasMetadata::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetadataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n        }\n        return new GetIndexResponse(\n            indices, mappings.build(), aliases.build(), settings.build(), defaultSettings.build()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/indices/get/GetIndexResponseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-05-06 02:40:15","commitOrder":6,"curCode":"    protected org.elasticsearch.action.admin.indices.get.GetIndexResponse createServerTestInstance(XContentType xContentType) {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetadata> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetadata>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, String> dataStreams = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, createMappingsForIndex());\n\n            List<AliasMetadata> aliasMetadataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetadataList.add(GetAliasesResponseTests.createAliasMetadata());\n            }\n            CollectionUtil.timSort(aliasMetadataList, Comparator.comparing(AliasMetadata::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetadataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n\n            if (randomBoolean()) {\n                dataStreams.put(index, randomAlphaOfLength(5).toLowerCase(Locale.ROOT));\n            }\n        }\n        return new org.elasticsearch.action.admin.indices.get.GetIndexResponse(indices,\n            mappings.build(), aliases.build(), settings.build(), defaultSettings.build(), dataStreams.build());\n    }\n","date":"2020-05-06 02:40:15","endLine":83,"groupId":"72733","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createServerTestInstance","params":"(XContentTypexContentType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/4121db7bdaf7e3906a9e8c8e15d5ee47d2c7a3.src","preCode":"    protected org.elasticsearch.action.admin.indices.get.GetIndexResponse createServerTestInstance(XContentType xContentType) {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetadata> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetadata>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, createMappingsForIndex());\n\n            List<AliasMetadata> aliasMetadataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetadataList.add(GetAliasesResponseTests.createAliasMetadata());\n            }\n            CollectionUtil.timSort(aliasMetadataList, Comparator.comparing(AliasMetadata::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetadataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n        }\n        return new org.elasticsearch.action.admin.indices.get.GetIndexResponse(indices,\n            mappings.build(), aliases.build(), settings.build(), defaultSettings.build());\n    }\n","realPath":"client/rest-high-level/src/test/java/org/elasticsearch/client/indices/GetIndexResponseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"117055d49e6bed1c553ed937c6a5a54e89a37f9a","commitMessage":"@@@Get index includes parent data stream for backing indices (#56022)\n\n","date":"2020-05-06 02:40:15","modifiedFileCount":"10","status":"M","submitter":"Dan Hermann"},{"authorTime":"2020-05-06 02:40:15","codes":[{"authorDate":"2021-09-11 01:35:50","commitOrder":7,"curCode":"    protected GetIndexResponse createTestInstance() {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetadata> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetadata>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, String> dataStreams = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index : indices) {\n            mappings.put(index, GetMappingsResponseTests.createMappingsForIndex());\n\n            List<AliasMetadata> aliasMetadataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i = 0; i < aliasesNum; i++) {\n                aliasMetadataList.add(GetAliasesResponseTests.createAliasMetadata(\n                    s -> aliasMetadataList.stream().map(AliasMetadata::alias).collect(Collectors.toList()).contains(s))\n                );\n            }\n            CollectionUtil.timSort(aliasMetadataList, Comparator.comparing(AliasMetadata::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetadataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n\n            if (randomBoolean()) {\n                dataStreams.put(index, randomAlphaOfLength(5).toLowerCase(Locale.ROOT));\n            }\n        }\n        return new GetIndexResponse(\n            indices, mappings.build(), aliases.build(), settings.build(), defaultSettings.build(), dataStreams.build()\n        );\n    }\n","date":"2021-09-11 01:35:50","endLine":77,"groupId":"106026","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"createTestInstance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/41/f707a506adcc545a66144438abf4b6310da00f.src","preCode":"    protected GetIndexResponse createTestInstance() {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetadata> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetadata>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, String> dataStreams = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, GetMappingsResponseTests.createMappingsForIndex());\n\n            List<AliasMetadata> aliasMetadataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetadataList.add(GetAliasesResponseTests.createAliasMetadata());\n            }\n            CollectionUtil.timSort(aliasMetadataList, Comparator.comparing(AliasMetadata::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetadataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n\n            if (randomBoolean()) {\n                dataStreams.put(index, randomAlphaOfLength(5).toLowerCase(Locale.ROOT));\n            }\n        }\n        return new GetIndexResponse(\n            indices, mappings.build(), aliases.build(), settings.build(), defaultSettings.build(), dataStreams.build()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/indices/get/GetIndexResponseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2020-05-06 02:40:15","commitOrder":7,"curCode":"    protected org.elasticsearch.action.admin.indices.get.GetIndexResponse createServerTestInstance(XContentType xContentType) {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetadata> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetadata>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, String> dataStreams = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, createMappingsForIndex());\n\n            List<AliasMetadata> aliasMetadataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetadataList.add(GetAliasesResponseTests.createAliasMetadata());\n            }\n            CollectionUtil.timSort(aliasMetadataList, Comparator.comparing(AliasMetadata::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetadataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n\n            if (randomBoolean()) {\n                dataStreams.put(index, randomAlphaOfLength(5).toLowerCase(Locale.ROOT));\n            }\n        }\n        return new org.elasticsearch.action.admin.indices.get.GetIndexResponse(indices,\n            mappings.build(), aliases.build(), settings.build(), defaultSettings.build(), dataStreams.build());\n    }\n","date":"2020-05-06 02:40:15","endLine":83,"groupId":"106026","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createServerTestInstance","params":"(XContentTypexContentType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/4121db7bdaf7e3906a9e8c8e15d5ee47d2c7a3.src","preCode":"    protected org.elasticsearch.action.admin.indices.get.GetIndexResponse createServerTestInstance(XContentType xContentType) {\n        String[] indices = generateRandomStringArray(5, 5, false, false);\n        ImmutableOpenMap.Builder<String, MappingMetadata> mappings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, List<AliasMetadata>> aliases = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> settings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, Settings> defaultSettings = ImmutableOpenMap.builder();\n        ImmutableOpenMap.Builder<String, String> dataStreams = ImmutableOpenMap.builder();\n        IndexScopedSettings indexScopedSettings = IndexScopedSettings.DEFAULT_SCOPED_SETTINGS;\n        boolean includeDefaults = randomBoolean();\n        for (String index: indices) {\n            mappings.put(index, createMappingsForIndex());\n\n            List<AliasMetadata> aliasMetadataList = new ArrayList<>();\n            int aliasesNum = randomIntBetween(0, 3);\n            for (int i=0; i<aliasesNum; i++) {\n                aliasMetadataList.add(GetAliasesResponseTests.createAliasMetadata());\n            }\n            CollectionUtil.timSort(aliasMetadataList, Comparator.comparing(AliasMetadata::alias));\n            aliases.put(index, Collections.unmodifiableList(aliasMetadataList));\n\n            Settings.Builder builder = Settings.builder();\n            builder.put(RandomCreateIndexGenerator.randomIndexSettings());\n            settings.put(index, builder.build());\n\n            if (includeDefaults) {\n                defaultSettings.put(index, indexScopedSettings.diff(settings.get(index), Settings.EMPTY));\n            }\n\n            if (randomBoolean()) {\n                dataStreams.put(index, randomAlphaOfLength(5).toLowerCase(Locale.ROOT));\n            }\n        }\n        return new org.elasticsearch.action.admin.indices.get.GetIndexResponse(indices,\n            mappings.build(), aliases.build(), settings.build(), defaultSettings.build(), dataStreams.build());\n    }\n","realPath":"client/rest-high-level/src/test/java/org/elasticsearch/client/indices/GetIndexResponseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"1544b3a28d61e676748a29c4d7f4194b68b1a519","commitMessage":"@@@Fix failing GetIndexResponse test (#77554)\n\n","date":"2021-09-11 01:35:50","modifiedFileCount":"2","status":"M","submitter":"Dan Hermann"}]
