[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"  public final DstatementContext dstatement() throws RecognitionException {\n    DstatementContext _localctx = new DstatementContext(_ctx, getState());\n    enterRule(_localctx, 10, RULE_dstatement);\n    try {\n      setState(187);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {\n      case 1:\n        _localctx = new DoContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(172);\n        match(DO);\n        setState(173);\n        block();\n        setState(174);\n        match(WHILE);\n        setState(175);\n        match(LP);\n        setState(176);\n        expression(0);\n        setState(177);\n        match(RP);\n        }\n        break;\n      case 2:\n        _localctx = new DeclContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(179);\n        declaration();\n        }\n        break;\n      case 3:\n        _localctx = new ContinueContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(180);\n        match(CONTINUE);\n        }\n        break;\n      case 4:\n        _localctx = new BreakContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(181);\n        match(BREAK);\n        }\n        break;\n      case 5:\n        _localctx = new ReturnContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(182);\n        match(RETURN);\n        setState(183);\n        expression(0);\n        }\n        break;\n      case 6:\n        _localctx = new ThrowContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(184);\n        match(THROW);\n        setState(185);\n        expression(0);\n        }\n        break;\n      case 7:\n        _localctx = new ExprContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(186);\n        expression(0);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-04-26 03:22:53","endLine":1028,"groupId":"35679","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"dstatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/a53d650ad327d8b991fb546f28b255cecbd9ef.src","preCode":"  public final DstatementContext dstatement() throws RecognitionException {\n    DstatementContext _localctx = new DstatementContext(_ctx, getState());\n    enterRule(_localctx, 10, RULE_dstatement);\n    try {\n      setState(187);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {\n      case 1:\n        _localctx = new DoContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(172);\n        match(DO);\n        setState(173);\n        block();\n        setState(174);\n        match(WHILE);\n        setState(175);\n        match(LP);\n        setState(176);\n        expression(0);\n        setState(177);\n        match(RP);\n        }\n        break;\n      case 2:\n        _localctx = new DeclContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(179);\n        declaration();\n        }\n        break;\n      case 3:\n        _localctx = new ContinueContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(180);\n        match(CONTINUE);\n        }\n        break;\n      case 4:\n        _localctx = new BreakContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(181);\n        match(BREAK);\n        }\n        break;\n      case 5:\n        _localctx = new ReturnContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(182);\n        match(RETURN);\n        setState(183);\n        expression(0);\n        }\n        break;\n      case 6:\n        _localctx = new ThrowContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(184);\n        match(THROW);\n        setState(185);\n        expression(0);\n        }\n        break;\n      case 7:\n        _localctx = new ExprContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(186);\n        expression(0);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":940,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"  public final ArrayinitializerContext arrayinitializer() throws RecognitionException {\n    ArrayinitializerContext _localctx = new ArrayinitializerContext(_ctx, getState());\n    enterRule(_localctx, 48, RULE_arrayinitializer);\n    int _la;\n    try {\n      int _alt;\n      setState(412);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {\n      case 1:\n        _localctx = new NewstandardarrayContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(371);\n        match(NEW);\n        setState(372);\n        match(TYPE);\n        setState(377); \n        _errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n          case 1:\n            {\n            {\n            setState(373);\n            match(LBRACE);\n            setState(374);\n            expression(0);\n            setState(375);\n            match(RBRACE);\n            }\n            }\n            break;\n          default:\n            throw new NoViableAltException(this);\n          }\n          setState(379); \n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,31,_ctx);\n        } while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );\n        setState(388);\n        _errHandler.sync(this);\n        switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {\n        case 1:\n          {\n          setState(381);\n          postdot();\n          setState(385);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,32,_ctx);\n          while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n            if ( _alt==1 ) {\n              {\n              {\n              setState(382);\n              postfix();\n              }\n              } \n            }\n            setState(387);\n            _errHandler.sync(this);\n            _alt = getInterpreter().adaptivePredict(_input,32,_ctx);\n          }\n          }\n          break;\n        }\n        }\n        break;\n      case 2:\n        _localctx = new NewinitializedarrayContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(390);\n        match(NEW);\n        setState(391);\n        match(TYPE);\n        setState(392);\n        match(LBRACE);\n        setState(393);\n        match(RBRACE);\n        setState(394);\n        match(LBRACK);\n        setState(403);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(395);\n          expression(0);\n          setState(400);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==COMMA) {\n            {\n            {\n            setState(396);\n            match(COMMA);\n            setState(397);\n            expression(0);\n            }\n            }\n            setState(402);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(405);\n        match(RBRACK);\n        setState(409);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,36,_ctx);\n        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n          if ( _alt==1 ) {\n            {\n            {\n            setState(406);\n            postfix();\n            }\n            } \n          }\n          setState(411);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,36,_ctx);\n        }\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-04-26 03:22:53","endLine":3014,"groupId":"27372","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"arrayinitializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/a53d650ad327d8b991fb546f28b255cecbd9ef.src","preCode":"  public final ArrayinitializerContext arrayinitializer() throws RecognitionException {\n    ArrayinitializerContext _localctx = new ArrayinitializerContext(_ctx, getState());\n    enterRule(_localctx, 48, RULE_arrayinitializer);\n    int _la;\n    try {\n      int _alt;\n      setState(412);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {\n      case 1:\n        _localctx = new NewstandardarrayContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(371);\n        match(NEW);\n        setState(372);\n        match(TYPE);\n        setState(377); \n        _errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n          case 1:\n            {\n            {\n            setState(373);\n            match(LBRACE);\n            setState(374);\n            expression(0);\n            setState(375);\n            match(RBRACE);\n            }\n            }\n            break;\n          default:\n            throw new NoViableAltException(this);\n          }\n          setState(379); \n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,31,_ctx);\n        } while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );\n        setState(388);\n        _errHandler.sync(this);\n        switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {\n        case 1:\n          {\n          setState(381);\n          postdot();\n          setState(385);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,32,_ctx);\n          while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n            if ( _alt==1 ) {\n              {\n              {\n              setState(382);\n              postfix();\n              }\n              } \n            }\n            setState(387);\n            _errHandler.sync(this);\n            _alt = getInterpreter().adaptivePredict(_input,32,_ctx);\n          }\n          }\n          break;\n        }\n        }\n        break;\n      case 2:\n        _localctx = new NewinitializedarrayContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(390);\n        match(NEW);\n        setState(391);\n        match(TYPE);\n        setState(392);\n        match(LBRACE);\n        setState(393);\n        match(RBRACE);\n        setState(394);\n        match(LBRACK);\n        setState(403);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(395);\n          expression(0);\n          setState(400);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==COMMA) {\n            {\n            {\n            setState(396);\n            match(COMMA);\n            setState(397);\n            expression(0);\n            }\n            }\n            setState(402);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(405);\n        match(RBRACK);\n        setState(409);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,36,_ctx);\n        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n          if ( _alt==1 ) {\n            {\n            {\n            setState(406);\n            postfix();\n            }\n            } \n          }\n          setState(411);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,36,_ctx);\n        }\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2875,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-08-29 22:28:23","codes":[{"authorDate":"2018-08-29 22:28:23","commitOrder":2,"curCode":"  public final DstatementContext dstatement() throws RecognitionException {\n    DstatementContext _localctx = new DstatementContext(_ctx, getState());\n    enterRule(_localctx, 10, RULE_dstatement);\n    try {\n      setState(184);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {\n      case 1:\n        _localctx = new DoContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(169);\n        match(DO);\n        setState(170);\n        block();\n        setState(171);\n        match(WHILE);\n        setState(172);\n        match(LP);\n        setState(173);\n        expression(0);\n        setState(174);\n        match(RP);\n        }\n        break;\n      case 2:\n        _localctx = new DeclContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(176);\n        declaration();\n        }\n        break;\n      case 3:\n        _localctx = new ContinueContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(177);\n        match(CONTINUE);\n        }\n        break;\n      case 4:\n        _localctx = new BreakContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(178);\n        match(BREAK);\n        }\n        break;\n      case 5:\n        _localctx = new ReturnContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(179);\n        match(RETURN);\n        setState(180);\n        expression(0);\n        }\n        break;\n      case 6:\n        _localctx = new ThrowContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(181);\n        match(THROW);\n        setState(182);\n        expression(0);\n        }\n        break;\n      case 7:\n        _localctx = new ExprContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(183);\n        expression(0);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-08-29 22:28:23","endLine":1021,"groupId":"35679","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"dstatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/823ecfda30805083ccee1318afbacf592c0e76.src","preCode":"  public final DstatementContext dstatement() throws RecognitionException {\n    DstatementContext _localctx = new DstatementContext(_ctx, getState());\n    enterRule(_localctx, 10, RULE_dstatement);\n    try {\n      setState(187);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {\n      case 1:\n        _localctx = new DoContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(172);\n        match(DO);\n        setState(173);\n        block();\n        setState(174);\n        match(WHILE);\n        setState(175);\n        match(LP);\n        setState(176);\n        expression(0);\n        setState(177);\n        match(RP);\n        }\n        break;\n      case 2:\n        _localctx = new DeclContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(179);\n        declaration();\n        }\n        break;\n      case 3:\n        _localctx = new ContinueContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(180);\n        match(CONTINUE);\n        }\n        break;\n      case 4:\n        _localctx = new BreakContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(181);\n        match(BREAK);\n        }\n        break;\n      case 5:\n        _localctx = new ReturnContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(182);\n        match(RETURN);\n        setState(183);\n        expression(0);\n        }\n        break;\n      case 6:\n        _localctx = new ThrowContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(184);\n        match(THROW);\n        setState(185);\n        expression(0);\n        }\n        break;\n      case 7:\n        _localctx = new ExprContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(186);\n        expression(0);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":933,"status":"M"},{"authorDate":"2018-08-29 22:28:23","commitOrder":2,"curCode":"  public final ArrayinitializerContext arrayinitializer() throws RecognitionException {\n    ArrayinitializerContext _localctx = new ArrayinitializerContext(_ctx, getState());\n    enterRule(_localctx, 48, RULE_arrayinitializer);\n    int _la;\n    try {\n      int _alt;\n      setState(409);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {\n      case 1:\n        _localctx = new NewstandardarrayContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(368);\n        match(NEW);\n        setState(369);\n        match(TYPE);\n        setState(374); \n        _errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n          case 1:\n            {\n            {\n            setState(370);\n            match(LBRACE);\n            setState(371);\n            expression(0);\n            setState(372);\n            match(RBRACE);\n            }\n            }\n            break;\n          default:\n            throw new NoViableAltException(this);\n          }\n          setState(376); \n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,30,_ctx);\n        } while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );\n        setState(385);\n        _errHandler.sync(this);\n        switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {\n        case 1:\n          {\n          setState(378);\n          postdot();\n          setState(382);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,31,_ctx);\n          while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n            if ( _alt==1 ) {\n              {\n              {\n              setState(379);\n              postfix();\n              }\n              } \n            }\n            setState(384);\n            _errHandler.sync(this);\n            _alt = getInterpreter().adaptivePredict(_input,31,_ctx);\n          }\n          }\n          break;\n        }\n        }\n        break;\n      case 2:\n        _localctx = new NewinitializedarrayContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(387);\n        match(NEW);\n        setState(388);\n        match(TYPE);\n        setState(389);\n        match(LBRACE);\n        setState(390);\n        match(RBRACE);\n        setState(391);\n        match(LBRACK);\n        setState(400);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(392);\n          expression(0);\n          setState(397);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==COMMA) {\n            {\n            {\n            setState(393);\n            match(COMMA);\n            setState(394);\n            expression(0);\n            }\n            }\n            setState(399);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(402);\n        match(RBRACK);\n        setState(406);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,35,_ctx);\n        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n          if ( _alt==1 ) {\n            {\n            {\n            setState(403);\n            postfix();\n            }\n            } \n          }\n          setState(408);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,35,_ctx);\n        }\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-08-29 22:28:23","endLine":3007,"groupId":"27372","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"arrayinitializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/823ecfda30805083ccee1318afbacf592c0e76.src","preCode":"  public final ArrayinitializerContext arrayinitializer() throws RecognitionException {\n    ArrayinitializerContext _localctx = new ArrayinitializerContext(_ctx, getState());\n    enterRule(_localctx, 48, RULE_arrayinitializer);\n    int _la;\n    try {\n      int _alt;\n      setState(412);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {\n      case 1:\n        _localctx = new NewstandardarrayContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(371);\n        match(NEW);\n        setState(372);\n        match(TYPE);\n        setState(377);\n        _errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n          case 1:\n            {\n            {\n            setState(373);\n            match(LBRACE);\n            setState(374);\n            expression(0);\n            setState(375);\n            match(RBRACE);\n            }\n            }\n            break;\n          default:\n            throw new NoViableAltException(this);\n          }\n          setState(379);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,31,_ctx);\n        } while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );\n        setState(388);\n        _errHandler.sync(this);\n        switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {\n        case 1:\n          {\n          setState(381);\n          postdot();\n          setState(385);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,32,_ctx);\n          while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n            if ( _alt==1 ) {\n              {\n              {\n              setState(382);\n              postfix();\n              }\n              }\n            }\n            setState(387);\n            _errHandler.sync(this);\n            _alt = getInterpreter().adaptivePredict(_input,32,_ctx);\n          }\n          }\n          break;\n        }\n        }\n        break;\n      case 2:\n        _localctx = new NewinitializedarrayContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(390);\n        match(NEW);\n        setState(391);\n        match(TYPE);\n        setState(392);\n        match(LBRACE);\n        setState(393);\n        match(RBRACE);\n        setState(394);\n        match(LBRACK);\n        setState(403);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(395);\n          expression(0);\n          setState(400);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==COMMA) {\n            {\n            {\n            setState(396);\n            match(COMMA);\n            setState(397);\n            expression(0);\n            }\n            }\n            setState(402);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(405);\n        match(RBRACK);\n        setState(409);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,36,_ctx);\n        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n          if ( _alt==1 ) {\n            {\n            {\n            setState(406);\n            postfix();\n            }\n            }\n          }\n          setState(411);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,36,_ctx);\n        }\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2868,"status":"M"}],"commitId":"454ce99b01ceb7a47e2652e783a9c833c8dbec30","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-29 22:28:23","modifiedFileCount":"178","status":"M","submitter":"Gordon Brown"},{"authorTime":"2019-02-01 00:32:38","codes":[{"authorDate":"2019-02-01 00:32:38","commitOrder":3,"curCode":"  public final DstatementContext dstatement() throws RecognitionException {\n    DstatementContext _localctx = new DstatementContext(_ctx, getState());\n    enterRule(_localctx, 10, RULE_dstatement);\n    int _la;\n    try {\n      setState(186);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {\n      case 1:\n        _localctx = new DoContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(169);\n        match(DO);\n        setState(170);\n        block();\n        setState(171);\n        match(WHILE);\n        setState(172);\n        match(LP);\n        setState(173);\n        expression(0);\n        setState(174);\n        match(RP);\n        }\n        break;\n      case 2:\n        _localctx = new DeclContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(176);\n        declaration();\n        }\n        break;\n      case 3:\n        _localctx = new ContinueContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(177);\n        match(CONTINUE);\n        }\n        break;\n      case 4:\n        _localctx = new BreakContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(178);\n        match(BREAK);\n        }\n        break;\n      case 5:\n        _localctx = new ReturnContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(179);\n        match(RETURN);\n        setState(181);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(180);\n          expression(0);\n          }\n        }\n\n        }\n        break;\n      case 6:\n        _localctx = new ThrowContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(183);\n        match(THROW);\n        setState(184);\n        expression(0);\n        }\n        break;\n      case 7:\n        _localctx = new ExprContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(185);\n        expression(0);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-01 00:32:38","endLine":1029,"groupId":"69842","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"dstatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/23ab42a94ad47d18279848cd1ad370fefbd548.src","preCode":"  public final DstatementContext dstatement() throws RecognitionException {\n    DstatementContext _localctx = new DstatementContext(_ctx, getState());\n    enterRule(_localctx, 10, RULE_dstatement);\n    try {\n      setState(184);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {\n      case 1:\n        _localctx = new DoContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(169);\n        match(DO);\n        setState(170);\n        block();\n        setState(171);\n        match(WHILE);\n        setState(172);\n        match(LP);\n        setState(173);\n        expression(0);\n        setState(174);\n        match(RP);\n        }\n        break;\n      case 2:\n        _localctx = new DeclContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(176);\n        declaration();\n        }\n        break;\n      case 3:\n        _localctx = new ContinueContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(177);\n        match(CONTINUE);\n        }\n        break;\n      case 4:\n        _localctx = new BreakContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(178);\n        match(BREAK);\n        }\n        break;\n      case 5:\n        _localctx = new ReturnContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(179);\n        match(RETURN);\n        setState(180);\n        expression(0);\n        }\n        break;\n      case 6:\n        _localctx = new ThrowContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(181);\n        match(THROW);\n        setState(182);\n        expression(0);\n        }\n        break;\n      case 7:\n        _localctx = new ExprContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(183);\n        expression(0);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":933,"status":"M"},{"authorDate":"2019-02-01 00:32:38","commitOrder":3,"curCode":"  public final ArrayinitializerContext arrayinitializer() throws RecognitionException {\n    ArrayinitializerContext _localctx = new ArrayinitializerContext(_ctx, getState());\n    enterRule(_localctx, 48, RULE_arrayinitializer);\n    int _la;\n    try {\n      int _alt;\n      setState(411);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {\n      case 1:\n        _localctx = new NewstandardarrayContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(370);\n        match(NEW);\n        setState(371);\n        match(TYPE);\n        setState(376); \n        _errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n          case 1:\n            {\n            {\n            setState(372);\n            match(LBRACE);\n            setState(373);\n            expression(0);\n            setState(374);\n            match(RBRACE);\n            }\n            }\n            break;\n          default:\n            throw new NoViableAltException(this);\n          }\n          setState(378); \n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,31,_ctx);\n        } while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );\n        setState(387);\n        _errHandler.sync(this);\n        switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {\n        case 1:\n          {\n          setState(380);\n          postdot();\n          setState(384);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,32,_ctx);\n          while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n            if ( _alt==1 ) {\n              {\n              {\n              setState(381);\n              postfix();\n              }\n              } \n            }\n            setState(386);\n            _errHandler.sync(this);\n            _alt = getInterpreter().adaptivePredict(_input,32,_ctx);\n          }\n          }\n          break;\n        }\n        }\n        break;\n      case 2:\n        _localctx = new NewinitializedarrayContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(389);\n        match(NEW);\n        setState(390);\n        match(TYPE);\n        setState(391);\n        match(LBRACE);\n        setState(392);\n        match(RBRACE);\n        setState(393);\n        match(LBRACK);\n        setState(402);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(394);\n          expression(0);\n          setState(399);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==COMMA) {\n            {\n            {\n            setState(395);\n            match(COMMA);\n            setState(396);\n            expression(0);\n            }\n            }\n            setState(401);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(404);\n        match(RBRACK);\n        setState(408);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,36,_ctx);\n        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n          if ( _alt==1 ) {\n            {\n            {\n            setState(405);\n            postfix();\n            }\n            } \n          }\n          setState(410);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,36,_ctx);\n        }\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-01 00:32:38","endLine":3015,"groupId":"27372","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"arrayinitializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/23ab42a94ad47d18279848cd1ad370fefbd548.src","preCode":"  public final ArrayinitializerContext arrayinitializer() throws RecognitionException {\n    ArrayinitializerContext _localctx = new ArrayinitializerContext(_ctx, getState());\n    enterRule(_localctx, 48, RULE_arrayinitializer);\n    int _la;\n    try {\n      int _alt;\n      setState(409);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {\n      case 1:\n        _localctx = new NewstandardarrayContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(368);\n        match(NEW);\n        setState(369);\n        match(TYPE);\n        setState(374); \n        _errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n          case 1:\n            {\n            {\n            setState(370);\n            match(LBRACE);\n            setState(371);\n            expression(0);\n            setState(372);\n            match(RBRACE);\n            }\n            }\n            break;\n          default:\n            throw new NoViableAltException(this);\n          }\n          setState(376); \n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,30,_ctx);\n        } while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );\n        setState(385);\n        _errHandler.sync(this);\n        switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {\n        case 1:\n          {\n          setState(378);\n          postdot();\n          setState(382);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,31,_ctx);\n          while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n            if ( _alt==1 ) {\n              {\n              {\n              setState(379);\n              postfix();\n              }\n              } \n            }\n            setState(384);\n            _errHandler.sync(this);\n            _alt = getInterpreter().adaptivePredict(_input,31,_ctx);\n          }\n          }\n          break;\n        }\n        }\n        break;\n      case 2:\n        _localctx = new NewinitializedarrayContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(387);\n        match(NEW);\n        setState(388);\n        match(TYPE);\n        setState(389);\n        match(LBRACE);\n        setState(390);\n        match(RBRACE);\n        setState(391);\n        match(LBRACK);\n        setState(400);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(392);\n          expression(0);\n          setState(397);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==COMMA) {\n            {\n            {\n            setState(393);\n            match(COMMA);\n            setState(394);\n            expression(0);\n            }\n            }\n            setState(399);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(402);\n        match(RBRACK);\n        setState(406);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,35,_ctx);\n        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n          if ( _alt==1 ) {\n            {\n            {\n            setState(403);\n            postfix();\n            }\n            } \n          }\n          setState(408);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,35,_ctx);\n        }\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2876,"status":"M"}],"commitId":"e066a59c899c94a00e2c6a9800f3903fd51273fa","commitMessage":"@@@Fix Painless void return bug (#38046)\n\nPainless now allows void functions and contexts to with a void return type to use\na return statement without a following expression.","date":"2019-02-01 00:32:38","modifiedFileCount":"4","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-02-08 02:08:03","codes":[{"authorDate":"2020-02-08 02:08:03","commitOrder":4,"curCode":"  public final DstatementContext dstatement() throws RecognitionException {\n    DstatementContext _localctx = new DstatementContext(_ctx, getState());\n    enterRule(_localctx, 10, RULE_dstatement);\n    int _la;\n    try {\n      setState(188);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {\n      case 1:\n        _localctx = new DoContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(171);\n        match(DO);\n        setState(172);\n        block();\n        setState(173);\n        match(WHILE);\n        setState(174);\n        match(LP);\n        setState(175);\n        expression();\n        setState(176);\n        match(RP);\n        }\n        break;\n      case 2:\n        _localctx = new DeclContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(178);\n        declaration();\n        }\n        break;\n      case 3:\n        _localctx = new ContinueContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(179);\n        match(CONTINUE);\n        }\n        break;\n      case 4:\n        _localctx = new BreakContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(180);\n        match(BREAK);\n        }\n        break;\n      case 5:\n        _localctx = new ReturnContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(181);\n        match(RETURN);\n        setState(183);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(182);\n          expression();\n          }\n        }\n\n        }\n        break;\n      case 6:\n        _localctx = new ThrowContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(185);\n        match(THROW);\n        setState(186);\n        expression();\n        }\n        break;\n      case 7:\n        _localctx = new ExprContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(187);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-02-08 02:08:03","endLine":1029,"groupId":"69842","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"dstatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/e6e1545c1ebd1e24005831a17be6fa48480869.src","preCode":"  public final DstatementContext dstatement() throws RecognitionException {\n    DstatementContext _localctx = new DstatementContext(_ctx, getState());\n    enterRule(_localctx, 10, RULE_dstatement);\n    int _la;\n    try {\n      setState(186);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {\n      case 1:\n        _localctx = new DoContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(169);\n        match(DO);\n        setState(170);\n        block();\n        setState(171);\n        match(WHILE);\n        setState(172);\n        match(LP);\n        setState(173);\n        expression(0);\n        setState(174);\n        match(RP);\n        }\n        break;\n      case 2:\n        _localctx = new DeclContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(176);\n        declaration();\n        }\n        break;\n      case 3:\n        _localctx = new ContinueContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(177);\n        match(CONTINUE);\n        }\n        break;\n      case 4:\n        _localctx = new BreakContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(178);\n        match(BREAK);\n        }\n        break;\n      case 5:\n        _localctx = new ReturnContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(179);\n        match(RETURN);\n        setState(181);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(180);\n          expression(0);\n          }\n        }\n\n        }\n        break;\n      case 6:\n        _localctx = new ThrowContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(183);\n        match(THROW);\n        setState(184);\n        expression(0);\n        }\n        break;\n      case 7:\n        _localctx = new ExprContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(185);\n        expression(0);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":933,"status":"M"},{"authorDate":"2020-02-08 02:08:03","commitOrder":4,"curCode":"  public final ArrayinitializerContext arrayinitializer() throws RecognitionException {\n    ArrayinitializerContext _localctx = new ArrayinitializerContext(_ctx, getState());\n    enterRule(_localctx, 50, RULE_arrayinitializer);\n    int _la;\n    try {\n      int _alt;\n      setState(417);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {\n      case 1:\n        _localctx = new NewstandardarrayContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(376);\n        match(NEW);\n        setState(377);\n        match(TYPE);\n        setState(382); \n        _errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n          case 1:\n            {\n            {\n            setState(378);\n            match(LBRACE);\n            setState(379);\n            expression();\n            setState(380);\n            match(RBRACE);\n            }\n            }\n            break;\n          default:\n            throw new NoViableAltException(this);\n          }\n          setState(384); \n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,32,_ctx);\n        } while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );\n        setState(393);\n        _errHandler.sync(this);\n        switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {\n        case 1:\n          {\n          setState(386);\n          postdot();\n          setState(390);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,33,_ctx);\n          while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n            if ( _alt==1 ) {\n              {\n              {\n              setState(387);\n              postfix();\n              }\n              } \n            }\n            setState(392);\n            _errHandler.sync(this);\n            _alt = getInterpreter().adaptivePredict(_input,33,_ctx);\n          }\n          }\n          break;\n        }\n        }\n        break;\n      case 2:\n        _localctx = new NewinitializedarrayContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(395);\n        match(NEW);\n        setState(396);\n        match(TYPE);\n        setState(397);\n        match(LBRACE);\n        setState(398);\n        match(RBRACE);\n        setState(399);\n        match(LBRACK);\n        setState(408);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(400);\n          expression();\n          setState(405);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==COMMA) {\n            {\n            {\n            setState(401);\n            match(COMMA);\n            setState(402);\n            expression();\n            }\n            }\n            setState(407);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(410);\n        match(RBRACK);\n        setState(414);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,37,_ctx);\n        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n          if ( _alt==1 ) {\n            {\n            {\n            setState(411);\n            postfix();\n            }\n            } \n          }\n          setState(416);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,37,_ctx);\n        }\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-02-08 02:08:03","endLine":3070,"groupId":"27372","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"arrayinitializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/e6e1545c1ebd1e24005831a17be6fa48480869.src","preCode":"  public final ArrayinitializerContext arrayinitializer() throws RecognitionException {\n    ArrayinitializerContext _localctx = new ArrayinitializerContext(_ctx, getState());\n    enterRule(_localctx, 48, RULE_arrayinitializer);\n    int _la;\n    try {\n      int _alt;\n      setState(411);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {\n      case 1:\n        _localctx = new NewstandardarrayContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(370);\n        match(NEW);\n        setState(371);\n        match(TYPE);\n        setState(376); \n        _errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n          case 1:\n            {\n            {\n            setState(372);\n            match(LBRACE);\n            setState(373);\n            expression(0);\n            setState(374);\n            match(RBRACE);\n            }\n            }\n            break;\n          default:\n            throw new NoViableAltException(this);\n          }\n          setState(378); \n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,31,_ctx);\n        } while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );\n        setState(387);\n        _errHandler.sync(this);\n        switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {\n        case 1:\n          {\n          setState(380);\n          postdot();\n          setState(384);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,32,_ctx);\n          while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n            if ( _alt==1 ) {\n              {\n              {\n              setState(381);\n              postfix();\n              }\n              } \n            }\n            setState(386);\n            _errHandler.sync(this);\n            _alt = getInterpreter().adaptivePredict(_input,32,_ctx);\n          }\n          }\n          break;\n        }\n        }\n        break;\n      case 2:\n        _localctx = new NewinitializedarrayContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(389);\n        match(NEW);\n        setState(390);\n        match(TYPE);\n        setState(391);\n        match(LBRACE);\n        setState(392);\n        match(RBRACE);\n        setState(393);\n        match(LBRACK);\n        setState(402);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(394);\n          expression(0);\n          setState(399);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==COMMA) {\n            {\n            {\n            setState(395);\n            match(COMMA);\n            setState(396);\n            expression(0);\n            }\n            }\n            setState(401);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(404);\n        match(RBRACK);\n        setState(408);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,36,_ctx);\n        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n          if ( _alt==1 ) {\n            {\n            {\n            setState(405);\n            postfix();\n            }\n            } \n          }\n          setState(410);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,36,_ctx);\n        }\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":2931,"status":"M"}],"commitId":"aec932aefa0c2696465ebd9ae2b6b4870f49f340","commitMessage":"@@@Improve Painless compilation performance for nested conditionals (#52056)\n\nThis PR changes how conditional expression is handled in `PainlessParser`\nin a way that avoids the need for backtracking.  which led to exponential\ncompilation times in case of nested conditionals.\n\nThe test was added ensures that we can compile deeply nested conditionals.\n\nCo-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>\n","date":"2020-02-08 02:08:03","modifiedFileCount":"6","status":"M","submitter":"Przemko Robakowski"},{"authorTime":"2020-05-15 01:24:31","codes":[{"authorDate":"2020-05-15 01:24:31","commitOrder":5,"curCode":"  public final DstatementContext dstatement() throws RecognitionException {\n    DstatementContext _localctx = new DstatementContext(_ctx, getState());\n    enterRule(_localctx, 10, RULE_dstatement);\n    int _la;\n    try {\n      setState(198);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {\n      case 1:\n        _localctx = new DoContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(181);\n        match(DO);\n        setState(182);\n        block();\n        setState(183);\n        match(WHILE);\n        setState(184);\n        match(LP);\n        setState(185);\n        expression();\n        setState(186);\n        match(RP);\n        }\n        break;\n      case 2:\n        _localctx = new DeclContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(188);\n        declaration();\n        }\n        break;\n      case 3:\n        _localctx = new ContinueContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(189);\n        match(CONTINUE);\n        }\n        break;\n      case 4:\n        _localctx = new BreakContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(190);\n        match(BREAK);\n        }\n        break;\n      case 5:\n        _localctx = new ReturnContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(191);\n        match(RETURN);\n        setState(193);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(192);\n          expression();\n          }\n        }\n\n        }\n        break;\n      case 6:\n        _localctx = new ThrowContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(195);\n        match(THROW);\n        setState(196);\n        expression();\n        }\n        break;\n      case 7:\n        _localctx = new ExprContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(197);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-05-15 01:24:31","endLine":1035,"groupId":"101344","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"dstatement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/58500303fdce657f5b952f1e9fc560777b4fd0.src","preCode":"  public final DstatementContext dstatement() throws RecognitionException {\n    DstatementContext _localctx = new DstatementContext(_ctx, getState());\n    enterRule(_localctx, 10, RULE_dstatement);\n    int _la;\n    try {\n      setState(188);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {\n      case 1:\n        _localctx = new DoContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(171);\n        match(DO);\n        setState(172);\n        block();\n        setState(173);\n        match(WHILE);\n        setState(174);\n        match(LP);\n        setState(175);\n        expression();\n        setState(176);\n        match(RP);\n        }\n        break;\n      case 2:\n        _localctx = new DeclContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(178);\n        declaration();\n        }\n        break;\n      case 3:\n        _localctx = new ContinueContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(179);\n        match(CONTINUE);\n        }\n        break;\n      case 4:\n        _localctx = new BreakContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(180);\n        match(BREAK);\n        }\n        break;\n      case 5:\n        _localctx = new ReturnContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(181);\n        match(RETURN);\n        setState(183);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(182);\n          expression();\n          }\n        }\n\n        }\n        break;\n      case 6:\n        _localctx = new ThrowContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(185);\n        match(THROW);\n        setState(186);\n        expression();\n        }\n        break;\n      case 7:\n        _localctx = new ExprContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(187);\n        expression();\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":939,"status":"M"},{"authorDate":"2020-05-15 01:24:31","commitOrder":5,"curCode":"  public final ArrayinitializerContext arrayinitializer() throws RecognitionException {\n    ArrayinitializerContext _localctx = new ArrayinitializerContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_arrayinitializer);\n    int _la;\n    try {\n      int _alt;\n      setState(478);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {\n      case 1:\n        _localctx = new NewstandardarrayContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(437);\n        match(NEW);\n        setState(438);\n        type();\n        setState(443); \n        _errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n          case 1:\n            {\n            {\n            setState(439);\n            match(LBRACE);\n            setState(440);\n            expression();\n            setState(441);\n            match(RBRACE);\n            }\n            }\n            break;\n          default:\n            throw new NoViableAltException(this);\n          }\n          setState(445); \n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,40,_ctx);\n        } while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );\n        setState(454);\n        _errHandler.sync(this);\n        switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {\n        case 1:\n          {\n          setState(447);\n          postdot();\n          setState(451);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,41,_ctx);\n          while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n            if ( _alt==1 ) {\n              {\n              {\n              setState(448);\n              postfix();\n              }\n              } \n            }\n            setState(453);\n            _errHandler.sync(this);\n            _alt = getInterpreter().adaptivePredict(_input,41,_ctx);\n          }\n          }\n          break;\n        }\n        }\n        break;\n      case 2:\n        _localctx = new NewinitializedarrayContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(456);\n        match(NEW);\n        setState(457);\n        type();\n        setState(458);\n        match(LBRACE);\n        setState(459);\n        match(RBRACE);\n        setState(460);\n        match(LBRACK);\n        setState(469);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(461);\n          expression();\n          setState(466);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==COMMA) {\n            {\n            {\n            setState(462);\n            match(COMMA);\n            setState(463);\n            expression();\n            }\n            }\n            setState(468);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(471);\n        match(RBRACK);\n        setState(475);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,45,_ctx);\n        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n          if ( _alt==1 ) {\n            {\n            {\n            setState(472);\n            postfix();\n            }\n            } \n          }\n          setState(477);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,45,_ctx);\n        }\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-05-15 01:24:31","endLine":3480,"groupId":"101344","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"arrayinitializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/58500303fdce657f5b952f1e9fc560777b4fd0.src","preCode":"  public final ArrayinitializerContext arrayinitializer() throws RecognitionException {\n    ArrayinitializerContext _localctx = new ArrayinitializerContext(_ctx, getState());\n    enterRule(_localctx, 50, RULE_arrayinitializer);\n    int _la;\n    try {\n      int _alt;\n      setState(417);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {\n      case 1:\n        _localctx = new NewstandardarrayContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(376);\n        match(NEW);\n        setState(377);\n        match(TYPE);\n        setState(382); \n        _errHandler.sync(this);\n        _alt = 1;\n        do {\n          switch (_alt) {\n          case 1:\n            {\n            {\n            setState(378);\n            match(LBRACE);\n            setState(379);\n            expression();\n            setState(380);\n            match(RBRACE);\n            }\n            }\n            break;\n          default:\n            throw new NoViableAltException(this);\n          }\n          setState(384); \n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,32,_ctx);\n        } while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );\n        setState(393);\n        _errHandler.sync(this);\n        switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {\n        case 1:\n          {\n          setState(386);\n          postdot();\n          setState(390);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,33,_ctx);\n          while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n            if ( _alt==1 ) {\n              {\n              {\n              setState(387);\n              postfix();\n              }\n              } \n            }\n            setState(392);\n            _errHandler.sync(this);\n            _alt = getInterpreter().adaptivePredict(_input,33,_ctx);\n          }\n          }\n          break;\n        }\n        }\n        break;\n      case 2:\n        _localctx = new NewinitializedarrayContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(395);\n        match(NEW);\n        setState(396);\n        match(TYPE);\n        setState(397);\n        match(LBRACE);\n        setState(398);\n        match(RBRACE);\n        setState(399);\n        match(LBRACK);\n        setState(408);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW) | (1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD) | (1L << SUB) | (1L << INCR) | (1L << DECR))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OCTAL - 72)) | (1L << (HEX - 72)) | (1L << (INTEGER - 72)) | (1L << (DECIMAL - 72)) | (1L << (STRING - 72)) | (1L << (REGEX - 72)) | (1L << (TRUE - 72)) | (1L << (FALSE - 72)) | (1L << (NULL - 72)) | (1L << (TYPE - 72)) | (1L << (ID - 72)))) != 0)) {\n          {\n          setState(400);\n          expression();\n          setState(405);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==COMMA) {\n            {\n            {\n            setState(401);\n            match(COMMA);\n            setState(402);\n            expression();\n            }\n            }\n            setState(407);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(410);\n        match(RBRACK);\n        setState(414);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,37,_ctx);\n        while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n          if ( _alt==1 ) {\n            {\n            {\n            setState(411);\n            postfix();\n            }\n            } \n          }\n          setState(416);\n          _errHandler.sync(this);\n          _alt = getInterpreter().adaptivePredict(_input,37,_ctx);\n        }\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":3341,"status":"M"}],"commitId":"53ea60836198c4924c29e2416b9c4a6d23e0406c","commitMessage":"@@@Remove the lexer hack in Painless (#56293)\n\nBackground:\n\nThe lexer-hack (https://en.wikipedia.org/wiki/Lexer_hack) was used in Painless \nto add contextual information around types during lexing. This made the the \nlexer/grammar much simpler.  and allowed us to build a user tree with full typing \ninformation at creation.\n\nLimitations:\n\nForcing the lexer to know about type information up front requires that we \nknow all types when building the user tree.  so this limits us from a number of \nthings including the following:\n\n* good.  consistent error messages as types fail during lexing which gives very \npoor error messaging since this should be purely syntax errors\n* compiling against different contexts as a possible use case for ensuring a \nstored script is valid for at least one context\n* pursuing new front ends such as a possible template language based on \nPainless\n* using the existing grammar to introduce an auto-completion API\n* the potential of adding new features with specialized types\n\nResults:\n\nThis change removes the lexer hack by doing all type checking as part of the \nsemantic pass against the user tree. The lexer now keywords on the primitives \nand def types while the user tree will use a symbol node instead of a variable \nnode that can potentially be either a type.  a piece of a package name.  or a \nvariable. One important change is that the dot operator is now overridden. This \nmeans that a dot operator may indicate a piece of a package name or a field \n(a.b could be access field b from variable a or could be the static type a.b). Logic \nhas been introduced to account for this overloaded operator including checks in \nthe expression nodes to ensure they aren't mistakenly using an unexpected \nstatic type or an unknown partial type.","date":"2020-05-15 01:24:31","modifiedFileCount":"53","status":"M","submitter":"Jack Conradson"}]
