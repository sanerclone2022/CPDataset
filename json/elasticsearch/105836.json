[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testSendRequestsToNodes() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, dummyListener(),\n                null, request, null)\n            {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new Index(\"test\", \"_na_\"), 1, null));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"test\") {\n                        @Override\n                        public void run() throws IOException {\n                            latch.countDown();\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":111,"groupId":"57354","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendRequestsToNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/1781d4f785abd382b66fbb322e4ad37be29a5b.src","preCode":"    public void testSendRequestsToNodes() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, dummyListener(),\n                null, request, null)\n            {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new Index(\"test\", \"_na_\"), 1, null));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"test\") {\n                        @Override\n                        public void run() throws IOException {\n                            latch.countDown();\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchScrollAsyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testFailNextPhase() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        ActionListener listener = new ActionListener() {\n            @Override\n            public void onResponse(Object o) {\n                try {\n                    fail(\"got a result\");\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                try {\n                    assertTrue(e instanceof SearchPhaseExecutionException);\n                    SearchPhaseExecutionException ex = (SearchPhaseExecutionException) e;\n                    assertEquals(\"BOOM\", ex.getCause().getMessage());\n                    assertEquals(\"TEST_PHASE\", ex.getPhaseName());\n                    assertEquals(\"Phase failed\", ex.getMessage());\n                } finally {\n                    latch.countDown();\n                }\n            }\n        };\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, listener, null,\n                request, null) {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new Index(\"test\", \"_na_\"), 1, null));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"TEST_PHASE\") {\n                        @Override\n                        public void run() throws IOException {\n                            throw new IllegalArgumentException(\"BOOM\");\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":202,"groupId":"34273","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailNextPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/1781d4f785abd382b66fbb322e4ad37be29a5b.src","preCode":"    public void testFailNextPhase() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        ActionListener listener = new ActionListener() {\n            @Override\n            public void onResponse(Object o) {\n                try {\n                    fail(\"got a result\");\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                try {\n                    assertTrue(e instanceof SearchPhaseExecutionException);\n                    SearchPhaseExecutionException ex = (SearchPhaseExecutionException) e;\n                    assertEquals(\"BOOM\", ex.getCause().getMessage());\n                    assertEquals(\"TEST_PHASE\", ex.getPhaseName());\n                    assertEquals(\"Phase failed\", ex.getMessage());\n                } finally {\n                    latch.countDown();\n                }\n            }\n        };\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, listener, null,\n                request, null) {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new Index(\"test\", \"_na_\"), 1, null));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"TEST_PHASE\") {\n                        @Override\n                        public void run() throws IOException {\n                            throw new IllegalArgumentException(\"BOOM\");\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchScrollAsyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-07-10 07:44:12","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testSendRequestsToNodes() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, dummyListener(),\n                null, request, null)\n            {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new Index(\"test\", \"_na_\"), 1, null));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"test\") {\n                        @Override\n                        public void run() throws IOException {\n                            latch.countDown();\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":111,"groupId":"57354","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendRequestsToNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/1781d4f785abd382b66fbb322e4ad37be29a5b.src","preCode":"    public void testSendRequestsToNodes() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, dummyListener(),\n                null, request, null)\n            {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new Index(\"test\", \"_na_\"), 1, null));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"test\") {\n                        @Override\n                        public void run() throws IOException {\n                            latch.countDown();\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchScrollAsyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2018-07-10 07:44:12","commitOrder":2,"curCode":"    public void testFailNextPhase() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        ActionListener<SearchResponse> listener = new ActionListener<SearchResponse>() {\n            @Override\n            public void onResponse(SearchResponse o) {\n                try {\n                    fail(\"got a result\");\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                try {\n                    assertTrue(e instanceof SearchPhaseExecutionException);\n                    SearchPhaseExecutionException ex = (SearchPhaseExecutionException) e;\n                    assertEquals(\"BOOM\", ex.getCause().getMessage());\n                    assertEquals(\"TEST_PHASE\", ex.getPhaseName());\n                    assertEquals(\"Phase failed\", ex.getMessage());\n                } finally {\n                    latch.countDown();\n                }\n            }\n        };\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, listener, null,\n                request, null) {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new Index(\"test\", \"_na_\"), 1, null));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"TEST_PHASE\") {\n                        @Override\n                        public void run() throws IOException {\n                            throw new IllegalArgumentException(\"BOOM\");\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","date":"2018-07-10 07:44:12","endLine":202,"groupId":"34273","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailNextPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fb/c3b1975def51d814708ae270fac005a67038c2.src","preCode":"    public void testFailNextPhase() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        ActionListener listener = new ActionListener() {\n            @Override\n            public void onResponse(Object o) {\n                try {\n                    fail(\"got a result\");\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                try {\n                    assertTrue(e instanceof SearchPhaseExecutionException);\n                    SearchPhaseExecutionException ex = (SearchPhaseExecutionException) e;\n                    assertEquals(\"BOOM\", ex.getCause().getMessage());\n                    assertEquals(\"TEST_PHASE\", ex.getPhaseName());\n                    assertEquals(\"Phase failed\", ex.getMessage());\n                } finally {\n                    latch.countDown();\n                }\n            }\n        };\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, listener, null,\n                request, null) {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new Index(\"test\", \"_na_\"), 1, null));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"TEST_PHASE\") {\n                        @Override\n                        public void run() throws IOException {\n                            throw new IllegalArgumentException(\"BOOM\");\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchScrollAsyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"e9cd0556c167b257bb588af5547923e5f13a99ca","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-10 07:44:12","modifiedFileCount":"627","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-01-29 21:58:11","codes":[{"authorDate":"2019-01-29 21:58:11","commitOrder":3,"curCode":"    public void testSendRequestsToNodes() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, dummyListener(),\n                null, request, null)\n            {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new ShardId(\"test\", \"_na_\", 1), null, OriginalIndices.NONE));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"test\") {\n                        @Override\n                        public void run() throws IOException {\n                            latch.countDown();\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","date":"2019-01-29 21:58:11","endLine":112,"groupId":"57354","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendRequestsToNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b9/02fba04c5e710190db3274ce32c541ae42fa4a.src","preCode":"    public void testSendRequestsToNodes() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, dummyListener(),\n                null, request, null)\n            {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new Index(\"test\", \"_na_\"), 1, null));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"test\") {\n                        @Override\n                        public void run() throws IOException {\n                            latch.countDown();\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchScrollAsyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2019-01-29 21:58:11","commitOrder":3,"curCode":"    public void testFailNextPhase() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        ActionListener<SearchResponse> listener = new ActionListener<SearchResponse>() {\n            @Override\n            public void onResponse(SearchResponse o) {\n                try {\n                    fail(\"got a result\");\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                try {\n                    assertTrue(e instanceof SearchPhaseExecutionException);\n                    SearchPhaseExecutionException ex = (SearchPhaseExecutionException) e;\n                    assertEquals(\"BOOM\", ex.getCause().getMessage());\n                    assertEquals(\"TEST_PHASE\", ex.getPhaseName());\n                    assertEquals(\"Phase failed\", ex.getMessage());\n                } finally {\n                    latch.countDown();\n                }\n            }\n        };\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, listener, null,\n                request, null) {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new ShardId(\"test\", \"_na_\", 1), null, OriginalIndices.NONE));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"TEST_PHASE\") {\n                        @Override\n                        public void run() throws IOException {\n                            throw new IllegalArgumentException(\"BOOM\");\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","date":"2019-01-29 21:58:11","endLine":203,"groupId":"34273","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailNextPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b9/02fba04c5e710190db3274ce32c541ae42fa4a.src","preCode":"    public void testFailNextPhase() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        ActionListener<SearchResponse> listener = new ActionListener<SearchResponse>() {\n            @Override\n            public void onResponse(SearchResponse o) {\n                try {\n                    fail(\"got a result\");\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                try {\n                    assertTrue(e instanceof SearchPhaseExecutionException);\n                    SearchPhaseExecutionException ex = (SearchPhaseExecutionException) e;\n                    assertEquals(\"BOOM\", ex.getCause().getMessage());\n                    assertEquals(\"TEST_PHASE\", ex.getPhaseName());\n                    assertEquals(\"Phase failed\", ex.getMessage());\n                } finally {\n                    latch.countDown();\n                }\n            }\n        };\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, listener, null,\n                request, null) {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new Index(\"test\", \"_na_\"), 1, null));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"TEST_PHASE\") {\n                        @Override\n                        public void run() throws IOException {\n                            throw new IllegalArgumentException(\"BOOM\");\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchScrollAsyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"2325fb9cb3530607475233e7c7281e5ff7241001","commitMessage":"@@@Remove test only SearchShardTarget constructor (#37912)\n\nRemove SearchShardTarget test only constructor and replace all the usages with calls to the other constructor that accepts a ShardId.","date":"2019-01-29 21:58:11","modifiedFileCount":"21","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-03-09 23:59:30","codes":[{"authorDate":"2020-03-09 23:59:30","commitOrder":4,"curCode":"    public void testSendRequestsToNodes() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", new SearchContextId(UUIDs.randomBase64UUID(), 1)),\n            new ScrollIdForNode(null, \"node2\", new SearchContextId(UUIDs.randomBase64UUID(), 2)),\n            new ScrollIdForNode(null, \"node3\", new SearchContextId(UUIDs.randomBase64UUID(), 17)),\n            new ScrollIdForNode(null, \"node1\", new SearchContextId(UUIDs.randomBase64UUID(), 0)),\n            new ScrollIdForNode(null, \"node3\", new SearchContextId(UUIDs.randomBase64UUID(), 0)));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, dummyListener(),\n                null, request, null)\n            {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.contextId(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new ShardId(\"test\", \"_na_\", 1), null, OriginalIndices.NONE));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"test\") {\n                        @Override\n                        public void run() throws IOException {\n                            latch.countDown();\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getContextId(), results.get(i).getContextId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","date":"2020-03-09 23:59:30","endLine":117,"groupId":"57354","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendRequestsToNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/49/eb7673592bf5d91e11c08f9e361fd3e026f1d7.src","preCode":"    public void testSendRequestsToNodes() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, dummyListener(),\n                null, request, null)\n            {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new ShardId(\"test\", \"_na_\", 1), null, OriginalIndices.NONE));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"test\") {\n                        @Override\n                        public void run() throws IOException {\n                            latch.countDown();\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchScrollAsyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2020-03-09 23:59:30","commitOrder":4,"curCode":"    public void testFailNextPhase() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", new SearchContextId(\"\", 1)),\n            new ScrollIdForNode(null, \"node2\", new SearchContextId(\"a\", 2)),\n            new ScrollIdForNode(null, \"node3\", new SearchContextId(\"b\", 17)),\n            new ScrollIdForNode(null, \"node1\", new SearchContextId(\"c\", 0)),\n            new ScrollIdForNode(null, \"node3\", new SearchContextId(\"d\", 0)));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        ActionListener<SearchResponse> listener = new ActionListener<SearchResponse>() {\n            @Override\n            public void onResponse(SearchResponse o) {\n                try {\n                    fail(\"got a result\");\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                try {\n                    assertTrue(e instanceof SearchPhaseExecutionException);\n                    SearchPhaseExecutionException ex = (SearchPhaseExecutionException) e;\n                    assertEquals(\"BOOM\", ex.getCause().getMessage());\n                    assertEquals(\"TEST_PHASE\", ex.getPhaseName());\n                    assertEquals(\"Phase failed\", ex.getMessage());\n                } finally {\n                    latch.countDown();\n                }\n            }\n        };\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, listener, null,\n                request, null) {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.contextId(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new ShardId(\"test\", \"_na_\", 1), null, OriginalIndices.NONE));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"TEST_PHASE\") {\n                        @Override\n                        public void run() throws IOException {\n                            throw new IllegalArgumentException(\"BOOM\");\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getContextId(), results.get(i).getContextId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","date":"2020-03-09 23:59:30","endLine":208,"groupId":"34273","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailNextPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/49/eb7673592bf5d91e11c08f9e361fd3e026f1d7.src","preCode":"    public void testFailNextPhase() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", 1),\n            new ScrollIdForNode(null, \"node2\", 2),\n            new ScrollIdForNode(null, \"node3\", 17),\n            new ScrollIdForNode(null, \"node1\", 0),\n            new ScrollIdForNode(null, \"node3\", 0));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        ActionListener<SearchResponse> listener = new ActionListener<SearchResponse>() {\n            @Override\n            public void onResponse(SearchResponse o) {\n                try {\n                    fail(\"got a result\");\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                try {\n                    assertTrue(e instanceof SearchPhaseExecutionException);\n                    SearchPhaseExecutionException ex = (SearchPhaseExecutionException) e;\n                    assertEquals(\"BOOM\", ex.getCause().getMessage());\n                    assertEquals(\"TEST_PHASE\", ex.getPhaseName());\n                    assertEquals(\"Phase failed\", ex.getMessage());\n                } finally {\n                    latch.countDown();\n                }\n            }\n        };\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, listener, null,\n                request, null) {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.id(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new ShardId(\"test\", \"_na_\", 1), null, OriginalIndices.NONE));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"TEST_PHASE\") {\n                        @Override\n                        public void run() throws IOException {\n                            throw new IllegalArgumentException(\"BOOM\");\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getScrollId(), results.get(i).getRequestId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchScrollAsyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"b2ea32959103b93c03cc487ce475adde792f21e3","commitMessage":"@@@Harden search context id (#53143)\n\nUsing a Long alone is not strong enough for the id of search contexts \nbecause we reset the id generator whenever a data node is restarted.\nThis can lead to two issues:\n\n1. Fetch phase can fetch documents from another index\n2. A scroll search can return documents from another index\n\nThis commit avoids these issues by adding a UUID to SearchContexId.","date":"2020-03-09 23:59:30","modifiedFileCount":"49","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2020-08-27 20:29:24","codes":[{"authorDate":"2020-08-27 20:29:24","commitOrder":5,"curCode":"    public void testSendRequestsToNodes() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new SearchContextIdForNode(null, \"node1\", new ShardSearchContextId(UUIDs.randomBase64UUID(), 1)),\n            new SearchContextIdForNode(null, \"node2\", new ShardSearchContextId(UUIDs.randomBase64UUID(), 2)),\n            new SearchContextIdForNode(null, \"node3\", new ShardSearchContextId(UUIDs.randomBase64UUID(), 17)),\n            new SearchContextIdForNode(null, \"node1\", new ShardSearchContextId(UUIDs.randomBase64UUID(), 0)),\n            new SearchContextIdForNode(null, \"node3\", new ShardSearchContextId(UUIDs.randomBase64UUID(), 0)));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, dummyListener(),\n                null, request, null)\n            {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.contextId(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new ShardId(\"test\", \"_na_\", 1), null, OriginalIndices.NONE));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"test\") {\n                        @Override\n                        public void run() throws IOException {\n                            latch.countDown();\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        SearchContextIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getSearchContextId(), results.get(i).getContextId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","date":"2020-08-27 20:29:24","endLine":117,"groupId":"105836","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendRequestsToNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0c/a8c3103758303571bb54d61ae88a952661f147.src","preCode":"    public void testSendRequestsToNodes() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", new SearchContextId(UUIDs.randomBase64UUID(), 1)),\n            new ScrollIdForNode(null, \"node2\", new SearchContextId(UUIDs.randomBase64UUID(), 2)),\n            new ScrollIdForNode(null, \"node3\", new SearchContextId(UUIDs.randomBase64UUID(), 17)),\n            new ScrollIdForNode(null, \"node1\", new SearchContextId(UUIDs.randomBase64UUID(), 0)),\n            new ScrollIdForNode(null, \"node3\", new SearchContextId(UUIDs.randomBase64UUID(), 0)));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, dummyListener(),\n                null, request, null)\n            {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.contextId(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new ShardId(\"test\", \"_na_\", 1), null, OriginalIndices.NONE));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"test\") {\n                        @Override\n                        public void run() throws IOException {\n                            latch.countDown();\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getContextId(), results.get(i).getContextId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchScrollAsyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2020-08-27 20:29:24","commitOrder":5,"curCode":"    public void testFailNextPhase() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new SearchContextIdForNode(null, \"node1\", new ShardSearchContextId(\"\", 1)),\n            new SearchContextIdForNode(null, \"node2\", new ShardSearchContextId(\"a\", 2)),\n            new SearchContextIdForNode(null, \"node3\", new ShardSearchContextId(\"b\", 17)),\n            new SearchContextIdForNode(null, \"node1\", new ShardSearchContextId(\"c\", 0)),\n            new SearchContextIdForNode(null, \"node3\", new ShardSearchContextId(\"d\", 0)));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        ActionListener<SearchResponse> listener = new ActionListener<SearchResponse>() {\n            @Override\n            public void onResponse(SearchResponse o) {\n                try {\n                    fail(\"got a result\");\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                try {\n                    assertTrue(e instanceof SearchPhaseExecutionException);\n                    SearchPhaseExecutionException ex = (SearchPhaseExecutionException) e;\n                    assertEquals(\"BOOM\", ex.getCause().getMessage());\n                    assertEquals(\"TEST_PHASE\", ex.getPhaseName());\n                    assertEquals(\"Phase failed\", ex.getMessage());\n                } finally {\n                    latch.countDown();\n                }\n            }\n        };\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, listener, null,\n                request, null) {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.contextId(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new ShardId(\"test\", \"_na_\", 1), null, OriginalIndices.NONE));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"TEST_PHASE\") {\n                        @Override\n                        public void run() throws IOException {\n                            throw new IllegalArgumentException(\"BOOM\");\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        SearchContextIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getSearchContextId(), results.get(i).getContextId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","date":"2020-08-27 20:29:24","endLine":208,"groupId":"105836","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailNextPhase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0c/a8c3103758303571bb54d61ae88a952661f147.src","preCode":"    public void testFailNextPhase() throws InterruptedException {\n\n        ParsedScrollId scrollId = getParsedScrollId(\n            new ScrollIdForNode(null, \"node1\", new SearchContextId(\"\", 1)),\n            new ScrollIdForNode(null, \"node2\", new SearchContextId(\"a\", 2)),\n            new ScrollIdForNode(null, \"node3\", new SearchContextId(\"b\", 17)),\n            new ScrollIdForNode(null, \"node1\", new SearchContextId(\"c\", 0)),\n            new ScrollIdForNode(null, \"node3\", new SearchContextId(\"d\", 0)));\n        DiscoveryNodes discoveryNodes = DiscoveryNodes.builder()\n            .add(new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT))\n            .add(new DiscoveryNode(\"node3\", buildNewFakeTransportAddress(), Version.CURRENT)).build();\n\n        AtomicArray<SearchAsyncActionTests.TestSearchPhaseResult> results = new AtomicArray<>(scrollId.getContext().length);\n        SearchScrollRequest request = new SearchScrollRequest();\n        request.scroll(new Scroll(TimeValue.timeValueMinutes(1)));\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger movedCounter = new AtomicInteger(0);\n        ActionListener<SearchResponse> listener = new ActionListener<SearchResponse>() {\n            @Override\n            public void onResponse(SearchResponse o) {\n                try {\n                    fail(\"got a result\");\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                try {\n                    assertTrue(e instanceof SearchPhaseExecutionException);\n                    SearchPhaseExecutionException ex = (SearchPhaseExecutionException) e;\n                    assertEquals(\"BOOM\", ex.getCause().getMessage());\n                    assertEquals(\"TEST_PHASE\", ex.getPhaseName());\n                    assertEquals(\"Phase failed\", ex.getMessage());\n                } finally {\n                    latch.countDown();\n                }\n            }\n        };\n        SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult> action =\n            new SearchScrollAsyncAction<SearchAsyncActionTests.TestSearchPhaseResult>(scrollId, logger, discoveryNodes, listener, null,\n                request, null) {\n                @Override\n                protected void executeInitialPhase(Transport.Connection connection, InternalScrollSearchRequest internalRequest,\n                                                   SearchActionListener<SearchAsyncActionTests.TestSearchPhaseResult> searchActionListener)\n                {\n                    new Thread(() -> {\n                        SearchAsyncActionTests.TestSearchPhaseResult testSearchPhaseResult =\n                            new SearchAsyncActionTests.TestSearchPhaseResult(internalRequest.contextId(), connection.getNode());\n                        testSearchPhaseResult.setSearchShardTarget(new SearchShardTarget(connection.getNode().getId(),\n                            new ShardId(\"test\", \"_na_\", 1), null, OriginalIndices.NONE));\n                        searchActionListener.onResponse(testSearchPhaseResult);\n                    }).start();\n                }\n\n                @Override\n                protected Transport.Connection getConnection(String clusterAlias, DiscoveryNode node) {\n                    return new SearchAsyncActionTests.MockConnection(node);\n                }\n\n                @Override\n                protected SearchPhase moveToNextPhase(BiFunction<String, String, DiscoveryNode> clusterNodeLookup) {\n                    assertEquals(1, movedCounter.incrementAndGet());\n                    return new SearchPhase(\"TEST_PHASE\") {\n                        @Override\n                        public void run() throws IOException {\n                            throw new IllegalArgumentException(\"BOOM\");\n                        }\n                    };\n                }\n\n                @Override\n                protected void onFirstPhaseResult(int shardId, SearchAsyncActionTests.TestSearchPhaseResult result) {\n                    results.setOnce(shardId, result);\n                }\n            };\n\n        action.run();\n        latch.await();\n        ShardSearchFailure[] shardSearchFailures = action.buildShardFailures();\n        assertEquals(0, shardSearchFailures.length);\n        ScrollIdForNode[] context = scrollId.getContext();\n        for (int i = 0; i < results.length(); i++) {\n            assertNotNull(results.get(i));\n            assertEquals(context[i].getContextId(), results.get(i).getContextId());\n            assertEquals(context[i].getNode(), results.get(i).node.getId());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/search/SearchScrollAsyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"0a3d3919a141e6e3c9bbddc43d046a4c9211b6be","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-27 20:29:24","modifiedFileCount":"256","status":"M","submitter":"Luca Cavanna"}]
