[{"authorTime":"2018-09-11 04:30:44","codes":[{"authorDate":"2018-09-11 04:30:44","commitOrder":2,"curCode":"    public void testDependentSettings() {\n        Setting.AffixSetting<String> stringSetting = Setting.affixKeySetting(\"foo.\", \"name\",\n            (k) -> Setting.simpleString(k, Property.Dynamic, Property.NodeScope));\n        Setting.AffixSetting<Integer> intSetting = Setting.affixKeySetting(\"foo.\", \"bar\",\n            (k) ->  Setting.intSetting(k, 1, Property.Dynamic, Property.NodeScope), stringSetting);\n\n        AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY,new HashSet<>(Arrays.asList(intSetting, stringSetting)));\n\n        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,\n            () -> service.validate(Settings.builder().put(\"foo.test.bar\", 7).build(), true));\n        assertEquals(\"missing required setting [foo.test.name] for setting [foo.test.bar]\", iae.getMessage());\n\n        service.validate(Settings.builder()\n            .put(\"foo.test.name\", \"test\")\n            .put(\"foo.test.bar\", 7)\n            .build(), true);\n\n        service.validate(Settings.builder().put(\"foo.test.bar\", 7).build(), false);\n    }\n","date":"2018-09-11 04:30:44","endLine":184,"groupId":"261","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDependentSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/e1d2e9c4a804d56ffe24123f6467f09c0919ca.src","preCode":"    public void testDependentSettings() {\n        Setting.AffixSetting<String> stringSetting = Setting.affixKeySetting(\"foo.\", \"name\",\n            (k) -> Setting.simpleString(k, Property.Dynamic, Property.NodeScope));\n        Setting.AffixSetting<Integer> intSetting = Setting.affixKeySetting(\"foo.\", \"bar\",\n            (k) ->  Setting.intSetting(k, 1, Property.Dynamic, Property.NodeScope), stringSetting);\n\n        AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY,new HashSet<>(Arrays.asList(intSetting, stringSetting)));\n\n        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,\n            () -> service.validate(Settings.builder().put(\"foo.test.bar\", 7).build(), true));\n        assertEquals(\"missing required setting [foo.test.name] for setting [foo.test.bar]\", iae.getMessage());\n\n        service.validate(Settings.builder()\n            .put(\"foo.test.name\", \"test\")\n            .put(\"foo.test.bar\", 7)\n            .build(), true);\n\n        service.validate(Settings.builder().put(\"foo.test.bar\", 7).build(), false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"MB"},{"authorDate":"2018-09-11 04:30:44","commitOrder":2,"curCode":"    public void testDependentSettingsWithFallback() {\n        Setting.AffixSetting<String> nameFallbackSetting =\n                Setting.affixKeySetting(\"fallback.\", \"name\", k -> Setting.simpleString(k, Property.Dynamic, Property.NodeScope));\n        Setting.AffixSetting<String> nameSetting = Setting.affixKeySetting(\n                \"foo.\",\n                \"name\",\n                k -> Setting.simpleString(\n                        k,\n                        \"_na_\".equals(k)\n                                ? nameFallbackSetting.getConcreteSettingForNamespace(k)\n                                : nameFallbackSetting.getConcreteSetting(k.replaceAll(\"^foo\", \"fallback\")),\n                        Property.Dynamic,\n                        Property.NodeScope));\n        Setting.AffixSetting<Integer> barSetting =\n                Setting.affixKeySetting(\"foo.\", \"bar\", k -> Setting.intSetting(k, 1, Property.Dynamic, Property.NodeScope), nameSetting);\n\n        final AbstractScopedSettings service =\n                new ClusterSettings(Settings.EMPTY,new HashSet<>(Arrays.asList(nameFallbackSetting, nameSetting, barSetting)));\n\n        final IllegalArgumentException e = expectThrows(\n                IllegalArgumentException.class,\n                () -> service.validate(Settings.builder().put(\"foo.test.bar\", 7).build(), true));\n        assertThat(e, hasToString(containsString(\"missing required setting [foo.test.name] for setting [foo.test.bar]\")));\n\n        service.validate(Settings.builder().put(\"foo.test.name\", \"test\").put(\"foo.test.bar\", 7).build(), true);\n        service.validate(Settings.builder().put(\"fallback.test.name\", \"test\").put(\"foo.test.bar\", 7).build(), true);\n    }\n","date":"2018-09-11 04:30:44","endLine":212,"groupId":"15571","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDependentSettingsWithFallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/e1d2e9c4a804d56ffe24123f6467f09c0919ca.src","preCode":"    public void testDependentSettingsWithFallback() {\n        Setting.AffixSetting<String> nameFallbackSetting =\n                Setting.affixKeySetting(\"fallback.\", \"name\", k -> Setting.simpleString(k, Property.Dynamic, Property.NodeScope));\n        Setting.AffixSetting<String> nameSetting = Setting.affixKeySetting(\n                \"foo.\",\n                \"name\",\n                k -> Setting.simpleString(\n                        k,\n                        \"_na_\".equals(k)\n                                ? nameFallbackSetting.getConcreteSettingForNamespace(k)\n                                : nameFallbackSetting.getConcreteSetting(k.replaceAll(\"^foo\", \"fallback\")),\n                        Property.Dynamic,\n                        Property.NodeScope));\n        Setting.AffixSetting<Integer> barSetting =\n                Setting.affixKeySetting(\"foo.\", \"bar\", k -> Setting.intSetting(k, 1, Property.Dynamic, Property.NodeScope), nameSetting);\n\n        final AbstractScopedSettings service =\n                new ClusterSettings(Settings.EMPTY,new HashSet<>(Arrays.asList(nameFallbackSetting, nameSetting, barSetting)));\n\n        final IllegalArgumentException e = expectThrows(\n                IllegalArgumentException.class,\n                () -> service.validate(Settings.builder().put(\"foo.test.bar\", 7).build(), true));\n        assertThat(e, hasToString(containsString(\"missing required setting [foo.test.name] for setting [foo.test.bar]\")));\n\n        service.validate(Settings.builder().put(\"foo.test.name\", \"test\").put(\"foo.test.bar\", 7).build(), true);\n        service.validate(Settings.builder().put(\"fallback.test.name\", \"test\").put(\"foo.test.bar\", 7).build(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"B"}],"commitId":"cdc4f57a773b588fe872f247ee62c3d5539e2faa","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-11 04:30:44","modifiedFileCount":"186","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2019-12-10 01:39:26","codes":[{"authorDate":"2019-12-10 01:39:26","commitOrder":3,"curCode":"    public void testDependentSettings() {\n        Setting.AffixSetting<String> stringSetting = Setting.affixKeySetting(\"foo.\", \"name\",\n            (k) -> Setting.simpleString(k, Property.Dynamic, Property.NodeScope));\n        Setting.AffixSetting<Integer> intSetting = Setting.affixKeySetting(\"foo.\", \"bar\",\n            (k) ->  Setting.intSetting(k, 1, Property.Dynamic, Property.NodeScope), () -> stringSetting);\n\n        AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY, new HashSet<>(Arrays.asList(intSetting, stringSetting)));\n\n        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,\n            () -> service.validate(Settings.builder().put(\"foo.test.bar\", 7).build(), true));\n        assertEquals(\"missing required setting [foo.test.name] for setting [foo.test.bar]\", iae.getMessage());\n\n        service.validate(Settings.builder()\n            .put(\"foo.test.name\", \"test\")\n            .put(\"foo.test.bar\", 7)\n            .build(), true);\n\n        service.validate(Settings.builder().put(\"foo.test.bar\", 7).build(), false);\n    }\n","date":"2019-12-10 01:39:26","endLine":196,"groupId":"103881","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDependentSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f6/53ddd59b7f8aa6807befb11b9e2b296959b883.src","preCode":"    public void testDependentSettings() {\n        Setting.AffixSetting<String> stringSetting = Setting.affixKeySetting(\"foo.\", \"name\",\n            (k) -> Setting.simpleString(k, Property.Dynamic, Property.NodeScope));\n        Setting.AffixSetting<Integer> intSetting = Setting.affixKeySetting(\"foo.\", \"bar\",\n            (k) ->  Setting.intSetting(k, 1, Property.Dynamic, Property.NodeScope), stringSetting);\n\n        AbstractScopedSettings service = new ClusterSettings(Settings.EMPTY,new HashSet<>(Arrays.asList(intSetting, stringSetting)));\n\n        IllegalArgumentException iae = expectThrows(IllegalArgumentException.class,\n            () -> service.validate(Settings.builder().put(\"foo.test.bar\", 7).build(), true));\n        assertEquals(\"missing required setting [foo.test.name] for setting [foo.test.bar]\", iae.getMessage());\n\n        service.validate(Settings.builder()\n            .put(\"foo.test.name\", \"test\")\n            .put(\"foo.test.bar\", 7)\n            .build(), true);\n\n        service.validate(Settings.builder().put(\"foo.test.bar\", 7).build(), false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2019-12-10 01:39:26","commitOrder":3,"curCode":"    public void testDependentSettingsWithFallback() {\n        Setting.AffixSetting<String> nameFallbackSetting =\n                Setting.affixKeySetting(\"fallback.\", \"name\", k -> Setting.simpleString(k, Property.Dynamic, Property.NodeScope));\n        Setting.AffixSetting<String> nameSetting = Setting.affixKeySetting(\n                \"foo.\",\n                \"name\",\n                k -> Setting.simpleString(\n                        k,\n                        \"_na_\".equals(k)\n                                ? nameFallbackSetting.getConcreteSettingForNamespace(k)\n                                : nameFallbackSetting.getConcreteSetting(k.replaceAll(\"^foo\", \"fallback\")),\n                        Property.Dynamic,\n                        Property.NodeScope));\n        Setting.AffixSetting<Integer> barSetting = Setting.affixKeySetting(\n            \"foo.\",\n            \"bar\",\n            k -> Setting.intSetting(k, 1, Property.Dynamic, Property.NodeScope),\n            () -> nameSetting);\n\n        final AbstractScopedSettings service =\n                new ClusterSettings(Settings.EMPTY,new HashSet<>(Arrays.asList(nameFallbackSetting, nameSetting, barSetting)));\n\n        final IllegalArgumentException e = expectThrows(\n                IllegalArgumentException.class,\n                () -> service.validate(Settings.builder().put(\"foo.test.bar\", 7).build(), true));\n        assertThat(e, hasToString(containsString(\"missing required setting [foo.test.name] for setting [foo.test.bar]\")));\n\n        service.validate(Settings.builder().put(\"foo.test.name\", \"test\").put(\"foo.test.bar\", 7).build(), true);\n        service.validate(Settings.builder().put(\"fallback.test.name\", \"test\").put(\"foo.test.bar\", 7).build(), true);\n    }\n","date":"2019-12-10 01:39:26","endLine":271,"groupId":"103881","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDependentSettingsWithFallback","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f6/53ddd59b7f8aa6807befb11b9e2b296959b883.src","preCode":"    public void testDependentSettingsWithFallback() {\n        Setting.AffixSetting<String> nameFallbackSetting =\n                Setting.affixKeySetting(\"fallback.\", \"name\", k -> Setting.simpleString(k, Property.Dynamic, Property.NodeScope));\n        Setting.AffixSetting<String> nameSetting = Setting.affixKeySetting(\n                \"foo.\",\n                \"name\",\n                k -> Setting.simpleString(\n                        k,\n                        \"_na_\".equals(k)\n                                ? nameFallbackSetting.getConcreteSettingForNamespace(k)\n                                : nameFallbackSetting.getConcreteSetting(k.replaceAll(\"^foo\", \"fallback\")),\n                        Property.Dynamic,\n                        Property.NodeScope));\n        Setting.AffixSetting<Integer> barSetting =\n                Setting.affixKeySetting(\"foo.\", \"bar\", k -> Setting.intSetting(k, 1, Property.Dynamic, Property.NodeScope), nameSetting);\n\n        final AbstractScopedSettings service =\n                new ClusterSettings(Settings.EMPTY,new HashSet<>(Arrays.asList(nameFallbackSetting, nameSetting, barSetting)));\n\n        final IllegalArgumentException e = expectThrows(\n                IllegalArgumentException.class,\n                () -> service.validate(Settings.builder().put(\"foo.test.bar\", 7).build(), true));\n        assertThat(e, hasToString(containsString(\"missing required setting [foo.test.name] for setting [foo.test.bar]\")));\n\n        service.validate(Settings.builder().put(\"foo.test.name\", \"test\").put(\"foo.test.bar\", 7).build(), true);\n        service.validate(Settings.builder().put(\"fallback.test.name\", \"test\").put(\"foo.test.bar\", 7).build(), true);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/settings/ScopedSettingsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"87517d96f62da667d8ad4ae3fa440ce548b0a88c","commitMessage":"@@@Enable dependent settings values to be validated (#49942)\n\nToday settings can declare dependencies on another setting. This\ndeclaration is implemented so that if the declared setting is not set\nwhen the declaring setting is.  settings validation fails. Yet.  in some\ncases we want not only that the setting is set.  but that it also has a\nspecific value. For example.  with the monitoring exporter settings.  if\nxpack.monitoring.exporters.my_exporter.host is set.  we not only want\nthat xpack.monitoring.exporters.my_exporter.type is set.  but that it is\nalso set to local. This commit extends the settings infrastructure so\nthat this declaration is possible. The use of this in the monitoring\nexporter settings will be implemented in a follow-up.","date":"2019-12-10 01:39:26","modifiedFileCount":"8","status":"M","submitter":"Jason Tedor"}]
