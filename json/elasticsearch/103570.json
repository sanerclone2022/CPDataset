[{"authorTime":"2019-02-19 22:53:36","codes":[{"authorDate":"2019-02-19 22:53:36","commitOrder":1,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-02-19 22:53:36","endLine":256,"groupId":"42963","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/9ad6a0962c15666861dd43f82a92fb50f73cb2.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"B"},{"authorDate":"2019-02-19 22:53:36","commitOrder":1,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-02-19 22:53:36","endLine":256,"groupId":"42963","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/d7d5039ae8b414c4ed63ad9932132a471c8cae.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"B"}],"commitId":"92ef753b56d25215f19098cbce91553fcae74c64","commitMessage":"@@@Allow retention lease operations under blocks (#39089)\n\nThis commit allows manipulating retention leases under blocks.","date":"2019-02-19 22:53:36","modifiedFileCount":"9","status":"B","submitter":"Jason Tedor"},{"authorTime":"2019-11-28 18:31:51","codes":[{"authorDate":"2019-11-28 18:31:51","commitOrder":2,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-28 18:31:51","endLine":180,"groupId":"32593","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/3722d93666aff35f401752fcc72027ab488a9d.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2019-11-28 18:31:51","commitOrder":2,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-28 18:31:51","endLine":185,"groupId":"32593","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"6cca2b04fa06b981d3a73e12d3956bafd07b0e8a","commitMessage":"@@@Remove obsolete resolving logic from TRA (#49647)\n\nThis stems from a time where index requests were directly forwarded to\nTransportReplicationAction. Nowadays they are wrapped in a BulkShardRequest.  and this logic is\nobsolete.\n\nCloses #20279","date":"2019-11-28 18:31:51","modifiedFileCount":"22","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2019-11-28 20:12:27","codes":[{"authorDate":"2019-11-28 20:12:27","commitOrder":3,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-28 20:12:53","endLine":184,"groupId":"42963","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/14/dbb1cc5eed8fc8a547ad8a494fb4badca9d063.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2019-11-28 20:12:27","commitOrder":3,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-28 20:12:53","endLine":189,"groupId":"42963","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/e10a80fe79375905272e9013261fbadb78ac52.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"a354c607228d6c1784f6b1f02862fe363e859cdf","commitMessage":"@@@Revert \"Remove obsolete resolving logic from TRA (#49647)\"\n\nThis reverts commit 6cca2b04fa06b981d3a73e12d3956bafd07b0e8a.\n","date":"2019-11-28 20:12:53","modifiedFileCount":"22","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2019-11-29 18:01:24","codes":[{"authorDate":"2019-11-29 18:01:24","commitOrder":4,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-29 18:01:24","endLine":180,"groupId":"32593","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/3722d93666aff35f401752fcc72027ab488a9d.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2019-11-29 18:01:24","commitOrder":4,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-29 18:01:24","endLine":185,"groupId":"32593","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"3ad8aa6d46580229823d298e9ce68ba3aaadc3d6","commitMessage":"@@@Remove obsolete resolving logic from TRA (#49685)\n\nThis stems from a time where index requests were directly forwarded to\nTransportReplicationAction. Nowadays they are wrapped in a BulkShardRequest.  and this logic is\nobsolete.\n\nIn contrast to prior PR (#49647).  this PR also fixes (see b3697cc) a situation where the previous\nindex expression logic had an interesting side effect. For bulk requests (which had resolveIndex\n= false).  the reroute phase was waiting for the index to appear in case where it was not present. \nand for all other replication requests (resolveIndex = true) it would right away throw an\nIndexNotFoundException while resolving the name and exit. With #49647.  every replication\nrequest was now waiting for the index to appear.  which was problematic when the given index\nhad just been deleted (e.g. deleting a follower index while it's still receiving requests from the\nleader.  where these requests would now wait up to a minute for the index to appear). This PR\nnow adds b3697cc on top of that prior PR to make sure to reestablish some of the prior behavior\nwhere the reroute phase waits for the bulk request for the index to appear. That logic was in\nplace to ensure that when an index was created and not all nodes had learned about it yet.  that\nthe bulk would not fail somewhere in the reroute phase. This is now only restricted to the\nsituation where the current node has an older cluster state than the one that coordinated the\nbulk request (which checks that the index is present). This also means that when an index is\ndeleted.  we will no longer unnecessarily wait up to the timeout for the index o appear.  and\ninstead fail the request.\n\nCloses #20279","date":"2019-11-29 18:01:24","modifiedFileCount":"27","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2019-11-29 18:01:24","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":5,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new WriteMemoryLimits());\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2020-06-26 22:33:37","endLine":188,"groupId":"42963","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7c/faf06f3e581af4292ef748c16988c983d3096b.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2019-11-29 18:01:24","commitOrder":5,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-29 18:01:24","endLine":185,"groupId":"32593","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"},{"authorTime":"2019-11-29 18:01:24","codes":[{"authorDate":"2020-07-10 21:44:56","commitOrder":6,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new WriteMemoryLimits(Settings.EMPTY));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2020-07-10 21:44:56","endLine":188,"groupId":"42963","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/31/d32e6b705fc91a8cfc2bda29bff273476936f1.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new WriteMemoryLimits());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2019-11-29 18:01:24","commitOrder":6,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-29 18:01:24","endLine":185,"groupId":"32593","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"}],"commitId":"366ca378a8644d6654417988820c67f4feb714fe","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-10 21:44:56","modifiedFileCount":"565","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2019-11-29 18:01:24","codes":[{"authorDate":"2020-07-14 20:47:57","commitOrder":7,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexingPressure(Settings.EMPTY));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2020-07-14 20:47:57","endLine":188,"groupId":"42963","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a1/f08407c1ffe611b665e408842a3ea0692da843.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new WriteMemoryLimits(Settings.EMPTY));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2019-11-29 18:01:24","commitOrder":7,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-29 18:01:24","endLine":185,"groupId":"32593","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"}],"commitId":"f426916b01a3aea836dddd4a820f640ed322f94d","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-14 20:47:57","modifiedFileCount":"165","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2019-11-29 18:01:24","codes":[{"authorDate":"2020-09-23 02:14:45","commitOrder":8,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexingPressure(Settings.EMPTY),\n                new SystemIndices(Map.of()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2020-09-23 02:14:45","endLine":193,"groupId":"42963","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/15/145dd7fba5a6e9f8beceff94c4ed49490b4a11.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexingPressure(Settings.EMPTY));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2019-11-29 18:01:24","commitOrder":8,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-29 18:01:24","endLine":185,"groupId":"32593","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"}],"commitId":"242083a36e02496aae9214dc41b89372022e7076","commitMessage":"@@@Dedicated threadpool for system index writes (#61655)\n\nThis commit adds a dedicated threadpool for system index write\noperations. The dedicated resources for system index writes serves as\na means to ensure that user activity does not block important system\noperations from occurring such as the management of users and roles.","date":"2020-09-23 02:14:45","modifiedFileCount":"29","status":"M","submitter":"Jay Modi"},{"authorTime":"2019-11-29 18:01:24","codes":[{"authorDate":"2021-03-02 01:38:53","commitOrder":9,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexingPressure(Settings.EMPTY),\n                EmptySystemIndices.INSTANCE);\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2021-03-02 01:38:53","endLine":181,"groupId":"103570","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/04/efd7000622e69ed61704e5761cda9d3545b492.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseSyncAction action = new RetentionLeaseSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexingPressure(Settings.EMPTY),\n                new SystemIndices(Map.of()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2019-11-29 18:01:24","commitOrder":9,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-29 18:01:24","endLine":185,"groupId":"103570","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"N"}],"commitId":"1487a5a991e78dc17eebb349b105409b51b63b36","commitMessage":"@@@Introduce system index types including external (#68919)\n\nThis commit introduces system index types that will be used to\ndifferentiate behavior. Previously system indices were all treated the\nsame regardless of whether they belonged to Elasticsearch.  a stack\ncomponent.  or one of our solutions. Upon further discussion and\nanalysis this decision was not in the best interest of the various\nteams and instead a new type of system index was needed. These system\nindices will be referred to as external system indices. Within external\nsystem indices.  an option exists for these indices to be managed by\nElasticsearch or to be managed by the external product.\n\nIn order to represent this within Elasticsearch.  each system index will\nhave a type and this type will be used to control behavior.\n\nCloses #67383","date":"2021-03-02 01:38:53","modifiedFileCount":"87","status":"M","submitter":"Jay Modi"}]
