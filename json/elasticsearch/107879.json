[{"authorTime":"2019-11-15 21:29:19","codes":[{"authorDate":"2019-11-15 21:29:19","commitOrder":1,"curCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        if (\"_index\".equals(fieldName)) {\n            \r\n            \r\n            QueryShardContext shardContext = queryRewriteContext.convertToShardContext();\n            if (shardContext != null && shardContext.indexMatches(BytesRefs.toString(value)) == false) {\n                return new MatchNoneQueryBuilder();\n            }            \n        }\n        return super.doRewrite(queryRewriteContext);\n    }\n","date":"2019-11-15 21:29:19","endLine":144,"groupId":"22837","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doRewrite","params":"(QueryRewriteContextqueryRewriteContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/2bfb2c6b5b374715c5e9c5ca2b74ea68b11c8d.src","preCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        if (\"_index\".equals(fieldName)) {\n            \r\n            \r\n            QueryShardContext shardContext = queryRewriteContext.convertToShardContext();\n            if (shardContext != null && shardContext.indexMatches(BytesRefs.toString(value)) == false) {\n                return new MatchNoneQueryBuilder();\n            }            \n        }\n        return super.doRewrite(queryRewriteContext);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"},{"authorDate":"2019-11-15 21:29:19","commitOrder":1,"curCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        if (\"_index\".equals(fieldName)) {\n            \r\n            \r\n            QueryShardContext shardContext = queryRewriteContext.convertToShardContext();\n            if (shardContext != null && shardContext.indexMatches(BytesRefs.toString(value)) == false) {\n                return new MatchNoneQueryBuilder();\n            }            \n        }\n        return super.doRewrite(queryRewriteContext);\n    }    \n","date":"2019-11-15 21:29:19","endLine":194,"groupId":"22837","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doRewrite","params":"(QueryRewriteContextqueryRewriteContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/5fa8d476dfd69439073a458ff1f67722c22c9a.src","preCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        if (\"_index\".equals(fieldName)) {\n            \r\n            \r\n            QueryShardContext shardContext = queryRewriteContext.convertToShardContext();\n            if (shardContext != null && shardContext.indexMatches(BytesRefs.toString(value)) == false) {\n                return new MatchNoneQueryBuilder();\n            }            \n        }\n        return super.doRewrite(queryRewriteContext);\n    }    \n","realPath":"server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"B"}],"commitId":"82c00f0ff1bd720bd28fafac119938499e60803e","commitMessage":"@@@Search optimisation - add canMatch early aborts for queries on \"_index\" field (#48681)\n\nMake queries on the ?_index? field fast-fail if the target shard is an index that doesn?t match the query expression. Part of the ?canMatch? phase optimisations.\n\nCloses #48473","date":"2019-11-15 21:29:19","modifiedFileCount":"9","status":"B","submitter":"markharwood"},{"authorTime":"2020-02-26 17:25:38","codes":[{"authorDate":"2020-02-26 17:25:38","commitOrder":2,"curCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        QueryShardContext context = queryRewriteContext.convertToShardContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.fieldMapper(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = fieldType.termQuery(value, context);\n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n        return super.doRewrite(queryRewriteContext);\n    }\n","date":"2020-02-26 17:25:37","endLine":155,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doRewrite","params":"(QueryRewriteContextqueryRewriteContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/0118d26e8db211a1797bf772c157c266374b33.src","preCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        if (\"_index\".equals(fieldName)) {\n            \r\n            \r\n            QueryShardContext shardContext = queryRewriteContext.convertToShardContext();\n            if (shardContext != null && shardContext.indexMatches(BytesRefs.toString(value)) == false) {\n                return new MatchNoneQueryBuilder();\n            }            \n        }\n        return super.doRewrite(queryRewriteContext);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2020-02-26 17:25:38","commitOrder":2,"curCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        QueryShardContext context = queryRewriteContext.convertToShardContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.fieldMapper(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = fieldType.wildcardQuery(value, null, context); \r\n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n\n        return super.doRewrite(queryRewriteContext);\n    }    \n","date":"2020-02-26 17:25:37","endLine":207,"groupId":"17155","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doRewrite","params":"(QueryRewriteContextqueryRewriteContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/39/ca3b0a45b6fd266bc8b5d3a29532f950d13e4c.src","preCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        if (\"_index\".equals(fieldName)) {\n            \r\n            \r\n            QueryShardContext shardContext = queryRewriteContext.convertToShardContext();\n            if (shardContext != null && shardContext.indexMatches(BytesRefs.toString(value)) == false) {\n                return new MatchNoneQueryBuilder();\n            }            \n        }\n        return super.doRewrite(queryRewriteContext);\n    }    \n","realPath":"server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"8830eb6b9a8da0202806791f29f049b764ad19af","commitMessage":"@@@Generalize how queries on `_index` are handled at rewrite time (#52486)\n\n#49713 aims at introducing a new constant_keyword field which.  like _index.  always rewrites queries to a MatchAllQueryBuilder or a MatchNoneQueryBuilder in order to skip shards in the can_match phase. This change introduces a new ConstantFieldType marker class that helps get this functionality with any field and not just _index.\n\nSince this change refactors rewrites.  I also took it as an opportunity to adrress #49254: instead of returning the same queries you would get on a keyword field when a field is unmapped.  queries get rewritten to a MatchNoDocsQueryBuilder.\n\nThis change exposed a couple bugs.  like the fact that the percolator doesn't rewrite queries at query time.  or that the significant_terms aggregation doesn't rewrite its inner filter.  which I fixed.\n\nCloses #49254","date":"2020-02-26 17:25:37","modifiedFileCount":"36","status":"M","submitter":"Adrien Grand"},{"authorTime":"2020-09-19 00:17:08","codes":[{"authorDate":"2020-09-19 00:17:08","commitOrder":3,"curCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        QueryShardContext context = queryRewriteContext.convertToShardContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.fieldMapper(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = null;\n                if (caseInsensitive) {\n                    query = fieldType.termQueryCaseInsensitive(value, context);\n                } else {\n                    query = fieldType.termQuery(value, context);\n                }\n                    \n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n        return super.doRewrite(queryRewriteContext);\n    }\n","date":"2020-09-19 00:17:08","endLine":212,"groupId":"44140","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doRewrite","params":"(QueryRewriteContextqueryRewriteContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/270acd12ede9ae2d6da85fca66041e1b6beaf3.src","preCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        QueryShardContext context = queryRewriteContext.convertToShardContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.fieldMapper(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = fieldType.termQuery(value, context);\n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n        return super.doRewrite(queryRewriteContext);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2020-09-19 00:17:08","commitOrder":3,"curCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        QueryShardContext context = queryRewriteContext.convertToShardContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.fieldMapper(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = fieldType.wildcardQuery(value, null, caseInsensitive, context); \r\n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n\n        return super.doRewrite(queryRewriteContext);\n    }    \n","date":"2020-09-19 00:17:08","endLine":244,"groupId":"68572","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doRewrite","params":"(QueryRewriteContextqueryRewriteContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/876a5828dcf7d679d20178ae16e9b129e006f1.src","preCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        QueryShardContext context = queryRewriteContext.convertToShardContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.fieldMapper(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = fieldType.wildcardQuery(value, null, context); \r\n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n\n        return super.doRewrite(queryRewriteContext);\n    }    \n","realPath":"server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"fe9145fa5e7fb26c190725486eb6d573e5e311ef","commitMessage":"@@@Search - add case insensitive flag for \"term\" family of queries (#61596)\n\nAdds  case insensitive flag for term.  prefix.  and wildcard queries\n\nCloses #61546","date":"2020-09-19 00:17:08","modifiedFileCount":"42","status":"M","submitter":"markharwood"},{"authorTime":"2020-10-07 22:11:53","codes":[{"authorDate":"2020-10-07 22:11:53","commitOrder":4,"curCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        QueryShardContext context = queryRewriteContext.convertToShardContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.getFieldType(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = null;\n                if (caseInsensitive) {\n                    query = fieldType.termQueryCaseInsensitive(value, context);\n                } else {\n                    query = fieldType.termQuery(value, context);\n                }\n\n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n        return super.doRewrite(queryRewriteContext);\n    }\n","date":"2020-10-07 22:11:53","endLine":211,"groupId":"44140","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doRewrite","params":"(QueryRewriteContextqueryRewriteContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/37/30efa7d01bf44ee4b76ad538e83e64d35935ad.src","preCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        QueryShardContext context = queryRewriteContext.convertToShardContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.fieldMapper(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = null;\n                if (caseInsensitive) {\n                    query = fieldType.termQueryCaseInsensitive(value, context);\n                } else {\n                    query = fieldType.termQuery(value, context);\n                }\n                    \n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n        return super.doRewrite(queryRewriteContext);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2020-10-07 22:11:53","commitOrder":4,"curCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        QueryShardContext context = queryRewriteContext.convertToShardContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.getFieldType(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = fieldType.wildcardQuery(value, null, caseInsensitive, context); \r\n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n\n        return super.doRewrite(queryRewriteContext);\n    }\n","date":"2020-10-07 22:11:53","endLine":244,"groupId":"68572","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doRewrite","params":"(QueryRewriteContextqueryRewriteContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/09/9a8c3a6e59618d03060fb387b7e7753895588f.src","preCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        QueryShardContext context = queryRewriteContext.convertToShardContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.fieldMapper(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = fieldType.wildcardQuery(value, null, caseInsensitive, context); \r\n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n\n        return super.doRewrite(queryRewriteContext);\n    }    \n","realPath":"server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"95582da9a57086c1bf519b300ffc420d03448e28","commitMessage":"@@@Rename QueryShardContext#fieldMapper to getFieldType (#63399)\n\nGiven that we have a class called `FieldMapper` and that the `fieldMapper` method exposed by `QueryShardContext` actually allows to get a `MappedFieldType` given its name.  this commit renames such method to `getFieldType`","date":"2020-10-07 22:11:53","modifiedFileCount":"72","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":5,"curCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        SearchExecutionContext context = queryRewriteContext.convertToSearchExecutionContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.getFieldType(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = null;\n                if (caseInsensitive) {\n                    query = fieldType.termQueryCaseInsensitive(value, context);\n                } else {\n                    query = fieldType.termQuery(value, context);\n                }\n\n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n        return super.doRewrite(queryRewriteContext);\n    }\n","date":"2021-01-15 01:11:59","endLine":202,"groupId":"107879","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doRewrite","params":"(QueryRewriteContextqueryRewriteContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/171505a05daac2251e7e59192bc2d2e781ebec.src","preCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        QueryShardContext context = queryRewriteContext.convertToShardContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.getFieldType(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = null;\n                if (caseInsensitive) {\n                    query = fieldType.termQueryCaseInsensitive(value, context);\n                } else {\n                    query = fieldType.termQuery(value, context);\n                }\n\n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n        return super.doRewrite(queryRewriteContext);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/TermQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":5,"curCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        SearchExecutionContext context = queryRewriteContext.convertToSearchExecutionContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.getFieldType(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = fieldType.wildcardQuery(value, null, caseInsensitive, context); \r\n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n\n        return super.doRewrite(queryRewriteContext);\n    }\n","date":"2021-01-15 01:11:59","endLine":235,"groupId":"107879","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doRewrite","params":"(QueryRewriteContextqueryRewriteContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/15/9caf7ec4a9aa399c640fc5e2d3ef36c5f7ea94.src","preCode":"    protected QueryBuilder doRewrite(QueryRewriteContext queryRewriteContext) throws IOException {\n        QueryShardContext context = queryRewriteContext.convertToShardContext();\n        if (context != null) {\n            MappedFieldType fieldType = context.getFieldType(this.fieldName);\n            if (fieldType == null) {\n                return new MatchNoneQueryBuilder();\n            } else if (fieldType instanceof ConstantFieldType) {\n                \r\n                \r\n                \r\n                Query query = fieldType.wildcardQuery(value, null, caseInsensitive, context); \r\n                if (query instanceof MatchAllDocsQuery) {\n                    return new MatchAllQueryBuilder();\n                } else if (query instanceof MatchNoDocsQuery) {\n                    return new MatchNoneQueryBuilder();\n                } else {\n                    assert false : \"Constant fields must produce match-all or match-none queries, got \" + query ;\n                }\n            }\n        }\n\n        return super.doRewrite(queryRewriteContext);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
