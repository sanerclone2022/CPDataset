[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    final IndexService mockIndexService(final IndexMetaData indexMetaData, ClusterService clusterService) {\n        final IndexService indexService = mock(IndexService.class);\n        when(indexService.getShard(anyInt())).then(invocation -> {\n            int shard = (Integer) invocation.getArguments()[0];\n            final ShardId shardId = new ShardId(indexMetaData.getIndex(), shard);\n            if (shard > indexMetaData.getNumberOfShards()) {\n                throw new ShardNotFoundException(shardId);\n            }\n            return mockIndexShard(shardId, clusterService);\n        });\n        return indexService;\n    }\n","date":"2018-04-26 03:22:53","endLine":419,"groupId":"34528","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mockIndexService","params":"(finalIndexMetaDataindexMetaData@ClusterServiceclusterService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/2fbf1578714dc92914f0d663ebe2ee4ffbe5e6.src","preCode":"    final IndexService mockIndexService(final IndexMetaData indexMetaData, ClusterService clusterService) {\n        final IndexService indexService = mock(IndexService.class);\n        when(indexService.getShard(anyInt())).then(invocation -> {\n            int shard = (Integer) invocation.getArguments()[0];\n            final ShardId shardId = new ShardId(indexMetaData.getIndex(), shard);\n            if (shard > indexMetaData.getNumberOfShards()) {\n                throw new ShardNotFoundException(shardId);\n            }\n            return mockIndexShard(shardId, clusterService);\n        });\n        return indexService;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    final IndexService mockIndexService(final IndexMetaData indexMetaData, ClusterService clusterService) {\n        final IndexService indexService = mock(IndexService.class);\n        when(indexService.getShard(anyInt())).then(invocation -> {\n            int shard = (Integer) invocation.getArguments()[0];\n            final ShardId shardId = new ShardId(indexMetaData.getIndex(), shard);\n            if (shard > indexMetaData.getNumberOfShards()) {\n                throw new ShardNotFoundException(shardId);\n            }\n            return mockIndexShard(shardId, clusterService);\n        });\n        return indexService;\n    }\n","date":"2018-04-26 03:22:53","endLine":1190,"groupId":"34528","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mockIndexService","params":"(finalIndexMetaDataindexMetaData@ClusterServiceclusterService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/7844950d6b28dcbbe93db4426064a92a76ce45.src","preCode":"    final IndexService mockIndexService(final IndexMetaData indexMetaData, ClusterService clusterService) {\n        final IndexService indexService = mock(IndexService.class);\n        when(indexService.getShard(anyInt())).then(invocation -> {\n            int shard = (Integer) invocation.getArguments()[0];\n            final ShardId shardId = new ShardId(indexMetaData.getIndex(), shard);\n            if (shard > indexMetaData.getNumberOfShards()) {\n                throw new ShardNotFoundException(shardId);\n            }\n            return mockIndexShard(shardId, clusterService);\n        });\n        return indexService;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1179,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-04-05 15:50:44","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    final IndexService mockIndexService(final IndexMetaData indexMetaData, ClusterService clusterService) {\n        final IndexService indexService = mock(IndexService.class);\n        when(indexService.getShard(anyInt())).then(invocation -> {\n            int shard = (Integer) invocation.getArguments()[0];\n            final ShardId shardId = new ShardId(indexMetaData.getIndex(), shard);\n            if (shard > indexMetaData.getNumberOfShards()) {\n                throw new ShardNotFoundException(shardId);\n            }\n            return mockIndexShard(shardId, clusterService);\n        });\n        return indexService;\n    }\n","date":"2018-04-26 03:22:53","endLine":419,"groupId":"34528","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mockIndexService","params":"(finalIndexMetaDataindexMetaData@ClusterServiceclusterService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/2fbf1578714dc92914f0d663ebe2ee4ffbe5e6.src","preCode":"    final IndexService mockIndexService(final IndexMetaData indexMetaData, ClusterService clusterService) {\n        final IndexService indexService = mock(IndexService.class);\n        when(indexService.getShard(anyInt())).then(invocation -> {\n            int shard = (Integer) invocation.getArguments()[0];\n            final ShardId shardId = new ShardId(indexMetaData.getIndex(), shard);\n            if (shard > indexMetaData.getNumberOfShards()) {\n                throw new ShardNotFoundException(shardId);\n            }\n            return mockIndexShard(shardId, clusterService);\n        });\n        return indexService;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"N"},{"authorDate":"2019-04-05 15:50:44","commitOrder":2,"curCode":"    private IndexService mockIndexService(final IndexMetaData indexMetaData, ClusterService clusterService) {\n        final IndexService indexService = mock(IndexService.class);\n        when(indexService.getShard(anyInt())).then(invocation -> {\n            int shard = (Integer) invocation.getArguments()[0];\n            final ShardId shardId = new ShardId(indexMetaData.getIndex(), shard);\n            if (shard > indexMetaData.getNumberOfShards()) {\n                throw new ShardNotFoundException(shardId);\n            }\n            return mockIndexShard(shardId, clusterService);\n        });\n        return indexService;\n    }\n","date":"2019-04-05 15:50:44","endLine":1280,"groupId":"34528","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mockIndexService","params":"(finalIndexMetaDataindexMetaData@ClusterServiceclusterService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/02/e9ff3146cf61716d3b740eb088c62650724275.src","preCode":"    final IndexService mockIndexService(final IndexMetaData indexMetaData, ClusterService clusterService) {\n        final IndexService indexService = mock(IndexService.class);\n        when(indexService.getShard(anyInt())).then(invocation -> {\n            int shard = (Integer) invocation.getArguments()[0];\n            final ShardId shardId = new ShardId(indexMetaData.getIndex(), shard);\n            if (shard > indexMetaData.getNumberOfShards()) {\n                throw new ShardNotFoundException(shardId);\n            }\n            return mockIndexShard(shardId, clusterService);\n        });\n        return indexService;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1269,"status":"M"}],"commitId":"ea84b96c8cb4f19c2569bb8f68d8f119ceed1a6b","commitMessage":"@@@Remove test-only customisation from TransReplAct (#40863)\n\nThe `getIndexShard()` and `sendReplicaRequest()` methods in\nTransportReplicationAction are effectively only used to customise some\nbehaviour in tests. However there are other ways to do this that do not cause\nsuch an obstacle to separating the TransportReplicationAction into its two\nhalves (see #40706).\n\nThis commit removes these customisation points and injects the test-only\nbehaviour using other techniques.","date":"2019-04-05 15:50:44","modifiedFileCount":"5","status":"M","submitter":"David Turner"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    final IndexService mockIndexService(final IndexMetadata indexMetadata, ClusterService clusterService) {\n        final IndexService indexService = mock(IndexService.class);\n        when(indexService.getShard(anyInt())).then(invocation -> {\n            int shard = (Integer) invocation.getArguments()[0];\n            final ShardId shardId = new ShardId(indexMetadata.getIndex(), shard);\n            if (shard > indexMetadata.getNumberOfShards()) {\n                throw new ShardNotFoundException(shardId);\n            }\n            return mockIndexShard(shardId, clusterService);\n        });\n        return indexService;\n    }\n","date":"2020-04-01 03:52:01","endLine":418,"groupId":"105676","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"mockIndexService","params":"(finalIndexMetadataindexMetadata@ClusterServiceclusterService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/9aa25bc0cd3075c49ee09012086d0f5214d729.src","preCode":"    final IndexService mockIndexService(final IndexMetaData indexMetaData, ClusterService clusterService) {\n        final IndexService indexService = mock(IndexService.class);\n        when(indexService.getShard(anyInt())).then(invocation -> {\n            int shard = (Integer) invocation.getArguments()[0];\n            final ShardId shardId = new ShardId(indexMetaData.getIndex(), shard);\n            if (shard > indexMetaData.getNumberOfShards()) {\n                throw new ShardNotFoundException(shardId);\n            }\n            return mockIndexShard(shardId, clusterService);\n        });\n        return indexService;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportWriteActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    private IndexService mockIndexService(final IndexMetadata indexMetadata, ClusterService clusterService) {\n        final IndexService indexService = mock(IndexService.class);\n        when(indexService.getShard(anyInt())).then(invocation -> {\n            int shard = (Integer) invocation.getArguments()[0];\n            final ShardId shardId = new ShardId(indexMetadata.getIndex(), shard);\n            if (shard > indexMetadata.getNumberOfShards()) {\n                throw new ShardNotFoundException(shardId);\n            }\n            return mockIndexShard(shardId, clusterService);\n        });\n        return indexService;\n    }\n","date":"2020-04-01 03:52:01","endLine":1319,"groupId":"105676","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"mockIndexService","params":"(finalIndexMetadataindexMetadata@ClusterServiceclusterService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/e1782cc66d82cbea0b47857b6541daa12460ea.src","preCode":"    private IndexService mockIndexService(final IndexMetaData indexMetaData, ClusterService clusterService) {\n        final IndexService indexService = mock(IndexService.class);\n        when(indexService.getShard(anyInt())).then(invocation -> {\n            int shard = (Integer) invocation.getArguments()[0];\n            final ShardId shardId = new ShardId(indexMetaData.getIndex(), shard);\n            if (shard > indexMetaData.getNumberOfShards()) {\n                throw new ShardNotFoundException(shardId);\n            }\n            return mockIndexShard(shardId, clusterService);\n        });\n        return indexService;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1308,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"}]
