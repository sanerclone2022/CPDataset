[{"authorTime":"2019-06-25 15:48:27","codes":[{"authorDate":"2018-07-12 15:57:39","commitOrder":2,"curCode":"    protected SnapshotIndexStatus doParseInstance(XContentParser parser) throws IOException {\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.nextToken(), parser::getTokenLocation);\n        SnapshotIndexStatus status = SnapshotIndexStatus.fromXContent(parser);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.END_OBJECT, parser.nextToken(), parser::getTokenLocation);\n        return status;\n    }\n","date":"2018-07-12 15:57:39","endLine":58,"groupId":"28800","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doParseInstance","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/eb355f3a6214958898e0c43ca9449d5ea5716c.src","preCode":"    protected SnapshotIndexStatus doParseInstance(XContentParser parser) throws IOException {\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.nextToken(), parser::getTokenLocation);\n        SnapshotIndexStatus status = SnapshotIndexStatus.fromXContent(parser);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.END_OBJECT, parser.nextToken(), parser::getTokenLocation);\n        return status;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/status/SnapshotIndexStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"NB"},{"authorDate":"2019-06-25 15:48:27","commitOrder":2,"curCode":"    private static DataFrameAnalysis parseAnalysis(XContentParser parser) throws IOException {\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.nextToken(), parser::getTokenLocation);\n        DataFrameAnalysis analysis = parser.namedObject(DataFrameAnalysis.class, parser.currentName(), true);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.END_OBJECT, parser.nextToken(), parser::getTokenLocation);\n        return analysis;\n    }\n","date":"2019-06-25 15:48:27","endLine":77,"groupId":"28800","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"parseAnalysis","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b1/309e66afcd40b99cfa886e31b7bd5d2773a985.src","preCode":"    private static DataFrameAnalysis parseAnalysis(XContentParser parser) throws IOException {\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.nextToken(), parser::getTokenLocation);\n        DataFrameAnalysis analysis = parser.namedObject(DataFrameAnalysis.class, parser.currentName(), true);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.END_OBJECT, parser.nextToken(), parser::getTokenLocation);\n        return analysis;\n    }\n","realPath":"client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/DataFrameAnalyticsConfig.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"}],"commitId":"5fa36dad0b8503bef3d91173bb342da555445c26","commitMessage":"@@@[ML] Machine learning data frame analytics (#43544)\n\nThis merges the initial work that adds a framework for performing\nmachine learning analytics on data frames. The feature is currently experimental\nand requires a platinum license. Note that the original commits can be\nfound in the `feature-ml-data-frame-analytics` branch.\n\nA new set of APIs is added which allows the creation of data frame analytics\njobs. Configuration allows specifying different types of analysis to be performed\non a data frame. At first there is support for outlier detection.\n\nThe APIs are:\n\n- PUT _ml/data_frame/analysis/{id}\n- GET _ml/data_frame/analysis/{id}\n- GET _ml/data_frame/analysis/{id}/_stats\n- POST _ml/data_frame/analysis/{id}/_start\n- POST _ml/data_frame/analysis/{id}/_stop\n- DELETE _ml/data_frame/analysis/{id}\n\nWhen a data frame analytics job is started a persistent task is created and started.\nThe main steps of the task are:\n\n1. reindex the source index into the dest index\n2. analyze the data through the data_frame_analyzer c++ process\n3. merge the results of the process back into the destination index\n\nIn addition.  an evaluation API is added which packages commonly used metrics\nthat provide evaluation of various analysis:\n\n- POST _ml/data_frame/_evaluate\n\n","date":"2019-06-25 15:48:27","modifiedFileCount":"66","status":"M","submitter":"Dimitris Athanasiou"},{"authorTime":"2020-09-21 23:03:05","codes":[{"authorDate":"2020-09-21 23:03:05","commitOrder":3,"curCode":"    protected SnapshotIndexStatus doParseInstance(XContentParser parser) throws IOException {\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.nextToken(), parser);\n        SnapshotIndexStatus status = SnapshotIndexStatus.fromXContent(parser);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.END_OBJECT, parser.nextToken(), parser);\n        return status;\n    }\n","date":"2020-09-21 23:03:05","endLine":58,"groupId":"105858","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doParseInstance","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8e/aa0e9568305e6d4807c2f2b46b66f32e63a1ad.src","preCode":"    protected SnapshotIndexStatus doParseInstance(XContentParser parser) throws IOException {\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser::getTokenLocation);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.nextToken(), parser::getTokenLocation);\n        SnapshotIndexStatus status = SnapshotIndexStatus.fromXContent(parser);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.END_OBJECT, parser.nextToken(), parser::getTokenLocation);\n        return status;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/admin/cluster/snapshots/status/SnapshotIndexStatusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2020-09-21 23:03:05","commitOrder":3,"curCode":"    private static DataFrameAnalysis parseAnalysis(XContentParser parser) throws IOException {\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.nextToken(), parser);\n        DataFrameAnalysis analysis = parser.namedObject(DataFrameAnalysis.class, parser.currentName(), true);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.END_OBJECT, parser.nextToken(), parser);\n        return analysis;\n    }\n","date":"2020-09-21 23:03:05","endLine":93,"groupId":"105858","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"parseAnalysis","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ac/38aa99f2c90a31bd5f67b69f8a2115d7969b75.src","preCode":"    private static DataFrameAnalysis parseAnalysis(XContentParser parser) throws IOException {\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.currentToken(), parser::getTokenLocation);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.FIELD_NAME, parser.nextToken(), parser::getTokenLocation);\n        DataFrameAnalysis analysis = parser.namedObject(DataFrameAnalysis.class, parser.currentName(), true);\n        XContentParserUtils.ensureExpectedToken(XContentParser.Token.END_OBJECT, parser.nextToken(), parser::getTokenLocation);\n        return analysis;\n    }\n","realPath":"client/rest-high-level/src/main/java/org/elasticsearch/client/ml/dataframe/DataFrameAnalyticsConfig.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"f34246b90b508802fd91412883da5895965c8a4c","commitMessage":"@@@Optimize XContentParserUtils.ensureExpectedToken (#62691)\n\nWe only ever use this with `XContentParser` no need to make it inline\nworse by forcing the lambda and hence dynamic callsite here.\n=> Extraced the exception formatting code path that is likely very cold\nto a separate method and removed the lambda usage in hot loops by simplifying\nthe signature here.","date":"2020-09-21 23:03:05","modifiedFileCount":"103","status":"M","submitter":"Armin Braun"}]
