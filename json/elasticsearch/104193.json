[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-05-03 15:54:15","commitOrder":2,"curCode":"    public void testRegisterTransport() {\n        Settings settings = Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY, \"custom\").build();\n        Supplier<Transport> custom = () -> null; \r\n        NetworkPlugin plugin = new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"custom\", custom);\n            }\n        };\n        NetworkModule module = newNetworkModule(settings, false, plugin);\n        assertFalse(module.isTransportClient());\n        assertSame(custom, module.getTransportSupplier());\n\n        \r\n        module = newNetworkModule(settings, true, plugin);\n        assertSame(custom, module.getTransportSupplier());\n        assertTrue(module.isTransportClient());\n    }\n","date":"2018-05-03 15:54:15","endLine":150,"groupId":"32235","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegisterTransport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ba/74e373f884263100595583dfce922a20ea75cc.src","preCode":"    public void testRegisterTransport() {\n        Settings settings = Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY, \"custom\").build();\n        Supplier<Transport> custom = () -> null; \r\n        NetworkPlugin plugin = new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"custom\", custom);\n            }\n        };\n        NetworkModule module = newNetworkModule(settings, false, plugin);\n        assertFalse(module.isTransportClient());\n        assertSame(custom, module.getTransportSupplier());\n\n        \r\n        module = newNetworkModule(settings, true, plugin);\n        assertSame(custom, module.getTransportSupplier());\n        assertTrue(module.isTransportClient());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/network/NetworkModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"MB"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testOverrideDefault() {\n        Settings settings = Settings.builder()\n            .put(NetworkModule.HTTP_TYPE_SETTING.getKey(), \"custom\")\n            .put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(), \"default_custom\")\n            .put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(), \"local\")\n            .put(NetworkModule.TRANSPORT_TYPE_KEY, \"default_custom\").build();\n        Supplier<Transport> customTransport = () -> null;  \r\n        Supplier<HttpServerTransport> custom = FakeHttpTransport::new;\n        Supplier<HttpServerTransport> def = FakeHttpTransport::new;\n        NetworkModule module = newNetworkModule(settings, false, new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"default_custom\", customTransport);\n            }\n\n            @Override\n            public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool,\n                                                                                BigArrays bigArrays,\n                                                                                CircuitBreakerService circuitBreakerService,\n                                                                                NamedWriteableRegistry namedWriteableRegistry,\n                                                                                NamedXContentRegistry xContentRegistry,\n                                                                                NetworkService networkService,\n                                                                                HttpServerTransport.Dispatcher requestDispatcher) {\n                Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>();\n                supplierMap.put(\"custom\", custom);\n                supplierMap.put(\"default_custom\", def);\n                return supplierMap;\n            }\n        });\n        assertSame(custom, module.getHttpServerTransportSupplier());\n        assertSame(customTransport, module.getTransportSupplier());\n    }\n","date":"2018-04-26 03:22:53","endLine":224,"groupId":"32237","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverrideDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/09/dc8607bc4840453f1bbdd9ae29c96dcfa56ac1.src","preCode":"    public void testOverrideDefault() {\n        Settings settings = Settings.builder()\n            .put(NetworkModule.HTTP_TYPE_SETTING.getKey(), \"custom\")\n            .put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(), \"default_custom\")\n            .put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(), \"local\")\n            .put(NetworkModule.TRANSPORT_TYPE_KEY, \"default_custom\").build();\n        Supplier<Transport> customTransport = () -> null;  \r\n        Supplier<HttpServerTransport> custom = FakeHttpTransport::new;\n        Supplier<HttpServerTransport> def = FakeHttpTransport::new;\n        NetworkModule module = newNetworkModule(settings, false, new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"default_custom\", customTransport);\n            }\n\n            @Override\n            public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool,\n                                                                                BigArrays bigArrays,\n                                                                                CircuitBreakerService circuitBreakerService,\n                                                                                NamedWriteableRegistry namedWriteableRegistry,\n                                                                                NamedXContentRegistry xContentRegistry,\n                                                                                NetworkService networkService,\n                                                                                HttpServerTransport.Dispatcher requestDispatcher) {\n                Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>();\n                supplierMap.put(\"custom\", custom);\n                supplierMap.put(\"default_custom\", def);\n                return supplierMap;\n            }\n        });\n        assertSame(custom, module.getHttpServerTransportSupplier());\n        assertSame(customTransport, module.getTransportSupplier());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/network/NetworkModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"NB"}],"commitId":"6546535a8b2dad3f4d1a776d6ca98ebde2f465ae","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-03 15:54:15","modifiedFileCount":"266","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-06-19 01:06:47","codes":[{"authorDate":"2018-05-03 15:54:15","commitOrder":3,"curCode":"    public void testRegisterTransport() {\n        Settings settings = Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY, \"custom\").build();\n        Supplier<Transport> custom = () -> null; \r\n        NetworkPlugin plugin = new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"custom\", custom);\n            }\n        };\n        NetworkModule module = newNetworkModule(settings, false, plugin);\n        assertFalse(module.isTransportClient());\n        assertSame(custom, module.getTransportSupplier());\n\n        \r\n        module = newNetworkModule(settings, true, plugin);\n        assertSame(custom, module.getTransportSupplier());\n        assertTrue(module.isTransportClient());\n    }\n","date":"2018-05-03 15:54:15","endLine":150,"groupId":"32235","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegisterTransport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ba/74e373f884263100595583dfce922a20ea75cc.src","preCode":"    public void testRegisterTransport() {\n        Settings settings = Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY, \"custom\").build();\n        Supplier<Transport> custom = () -> null; \r\n        NetworkPlugin plugin = new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"custom\", custom);\n            }\n        };\n        NetworkModule module = newNetworkModule(settings, false, plugin);\n        assertFalse(module.isTransportClient());\n        assertSame(custom, module.getTransportSupplier());\n\n        \r\n        module = newNetworkModule(settings, true, plugin);\n        assertSame(custom, module.getTransportSupplier());\n        assertTrue(module.isTransportClient());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/network/NetworkModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"},{"authorDate":"2018-06-19 01:06:47","commitOrder":3,"curCode":"    public void testOverrideDefault() {\n        Settings settings = Settings.builder()\n            .put(NetworkModule.HTTP_TYPE_SETTING.getKey(), \"custom\")\n            .put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(), \"default_custom\")\n            .put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(), \"local\")\n            .put(NetworkModule.TRANSPORT_TYPE_KEY, \"default_custom\").build();\n        Supplier<Transport> customTransport = () -> null;  \r\n        Supplier<HttpServerTransport> custom = FakeHttpTransport::new;\n        Supplier<HttpServerTransport> def = FakeHttpTransport::new;\n        NetworkModule module = newNetworkModule(settings, false, new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"default_custom\", customTransport);\n            }\n\n            @Override\n            public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool,\n                                                                                BigArrays bigArrays,\n                                                                                PageCacheRecycler pageCacheRecycler,\n                                                                                CircuitBreakerService circuitBreakerService,\n                                                                                NamedXContentRegistry xContentRegistry,\n                                                                                NetworkService networkService,\n                                                                                HttpServerTransport.Dispatcher requestDispatcher) {\n                Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>();\n                supplierMap.put(\"custom\", custom);\n                supplierMap.put(\"default_custom\", def);\n                return supplierMap;\n            }\n        });\n        assertSame(custom, module.getHttpServerTransportSupplier());\n        assertSame(customTransport, module.getTransportSupplier());\n    }\n","date":"2018-06-19 01:06:47","endLine":214,"groupId":"32237","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverrideDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/4eb8e9177f11aee574d750f36b51b2d0c98af2.src","preCode":"    public void testOverrideDefault() {\n        Settings settings = Settings.builder()\n            .put(NetworkModule.HTTP_TYPE_SETTING.getKey(), \"custom\")\n            .put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(), \"default_custom\")\n            .put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(), \"local\")\n            .put(NetworkModule.TRANSPORT_TYPE_KEY, \"default_custom\").build();\n        Supplier<Transport> customTransport = () -> null;  \r\n        Supplier<HttpServerTransport> custom = FakeHttpTransport::new;\n        Supplier<HttpServerTransport> def = FakeHttpTransport::new;\n        NetworkModule module = newNetworkModule(settings, false, new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"default_custom\", customTransport);\n            }\n\n            @Override\n            public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool,\n                                                                                BigArrays bigArrays,\n                                                                                CircuitBreakerService circuitBreakerService,\n                                                                                NamedWriteableRegistry namedWriteableRegistry,\n                                                                                NamedXContentRegistry xContentRegistry,\n                                                                                NetworkService networkService,\n                                                                                HttpServerTransport.Dispatcher requestDispatcher) {\n                Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>();\n                supplierMap.put(\"custom\", custom);\n                supplierMap.put(\"default_custom\", def);\n                return supplierMap;\n            }\n        });\n        assertSame(custom, module.getHttpServerTransportSupplier());\n        assertSame(customTransport, module.getTransportSupplier());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/network/NetworkModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"5d52f297cc570a2432b038832133f9ffb56d3bab","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-19 01:06:47","modifiedFileCount":"129","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-12-12 02:55:41","codes":[{"authorDate":"2018-12-12 02:55:41","commitOrder":4,"curCode":"    public void testRegisterTransport() {\n        Settings settings = Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY, \"custom\").build();\n        Supplier<Transport> custom = () -> null; \r\n        NetworkPlugin plugin = new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"custom\", custom);\n            }\n        };\n        NetworkModule module = newNetworkModule(settings, false, plugin);\n        assertFalse(module.isTransportClient());\n        assertSame(custom, module.getTransportSupplier());\n\n        \r\n        module = newNetworkModule(settings, true, plugin);\n        assertSame(custom, module.getTransportSupplier());\n        assertTrue(module.isTransportClient());\n    }\n","date":"2018-12-12 02:55:41","endLine":150,"groupId":"32235","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegisterTransport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/bc3efe0750ec5a902107ab3b28d086455d430f.src","preCode":"    public void testRegisterTransport() {\n        Settings settings = Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY, \"custom\").build();\n        Supplier<Transport> custom = () -> null; \r\n        NetworkPlugin plugin = new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"custom\", custom);\n            }\n        };\n        NetworkModule module = newNetworkModule(settings, false, plugin);\n        assertFalse(module.isTransportClient());\n        assertSame(custom, module.getTransportSupplier());\n\n        \r\n        module = newNetworkModule(settings, true, plugin);\n        assertSame(custom, module.getTransportSupplier());\n        assertTrue(module.isTransportClient());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/network/NetworkModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2018-12-12 02:55:41","commitOrder":4,"curCode":"    public void testOverrideDefault() {\n        Settings settings = Settings.builder()\n            .put(NetworkModule.HTTP_TYPE_SETTING.getKey(), \"custom\")\n            .put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(), \"default_custom\")\n            .put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(), \"local\")\n            .put(NetworkModule.TRANSPORT_TYPE_KEY, \"default_custom\").build();\n        Supplier<Transport> customTransport = () -> null;  \r\n        Supplier<HttpServerTransport> custom = FakeHttpTransport::new;\n        Supplier<HttpServerTransport> def = FakeHttpTransport::new;\n        NetworkModule module = newNetworkModule(settings, false, new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"default_custom\", customTransport);\n            }\n\n            @Override\n            public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool,\n                                                                                BigArrays bigArrays,\n                                                                                PageCacheRecycler pageCacheRecycler,\n                                                                                CircuitBreakerService circuitBreakerService,\n                                                                                NamedXContentRegistry xContentRegistry,\n                                                                                NetworkService networkService,\n                                                                                HttpServerTransport.Dispatcher requestDispatcher) {\n                Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>();\n                supplierMap.put(\"custom\", custom);\n                supplierMap.put(\"default_custom\", def);\n                return supplierMap;\n            }\n        });\n        assertSame(custom, module.getHttpServerTransportSupplier());\n        assertSame(customTransport, module.getTransportSupplier());\n    }\n","date":"2018-12-12 02:55:41","endLine":214,"groupId":"32237","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverrideDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/bc3efe0750ec5a902107ab3b28d086455d430f.src","preCode":"    public void testOverrideDefault() {\n        Settings settings = Settings.builder()\n            .put(NetworkModule.HTTP_TYPE_SETTING.getKey(), \"custom\")\n            .put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(), \"default_custom\")\n            .put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(), \"local\")\n            .put(NetworkModule.TRANSPORT_TYPE_KEY, \"default_custom\").build();\n        Supplier<Transport> customTransport = () -> null;  \r\n        Supplier<HttpServerTransport> custom = FakeHttpTransport::new;\n        Supplier<HttpServerTransport> def = FakeHttpTransport::new;\n        NetworkModule module = newNetworkModule(settings, false, new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool, BigArrays bigArrays,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"default_custom\", customTransport);\n            }\n\n            @Override\n            public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool,\n                                                                                BigArrays bigArrays,\n                                                                                PageCacheRecycler pageCacheRecycler,\n                                                                                CircuitBreakerService circuitBreakerService,\n                                                                                NamedXContentRegistry xContentRegistry,\n                                                                                NetworkService networkService,\n                                                                                HttpServerTransport.Dispatcher requestDispatcher) {\n                Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>();\n                supplierMap.put(\"custom\", custom);\n                supplierMap.put(\"default_custom\", def);\n                return supplierMap;\n            }\n        });\n        assertSame(custom, module.getHttpServerTransportSupplier());\n        assertSame(customTransport, module.getTransportSupplier());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/network/NetworkModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"790f8102e9c808ec1e497f77bb0e93dc5534d346","commitMessage":"@@@Modify `BigArrays` to take name of circuit breaker (#36461)\n\nThis commit modifies BigArrays to take a circuit breaker name and\nthe circuit breaking service. The default instance of BigArrays that\nis passed around everywhere always uses the request breaker. At the\nnetwork level.  we want to be using the inflight request breaker. So this\nchange will allow that.\n\nAdditionally.  as this change moves away from a single instance of\nBigArrays.  the class is modified to not be a Releasable anymore.\nReleasing big arrays was always dispatching to the PageCacheRecycler. \nso this change makes the PageCacheRecycler the class that needs to be\nmanaged and torn-down.\n\nFinally.  this commit closes #31435 be making the serialization of\ntransport messages use the inflight request breaker. With this change. \nwe no longer push the global BigArrays instnace to the network level.","date":"2018-12-12 02:55:41","modifiedFileCount":"38","status":"M","submitter":"Tim Brooks"},{"authorTime":"2019-06-06 08:22:37","codes":[{"authorDate":"2019-06-06 08:22:37","commitOrder":5,"curCode":"    public void testRegisterTransport() {\n        Settings settings = Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY, \"custom\").build();\n        Supplier<Transport> custom = () -> null; \r\n        NetworkPlugin plugin = new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"custom\", custom);\n            }\n        };\n        NetworkModule module = newNetworkModule(settings, plugin);\n        assertSame(custom, module.getTransportSupplier());\n    }\n","date":"2019-06-06 08:22:37","endLine":141,"groupId":"32235","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegisterTransport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/5d024da9a76a16d6418d1dca4ce1eb4000d78d.src","preCode":"    public void testRegisterTransport() {\n        Settings settings = Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY, \"custom\").build();\n        Supplier<Transport> custom = () -> null; \r\n        NetworkPlugin plugin = new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"custom\", custom);\n            }\n        };\n        NetworkModule module = newNetworkModule(settings, false, plugin);\n        assertFalse(module.isTransportClient());\n        assertSame(custom, module.getTransportSupplier());\n\n        \r\n        module = newNetworkModule(settings, true, plugin);\n        assertSame(custom, module.getTransportSupplier());\n        assertTrue(module.isTransportClient());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/network/NetworkModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2019-06-06 08:22:37","commitOrder":5,"curCode":"    public void testOverrideDefault() {\n        Settings settings = Settings.builder()\n            .put(NetworkModule.HTTP_TYPE_SETTING.getKey(), \"custom\")\n            .put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(), \"default_custom\")\n            .put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(), \"local\")\n            .put(NetworkModule.TRANSPORT_TYPE_KEY, \"default_custom\").build();\n        Supplier<Transport> customTransport = () -> null;  \r\n        Supplier<HttpServerTransport> custom = FakeHttpTransport::new;\n        Supplier<HttpServerTransport> def = FakeHttpTransport::new;\n        NetworkModule module = newNetworkModule(settings, new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"default_custom\", customTransport);\n            }\n\n            @Override\n            public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool,\n                                                                                BigArrays bigArrays,\n                                                                                PageCacheRecycler pageCacheRecycler,\n                                                                                CircuitBreakerService circuitBreakerService,\n                                                                                NamedXContentRegistry xContentRegistry,\n                                                                                NetworkService networkService,\n                                                                                HttpServerTransport.Dispatcher requestDispatcher) {\n                Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>();\n                supplierMap.put(\"custom\", custom);\n                supplierMap.put(\"default_custom\", def);\n                return supplierMap;\n            }\n        });\n        assertSame(custom, module.getHttpServerTransportSupplier());\n        assertSame(customTransport, module.getTransportSupplier());\n    }\n","date":"2019-06-06 08:22:37","endLine":203,"groupId":"1708","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverrideDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/5d024da9a76a16d6418d1dca4ce1eb4000d78d.src","preCode":"    public void testOverrideDefault() {\n        Settings settings = Settings.builder()\n            .put(NetworkModule.HTTP_TYPE_SETTING.getKey(), \"custom\")\n            .put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(), \"default_custom\")\n            .put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(), \"local\")\n            .put(NetworkModule.TRANSPORT_TYPE_KEY, \"default_custom\").build();\n        Supplier<Transport> customTransport = () -> null;  \r\n        Supplier<HttpServerTransport> custom = FakeHttpTransport::new;\n        Supplier<HttpServerTransport> def = FakeHttpTransport::new;\n        NetworkModule module = newNetworkModule(settings, false, new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"default_custom\", customTransport);\n            }\n\n            @Override\n            public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool,\n                                                                                BigArrays bigArrays,\n                                                                                PageCacheRecycler pageCacheRecycler,\n                                                                                CircuitBreakerService circuitBreakerService,\n                                                                                NamedXContentRegistry xContentRegistry,\n                                                                                NetworkService networkService,\n                                                                                HttpServerTransport.Dispatcher requestDispatcher) {\n                Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>();\n                supplierMap.put(\"custom\", custom);\n                supplierMap.put(\"default_custom\", def);\n                return supplierMap;\n            }\n        });\n        assertSame(custom, module.getHttpServerTransportSupplier());\n        assertSame(customTransport, module.getTransportSupplier());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/network/NetworkModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"b15d62c3ab5b3766a975f8d4b3878cbde8c2b6c0","commitMessage":"@@@Remove the transport client (#42538)\n\nThis commit removes the transport client and all remaining uses in the code.\n","date":"2019-06-06 08:22:37","modifiedFileCount":"136","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2020-02-07 03:05:03","codes":[{"authorDate":"2019-06-06 08:22:37","commitOrder":6,"curCode":"    public void testRegisterTransport() {\n        Settings settings = Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY, \"custom\").build();\n        Supplier<Transport> custom = () -> null; \r\n        NetworkPlugin plugin = new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"custom\", custom);\n            }\n        };\n        NetworkModule module = newNetworkModule(settings, plugin);\n        assertSame(custom, module.getTransportSupplier());\n    }\n","date":"2019-06-06 08:22:37","endLine":141,"groupId":"104193","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegisterTransport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/5d024da9a76a16d6418d1dca4ce1eb4000d78d.src","preCode":"    public void testRegisterTransport() {\n        Settings settings = Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY, \"custom\").build();\n        Supplier<Transport> custom = () -> null; \r\n        NetworkPlugin plugin = new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"custom\", custom);\n            }\n        };\n        NetworkModule module = newNetworkModule(settings, plugin);\n        assertSame(custom, module.getTransportSupplier());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/network/NetworkModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"N"},{"authorDate":"2020-02-07 03:05:03","commitOrder":6,"curCode":"    public void testOverrideDefault() {\n        Settings settings = Settings.builder()\n            .put(NetworkModule.HTTP_TYPE_SETTING.getKey(), \"custom\")\n            .put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(), \"default_custom\")\n            .put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(), \"local\")\n            .put(NetworkModule.TRANSPORT_TYPE_KEY, \"default_custom\").build();\n        Supplier<Transport> customTransport = () -> null;  \r\n        Supplier<HttpServerTransport> custom = FakeHttpTransport::new;\n        Supplier<HttpServerTransport> def = FakeHttpTransport::new;\n        NetworkModule module = newNetworkModule(settings, new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"default_custom\", customTransport);\n            }\n\n            @Override\n            public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool,\n                                                                                BigArrays bigArrays,\n                                                                                PageCacheRecycler pageCacheRecycler,\n                                                                                CircuitBreakerService circuitBreakerService,\n                                                                                NamedXContentRegistry xContentRegistry,\n                                                                                NetworkService networkService,\n                                                                                HttpServerTransport.Dispatcher requestDispatcher,\n                                                                                ClusterSettings clusterSettings) {\n                Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>();\n                supplierMap.put(\"custom\", custom);\n                supplierMap.put(\"default_custom\", def);\n                return supplierMap;\n            }\n        });\n        assertSame(custom, module.getHttpServerTransportSupplier());\n        assertSame(customTransport, module.getTransportSupplier());\n    }\n","date":"2020-02-07 03:05:03","endLine":169,"groupId":"104193","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverrideDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/43/fd669f71da379ec15413f2ac91400288e66119.src","preCode":"    public void testOverrideDefault() {\n        Settings settings = Settings.builder()\n            .put(NetworkModule.HTTP_TYPE_SETTING.getKey(), \"custom\")\n            .put(NetworkModule.HTTP_DEFAULT_TYPE_SETTING.getKey(), \"default_custom\")\n            .put(NetworkModule.TRANSPORT_DEFAULT_TYPE_SETTING.getKey(), \"local\")\n            .put(NetworkModule.TRANSPORT_TYPE_KEY, \"default_custom\").build();\n        Supplier<Transport> customTransport = () -> null;  \r\n        Supplier<HttpServerTransport> custom = FakeHttpTransport::new;\n        Supplier<HttpServerTransport> def = FakeHttpTransport::new;\n        NetworkModule module = newNetworkModule(settings, new NetworkPlugin() {\n            @Override\n            public Map<String, Supplier<Transport>> getTransports(Settings settings, ThreadPool threadPool,\n                                                                  PageCacheRecycler pageCacheRecycler,\n                                                                  CircuitBreakerService circuitBreakerService,\n                                                                  NamedWriteableRegistry namedWriteableRegistry,\n                                                                  NetworkService networkService) {\n                return Collections.singletonMap(\"default_custom\", customTransport);\n            }\n\n            @Override\n            public Map<String, Supplier<HttpServerTransport>> getHttpTransports(Settings settings, ThreadPool threadPool,\n                                                                                BigArrays bigArrays,\n                                                                                PageCacheRecycler pageCacheRecycler,\n                                                                                CircuitBreakerService circuitBreakerService,\n                                                                                NamedXContentRegistry xContentRegistry,\n                                                                                NetworkService networkService,\n                                                                                HttpServerTransport.Dispatcher requestDispatcher) {\n                Map<String, Supplier<HttpServerTransport>> supplierMap = new HashMap<>();\n                supplierMap.put(\"custom\", custom);\n                supplierMap.put(\"default_custom\", def);\n                return supplierMap;\n            }\n        });\n        assertSame(custom, module.getHttpServerTransportSupplier());\n        assertSame(customTransport, module.getTransportSupplier());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/network/NetworkModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"26b9cf787dfcfb2340fd2dbc98e4c42faf868e40","commitMessage":"@@@Add Trace Logging of REST Requests (#51684)\n\nBeing able to trace log all REST requests to a node would make debugging\na number of issues a lot easier.\n","date":"2020-02-07 03:05:03","modifiedFileCount":"27","status":"M","submitter":"Armin Braun"}]
