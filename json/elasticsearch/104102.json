[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testPreservesThreadsOriginalContextOnAfterException() throws IOException {\n        try (ThreadContext threadContext = new ThreadContext(Settings.EMPTY)) {\n            Runnable withContext;\n\n            \r\n            try (ThreadContext.StoredContext ignored = threadContext.stashContext()) {\n                threadContext.putHeader(\"foo\", \"bar\");\n                threadContext.putTransient(\"foo\", \"bar_transient\");\n                withContext = threadContext.preserveContext(new AbstractRunnable() {\n\n                    @Override\n                    public void onAfter() {\n                        throw new RuntimeException(\"from onAfter\");\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        throw new RuntimeException(\"from onFailure\", e);\n                    }\n\n                    @Override\n                    protected void doRun() throws Exception {\n                        assertEquals(\"bar\", threadContext.getHeader(\"foo\"));\n                        assertEquals(\"bar_transient\", threadContext.getTransient(\"foo\"));\n                        assertFalse(threadContext.isDefaultContext());\n                    }\n                });\n            }\n\n            \r\n            assertNull(threadContext.getHeader(\"foo\"));\n            assertNull(threadContext.getTransient(\"foo\"));\n            assertTrue(threadContext.isDefaultContext());\n\n            \r\n            RuntimeException e = expectThrows(RuntimeException.class, withContext::run);\n            assertEquals(\"from onAfter\", e.getMessage());\n            assertNull(e.getCause());\n\n            \r\n            assertNull(threadContext.getHeader(\"foo\"));\n            assertNull(threadContext.getTransient(\"foo\"));\n            assertTrue(threadContext.isDefaultContext());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":601,"groupId":"15833","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreservesThreadsOriginalContextOnAfterException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/1efa46424b2996efaa9fcacdddcd2961504197.src","preCode":"    public void testPreservesThreadsOriginalContextOnAfterException() throws IOException {\n        try (ThreadContext threadContext = new ThreadContext(Settings.EMPTY)) {\n            Runnable withContext;\n\n            \r\n            try (ThreadContext.StoredContext ignored = threadContext.stashContext()) {\n                threadContext.putHeader(\"foo\", \"bar\");\n                threadContext.putTransient(\"foo\", \"bar_transient\");\n                withContext = threadContext.preserveContext(new AbstractRunnable() {\n\n                    @Override\n                    public void onAfter() {\n                        throw new RuntimeException(\"from onAfter\");\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        throw new RuntimeException(\"from onFailure\", e);\n                    }\n\n                    @Override\n                    protected void doRun() throws Exception {\n                        assertEquals(\"bar\", threadContext.getHeader(\"foo\"));\n                        assertEquals(\"bar_transient\", threadContext.getTransient(\"foo\"));\n                        assertFalse(threadContext.isDefaultContext());\n                    }\n                });\n            }\n\n            \r\n            assertNull(threadContext.getHeader(\"foo\"));\n            assertNull(threadContext.getTransient(\"foo\"));\n            assertTrue(threadContext.isDefaultContext());\n\n            \r\n            RuntimeException e = expectThrows(RuntimeException.class, withContext::run);\n            assertEquals(\"from onAfter\", e.getMessage());\n            assertNull(e.getCause());\n\n            \r\n            assertNull(threadContext.getHeader(\"foo\"));\n            assertNull(threadContext.getTransient(\"foo\"));\n            assertTrue(threadContext.isDefaultContext());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/util/concurrent/ThreadContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":557,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testMarkAsSystemContext() throws IOException {\n        try (ThreadContext threadContext = new ThreadContext(Settings.EMPTY)) {\n            assertFalse(threadContext.isSystemContext());\n            try (ThreadContext.StoredContext context = threadContext.stashContext()) {\n                assertFalse(threadContext.isSystemContext());\n                threadContext.markAsSystemContext();\n                assertTrue(threadContext.isSystemContext());\n            }\n            assertFalse(threadContext.isSystemContext());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":613,"groupId":"15835","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMarkAsSystemContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/1efa46424b2996efaa9fcacdddcd2961504197.src","preCode":"    public void testMarkAsSystemContext() throws IOException {\n        try (ThreadContext threadContext = new ThreadContext(Settings.EMPTY)) {\n            assertFalse(threadContext.isSystemContext());\n            try (ThreadContext.StoredContext context = threadContext.stashContext()) {\n                assertFalse(threadContext.isSystemContext());\n                threadContext.markAsSystemContext();\n                assertTrue(threadContext.isSystemContext());\n            }\n            assertFalse(threadContext.isSystemContext());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/util/concurrent/ThreadContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":603,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-11-19 05:47:32","codes":[{"authorDate":"2019-11-19 05:47:32","commitOrder":2,"curCode":"    public void testPreservesThreadsOriginalContextOnAfterException() throws IOException {\n        ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Runnable withContext;\n\n        \r\n        try (ThreadContext.StoredContext ignored = threadContext.stashContext()) {\n            threadContext.putHeader(\"foo\", \"bar\");\n            threadContext.putTransient(\"foo\", \"bar_transient\");\n            withContext = threadContext.preserveContext(new AbstractRunnable() {\n\n                @Override\n                public void onAfter() {\n                    throw new RuntimeException(\"from onAfter\");\n                }\n\n                @Override\n                public void onFailure(Exception e) {\n                    throw new RuntimeException(\"from onFailure\", e);\n                }\n\n                @Override\n                protected void doRun() throws Exception {\n                    assertEquals(\"bar\", threadContext.getHeader(\"foo\"));\n                    assertEquals(\"bar_transient\", threadContext.getTransient(\"foo\"));\n                    assertFalse(threadContext.isDefaultContext());\n                }\n            });\n        }\n\n        \r\n        assertNull(threadContext.getHeader(\"foo\"));\n        assertNull(threadContext.getTransient(\"foo\"));\n        assertTrue(threadContext.isDefaultContext());\n\n        \r\n        RuntimeException e = expectThrows(RuntimeException.class, withContext::run);\n        assertEquals(\"from onAfter\", e.getMessage());\n        assertNull(e.getCause());\n\n        \r\n        assertNull(threadContext.getHeader(\"foo\"));\n        assertNull(threadContext.getTransient(\"foo\"));\n        assertTrue(threadContext.isDefaultContext());\n    }\n","date":"2019-11-19 05:47:32","endLine":592,"groupId":"104102","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreservesThreadsOriginalContextOnAfterException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/c0d6a58992560bd51c371999d7d088badefcec.src","preCode":"    public void testPreservesThreadsOriginalContextOnAfterException() throws IOException {\n        try (ThreadContext threadContext = new ThreadContext(Settings.EMPTY)) {\n            Runnable withContext;\n\n            \r\n            try (ThreadContext.StoredContext ignored = threadContext.stashContext()) {\n                threadContext.putHeader(\"foo\", \"bar\");\n                threadContext.putTransient(\"foo\", \"bar_transient\");\n                withContext = threadContext.preserveContext(new AbstractRunnable() {\n\n                    @Override\n                    public void onAfter() {\n                        throw new RuntimeException(\"from onAfter\");\n                    }\n\n                    @Override\n                    public void onFailure(Exception e) {\n                        throw new RuntimeException(\"from onFailure\", e);\n                    }\n\n                    @Override\n                    protected void doRun() throws Exception {\n                        assertEquals(\"bar\", threadContext.getHeader(\"foo\"));\n                        assertEquals(\"bar_transient\", threadContext.getTransient(\"foo\"));\n                        assertFalse(threadContext.isDefaultContext());\n                    }\n                });\n            }\n\n            \r\n            assertNull(threadContext.getHeader(\"foo\"));\n            assertNull(threadContext.getTransient(\"foo\"));\n            assertTrue(threadContext.isDefaultContext());\n\n            \r\n            RuntimeException e = expectThrows(RuntimeException.class, withContext::run);\n            assertEquals(\"from onAfter\", e.getMessage());\n            assertNull(e.getCause());\n\n            \r\n            assertNull(threadContext.getHeader(\"foo\"));\n            assertNull(threadContext.getTransient(\"foo\"));\n            assertTrue(threadContext.isDefaultContext());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/util/concurrent/ThreadContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":549,"status":"M"},{"authorDate":"2019-11-19 05:47:32","commitOrder":2,"curCode":"    public void testMarkAsSystemContext() throws IOException {\n        ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        assertFalse(threadContext.isSystemContext());\n        try (ThreadContext.StoredContext context = threadContext.stashContext()) {\n            assertFalse(threadContext.isSystemContext());\n            threadContext.markAsSystemContext();\n            assertTrue(threadContext.isSystemContext());\n        }\n        assertFalse(threadContext.isSystemContext());\n    }\n","date":"2019-11-19 05:47:32","endLine":603,"groupId":"104102","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMarkAsSystemContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/c0d6a58992560bd51c371999d7d088badefcec.src","preCode":"    public void testMarkAsSystemContext() throws IOException {\n        try (ThreadContext threadContext = new ThreadContext(Settings.EMPTY)) {\n            assertFalse(threadContext.isSystemContext());\n            try (ThreadContext.StoredContext context = threadContext.stashContext()) {\n                assertFalse(threadContext.isSystemContext());\n                threadContext.markAsSystemContext();\n                assertTrue(threadContext.isSystemContext());\n            }\n            assertFalse(threadContext.isSystemContext());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/util/concurrent/ThreadContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"M"}],"commitId":"0260c6f55c4623f1195341bdc4e61a7ec7bc1754","commitMessage":"@@@ThreadPool and ThreadContext are not closeable (#43249)\n\nThis commit changes the ThreadContext to just use a regular ThreadLocal\nover the lucene CloseableThreadLocal. The CloseableThreadLocal solves\nissues with ThreadLocals that are no longer needed during runtime but\nin the case of the ThreadContext.  we need it for the runtime of the\nnode and it is typically not closed until the node closes.  so we miss\nout on the benefits that this class provides.\n\nAdditionally by removing the close logic.  we simplify code in other\nplaces that deal with exceptions and tracking to see if it happens when\nthe node is closing.\n\nCloses #42577","date":"2019-11-19 05:47:32","modifiedFileCount":"21","status":"M","submitter":"Jay Modi"}]
