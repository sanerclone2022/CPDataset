[{"authorTime":"2019-04-30 01:40:30","codes":[{"authorDate":"2019-04-30 01:40:30","commitOrder":1,"curCode":"    public void testParseMultiDimensionShapes() throws IOException {\n        \r\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"Point\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).value(15.0).value(18.0).endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(pointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> GeoJson.fromXContent(parser, false, false, false));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder lineGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"LineString\")\n                    .startArray(\"coordinates\")\n                        .startArray().value(100.0).value(0.0).value(15.0).endArray()\n                        .startArray().value(101.0).value(1.0).value(18.0).value(19.0).endArray()\n                    .endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(lineGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> GeoJson.fromXContent(parser, false, false, false));\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2019-04-30 01:40:30","endLine":146,"groupId":"30181","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseMultiDimensionShapes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/2c2e50e2cf136ce6229cf4cabd4f7ead0c6b69.src","preCode":"    public void testParseMultiDimensionShapes() throws IOException {\n        \r\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"Point\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).value(15.0).value(18.0).endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(pointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> GeoJson.fromXContent(parser, false, false, false));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder lineGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"LineString\")\n                    .startArray(\"coordinates\")\n                        .startArray().value(100.0).value(0.0).value(15.0).endArray()\n                        .startArray().value(101.0).value(1.0).value(18.0).value(19.0).endArray()\n                    .endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(lineGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> GeoJson.fromXContent(parser, false, false, false));\n            assertNull(parser.nextToken());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2019-04-30 01:40:30","commitOrder":1,"curCode":"    public void testParseInvalidShapes() throws IOException {\n        \r\n        XContentBuilder tooLittlePointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startArray(\"coordinates\").value(10.0).endArray()\n            .endObject();\n\n        try (XContentParser parser = createParser(tooLittlePointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> GeoJson.fromXContent(parser, true, false, false));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder emptyPointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startObject(\"coordinates\").field(\"foo\", \"bar\").endObject()\n            .endObject();\n\n        try (XContentParser parser = createParser(emptyPointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> GeoJson.fromXContent(parser, true, false, false));\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2019-04-30 01:40:30","endLine":729,"groupId":"30181","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseInvalidShapes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/2c2e50e2cf136ce6229cf4cabd4f7ead0c6b69.src","preCode":"    public void testParseInvalidShapes() throws IOException {\n        \r\n        XContentBuilder tooLittlePointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startArray(\"coordinates\").value(10.0).endArray()\n            .endObject();\n\n        try (XContentParser parser = createParser(tooLittlePointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> GeoJson.fromXContent(parser, true, false, false));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder emptyPointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startObject(\"coordinates\").field(\"foo\", \"bar\").endObject()\n            .endObject();\n\n        try (XContentParser parser = createParser(emptyPointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> GeoJson.fromXContent(parser, true, false, false));\n            assertNull(parser.nextToken());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":703,"status":"B"}],"commitId":"6d3fd8401d5b2429878e81a9a0428a7792910407","commitMessage":"@@@Geo: Add GeoJson parser to libs/geo classes (#41575)\n\nAdds GeoJson parser for Geometry classes defined in libs/geo.\n\nRelates #40908 and #29872","date":"2019-04-30 01:40:30","modifiedFileCount":"18","status":"B","submitter":"Igor Motov"},{"authorTime":"2019-05-30 08:05:12","codes":[{"authorDate":"2019-05-30 08:05:12","commitOrder":2,"curCode":"    public void testParseMultiDimensionShapes() throws IOException {\n        \r\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"Point\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).value(15.0).value(18.0).endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(pointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(false, false, false).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder lineGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"LineString\")\n                    .startArray(\"coordinates\")\n                        .startArray().value(100.0).value(0.0).value(15.0).endArray()\n                        .startArray().value(101.0).value(1.0).value(18.0).value(19.0).endArray()\n                    .endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(lineGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(false, false, false).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2019-05-30 08:05:12","endLine":146,"groupId":"30181","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseMultiDimensionShapes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e0/95c7e381a82037b9470e5631f097a92b4be231.src","preCode":"    public void testParseMultiDimensionShapes() throws IOException {\n        \r\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"Point\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).value(15.0).value(18.0).endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(pointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> GeoJson.fromXContent(parser, false, false, false));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder lineGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"LineString\")\n                    .startArray(\"coordinates\")\n                        .startArray().value(100.0).value(0.0).value(15.0).endArray()\n                        .startArray().value(101.0).value(1.0).value(18.0).value(19.0).endArray()\n                    .endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(lineGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> GeoJson.fromXContent(parser, false, false, false));\n            assertNull(parser.nextToken());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2019-05-30 08:05:12","commitOrder":2,"curCode":"    public void testParseInvalidShapes() throws IOException {\n        \r\n        XContentBuilder tooLittlePointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startArray(\"coordinates\").value(10.0).endArray()\n            .endObject();\n\n        try (XContentParser parser = createParser(tooLittlePointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(true, false, false).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder emptyPointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startObject(\"coordinates\").field(\"foo\", \"bar\").endObject()\n            .endObject();\n\n        try (XContentParser parser = createParser(emptyPointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(true, false, false).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2019-05-30 08:05:12","endLine":729,"groupId":"30181","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseInvalidShapes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e0/95c7e381a82037b9470e5631f097a92b4be231.src","preCode":"    public void testParseInvalidShapes() throws IOException {\n        \r\n        XContentBuilder tooLittlePointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startArray(\"coordinates\").value(10.0).endArray()\n            .endObject();\n\n        try (XContentParser parser = createParser(tooLittlePointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> GeoJson.fromXContent(parser, true, false, false));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder emptyPointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startObject(\"coordinates\").field(\"foo\", \"bar\").endObject()\n            .endObject();\n\n        try (XContentParser parser = createParser(emptyPointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> GeoJson.fromXContent(parser, true, false, false));\n            assertNull(parser.nextToken());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":703,"status":"M"}],"commitId":"28ad74f8892530f500e1283a9c5852b666774f0f","commitMessage":"@@@Geo: Refactor libs/geo parsers (#42549)\n\nRefactors the WKT and GeoJSON parsers from an utility class into an\ninstantiatable objects. This is a preliminary step in\npreparation for moving out coordinate validators from Geometry\nconstructors. This should allow us to make validators plugable.","date":"2019-05-30 08:05:12","modifiedFileCount":"21","status":"M","submitter":"Igor Motov"},{"authorTime":"2019-06-28 01:34:33","codes":[{"authorDate":"2019-06-28 01:34:33","commitOrder":3,"curCode":"    public void testParseMultiDimensionShapes() throws IOException {\n        \r\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"Point\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).value(15.0).value(18.0).endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(pointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(false, false, new GeographyValidator(false)).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder lineGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"LineString\")\n                    .startArray(\"coordinates\")\n                        .startArray().value(100.0).value(0.0).value(15.0).endArray()\n                        .startArray().value(101.0).value(1.0).value(18.0).value(19.0).endArray()\n                    .endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(lineGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(false, false, new GeographyValidator(false)).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2019-06-28 01:34:33","endLine":147,"groupId":"30181","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseMultiDimensionShapes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/41/46adb2d299ac162221d3537da4a5495b50c992.src","preCode":"    public void testParseMultiDimensionShapes() throws IOException {\n        \r\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"Point\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).value(15.0).value(18.0).endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(pointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(false, false, false).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder lineGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"LineString\")\n                    .startArray(\"coordinates\")\n                        .startArray().value(100.0).value(0.0).value(15.0).endArray()\n                        .startArray().value(101.0).value(1.0).value(18.0).value(19.0).endArray()\n                    .endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(lineGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(false, false, false).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2019-06-28 01:34:33","commitOrder":3,"curCode":"    public void testParseInvalidShapes() throws IOException {\n        \r\n        XContentBuilder tooLittlePointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startArray(\"coordinates\").value(10.0).endArray()\n            .endObject();\n\n        try (XContentParser parser = createParser(tooLittlePointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(true, false, new GeographyValidator(false)).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder emptyPointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startObject(\"coordinates\").field(\"foo\", \"bar\").endObject()\n            .endObject();\n\n        try (XContentParser parser = createParser(emptyPointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(true, false, new GeographyValidator(false)).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2019-06-28 01:34:33","endLine":730,"groupId":"30181","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseInvalidShapes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/41/46adb2d299ac162221d3537da4a5495b50c992.src","preCode":"    public void testParseInvalidShapes() throws IOException {\n        \r\n        XContentBuilder tooLittlePointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startArray(\"coordinates\").value(10.0).endArray()\n            .endObject();\n\n        try (XContentParser parser = createParser(tooLittlePointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(true, false, false).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder emptyPointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startObject(\"coordinates\").field(\"foo\", \"bar\").endObject()\n            .endObject();\n\n        try (XContentParser parser = createParser(emptyPointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(true, false, false).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"M"}],"commitId":"8029b479b8b1e1d3cc05bb87d1fdd9ec6325ee1b","commitMessage":"@@@Geo: Makes coordinate validator in libs/geo plugable (#43657)\n\nMoves coordinate validation from Geometry constructors into\nparser.\n\nRelates #43644","date":"2019-06-28 01:34:33","modifiedFileCount":"27","status":"M","submitter":"Igor Motov"},{"authorTime":"2021-06-17 05:31:31","codes":[{"authorDate":"2021-06-17 05:31:31","commitOrder":4,"curCode":"    public void testParseMultiDimensionShapes() throws IOException {\n        \r\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"Point\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).value(15.0).value(18.0).endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(pointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () ->\n                GeoJson.fromXContent(GeographyValidator.instance(false), false, false, parser));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder lineGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"LineString\")\n                    .startArray(\"coordinates\")\n                        .startArray().value(100.0).value(0.0).value(15.0).endArray()\n                        .startArray().value(101.0).value(1.0).value(18.0).value(19.0).endArray()\n                    .endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(lineGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () ->\n                GeoJson.fromXContent(GeographyValidator.instance(false), false, false, parser));\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2021-06-17 05:31:31","endLine":139,"groupId":"104242","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testParseMultiDimensionShapes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/7e150e98add25d3a916f6c557492745a10abdd.src","preCode":"    public void testParseMultiDimensionShapes() throws IOException {\n        \r\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"Point\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).value(15.0).value(18.0).endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(pointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(false, false, new GeographyValidator(false)).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder lineGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .field(\"type\", \"LineString\")\n                    .startArray(\"coordinates\")\n                        .startArray().value(100.0).value(0.0).value(15.0).endArray()\n                        .startArray().value(101.0).value(1.0).value(18.0).value(19.0).endArray()\n                    .endArray()\n                .endObject();\n\n        try (XContentParser parser = createParser(lineGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(false, false, new GeographyValidator(false)).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2021-06-17 05:31:31","commitOrder":4,"curCode":"    public void testParseInvalidShapes() throws IOException {\n        \r\n        XContentBuilder tooLittlePointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startArray(\"coordinates\").value(10.0).endArray()\n            .endObject();\n\n        try (XContentParser parser = createParser(tooLittlePointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () ->\n                GeoJson.fromXContent(GeographyValidator.instance(false), false, true, parser));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder emptyPointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startObject(\"coordinates\").field(\"foo\", \"bar\").endObject()\n            .endObject();\n\n        try (XContentParser parser = createParser(emptyPointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () ->\n                GeoJson.fromXContent(GeographyValidator.instance(false), false, true, parser));\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2021-06-17 05:31:31","endLine":737,"groupId":"104242","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testParseInvalidShapes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/7e150e98add25d3a916f6c557492745a10abdd.src","preCode":"    public void testParseInvalidShapes() throws IOException {\n        \r\n        XContentBuilder tooLittlePointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startArray(\"coordinates\").value(10.0).endArray()\n            .endObject();\n\n        try (XContentParser parser = createParser(tooLittlePointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(true, false, new GeographyValidator(false)).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n\n        \r\n        XContentBuilder emptyPointGeoJson = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"type\", \"Point\")\n            .startObject(\"coordinates\").field(\"foo\", \"bar\").endObject()\n            .endObject();\n\n        try (XContentParser parser = createParser(emptyPointGeoJson)) {\n            parser.nextToken();\n            expectThrows(XContentParseException.class, () -> new GeoJson(true, false, new GeographyValidator(false)).fromXContent(parser));\n            assertNull(parser.nextToken());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":709,"status":"M"}],"commitId":"6a8f8f3f718bd21bf14176049c9e1f1def13463b","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-17 05:31:31","modifiedFileCount":"4429","status":"M","submitter":"Igor Motov"}]
