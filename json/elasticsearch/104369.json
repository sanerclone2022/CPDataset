[{"authorTime":"2018-06-23 01:11:15","codes":[{"authorDate":"2018-06-23 01:11:15","commitOrder":2,"curCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_A\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"/test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_B\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"/test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_C\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"/test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"/test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse newInstance() {\n                    return new SimpleTestResponse();\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                    throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","date":"2018-06-23 01:11:15","endLine":150,"groupId":"69705","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/49/1ba123a451d9ab1e4950e72ef63617b9eb8cde.src","preCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_A\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"/test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_B\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"/test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_C\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"/test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"/test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse newInstance() {\n                    return new SimpleTestResponse();\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                    throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"MB"},{"authorDate":"2018-06-23 01:11:15","commitOrder":2,"curCode":"    public void testException() throws InterruptedException {\n        serviceA.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_A\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"/test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_B\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"/test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"/test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"/test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse newInstance() {\n                    return new SimpleTestResponse();\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","date":"2018-06-23 01:11:15","endLine":211,"groupId":"69704","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/49/1ba123a451d9ab1e4950e72ef63617b9eb8cde.src","preCode":"    public void testException() throws InterruptedException {\n        serviceA.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_A\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"/test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_B\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"/test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"/test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"/test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse newInstance() {\n                    return new SimpleTestResponse();\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"MB"}],"commitId":"1d11fdaad80d19be782b99e3dfede28b40d8f0d1","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-23 01:11:15","modifiedFileCount":"94","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-07-10 07:44:12","codes":[{"authorDate":"2018-07-10 07:44:12","commitOrder":3,"curCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_A\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_B\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_C\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse newInstance() {\n                    return new SimpleTestResponse();\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                    throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","date":"2018-07-10 07:44:12","endLine":150,"groupId":"69705","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bc/cb1cc68aa0c87d4b925eca2a436a14e472c2bc.src","preCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_A\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"/test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_B\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"/test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_C\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"/test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"/test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse newInstance() {\n                    return new SimpleTestResponse();\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                    throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2018-07-10 07:44:12","commitOrder":3,"curCode":"    public void testException() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_A\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_B\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse newInstance() {\n                    return new SimpleTestResponse();\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","date":"2018-07-10 07:44:12","endLine":211,"groupId":"69704","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bc/cb1cc68aa0c87d4b925eca2a436a14e472c2bc.src","preCode":"    public void testException() throws InterruptedException {\n        serviceA.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_A\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"/test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_B\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"/test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"/test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"/test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"/test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse newInstance() {\n                    return new SimpleTestResponse();\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"e9cd0556c167b257bb588af5547923e5f13a99ca","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-10 07:44:12","modifiedFileCount":"627","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-10-27 03:46:21","codes":[{"authorDate":"2018-10-27 03:46:21","commitOrder":4,"curCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_C\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","date":"2018-10-27 03:46:21","endLine":143,"groupId":"7800","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/52c12e47364a0ebff64c1db643b0678f20d8f2.src","preCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_A\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_B\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_C\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse newInstance() {\n                    return new SimpleTestResponse();\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                    throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2018-10-27 03:46:21","commitOrder":4,"curCode":"    public void testException() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","date":"2018-10-27 03:46:21","endLine":202,"groupId":"7802","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/52c12e47364a0ebff64c1db643b0678f20d8f2.src","preCode":"    public void testException() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_A\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse();\n                response.targetNode = \"TS_B\";\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse newInstance() {\n                    return new SimpleTestResponse();\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"d8322ca069ef21de5043a7975ccd92ba627af016","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-10-27 03:46:21","modifiedFileCount":"282","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-07-20 04:26:47","codes":[{"authorDate":"2019-07-20 04:26:47","commitOrder":5,"curCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_C\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","date":"2019-07-20 04:26:47","endLine":143,"groupId":"11997","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d0/97f1fd9dd83cc99d792b2940b554704da704b9.src","preCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_C\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2019-07-20 04:26:47","commitOrder":5,"curCode":"    public void testException() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","date":"2019-07-20 04:26:47","endLine":202,"groupId":"11998","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d0/97f1fd9dd83cc99d792b2940b554704da704b9.src","preCode":"    public void testException() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", SimpleTestRequest::new, ThreadPool.Names.SAME,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"23828cfde96fb5023ef532bf536bab5f4f1dea58","commitMessage":"@@@Convert direct implementations of Streamable to Writeable (#44605)\n\nThis commit converts Streamable to Writeable for direct implementations.\n\nrelates #34389","date":"2019-07-20 04:26:47","modifiedFileCount":"28","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2019-11-05 02:56:07","codes":[{"authorDate":"2019-11-05 02:56:07","commitOrder":6,"curCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceA, nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceB, nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_C\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","date":"2019-11-05 02:56:07","endLine":143,"groupId":"32344","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/24/e6a2579dca3f96efd8378a0f8ba4877fe8b6f4.src","preCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_C\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2019-11-05 02:56:07","commitOrder":6,"curCode":"    public void testException() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceA, nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceB, nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","date":"2019-11-05 02:56:07","endLine":202,"groupId":"32345","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/24/e6a2579dca3f96efd8378a0f8ba4877fe8b6f4.src","preCode":"    public void testException() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        serviceA.connectToNode(nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        serviceB.connectToNode(nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"be6697f05a9cc56de7b249de0c336a35ece0c869","commitMessage":"@@@Remove Blocking Connect Methods from TransportService (#48841)\n\nWe're not doing any blocking connects in production code anymore\nso we can move these helpers to test code only.\nAlso.  we were only tracking the proper closing of blockingly opened\nconnections on the mock transport service but didn't check those\ncreated via the non-blocking API which is fixed here too.","date":"2019-11-05 02:56:07","modifiedFileCount":"16","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-11-05 14:39:19","codes":[{"authorDate":"2020-11-05 14:39:19","commitOrder":7,"curCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceA, nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceB, nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_C\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n            });\n        latch.await();\n    }\n","date":"2020-11-05 14:39:19","endLine":138,"groupId":"32344","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/71b8427b7125feab6102edd87c9a40273c34d4.src","preCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceA, nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceB, nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_C\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-11-05 14:39:19","commitOrder":7,"curCode":"    public void testException() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceA, nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceB, nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n            });\n        latch.await();\n    }\n","date":"2020-11-05 14:39:19","endLine":192,"groupId":"32345","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/71b8427b7125feab6102edd87c9a40273c34d4.src","preCode":"    public void testException() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceA, nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceB, nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public String executor() {\n                    return ThreadPool.Names.SAME;\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"13f1d1af1e83de7f243b7de6e5c05db395ce3714","commitMessage":"@@@Dry up TransportResponseHandler (#64395)\n\nThe majority of implementations of this interface run on `SAME`.\nDrying this up saves some duplication and also makes it a little\neasier to understand what callbacks won't fork-off when reading the\ncode.\n","date":"2020-11-05 14:39:19","modifiedFileCount":"35","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-12-08 22:10:12","codes":[{"authorDate":"2020-12-08 22:10:12","commitOrder":8,"curCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        final boolean cancellable = randomBoolean();\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", cancellable, SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceA, nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertThat(task instanceof CancellableTask, equalTo(cancellable));\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", cancellable, SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceB, nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertThat(task instanceof CancellableTask, equalTo(cancellable));\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_C\");\n                channel.sendResponse(response);\n            });\n\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", cancellable, SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\", cancellable)), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n            });\n        latch.await();\n    }\n","date":"2020-12-08 22:10:12","endLine":148,"groupId":"104369","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendMessage","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/99/089d60fa0ba7a4902a41bb9ff4aeba4ed09a71.src","preCode":"    public void testSendMessage() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceA, nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceB, nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_C\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        assertEquals(\"TS_C\", response.targetNode);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        throw new AssertionError(exp);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2020-12-08 22:10:12","commitOrder":8,"curCode":"    public void testException() throws InterruptedException {\n        boolean cancellable = randomBoolean();\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", cancellable, SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceA, nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", cancellable, SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceB, nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", cancellable, SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\", cancellable)), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n            });\n        latch.await();\n    }\n","date":"2020-12-08 22:10:12","endLine":203,"groupId":"104369","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/99/089d60fa0ba7a4902a41bb9ff4aeba4ed09a71.src","preCode":"    public void testException() throws InterruptedException {\n        serviceA.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_A\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceA, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceA, nodeB);\n\n        serviceB.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                assertEquals(request.sourceNode, \"TS_A\");\n                SimpleTestResponse response = new SimpleTestResponse(\"TS_B\");\n                channel.sendResponse(response);\n            });\n        TransportActionProxy.registerProxyAction(serviceB, \"internal:test\", SimpleTestResponse::new);\n        AbstractSimpleTransportTestCase.connectToNode(serviceB, nodeC);\n        serviceC.registerRequestHandler(\"internal:test\", ThreadPool.Names.SAME, SimpleTestRequest::new,\n            (request, channel, task) -> {\n                throw new ElasticsearchException(\"greetings from TS_C\");\n            });\n        TransportActionProxy.registerProxyAction(serviceC, \"internal:test\", SimpleTestResponse::new);\n\n        CountDownLatch latch = new CountDownLatch(1);\n        serviceA.sendRequest(nodeB, TransportActionProxy.getProxyAction(\"internal:test\"), TransportActionProxy.wrapRequest(nodeC,\n            new SimpleTestRequest(\"TS_A\")), new TransportResponseHandler<SimpleTestResponse>() {\n                @Override\n                public SimpleTestResponse read(StreamInput in) throws IOException {\n                    return new SimpleTestResponse(in);\n                }\n\n                @Override\n                public void handleResponse(SimpleTestResponse response) {\n                    try {\n                        fail(\"expected exception\");\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n\n                @Override\n                public void handleException(TransportException exp) {\n                    try {\n                        Throwable cause = ExceptionsHelper.unwrapCause(exp);\n                        assertEquals(\"greetings from TS_C\", cause.getMessage());\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n            });\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/TransportActionProxyTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"95936ebddc6f1b6d242d3a01e9481ae79a658641","commitMessage":"@@@Cancel proxy requests when the proxy channel closes (#65850)\n\nSince #43332 and #56327 we cancel rest requests when the rest channel \ncloses and transport requests when the transport channel closes. This\ncommit cancels proxy requests and its descendant requests when the proxy\nchannel closes. This change is also required to support cross-clusters\ntask cancellation.\n\nRelates #43332\nRelates #56327","date":"2020-12-08 22:10:12","modifiedFileCount":"7","status":"M","submitter":"Nhat Nguyen"}]
