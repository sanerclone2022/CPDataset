[{"authorTime":"2019-04-30 01:40:30","codes":[{"authorDate":"2019-01-26 00:37:27","commitOrder":4,"curCode":"    public void testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson() throws IOException {\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"crs\")\n                        .field(\"type\", \"name\")\n                        .startObject(\"properties\")\n                            .field(\"name\", \"urn:ogc:def:crs:OGC:1.3:CRS84\")\n                        .endObject()\n                    .endObject()\n                    .field(\"bbox\", \"foobar\")\n                    .field(\"type\", \"point\")\n                    .field(\"bubu\", \"foobar\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).endArray()\n                    .startObject(\"nested\").startArray(\"coordinates\").value(200.0).value(0.0).endArray().endObject()\n                    .startObject(\"lala\").field(\"type\", \"NotAPoint\").endObject()\n                .endObject();\n            Point expected = GEOMETRY_FACTORY.createPoint(new Coordinate(100.0, 0.0));\n            assertGeometryEquals(new JtsPoint(expected, SPATIAL_CONTEXT), pointGeoJson, true);\n\n            org.elasticsearch.geo.geometry.Point expectedPt = new org.elasticsearch.geo.geometry.Point(0, 100);\n            assertGeometryEquals(expectedPt, pointGeoJson, false);\n    }\n","date":"2019-01-26 00:37:27","endLine":1162,"groupId":"30193","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/74/024ddcada5ee8393f8b609bbd68b648e067d97.src","preCode":"    public void testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson() throws IOException {\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"crs\")\n                        .field(\"type\", \"name\")\n                        .startObject(\"properties\")\n                            .field(\"name\", \"urn:ogc:def:crs:OGC:1.3:CRS84\")\n                        .endObject()\n                    .endObject()\n                    .field(\"bbox\", \"foobar\")\n                    .field(\"type\", \"point\")\n                    .field(\"bubu\", \"foobar\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).endArray()\n                    .startObject(\"nested\").startArray(\"coordinates\").value(200.0).value(0.0).endArray().endObject()\n                    .startObject(\"lala\").field(\"type\", \"NotAPoint\").endObject()\n                .endObject();\n            Point expected = GEOMETRY_FACTORY.createPoint(new Coordinate(100.0, 0.0));\n            assertGeometryEquals(new JtsPoint(expected, SPATIAL_CONTEXT), pointGeoJson, true);\n\n            org.elasticsearch.geo.geometry.Point expectedPt = new org.elasticsearch.geo.geometry.Point(0, 100);\n            assertGeometryEquals(expectedPt, pointGeoJson, false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1141,"status":"NB"},{"authorDate":"2019-04-30 01:40:30","commitOrder":4,"curCode":"    public void testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson() throws IOException {\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"crs\")\n                        .field(\"type\", \"name\")\n                        .startObject(\"properties\")\n                            .field(\"name\", \"urn:ogc:def:crs:OGC:1.3:CRS84\")\n                        .endObject()\n                    .endObject()\n                    .field(\"bbox\", \"foobar\")\n                    .field(\"type\", \"point\")\n                    .field(\"bubu\", \"foobar\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).endArray()\n                    .startObject(\"nested\").startArray(\"coordinates\").value(200.0).value(0.0).endArray().endObject()\n                    .startObject(\"lala\").field(\"type\", \"NotAPoint\").endObject()\n                .endObject();\n\n            Point expectedPt = new Point(0, 100);\n            assertGeometryEquals(expectedPt, pointGeoJson, false);\n    }\n","date":"2019-04-30 01:40:30","endLine":639,"groupId":"30193","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/2c2e50e2cf136ce6229cf4cabd4f7ead0c6b69.src","preCode":"    public void testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson() throws IOException {\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"crs\")\n                        .field(\"type\", \"name\")\n                        .startObject(\"properties\")\n                            .field(\"name\", \"urn:ogc:def:crs:OGC:1.3:CRS84\")\n                        .endObject()\n                    .endObject()\n                    .field(\"bbox\", \"foobar\")\n                    .field(\"type\", \"point\")\n                    .field(\"bubu\", \"foobar\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).endArray()\n                    .startObject(\"nested\").startArray(\"coordinates\").value(200.0).value(0.0).endArray().endObject()\n                    .startObject(\"lala\").field(\"type\", \"NotAPoint\").endObject()\n                .endObject();\n\n            Point expectedPt = new Point(0, 100);\n            assertGeometryEquals(expectedPt, pointGeoJson, false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":620,"status":"B"}],"commitId":"6d3fd8401d5b2429878e81a9a0428a7792910407","commitMessage":"@@@Geo: Add GeoJson parser to libs/geo classes (#41575)\n\nAdds GeoJson parser for Geometry classes defined in libs/geo.\n\nRelates #40908 and #29872","date":"2019-04-30 01:40:30","modifiedFileCount":"18","status":"M","submitter":"Igor Motov"},{"authorTime":"2019-07-16 21:37:04","codes":[{"authorDate":"2019-07-16 21:37:04","commitOrder":5,"curCode":"    public void testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson() throws IOException, ParseException {\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"crs\")\n                        .field(\"type\", \"name\")\n                        .startObject(\"properties\")\n                            .field(\"name\", \"urn:ogc:def:crs:OGC:1.3:CRS84\")\n                        .endObject()\n                    .endObject()\n                    .field(\"bbox\", \"foobar\")\n                    .field(\"type\", \"point\")\n                    .field(\"bubu\", \"foobar\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).endArray()\n                    .startObject(\"nested\").startArray(\"coordinates\").value(200.0).value(0.0).endArray().endObject()\n                    .startObject(\"lala\").field(\"type\", \"NotAPoint\").endObject()\n                .endObject();\n            Point expected = GEOMETRY_FACTORY.createPoint(new Coordinate(100.0, 0.0));\n            assertGeometryEquals(new JtsPoint(expected, SPATIAL_CONTEXT), pointGeoJson, true);\n\n            org.elasticsearch.geo.geometry.Point expectedPt = new org.elasticsearch.geo.geometry.Point(0, 100);\n            assertGeometryEquals(expectedPt, pointGeoJson, false);\n    }\n","date":"2019-07-16 21:37:04","endLine":1163,"groupId":"30193","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/fc599f4cadc12195886cf7714ac82c70c628ad.src","preCode":"    public void testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson() throws IOException {\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"crs\")\n                        .field(\"type\", \"name\")\n                        .startObject(\"properties\")\n                            .field(\"name\", \"urn:ogc:def:crs:OGC:1.3:CRS84\")\n                        .endObject()\n                    .endObject()\n                    .field(\"bbox\", \"foobar\")\n                    .field(\"type\", \"point\")\n                    .field(\"bubu\", \"foobar\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).endArray()\n                    .startObject(\"nested\").startArray(\"coordinates\").value(200.0).value(0.0).endArray().endObject()\n                    .startObject(\"lala\").field(\"type\", \"NotAPoint\").endObject()\n                .endObject();\n            Point expected = GEOMETRY_FACTORY.createPoint(new Coordinate(100.0, 0.0));\n            assertGeometryEquals(new JtsPoint(expected, SPATIAL_CONTEXT), pointGeoJson, true);\n\n            org.elasticsearch.geo.geometry.Point expectedPt = new org.elasticsearch.geo.geometry.Point(0, 100);\n            assertGeometryEquals(expectedPt, pointGeoJson, false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1142,"status":"M"},{"authorDate":"2019-07-16 21:37:04","commitOrder":5,"curCode":"    public void testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson() throws IOException, ParseException {\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"crs\")\n                        .field(\"type\", \"name\")\n                        .startObject(\"properties\")\n                            .field(\"name\", \"urn:ogc:def:crs:OGC:1.3:CRS84\")\n                        .endObject()\n                    .endObject()\n                    .field(\"bbox\", \"foobar\")\n                    .field(\"type\", \"point\")\n                    .field(\"bubu\", \"foobar\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).endArray()\n                    .startObject(\"nested\").startArray(\"coordinates\").value(200.0).value(0.0).endArray().endObject()\n                    .startObject(\"lala\").field(\"type\", \"NotAPoint\").endObject()\n                .endObject();\n\n            Point expectedPt = new Point(0, 100);\n            assertGeometryEquals(expectedPt, pointGeoJson, false);\n    }\n","date":"2019-07-16 21:37:04","endLine":641,"groupId":"30193","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/45194146de34ca37cdbaad5eb701f6d378ecd9.src","preCode":"    public void testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson() throws IOException {\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"crs\")\n                        .field(\"type\", \"name\")\n                        .startObject(\"properties\")\n                            .field(\"name\", \"urn:ogc:def:crs:OGC:1.3:CRS84\")\n                        .endObject()\n                    .endObject()\n                    .field(\"bbox\", \"foobar\")\n                    .field(\"type\", \"point\")\n                    .field(\"bubu\", \"foobar\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).endArray()\n                    .startObject(\"nested\").startArray(\"coordinates\").value(200.0).value(0.0).endArray().endObject()\n                    .startObject(\"lala\").field(\"type\", \"NotAPoint\").endObject()\n                .endObject();\n\n            Point expectedPt = new Point(0, 100);\n            assertGeometryEquals(expectedPt, pointGeoJson, false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":622,"status":"M"}],"commitId":"33ad7928fbba6f2a371c5133685bf46afabc2aef","commitMessage":"@@@Geo: extract dateline handling logic from ShapeBuilders (#44187)\n\nExtracts dateline decomposition logic from ShapeBuilder into a separate\nutility class that is used on the indexing side. The search side\nwill be handled as part of another PR at this time we will remove\nthe decomposition logic from ShapeBuilders as well. This PR also doesn't\nchange any existing logic including bugs.\n\nRelates to #40908","date":"2019-07-16 21:37:04","modifiedFileCount":"8","status":"M","submitter":"Igor Motov"},{"authorTime":"2019-08-10 01:22:00","codes":[{"authorDate":"2019-08-10 01:22:00","commitOrder":6,"curCode":"    public void testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson() throws IOException, ParseException {\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"crs\")\n                        .field(\"type\", \"name\")\n                        .startObject(\"properties\")\n                            .field(\"name\", \"urn:ogc:def:crs:OGC:1.3:CRS84\")\n                        .endObject()\n                    .endObject()\n                    .field(\"bbox\", \"foobar\")\n                    .field(\"type\", \"point\")\n                    .field(\"bubu\", \"foobar\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).endArray()\n                    .startObject(\"nested\").startArray(\"coordinates\").value(200.0).value(0.0).endArray().endObject()\n                    .startObject(\"lala\").field(\"type\", \"NotAPoint\").endObject()\n                .endObject();\n            Point expected = GEOMETRY_FACTORY.createPoint(new Coordinate(100.0, 0.0));\n            assertGeometryEquals(new JtsPoint(expected, SPATIAL_CONTEXT), pointGeoJson, true);\n\n            org.elasticsearch.geometry.Point expectedPt = new org.elasticsearch.geometry.Point(100, 0);\n            assertGeometryEquals(expectedPt, pointGeoJson, false);\n    }\n","date":"2019-08-10 01:22:00","endLine":1164,"groupId":"104261","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/56/0d2987086d6505a493da36902b1d99e5305664.src","preCode":"    public void testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson() throws IOException, ParseException {\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"crs\")\n                        .field(\"type\", \"name\")\n                        .startObject(\"properties\")\n                            .field(\"name\", \"urn:ogc:def:crs:OGC:1.3:CRS84\")\n                        .endObject()\n                    .endObject()\n                    .field(\"bbox\", \"foobar\")\n                    .field(\"type\", \"point\")\n                    .field(\"bubu\", \"foobar\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).endArray()\n                    .startObject(\"nested\").startArray(\"coordinates\").value(200.0).value(0.0).endArray().endObject()\n                    .startObject(\"lala\").field(\"type\", \"NotAPoint\").endObject()\n                .endObject();\n            Point expected = GEOMETRY_FACTORY.createPoint(new Coordinate(100.0, 0.0));\n            assertGeometryEquals(new JtsPoint(expected, SPATIAL_CONTEXT), pointGeoJson, true);\n\n            org.elasticsearch.geo.geometry.Point expectedPt = new org.elasticsearch.geo.geometry.Point(0, 100);\n            assertGeometryEquals(expectedPt, pointGeoJson, false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1143,"status":"M"},{"authorDate":"2019-08-10 01:22:00","commitOrder":6,"curCode":"    public void testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson() throws IOException, ParseException {\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"crs\")\n                        .field(\"type\", \"name\")\n                        .startObject(\"properties\")\n                            .field(\"name\", \"urn:ogc:def:crs:OGC:1.3:CRS84\")\n                        .endObject()\n                    .endObject()\n                    .field(\"bbox\", \"foobar\")\n                    .field(\"type\", \"point\")\n                    .field(\"bubu\", \"foobar\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).endArray()\n                    .startObject(\"nested\").startArray(\"coordinates\").value(200.0).value(0.0).endArray().endObject()\n                    .startObject(\"lala\").field(\"type\", \"NotAPoint\").endObject()\n                .endObject();\n\n            Point expectedPt = new Point(100, 0);\n            assertGeometryEquals(expectedPt, pointGeoJson, false);\n    }\n","date":"2019-08-10 01:22:00","endLine":639,"groupId":"104261","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/88/0071667e40c31a922598a13eca808541b86611.src","preCode":"    public void testThatParserExtractsCorrectTypeAndCoordinatesFromArbitraryJson() throws IOException, ParseException {\n        XContentBuilder pointGeoJson = XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"crs\")\n                        .field(\"type\", \"name\")\n                        .startObject(\"properties\")\n                            .field(\"name\", \"urn:ogc:def:crs:OGC:1.3:CRS84\")\n                        .endObject()\n                    .endObject()\n                    .field(\"bbox\", \"foobar\")\n                    .field(\"type\", \"point\")\n                    .field(\"bubu\", \"foobar\")\n                    .startArray(\"coordinates\").value(100.0).value(0.0).endArray()\n                    .startObject(\"nested\").startArray(\"coordinates\").value(200.0).value(0.0).endArray().endObject()\n                    .startObject(\"lala\").field(\"type\", \"NotAPoint\").endObject()\n                .endObject();\n\n            Point expectedPt = new Point(0, 100);\n            assertGeometryEquals(expectedPt, pointGeoJson, false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":620,"status":"M"}],"commitId":"13a8835e5a8615aeb8304b48fd9e543a83361e13","commitMessage":"@@@Geo: Change order of parameter in Geometries to lon.  lat (#45332)\n\nChanges the order of parameters in Geometries from lat.  lon to lon.  lat\nand moves all Geometry classes are moved to the\norg.elasticsearch.geomtery package.\n\nCloses #45048","date":"2019-08-10 01:22:00","modifiedFileCount":"65","status":"M","submitter":"Igor Motov"}]
