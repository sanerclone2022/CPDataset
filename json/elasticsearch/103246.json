[{"authorTime":"2020-10-04 17:47:04","codes":[{"authorDate":"2020-10-04 17:47:04","commitOrder":1,"curCode":"    public void testFetchSourceValue() throws IOException {\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT.id).build();\n        Mapper.BuilderContext context = new Mapper.BuilderContext(settings, new ContentPath());\n\n        MappedFieldType mapper = new KeywordFieldMapper.Builder(\"field\").build(context).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> fetchSourceValue(mapper, \"value\", \"format\"));\n        assertEquals(\"Field [field] of type [keyword] doesn't support formats.\", e.getMessage());\n\n        MappedFieldType ignoreAboveMapper = new KeywordFieldMapper.Builder(\"field\")\n            .ignoreAbove(4)\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType normalizerMapper = new KeywordFieldMapper.Builder(\"field\", createIndexAnalyzers()).normalizer(\"lowercase\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"VALUE\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(normalizerMapper, 42L));\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"value\"));\n\n        MappedFieldType nullValueMapper = new KeywordFieldMapper.Builder(\"field\")\n            .nullValue(\"NULL\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","date":"2020-10-04 17:47:04","endLine":216,"groupId":"10777","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/32753ae1b585e71043c4f0b163ff31c89e324c.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT.id).build();\n        Mapper.BuilderContext context = new Mapper.BuilderContext(settings, new ContentPath());\n\n        MappedFieldType mapper = new KeywordFieldMapper.Builder(\"field\").build(context).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> fetchSourceValue(mapper, \"value\", \"format\"));\n        assertEquals(\"Field [field] of type [keyword] doesn't support formats.\", e.getMessage());\n\n        MappedFieldType ignoreAboveMapper = new KeywordFieldMapper.Builder(\"field\")\n            .ignoreAbove(4)\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType normalizerMapper = new KeywordFieldMapper.Builder(\"field\", createIndexAnalyzers()).normalizer(\"lowercase\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"VALUE\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(normalizerMapper, 42L));\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"value\"));\n\n        MappedFieldType nullValueMapper = new KeywordFieldMapper.Builder(\"field\")\n            .nullValue(\"NULL\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"B"},{"authorDate":"2020-10-04 17:47:04","commitOrder":1,"curCode":"    public void testFetchSourceValue() throws IOException {\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT.id).build();\n        Mapper.BuilderContext context = new Mapper.BuilderContext(settings, new ContentPath());\n\n        MappedFieldType mapper = new WildcardFieldMapper.Builder(\"field\").build(context).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        MappedFieldType ignoreAboveMapper = new WildcardFieldMapper.Builder(\"field\")\n            .ignoreAbove(4)\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType nullValueMapper = new WildcardFieldMapper.Builder(\"field\")\n            .nullValue(\"NULL\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","date":"2020-10-04 17:47:04","endLine":44,"groupId":"10777","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/d8e70e65fb22dd4064e399e2ecc433489bee86.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT.id).build();\n        Mapper.BuilderContext context = new Mapper.BuilderContext(settings, new ContentPath());\n\n        MappedFieldType mapper = new WildcardFieldMapper.Builder(\"field\").build(context).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        MappedFieldType ignoreAboveMapper = new WildcardFieldMapper.Builder(\"field\")\n            .ignoreAbove(4)\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType nullValueMapper = new WildcardFieldMapper.Builder(\"field\")\n            .nullValue(\"NULL\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","realPath":"x-pack/plugin/wildcard/src/test/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"B"}],"commitId":"ce649d07d772a17d5b5b3506044a408f6bef72c6","commitMessage":"@@@Move FieldMapper#valueFetcher to MappedFieldType (#62974)\n\nFor runtime fields.  we will want to do all search-time interaction with\na field definition via a MappedFieldType.  rather than a FieldMapper.  to\navoid interfering with the logic of document parsing. Currently.  fetching\nvalues for runtime scripts and for building top hits responses need to\ncall a method on FieldMapper. This commit moves this method to\nMappedFieldType.  incidentally simplifying the current call sites and freeing\nus up to implement runtime fields as pure MappedFieldType objects.","date":"2020-10-04 17:47:04","modifiedFileCount":"110","status":"B","submitter":"Alan Woodward"},{"authorTime":"2020-10-13 21:26:56","codes":[{"authorDate":"2020-10-04 17:47:04","commitOrder":2,"curCode":"    public void testFetchSourceValue() throws IOException {\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT.id).build();\n        Mapper.BuilderContext context = new Mapper.BuilderContext(settings, new ContentPath());\n\n        MappedFieldType mapper = new KeywordFieldMapper.Builder(\"field\").build(context).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> fetchSourceValue(mapper, \"value\", \"format\"));\n        assertEquals(\"Field [field] of type [keyword] doesn't support formats.\", e.getMessage());\n\n        MappedFieldType ignoreAboveMapper = new KeywordFieldMapper.Builder(\"field\")\n            .ignoreAbove(4)\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType normalizerMapper = new KeywordFieldMapper.Builder(\"field\", createIndexAnalyzers()).normalizer(\"lowercase\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"VALUE\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(normalizerMapper, 42L));\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"value\"));\n\n        MappedFieldType nullValueMapper = new KeywordFieldMapper.Builder(\"field\")\n            .nullValue(\"NULL\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","date":"2020-10-04 17:47:04","endLine":216,"groupId":"10777","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/32753ae1b585e71043c4f0b163ff31c89e324c.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT.id).build();\n        Mapper.BuilderContext context = new Mapper.BuilderContext(settings, new ContentPath());\n\n        MappedFieldType mapper = new KeywordFieldMapper.Builder(\"field\").build(context).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> fetchSourceValue(mapper, \"value\", \"format\"));\n        assertEquals(\"Field [field] of type [keyword] doesn't support formats.\", e.getMessage());\n\n        MappedFieldType ignoreAboveMapper = new KeywordFieldMapper.Builder(\"field\")\n            .ignoreAbove(4)\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType normalizerMapper = new KeywordFieldMapper.Builder(\"field\", createIndexAnalyzers()).normalizer(\"lowercase\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"VALUE\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(normalizerMapper, 42L));\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"value\"));\n\n        MappedFieldType nullValueMapper = new KeywordFieldMapper.Builder(\"field\")\n            .nullValue(\"NULL\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"N"},{"authorDate":"2020-10-13 21:26:56","commitOrder":2,"curCode":"    public void testFetchSourceValue() throws IOException {\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT.id).build();\n        Mapper.BuilderContext context = new Mapper.BuilderContext(settings, new ContentPath());\n\n        MappedFieldType mapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT).build(context).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        MappedFieldType ignoreAboveMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .ignoreAbove(4)\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType nullValueMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .nullValue(\"NULL\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","date":"2020-10-13 21:26:56","endLine":44,"groupId":"10777","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/23/eebd5f380778150e3efccf17f861b285a87c53.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT.id).build();\n        Mapper.BuilderContext context = new Mapper.BuilderContext(settings, new ContentPath());\n\n        MappedFieldType mapper = new WildcardFieldMapper.Builder(\"field\").build(context).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        MappedFieldType ignoreAboveMapper = new WildcardFieldMapper.Builder(\"field\")\n            .ignoreAbove(4)\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType nullValueMapper = new WildcardFieldMapper.Builder(\"field\")\n            .nullValue(\"NULL\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","realPath":"x-pack/plugin/wildcard/src/test/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"M"}],"commitId":"6db5b5f2abcb03631e199205880ca5d22c56cb83","commitMessage":"@@@Convert WildcardFieldMapper to parametrized form (#63465)\n\nRelates to #62988","date":"2020-10-13 21:26:56","modifiedFileCount":"5","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-11-05 18:48:39","codes":[{"authorDate":"2020-11-05 18:48:39","commitOrder":3,"curCode":"    public void testFetchSourceValue() throws IOException {\n        MappedFieldType mapper = new KeywordFieldMapper.Builder(\"field\").build(new ContentPath()).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> fetchSourceValue(mapper, \"value\", \"format\"));\n        assertEquals(\"Field [field] of type [keyword] doesn't support formats.\", e.getMessage());\n\n        MappedFieldType ignoreAboveMapper = new KeywordFieldMapper.Builder(\"field\")\n            .ignoreAbove(4)\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType normalizerMapper = new KeywordFieldMapper.Builder(\"field\", createIndexAnalyzers()).normalizer(\"lowercase\")\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"VALUE\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(normalizerMapper, 42L));\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"value\"));\n\n        MappedFieldType nullValueMapper = new KeywordFieldMapper.Builder(\"field\")\n            .nullValue(\"NULL\")\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","date":"2020-11-05 18:48:39","endLine":210,"groupId":"10777","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/f73ede723400221377982a5dce510936172d6f.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT.id).build();\n        Mapper.BuilderContext context = new Mapper.BuilderContext(settings, new ContentPath());\n\n        MappedFieldType mapper = new KeywordFieldMapper.Builder(\"field\").build(context).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> fetchSourceValue(mapper, \"value\", \"format\"));\n        assertEquals(\"Field [field] of type [keyword] doesn't support formats.\", e.getMessage());\n\n        MappedFieldType ignoreAboveMapper = new KeywordFieldMapper.Builder(\"field\")\n            .ignoreAbove(4)\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType normalizerMapper = new KeywordFieldMapper.Builder(\"field\", createIndexAnalyzers()).normalizer(\"lowercase\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"VALUE\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(normalizerMapper, 42L));\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"value\"));\n\n        MappedFieldType nullValueMapper = new KeywordFieldMapper.Builder(\"field\")\n            .nullValue(\"NULL\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2020-11-05 18:48:39","commitOrder":3,"curCode":"    public void testFetchSourceValue() throws IOException {\n        MappedFieldType mapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT).build(new ContentPath()).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        MappedFieldType ignoreAboveMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .ignoreAbove(4)\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType nullValueMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .nullValue(\"NULL\")\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","date":"2020-11-05 18:48:39","endLine":38,"groupId":"10777","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/9b73df32228822f06ed8ac001015c093d35c9e.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        Settings settings = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT.id).build();\n        Mapper.BuilderContext context = new Mapper.BuilderContext(settings, new ContentPath());\n\n        MappedFieldType mapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT).build(context).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        MappedFieldType ignoreAboveMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .ignoreAbove(4)\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType nullValueMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .nullValue(\"NULL\")\n            .build(context)\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","realPath":"x-pack/plugin/wildcard/src/test/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":19,"status":"M"}],"commitId":"0fd70ae383620d587a36ea71baca9295da93a76a","commitMessage":"@@@Remove Mapper.BuilderContext (#64625)\n\nMapper.BuilderContext is a simple wrapper around two objects.  some\nIndexSettings and a ContentPath. The IndexSettings are the same as\nthose provided in the ParserContext.  so we can simplify things here\nby removing them and just passing ContentPath directly to\nMapper.Builder#build()","date":"2020-11-05 18:48:39","modifiedFileCount":"103","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-11-05 18:48:39","codes":[{"authorDate":"2021-04-21 21:28:12","commitOrder":4,"curCode":"    public void testFetchSourceValue() throws IOException {\n        MappedFieldType mapper = new KeywordFieldMapper.Builder(\"field\").build(new ContentPath()).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> fetchSourceValue(mapper, \"value\", \"format\"));\n        assertEquals(\"Field [field] of type [keyword] doesn't support formats.\", e.getMessage());\n\n        MappedFieldType ignoreAboveMapper = new KeywordFieldMapper.Builder(\"field\")\n            .ignoreAbove(4)\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType normalizerMapper = new KeywordFieldMapper.Builder(\"field\", createIndexAnalyzers(), ScriptCompiler.NONE)\n            .normalizer(\"lowercase\")\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"VALUE\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(normalizerMapper, 42L));\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"value\"));\n\n        MappedFieldType nullValueMapper = new KeywordFieldMapper.Builder(\"field\")\n            .nullValue(\"NULL\")\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","date":"2021-04-21 21:28:12","endLine":201,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/50cfa9f5a11e66079dd3bb5acbd25a42505bca.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        MappedFieldType mapper = new KeywordFieldMapper.Builder(\"field\").build(new ContentPath()).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> fetchSourceValue(mapper, \"value\", \"format\"));\n        assertEquals(\"Field [field] of type [keyword] doesn't support formats.\", e.getMessage());\n\n        MappedFieldType ignoreAboveMapper = new KeywordFieldMapper.Builder(\"field\")\n            .ignoreAbove(4)\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType normalizerMapper = new KeywordFieldMapper.Builder(\"field\", createIndexAnalyzers()).normalizer(\"lowercase\")\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"VALUE\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(normalizerMapper, 42L));\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"value\"));\n\n        MappedFieldType nullValueMapper = new KeywordFieldMapper.Builder(\"field\")\n            .nullValue(\"NULL\")\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2020-11-05 18:48:39","commitOrder":4,"curCode":"    public void testFetchSourceValue() throws IOException {\n        MappedFieldType mapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT).build(new ContentPath()).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        MappedFieldType ignoreAboveMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .ignoreAbove(4)\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType nullValueMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .nullValue(\"NULL\")\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","date":"2020-11-05 18:48:39","endLine":38,"groupId":"10777","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/9b73df32228822f06ed8ac001015c093d35c9e.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        MappedFieldType mapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT).build(new ContentPath()).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        MappedFieldType ignoreAboveMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .ignoreAbove(4)\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType nullValueMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .nullValue(\"NULL\")\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","realPath":"x-pack/plugin/wildcard/src/test/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":19,"status":"N"}],"commitId":"9a86dde3572a6f3999eea75bc3ce30b965837ba3","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-21 21:28:12","modifiedFileCount":"1285","status":"M","submitter":"iverase"},{"authorTime":"2021-09-08 23:34:14","codes":[{"authorDate":"2021-09-08 23:34:14","commitOrder":5,"curCode":"    public void testFetchSourceValue() throws IOException {\n        MappedFieldType mapper = new KeywordFieldMapper.Builder(\"field\")\n            .build(MapperBuilderContext.ROOT)\n            .fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> fetchSourceValue(mapper, \"value\", \"format\"));\n        assertEquals(\"Field [field] of type [keyword] doesn't support formats.\", e.getMessage());\n\n        MappedFieldType ignoreAboveMapper = new KeywordFieldMapper.Builder(\"field\")\n            .ignoreAbove(4)\n            .build(MapperBuilderContext.ROOT)\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType normalizerMapper = new KeywordFieldMapper.Builder(\"field\", createIndexAnalyzers(), ScriptCompiler.NONE)\n            .normalizer(\"lowercase\")\n            .build(MapperBuilderContext.ROOT)\n            .fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"VALUE\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(normalizerMapper, 42L));\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"value\"));\n\n        MappedFieldType nullValueMapper = new KeywordFieldMapper.Builder(\"field\")\n            .nullValue(\"NULL\")\n            .build(MapperBuilderContext.ROOT)\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","date":"2021-09-08 23:34:14","endLine":203,"groupId":"103246","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/4e433d7f937c538d397ef2cd61d1ae44a8e9c9.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        MappedFieldType mapper = new KeywordFieldMapper.Builder(\"field\").build(new ContentPath()).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> fetchSourceValue(mapper, \"value\", \"format\"));\n        assertEquals(\"Field [field] of type [keyword] doesn't support formats.\", e.getMessage());\n\n        MappedFieldType ignoreAboveMapper = new KeywordFieldMapper.Builder(\"field\")\n            .ignoreAbove(4)\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType normalizerMapper = new KeywordFieldMapper.Builder(\"field\", createIndexAnalyzers(), ScriptCompiler.NONE)\n            .normalizer(\"lowercase\")\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"VALUE\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(normalizerMapper, 42L));\n        assertEquals(List.of(\"value\"), fetchSourceValue(normalizerMapper, \"value\"));\n\n        MappedFieldType nullValueMapper = new KeywordFieldMapper.Builder(\"field\")\n            .nullValue(\"NULL\")\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2021-09-08 23:34:14","commitOrder":5,"curCode":"    public void testFetchSourceValue() throws IOException {\n        MappedFieldType mapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .build(MapperBuilderContext.ROOT)\n            .fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        MappedFieldType ignoreAboveMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .ignoreAbove(4)\n            .build(MapperBuilderContext.ROOT)\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType nullValueMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .nullValue(\"NULL\")\n            .build(MapperBuilderContext.ROOT)\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","date":"2021-09-08 23:34:14","endLine":41,"groupId":"103246","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1b/7a8453186ef488761f80b43ea9aeb38e8cf15e.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        MappedFieldType mapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT).build(new ContentPath()).fieldType();\n        assertEquals(List.of(\"value\"), fetchSourceValue(mapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(mapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(mapper, true));\n\n        MappedFieldType ignoreAboveMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .ignoreAbove(4)\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(), fetchSourceValue(ignoreAboveMapper, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(ignoreAboveMapper, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(ignoreAboveMapper, true));\n\n        MappedFieldType nullValueMapper = new WildcardFieldMapper.Builder(\"field\", Version.CURRENT)\n            .nullValue(\"NULL\")\n            .build(new ContentPath())\n            .fieldType();\n        assertEquals(List.of(\"NULL\"), fetchSourceValue(nullValueMapper, null));\n    }\n","realPath":"x-pack/plugin/wildcard/src/test/java/org/elasticsearch/xpack/wildcard/mapper/WildcardFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":20,"status":"M"}],"commitId":"9312eba5ed2a4174e0ac1ce823e98f47a19b4fc1","commitMessage":"@@@Change Mapper.build() to take a context object (#77108)\n\nMapper.build() currently takes a ContentPath object that it can use to generate\nfield type names that will include its parent names. We would like to expand field types\nto include more information about their parents.  and ContentPath does not hold this\ninformation. This commit replaces the ContentPath parameter with a new\nMapperBuilderContext.  which currently holds only the content path information but\ncan be expanded in future to hold parent relationship information.\n\nRelates to #75474","date":"2021-09-08 23:34:14","modifiedFileCount":"97","status":"M","submitter":"Alan Woodward"}]
