[{"authorTime":"2020-02-27 17:43:42","codes":[{"authorDate":"2019-09-24 02:14:54","commitOrder":4,"curCode":"    private static SearchHit[] toSearchHits(List<RatedDocument> rated, String index) {\n        SearchHit[] hits = new SearchHit[rated.size()];\n        for (int i = 0; i < rated.size(); i++) {\n            hits[i] = new SearchHit(i, i + \"\", Collections.emptyMap());\n            hits[i].shard(new SearchShardTarget(\"testnode\", new ShardId(index, \"uuid\", 0), null, OriginalIndices.NONE));\n        }\n        return hits;\n    }\n","date":"2019-09-24 02:14:54","endLine":258,"groupId":"52993","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toSearchHits","params":"(List<RatedDocument>rated@Stringindex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/5be25f86aefef4156d0f9bdb48ffae48ca850b.src","preCode":"    private static SearchHit[] toSearchHits(List<RatedDocument> rated, String index) {\n        SearchHit[] hits = new SearchHit[rated.size()];\n        for (int i = 0; i < rated.size(); i++) {\n            hits[i] = new SearchHit(i, i + \"\", Collections.emptyMap());\n            hits[i].shard(new SearchShardTarget(\"testnode\", new ShardId(index, \"uuid\", 0), null, OriginalIndices.NONE));\n        }\n        return hits;\n    }\n","realPath":"modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/PrecisionAtKTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"NB"},{"authorDate":"2020-02-27 17:43:42","commitOrder":4,"curCode":"    private static SearchHit[] toSearchHits(List<RatedDocument> rated, String index) {\n        SearchHit[] hits = new SearchHit[rated.size()];\n        for (int i = 0; i < rated.size(); i++) {\n            hits[i] = new SearchHit(i, i + \"\", Collections.emptyMap());\n            hits[i].shard(new SearchShardTarget(\"testnode\", new ShardId(index, \"uuid\", 0), null, OriginalIndices.NONE));\n        }\n        return hits;\n    }\n","date":"2020-02-27 17:43:42","endLine":243,"groupId":"52993","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toSearchHits","params":"(List<RatedDocument>rated@Stringindex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/99/0a7751fd2f4b2766b02c0cc89d045046e69905.src","preCode":"    private static SearchHit[] toSearchHits(List<RatedDocument> rated, String index) {\n        SearchHit[] hits = new SearchHit[rated.size()];\n        for (int i = 0; i < rated.size(); i++) {\n            hits[i] = new SearchHit(i, i + \"\", Collections.emptyMap());\n            hits[i].shard(new SearchShardTarget(\"testnode\", new ShardId(index, \"uuid\", 0), null, OriginalIndices.NONE));\n        }\n        return hits;\n    }\n","realPath":"modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RecallAtKTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"}],"commitId":"4ff5e03c70aa590f755289c568eb7f6569e4b499","commitMessage":"@@@Adds recall@k metric to rank eval API (#52577)\n\nThis change adds the recall@k metric and refactors precision@k to match\nthe new metric.\n\nRecall@k is an important metric to use for learning to rank (LTR)\nuse-cases. Candidate generation or first ranking phase ranking functions\nare often optimized for high recall.  in order to generate as many\nrelevant candidates in the top-k as possible for a second phase of\nranking. Adding this metric allows tuning that base query for LTR.\n\nSee: https://github.com/elastic/elasticsearch/issues/51676","date":"2020-02-27 17:43:42","modifiedFileCount":"8","status":"M","submitter":"Josh Devins"},{"authorTime":"2020-03-30 21:29:47","codes":[{"authorDate":"2020-03-30 21:29:47","commitOrder":5,"curCode":"    private static SearchHit[] toSearchHits(List<RatedDocument> rated, String index) {\n        SearchHit[] hits = new SearchHit[rated.size()];\n        for (int i = 0; i < rated.size(); i++) {\n            hits[i] = new SearchHit(i, i + \"\", Collections.emptyMap(), Collections.emptyMap());\n            hits[i].shard(new SearchShardTarget(\"testnode\", new ShardId(index, \"uuid\", 0), null, OriginalIndices.NONE));\n        }\n        return hits;\n    }\n","date":"2020-03-30 21:29:47","endLine":260,"groupId":"10314","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toSearchHits","params":"(List<RatedDocument>rated@Stringindex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/e5ad94ce7f59115cf567373b9b64f87992f5d5.src","preCode":"    private static SearchHit[] toSearchHits(List<RatedDocument> rated, String index) {\n        SearchHit[] hits = new SearchHit[rated.size()];\n        for (int i = 0; i < rated.size(); i++) {\n            hits[i] = new SearchHit(i, i + \"\", Collections.emptyMap());\n            hits[i].shard(new SearchShardTarget(\"testnode\", new ShardId(index, \"uuid\", 0), null, OriginalIndices.NONE));\n        }\n        return hits;\n    }\n","realPath":"modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/PrecisionAtKTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2020-03-30 21:29:47","commitOrder":5,"curCode":"    private static SearchHit[] toSearchHits(List<RatedDocument> rated, String index) {\n        SearchHit[] hits = new SearchHit[rated.size()];\n        for (int i = 0; i < rated.size(); i++) {\n            hits[i] = new SearchHit(i, i + \"\", Collections.emptyMap(), Collections.emptyMap());\n            hits[i].shard(new SearchShardTarget(\"testnode\", new ShardId(index, \"uuid\", 0), null, OriginalIndices.NONE));\n        }\n        return hits;\n    }\n","date":"2020-03-30 21:29:47","endLine":243,"groupId":"10314","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toSearchHits","params":"(List<RatedDocument>rated@Stringindex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cf/edc96305b2c7eaab7858db7a7ad382c29ca0ce.src","preCode":"    private static SearchHit[] toSearchHits(List<RatedDocument> rated, String index) {\n        SearchHit[] hits = new SearchHit[rated.size()];\n        for (int i = 0; i < rated.size(); i++) {\n            hits[i] = new SearchHit(i, i + \"\", Collections.emptyMap());\n            hits[i].shard(new SearchShardTarget(\"testnode\", new ShardId(index, \"uuid\", 0), null, OriginalIndices.NONE));\n        }\n        return hits;\n    }\n","realPath":"modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RecallAtKTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"}],"commitId":"128bcc59d802b2e1a6062edb09a302d5e79ab9f6","commitMessage":"@@@Search hit refactoring (#41656)\n\nRefactor SearchHit to have separate document and meta fields.\nThis is a part of bigger refactoring of issue #24422 to remove\ndependency on MapperService to check if a field is metafield.\n\nRelates to PR: #38373\nRelates to issue #24422","date":"2020-03-30 21:29:47","modifiedFileCount":"34","status":"M","submitter":"sandmannn"}]
