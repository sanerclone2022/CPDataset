[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testRegisterAggregation() {\n        SearchModule module = new SearchModule(Settings.EMPTY, false, singletonList(new SearchPlugin() {\n            @Override\n            public List<AggregationSpec> getAggregations() {\n                return singletonList(new AggregationSpec(\"test\", TestAggregationBuilder::new, TestAggregationBuilder::fromXContent));\n            }\n        }));\n\n        assertThat(\n                module.getNamedXContents().stream()\n                    .filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) &&\n                        entry.name.match(\"test\", LoggingDeprecationHandler.INSTANCE))\n                    .collect(toList()),\n                hasSize(1));\n    }\n","date":"2018-04-26 03:22:53","endLine":262,"groupId":"62140","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegisterAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/040f5bfb254d1b9fd8c65c1b85298927814ee6.src","preCode":"    public void testRegisterAggregation() {\n        SearchModule module = new SearchModule(Settings.EMPTY, false, singletonList(new SearchPlugin() {\n            @Override\n            public List<AggregationSpec> getAggregations() {\n                return singletonList(new AggregationSpec(\"test\", TestAggregationBuilder::new, TestAggregationBuilder::fromXContent));\n            }\n        }));\n\n        assertThat(\n                module.getNamedXContents().stream()\n                    .filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) &&\n                        entry.name.match(\"test\", LoggingDeprecationHandler.INSTANCE))\n                    .collect(toList()),\n                hasSize(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testRegisterPipelineAggregation() {\n        SearchModule module = new SearchModule(Settings.EMPTY, false, singletonList(new SearchPlugin() {\n            @Override\n            public List<PipelineAggregationSpec> getPipelineAggregations() {\n                return singletonList(new PipelineAggregationSpec(\"test\",\n                        TestPipelineAggregationBuilder::new, TestPipelineAggregator::new, TestPipelineAggregationBuilder::fromXContent));\n            }\n        }));\n\n        assertThat(\n                module.getNamedXContents().stream()\n                    .filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) &&\n                        entry.name.match(\"test\", LoggingDeprecationHandler.INSTANCE))\n                    .collect(toList()),\n                hasSize(1));\n    }\n","date":"2018-04-26 03:22:53","endLine":279,"groupId":"62140","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRegisterPipelineAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/040f5bfb254d1b9fd8c65c1b85298927814ee6.src","preCode":"    public void testRegisterPipelineAggregation() {\n        SearchModule module = new SearchModule(Settings.EMPTY, false, singletonList(new SearchPlugin() {\n            @Override\n            public List<PipelineAggregationSpec> getPipelineAggregations() {\n                return singletonList(new PipelineAggregationSpec(\"test\",\n                        TestPipelineAggregationBuilder::new, TestPipelineAggregator::new, TestPipelineAggregationBuilder::fromXContent));\n            }\n        }));\n\n        assertThat(\n                module.getNamedXContents().stream()\n                    .filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) &&\n                        entry.name.match(\"test\", LoggingDeprecationHandler.INSTANCE))\n                    .collect(toList()),\n                hasSize(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-06-06 08:22:37","codes":[{"authorDate":"2019-06-06 08:22:37","commitOrder":2,"curCode":"    public void testRegisterAggregation() {\n        SearchModule module = new SearchModule(Settings.EMPTY, singletonList(new SearchPlugin() {\n            @Override\n            public List<AggregationSpec> getAggregations() {\n                return singletonList(new AggregationSpec(\"test\", TestAggregationBuilder::new, TestAggregationBuilder::fromXContent));\n            }\n        }));\n\n        assertThat(\n                module.getNamedXContents().stream()\n                    .filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) &&\n                        entry.name.match(\"test\", LoggingDeprecationHandler.INSTANCE))\n                    .collect(toList()),\n                hasSize(1));\n    }\n","date":"2019-06-06 08:22:37","endLine":273,"groupId":"62140","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegisterAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/601713a33d36dad02feb94c26cf803a3646fbb.src","preCode":"    public void testRegisterAggregation() {\n        SearchModule module = new SearchModule(Settings.EMPTY, false, singletonList(new SearchPlugin() {\n            @Override\n            public List<AggregationSpec> getAggregations() {\n                return singletonList(new AggregationSpec(\"test\", TestAggregationBuilder::new, TestAggregationBuilder::fromXContent));\n            }\n        }));\n\n        assertThat(\n                module.getNamedXContents().stream()\n                    .filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) &&\n                        entry.name.match(\"test\", LoggingDeprecationHandler.INSTANCE))\n                    .collect(toList()),\n                hasSize(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2019-06-06 08:22:37","commitOrder":2,"curCode":"    public void testRegisterPipelineAggregation() {\n        SearchModule module = new SearchModule(Settings.EMPTY, singletonList(new SearchPlugin() {\n            @Override\n            public List<PipelineAggregationSpec> getPipelineAggregations() {\n                return singletonList(new PipelineAggregationSpec(\"test\",\n                        TestPipelineAggregationBuilder::new, TestPipelineAggregator::new, TestPipelineAggregationBuilder::fromXContent));\n            }\n        }));\n\n        assertThat(\n                module.getNamedXContents().stream()\n                    .filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) &&\n                        entry.name.match(\"test\", LoggingDeprecationHandler.INSTANCE))\n                    .collect(toList()),\n                hasSize(1));\n    }\n","date":"2019-06-06 08:22:37","endLine":290,"groupId":"62140","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRegisterPipelineAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/601713a33d36dad02feb94c26cf803a3646fbb.src","preCode":"    public void testRegisterPipelineAggregation() {\n        SearchModule module = new SearchModule(Settings.EMPTY, false, singletonList(new SearchPlugin() {\n            @Override\n            public List<PipelineAggregationSpec> getPipelineAggregations() {\n                return singletonList(new PipelineAggregationSpec(\"test\",\n                        TestPipelineAggregationBuilder::new, TestPipelineAggregator::new, TestPipelineAggregationBuilder::fromXContent));\n            }\n        }));\n\n        assertThat(\n                module.getNamedXContents().stream()\n                    .filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) &&\n                        entry.name.match(\"test\", LoggingDeprecationHandler.INSTANCE))\n                    .collect(toList()),\n                hasSize(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"}],"commitId":"b15d62c3ab5b3766a975f8d4b3878cbde8c2b6c0","commitMessage":"@@@Remove the transport client (#42538)\n\nThis commit removes the transport client and all remaining uses in the code.\n","date":"2019-06-06 08:22:37","modifiedFileCount":"136","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2020-04-15 03:35:54","codes":[{"authorDate":"2019-06-06 08:22:37","commitOrder":3,"curCode":"    public void testRegisterAggregation() {\n        SearchModule module = new SearchModule(Settings.EMPTY, singletonList(new SearchPlugin() {\n            @Override\n            public List<AggregationSpec> getAggregations() {\n                return singletonList(new AggregationSpec(\"test\", TestAggregationBuilder::new, TestAggregationBuilder::fromXContent));\n            }\n        }));\n\n        assertThat(\n                module.getNamedXContents().stream()\n                    .filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) &&\n                        entry.name.match(\"test\", LoggingDeprecationHandler.INSTANCE))\n                    .collect(toList()),\n                hasSize(1));\n    }\n","date":"2019-06-06 08:22:37","endLine":273,"groupId":"104604","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegisterAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/601713a33d36dad02feb94c26cf803a3646fbb.src","preCode":"    public void testRegisterAggregation() {\n        SearchModule module = new SearchModule(Settings.EMPTY, singletonList(new SearchPlugin() {\n            @Override\n            public List<AggregationSpec> getAggregations() {\n                return singletonList(new AggregationSpec(\"test\", TestAggregationBuilder::new, TestAggregationBuilder::fromXContent));\n            }\n        }));\n\n        assertThat(\n                module.getNamedXContents().stream()\n                    .filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) &&\n                        entry.name.match(\"test\", LoggingDeprecationHandler.INSTANCE))\n                    .collect(toList()),\n                hasSize(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"},{"authorDate":"2020-04-15 03:35:54","commitOrder":3,"curCode":"    public void testRegisterPipelineAggregation() {\n        SearchModule module = new SearchModule(Settings.EMPTY, singletonList(new SearchPlugin() {\n            @Override\n            public List<PipelineAggregationSpec> getPipelineAggregations() {\n                return singletonList(new PipelineAggregationSpec(\"test\",\n                        TestPipelineAggregationBuilder::new, TestPipelineAggregationBuilder::fromXContent));\n            }\n        }));\n\n        assertThat(\n                module.getNamedXContents().stream()\n                    .filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) &&\n                        entry.name.match(\"test\", LoggingDeprecationHandler.INSTANCE))\n                    .collect(toList()),\n                hasSize(1));\n    }\n","date":"2020-04-15 03:35:54","endLine":290,"groupId":"104604","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRegisterPipelineAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b1/6909f071d0692377c3f760d0f53c8e78c84168.src","preCode":"    public void testRegisterPipelineAggregation() {\n        SearchModule module = new SearchModule(Settings.EMPTY, singletonList(new SearchPlugin() {\n            @Override\n            public List<PipelineAggregationSpec> getPipelineAggregations() {\n                return singletonList(new PipelineAggregationSpec(\"test\",\n                        TestPipelineAggregationBuilder::new, TestPipelineAggregator::new, TestPipelineAggregationBuilder::fromXContent));\n            }\n        }));\n\n        assertThat(\n                module.getNamedXContents().stream()\n                    .filter(entry -> entry.categoryClass.equals(BaseAggregationBuilder.class) &&\n                        entry.name.match(\"test\", LoggingDeprecationHandler.INSTANCE))\n                    .collect(toList()),\n                hasSize(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"}],"commitId":"af11ec59e019816819bde53ebb244a15e09a28ca","commitMessage":"@@@Remove serialization from pipeline aggregator (#55026)\n\n`master` doesn't need to talk to Elasticsearch versions before 7.8.0 so\n`PipelineAggregator` doesn't need to be writable *at all* in master. New\npipeline aggregations don't need to worry about serializing\n`PipelineAggregator` at all so this drops all of it.\n\nFor the most part we don't need to worry about serialization of\n`PipelineAggregator` at all any more. When backporting a change to an\naggregator that is serialized to previous versions of Elasticsearch it\n*should* be fairly simple to pick a value to serialize. And the compiler\n*should* tell you that you need to do it. In many cases you this'll be a\nnoop. *Hopefully* all cases.\n\nCloses #53742","date":"2020-04-15 03:35:54","modifiedFileCount":"30","status":"M","submitter":"Nik Everett"}]
