[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    private GroupShardsIterator<ShardIterator> allSatisfyingPredicateShardsGrouped(String[] indices, boolean includeEmpty, boolean includeRelocationTargets, Predicate<ShardRouting> predicate) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                continue;\n                \r\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                for (ShardRouting shardRouting : indexShardRoutingTable) {\n                    if (predicate.test(shardRouting)) {\n                        set.add(shardRouting.shardsIt());\n                        if (includeRelocationTargets && shardRouting.relocating()) {\n                            set.add(new PlainShardIterator(shardRouting.shardId(), Collections.singletonList(shardRouting.getTargetRelocatingShard())));\n                        }\n                    } else if (includeEmpty) { \r\n                        set.add(new PlainShardIterator(shardRouting.shardId(), Collections.<ShardRouting>emptyList()));\n                    }\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","date":"2018-04-26 03:22:53","endLine":272,"groupId":"27017","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"allSatisfyingPredicateShardsGrouped","params":"(String[]indices@booleanincludeEmpty@booleanincludeRelocationTargets@Predicate<ShardRouting>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/c512c17aaac04fdc70a06f8e7a26698a045ef8.src","preCode":"    private GroupShardsIterator<ShardIterator> allSatisfyingPredicateShardsGrouped(String[] indices, boolean includeEmpty, boolean includeRelocationTargets, Predicate<ShardRouting> predicate) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                continue;\n                \r\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                for (ShardRouting shardRouting : indexShardRoutingTable) {\n                    if (predicate.test(shardRouting)) {\n                        set.add(shardRouting.shardsIt());\n                        if (includeRelocationTargets && shardRouting.relocating()) {\n                            set.add(new PlainShardIterator(shardRouting.shardId(), Collections.singletonList(shardRouting.getTargetRelocatingShard())));\n                        }\n                    } else if (includeEmpty) { \r\n                        set.add(new PlainShardIterator(shardRouting.shardId(), Collections.<ShardRouting>emptyList()));\n                    }\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public GroupShardsIterator<ShardIterator> activePrimaryShardsGrouped(String[] indices, boolean includeEmpty) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                throw new IndexNotFoundException(index);\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                ShardRouting primary = indexShardRoutingTable.primaryShard();\n                if (primary.active()) {\n                    set.add(primary.shardsIt());\n                } else if (includeEmpty) { \r\n                    set.add(new PlainShardIterator(primary.shardId(), Collections.<ShardRouting>emptyList()));\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","date":"2018-04-26 03:22:53","endLine":332,"groupId":"27020","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"activePrimaryShardsGrouped","params":"(String[]indices@booleanincludeEmpty)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/c512c17aaac04fdc70a06f8e7a26698a045ef8.src","preCode":"    public GroupShardsIterator<ShardIterator> activePrimaryShardsGrouped(String[] indices, boolean includeEmpty) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                throw new IndexNotFoundException(index);\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                ShardRouting primary = indexShardRoutingTable.primaryShard();\n                if (primary.active()) {\n                    set.add(primary.shardsIt());\n                } else if (includeEmpty) { \r\n                    set.add(new PlainShardIterator(primary.shardId(), Collections.<ShardRouting>emptyList()));\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-11-06 03:40:27","codes":[{"authorDate":"2018-11-06 03:40:27","commitOrder":2,"curCode":"    private GroupShardsIterator<ShardIterator> allSatisfyingPredicateShardsGrouped(String[] indices, boolean includeEmpty,\n            boolean includeRelocationTargets, Predicate<ShardRouting> predicate) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                continue;\n                \r\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                for (ShardRouting shardRouting : indexShardRoutingTable) {\n                    if (predicate.test(shardRouting)) {\n                        set.add(shardRouting.shardsIt());\n                        if (includeRelocationTargets && shardRouting.relocating()) {\n                            set.add(new PlainShardIterator(shardRouting.shardId(),\n                                    Collections.singletonList(shardRouting.getTargetRelocatingShard())));\n                        }\n                    } else if (includeEmpty) { \r\n                        set.add(new PlainShardIterator(shardRouting.shardId(), Collections.emptyList()));\n                    }\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","date":"2018-11-06 03:40:27","endLine":275,"groupId":"27017","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"allSatisfyingPredicateShardsGrouped","params":"(String[]indices@booleanincludeEmpty@booleanincludeRelocationTargets@Predicate<ShardRouting>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/5ee132ffa9b33b0b890befbaacb113d5d38a05.src","preCode":"    private GroupShardsIterator<ShardIterator> allSatisfyingPredicateShardsGrouped(String[] indices, boolean includeEmpty,\n            boolean includeRelocationTargets, Predicate<ShardRouting> predicate) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                continue;\n                \r\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                for (ShardRouting shardRouting : indexShardRoutingTable) {\n                    if (predicate.test(shardRouting)) {\n                        set.add(shardRouting.shardsIt());\n                        if (includeRelocationTargets && shardRouting.relocating()) {\n                            set.add(new PlainShardIterator(shardRouting.shardId(),\n                                    Collections.singletonList(shardRouting.getTargetRelocatingShard())));\n                        }\n                    } else if (includeEmpty) { \r\n                        set.add(new PlainShardIterator(shardRouting.shardId(), Collections.<ShardRouting>emptyList()));\n                    }\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2018-11-06 03:40:27","commitOrder":2,"curCode":"    public GroupShardsIterator<ShardIterator> activePrimaryShardsGrouped(String[] indices, boolean includeEmpty) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                throw new IndexNotFoundException(index);\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                ShardRouting primary = indexShardRoutingTable.primaryShard();\n                if (primary.active()) {\n                    set.add(primary.shardsIt());\n                } else if (includeEmpty) { \r\n                    set.add(new PlainShardIterator(primary.shardId(), Collections.emptyList()));\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","date":"2018-11-06 03:40:27","endLine":336,"groupId":"27020","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"activePrimaryShardsGrouped","params":"(String[]indices@booleanincludeEmpty)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/5ee132ffa9b33b0b890befbaacb113d5d38a05.src","preCode":"    public GroupShardsIterator<ShardIterator> activePrimaryShardsGrouped(String[] indices, boolean includeEmpty) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                throw new IndexNotFoundException(index);\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                ShardRouting primary = indexShardRoutingTable.primaryShard();\n                if (primary.active()) {\n                    set.add(primary.shardsIt());\n                } else if (includeEmpty) { \r\n                    set.add(new PlainShardIterator(primary.shardId(), Collections.<ShardRouting>emptyList()));\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"216c761a5dd81e65ca9826fb0793ddc53cd2ff27","commitMessage":"@@@MINOR: Remove Dead Code in Routing (#35074)\n\n* MINOR: Remove Dead Code in Routing\n","date":"2018-11-06 03:40:27","modifiedFileCount":"7","status":"M","submitter":"Armin Braun"},{"authorTime":"2018-11-06 03:40:27","codes":[{"authorDate":"2019-02-12 03:13:54","commitOrder":3,"curCode":"    private GroupShardsIterator<ShardIterator> allSatisfyingPredicateShardsGrouped(String[] indices, boolean includeEmpty,\n                                                                                   Predicate<ShardRouting> predicate) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                continue;\n                \r\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                for (ShardRouting shardRouting : indexShardRoutingTable) {\n                    if (predicate.test(shardRouting)) {\n                        set.add(shardRouting.shardsIt());\n                    } else if (includeEmpty) { \r\n                        set.add(new PlainShardIterator(shardRouting.shardId(), Collections.emptyList()));\n                    }\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","date":"2019-02-12 03:13:54","endLine":262,"groupId":"27017","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"allSatisfyingPredicateShardsGrouped","params":"(String[]indices@booleanincludeEmpty@Predicate<ShardRouting>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/f7d58ce8589d7dd91ec83771c5cde6a20cd0b6.src","preCode":"    private GroupShardsIterator<ShardIterator> allSatisfyingPredicateShardsGrouped(String[] indices, boolean includeEmpty,\n            boolean includeRelocationTargets, Predicate<ShardRouting> predicate) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                continue;\n                \r\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                for (ShardRouting shardRouting : indexShardRoutingTable) {\n                    if (predicate.test(shardRouting)) {\n                        set.add(shardRouting.shardsIt());\n                        if (includeRelocationTargets && shardRouting.relocating()) {\n                            set.add(new PlainShardIterator(shardRouting.shardId(),\n                                    Collections.singletonList(shardRouting.getTargetRelocatingShard())));\n                        }\n                    } else if (includeEmpty) { \r\n                        set.add(new PlainShardIterator(shardRouting.shardId(), Collections.emptyList()));\n                    }\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2018-11-06 03:40:27","commitOrder":3,"curCode":"    public GroupShardsIterator<ShardIterator> activePrimaryShardsGrouped(String[] indices, boolean includeEmpty) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                throw new IndexNotFoundException(index);\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                ShardRouting primary = indexShardRoutingTable.primaryShard();\n                if (primary.active()) {\n                    set.add(primary.shardsIt());\n                } else if (includeEmpty) { \r\n                    set.add(new PlainShardIterator(primary.shardId(), Collections.emptyList()));\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","date":"2018-11-06 03:40:27","endLine":336,"groupId":"27020","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"activePrimaryShardsGrouped","params":"(String[]indices@booleanincludeEmpty)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/5ee132ffa9b33b0b890befbaacb113d5d38a05.src","preCode":"    public GroupShardsIterator<ShardIterator> activePrimaryShardsGrouped(String[] indices, boolean includeEmpty) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                throw new IndexNotFoundException(index);\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                ShardRouting primary = indexShardRoutingTable.primaryShard();\n                if (primary.active()) {\n                    set.add(primary.shardsIt());\n                } else if (includeEmpty) { \r\n                    set.add(new PlainShardIterator(primary.shardId(), Collections.emptyList()));\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"N"}],"commitId":"abd861bb9191a3e3edd4f92f7d5c586dfa90281d","commitMessage":"@@@Remove Dead Code + Duplication in o.e.c.routing (#36678)\n\n* Removed obviously unused fields+methods\n* Inlined public methods that only had one caller\n* Simplified `Optional` chain\n* Simplified some obviously redundant conditions\n","date":"2019-02-12 03:13:54","modifiedFileCount":"11","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-02-26 01:14:09","codes":[{"authorDate":"2020-02-26 01:14:09","commitOrder":4,"curCode":"    private GroupShardsIterator<ShardIterator> allSatisfyingPredicateShardsGrouped(String[] indices, boolean includeEmpty,\n                                                                                   Predicate<ShardRouting> predicate) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                continue;\n                \r\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                for (ShardRouting shardRouting : indexShardRoutingTable) {\n                    if (predicate.test(shardRouting)) {\n                        set.add(shardRouting.shardsIt());\n                    } else if (includeEmpty) { \r\n                        set.add(new PlainShardIterator(shardRouting.shardId(), Collections.emptyList()));\n                    }\n                }\n            }\n        }\n        return GroupShardsIterator.sortAndCreate(set);\n    }\n","date":"2020-02-26 01:14:09","endLine":264,"groupId":"107633","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"allSatisfyingPredicateShardsGrouped","params":"(String[]indices@booleanincludeEmpty@Predicate<ShardRouting>predicate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f5/4e31292d6aa151569d664920d21ca47fe8f827.src","preCode":"    private GroupShardsIterator<ShardIterator> allSatisfyingPredicateShardsGrouped(String[] indices, boolean includeEmpty,\n                                                                                   Predicate<ShardRouting> predicate) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                continue;\n                \r\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                for (ShardRouting shardRouting : indexShardRoutingTable) {\n                    if (predicate.test(shardRouting)) {\n                        set.add(shardRouting.shardsIt());\n                    } else if (includeEmpty) { \r\n                        set.add(new PlainShardIterator(shardRouting.shardId(), Collections.emptyList()));\n                    }\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2020-02-26 01:14:09","commitOrder":4,"curCode":"    public GroupShardsIterator<ShardIterator> activePrimaryShardsGrouped(String[] indices, boolean includeEmpty) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                throw new IndexNotFoundException(index);\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                ShardRouting primary = indexShardRoutingTable.primaryShard();\n                if (primary.active()) {\n                    set.add(primary.shardsIt());\n                } else if (includeEmpty) { \r\n                    set.add(new PlainShardIterator(primary.shardId(), Collections.emptyList()));\n                }\n            }\n        }\n        return GroupShardsIterator.sortAndCreate(set);\n    }\n","date":"2020-02-26 01:14:09","endLine":325,"groupId":"107633","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"activePrimaryShardsGrouped","params":"(String[]indices@booleanincludeEmpty)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f5/4e31292d6aa151569d664920d21ca47fe8f827.src","preCode":"    public GroupShardsIterator<ShardIterator> activePrimaryShardsGrouped(String[] indices, boolean includeEmpty) {\n        \r\n        ArrayList<ShardIterator> set = new ArrayList<>();\n        for (String index : indices) {\n            IndexRoutingTable indexRoutingTable = index(index);\n            if (indexRoutingTable == null) {\n                throw new IndexNotFoundException(index);\n            }\n            for (IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {\n                ShardRouting primary = indexShardRoutingTable.primaryShard();\n                if (primary.active()) {\n                    set.add(primary.shardsIt());\n                } else if (includeEmpty) { \r\n                    set.add(new PlainShardIterator(primary.shardId(), Collections.emptyList()));\n                }\n            }\n        }\n        return new GroupShardsIterator<>(set);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/routing/RoutingTable.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"bdb6c350f568f72f89c49096ee326fada0fbd61e","commitMessage":"@@@Clarify when shard iterators get sorted (#52633)\n\nCurrently we have two ways to create a GroupShardsIterator: one that will resort the iterators based on their natural ordering.  and another one that will leave them in their original order. This is currently done through two constructors.  one that accepts a single argument which does the sorting.  and another which accepts a second boolean argument to control whether sorting should happen or not. This second constructor is only called externally to disable the sorting.\n\nBy introducing a specific method to create a sorted shard iterator we clarify and make it easier to track when we do sort and when we do not as the iterators are externally sorted.","date":"2020-02-26 01:14:09","modifiedFileCount":"7","status":"M","submitter":"Luca Cavanna"}]
