[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        action.execute(null, bulkRequest, listener);\n\n        \r\n        verify(executionService, never()).executeBulkRequest(any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        action.execute(null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":313,"groupId":"27968","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bc/d16386df3d47400ba8ab5d691fb7b1e8e20be6.src","preCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        action.execute(null, bulkRequest, listener);\n\n        \r\n        verify(executionService, never()).executeBulkRequest(any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        action.execute(null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n\n        \r\n        verify(executionService, never()).executeBulkRequest(any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":360,"groupId":"43768","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleItemBulkActionIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bc/d16386df3d47400ba8ab5d691fb7b1e8e20be6.src","preCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n\n        \r\n        verify(executionService, never()).executeBulkRequest(any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-08-21 18:54:06","codes":[{"authorDate":"2018-08-21 18:54:06","commitOrder":2,"curCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        action.execute(null, bulkRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        action.execute(null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2018-08-21 18:54:06","endLine":352,"groupId":"27968","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/68d2b6bb9bdeabbdb7fc3ca4e1d6a87118c176.src","preCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        action.execute(null, bulkRequest, listener);\n\n        \r\n        verify(executionService, never()).executeBulkRequest(any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        action.execute(null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"},{"authorDate":"2018-08-21 18:54:06","commitOrder":2,"curCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2018-08-21 18:54:06","endLine":399,"groupId":"43768","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleItemBulkActionIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/68d2b6bb9bdeabbdb7fc3ca4e1d6a87118c176.src","preCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n\n        \r\n        verify(executionService, never()).executeBulkRequest(any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"}],"commitId":"10c60fae93fc82469d3dcc9f330035e2a5818bb7","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-21 18:54:06","modifiedFileCount":"60","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-06 03:56:58","codes":[{"authorDate":"2018-09-06 03:56:58","commitOrder":3,"curCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        action.execute(null, bulkRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        action.execute(null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2018-09-06 03:56:58","endLine":352,"groupId":"27968","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7f/db12ff1356adf6064e9256cf73ac7ad81506d4.src","preCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        action.execute(null, bulkRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        action.execute(null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"},{"authorDate":"2018-09-06 03:56:58","commitOrder":3,"curCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2018-09-06 03:56:58","endLine":399,"groupId":"27968","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleItemBulkActionIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7f/db12ff1356adf6064e9256cf73ac7ad81506d4.src","preCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"}],"commitId":"b5f7fb688251d198525a0dd75852a2e91aee46fb","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-06 03:56:58","modifiedFileCount":"114","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-07-12 04:53:46","codes":[{"authorDate":"2019-07-12 04:53:46","commitOrder":4,"curCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2019-07-12 04:53:46","endLine":359,"groupId":"27968","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/22ed75d60912a306cc7ba72585df219f545b7e.src","preCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        action.execute(null, bulkRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        action.execute(null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"},{"authorDate":"2019-07-12 04:53:46","commitOrder":4,"curCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2019-07-12 04:53:46","endLine":406,"groupId":"27968","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleItemBulkActionIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/22ed75d60912a306cc7ba72585df219f545b7e.src","preCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        singleItemBulkWriteAction.execute(null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"f7d06eea557cc5bb0f5a56c4ec0716bd58ef7bca","commitMessage":"@@@Remove most direct test calls to TransportAction.execute (#44241)\n\nThere are currently 3 variants of TransportAction.execute. The\nimplementations of these require additional ctor arguments to all\nTransportAction implementations. While the non test uses can be\nconverted to using NodeClient to execute other actions.  using that for\ntest cases would be cumbersome and defeat the purpose of unit tests\ntesting an action's implementation directly. This commit adds a public\ntest-only utility method for test to use to call execute. This method\nwill continue to be available when the execute implementations are\ncollapsed and made package private.\n\nrelates #43881","date":"2019-07-12 04:53:46","modifiedFileCount":"12","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2019-09-25 22:03:06","codes":[{"authorDate":"2019-09-25 22:03:06","commitOrder":5,"curCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2019-09-25 22:03:06","endLine":363,"groupId":"27968","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/90b5200d19a1ff79e24d52ad0067627eeb00da.src","preCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"},{"authorDate":"2019-09-25 22:03:06","commitOrder":5,"curCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2019-09-25 22:03:06","endLine":410,"groupId":"27968","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleItemBulkActionIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/90b5200d19a1ff79e24d52ad0067627eeb00da.src","preCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"}],"commitId":"2c7fd822930b4ecb651d1903d99798e6f0c504b2","commitMessage":"@@@Allow ingest processors to execute in a non blocking manner. (#46241)\n\nThis PR changes the ingest executing to be non blocking\nby adding an additional method to the Processor interface\nthat accepts a BiConsumer as handler and changing\nIngestService#executeBulkRequest(...) to ingest document\nin a non blocking fashion iff a processor executes\nin a non blocking fashion.\n\nThis is the second PR that merges changes made to server module from\nthe enrich branch (see #32789) into the master branch.\n\nThe plan is to merge changes made to the server module separately from\nthe pr that will merge enrich into master.  so that these changes can\nbe reviewed in isolation.\n\nThis change originates from the enrich branch and was introduced there\nin #43361.","date":"2019-09-25 22:03:06","modifiedFileCount":"20","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2019-10-11 17:23:55","codes":[{"authorDate":"2019-10-11 17:23:55","commitOrder":6,"curCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2019-10-11 17:23:55","endLine":364,"groupId":"27968","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9a/e9f04eb81003a02abc5113d1561e0ca6dc62ab.src","preCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"},{"authorDate":"2019-10-11 17:23:55","commitOrder":6,"curCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2019-10-11 17:23:55","endLine":411,"groupId":"27968","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleItemBulkActionIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9a/e9f04eb81003a02abc5113d1561e0ca6dc62ab.src","preCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"}],"commitId":"566e1b7d33ec62e2f6011245782cd65d6381ee43","commitMessage":"@@@Remove type field from DocWriteRequest and associated Response objects (#47671)\n\nThis commit removes the type field from index.  update and delete requests.  and their\nassociated responses.\n\nRelates to #41059","date":"2019-10-11 17:23:55","modifiedFileCount":"145","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-09-23 02:14:45","codes":[{"authorDate":"2020-09-23 02:14:45","commitOrder":7,"curCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2020-09-23 02:14:45","endLine":417,"groupId":"27968","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/335056aff2db76f80f903c8632689e4cf57e66.src","preCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"M"},{"authorDate":"2020-09-23 02:14:45","commitOrder":7,"curCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2020-09-23 02:14:45","endLine":464,"groupId":"27968","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSingleItemBulkActionIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/335056aff2db76f80f903c8632689e4cf57e66.src","preCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"}],"commitId":"242083a36e02496aae9214dc41b89372022e7076","commitMessage":"@@@Dedicated threadpool for system index writes (#61655)\n\nThis commit adds a dedicated threadpool for system index write\noperations. The dedicated resources for system index writes serves as\na means to ensure that user activity does not block important system\noperations from occurring such as the management of users and roles.","date":"2020-09-23 02:14:45","modifiedFileCount":"29","status":"M","submitter":"Jay Modi"},{"authorTime":"2021-08-13 02:41:26","codes":[{"authorDate":"2020-09-23 02:14:45","commitOrder":8,"curCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2020-09-23 02:14:45","endLine":417,"groupId":"105640","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/335056aff2db76f80f903c8632689e4cf57e66.src","preCode":"    public void testIngestForward() throws Exception {\n        localIngest = false;\n        BulkRequest bulkRequest = new BulkRequest();\n        IndexRequest indexRequest = new IndexRequest(\"index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        bulkRequest.add(indexRequest);\n        BulkResponse bulkResponse = mock(BulkResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<BulkResponse> listener = ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n                assertSame(bulkResponse, response);\n            },\n            e -> {\n                throw new AssertionError(e);\n            });\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        remoteResponseHandler.getValue().handleResponse(bulkResponse); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(action, null, bulkRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"N"},{"authorDate":"2021-08-13 02:41:26","commitOrder":8,"curCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = BulkItemResponse.success(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","date":"2021-08-13 02:41:26","endLine":446,"groupId":"105640","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"testSingleItemBulkActionIngestForward","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/14/d8031cdc3d6d92ede0e331518c1aa020909021.src","preCode":"    public void testSingleItemBulkActionIngestForward() throws Exception {\n        localIngest = false;\n        IndexRequest indexRequest = new IndexRequest(\"index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        IndexResponse indexResponse = mock(IndexResponse.class);\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        ActionListener<IndexResponse> listener = ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                    assertSame(indexResponse, response);\n                },\n                e -> {\n                    throw new AssertionError(e);\n                });\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n\n        \r\n        verify(ingestService, never()).executeBulkRequest(anyInt(), any(), any(), any(), any(), any());\n        \r\n        ArgumentCaptor<DiscoveryNode> node = ArgumentCaptor.forClass(DiscoveryNode.class);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        boolean usedNode1 = node.getValue() == remoteNode1; \r\n        if (usedNode1 == false) {\n            assertSame(remoteNode2, node.getValue());\n        }\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get()); \r\n\n        BulkItemResponse itemResponse = new BulkItemResponse(0, DocWriteRequest.OpType.CREATE, indexResponse);\n        BulkItemResponse[] bulkItemResponses = new BulkItemResponse[1];\n        bulkItemResponses[0] = itemResponse;\n        remoteResponseHandler.getValue().handleResponse(new BulkResponse(bulkItemResponses, 0)); \r\n        assertTrue(responseCalled.get()); \r\n        assertFalse(action.isExecuted); \r\n\n        \r\n        reset(transportService);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, listener);\n        verify(transportService).sendRequest(node.capture(), eq(BulkAction.NAME), any(), remoteResponseHandler.capture());\n        if (usedNode1) {\n            assertSame(remoteNode2, node.getValue());\n        } else {\n            assertSame(remoteNode1, node.getValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"M"}],"commitId":"e305a6bed75e99b5053b07e03f4c6c813e02160b","commitMessage":"@@@Name `BulkItemResponse` ctors (#76439)\n\n* Name `BulkItemResponse` ctors\n\n`BulkItemResponse` can contain either a success or failure. This\nreplaces the two constructors used to build either case with named\nstatic methods. So instead of\n```\nreturn new BulkItemResponse(0.  OpType.CREATE.  createResponse);\nreturn new BulkItemResponse(0.  OpType.CREATE.  failure);\n```\nyou now use\n```\nreturn BulkItemResponse.success(0.  OpType.CREATE.  createResponse);\nreturn BulkItemResponse.failure(0.  OpType.CREATE.  failure);\n```\n\nThis makes it marginally easier to read code building these things - you\ndon't have to know the type of the parameter to know if its a failure\nor success.\n\n* Consistent\n\n* Mock response","date":"2021-08-13 02:41:26","modifiedFileCount":"28","status":"M","submitter":"Nik Everett"}]
