[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testIncludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"includes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(true));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(false));\n    }\n","date":"2018-04-26 03:22:53","endLine":96,"groupId":"4119","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIncludes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/da/7ecc70789fc357728344654e0b42e7dad33dc9.src","preCode":"    public void testIncludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"includes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(true));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testExcludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"excludes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(false));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(true));\n    }\n","date":"2018-04-26 03:22:53","endLine":118,"groupId":"4119","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcludes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/da/7ecc70789fc357728344654e0b42e7dad33dc9.src","preCode":"    public void testExcludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"excludes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(false));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(true));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-12-25 03:06:50","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testIncludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"includes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(true));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(false));\n    }\n","date":"2018-12-25 03:06:50","endLine":97,"groupId":"23846","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIncludes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a8/db41e677b95e3fd70ad7fd533d2de30eaa6fdf.src","preCode":"    public void testIncludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"includes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(true));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testExcludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"excludes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(false));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(true));\n    }\n","date":"2018-12-25 03:06:50","endLine":121,"groupId":"23846","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcludes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a8/db41e677b95e3fd70ad7fd533d2de30eaa6fdf.src","preCode":"    public void testExcludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"excludes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(false));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(true));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"7580d9d925d864b25466d693637b3bd3092d44cf","commitMessage":"@@@Make SourceToParse immutable (#36971)\n\nToday the routing of a SourceToParse is assigned in a separate step\nafter the object is created. We can easily forget to set the routing.\nWith this commit.  the routing must be provided in the constructor of\nSourceToParse.\n\nRelates #36921","date":"2018-12-25 03:06:50","modifiedFileCount":"66","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testIncludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"includes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(true));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(false));\n    }\n","date":"2019-10-15 16:05:29","endLine":97,"groupId":"5121","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIncludes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cb/fbb4a05c973d54ac15373fd6dd168086444482.src","preCode":"    public void testIncludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"includes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(true));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testExcludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"excludes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(false));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(true));\n    }\n","date":"2019-10-15 16:05:29","endLine":121,"groupId":"5121","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcludes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cb/fbb4a05c973d54ac15373fd6dd168086444482.src","preCode":"    public void testExcludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"excludes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"type\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(false));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(true));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-08-11 22:44:55","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    public void testIncludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"includes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(true));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(false));\n    }\n","date":"2019-10-15 16:05:29","endLine":97,"groupId":"5121","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testIncludes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cb/fbb4a05c973d54ac15373fd6dd168086444482.src","preCode":"    public void testIncludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"includes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(true));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2020-08-11 22:44:55","commitOrder":4,"curCode":"    public void testExcludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"excludes\", \"path1*\").endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(false));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(true));\n    }\n","date":"2020-08-11 22:44:55","endLine":120,"groupId":"5121","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcludes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/fbc069bcd096780e3fe638554cbd9ae9bcc53a.src","preCode":"    public void testExcludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"excludes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(false));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(true));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"fd8b557935c58913805044a03de3453e45ab0318","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-11 22:44:55","modifiedFileCount":"130","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-10-21 02:11:29","codes":[{"authorDate":"2020-10-21 02:11:29","commitOrder":5,"curCode":"    public void testIncludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"includes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(true));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(false));\n    }\n","date":"2020-10-21 02:11:29","endLine":96,"groupId":"5121","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testIncludes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f6/389df774906351f94deca61e7bd02fb593e2fa.src","preCode":"    public void testIncludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"includes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(true));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-10-21 02:11:29","commitOrder":5,"curCode":"    public void testExcludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"excludes\", \"path1*\").endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(false));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(true));\n    }\n","date":"2020-10-21 02:11:29","endLine":119,"groupId":"5121","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcludes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f6/389df774906351f94deca61e7bd02fb593e2fa.src","preCode":"    public void testExcludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"excludes\", \"path1*\").endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(false));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(true));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"b96f26eba2049ffafb3197fbbb1942b3cdf8733a","commitMessage":"@@@Remove documentMapperParser method from MapperService (#63938)\n\nMapperService allows to retrieve its internal DocumentMapperParser instance. Such method is only used in tests.  and always to parse mappings which is already exposed by MapperService through a specific parse method.\n\nThis commit removes the getter for DocumentMapperParser from MapperService in favour of calling MapperService#parse","date":"2020-10-21 02:11:29","modifiedFileCount":"27","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-01-06 23:15:00","codes":[{"authorDate":"2021-01-06 23:15:00","commitOrder":6,"curCode":"    public void testIncludes() throws Exception {\n        DocumentMapper documentMapper = createDocumentMapper(topMapping(\n            b -> b.startObject(\"_source\").array(\"includes\", \"path1*\").endObject()));\n\n        ParsedDocument doc = documentMapper.parse(source(b -> {\n            b.startObject(\"path1\").field(\"field1\", \"value1\").endObject();\n            b.startObject(\"path2\").field(\"field2\", \"value2\").endObject();\n        }));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(true));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(false));\n    }\n","date":"2021-01-06 23:15:00","endLine":87,"groupId":"103219","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testIncludes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/e1e1299cac7054c462480a2cb3b57ee6b82467.src","preCode":"    public void testIncludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"includes\", new String[]{\"path1*\"}).endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(true));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2021-01-06 23:15:00","commitOrder":6,"curCode":"    public void testExcludes() throws Exception {\n        DocumentMapper documentMapper = createDocumentMapper(topMapping(\n            b -> b.startObject(\"_source\").array(\"excludes\", \"path1*\").endObject()\n        ));\n\n        ParsedDocument doc = documentMapper.parse(source(b -> {\n            b.startObject(\"path1\").field(\"field1\", \"value1\").endObject();\n            b.startObject(\"path2\").field(\"field2\", \"value2\").endObject();\n        }));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(false));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(true));\n    }\n","date":"2021-01-06 23:15:00","endLine":106,"groupId":"103219","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcludes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/e1e1299cac7054c462480a2cb3b57ee6b82467.src","preCode":"    public void testExcludes() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"_source\").array(\"excludes\", \"path1*\").endObject()\n            .endObject().endObject());\n\n        DocumentMapper documentMapper = createIndex(\"test\").mapperService().parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = documentMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder().startObject()\n            .startObject(\"path1\").field(\"field1\", \"value1\").endObject()\n            .startObject(\"path2\").field(\"field2\", \"value2\").endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField sourceField = doc.rootDoc().getField(\"_source\");\n        Map<String, Object> sourceAsMap;\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, new BytesArray(sourceField.binaryValue()))) {\n            sourceAsMap = parser.map();\n        }\n        assertThat(sourceAsMap.containsKey(\"path1\"), equalTo(false));\n        assertThat(sourceAsMap.containsKey(\"path2\"), equalTo(true));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/SourceFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"3945bf7a409a3b66160aaec45455cafbffff2c41","commitMessage":"@@@Convert metadata mapper tests to use MapperServiceTestCase (#66334)\n\nA number of metadata field mapper tests are still extending ESSingleNodeTestCase.\nThis commit changes them to use MapperServiceTestCase instead.  and adds a new\nbase class for those metadata fields that have parameters subject to conflict checks.","date":"2021-01-06 23:15:00","modifiedFileCount":"12","status":"M","submitter":"Alan Woodward"}]
