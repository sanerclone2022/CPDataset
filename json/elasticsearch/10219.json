[{"authorTime":"2020-11-11 01:31:59","codes":[{"authorDate":"2020-11-04 19:08:34","commitOrder":6,"curCode":"        public ValueFetcher valueFetcher(QueryShardContext context, SearchLookup searchLookup, String format) {\n            if (format != null) {\n                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n            }\n\n            return new ArraySourceValueFetcher(name(), context) {\n                @Override\n                protected List<?> parseSourceValue(Object value) {\n                    if (value instanceof List) {\n                        return (List<?>) value;\n                    } else {\n                        return List.of(value);\n                    }\n                }\n            };\n        }\n","date":"2020-11-04 19:08:34","endLine":325,"groupId":"50921","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"valueFetcher","params":"(QueryShardContextcontext@SearchLookupsearchLookup@Stringformat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/007fb6f40652e003c45103c74718820ef2b4e9.src","preCode":"        public ValueFetcher valueFetcher(QueryShardContext context, SearchLookup searchLookup, String format) {\n            if (format != null) {\n                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n            }\n\n            return new ArraySourceValueFetcher(name(), context) {\n                @Override\n                protected List<?> parseSourceValue(Object value) {\n                    if (value instanceof List) {\n                        return (List<?>) value;\n                    } else {\n                        return List.of(value);\n                    }\n                }\n            };\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"NB"},{"authorDate":"2020-11-11 01:31:59","commitOrder":6,"curCode":"        public ValueFetcher valueFetcher(QueryShardContext context, SearchLookup searchLookup, String format) {\n            if (format != null) {\n                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n            }\n\n            return new SourceValueFetcher(name(), context) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                protected Object parseSourceValue(Object value) {\n                    Map<String, Double> metrics = (Map<String, Double>) value;\n                    return metrics.get(defaultMetric.name());\n                }\n            };\n        }\n","date":"2020-11-11 01:31:59","endLine":439,"groupId":"50921","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"valueFetcher","params":"(QueryShardContextcontext@SearchLookupsearchLookup@Stringformat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cb/8f41c65b2bdd0b43e48c9fd586518c1b6c634b.src","preCode":"        public ValueFetcher valueFetcher(QueryShardContext context, SearchLookup searchLookup, String format) {\n            if (format != null) {\n                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n            }\n\n            return new SourceValueFetcher(name(), context) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                protected Object parseSourceValue(Object value) {\n                    Map<String, Double> metrics = (Map<String, Double>) value;\n                    return metrics.get(defaultMetric.name());\n                }\n            };\n        }\n","realPath":"x-pack/plugin/mapper-aggregate-metric/src/main/java/org/elasticsearch/xpack/aggregatemetric/mapper/AggregateDoubleMetricFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"B"}],"commitId":"66b5e4ec89a7562a38108840442ba21d0565adb7","commitMessage":"@@@Implement aggregations on aggregate metric fields (#56745)\n\nIn the process of developing a new implementation for the Elasticsearch Rollups functionality we came up with the concept of the aggregate metric field type.\n\nThe aggregate_metric_double field type can store the results of aggregations (currently min.  max.  sum.  value_count and avg are supported - more to come).\n\nThis field allows us to run (min.  max.  sum.  value_count.  avg) aggregations on the container field and the field will return the correct metric depending on the aggregation that is computed.","date":"2020-11-11 01:31:59","modifiedFileCount":"6","status":"M","submitter":"Christos Soulios"},{"authorTime":"2020-11-21 06:09:41","codes":[{"authorDate":"2020-11-21 06:09:41","commitOrder":7,"curCode":"        public ValueFetcher valueFetcher(QueryShardContext context, String format) {\n            if (format != null) {\n                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n            }\n\n            return new ArraySourceValueFetcher(name(), context) {\n                @Override\n                protected List<?> parseSourceValue(Object value) {\n                    if (value instanceof List) {\n                        return (List<?>) value;\n                    } else {\n                        return List.of(value);\n                    }\n                }\n            };\n        }\n","date":"2020-11-21 06:09:41","endLine":304,"groupId":"50921","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"valueFetcher","params":"(QueryShardContextcontext@Stringformat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a0/8f9862aa452c62335379ee3c80448bf55a1a6e.src","preCode":"        public ValueFetcher valueFetcher(QueryShardContext context, SearchLookup searchLookup, String format) {\n            if (format != null) {\n                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n            }\n\n            return new ArraySourceValueFetcher(name(), context) {\n                @Override\n                protected List<?> parseSourceValue(Object value) {\n                    if (value instanceof List) {\n                        return (List<?>) value;\n                    } else {\n                        return List.of(value);\n                    }\n                }\n            };\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"},{"authorDate":"2020-11-21 06:09:41","commitOrder":7,"curCode":"        public ValueFetcher valueFetcher(QueryShardContext context, String format) {\n            if (format != null) {\n                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n            }\n\n            return new SourceValueFetcher(name(), context) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                protected Object parseSourceValue(Object value) {\n                    Map<String, Double> metrics = (Map<String, Double>) value;\n                    return metrics.get(defaultMetric.name());\n                }\n            };\n        }\n","date":"2020-11-21 06:09:41","endLine":439,"groupId":"50921","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"valueFetcher","params":"(QueryShardContextcontext@Stringformat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d4/1160c2fd4064a5c04b7245d3481266b8755241.src","preCode":"        public ValueFetcher valueFetcher(QueryShardContext context, SearchLookup searchLookup, String format) {\n            if (format != null) {\n                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n            }\n\n            return new SourceValueFetcher(name(), context) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                protected Object parseSourceValue(Object value) {\n                    Map<String, Double> metrics = (Map<String, Double>) value;\n                    return metrics.get(defaultMetric.name());\n                }\n            };\n        }\n","realPath":"x-pack/plugin/mapper-aggregate-metric/src/main/java/org/elasticsearch/xpack/aggregatemetric/mapper/AggregateDoubleMetricFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"}],"commitId":"f4a462d05e76a4a7275de18e39dd40119a9fada2","commitMessage":"@@@Simplify how source is passed to fetch subphases. (#65292)\n\nThis PR simplifies how the document source is passed to each fetch subphase. A summary of the strategy:\n* For each document.  we try to eagerly load the source and store it on `HitContext`. Most subphases that access source.  like source filtering and highlighting.  use `HitContext`. For nested hits.  we filter the parent source and also store this source on `HitContext`.\n* Only for non-nested documents.  we also store the loaded source on `QueryShardContext#lookup`. This allows subphases that access source through `SearchLookup` to use the pre-loaded source when possible. This is now a common occurrence.  since runtime fields are supported in the 'fields' option and may soon be supported in highlighting.\n\nThere is no longer a special `SearchLookup` just for the fetch phase. This was not necessary and was mostly caused by a misunderstanding of how `QueryShardContext` should be used.\n\nAddresses #62511.","date":"2020-11-21 06:09:41","modifiedFileCount":"67","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":8,"curCode":"        public ValueFetcher valueFetcher(SearchExecutionContext context, String format) {\n            if (format != null) {\n                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n            }\n\n            return new ArraySourceValueFetcher(name(), context) {\n                @Override\n                protected List<?> parseSourceValue(Object value) {\n                    if (value instanceof List) {\n                        return (List<?>) value;\n                    } else {\n                        return List.of(value);\n                    }\n                }\n            };\n        }\n","date":"2021-01-15 01:11:59","endLine":304,"groupId":"10219","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"valueFetcher","params":"(SearchExecutionContextcontext@Stringformat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7c/b6472b35f5a9448aae3c32342473c72578c5da.src","preCode":"        public ValueFetcher valueFetcher(QueryShardContext context, String format) {\n            if (format != null) {\n                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n            }\n\n            return new ArraySourceValueFetcher(name(), context) {\n                @Override\n                protected List<?> parseSourceValue(Object value) {\n                    if (value instanceof List) {\n                        return (List<?>) value;\n                    } else {\n                        return List.of(value);\n                    }\n                }\n            };\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/mapper/CompletionFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":8,"curCode":"        public ValueFetcher valueFetcher(SearchExecutionContext context, String format) {\n            if (format != null) {\n                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n            }\n\n            return new SourceValueFetcher(name(), context) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                protected Object parseSourceValue(Object value) {\n                    Map<String, Double> metrics = (Map<String, Double>) value;\n                    return metrics.get(defaultMetric.name());\n                }\n            };\n        }\n","date":"2021-01-15 01:11:59","endLine":445,"groupId":"10219","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"valueFetcher","params":"(SearchExecutionContextcontext@Stringformat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/edc7cab2167419376610bdc503eda8398fa485.src","preCode":"        public ValueFetcher valueFetcher(QueryShardContext context, String format) {\n            if (format != null) {\n                throw new IllegalArgumentException(\"Field [\" + name() + \"] of type [\" + typeName() + \"] doesn't support formats.\");\n            }\n\n            return new SourceValueFetcher(name(), context) {\n                @Override\n                @SuppressWarnings(\"unchecked\")\n                protected Object parseSourceValue(Object value) {\n                    Map<String, Double> metrics = (Map<String, Double>) value;\n                    return metrics.get(defaultMetric.name());\n                }\n            };\n        }\n","realPath":"x-pack/plugin/mapper-aggregate-metric/src/main/java/org/elasticsearch/xpack/aggregatemetric/mapper/AggregateDoubleMetricFieldMapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
