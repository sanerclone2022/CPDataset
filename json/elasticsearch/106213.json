[{"authorTime":"2020-05-07 08:20:26","codes":[{"authorDate":"2020-05-07 08:20:26","commitOrder":1,"curCode":"    public void testShardsAllocatedAfterDataNodesStart() {\n        internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false).build());\n        client().admin().indices().create(createIndexRequest(\"test\")\n            .settings(Settings.builder().put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)).waitForActiveShards(ActiveShardCount.NONE))\n            .actionGet();\n        final ClusterHealthResponse healthResponse1 = client().admin().cluster().prepareHealth()\n            .setWaitForEvents(Priority.LANGUID).execute().actionGet();\n        assertThat(healthResponse1.isTimedOut(), equalTo(false));\n        assertThat(healthResponse1.getStatus(), equalTo(ClusterHealthStatus.RED));\n        assertThat(healthResponse1.getActiveShards(), equalTo(0));\n\n        internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), true).build());\n\n        assertThat(client().admin().cluster().prepareHealth()\n            .setWaitForEvents(Priority.LANGUID).setWaitForNodes(\"2\").setWaitForGreenStatus().execute().actionGet().isTimedOut(),\n            equalTo(false));\n    }\n","date":"2020-05-07 08:20:26","endLine":96,"groupId":"24440","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testShardsAllocatedAfterDataNodesStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/2274f2dbcc7f0439129bb5fc668421f7d7d51c.src","preCode":"    public void testShardsAllocatedAfterDataNodesStart() {\n        internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false).build());\n        client().admin().indices().create(createIndexRequest(\"test\")\n            .settings(Settings.builder().put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)).waitForActiveShards(ActiveShardCount.NONE))\n            .actionGet();\n        final ClusterHealthResponse healthResponse1 = client().admin().cluster().prepareHealth()\n            .setWaitForEvents(Priority.LANGUID).execute().actionGet();\n        assertThat(healthResponse1.isTimedOut(), equalTo(false));\n        assertThat(healthResponse1.getStatus(), equalTo(ClusterHealthStatus.RED));\n        assertThat(healthResponse1.getActiveShards(), equalTo(0));\n\n        internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), true).build());\n\n        assertThat(client().admin().cluster().prepareHealth()\n            .setWaitForEvents(Priority.LANGUID).setWaitForNodes(\"2\").setWaitForGreenStatus().execute().actionGet().isTimedOut(),\n            equalTo(false));\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/cluster/SimpleDataNodesIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"},{"authorDate":"2020-05-07 08:20:26","commitOrder":1,"curCode":"    public void testAutoExpandReplicasAdjustedWhenDataNodeJoins() {\n        internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false).build());\n        client().admin().indices().create(createIndexRequest(\"test\")\n            .settings(Settings.builder().put(IndexMetadata.SETTING_AUTO_EXPAND_REPLICAS, \"0-all\"))\n            .waitForActiveShards(ActiveShardCount.NONE))\n            .actionGet();\n        final ClusterHealthResponse healthResponse1 = client().admin().cluster().prepareHealth()\n            .setWaitForEvents(Priority.LANGUID).execute().actionGet();\n        assertThat(healthResponse1.isTimedOut(), equalTo(false));\n        assertThat(healthResponse1.getStatus(), equalTo(ClusterHealthStatus.RED));\n        assertThat(healthResponse1.getActiveShards(), equalTo(0));\n\n        internalCluster().startNode();\n        internalCluster().startNode();\n        client().admin().cluster().prepareReroute().setRetryFailed(true).get();\n    }\n","date":"2020-05-07 08:20:26","endLine":113,"groupId":"24441","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoExpandReplicasAdjustedWhenDataNodeJoins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/2274f2dbcc7f0439129bb5fc668421f7d7d51c.src","preCode":"    public void testAutoExpandReplicasAdjustedWhenDataNodeJoins() {\n        internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false).build());\n        client().admin().indices().create(createIndexRequest(\"test\")\n            .settings(Settings.builder().put(IndexMetadata.SETTING_AUTO_EXPAND_REPLICAS, \"0-all\"))\n            .waitForActiveShards(ActiveShardCount.NONE))\n            .actionGet();\n        final ClusterHealthResponse healthResponse1 = client().admin().cluster().prepareHealth()\n            .setWaitForEvents(Priority.LANGUID).execute().actionGet();\n        assertThat(healthResponse1.isTimedOut(), equalTo(false));\n        assertThat(healthResponse1.getStatus(), equalTo(ClusterHealthStatus.RED));\n        assertThat(healthResponse1.getActiveShards(), equalTo(0));\n\n        internalCluster().startNode();\n        internalCluster().startNode();\n        client().admin().cluster().prepareReroute().setRetryFailed(true).get();\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/cluster/SimpleDataNodesIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"}],"commitId":"cabe6a330514f0f80f3b95be8763082b25efce89","commitMessage":"@@@Create plugin for internalClusterTest task (#55896)\n\nThis commit creates a new gradle plugin to provide a separate task name\nand source set for running ESIntegTestCase tests. The only project\nconverted to use the new plugin in this PR is server.  as an example. The\nremaining cases in x-pack will be handled in followups.","date":"2020-05-07 08:20:26","modifiedFileCount":"5","status":"B","submitter":"Ryan Ernst"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":2,"curCode":"    public void testShardsAllocatedAfterDataNodesStart() {\n        internalCluster().startNode(nonDataNode());\n        client().admin().indices().create(createIndexRequest(\"test\")\n            .settings(Settings.builder().put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)).waitForActiveShards(ActiveShardCount.NONE))\n            .actionGet();\n        final ClusterHealthResponse healthResponse1 = client().admin().cluster().prepareHealth()\n            .setWaitForEvents(Priority.LANGUID).execute().actionGet();\n        assertThat(healthResponse1.isTimedOut(), equalTo(false));\n        assertThat(healthResponse1.getStatus(), equalTo(ClusterHealthStatus.RED));\n        assertThat(healthResponse1.getActiveShards(), equalTo(0));\n\n        internalCluster().startNode(dataNode());\n\n        assertThat(client().admin().cluster().prepareHealth()\n            .setWaitForEvents(Priority.LANGUID).setWaitForNodes(\"2\").setWaitForGreenStatus().execute().actionGet().isTimedOut(),\n            equalTo(false));\n    }\n","date":"2020-06-26 22:33:37","endLine":97,"groupId":"106213","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testShardsAllocatedAfterDataNodesStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/de76b58c8df2706cd87fa227919c7b6215f64e.src","preCode":"    public void testShardsAllocatedAfterDataNodesStart() {\n        internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false).build());\n        client().admin().indices().create(createIndexRequest(\"test\")\n            .settings(Settings.builder().put(IndexMetadata.SETTING_NUMBER_OF_REPLICAS, 0)).waitForActiveShards(ActiveShardCount.NONE))\n            .actionGet();\n        final ClusterHealthResponse healthResponse1 = client().admin().cluster().prepareHealth()\n            .setWaitForEvents(Priority.LANGUID).execute().actionGet();\n        assertThat(healthResponse1.isTimedOut(), equalTo(false));\n        assertThat(healthResponse1.getStatus(), equalTo(ClusterHealthStatus.RED));\n        assertThat(healthResponse1.getActiveShards(), equalTo(0));\n\n        internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), true).build());\n\n        assertThat(client().admin().cluster().prepareHealth()\n            .setWaitForEvents(Priority.LANGUID).setWaitForNodes(\"2\").setWaitForGreenStatus().execute().actionGet().isTimedOut(),\n            equalTo(false));\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/cluster/SimpleDataNodesIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2020-06-26 22:33:37","commitOrder":2,"curCode":"    public void testAutoExpandReplicasAdjustedWhenDataNodeJoins() {\n        internalCluster().startNode(nonDataNode());\n        client().admin().indices().create(createIndexRequest(\"test\")\n            .settings(Settings.builder().put(IndexMetadata.SETTING_AUTO_EXPAND_REPLICAS, \"0-all\"))\n            .waitForActiveShards(ActiveShardCount.NONE))\n            .actionGet();\n        final ClusterHealthResponse healthResponse1 = client().admin().cluster().prepareHealth()\n            .setWaitForEvents(Priority.LANGUID).execute().actionGet();\n        assertThat(healthResponse1.isTimedOut(), equalTo(false));\n        assertThat(healthResponse1.getStatus(), equalTo(ClusterHealthStatus.RED));\n        assertThat(healthResponse1.getActiveShards(), equalTo(0));\n\n        internalCluster().startNode();\n        internalCluster().startNode();\n        client().admin().cluster().prepareReroute().setRetryFailed(true).get();\n    }\n","date":"2020-06-26 22:33:37","endLine":114,"groupId":"106213","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoExpandReplicasAdjustedWhenDataNodeJoins","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/de76b58c8df2706cd87fa227919c7b6215f64e.src","preCode":"    public void testAutoExpandReplicasAdjustedWhenDataNodeJoins() {\n        internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false).build());\n        client().admin().indices().create(createIndexRequest(\"test\")\n            .settings(Settings.builder().put(IndexMetadata.SETTING_AUTO_EXPAND_REPLICAS, \"0-all\"))\n            .waitForActiveShards(ActiveShardCount.NONE))\n            .actionGet();\n        final ClusterHealthResponse healthResponse1 = client().admin().cluster().prepareHealth()\n            .setWaitForEvents(Priority.LANGUID).execute().actionGet();\n        assertThat(healthResponse1.isTimedOut(), equalTo(false));\n        assertThat(healthResponse1.getStatus(), equalTo(ClusterHealthStatus.RED));\n        assertThat(healthResponse1.getActiveShards(), equalTo(0));\n\n        internalCluster().startNode();\n        internalCluster().startNode();\n        client().admin().cluster().prepareReroute().setRetryFailed(true).get();\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/cluster/SimpleDataNodesIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"}]
