[{"authorTime":"2018-11-26 20:57:57","codes":[{"authorDate":"2018-11-26 20:57:57","commitOrder":1,"curCode":"    public void testTransportMultiGetAction_withMissingRouting() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiTermVectorsRequestBuilder request = new MultiTermVectorsRequestBuilder(client, MultiTermVectorsAction.INSTANCE);\n        request.add(new TermVectorsRequest(\"index1\", \"type2\", \"1\").routing(\"1\"));\n        request.add(new TermVectorsRequest(\"index1\", \"type2\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiTermVectorsAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiTermVectorsResponse> listener,\n                                              final AtomicArray<MultiTermVectorsItemResponse> responses,\n                                              final Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertThat(responses.get(1).getFailure().getCause(), instanceOf(RoutingMissingException.class));\n                assertThat(responses.get(1).getFailure().getCause().getMessage(),\n                    equalTo(\"routing is required for [index1]/[type2]/[2]\"));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","date":"2018-11-26 20:57:57","endLine":204,"groupId":"34458","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransportMultiGetAction_withMissingRouting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/bae148ef5965ffa13d786723305911367f4684.src","preCode":"    public void testTransportMultiGetAction_withMissingRouting() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiTermVectorsRequestBuilder request = new MultiTermVectorsRequestBuilder(client, MultiTermVectorsAction.INSTANCE);\n        request.add(new TermVectorsRequest(\"index1\", \"type2\", \"1\").routing(\"1\"));\n        request.add(new TermVectorsRequest(\"index1\", \"type2\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiTermVectorsAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiTermVectorsResponse> listener,\n                                              final AtomicArray<MultiTermVectorsItemResponse> responses,\n                                              final Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertThat(responses.get(1).getFailure().getCause(), instanceOf(RoutingMissingException.class));\n                assertThat(responses.get(1).getFailure().getCause().getMessage(),\n                    equalTo(\"routing is required for [index1]/[type2]/[2]\"));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"},{"authorDate":"2018-11-26 20:57:57","commitOrder":1,"curCode":"    public void testTransportMultiGetAction() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE);\n        request.add(new MultiGetRequest.Item(\"index1\", \"type1\", \"1\"));\n        request.add(new MultiGetRequest.Item(\"index1\", \"type1\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiGetAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiGetResponse> listener,\n                                              final AtomicArray<MultiGetItemResponse> responses,\n                                              final Map<ShardId, MultiGetShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertNull(responses.get(1));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","date":"2018-11-26 20:57:57","endLine":175,"groupId":"1322","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransportMultiGetAction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f5/50c038e601698a96102ffd927e0cc2fc86d8cb.src","preCode":"    public void testTransportMultiGetAction() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE);\n        request.add(new MultiGetRequest.Item(\"index1\", \"type1\", \"1\"));\n        request.add(new MultiGetRequest.Item(\"index1\", \"type1\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiGetAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiGetResponse> listener,\n                                              final AtomicArray<MultiGetItemResponse> responses,\n                                              final Map<ShardId, MultiGetShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertNull(responses.get(1));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/get/TransportMultiGetActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"B"}],"commitId":"04ebc63e340301f4d4c92c2475b448a55292a983","commitMessage":"@@@ RoutingMissingException in more like this (#33974)\n\nMore like this query allows to provide identifiers of documents to be retrieved as like/unlike items. \nIt can happen that at retrieval time an error is thrown.  for instance caused by missing routing value when `_routing` is set required in the mapping. \nInstead of ignoring such error and returning no documents for the query.  the error should be re-thrown and returned to users. As part of this \nchange also mget and mtermvectors are unified in the way they throw such exception like it happens in other places.  so that a `RoutingMissingException` is raised.\n\nCloses #29678","date":"2018-11-26 20:57:57","modifiedFileCount":"4","status":"B","submitter":"Christophe Bismuth"},{"authorTime":"2018-12-05 02:22:17","codes":[{"authorDate":"2018-12-05 02:22:17","commitOrder":2,"curCode":"    public void testTransportMultiGetAction_withMissingRouting() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiTermVectorsRequestBuilder request = new MultiTermVectorsRequestBuilder(client, MultiTermVectorsAction.INSTANCE);\n        request.add(new TermVectorsRequest(\"index2\", \"_doc\", \"1\").routing(\"1\"));\n        request.add(new TermVectorsRequest(\"index2\", \"_doc\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiTermVectorsAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiTermVectorsResponse> listener,\n                                              final AtomicArray<MultiTermVectorsItemResponse> responses,\n                                              final Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertThat(responses.get(1).getFailure().getCause(), instanceOf(RoutingMissingException.class));\n                assertThat(responses.get(1).getFailure().getCause().getMessage(),\n                    equalTo(\"routing is required for [index1]/[type2]/[2]\"));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","date":"2018-12-05 02:22:17","endLine":217,"groupId":"34458","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransportMultiGetAction_withMissingRouting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/db/50f752728207410c7f7f6bc6c7b437cb268402.src","preCode":"    public void testTransportMultiGetAction_withMissingRouting() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiTermVectorsRequestBuilder request = new MultiTermVectorsRequestBuilder(client, MultiTermVectorsAction.INSTANCE);\n        request.add(new TermVectorsRequest(\"index1\", \"type2\", \"1\").routing(\"1\"));\n        request.add(new TermVectorsRequest(\"index1\", \"type2\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiTermVectorsAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiTermVectorsResponse> listener,\n                                              final AtomicArray<MultiTermVectorsItemResponse> responses,\n                                              final Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertThat(responses.get(1).getFailure().getCause(), instanceOf(RoutingMissingException.class));\n                assertThat(responses.get(1).getFailure().getCause().getMessage(),\n                    equalTo(\"routing is required for [index1]/[type2]/[2]\"));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"},{"authorDate":"2018-12-05 02:22:17","commitOrder":2,"curCode":"    public void testTransportMultiGetAction() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE);\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"1\"));\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiGetAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiGetResponse> listener,\n                                              final AtomicArray<MultiGetItemResponse> responses,\n                                              final Map<ShardId, MultiGetShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertNull(responses.get(1));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","date":"2018-12-05 02:22:17","endLine":188,"groupId":"1322","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransportMultiGetAction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/28724a80edd92dba8e35d0396bea38604cf530.src","preCode":"    public void testTransportMultiGetAction() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE);\n        request.add(new MultiGetRequest.Item(\"index1\", \"type1\", \"1\"));\n        request.add(new MultiGetRequest.Item(\"index1\", \"type1\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiGetAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiGetResponse> listener,\n                                              final AtomicArray<MultiGetItemResponse> responses,\n                                              final Map<ShardId, MultiGetShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertNull(responses.get(1));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/get/TransportMultiGetActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"d24b40f688935dc3c81f968b5d8a93b9905f1039","commitMessage":"@@@Make typeless APIs usable with indices whose type name is different from `_doc` (#35790)\n\nThis commit makes `document`.  `update`.  `explain`.  `termvectors` and `mapping`\ntypeless APIs work on indices that have a type whose name is not `_doc`.\nUnfortunately.  this needs to be a bit of a hack since I didn't want calls with\nrandom type names to see documents with the type name that the user had chosen\nupon type creation.\n\nThe `explain` and `termvectors` do not support being called without a type for\nnow so the test is just using `_doc` as a type for now.  we will need to fix\ntests later but this shouldn't require further changes server-side since passing\n`_doc` as a type name is what typeless APIs do internally anyway.\n\nRelates #35190","date":"2018-12-05 02:22:17","modifiedFileCount":"26","status":"M","submitter":"Adrien Grand"},{"authorTime":"2018-12-05 02:22:17","codes":[{"authorDate":"2019-06-05 16:32:48","commitOrder":3,"curCode":"    public void testTransportMultiGetAction_withMissingRouting() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiTermVectorsRequestBuilder request = new MultiTermVectorsRequestBuilder(client, MultiTermVectorsAction.INSTANCE);\n        request.add(new TermVectorsRequest(\"index2\", \"1\").routing(\"1\"));\n        request.add(new TermVectorsRequest(\"index2\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiTermVectorsAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiTermVectorsResponse> listener,\n                                              final AtomicArray<MultiTermVectorsItemResponse> responses,\n                                              final Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertThat(responses.get(1).getFailure().getCause(), instanceOf(RoutingMissingException.class));\n                assertThat(responses.get(1).getFailure().getCause().getMessage(),\n                    equalTo(\"routing is required for [index1]/[type2]/[2]\"));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","date":"2019-06-05 16:32:48","endLine":217,"groupId":"34458","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransportMultiGetAction_withMissingRouting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/35/e0de175b2face8122fe384e41c6ce1bea75df4.src","preCode":"    public void testTransportMultiGetAction_withMissingRouting() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiTermVectorsRequestBuilder request = new MultiTermVectorsRequestBuilder(client, MultiTermVectorsAction.INSTANCE);\n        request.add(new TermVectorsRequest(\"index2\", \"_doc\", \"1\").routing(\"1\"));\n        request.add(new TermVectorsRequest(\"index2\", \"_doc\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiTermVectorsAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiTermVectorsResponse> listener,\n                                              final AtomicArray<MultiTermVectorsItemResponse> responses,\n                                              final Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertThat(responses.get(1).getFailure().getCause(), instanceOf(RoutingMissingException.class));\n                assertThat(responses.get(1).getFailure().getCause().getMessage(),\n                    equalTo(\"routing is required for [index1]/[type2]/[2]\"));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"},{"authorDate":"2018-12-05 02:22:17","commitOrder":3,"curCode":"    public void testTransportMultiGetAction() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE);\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"1\"));\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiGetAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiGetResponse> listener,\n                                              final AtomicArray<MultiGetItemResponse> responses,\n                                              final Map<ShardId, MultiGetShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertNull(responses.get(1));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","date":"2018-12-05 02:22:17","endLine":188,"groupId":"1322","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransportMultiGetAction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/28724a80edd92dba8e35d0396bea38604cf530.src","preCode":"    public void testTransportMultiGetAction() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE);\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"1\"));\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiGetAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiGetResponse> listener,\n                                              final AtomicArray<MultiGetItemResponse> responses,\n                                              final Map<ShardId, MultiGetShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertNull(responses.get(1));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/get/TransportMultiGetActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"N"}],"commitId":"795fa816d9373114b5c1ae94de5608b3801a11f6","commitMessage":"@@@Removes type from TermVectors APIs (#42198)\n\n","date":"2019-06-05 16:32:48","modifiedFileCount":"39","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2019-06-28 23:45:57","codes":[{"authorDate":"2019-06-28 23:45:57","commitOrder":4,"curCode":"    public void testTransportMultiGetAction_withMissingRouting() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiTermVectorsRequestBuilder request = new MultiTermVectorsRequestBuilder(client, MultiTermVectorsAction.INSTANCE);\n        request.add(new TermVectorsRequest(\"index2\", \"1\").routing(\"1\"));\n        request.add(new TermVectorsRequest(\"index2\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiTermVectorsAction(transportService, clusterService, client,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiTermVectorsResponse> listener,\n                                              final AtomicArray<MultiTermVectorsItemResponse> responses,\n                                              final Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertThat(responses.get(1).getFailure().getCause(), instanceOf(RoutingMissingException.class));\n                assertThat(responses.get(1).getFailure().getCause().getMessage(),\n                    equalTo(\"routing is required for [index1]/[type2]/[2]\"));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","date":"2019-06-28 23:45:57","endLine":217,"groupId":"43011","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransportMultiGetAction_withMissingRouting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/a24123b4796a42f7676241339b511750d72291.src","preCode":"    public void testTransportMultiGetAction_withMissingRouting() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiTermVectorsRequestBuilder request = new MultiTermVectorsRequestBuilder(client, MultiTermVectorsAction.INSTANCE);\n        request.add(new TermVectorsRequest(\"index2\", \"1\").routing(\"1\"));\n        request.add(new TermVectorsRequest(\"index2\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiTermVectorsAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiTermVectorsResponse> listener,\n                                              final AtomicArray<MultiTermVectorsItemResponse> responses,\n                                              final Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertThat(responses.get(1).getFailure().getCause(), instanceOf(RoutingMissingException.class));\n                assertThat(responses.get(1).getFailure().getCause().getMessage(),\n                    equalTo(\"routing is required for [index1]/[type2]/[2]\"));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"},{"authorDate":"2019-06-28 23:45:57","commitOrder":4,"curCode":"    public void testTransportMultiGetAction() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE);\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"1\"));\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiGetAction(transportService, clusterService, client,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiGetResponse> listener,\n                                              final AtomicArray<MultiGetItemResponse> responses,\n                                              final Map<ShardId, MultiGetShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertNull(responses.get(1));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","date":"2019-06-28 23:45:57","endLine":188,"groupId":"1322","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransportMultiGetAction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/69/a65a361f901f973f03bdaf7839f5e9192c4fa1.src","preCode":"    public void testTransportMultiGetAction() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE);\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"1\"));\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiGetAction(transportService, clusterService, shardAction,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiGetResponse> listener,\n                                              final AtomicArray<MultiGetItemResponse> responses,\n                                              final Map<ShardId, MultiGetShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertNull(responses.get(1));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/get/TransportMultiGetActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"1f3a45cfac90b938388c821be39639982832af9f","commitMessage":"@@@Convert some action.execute cases to using NodeClient (#43715)\n\nThere are several cases where execute is called on actions directly. \nmostly within other action implementations. Now that transport client is\ngone.  these internal actions can be registered just like normal actions. \nand called with the NodeClient to execute locally on the same node. This\ncommit converts a few of these cases for shard level actions to use this\napproach.\n","date":"2019-06-28 23:45:57","modifiedFileCount":"19","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2019-07-12 04:53:46","codes":[{"authorDate":"2019-07-12 04:53:46","commitOrder":5,"curCode":"    public void testTransportMultiGetAction_withMissingRouting() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiTermVectorsRequestBuilder request = new MultiTermVectorsRequestBuilder(client, MultiTermVectorsAction.INSTANCE);\n        request.add(new TermVectorsRequest(\"index2\", \"1\").routing(\"1\"));\n        request.add(new TermVectorsRequest(\"index2\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiTermVectorsAction(transportService, clusterService, client,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiTermVectorsResponse> listener,\n                                              final AtomicArray<MultiTermVectorsItemResponse> responses,\n                                              final Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertThat(responses.get(1).getFailure().getCause(), instanceOf(RoutingMissingException.class));\n                assertThat(responses.get(1).getFailure().getCause().getMessage(),\n                    equalTo(\"routing is required for [index1]/[type2]/[2]\"));\n            }\n        };\n\n        ActionTestUtils.execute(transportAction, task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","date":"2019-07-12 04:53:46","endLine":218,"groupId":"43011","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransportMultiGetAction_withMissingRouting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/85/41da4eb43d4744857fb51a9e2cb59ad771f1e1.src","preCode":"    public void testTransportMultiGetAction_withMissingRouting() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiTermVectorsRequestBuilder request = new MultiTermVectorsRequestBuilder(client, MultiTermVectorsAction.INSTANCE);\n        request.add(new TermVectorsRequest(\"index2\", \"1\").routing(\"1\"));\n        request.add(new TermVectorsRequest(\"index2\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiTermVectorsAction(transportService, clusterService, client,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiTermVectorsResponse> listener,\n                                              final AtomicArray<MultiTermVectorsItemResponse> responses,\n                                              final Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertThat(responses.get(1).getFailure().getCause(), instanceOf(RoutingMissingException.class));\n                assertThat(responses.get(1).getFailure().getCause().getMessage(),\n                    equalTo(\"routing is required for [index1]/[type2]/[2]\"));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"},{"authorDate":"2019-07-12 04:53:46","commitOrder":5,"curCode":"    public void testTransportMultiGetAction() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE);\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"1\"));\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiGetAction(transportService, clusterService, client,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiGetResponse> listener,\n                                              final AtomicArray<MultiGetItemResponse> responses,\n                                              final Map<ShardId, MultiGetShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertNull(responses.get(1));\n            }\n        };\n\n        ActionTestUtils.execute(transportAction, task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","date":"2019-07-12 04:53:46","endLine":189,"groupId":"1322","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransportMultiGetAction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/4880fa1bf397a881c4feb566acdc3f1f93b6ea.src","preCode":"    public void testTransportMultiGetAction() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE);\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"1\"));\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiGetAction(transportService, clusterService, client,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiGetResponse> listener,\n                                              final AtomicArray<MultiGetItemResponse> responses,\n                                              final Map<ShardId, MultiGetShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertNull(responses.get(1));\n            }\n        };\n\n        transportAction.execute(task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/get/TransportMultiGetActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"f7d06eea557cc5bb0f5a56c4ec0716bd58ef7bca","commitMessage":"@@@Remove most direct test calls to TransportAction.execute (#44241)\n\nThere are currently 3 variants of TransportAction.execute. The\nimplementations of these require additional ctor arguments to all\nTransportAction implementations. While the non test uses can be\nconverted to using NodeClient to execute other actions.  using that for\ntest cases would be cumbersome and defeat the purpose of unit tests\ntesting an action's implementation directly. This commit adds a public\ntest-only utility method for test to use to call execute. This method\nwill continue to be available when the execute implementations are\ncollapsed and made package private.\n\nrelates #43881","date":"2019-07-12 04:53:46","modifiedFileCount":"12","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2019-09-20 21:22:57","codes":[{"authorDate":"2019-07-12 04:53:46","commitOrder":6,"curCode":"    public void testTransportMultiGetAction_withMissingRouting() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiTermVectorsRequestBuilder request = new MultiTermVectorsRequestBuilder(client, MultiTermVectorsAction.INSTANCE);\n        request.add(new TermVectorsRequest(\"index2\", \"1\").routing(\"1\"));\n        request.add(new TermVectorsRequest(\"index2\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiTermVectorsAction(transportService, clusterService, client,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiTermVectorsResponse> listener,\n                                              final AtomicArray<MultiTermVectorsItemResponse> responses,\n                                              final Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertThat(responses.get(1).getFailure().getCause(), instanceOf(RoutingMissingException.class));\n                assertThat(responses.get(1).getFailure().getCause().getMessage(),\n                    equalTo(\"routing is required for [index1]/[type2]/[2]\"));\n            }\n        };\n\n        ActionTestUtils.execute(transportAction, task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","date":"2019-07-12 04:53:46","endLine":218,"groupId":"106033","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransportMultiGetAction_withMissingRouting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/85/41da4eb43d4744857fb51a9e2cb59ad771f1e1.src","preCode":"    public void testTransportMultiGetAction_withMissingRouting() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiTermVectorsRequestBuilder request = new MultiTermVectorsRequestBuilder(client, MultiTermVectorsAction.INSTANCE);\n        request.add(new TermVectorsRequest(\"index2\", \"1\").routing(\"1\"));\n        request.add(new TermVectorsRequest(\"index2\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiTermVectorsAction(transportService, clusterService, client,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiTermVectorsResponse> listener,\n                                              final AtomicArray<MultiTermVectorsItemResponse> responses,\n                                              final Map<ShardId, MultiTermVectorsShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertThat(responses.get(1).getFailure().getCause(), instanceOf(RoutingMissingException.class));\n                assertThat(responses.get(1).getFailure().getCause().getMessage(),\n                    equalTo(\"routing is required for [index1]/[type2]/[2]\"));\n            }\n        };\n\n        ActionTestUtils.execute(transportAction, task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/termvectors/TransportMultiTermVectorsActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"N"},{"authorDate":"2019-09-20 21:22:57","commitOrder":6,"curCode":"    public void testTransportMultiGetAction() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE);\n        request.add(new MultiGetRequest.Item(\"index1\", \"1\"));\n        request.add(new MultiGetRequest.Item(\"index1\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiGetAction(transportService, clusterService, client,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiGetResponse> listener,\n                                              final AtomicArray<MultiGetItemResponse> responses,\n                                              final Map<ShardId, MultiGetShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertNull(responses.get(1));\n            }\n        };\n\n        ActionTestUtils.execute(transportAction, task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","date":"2019-09-20 21:22:57","endLine":189,"groupId":"106033","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransportMultiGetAction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/57/6766df044bb938a77ca74ac82d4e1e8f3e6651.src","preCode":"    public void testTransportMultiGetAction() {\n        final Task task = createTask();\n        final NodeClient client = new NodeClient(Settings.EMPTY, threadPool);\n        final MultiGetRequestBuilder request = new MultiGetRequestBuilder(client, MultiGetAction.INSTANCE);\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"1\"));\n        request.add(new MultiGetRequest.Item(\"index1\", \"_doc\", \"2\"));\n\n        final AtomicBoolean shardActionInvoked = new AtomicBoolean(false);\n        transportAction = new TransportMultiGetAction(transportService, clusterService, client,\n            new ActionFilters(emptySet()), new Resolver()) {\n            @Override\n            protected void executeShardAction(final ActionListener<MultiGetResponse> listener,\n                                              final AtomicArray<MultiGetItemResponse> responses,\n                                              final Map<ShardId, MultiGetShardRequest> shardRequests) {\n                shardActionInvoked.set(true);\n                assertEquals(2, responses.length());\n                assertNull(responses.get(0));\n                assertNull(responses.get(1));\n            }\n        };\n\n        ActionTestUtils.execute(transportAction, task, request.request(), new ActionListenerAdapter());\n        assertTrue(shardActionInvoked.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/get/TransportMultiGetActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"7c90801aff398d9b73e4fa24933550d2320a5a4d","commitMessage":"@@@Remove types from Get/MultiGet (#46587)\n\nThis commit removes types from the ShardGetService.  and propagates this API change\nup through the Transport and Rest actions for Get and MultiGet\n\nRelates to #41059","date":"2019-09-20 21:22:57","modifiedFileCount":"136","status":"M","submitter":"Alan Woodward"}]
