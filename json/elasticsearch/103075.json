[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"index\", false);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","date":"2018-04-26 03:22:53","endLine":166,"groupId":"67853","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotIndexed","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/54/418850e5d4f3663b649cd3295607537a045f11.src","preCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"index\", false);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    protected void doTestStore(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"store\", true);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","date":"2018-04-26 03:22:53","endLine":230,"groupId":"67853","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestStore","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/54/418850e5d4f3663b649cd3295607537a045f11.src","preCode":"    protected void doTestStore(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"store\", true);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-11-06 18:55:23","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"index\", false);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","date":"2018-04-26 03:22:53","endLine":166,"groupId":"67853","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotIndexed","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/54/418850e5d4f3663b649cd3295607537a045f11.src","preCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"index\", false);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"N"},{"authorDate":"2018-11-06 18:55:23","commitOrder":2,"curCode":"    protected void doTestStore(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"store\", true);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointIndexDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","date":"2018-11-06 18:55:23","endLine":230,"groupId":"67853","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestStore","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/8b0b58af813f4a11091574927dfe8b77756f94.src","preCode":"    protected void doTestStore(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"store\", true);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"a5e1f4d3a2b6f03f5b6268555ebb4271ea3c153b","commitMessage":"@@@Upgrade to lucene-8.0.0-snapshot-31d7dfe6b1 (#35224)\n\n\n","date":"2018-11-06 18:55:23","modifiedFileCount":"30","status":"M","submitter":"Nick Knize"},{"authorTime":"2018-12-25 03:06:50","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":3,"curCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"index\", false);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","date":"2018-12-25 03:06:50","endLine":166,"groupId":"67853","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotIndexed","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fc/b78f66add5e97f7d9f47d739ce96b55ca6fe9f.src","preCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"index\", false);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2018-12-25 03:06:50","commitOrder":3,"curCode":"    protected void doTestStore(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"store\", true);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointIndexDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","date":"2018-12-25 03:06:50","endLine":230,"groupId":"67853","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestStore","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fc/b78f66add5e97f7d9f47d739ce96b55ca6fe9f.src","preCode":"    protected void doTestStore(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"store\", true);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointIndexDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"7580d9d925d864b25466d693637b3bd3092d44cf","commitMessage":"@@@Make SourceToParse immutable (#36971)\n\nToday the routing of a SourceToParse is assigned in a separate step\nafter the object is created. We can easily forget to set the routing.\nWith this commit.  the routing must be provided in the constructor of\nSourceToParse.\n\nRelates #36921","date":"2018-12-25 03:06:50","modifiedFileCount":"66","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"index\", false);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","date":"2019-10-15 16:05:29","endLine":166,"groupId":"67853","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotIndexed","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/13988e1919711c8ede73c8b29211823955578b.src","preCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"index\", false);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    protected void doTestStore(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"store\", true);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointIndexDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","date":"2019-10-15 16:05:29","endLine":230,"groupId":"67853","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestStore","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/13988e1919711c8ede73c8b29211823955578b.src","preCode":"    protected void doTestStore(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"store\", true);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointIndexDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-14 23:15:19","codes":[{"authorDate":"2020-01-14 23:15:19","commitOrder":5,"curCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"index\", false);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","date":"2020-01-14 23:15:19","endLine":166,"groupId":"67853","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotIndexed","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/8b7c37942808509766c92644ca54f04273a4c0.src","preCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"index\", false);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2020-01-14 23:15:19","commitOrder":5,"curCode":"    protected void doTestStore(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"store\", true);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointIndexDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","date":"2020-01-14 23:15:19","endLine":230,"groupId":"67853","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestStore","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/8b7c37942808509766c92644ca54f04273a4c0.src","preCode":"    protected void doTestStore(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"store\", true);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointIndexDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"774bfb5e22389a923678ed8013e8cd284703d5dd","commitMessage":"@@@Don't use user-supplied type when building DocumentMapper (#50960)\n\nThis commit begins the process of removing types from the document parsing\ninfrastructure. Initially.  we just ignore the user-supplied type after it has been\nremoved from the mapping json structure.  and always supply _doc as the name\nof the root parser.\n\nThe production code change is very small here.  and most of the changeset\nconsists of alterations to Mapper test code that was passing in non-standard\ntype names and checking serialization.\n\nRelates to #41059","date":"2020-01-14 23:15:19","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-20 19:14:49","codes":[{"authorDate":"2020-01-20 19:14:49","commitOrder":6,"curCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"index\", false);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","date":"2020-01-20 19:14:49","endLine":166,"groupId":"67853","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotIndexed","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/13988e1919711c8ede73c8b29211823955578b.src","preCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"index\", false);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2020-01-20 19:14:49","commitOrder":6,"curCode":"    protected void doTestStore(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"store\", true);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointIndexDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","date":"2020-01-20 19:14:49","endLine":230,"groupId":"67853","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestStore","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/13988e1919711c8ede73c8b29211823955578b.src","preCode":"    protected void doTestStore(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"store\", true);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointIndexDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"3d796248437e06dc90c15077702b67851bcb63a8","commitMessage":"@@@Revert \"Don't use user-supplied type when building DocumentMapper (#50960)\" (#51214)\n\nReverts #50960\n\nThis commit has been causing test failures during upgrade tests: specifically.  an upgraded\nnode becomes master and sends a cluster state update to a 7.x node; this node sees that the\nmapping version of its .tasks index is the same as the master.  so asserts that the serialized\nmappings are the same; however.  because the master has rewritten the mapping to use\n_docinstead oftasks`.  we get an assertion failure. The logical fix is for the master to\nincrement its mapping version when it rewrites the mapping.  but there isn't a simple way to\ndo that currently.\n\nThis reverts commit 774bfb5e22389a923678ed8013e8cd284703d5dd.","date":"2020-01-20 19:14:49","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-08-25 01:10:47","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":7,"curCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        DocumentMapper mapper = createDocumentMapper(rangeFieldMapping(type, b -> b.field(\"index\", false)));\n        ParsedDocument doc = mapper.parse(\n            source(b -> b.startObject(\"field\").field(getFromField(), getFrom(type)).field(getToField(), getTo(type)).endObject())\n        );\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","date":"2020-08-25 01:10:47","endLine":152,"groupId":"103075","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotIndexed","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a4/6a340ac725d3042b0ff4acff8a389e97e01e63.src","preCode":"    protected void doTestNotIndexed(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"index\", false);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2020-08-25 01:10:47","commitOrder":7,"curCode":"    protected void doTestStore(String type) throws Exception {\n        DocumentMapper mapper = createDocumentMapper(rangeFieldMapping(type, b -> b.field(\"store\", true)));\n        ParsedDocument doc = mapper.parse(\n            source(b -> b.startObject(\"field\").field(getFromField(), getFrom(type)).field(getToField(), getTo(type)).endObject())\n        );\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointIndexDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","date":"2020-08-25 01:10:47","endLine":188,"groupId":"103075","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestStore","params":"(Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a4/6a340ac725d3042b0ff4acff8a389e97e01e63.src","preCode":"    protected void doTestStore(String type) throws Exception {\n        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", type).field(\"store\", true);\n        if (type.equals(\"date_range\")) {\n            mapping = mapping.field(\"format\", DATE_FORMAT);\n        }\n        mapping = mapping.endObject().endObject().endObject().endObject();\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(Strings.toString(mapping)));\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference.bytes(XContentFactory.jsonBuilder()\n            .startObject()\n            .startObject(\"field\")\n            .field(getFromField(), getFrom(type))\n            .field(getToField(), getTo(type))\n            .endObject()\n            .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(3, fields.length);\n        IndexableField dvField = fields[0];\n        assertEquals(DocValuesType.BINARY, dvField.fieldType().docValuesType());\n        IndexableField pointField = fields[1];\n        assertEquals(2, pointField.fieldType().pointIndexDimensionCount());\n        IndexableField storedField = fields[2];\n        assertTrue(storedField.fieldType().stored());\n        String strVal = \"5\";\n        if (type.equals(\"date_range\")) {\n            strVal = \"1477872000000\";\n        } else if (type.equals(\"ip_range\")) {\n            strVal = InetAddresses.toAddrString(InetAddresses.forString(\"192.168.1.7\")) + \" : \"\n                + InetAddresses.toAddrString(InetAddresses.forString(\"2001:db8:0:0:0:0:0:0\"));\n        }\n        assertThat(storedField.stringValue(), containsString(strVal));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RangeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"e2dd0bde26e6c1f9f1a5137a5bf432d348e4205e","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-25 01:10:47","modifiedFileCount":"48","status":"M","submitter":"Nik Everett"}]
