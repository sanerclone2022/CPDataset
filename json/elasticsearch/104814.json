[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                    NESTED_OBJECT);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                    .field(VALUE_FIELD_NAME);\n                nestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                    NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                    new MatchAllDocsQuery(), nestedBuilder, fieldType);\n\n                assertEquals(NESTED_AGG, nested.getName());\n                assertEquals(0, nested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                    ((InternalAggregation)nested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":115,"groupId":"22852","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/a44a1d89badd60d0cf9ade76862902856f172f.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                    NESTED_OBJECT);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                    .field(VALUE_FIELD_NAME);\n                nestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                    NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                    new MatchAllDocsQuery(), nestedBuilder, fieldType);\n\n                assertEquals(NESTED_AGG, nested.getName());\n                assertEquals(0, nested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                    ((InternalAggregation)nested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":85,"groupId":"46424","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/d6c6bd6e45be7aebabd3dd3e3780fb665683d7.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2019-01-23 01:38:55","commitOrder":2,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                    NESTED_OBJECT);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                    .field(VALUE_FIELD_NAME);\n                nestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                    NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                InternalNested nested = search(newSearcher(indexReader, false, true),\n                    new MatchAllDocsQuery(), nestedBuilder, fieldType);\n\n                assertEquals(NESTED_AGG, nested.getName());\n                assertEquals(0, nested.getDocCount());\n\n                InternalMax max = (InternalMax) nested.getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n                assertFalse(AggregationInspectionHelper.hasValue(nested));\n            }\n        }\n    }\n","date":"2019-01-23 01:38:55","endLine":131,"groupId":"22852","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1e/ef8de86b304b0bb2eb8f2486221794e3b64189.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                    NESTED_OBJECT);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                    .field(VALUE_FIELD_NAME);\n                nestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                    NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                    new MatchAllDocsQuery(), nestedBuilder, fieldType);\n\n                assertEquals(NESTED_AGG, nested.getName());\n                assertEquals(0, nested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                    ((InternalAggregation)nested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":85,"groupId":"46424","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/d6c6bd6e45be7aebabd3dd3e3780fb665683d7.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"}],"commitId":"2ba9e361aba7df6e9c0b5fa8fae3d219d50ddf09","commitMessage":"@@@Add helper classes to determine if aggs have a value (#36020)\n\nThis adds a set of helper classes to determine if an agg \"has a value\". \nThis is needed because InternalAggs represent \"empty\" in different \nmanners according to convention. Some use `NaN`.  `+/- Inf`.  `0.0`.  etc.\n\nA user can pass the Internal agg type to one of these helper methods\nand it will report if the agg contains a value or not.  which allows the\nuser to differentiate \"empty\" from a real `NaN`.\n\nThese helpers are best-effort in some cases.  For example.  several\npipeline aggs share a single return class but use different conventions\nto mark \"empty\".  so the helper uses the loosest definition that applies\nto all the aggs that use the class.\n\nSums in particular are unreliable.  The InternalSum simply returns 0.0\nif the agg is empty (which is correct.  no values == sum of zero).  But this\nalso means the helper cannot differentiate from \"empty\" and `+1 + -1`.","date":"2019-01-23 01:38:55","modifiedFileCount":"45","status":"M","submitter":"Zachary Tong"},{"authorTime":"2020-05-09 03:39:49","codes":[{"authorDate":"2020-05-09 03:39:49","commitOrder":3,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                    NESTED_OBJECT);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                    .field(VALUE_FIELD_NAME);\n                nestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                    NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                InternalNested nested = search(newSearcher(indexReader, false, true),\n                    new MatchAllDocsQuery(), nestedBuilder, fieldType);\n\n                assertEquals(NESTED_AGG, nested.getName());\n                assertEquals(0, nested.getDocCount());\n\n                InternalMax max = (InternalMax) nested.getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n                assertFalse(AggregationInspectionHelper.hasValue(nested));\n            }\n        }\n    }\n","date":"2020-05-09 03:39:49","endLine":170,"groupId":"22852","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8f/485509778f7d21a76a48dc69f5015b0e2cb75c.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                    NESTED_OBJECT);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                    .field(VALUE_FIELD_NAME);\n                nestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                    NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                InternalNested nested = search(newSearcher(indexReader, false, true),\n                    new MatchAllDocsQuery(), nestedBuilder, fieldType);\n\n                assertEquals(NESTED_AGG, nested.getName());\n                assertEquals(0, nested.getDocCount());\n\n                InternalMax max = (InternalMax) nested.getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n                assertFalse(AggregationInspectionHelper.hasValue(nested));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2020-05-09 03:39:49","commitOrder":3,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2020-05-09 03:39:49","endLine":118,"groupId":"46424","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/55db28a916ee4220759eb41eba5cf13eb06ca8.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"0d7320499d77e57e16b1789b9d1e91e42f4638c9","commitMessage":"@@@Save memory when numeric terms agg is not top (#55873)\n\nRight now all implementations of the `terms` agg allocate a new\n`Aggregator` per bucket. This uses a bunch of memory. Exactly how much\nisn't clear but each `Aggregator` ends up making its own objects to read\ndoc values which have non-trivial buffers. And it forces all of it\nsub-aggregations to do the same. We allocate a new `Aggregator` per\nbucket for two reasons:\n\n1. We didn't have an appropriate data structure to track the\n   sub-ordinals of each parent bucket.\n2. You can only make a single call to `runDeferredCollections(long...)`\n   per `Aggregator` which was the only way to delay collection of\n   sub-aggregations.\n\nThis change switches the method that builds aggregation results from\nbuilding them one at a time to building all of the results for the\nentire aggregator at the same time.\n\nIt also adds a fairly simplistic data structure to track the sub-ordinals\nfor `long`-keyed buckets.\n\nIt uses both of those to power numeric `terms` aggregations and removes\nthe per-bucket allocation of their `Aggregator`. This fairly\nsubstantially reduces memory consumption of numeric `terms` aggregations\nthat are not the \"top level\".  especially when those aggregations contain\nmany sub-aggregations. It also is a pretty big speed up.  especially when\nthe aggregation is under a non-selective aggregation like\nthe `date_histogram`.\n\nI picked numeric `terms` aggregations because those have the simplest\nimplementation. At least.  I could kind of fit it in my head. And I\nhaven't fully understood the \"bytes\"-based terms aggregations.  but I\nimagine I'll be able to make similar optimizations to them in follow up\nchanges.\n","date":"2020-05-09 03:39:49","modifiedFileCount":"62","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                    NESTED_OBJECT);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                    .field(VALUE_FIELD_NAME);\n                nestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(VALUE_FIELD_NAME, NumberFieldMapper.NumberType.LONG);\n\n                InternalNested nested = search(newSearcher(indexReader, false, true),\n                    new MatchAllDocsQuery(), nestedBuilder, fieldType);\n\n                assertEquals(NESTED_AGG, nested.getName());\n                assertEquals(0, nested.getDocCount());\n\n                InternalMax max = (InternalMax) nested.getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n                assertFalse(AggregationInspectionHelper.hasValue(nested));\n            }\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":168,"groupId":"33433","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/9184ae7230b579e812d711701e81551c72d600.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                    NESTED_OBJECT);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                    .field(VALUE_FIELD_NAME);\n                nestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                    NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                InternalNested nested = search(newSearcher(indexReader, false, true),\n                    new MatchAllDocsQuery(), nestedBuilder, fieldType);\n\n                assertEquals(NESTED_AGG, nested.getName());\n                assertEquals(0, nested.getDocCount());\n\n                InternalMax max = (InternalMax) nested.getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n                assertFalse(AggregationInspectionHelper.hasValue(nested));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(VALUE_FIELD_NAME, NumberFieldMapper.NumberType.LONG);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":116,"groupId":"59677","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/36fcf129fc7ff8d9d1886935d2b1fa6ab37066.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-08-07 05:14:20","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":5,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                    NESTED_OBJECT);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                    .field(VALUE_FIELD_NAME);\n                nestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(VALUE_FIELD_NAME, NumberFieldMapper.NumberType.LONG);\n\n                InternalNested nested = searchAndReduce(newSearcher(indexReader, false, true),\n                    new MatchAllDocsQuery(), nestedBuilder, fieldType);\n\n                assertEquals(NESTED_AGG, nested.getName());\n                assertEquals(0, nested.getDocCount());\n\n                InternalMax max = (InternalMax) nested.getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n                assertFalse(AggregationInspectionHelper.hasValue(nested));\n            }\n        }\n    }\n","date":"2020-08-07 05:14:20","endLine":166,"groupId":"104814","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/07/8450445f546d232dbf12f0224b849ffaab5af2.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                    NESTED_OBJECT);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                    .field(VALUE_FIELD_NAME);\n                nestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(VALUE_FIELD_NAME, NumberFieldMapper.NumberType.LONG);\n\n                InternalNested nested = search(newSearcher(indexReader, false, true),\n                    new MatchAllDocsQuery(), nestedBuilder, fieldType);\n\n                assertEquals(NESTED_AGG, nested.getName());\n                assertEquals(0, nested.getDocCount());\n\n                InternalMax max = (InternalMax) nested.getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n                assertFalse(AggregationInspectionHelper.hasValue(nested));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2020-08-07 05:14:20","commitOrder":5,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(VALUE_FIELD_NAME, NumberFieldMapper.NumberType.LONG);\n\n                Nested nested = searchAndReduce(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2020-08-07 05:14:20","endLine":114,"groupId":"104814","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/db/cfa73d895b8615586cc847232f774b774611b1.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(VALUE_FIELD_NAME, NumberFieldMapper.NumberType.LONG);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"5e3ea6eb11c68bdcc9adda51715a6e1fea9186d6","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-07 05:14:20","modifiedFileCount":"73","status":"M","submitter":"Nik Everett"}]
