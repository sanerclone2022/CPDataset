[{"authorTime":"2020-05-14 03:59:35","codes":[{"authorDate":"2020-05-14 03:59:35","commitOrder":1,"curCode":"    public void testSignificance() throws IOException {\n        TextFieldType textFieldType = new TextFieldType();\n        textFieldType.setName(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"text\");\n            sigAgg.executionHint(randomExecutionHint());\n            if (randomBoolean()) {\n                \r\n                sigAgg.backgroundFilter(QueryBuilders.termsQuery(\"text\",  \"common\"));\n            }\n\n            SignificantTermsAggregationBuilder sigNumAgg = new SignificantTermsAggregationBuilder(\"sig_number\").field(\"long_field\");\n            sigNumAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n\n                \r\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"even\")), sigAgg, textFieldType);\n\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                sigAgg.includeExclude(new IncludeExclude(\"o.d\", null));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                String oddStrings[] = new String[] {\"odd\", \"weird\"};\n                String evenStrings[] = new String[] {\"even\", \"regular\"};\n\n                sigAgg.includeExclude(new IncludeExclude(oddStrings, evenStrings));\n                sigAgg.significanceHeuristic(SignificanceHeuristicTests.getRandomSignificanceheuristic());\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n                sigAgg.includeExclude(new IncludeExclude(evenStrings, oddStrings));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n            }\n        }\n    }\n","date":"2020-05-14 03:59:35","endLine":190,"groupId":"34541","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSignificance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8d/e4bef64dd7d56a5449f096dbbd6220db80be2a.src","preCode":"    public void testSignificance() throws IOException {\n        TextFieldType textFieldType = new TextFieldType();\n        textFieldType.setName(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"text\");\n            sigAgg.executionHint(randomExecutionHint());\n            if (randomBoolean()) {\n                \r\n                sigAgg.backgroundFilter(QueryBuilders.termsQuery(\"text\",  \"common\"));\n            }\n\n            SignificantTermsAggregationBuilder sigNumAgg = new SignificantTermsAggregationBuilder(\"sig_number\").field(\"long_field\");\n            sigNumAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n\n                \r\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"even\")), sigAgg, textFieldType);\n\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                sigAgg.includeExclude(new IncludeExclude(\"o.d\", null));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                String oddStrings[] = new String[] {\"odd\", \"weird\"};\n                String evenStrings[] = new String[] {\"even\", \"regular\"};\n\n                sigAgg.includeExclude(new IncludeExclude(oddStrings, evenStrings));\n                sigAgg.significanceHeuristic(SignificanceHeuristicTests.getRandomSignificanceheuristic());\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n                sigAgg.includeExclude(new IncludeExclude(evenStrings, oddStrings));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"B"},{"authorDate":"2020-05-14 03:59:35","commitOrder":1,"curCode":"    public void testUnmapped() throws IOException {\n        TextFieldType textFieldType = new TextFieldType();\n        textFieldType.setName(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            \r\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"unmapped_field\");\n            sigAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"odd\"));\n\n            }\n        }\n    }\n","date":"2020-05-14 03:59:35","endLine":285,"groupId":"4582","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnmapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8d/e4bef64dd7d56a5449f096dbbd6220db80be2a.src","preCode":"    public void testUnmapped() throws IOException {\n        TextFieldType textFieldType = new TextFieldType();\n        textFieldType.setName(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            \r\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"unmapped_field\");\n            sigAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"odd\"));\n\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"B"}],"commitId":"b84a6ed5e6fc1e057f8c0f4d6758a80b3d2a51fd","commitMessage":"@@@Merge significant_terms into the terms package (#56699)\n\nThis merges the code for the `significant_terms` agg into the package\nfor the code for the `terms` agg. They are *super* entangled already. \nthis mostly just admits that to ourselves.\n\nPrecondition for the terms work in #56487\n\n","date":"2020-05-14 03:59:35","modifiedFileCount":"20","status":"B","submitter":"Nik Everett"},{"authorTime":"2020-05-14 03:59:35","codes":[{"authorDate":"2020-06-09 01:24:18","commitOrder":2,"curCode":"    public void testSignificance() throws IOException {\n        TextFieldType textFieldType = new TextFieldType();\n        textFieldType.setName(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"text\");\n            sigAgg.executionHint(randomExecutionHint());\n            if (randomBoolean()) {\n                \r\n                sigAgg.backgroundFilter(QueryBuilders.termsQuery(\"text\",  \"common\"));\n            }\n\n            SignificantTermsAggregationBuilder sigNumAgg = new SignificantTermsAggregationBuilder(\"sig_number\").field(\"long_field\");\n            sigNumAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantStringTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n\n                \r\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"even\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                sigAgg.includeExclude(new IncludeExclude(\"o.d\", null));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                String oddStrings[] = new String[] {\"odd\", \"weird\"};\n                String evenStrings[] = new String[] {\"even\", \"regular\"};\n\n                sigAgg.includeExclude(new IncludeExclude(oddStrings, evenStrings));\n                sigAgg.significanceHeuristic(SignificanceHeuristicTests.getRandomSignificanceheuristic());\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n                sigAgg.includeExclude(new IncludeExclude(evenStrings, oddStrings));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(0, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n            }\n        }\n    }\n","date":"2020-06-09 01:24:18","endLine":203,"groupId":"4593","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSignificance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/15/a55e8cad9fbe3099fa76fbbe60296b0ae100fc.src","preCode":"    public void testSignificance() throws IOException {\n        TextFieldType textFieldType = new TextFieldType();\n        textFieldType.setName(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"text\");\n            sigAgg.executionHint(randomExecutionHint());\n            if (randomBoolean()) {\n                \r\n                sigAgg.backgroundFilter(QueryBuilders.termsQuery(\"text\",  \"common\"));\n            }\n\n            SignificantTermsAggregationBuilder sigNumAgg = new SignificantTermsAggregationBuilder(\"sig_number\").field(\"long_field\");\n            sigNumAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n\n                \r\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"even\")), sigAgg, textFieldType);\n\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                sigAgg.includeExclude(new IncludeExclude(\"o.d\", null));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                String oddStrings[] = new String[] {\"odd\", \"weird\"};\n                String evenStrings[] = new String[] {\"even\", \"regular\"};\n\n                sigAgg.includeExclude(new IncludeExclude(oddStrings, evenStrings));\n                sigAgg.significanceHeuristic(SignificanceHeuristicTests.getRandomSignificanceheuristic());\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n                sigAgg.includeExclude(new IncludeExclude(evenStrings, oddStrings));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2020-05-14 03:59:35","commitOrder":2,"curCode":"    public void testUnmapped() throws IOException {\n        TextFieldType textFieldType = new TextFieldType();\n        textFieldType.setName(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            \r\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"unmapped_field\");\n            sigAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"odd\"));\n\n            }\n        }\n    }\n","date":"2020-05-14 03:59:35","endLine":285,"groupId":"4582","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnmapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8d/e4bef64dd7d56a5449f096dbbd6220db80be2a.src","preCode":"    public void testUnmapped() throws IOException {\n        TextFieldType textFieldType = new TextFieldType();\n        textFieldType.setName(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            \r\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"unmapped_field\");\n            sigAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"odd\"));\n\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"N"}],"commitId":"3ea2e649d644a63843ebb2c9757db85cc3fb1cb6","commitMessage":"@@@Fix a bug with missing fields in sig_terms (#57757) (#57817)\n\nWhen you run a `significant_terms` aggregation on a field and it *is*\nmapped but there aren't any values for it then the count of the\ndocuments that match the query on that shard still have to be added to\nthe overall doc count. I broke that in #57361. This fixes that.\n\nCloses #57402","date":"2020-06-09 01:24:18","modifiedFileCount":"4","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":3,"curCode":"    public void testSignificance() throws IOException {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"text\");\n            sigAgg.executionHint(randomExecutionHint());\n            if (randomBoolean()) {\n                \r\n                sigAgg.backgroundFilter(QueryBuilders.termsQuery(\"text\",  \"common\"));\n            }\n\n            SignificantTermsAggregationBuilder sigNumAgg = new SignificantTermsAggregationBuilder(\"sig_number\").field(\"long_field\");\n            sigNumAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantStringTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n\n                \r\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"even\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                sigAgg.includeExclude(new IncludeExclude(\"o.d\", null));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                String oddStrings[] = new String[] {\"odd\", \"weird\"};\n                String evenStrings[] = new String[] {\"even\", \"regular\"};\n\n                sigAgg.includeExclude(new IncludeExclude(oddStrings, evenStrings));\n                sigAgg.significanceHeuristic(SignificanceHeuristicTests.getRandomSignificanceheuristic());\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n                sigAgg.includeExclude(new IncludeExclude(evenStrings, oddStrings));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(0, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n            }\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":199,"groupId":"4593","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSignificance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/efafacff9bfdd9ae75d729e8e14d03877ca487.src","preCode":"    public void testSignificance() throws IOException {\n        TextFieldType textFieldType = new TextFieldType();\n        textFieldType.setName(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"text\");\n            sigAgg.executionHint(randomExecutionHint());\n            if (randomBoolean()) {\n                \r\n                sigAgg.backgroundFilter(QueryBuilders.termsQuery(\"text\",  \"common\"));\n            }\n\n            SignificantTermsAggregationBuilder sigNumAgg = new SignificantTermsAggregationBuilder(\"sig_number\").field(\"long_field\");\n            sigNumAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantStringTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n\n                \r\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"even\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                sigAgg.includeExclude(new IncludeExclude(\"o.d\", null));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                String oddStrings[] = new String[] {\"odd\", \"weird\"};\n                String evenStrings[] = new String[] {\"even\", \"regular\"};\n\n                sigAgg.includeExclude(new IncludeExclude(oddStrings, evenStrings));\n                sigAgg.significanceHeuristic(SignificanceHeuristicTests.getRandomSignificanceheuristic());\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n                sigAgg.includeExclude(new IncludeExclude(evenStrings, oddStrings));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(0, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":3,"curCode":"    public void testUnmapped() throws IOException {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            \r\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"unmapped_field\");\n            sigAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"odd\"));\n\n            }\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":293,"groupId":"4582","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnmapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/efafacff9bfdd9ae75d729e8e14d03877ca487.src","preCode":"    public void testUnmapped() throws IOException {\n        TextFieldType textFieldType = new TextFieldType();\n        textFieldType.setName(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            \r\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"unmapped_field\");\n            sigAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"odd\"));\n\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-08-07 05:14:20","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":4,"curCode":"    public void testSignificance() throws IOException {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(w);\n\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"text\");\n            sigAgg.executionHint(randomExecutionHint());\n            if (randomBoolean()) {\n                \r\n                sigAgg.backgroundFilter(QueryBuilders.termsQuery(\"text\",  \"common\"));\n            }\n\n            SignificantTermsAggregationBuilder sigNumAgg = new SignificantTermsAggregationBuilder(\"sig_number\").field(\"long_field\");\n            sigNumAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantStringTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n\n                \r\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"even\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                sigAgg.includeExclude(new IncludeExclude(\"o.d\", null));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                String oddStrings[] = new String[] {\"odd\", \"weird\"};\n                String evenStrings[] = new String[] {\"even\", \"regular\"};\n\n                sigAgg.includeExclude(new IncludeExclude(oddStrings, evenStrings));\n                sigAgg.significanceHeuristic(SignificanceHeuristicTests.getRandomSignificanceheuristic());\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n                sigAgg.includeExclude(new IncludeExclude(evenStrings, oddStrings));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(0, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n            }\n        }\n    }\n","date":"2020-08-07 05:14:20","endLine":188,"groupId":"4593","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSignificance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e9/92eab92bf0403d6c1136e9e4da2d058db35b7c.src","preCode":"    public void testSignificance() throws IOException {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"text\");\n            sigAgg.executionHint(randomExecutionHint());\n            if (randomBoolean()) {\n                \r\n                sigAgg.backgroundFilter(QueryBuilders.termsQuery(\"text\",  \"common\"));\n            }\n\n            SignificantTermsAggregationBuilder sigNumAgg = new SignificantTermsAggregationBuilder(\"sig_number\").field(\"long_field\");\n            sigNumAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantStringTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n\n                \r\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"even\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                sigAgg.includeExclude(new IncludeExclude(\"o.d\", null));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                String oddStrings[] = new String[] {\"odd\", \"weird\"};\n                String evenStrings[] = new String[] {\"even\", \"regular\"};\n\n                sigAgg.includeExclude(new IncludeExclude(oddStrings, evenStrings));\n                sigAgg.significanceHeuristic(SignificanceHeuristicTests.getRandomSignificanceheuristic());\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n                sigAgg.includeExclude(new IncludeExclude(evenStrings, oddStrings));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(0, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-08-07 05:14:20","commitOrder":4,"curCode":"    public void testUnmapped() throws IOException {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(w);\n\n            \r\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"unmapped_field\");\n            sigAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"odd\"));\n\n            }\n        }\n    }\n","date":"2020-08-07 05:14:20","endLine":282,"groupId":"71005","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnmapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e9/92eab92bf0403d6c1136e9e4da2d058db35b7c.src","preCode":"    public void testUnmapped() throws IOException {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(textFieldType, w);\n\n            \r\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"unmapped_field\");\n            sigAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"odd\"));\n\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"}],"commitId":"5e3ea6eb11c68bdcc9adda51715a6e1fea9186d6","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-07 05:14:20","modifiedFileCount":"73","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-11-04 21:53:09","codes":[{"authorDate":"2020-11-04 21:53:09","commitOrder":5,"curCode":"    public void testSignificance() throws IOException {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig(new StandardAnalyzer());\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(w);\n\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"text\");\n            sigAgg.executionHint(randomExecutionHint());\n            if (randomBoolean()) {\n                \r\n                sigAgg.backgroundFilter(QueryBuilders.termsQuery(\"text\",  \"common\"));\n            }\n\n            SignificantTermsAggregationBuilder sigNumAgg = new SignificantTermsAggregationBuilder(\"sig_number\").field(\"long_field\");\n            sigNumAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantStringTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n\n                \r\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"even\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                sigAgg.includeExclude(new IncludeExclude(\"o.d\", null));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                String oddStrings[] = new String[] {\"odd\", \"weird\"};\n                String evenStrings[] = new String[] {\"even\", \"regular\"};\n\n                sigAgg.includeExclude(new IncludeExclude(oddStrings, evenStrings));\n                sigAgg.significanceHeuristic(SignificanceHeuristicTests.getRandomSignificanceheuristic());\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n                sigAgg.includeExclude(new IncludeExclude(evenStrings, oddStrings));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(0, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n            }\n        }\n    }\n","date":"2020-11-04 21:53:09","endLine":185,"groupId":"4593","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSignificance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/8b469b907f2c877632cd973b3cdce05b54295f.src","preCode":"    public void testSignificance() throws IOException {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(w);\n\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"text\");\n            sigAgg.executionHint(randomExecutionHint());\n            if (randomBoolean()) {\n                \r\n                sigAgg.backgroundFilter(QueryBuilders.termsQuery(\"text\",  \"common\"));\n            }\n\n            SignificantTermsAggregationBuilder sigNumAgg = new SignificantTermsAggregationBuilder(\"sig_number\").field(\"long_field\");\n            sigNumAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantStringTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n\n                \r\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"even\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                sigAgg.includeExclude(new IncludeExclude(\"o.d\", null));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                String oddStrings[] = new String[] {\"odd\", \"weird\"};\n                String evenStrings[] = new String[] {\"even\", \"regular\"};\n\n                sigAgg.includeExclude(new IncludeExclude(oddStrings, evenStrings));\n                sigAgg.significanceHeuristic(SignificanceHeuristicTests.getRandomSignificanceheuristic());\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n                sigAgg.includeExclude(new IncludeExclude(evenStrings, oddStrings));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(0, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-11-04 21:53:09","commitOrder":5,"curCode":"    public void testUnmapped() throws IOException {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig(new StandardAnalyzer());\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(w);\n\n            \r\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"unmapped_field\");\n            sigAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"odd\"));\n\n            }\n        }\n    }\n","date":"2020-11-04 21:53:09","endLine":278,"groupId":"71005","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnmapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/8b469b907f2c877632cd973b3cdce05b54295f.src","preCode":"    public void testUnmapped() throws IOException {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n        textFieldType.setIndexAnalyzer(new NamedAnalyzer(\"my_analyzer\", AnalyzerScope.GLOBAL, new StandardAnalyzer()));\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(w);\n\n            \r\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"unmapped_field\");\n            sigAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"odd\"));\n\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"}],"commitId":"f010269ab797e2502d8145799fc4eb19a954aea6","commitMessage":"@@@Move index analyzer management to FieldMapper/MapperService (#63937)\n\nIndex-time analyzers are currently specified on the MappedFieldType. This\nhas a number of unfortunate consequences; for example.  field mappers that\nindex data into implementation sub-fields.  such as prefix or phrase\naccelerators on text fields.  need to expose these sub-fields as MappedFieldTypes. \nwhich means that they then appear in field caps.  are externally searchable. \netc. It also adds index-time logic to a class that should only be concerned\nwith search-time behaviour.\n\nThis commit removes references to the index analyzer from MappedFieldType.\nInstead.  FieldMappers that use the terms index can pass either a single analyzer\nor a Map of fields to analyzers to their super constructor.  which are then\nexposed via a new FieldMapper#indexAnalyzers() method; all index-time analysis \nis mediated through the delegating analyzer wrapper on MapperService. \nIn a follow-up.  this will make it possible to register multiple field analyzers from \na single FieldMapper.  removing the need for 'hidden' mapper implementations \non text field.  parent joins.  and elsewhere.","date":"2020-11-04 21:53:09","modifiedFileCount":"54","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-11-04 21:53:09","codes":[{"authorDate":"2021-07-13 19:40:56","commitOrder":6,"curCode":"    public void testSignificance(SignificanceHeuristic heuristic) throws IOException  {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig(new StandardAnalyzer());\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(w);\n\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"text\");\n            sigAgg.executionHint(randomExecutionHint());\n            if (randomBoolean()) {\n                \r\n                sigAgg.backgroundFilter(QueryBuilders.termsQuery(\"text\",  \"common\"));\n            }\n\n            SignificantTermsAggregationBuilder sigNumAgg = new SignificantTermsAggregationBuilder(\"sig_number\").field(\"long_field\");\n            sigNumAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantStringTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n\n                \r\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"even\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                sigAgg.includeExclude(new IncludeExclude(\"o.d\", null));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                String oddStrings[] = new String[] {\"odd\", \"weird\"};\n                String evenStrings[] = new String[] {\"even\", \"regular\"};\n\n                sigAgg.includeExclude(new IncludeExclude(oddStrings, evenStrings));\n                sigAgg.significanceHeuristic(heuristic);\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n                sigAgg.includeExclude(new IncludeExclude(evenStrings, oddStrings));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(0, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n            }\n        }\n    }\n","date":"2021-07-13 19:40:56","endLine":175,"groupId":"105198","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSignificance","params":"(SignificanceHeuristicheuristic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/10/98776800e635cfc598d189148a2edcf0089a35.src","preCode":"    public void testSignificance() throws IOException {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig(new StandardAnalyzer());\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(w);\n\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"text\");\n            sigAgg.executionHint(randomExecutionHint());\n            if (randomBoolean()) {\n                \r\n                sigAgg.backgroundFilter(QueryBuilders.termsQuery(\"text\",  \"common\"));\n            }\n\n            SignificantTermsAggregationBuilder sigNumAgg = new SignificantTermsAggregationBuilder(\"sig_number\").field(\"long_field\");\n            sigNumAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantStringTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n\n                \r\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"even\")), sigAgg, textFieldType);\n\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNotNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                sigAgg.includeExclude(new IncludeExclude(\"o.d\", null));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n\n                \r\n                String oddStrings[] = new String[] {\"odd\", \"weird\"};\n                String evenStrings[] = new String[] {\"even\", \"regular\"};\n\n                sigAgg.includeExclude(new IncludeExclude(oddStrings, evenStrings));\n                sigAgg.significanceHeuristic(SignificanceHeuristicTests.getRandomSignificanceheuristic());\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(1, terms.getBuckets().size());\n                assertNotNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n                sigAgg.includeExclude(new IncludeExclude(evenStrings, oddStrings));\n                terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertThat(terms.getSubsetSize(), equalTo(5L));\n                assertEquals(0, terms.getBuckets().size());\n                assertNull(terms.getBucketByKey(\"odd\"));\n                assertNull(terms.getBucketByKey(\"weird\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"regular\"));\n\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-11-04 21:53:09","commitOrder":6,"curCode":"    public void testUnmapped() throws IOException {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig(new StandardAnalyzer());\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(w);\n\n            \r\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"unmapped_field\");\n            sigAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"odd\"));\n\n            }\n        }\n    }\n","date":"2020-11-04 21:53:09","endLine":278,"groupId":"105198","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnmapped","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/8b469b907f2c877632cd973b3cdce05b54295f.src","preCode":"    public void testUnmapped() throws IOException {\n        TextFieldType textFieldType = new TextFieldType(\"text\");\n        textFieldType.setFielddata(true);\n\n        IndexWriterConfig indexWriterConfig = newIndexWriterConfig(new StandardAnalyzer());\n        indexWriterConfig.setMaxBufferedDocs(100);\n        indexWriterConfig.setRAMBufferSizeMB(100); \r\n        try (Directory dir = newDirectory(); IndexWriter w = new IndexWriter(dir, indexWriterConfig)) {\n            addMixedTextDocs(w);\n\n            \r\n            SignificantTermsAggregationBuilder sigAgg = new SignificantTermsAggregationBuilder(\"sig_text\").field(\"unmapped_field\");\n            sigAgg.executionHint(randomExecutionHint());\n\n            try (IndexReader reader = DirectoryReader.open(w)) {\n                assertEquals(\"test expects a single segment\", 1, reader.leaves().size());\n                IndexSearcher searcher = new IndexSearcher(reader);\n\n                \r\n                SignificantTerms terms = searchAndReduce(searcher, new TermQuery(new Term(\"text\", \"odd\")), sigAgg, textFieldType);\n                assertEquals(0, terms.getBuckets().size());\n\n                assertNull(terms.getBucketByKey(\"even\"));\n                assertNull(terms.getBucketByKey(\"common\"));\n                assertNull(terms.getBucketByKey(\"odd\"));\n\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/SignificantTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"N"}],"commitId":"379fad1ed9e923c5c882e7a6d19a12c3fdabebe2","commitMessage":"@@@Refactor significance heuristic tests for easier extensability (#75264)\n\nThe significant terms heuristic tests do not lend themselves well for new heuristics being added.\n\nThis commit extracts common code and builds an abstract significant heuristic test class.\n\nThis way new heuristics get the common suite of tests by extending a test class.","date":"2021-07-13 19:40:56","modifiedFileCount":"1","status":"M","submitter":"Benjamin Trent"}]
