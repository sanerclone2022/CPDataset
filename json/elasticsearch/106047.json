[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testEnforceLimitsWhenBoundToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n        final TransportAddress nonLocalTransportAddress = buildNewFakeTransportAddress();\n        transportAddresses.add(nonLocalTransportAddress);\n\n        for (int i = 0; i < randomIntBetween(0, 7); i++) {\n            final TransportAddress randomTransportAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n                new TransportAddress(InetAddress.getLoopbackAddress(), i);\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n            new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        Collections.shuffle(transportAddresses, random());\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(\"zen\", \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","date":"2018-04-26 03:22:53","endLine":107,"groupId":"68400","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEnforceLimitsWhenBoundToNonLocalAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/ba6d19b39ca1971a93138d54bf312091ec6736.src","preCode":"    public void testEnforceLimitsWhenBoundToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n        final TransportAddress nonLocalTransportAddress = buildNewFakeTransportAddress();\n        transportAddresses.add(nonLocalTransportAddress);\n\n        for (int i = 0; i < randomIntBetween(0, 7); i++) {\n            final TransportAddress randomTransportAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n                new TransportAddress(InetAddress.getLoopbackAddress(), i);\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n            new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        Collections.shuffle(transportAddresses, random());\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(\"zen\", \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testEnforceLimitsWhenPublishingToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n\n        for (int i = 0; i < randomIntBetween(1, 8); i++) {\n            final TransportAddress randomTransportAddress = buildNewFakeTransportAddress();\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(\"zen\", \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","date":"2018-04-26 03:22:53","endLine":125,"groupId":"45834","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnforceLimitsWhenPublishingToNonLocalAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/ba6d19b39ca1971a93138d54bf312091ec6736.src","preCode":"    public void testEnforceLimitsWhenPublishingToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n\n        for (int i = 0; i < randomIntBetween(1, 8); i++) {\n            final TransportAddress randomTransportAddress = buildNewFakeTransportAddress();\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(\"zen\", \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-12-07 00:20:08","codes":[{"authorDate":"2018-12-07 00:20:08","commitOrder":2,"curCode":"    public void testEnforceLimitsWhenBoundToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n        final TransportAddress nonLocalTransportAddress = buildNewFakeTransportAddress();\n        transportAddresses.add(nonLocalTransportAddress);\n\n        for (int i = 0; i < randomIntBetween(0, 7); i++) {\n            final TransportAddress randomTransportAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n                new TransportAddress(InetAddress.getLoopbackAddress(), i);\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n            new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        Collections.shuffle(transportAddresses, random());\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(ZEN_DISCOVERY_TYPE, ZEN2_DISCOVERY_TYPE, \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","date":"2018-12-07 00:20:08","endLine":109,"groupId":"68400","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEnforceLimitsWhenBoundToNonLocalAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/3a3a615daee7e82efce104ff00ef087ebcc63e.src","preCode":"    public void testEnforceLimitsWhenBoundToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n        final TransportAddress nonLocalTransportAddress = buildNewFakeTransportAddress();\n        transportAddresses.add(nonLocalTransportAddress);\n\n        for (int i = 0; i < randomIntBetween(0, 7); i++) {\n            final TransportAddress randomTransportAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n                new TransportAddress(InetAddress.getLoopbackAddress(), i);\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n            new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        Collections.shuffle(transportAddresses, random());\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(\"zen\", \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2018-12-07 00:20:08","commitOrder":2,"curCode":"    public void testEnforceLimitsWhenPublishingToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n\n        for (int i = 0; i < randomIntBetween(1, 8); i++) {\n            final TransportAddress randomTransportAddress = buildNewFakeTransportAddress();\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(ZEN_DISCOVERY_TYPE, ZEN2_DISCOVERY_TYPE, \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","date":"2018-12-07 00:20:08","endLine":127,"groupId":"45834","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnforceLimitsWhenPublishingToNonLocalAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/3a3a615daee7e82efce104ff00ef087ebcc63e.src","preCode":"    public void testEnforceLimitsWhenPublishingToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n\n        for (int i = 0; i < randomIntBetween(1, 8); i++) {\n            final TransportAddress randomTransportAddress = buildNewFakeTransportAddress();\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(\"zen\", \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"ed1c5a024168551764687539689d033cd54483ff","commitMessage":"@@@Introduce `zen2` discovery type (#36298)\n\nWith this change it is now possible to start a node running Zen2.","date":"2018-12-07 00:20:08","modifiedFileCount":"5","status":"M","submitter":"David Turner"},{"authorTime":"2019-03-04 22:51:12","codes":[{"authorDate":"2019-03-04 22:51:12","commitOrder":3,"curCode":"    public void testEnforceLimitsWhenBoundToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n        final TransportAddress nonLocalTransportAddress = buildNewFakeTransportAddress();\n        transportAddresses.add(nonLocalTransportAddress);\n\n        for (int i = 0; i < randomIntBetween(0, 7); i++) {\n            final TransportAddress randomTransportAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n                new TransportAddress(InetAddress.getLoopbackAddress(), i);\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n            new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        Collections.shuffle(transportAddresses, random());\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(ZEN2_DISCOVERY_TYPE, \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","date":"2019-03-04 22:51:12","endLine":110,"groupId":"68400","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEnforceLimitsWhenBoundToNonLocalAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/db/d58f6d5feb6ca3160d08305284cc75361e3ad5.src","preCode":"    public void testEnforceLimitsWhenBoundToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n        final TransportAddress nonLocalTransportAddress = buildNewFakeTransportAddress();\n        transportAddresses.add(nonLocalTransportAddress);\n\n        for (int i = 0; i < randomIntBetween(0, 7); i++) {\n            final TransportAddress randomTransportAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n                new TransportAddress(InetAddress.getLoopbackAddress(), i);\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n            new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        Collections.shuffle(transportAddresses, random());\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(ZEN_DISCOVERY_TYPE, ZEN2_DISCOVERY_TYPE, \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2019-03-04 22:51:12","commitOrder":3,"curCode":"    public void testEnforceLimitsWhenPublishingToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n\n        for (int i = 0; i < randomIntBetween(1, 8); i++) {\n            final TransportAddress randomTransportAddress = buildNewFakeTransportAddress();\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(ZEN2_DISCOVERY_TYPE, \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","date":"2019-03-04 22:51:12","endLine":128,"groupId":"45834","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnforceLimitsWhenPublishingToNonLocalAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/db/d58f6d5feb6ca3160d08305284cc75361e3ad5.src","preCode":"    public void testEnforceLimitsWhenPublishingToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n\n        for (int i = 0; i < randomIntBetween(1, 8); i++) {\n            final TransportAddress randomTransportAddress = buildNewFakeTransportAddress();\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(ZEN_DISCOVERY_TYPE, ZEN2_DISCOVERY_TYPE, \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"3b71a31557e2a9a2a5a7ab6aa77609b03eb3be7e","commitMessage":"@@@Remove Zen1 (#39466)\n\nRemoves all traces of Zen1 from the code base. Some of these commits will also be backported to\n7.0/7.x (#39470) as the cluster.coordination package was making use of some things in\ndiscovery.zen and we want to keep 7.x as close as possible to master.","date":"2019-03-04 22:51:12","modifiedFileCount":"47","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2021-02-08 23:28:57","codes":[{"authorDate":"2021-02-08 23:28:57","commitOrder":4,"curCode":"    public void testEnforceLimitsWhenBoundToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n        final TransportAddress nonLocalTransportAddress = buildNewFakeTransportAddress();\n        transportAddresses.add(nonLocalTransportAddress);\n\n        for (int i = 0; i < randomIntBetween(0, 7); i++) {\n            final TransportAddress randomTransportAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n                new TransportAddress(InetAddress.getLoopbackAddress(), i);\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n            new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        Collections.shuffle(transportAddresses, random());\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(ZEN2_DISCOVERY_TYPE, \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), \"single-node\".equals(discoveryType) == false);\n    }\n","date":"2021-02-08 23:28:57","endLine":101,"groupId":"106047","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testEnforceLimitsWhenBoundToNonLocalAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/38/8aa71e0d65092f8d8cb018eb167e0a352c6412.src","preCode":"    public void testEnforceLimitsWhenBoundToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n        final TransportAddress nonLocalTransportAddress = buildNewFakeTransportAddress();\n        transportAddresses.add(nonLocalTransportAddress);\n\n        for (int i = 0; i < randomIntBetween(0, 7); i++) {\n            final TransportAddress randomTransportAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n                new TransportAddress(InetAddress.getLoopbackAddress(), i);\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = randomBoolean() ? buildNewFakeTransportAddress() :\n            new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        Collections.shuffle(transportAddresses, random());\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(ZEN2_DISCOVERY_TYPE, \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2021-02-08 23:28:57","commitOrder":4,"curCode":"    public void testEnforceLimitsWhenPublishingToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n\n        for (int i = 0; i < randomIntBetween(1, 8); i++) {\n            final TransportAddress randomTransportAddress = buildNewFakeTransportAddress();\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(ZEN2_DISCOVERY_TYPE, \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), \"single-node\".equals(discoveryType) == false);\n    }\n","date":"2021-02-08 23:28:57","endLine":119,"groupId":"106047","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnforceLimitsWhenPublishingToNonLocalAddress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/38/8aa71e0d65092f8d8cb018eb167e0a352c6412.src","preCode":"    public void testEnforceLimitsWhenPublishingToNonLocalAddress() {\n        final List<TransportAddress> transportAddresses = new ArrayList<>();\n\n        for (int i = 0; i < randomIntBetween(1, 8); i++) {\n            final TransportAddress randomTransportAddress = buildNewFakeTransportAddress();\n            transportAddresses.add(randomTransportAddress);\n        }\n\n        final TransportAddress publishAddress = new TransportAddress(InetAddress.getLoopbackAddress(), 0);\n        final BoundTransportAddress boundTransportAddress = mock(BoundTransportAddress.class);\n        when(boundTransportAddress.boundAddresses()).thenReturn(transportAddresses.toArray(new TransportAddress[0]));\n        when(boundTransportAddress.publishAddress()).thenReturn(publishAddress);\n\n        final String discoveryType = randomFrom(ZEN2_DISCOVERY_TYPE, \"single-node\");\n\n        assertEquals(BootstrapChecks.enforceLimits(boundTransportAddress, discoveryType), !\"single-node\".equals(discoveryType));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"2d44cce31e2e28d98f6c60e839a4842194e2d4a9","commitMessage":"@@@Replace NOT operator with explicit `false` check - part 9 (#68645)\n\nPart 9.\n\nWe have an in-house rule to compare explicitly against `false` instead\nof using the logical not operator (`!`). However.  this hasn't\nhistorically been enforced.  meaning that there are many violations in\nthe source at present.\n\nWe now have a Checkstyle rule that can detect these cases.  but before we\ncan turn it on.  we need to fix the existing violations. This is being\ndone over a series of PRs.  since there are a lot to fix.","date":"2021-02-08 23:28:57","modifiedFileCount":"127","status":"M","submitter":"Rory Hunter"}]
