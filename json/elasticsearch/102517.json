[{"authorTime":"2019-10-21 15:43:31","codes":[{"authorDate":"2019-10-21 15:43:31","commitOrder":4,"curCode":"    public void testForceCustomQueryCache() throws IOException {\n        Settings settings = Settings.builder()\n                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap());\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        expectThrows(AlreadySetException.class, () -> module.forceQueryCacheProvider((a, b) -> {\n            throw new AssertionError(\"never called\");\n        }));\n        IndexService indexService = newIndexService(module);\n        assertTrue(indexService.cache().query() instanceof CustomQueryCache);\n        indexService.close(\"simon says\", false);\n        assertThat(liveQueryCaches, empty());\n    }\n","date":"2019-10-21 15:43:31","endLine":379,"groupId":"2363","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testForceCustomQueryCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/10bf0457be45b72324961329be843b1900ddd9.src","preCode":"    public void testForceCustomQueryCache() throws IOException {\n        Settings settings = Settings.builder()\n                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap());\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        expectThrows(AlreadySetException.class, () -> module.forceQueryCacheProvider((a, b) -> {\n            throw new AssertionError(\"never called\");\n        }));\n        IndexService indexService = newIndexService(module);\n        assertTrue(indexService.cache().query() instanceof CustomQueryCache);\n        indexService.close(\"simon says\", false);\n        assertThat(liveQueryCaches, empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"MB"},{"authorDate":"2019-10-21 15:43:31","commitOrder":4,"curCode":"    public void testCustomQueryCacheCleanedUpIfIndexServiceCreationFails() {\n        Settings settings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap());\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        threadPool.shutdown(); \r\n        expectThrows(EsRejectedExecutionException.class, () -> newIndexService(module));\n        assertThat(liveQueryCaches, empty());\n    }\n","date":"2019-10-21 15:43:31","endLine":420,"groupId":"2363","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomQueryCacheCleanedUpIfIndexServiceCreationFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/10bf0457be45b72324961329be843b1900ddd9.src","preCode":"    public void testCustomQueryCacheCleanedUpIfIndexServiceCreationFails() {\n        Settings settings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap());\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        threadPool.shutdown(); \r\n        expectThrows(EsRejectedExecutionException.class, () -> newIndexService(module));\n        assertThat(liveQueryCaches, empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":405,"status":"B"}],"commitId":"f9a9dcb75288899f58bf833f13f561883aab45ef","commitMessage":"@@@Close query cache on index service creation failure (#48230)\n\nToday it is possible that we create the `QueryCache` and then fail to create\nthe owning `IndexService` and this means we do not close the `QueryCache`\nagain. This commit addresses that leak.\n\nFixes #48186","date":"2019-10-21 15:43:31","modifiedFileCount":"3","status":"M","submitter":"David Turner"},{"authorTime":"2020-02-13 01:06:04","codes":[{"authorDate":"2020-02-13 01:06:04","commitOrder":5,"curCode":"    public void testForceCustomQueryCache() throws IOException {\n        Settings settings = Settings.builder()\n                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        expectThrows(AlreadySetException.class, () -> module.forceQueryCacheProvider((a, b) -> {\n            throw new AssertionError(\"never called\");\n        }));\n        IndexService indexService = newIndexService(module);\n        assertTrue(indexService.cache().query() instanceof CustomQueryCache);\n        indexService.close(\"simon says\", false);\n        assertThat(liveQueryCaches, empty());\n    }\n","date":"2020-02-13 01:06:04","endLine":384,"groupId":"18379","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testForceCustomQueryCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/07f58c7fd6eda41019fbca7a498868a0e2d09c.src","preCode":"    public void testForceCustomQueryCache() throws IOException {\n        Settings settings = Settings.builder()\n                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap());\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        expectThrows(AlreadySetException.class, () -> module.forceQueryCacheProvider((a, b) -> {\n            throw new AssertionError(\"never called\");\n        }));\n        IndexService indexService = newIndexService(module);\n        assertTrue(indexService.cache().query() instanceof CustomQueryCache);\n        indexService.close(\"simon says\", false);\n        assertThat(liveQueryCaches, empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"},{"authorDate":"2020-02-13 01:06:04","commitOrder":5,"curCode":"    public void testCustomQueryCacheCleanedUpIfIndexServiceCreationFails() {\n        Settings settings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        threadPool.shutdown(); \r\n        expectThrows(EsRejectedExecutionException.class, () -> newIndexService(module));\n        assertThat(liveQueryCaches, empty());\n    }\n","date":"2020-02-13 01:06:04","endLine":425,"groupId":"18379","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomQueryCacheCleanedUpIfIndexServiceCreationFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/07f58c7fd6eda41019fbca7a498868a0e2d09c.src","preCode":"    public void testCustomQueryCacheCleanedUpIfIndexServiceCreationFails() {\n        Settings settings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap());\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        threadPool.shutdown(); \r\n        expectThrows(EsRejectedExecutionException.class, () -> newIndexService(module));\n        assertThat(liveQueryCaches, empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"M"}],"commitId":"a8b39ed842c7770bd9275958c9f747502fd9a3ea","commitMessage":"@@@Add a cluster setting to disallow expensive queries (#51385)\n\nAdd a new cluster setting `search.allow_expensive_queries` which by\ndefault is `true`. If set to `false`.  certain queries that have \nusually slow performance cannot be executed and an error message\nis returned.\n\n- Queries that need to do linear scans to identify matches:\n  - Script queries\n- Queries that have a high up-front cost:\n  - Fuzzy queries\n  - Regexp queries\n  - Prefix queries (without index_prefixes enabled\n  - Wildcard queries\n  - Range queries on text and keyword fields\n- Joining queries\n  - HasParent queries\n  - HasChild queries\n  - ParentId queries\n  - Nested queries\n- Queries on deprecated 6.x geo shapes (using PrefixTree implementation)\n- Queries that may have a high per-document cost:\n  - Script score queries\n  - Percolate queries\n\nCloses: #29050","date":"2020-02-13 01:06:04","modifiedFileCount":"66","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":6,"curCode":"    public void testForceCustomQueryCache() throws IOException {\n        Settings settings = Settings.builder()\n                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n                .put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        expectThrows(AlreadySetException.class, () -> module.forceQueryCacheProvider((a, b) -> {\n            throw new AssertionError(\"never called\");\n        }));\n        IndexService indexService = newIndexService(module);\n        assertTrue(indexService.cache().query() instanceof CustomQueryCache);\n        indexService.close(\"simon says\", false);\n        assertThat(liveQueryCaches, empty());\n    }\n","date":"2020-04-01 03:52:01","endLine":385,"groupId":"18379","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testForceCustomQueryCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/58/d3802cdec6aa2154251a1becf6f36cc76eb180.src","preCode":"    public void testForceCustomQueryCache() throws IOException {\n        Settings settings = Settings.builder()\n                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        expectThrows(AlreadySetException.class, () -> module.forceQueryCacheProvider((a, b) -> {\n            throw new AssertionError(\"never called\");\n        }));\n        IndexService indexService = newIndexService(module);\n        assertTrue(indexService.cache().query() instanceof CustomQueryCache);\n        indexService.close(\"simon says\", false);\n        assertThat(liveQueryCaches, empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":6,"curCode":"    public void testCustomQueryCacheCleanedUpIfIndexServiceCreationFails() {\n        Settings settings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        threadPool.shutdown(); \r\n        expectThrows(EsRejectedExecutionException.class, () -> newIndexService(module));\n        assertThat(liveQueryCaches, empty());\n    }\n","date":"2020-04-01 03:52:01","endLine":426,"groupId":"18379","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomQueryCacheCleanedUpIfIndexServiceCreationFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/58/d3802cdec6aa2154251a1becf6f36cc76eb180.src","preCode":"    public void testCustomQueryCacheCleanedUpIfIndexServiceCreationFails() {\n        Settings settings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        threadPool.shutdown(); \r\n        expectThrows(EsRejectedExecutionException.class, () -> newIndexService(module));\n        assertThat(liveQueryCaches, empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2021-03-02 01:38:53","codes":[{"authorDate":"2021-03-02 01:38:53","commitOrder":7,"curCode":"    public void testForceCustomQueryCache() throws IOException {\n        Settings settings = Settings.builder()\n                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n                .put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry, indexNameExpressionResolver);\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        expectThrows(AlreadySetException.class, () -> module.forceQueryCacheProvider((a, b) -> {\n            throw new AssertionError(\"never called\");\n        }));\n        IndexService indexService = newIndexService(module);\n        assertTrue(indexService.cache().query() instanceof CustomQueryCache);\n        indexService.close(\"simon says\", false);\n        assertThat(liveQueryCaches, empty());\n    }\n","date":"2021-03-02 01:38:53","endLine":399,"groupId":"102517","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testForceCustomQueryCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/76dfc86552592c6680d662434b5065868c0709.src","preCode":"    public void testForceCustomQueryCache() throws IOException {\n        Settings settings = Settings.builder()\n                .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n                .put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        expectThrows(AlreadySetException.class, () -> module.forceQueryCacheProvider((a, b) -> {\n            throw new AssertionError(\"never called\");\n        }));\n        IndexService indexService = newIndexService(module);\n        assertTrue(indexService.cache().query() instanceof CustomQueryCache);\n        indexService.close(\"simon says\", false);\n        assertThat(liveQueryCaches, empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"},{"authorDate":"2021-03-02 01:38:53","commitOrder":7,"curCode":"    public void testCustomQueryCacheCleanedUpIfIndexServiceCreationFails() {\n        Settings settings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry, indexNameExpressionResolver);\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        threadPool.shutdown(); \r\n        expectThrows(EsRejectedExecutionException.class, () -> newIndexService(module));\n        assertThat(liveQueryCaches, empty());\n    }\n","date":"2021-03-02 01:38:53","endLine":440,"groupId":"102517","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCustomQueryCacheCleanedUpIfIndexServiceCreationFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/76dfc86552592c6680d662434b5065868c0709.src","preCode":"    public void testCustomQueryCacheCleanedUpIfIndexServiceCreationFails() {\n        Settings settings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT).build();\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"foo\", settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        final Set<CustomQueryCache> liveQueryCaches = new HashSet<>();\n        module.forceQueryCacheProvider((a, b) -> {\n            final CustomQueryCache customQueryCache = new CustomQueryCache(liveQueryCaches);\n            liveQueryCaches.add(customQueryCache);\n            return customQueryCache;\n        });\n        threadPool.shutdown(); \r\n        expectThrows(EsRejectedExecutionException.class, () -> newIndexService(module));\n        assertThat(liveQueryCaches, empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"M"}],"commitId":"1487a5a991e78dc17eebb349b105409b51b63b36","commitMessage":"@@@Introduce system index types including external (#68919)\n\nThis commit introduces system index types that will be used to\ndifferentiate behavior. Previously system indices were all treated the\nsame regardless of whether they belonged to Elasticsearch.  a stack\ncomponent.  or one of our solutions. Upon further discussion and\nanalysis this decision was not in the best interest of the various\nteams and instead a new type of system index was needed. These system\nindices will be referred to as external system indices. Within external\nsystem indices.  an option exists for these indices to be managed by\nElasticsearch or to be managed by the external product.\n\nIn order to represent this within Elasticsearch.  each system index will\nhave a type and this type will be used to control behavior.\n\nCloses #67383","date":"2021-03-02 01:38:53","modifiedFileCount":"87","status":"M","submitter":"Jay Modi"}]
