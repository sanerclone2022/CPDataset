[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static SegmentInfos pruneUnreferencedFiles(String segmentsFileName, Directory directory) throws IOException {\n        final SegmentInfos si = readSegmentInfos(segmentsFileName, directory);\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            int foundSegmentFiles = 0;\n            for (final String file : directory.listAll()) {\n                \r\n\r\n\r\n\r\n\r\n\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    foundSegmentFiles++;\n                    if (file.equals(si.getSegmentsFileName()) == false) {\n                        directory.deleteFile(file); \r\n                    }\n                }\n            }\n            assert SegmentInfos.getLastCommitSegmentsFileName(directory).equals(segmentsFileName);\n            if (foundSegmentFiles == 0) {\n                throw new IllegalStateException(\"no commit found in the directory\");\n            }\n        }\n        final CommitPoint cp = new CommitPoint(si, directory);\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setIndexCommit(cp)\n                .setCommitOnClose(false)\n                .setMergePolicy(NoMergePolicy.INSTANCE)\n                .setOpenMode(IndexWriterConfig.OpenMode.APPEND))) {\n            \r\n        }\n        return si;\n    }\n","date":"2018-04-26 03:22:53","endLine":207,"groupId":"17809","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"pruneUnreferencedFiles","params":"(StringsegmentsFileName@Directorydirectory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/ef7bee4f10b2570fb593e8e90b52c2cc0432a9.src","preCode":"    public static SegmentInfos pruneUnreferencedFiles(String segmentsFileName, Directory directory) throws IOException {\n        final SegmentInfos si = readSegmentInfos(segmentsFileName, directory);\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            int foundSegmentFiles = 0;\n            for (final String file : directory.listAll()) {\n                \r\n\r\n\r\n\r\n\r\n\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    foundSegmentFiles++;\n                    if (file.equals(si.getSegmentsFileName()) == false) {\n                        directory.deleteFile(file); \r\n                    }\n                }\n            }\n            assert SegmentInfos.getLastCommitSegmentsFileName(directory).equals(segmentsFileName);\n            if (foundSegmentFiles == 0) {\n                throw new IllegalStateException(\"no commit found in the directory\");\n            }\n        }\n        final CommitPoint cp = new CommitPoint(si, directory);\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setIndexCommit(cp)\n                .setCommitOnClose(false)\n                .setMergePolicy(NoMergePolicy.INSTANCE)\n                .setOpenMode(IndexWriterConfig.OpenMode.APPEND))) {\n            \r\n        }\n        return si;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/lucene/Lucene.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static void cleanLuceneIndex(Directory directory) throws IOException {\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            for (final String file : directory.listAll()) {\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    directory.deleteFile(file); \r\n                }\n            }\n        }\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setMergePolicy(NoMergePolicy.INSTANCE) \r\n                .setCommitOnClose(false) \r\n                .setOpenMode(IndexWriterConfig.OpenMode.CREATE))) \r\n        {\n            \r\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":229,"groupId":"70918","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanLuceneIndex","params":"(Directorydirectory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/ef7bee4f10b2570fb593e8e90b52c2cc0432a9.src","preCode":"    public static void cleanLuceneIndex(Directory directory) throws IOException {\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            for (final String file : directory.listAll()) {\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    directory.deleteFile(file); \r\n                }\n            }\n        }\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setMergePolicy(NoMergePolicy.INSTANCE) \r\n                .setCommitOnClose(false) \r\n                .setOpenMode(IndexWriterConfig.OpenMode.CREATE))) \r\n        {\n            \r\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/lucene/Lucene.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-08-31 21:45:22","codes":[{"authorDate":"2018-08-31 21:45:22","commitOrder":2,"curCode":"    public static SegmentInfos pruneUnreferencedFiles(String segmentsFileName, Directory directory) throws IOException {\n        final SegmentInfos si = readSegmentInfos(segmentsFileName, directory);\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            int foundSegmentFiles = 0;\n            for (final String file : directory.listAll()) {\n                \r\n\r\n\r\n\r\n\r\n\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    foundSegmentFiles++;\n                    if (file.equals(si.getSegmentsFileName()) == false) {\n                        directory.deleteFile(file); \r\n                    }\n                }\n            }\n            assert SegmentInfos.getLastCommitSegmentsFileName(directory).equals(segmentsFileName);\n            if (foundSegmentFiles == 0) {\n                throw new IllegalStateException(\"no commit found in the directory\");\n            }\n        }\n        final CommitPoint cp = new CommitPoint(si, directory);\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)\n                .setIndexCommit(cp)\n                .setCommitOnClose(false)\n                .setMergePolicy(NoMergePolicy.INSTANCE)\n                .setOpenMode(IndexWriterConfig.OpenMode.APPEND))) {\n            \r\n        }\n        return si;\n    }\n","date":"2018-08-31 21:45:22","endLine":212,"groupId":"17809","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"pruneUnreferencedFiles","params":"(StringsegmentsFileName@Directorydirectory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/1e56878932d7f14d07d2293ecac14742487f63.src","preCode":"    public static SegmentInfos pruneUnreferencedFiles(String segmentsFileName, Directory directory) throws IOException {\n        final SegmentInfos si = readSegmentInfos(segmentsFileName, directory);\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            int foundSegmentFiles = 0;\n            for (final String file : directory.listAll()) {\n                \r\n\r\n\r\n\r\n\r\n\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    foundSegmentFiles++;\n                    if (file.equals(si.getSegmentsFileName()) == false) {\n                        directory.deleteFile(file); \r\n                    }\n                }\n            }\n            assert SegmentInfos.getLastCommitSegmentsFileName(directory).equals(segmentsFileName);\n            if (foundSegmentFiles == 0) {\n                throw new IllegalStateException(\"no commit found in the directory\");\n            }\n        }\n        final CommitPoint cp = new CommitPoint(si, directory);\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setIndexCommit(cp)\n                .setCommitOnClose(false)\n                .setMergePolicy(NoMergePolicy.INSTANCE)\n                .setOpenMode(IndexWriterConfig.OpenMode.APPEND))) {\n            \r\n        }\n        return si;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/lucene/Lucene.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2018-08-31 21:45:22","commitOrder":2,"curCode":"    public static void cleanLuceneIndex(Directory directory) throws IOException {\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            for (final String file : directory.listAll()) {\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    directory.deleteFile(file); \r\n                }\n            }\n        }\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)\n                .setMergePolicy(NoMergePolicy.INSTANCE) \r\n                .setCommitOnClose(false) \r\n                .setOpenMode(IndexWriterConfig.OpenMode.CREATE))) \r\n        {\n            \r\n        }\n    }\n","date":"2018-08-31 21:45:22","endLine":235,"groupId":"70918","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanLuceneIndex","params":"(Directorydirectory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/1e56878932d7f14d07d2293ecac14742487f63.src","preCode":"    public static void cleanLuceneIndex(Directory directory) throws IOException {\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            for (final String file : directory.listAll()) {\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    directory.deleteFile(file); \r\n                }\n            }\n        }\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setMergePolicy(NoMergePolicy.INSTANCE) \r\n                .setCommitOnClose(false) \r\n                .setOpenMode(IndexWriterConfig.OpenMode.CREATE))) \r\n        {\n            \r\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/lucene/Lucene.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"3eef74d5d582c19c29d7a297a120004bf4d38930","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-31 21:45:22","modifiedFileCount":"108","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-08-31 21:45:22","codes":[{"authorDate":"2018-11-08 03:23:35","commitOrder":3,"curCode":"    public static SegmentInfos pruneUnreferencedFiles(String segmentsFileName, Directory directory) throws IOException {\n        final SegmentInfos si = readSegmentInfos(segmentsFileName, directory);\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            int foundSegmentFiles = 0;\n            for (final String file : directory.listAll()) {\n                \r\n\r\n\r\n\r\n\r\n\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    foundSegmentFiles++;\n                    if (file.equals(si.getSegmentsFileName()) == false) {\n                        directory.deleteFile(file); \r\n                    }\n                }\n            }\n            assert SegmentInfos.getLastCommitSegmentsFileName(directory).equals(segmentsFileName);\n            if (foundSegmentFiles == 0) {\n                throw new IllegalStateException(\"no commit found in the directory\");\n            }\n        }\n        final IndexCommit cp = getIndexCommit(si, directory);\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)\n                .setIndexCommit(cp)\n                .setCommitOnClose(false)\n                .setMergePolicy(NoMergePolicy.INSTANCE)\n                .setOpenMode(IndexWriterConfig.OpenMode.APPEND))) {\n            \r\n        }\n        return si;\n    }\n","date":"2018-11-08 03:23:35","endLine":233,"groupId":"51662","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"pruneUnreferencedFiles","params":"(StringsegmentsFileName@Directorydirectory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/38/ab9a6d7d48c5e4bc93f6445a8abacf384f347c.src","preCode":"    public static SegmentInfos pruneUnreferencedFiles(String segmentsFileName, Directory directory) throws IOException {\n        final SegmentInfos si = readSegmentInfos(segmentsFileName, directory);\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            int foundSegmentFiles = 0;\n            for (final String file : directory.listAll()) {\n                \r\n\r\n\r\n\r\n\r\n\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    foundSegmentFiles++;\n                    if (file.equals(si.getSegmentsFileName()) == false) {\n                        directory.deleteFile(file); \r\n                    }\n                }\n            }\n            assert SegmentInfos.getLastCommitSegmentsFileName(directory).equals(segmentsFileName);\n            if (foundSegmentFiles == 0) {\n                throw new IllegalStateException(\"no commit found in the directory\");\n            }\n        }\n        final CommitPoint cp = new CommitPoint(si, directory);\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)\n                .setIndexCommit(cp)\n                .setCommitOnClose(false)\n                .setMergePolicy(NoMergePolicy.INSTANCE)\n                .setOpenMode(IndexWriterConfig.OpenMode.APPEND))) {\n            \r\n        }\n        return si;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/lucene/Lucene.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2018-08-31 21:45:22","commitOrder":3,"curCode":"    public static void cleanLuceneIndex(Directory directory) throws IOException {\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            for (final String file : directory.listAll()) {\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    directory.deleteFile(file); \r\n                }\n            }\n        }\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)\n                .setMergePolicy(NoMergePolicy.INSTANCE) \r\n                .setCommitOnClose(false) \r\n                .setOpenMode(IndexWriterConfig.OpenMode.CREATE))) \r\n        {\n            \r\n        }\n    }\n","date":"2018-08-31 21:45:22","endLine":235,"groupId":"70918","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanLuceneIndex","params":"(Directorydirectory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/1e56878932d7f14d07d2293ecac14742487f63.src","preCode":"    public static void cleanLuceneIndex(Directory directory) throws IOException {\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            for (final String file : directory.listAll()) {\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    directory.deleteFile(file); \r\n                }\n            }\n        }\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)\n                .setMergePolicy(NoMergePolicy.INSTANCE) \r\n                .setCommitOnClose(false) \r\n                .setOpenMode(IndexWriterConfig.OpenMode.CREATE))) \r\n        {\n            \r\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/lucene/Lucene.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"N"}],"commitId":"0cc0fd2d1555c6954aa65aee875ff2db280bdb4f","commitMessage":"@@@Add a frozen engine implementation (#34357)\n\nThis change adds a `frozen` engine that allows lazily open a directory reader\non a read-only shard. The engine wraps general purpose searchers in a LazyDirectoryReader\nthat also allows to release and reset the underlying index readers after any and before\nsecondary search phases.\n\nRelates to #34352","date":"2018-11-08 03:23:35","modifiedFileCount":"9","status":"M","submitter":"Simon Willnauer"},{"authorTime":"2021-04-27 19:31:29","codes":[{"authorDate":"2021-04-27 19:31:29","commitOrder":4,"curCode":"    public static SegmentInfos pruneUnreferencedFiles(String segmentsFileName, Directory directory) throws IOException {\n        final SegmentInfos si = readSegmentInfos(segmentsFileName, directory);\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            int foundSegmentFiles = 0;\n            for (final String file : directory.listAll()) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    foundSegmentFiles++;\n                    if (file.equals(si.getSegmentsFileName()) == false) {\n                        directory.deleteFile(file); \r\n                    }\n                }\n            }\n            assert SegmentInfos.getLastCommitSegmentsFileName(directory).equals(segmentsFileName);\n            if (foundSegmentFiles == 0) {\n                throw new IllegalStateException(\"no commit found in the directory\");\n            }\n        }\n        final IndexCommit cp = getIndexCommit(si, directory);\n        try (IndexWriter writer = new IndexWriter(directory, indexWriterConfigWithNoMerging(Lucene.STANDARD_ANALYZER)\n                .setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)\n                .setIndexCommit(cp)\n                .setCommitOnClose(false)\n                .setOpenMode(IndexWriterConfig.OpenMode.APPEND))) {\n            \r\n        }\n        return si;\n    }\n","date":"2021-04-27 19:31:29","endLine":221,"groupId":"108123","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"pruneUnreferencedFiles","params":"(StringsegmentsFileName@Directorydirectory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/97/50ea1f5382571dccd8fe529ef65d22ca25c453.src","preCode":"    public static SegmentInfos pruneUnreferencedFiles(String segmentsFileName, Directory directory) throws IOException {\n        final SegmentInfos si = readSegmentInfos(segmentsFileName, directory);\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            int foundSegmentFiles = 0;\n            for (final String file : directory.listAll()) {\n                \r\n\r\n\r\n\r\n\r\n\r\n\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    foundSegmentFiles++;\n                    if (file.equals(si.getSegmentsFileName()) == false) {\n                        directory.deleteFile(file); \r\n                    }\n                }\n            }\n            assert SegmentInfos.getLastCommitSegmentsFileName(directory).equals(segmentsFileName);\n            if (foundSegmentFiles == 0) {\n                throw new IllegalStateException(\"no commit found in the directory\");\n            }\n        }\n        final IndexCommit cp = getIndexCommit(si, directory);\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)\n                .setIndexCommit(cp)\n                .setCommitOnClose(false)\n                .setMergePolicy(NoMergePolicy.INSTANCE)\n                .setOpenMode(IndexWriterConfig.OpenMode.APPEND))) {\n            \r\n        }\n        return si;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/lucene/Lucene.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2021-04-27 19:31:29","commitOrder":4,"curCode":"    public static void cleanLuceneIndex(Directory directory) throws IOException {\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            for (final String file : directory.listAll()) {\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    directory.deleteFile(file); \r\n                }\n            }\n        }\n        try (IndexWriter writer = new IndexWriter(directory, indexWriterConfigWithNoMerging(Lucene.STANDARD_ANALYZER)\n                .setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)\n                .setCommitOnClose(false) \r\n                .setOpenMode(IndexWriterConfig.OpenMode.CREATE) \r\n        ))\n        {\n            \r\n        }\n    }\n","date":"2021-04-27 19:31:29","endLine":251,"groupId":"108123","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanLuceneIndex","params":"(Directorydirectory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/97/50ea1f5382571dccd8fe529ef65d22ca25c453.src","preCode":"    public static void cleanLuceneIndex(Directory directory) throws IOException {\n        try (Lock writeLock = directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)) {\n            for (final String file : directory.listAll()) {\n                if (file.startsWith(IndexFileNames.SEGMENTS) || file.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n                    directory.deleteFile(file); \r\n                }\n            }\n        }\n        try (IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(Lucene.STANDARD_ANALYZER)\n                .setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)\n                .setMergePolicy(NoMergePolicy.INSTANCE) \r\n                .setCommitOnClose(false) \r\n                .setOpenMode(IndexWriterConfig.OpenMode.CREATE) \r\n        ))\n        {\n            \r\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/lucene/Lucene.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"}],"commitId":"cf360cefb68002fb5871d879f3a07643209904dc","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-27 19:31:29","modifiedFileCount":"260","status":"M","submitter":"iverase"}]
