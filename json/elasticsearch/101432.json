[{"authorTime":"2018-10-17 04:58:53","codes":[{"authorDate":"2018-10-18 01:22:23","commitOrder":2,"curCode":"    private NumberSortScript.LeafFactory newSortScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        boolean needsScores = false;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_score\")) {\n                    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n                    needsScores = true;\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    needsScores |= valueSource.getSortField(false).needsScores();\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionNumberSortScript(expr, bindings, needsScores);\n    }\n","date":"2018-10-18 01:22:23","endLine":236,"groupId":"30633","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"newSortScript","params":"(Expressionexpr@SearchLookuplookup@@NullableMap<String@Object>vars)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5d/47c87a445a2ab8e10adde781daf3b745d39bb2.src","preCode":"    private NumberSortScript.LeafFactory newSortScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        boolean needsScores = false;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_score\")) {\n                    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n                    needsScores = true;\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    needsScores |= valueSource.getSortField(false).needsScores();\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionNumberSortScript(expr, bindings, needsScores);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"B"},{"authorDate":"2018-10-17 04:58:53","commitOrder":2,"curCode":"    private AggregationScript.LeafFactory newAggregationScript(Expression expr, SearchLookup lookup,\n        @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        ReplaceableConstDoubleValueSource specialValue = null;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_value\")) {\n                    specialValue = new ReplaceableConstDoubleValueSource();\n                    bindings.add(\"_value\", specialValue);\n                    \r\n                    \r\n                    \r\n\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionAggregationScript(expr, bindings, specialValue);\n    }\n","date":"2018-10-17 04:58:53","endLine":260,"groupId":"27412","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"newAggregationScript","params":"(Expressionexpr@SearchLookuplookup@@NullableMap<String@Object>vars)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/14/d701fad8b07398726f6430dbae82e4feed1649.src","preCode":"    private AggregationScript.LeafFactory newAggregationScript(Expression expr, SearchLookup lookup,\n        @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        ReplaceableConstDoubleValueSource specialValue = null;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_value\")) {\n                    specialValue = new ReplaceableConstDoubleValueSource();\n                    bindings.add(\"_value\", specialValue);\n                    \r\n                    \r\n                    \r\n\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionAggregationScript(expr, bindings, specialValue);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"NB"}],"commitId":"90f7cec7a5ba6545ed9134de8203bc4afce7727c","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-10-18 01:22:23","modifiedFileCount":"44","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2019-05-30 04:26:12","codes":[{"authorDate":"2018-10-18 01:22:23","commitOrder":3,"curCode":"    private NumberSortScript.LeafFactory newSortScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        boolean needsScores = false;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_score\")) {\n                    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n                    needsScores = true;\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    needsScores |= valueSource.getSortField(false).needsScores();\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionNumberSortScript(expr, bindings, needsScores);\n    }\n","date":"2018-10-18 01:22:23","endLine":236,"groupId":"30633","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"newSortScript","params":"(Expressionexpr@SearchLookuplookup@@NullableMap<String@Object>vars)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5d/47c87a445a2ab8e10adde781daf3b745d39bb2.src","preCode":"    private NumberSortScript.LeafFactory newSortScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        boolean needsScores = false;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_score\")) {\n                    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n                    needsScores = true;\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    needsScores |= valueSource.getSortField(false).needsScores();\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionNumberSortScript(expr, bindings, needsScores);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"N"},{"authorDate":"2019-05-30 04:26:12","commitOrder":3,"curCode":"    private AggregationScript.LeafFactory newAggregationScript(Expression expr, SearchLookup lookup,\n        @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        boolean needsScores = false;\n        ReplaceableConstDoubleValueSource specialValue = null;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_score\")) {\n                    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n                    needsScores = true;\n                } else if (variable.equals(\"_value\")) {\n                    specialValue = new ReplaceableConstDoubleValueSource();\n                    bindings.add(\"_value\", specialValue);\n                    \r\n                    \r\n                    \r\n\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    needsScores |= valueSource.getSortField(false).needsScores();\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionAggregationScript(expr, bindings, needsScores, specialValue);\n    }\n","date":"2019-05-30 04:26:12","endLine":253,"groupId":"48244","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"newAggregationScript","params":"(Expressionexpr@SearchLookuplookup@@NullableMap<String@Object>vars)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ab/d8738b0e4c1bb22ce883599af328b53ffe4e2c.src","preCode":"    private AggregationScript.LeafFactory newAggregationScript(Expression expr, SearchLookup lookup,\n        @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        ReplaceableConstDoubleValueSource specialValue = null;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_value\")) {\n                    specialValue = new ReplaceableConstDoubleValueSource();\n                    bindings.add(\"_value\", specialValue);\n                    \r\n                    \r\n                    \r\n\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionAggregationScript(expr, bindings, specialValue);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"37835cacde91fdcaf6864741fdad4ede108595fa","commitMessage":"@@@Allow aggregations using expressions to use _score (#42652)\n\n_score was removed from use in aggregations using expressions \nunintentionally when script contexts were added. This allows _score to once \nagain be used.\n","date":"2019-05-30 04:26:12","modifiedFileCount":"3","status":"M","submitter":"Jack Conradson"},{"authorTime":"2019-12-04 09:55:48","codes":[{"authorDate":"2019-12-04 09:55:48","commitOrder":4,"curCode":"    private static NumberSortScript.LeafFactory newSortScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        boolean needsScores = false;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_score\")) {\n                    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n                    needsScores = true;\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    needsScores |= valueSource.getSortField(false).needsScores();\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionNumberSortScript(expr, bindings, needsScores);\n    }\n","date":"2019-12-04 09:55:48","endLine":209,"groupId":"30633","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"newSortScript","params":"(Expressionexpr@SearchLookuplookup@@NullableMap<String@Object>vars)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3d/f42b53cbb34dec8d8e41248a5067d722ab65a8.src","preCode":"    private NumberSortScript.LeafFactory newSortScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        boolean needsScores = false;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_score\")) {\n                    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n                    needsScores = true;\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    needsScores |= valueSource.getSortField(false).needsScores();\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionNumberSortScript(expr, bindings, needsScores);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2019-12-04 09:55:48","commitOrder":4,"curCode":"    private static AggregationScript.LeafFactory newAggregationScript(Expression expr, SearchLookup lookup,\n        @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        boolean needsScores = false;\n        ReplaceableConstDoubleValueSource specialValue = null;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_score\")) {\n                    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n                    needsScores = true;\n                } else if (variable.equals(\"_value\")) {\n                    specialValue = new ReplaceableConstDoubleValueSource();\n                    bindings.add(\"_value\", specialValue);\n                    \r\n                    \r\n                    \r\n\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    needsScores |= valueSource.getSortField(false).needsScores();\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionAggregationScript(expr, bindings, needsScores, specialValue);\n    }\n","date":"2019-12-04 09:55:48","endLine":268,"groupId":"48244","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"newAggregationScript","params":"(Expressionexpr@SearchLookuplookup@@NullableMap<String@Object>vars)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3d/f42b53cbb34dec8d8e41248a5067d722ab65a8.src","preCode":"    private AggregationScript.LeafFactory newAggregationScript(Expression expr, SearchLookup lookup,\n        @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        boolean needsScores = false;\n        ReplaceableConstDoubleValueSource specialValue = null;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_score\")) {\n                    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n                    needsScores = true;\n                } else if (variable.equals(\"_value\")) {\n                    specialValue = new ReplaceableConstDoubleValueSource();\n                    bindings.add(\"_value\", specialValue);\n                    \r\n                    \r\n                    \r\n\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    needsScores |= valueSource.getSortField(false).needsScores();\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionAggregationScript(expr, bindings, needsScores, specialValue);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"4a078029ed2d7eebe1507ca9bf0a3289df554eb2","commitMessage":"@@@Scripting: add available languages & contexts API (#49652)\n\nAdds `GET /_script_language` to support Kibana dynamic scripting\nlanguage selection.\n\nResponse contains whether `inline` and/or `stored` scripts are\nenabled as determined by the `script.allowed_types` settings.\n\nFor each scripting language registered.  such as `painless`. \n`expression`.  `mustache` or custom.  available contexts for the language\nare included as determined by the `script.allowed_contexts` setting.\n\nResponse format:\n```\n{\n  \"types_allowed\": [\n    \"inline\". \n    \"stored\"\n  ]. \n  \"language_contexts\": [\n    {\n      \"language\": \"expression\". \n      \"contexts\": [\n        \"aggregation_selector\". \n        \"aggs\"\n        ...\n      ]\n    }. \n    {\n      \"language\": \"painless\". \n      \"contexts\": [\n        \"aggregation_selector\". \n        \"aggs\". \n        \"aggs_combine\". \n        ...\n      ]\n    }\n...\n  ]\n}\n```\n\nFixes: #49463\n","date":"2019-12-04 09:55:48","modifiedFileCount":"11","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2020-03-23 22:47:42","codes":[{"authorDate":"2020-03-23 22:47:42","commitOrder":5,"curCode":"    private static NumberSortScript.LeafFactory newSortScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        boolean needsScores = false;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_score\")) {\n                    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n                    needsScores = true;\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final DoubleValuesSource valueSource = getDocValueSource(variable, lookup);\n                    needsScores |= valueSource.needsScores();\n                    bindings.add(variable, valueSource);\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionNumberSortScript(expr, bindings, needsScores);\n    }\n","date":"2020-03-23 22:47:42","endLine":264,"groupId":"101432","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"newSortScript","params":"(Expressionexpr@SearchLookuplookup@@NullableMap<String@Object>vars)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/19/865bd361e6cbe9f5a92c15693b6d0be3ebb104.src","preCode":"    private static NumberSortScript.LeafFactory newSortScript(Expression expr, SearchLookup lookup, @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        boolean needsScores = false;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_score\")) {\n                    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n                    needsScores = true;\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    needsScores |= valueSource.getSortField(false).needsScores();\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionNumberSortScript(expr, bindings, needsScores);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2020-03-23 22:47:42","commitOrder":5,"curCode":"    private static AggregationScript.LeafFactory newAggregationScript(Expression expr, SearchLookup lookup,\n        @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        boolean needsScores = false;\n        ReplaceableConstDoubleValueSource specialValue = null;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_score\")) {\n                    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n                    needsScores = true;\n                } else if (variable.equals(\"_value\")) {\n                    specialValue = new ReplaceableConstDoubleValueSource();\n                    bindings.add(\"_value\", specialValue);\n                    \r\n                    \r\n                    \r\n\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final DoubleValuesSource valueSource = getDocValueSource(variable, lookup);\n                    needsScores |= valueSource.needsScores();\n                    bindings.add(variable, valueSource);\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionAggregationScript(expr, bindings, needsScores, specialValue);\n    }\n","date":"2020-03-23 22:47:42","endLine":322,"groupId":"101432","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"newAggregationScript","params":"(Expressionexpr@SearchLookuplookup@@NullableMap<String@Object>vars)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/19/865bd361e6cbe9f5a92c15693b6d0be3ebb104.src","preCode":"    private static AggregationScript.LeafFactory newAggregationScript(Expression expr, SearchLookup lookup,\n        @Nullable Map<String, Object> vars) {\n        \r\n        \r\n        SimpleBindings bindings = new SimpleBindings();\n        boolean needsScores = false;\n        ReplaceableConstDoubleValueSource specialValue = null;\n        for (String variable : expr.variables) {\n            try {\n                if (variable.equals(\"_score\")) {\n                    bindings.add(new SortField(\"_score\", SortField.Type.SCORE));\n                    needsScores = true;\n                } else if (variable.equals(\"_value\")) {\n                    specialValue = new ReplaceableConstDoubleValueSource();\n                    bindings.add(\"_value\", specialValue);\n                    \r\n                    \r\n                    \r\n\n                } else if (vars != null && vars.containsKey(variable)) {\n                    bindFromParams(vars, bindings, variable);\n                } else {\n                    \r\n                    \r\n                    final ValueSource valueSource = getDocValueSource(variable, lookup);\n                    needsScores |= valueSource.getSortField(false).needsScores();\n                    bindings.add(variable, valueSource.asDoubleValuesSource());\n                }\n            } catch (Exception e) {\n                \r\n                throw convertToScriptException(\"link error\", expr.sourceText, variable, e);\n            }\n        }\n        return new ExpressionAggregationScript(expr, bindings, needsScores, specialValue);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/ExpressionScriptEngine.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"b2a6bd80bcb5533fbf6a605e7294f36b8aca7518","commitMessage":"@@@lang-expressions should use DoubleValuesSource.  not ValueSource (#53661)\n\nDoubleValuesSource is the type-safe replacement for ValueSource in the lucene\ncore. Most of elasticsearch has moved to use these.  but lang-expressions is still\nusing the old version. This commit migrates lang-expressions as well.","date":"2020-03-23 22:47:42","modifiedFileCount":"15","status":"M","submitter":"Alan Woodward"}]
