[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public ANode visitComp(CompContext ctx) {\n        AExpression left = (AExpression)visit(ctx.expression(0));\n        AExpression right = (AExpression)visit(ctx.expression(1));\n        final Operation operation;\n\n        if (ctx.LT() != null) {\n            operation = Operation.LT;\n        } else if (ctx.LTE() != null) {\n            operation = Operation.LTE;\n        } else if (ctx.GT() != null) {\n            operation = Operation.GT;\n        } else if (ctx.GTE() != null) {\n            operation = Operation.GTE;\n        } else if (ctx.EQ() != null) {\n            operation = Operation.EQ;\n        } else if (ctx.EQR() != null) {\n            operation = Operation.EQR;\n        } else if (ctx.NE() != null) {\n            operation = Operation.NE;\n        } else if (ctx.NER() != null) {\n            operation = Operation.NER;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"Illegal tree structure.\"));\n        }\n\n        return new EComp(location(ctx), operation, left, right);\n    }\n","date":"2018-04-26 03:22:53","endLine":610,"groupId":"553","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"visitComp","params":"(CompContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3a/c6cb7fd37c4ca77f24f742babfd50881bac168.src","preCode":"    public ANode visitComp(CompContext ctx) {\n        AExpression left = (AExpression)visit(ctx.expression(0));\n        AExpression right = (AExpression)visit(ctx.expression(1));\n        final Operation operation;\n\n        if (ctx.LT() != null) {\n            operation = Operation.LT;\n        } else if (ctx.LTE() != null) {\n            operation = Operation.LTE;\n        } else if (ctx.GT() != null) {\n            operation = Operation.GT;\n        } else if (ctx.GTE() != null) {\n            operation = Operation.GTE;\n        } else if (ctx.EQ() != null) {\n            operation = Operation.EQ;\n        } else if (ctx.EQR() != null) {\n            operation = Operation.EQR;\n        } else if (ctx.NE() != null) {\n            operation = Operation.NE;\n        } else if (ctx.NER() != null) {\n            operation = Operation.NER;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"Illegal tree structure.\"));\n        }\n\n        return new EComp(location(ctx), operation, left, right);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":584,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public ANode visitBool(BoolContext ctx) {\n        AExpression left = (AExpression)visit(ctx.expression(0));\n        AExpression right = (AExpression)visit(ctx.expression(1));\n        final Operation operation;\n\n        if (ctx.BOOLAND() != null) {\n            operation = Operation.AND;\n        } else if (ctx.BOOLOR() != null) {\n            operation = Operation.OR;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"Illegal tree structure.\"));\n        }\n\n        return new EBool(location(ctx), operation, left, right);\n    }\n","date":"2018-04-26 03:22:53","endLine":635,"groupId":"68604","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"visitBool","params":"(BoolContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3a/c6cb7fd37c4ca77f24f742babfd50881bac168.src","preCode":"    public ANode visitBool(BoolContext ctx) {\n        AExpression left = (AExpression)visit(ctx.expression(0));\n        AExpression right = (AExpression)visit(ctx.expression(1));\n        final Operation operation;\n\n        if (ctx.BOOLAND() != null) {\n            operation = Operation.AND;\n        } else if (ctx.BOOLOR() != null) {\n            operation = Operation.OR;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"Illegal tree structure.\"));\n        }\n\n        return new EBool(location(ctx), operation, left, right);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":621,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2020-02-08 02:08:03","codes":[{"authorDate":"2020-02-08 02:08:03","commitOrder":2,"curCode":"    public ANode visitComp(CompContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.LT() != null) {\n            operation = Operation.LT;\n        } else if (ctx.LTE() != null) {\n            operation = Operation.LTE;\n        } else if (ctx.GT() != null) {\n            operation = Operation.GT;\n        } else if (ctx.GTE() != null) {\n            operation = Operation.GTE;\n        } else if (ctx.EQ() != null) {\n            operation = Operation.EQ;\n        } else if (ctx.EQR() != null) {\n            operation = Operation.EQR;\n        } else if (ctx.NE() != null) {\n            operation = Operation.NE;\n        } else if (ctx.NER() != null) {\n            operation = Operation.NER;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"Illegal tree structure.\"));\n        }\n\n        return new EComp(location(ctx), operation, left, right);\n    }\n","date":"2020-02-08 02:08:03","endLine":605,"groupId":"553","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"visitComp","params":"(CompContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/e79e188f76afe8451767d56798e277e908cfad.src","preCode":"    public ANode visitComp(CompContext ctx) {\n        AExpression left = (AExpression)visit(ctx.expression(0));\n        AExpression right = (AExpression)visit(ctx.expression(1));\n        final Operation operation;\n\n        if (ctx.LT() != null) {\n            operation = Operation.LT;\n        } else if (ctx.LTE() != null) {\n            operation = Operation.LTE;\n        } else if (ctx.GT() != null) {\n            operation = Operation.GT;\n        } else if (ctx.GTE() != null) {\n            operation = Operation.GTE;\n        } else if (ctx.EQ() != null) {\n            operation = Operation.EQ;\n        } else if (ctx.EQR() != null) {\n            operation = Operation.EQR;\n        } else if (ctx.NE() != null) {\n            operation = Operation.NE;\n        } else if (ctx.NER() != null) {\n            operation = Operation.NER;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"Illegal tree structure.\"));\n        }\n\n        return new EComp(location(ctx), operation, left, right);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"M"},{"authorDate":"2020-02-08 02:08:03","commitOrder":2,"curCode":"    public ANode visitBool(BoolContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.BOOLAND() != null) {\n            operation = Operation.AND;\n        } else if (ctx.BOOLOR() != null) {\n            operation = Operation.OR;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"Illegal tree structure.\"));\n        }\n\n        return new EBool(location(ctx), operation, left, right);\n    }\n","date":"2020-02-08 02:08:03","endLine":630,"groupId":"68604","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"visitBool","params":"(BoolContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/e79e188f76afe8451767d56798e277e908cfad.src","preCode":"    public ANode visitBool(BoolContext ctx) {\n        AExpression left = (AExpression)visit(ctx.expression(0));\n        AExpression right = (AExpression)visit(ctx.expression(1));\n        final Operation operation;\n\n        if (ctx.BOOLAND() != null) {\n            operation = Operation.AND;\n        } else if (ctx.BOOLOR() != null) {\n            operation = Operation.OR;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"Illegal tree structure.\"));\n        }\n\n        return new EBool(location(ctx), operation, left, right);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":616,"status":"M"}],"commitId":"aec932aefa0c2696465ebd9ae2b6b4870f49f340","commitMessage":"@@@Improve Painless compilation performance for nested conditionals (#52056)\n\nThis PR changes how conditional expression is handled in `PainlessParser`\nin a way that avoids the need for backtracking.  which led to exponential\ncompilation times in case of nested conditionals.\n\nThe test was added ensures that we can compile deeply nested conditionals.\n\nCo-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>\n","date":"2020-02-08 02:08:03","modifiedFileCount":"6","status":"M","submitter":"Przemko Robakowski"},{"authorTime":"2020-05-15 01:24:31","codes":[{"authorDate":"2020-05-15 01:24:31","commitOrder":3,"curCode":"    public ANode visitComp(CompContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.LT() != null) {\n            operation = Operation.LT;\n        } else if (ctx.LTE() != null) {\n            operation = Operation.LTE;\n        } else if (ctx.GT() != null) {\n            operation = Operation.GT;\n        } else if (ctx.GTE() != null) {\n            operation = Operation.GTE;\n        } else if (ctx.EQ() != null) {\n            operation = Operation.EQ;\n        } else if (ctx.EQR() != null) {\n            operation = Operation.EQR;\n        } else if (ctx.NE() != null) {\n            operation = Operation.NE;\n        } else if (ctx.NER() != null) {\n            operation = Operation.NER;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"illegal tree structure\"));\n        }\n\n        return new EComp(location(ctx), operation, left, right);\n    }\n","date":"2020-05-15 01:24:31","endLine":611,"groupId":"553","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"visitComp","params":"(CompContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/96112e0d50727fb37ebfea241e1b1052343445.src","preCode":"    public ANode visitComp(CompContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.LT() != null) {\n            operation = Operation.LT;\n        } else if (ctx.LTE() != null) {\n            operation = Operation.LTE;\n        } else if (ctx.GT() != null) {\n            operation = Operation.GT;\n        } else if (ctx.GTE() != null) {\n            operation = Operation.GTE;\n        } else if (ctx.EQ() != null) {\n            operation = Operation.EQ;\n        } else if (ctx.EQR() != null) {\n            operation = Operation.EQR;\n        } else if (ctx.NE() != null) {\n            operation = Operation.NE;\n        } else if (ctx.NER() != null) {\n            operation = Operation.NER;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"Illegal tree structure.\"));\n        }\n\n        return new EComp(location(ctx), operation, left, right);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":585,"status":"M"},{"authorDate":"2020-05-15 01:24:31","commitOrder":3,"curCode":"    public ANode visitBool(BoolContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.BOOLAND() != null) {\n            operation = Operation.AND;\n        } else if (ctx.BOOLOR() != null) {\n            operation = Operation.OR;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"illegal tree structure\"));\n        }\n\n        return new EBool(location(ctx), operation, left, right);\n    }\n","date":"2020-05-15 01:24:31","endLine":636,"groupId":"68604","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"visitBool","params":"(BoolContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/96112e0d50727fb37ebfea241e1b1052343445.src","preCode":"    public ANode visitBool(BoolContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.BOOLAND() != null) {\n            operation = Operation.AND;\n        } else if (ctx.BOOLOR() != null) {\n            operation = Operation.OR;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"Illegal tree structure.\"));\n        }\n\n        return new EBool(location(ctx), operation, left, right);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":622,"status":"M"}],"commitId":"53ea60836198c4924c29e2416b9c4a6d23e0406c","commitMessage":"@@@Remove the lexer hack in Painless (#56293)\n\nBackground:\n\nThe lexer-hack (https://en.wikipedia.org/wiki/Lexer_hack) was used in Painless \nto add contextual information around types during lexing. This made the the \nlexer/grammar much simpler.  and allowed us to build a user tree with full typing \ninformation at creation.\n\nLimitations:\n\nForcing the lexer to know about type information up front requires that we \nknow all types when building the user tree.  so this limits us from a number of \nthings including the following:\n\n* good.  consistent error messages as types fail during lexing which gives very \npoor error messaging since this should be purely syntax errors\n* compiling against different contexts as a possible use case for ensuring a \nstored script is valid for at least one context\n* pursuing new front ends such as a possible template language based on \nPainless\n* using the existing grammar to introduce an auto-completion API\n* the potential of adding new features with specialized types\n\nResults:\n\nThis change removes the lexer hack by doing all type checking as part of the \nsemantic pass against the user tree. The lexer now keywords on the primitives \nand def types while the user tree will use a symbol node instead of a variable \nnode that can potentially be either a type.  a piece of a package name.  or a \nvariable. One important change is that the dot operator is now overridden. This \nmeans that a dot operator may indicate a piece of a package name or a field \n(a.b could be access field b from variable a or could be the static type a.b). Logic \nhas been introduced to account for this overloaded operator including checks in \nthe expression nodes to ensure they aren't mistakenly using an unexpected \nstatic type or an unknown partial type.","date":"2020-05-15 01:24:31","modifiedFileCount":"53","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-06-13 00:26:05","codes":[{"authorDate":"2020-06-13 00:26:05","commitOrder":4,"curCode":"    public ANode visitComp(CompContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.LT() != null) {\n            operation = Operation.LT;\n        } else if (ctx.LTE() != null) {\n            operation = Operation.LTE;\n        } else if (ctx.GT() != null) {\n            operation = Operation.GT;\n        } else if (ctx.GTE() != null) {\n            operation = Operation.GTE;\n        } else if (ctx.EQ() != null) {\n            operation = Operation.EQ;\n        } else if (ctx.EQR() != null) {\n            operation = Operation.EQR;\n        } else if (ctx.NE() != null) {\n            operation = Operation.NE;\n        } else if (ctx.NER() != null) {\n            operation = Operation.NER;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"illegal tree structure\"));\n        }\n\n        return new EComp(nextIdentifier(), location(ctx), left, right, operation);\n    }\n","date":"2020-06-13 00:26:05","endLine":620,"groupId":"553","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"visitComp","params":"(CompContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/69/b155d94e7fa9d99bfce6c511dda50ae97b994b.src","preCode":"    public ANode visitComp(CompContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.LT() != null) {\n            operation = Operation.LT;\n        } else if (ctx.LTE() != null) {\n            operation = Operation.LTE;\n        } else if (ctx.GT() != null) {\n            operation = Operation.GT;\n        } else if (ctx.GTE() != null) {\n            operation = Operation.GTE;\n        } else if (ctx.EQ() != null) {\n            operation = Operation.EQ;\n        } else if (ctx.EQR() != null) {\n            operation = Operation.EQR;\n        } else if (ctx.NE() != null) {\n            operation = Operation.NE;\n        } else if (ctx.NER() != null) {\n            operation = Operation.NER;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"illegal tree structure\"));\n        }\n\n        return new EComp(location(ctx), operation, left, right);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"M"},{"authorDate":"2020-06-13 00:26:05","commitOrder":4,"curCode":"    public ANode visitBool(BoolContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.BOOLAND() != null) {\n            operation = Operation.AND;\n        } else if (ctx.BOOLOR() != null) {\n            operation = Operation.OR;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"illegal tree structure\"));\n        }\n\n        return new EBool(nextIdentifier(), location(ctx), left, right, operation);\n    }\n","date":"2020-06-13 00:26:05","endLine":645,"groupId":"68604","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"visitBool","params":"(BoolContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/69/b155d94e7fa9d99bfce6c511dda50ae97b994b.src","preCode":"    public ANode visitBool(BoolContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.BOOLAND() != null) {\n            operation = Operation.AND;\n        } else if (ctx.BOOLOR() != null) {\n            operation = Operation.OR;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"illegal tree structure\"));\n        }\n\n        return new EBool(location(ctx), operation, left, right);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"M"}],"commitId":"4301e6ec179c5b0caf48b5f15e4386da88047038","commitMessage":"@@@Painless mechanical changes to support external passes (#56784)\n\nThese changes are made in mind to support \"external\" compiler passes that \nhava a user tree as purely data using decorations moving forward. The changes \nare mostly mechanical.\n\nThe following has been modified/added:\n\n* Now that the user tree has a set number of nodes and the structure is \nimmutable.  each node is assigned an id. This id is intended for use when \nlooking up future decorations to avoid hash look ups against user tree nodes. \nThe range of the ids is [0.  number-of-nodes). This allows an array-style look up \nfor nodes in the tree.\n* All members of the user tree node are made private.  and getters are added \nfor each of these. This allows external passes to access appropriate members \nthat are fully immutable.\n* Some member names for the user tree nodes have changed to be more easily \nunderstood.\n* EVariable is changed to ESymbol since we no longer know if this node is a type \nor variable or package name.\n","date":"2020-06-13 00:26:05","modifiedFileCount":"50","status":"M","submitter":"Jack Conradson"},{"authorTime":"2020-07-16 02:58:10","codes":[{"authorDate":"2020-06-13 00:26:05","commitOrder":5,"curCode":"    public ANode visitComp(CompContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.LT() != null) {\n            operation = Operation.LT;\n        } else if (ctx.LTE() != null) {\n            operation = Operation.LTE;\n        } else if (ctx.GT() != null) {\n            operation = Operation.GT;\n        } else if (ctx.GTE() != null) {\n            operation = Operation.GTE;\n        } else if (ctx.EQ() != null) {\n            operation = Operation.EQ;\n        } else if (ctx.EQR() != null) {\n            operation = Operation.EQR;\n        } else if (ctx.NE() != null) {\n            operation = Operation.NE;\n        } else if (ctx.NER() != null) {\n            operation = Operation.NER;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"illegal tree structure\"));\n        }\n\n        return new EComp(nextIdentifier(), location(ctx), left, right, operation);\n    }\n","date":"2020-06-13 00:26:05","endLine":620,"groupId":"101236","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"visitComp","params":"(CompContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/69/b155d94e7fa9d99bfce6c511dda50ae97b994b.src","preCode":"    public ANode visitComp(CompContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.LT() != null) {\n            operation = Operation.LT;\n        } else if (ctx.LTE() != null) {\n            operation = Operation.LTE;\n        } else if (ctx.GT() != null) {\n            operation = Operation.GT;\n        } else if (ctx.GTE() != null) {\n            operation = Operation.GTE;\n        } else if (ctx.EQ() != null) {\n            operation = Operation.EQ;\n        } else if (ctx.EQR() != null) {\n            operation = Operation.EQR;\n        } else if (ctx.NE() != null) {\n            operation = Operation.NE;\n        } else if (ctx.NER() != null) {\n            operation = Operation.NER;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"illegal tree structure\"));\n        }\n\n        return new EComp(nextIdentifier(), location(ctx), left, right, operation);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"N"},{"authorDate":"2020-07-16 02:58:10","commitOrder":5,"curCode":"    public ANode visitBool(BoolContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.BOOLAND() != null) {\n            operation = Operation.AND;\n        } else if (ctx.BOOLOR() != null) {\n            operation = Operation.OR;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"illegal tree structure\"));\n        }\n\n        return new EBooleanComp(nextIdentifier(), location(ctx), left, right, operation);\n    }\n","date":"2020-07-16 02:58:10","endLine":638,"groupId":"101236","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"visitBool","params":"(BoolContextctx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/72/173fe26b50ee34be9342571e359171dc067e7d.src","preCode":"    public ANode visitBool(BoolContext ctx) {\n        AExpression left = (AExpression)visit(ctx.noncondexpression(0));\n        AExpression right = (AExpression)visit(ctx.noncondexpression(1));\n        final Operation operation;\n\n        if (ctx.BOOLAND() != null) {\n            operation = Operation.AND;\n        } else if (ctx.BOOLOR() != null) {\n            operation = Operation.OR;\n        } else {\n            throw location(ctx).createError(new IllegalStateException(\"illegal tree structure\"));\n        }\n\n        return new EBool(nextIdentifier(), location(ctx), left, right, operation);\n    }\n","realPath":"modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/Walker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":624,"status":"M"}],"commitId":"b5e9352e34866f37ed55cfd1f42807e82a9d5f91","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-16 02:58:10","modifiedFileCount":"235","status":"M","submitter":"Nik Everett"}]
