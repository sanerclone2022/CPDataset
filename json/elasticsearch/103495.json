[{"authorTime":"2020-10-13 02:52:13","codes":[{"authorDate":"2020-04-24 00:40:04","commitOrder":4,"curCode":"    public void testExactOnUnsupportedField() throws Exception {\n        MatchQueryBuilder query = new MatchQueryBuilder(GEO_POINT_FIELD_NAME, \"2,3\");\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class, () -> query.toQuery(context));\n        assertEquals(\"Geometry fields do not support exact searching, use dedicated geometry queries instead: \" +\n            \"[mapped_geo_point]\", e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","date":"2020-04-24 00:40:04","endLine":298,"groupId":"52788","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExactOnUnsupportedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/24/8e9fb03ee5f2d0a6f37ebd66f7b6fc455de4a7.src","preCode":"    public void testExactOnUnsupportedField() throws Exception {\n        MatchQueryBuilder query = new MatchQueryBuilder(GEO_POINT_FIELD_NAME, \"2,3\");\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class, () -> query.toQuery(context));\n        assertEquals(\"Geometry fields do not support exact searching, use dedicated geometry queries instead: \" +\n            \"[mapped_geo_point]\", e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"NB"},{"authorDate":"2020-10-13 02:52:13","commitOrder":4,"curCode":"    public void testLenientFlag() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"test\").defaultField(BINARY_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context));\n        assertEquals(\"Field [mapped_binary] of type [binary does not support match queries\", e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), instanceOf(MatchNoDocsQuery.class));\n    }\n","date":"2020-10-13 02:52:13","endLine":877,"groupId":"69027","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLenientFlag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/53/d1b58ea8aa8fccbc7b73556190410d7f119fc1.src","preCode":"    public void testLenientFlag() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"test\").defaultField(BINARY_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context));\n        assertEquals(\"Field [mapped_binary] of type [binary does not support match queries\", e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), instanceOf(MatchNoDocsQuery.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":870,"status":"B"}],"commitId":"1e949ca10d45adeec480ff9d2dbe856f612d04d4","commitMessage":"@@@Match query to respect lenient flag (#63555)\n\nA recent change introduced throwing exception when a match query is executed against a field that does not support text search. The query would fail anyways.  only at a later stage. The problem though is that the lenient flag needs to be taken into account.","date":"2020-10-13 02:52:13","modifiedFileCount":"6","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-10-13 17:05:43","codes":[{"authorDate":"2020-10-13 17:05:43","commitOrder":5,"curCode":"    public void testExactOnUnsupportedField() throws Exception {\n        MatchQueryBuilder query = new MatchQueryBuilder(GEO_POINT_FIELD_NAME, \"2,3\");\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context));\n        assertEquals(\"Field [mapped_geo_point] of type [geo_point] does not support match queries\", e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), Matchers.instanceOf(MatchNoDocsQuery.class));\n    }\n","date":"2020-10-13 17:05:43","endLine":298,"groupId":"69027","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExactOnUnsupportedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5f/16c0379d90b2591dbff92dd360a786596ff512.src","preCode":"    public void testExactOnUnsupportedField() throws Exception {\n        MatchQueryBuilder query = new MatchQueryBuilder(GEO_POINT_FIELD_NAME, \"2,3\");\n        QueryShardContext context = createShardContext();\n        QueryShardException e = expectThrows(QueryShardException.class, () -> query.toQuery(context));\n        assertEquals(\"Geometry fields do not support exact searching, use dedicated geometry queries instead: \" +\n            \"[mapped_geo_point]\", e.getMessage());\n        query.lenient(true);\n        query.toQuery(context); \r\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"},{"authorDate":"2020-10-13 17:05:43","commitOrder":5,"curCode":"    public void testLenientFlag() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"test\").defaultField(BINARY_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context));\n        assertEquals(\"Field [mapped_binary] of type [binary] does not support match queries\", e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), instanceOf(MatchNoDocsQuery.class));\n    }\n","date":"2020-10-13 17:05:43","endLine":875,"groupId":"69027","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLenientFlag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4a/f6362b36df743eddff434b6a83acf6c5ea297b.src","preCode":"    public void testLenientFlag() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"test\").defaultField(BINARY_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context));\n        assertEquals(\"Field [mapped_binary] of type [binary does not support match queries\", e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), instanceOf(MatchNoDocsQuery.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":868,"status":"M"}],"commitId":"f491422e1edf79ea08d5657b5035f4a5ee444442","commitMessage":"@@@Ensure field types consistency on supporting text queries (#63487)\n\nSome supported field types don't support term queries.  and throw exception in their termQuery method. That exception is either an IllegalArgumentException or a QueryShardException. There is logic in MatchQuery that skips the field or not depending on the exception that is thrown.\n\nAlso.  such field types should hold a TextSearchInfo.NONE while that is not always the case.\n\nWith this commit we make the following changes:\n\n- streamline using TextSearchInfo.NONE in all field types that don't support text queries\n- standardize the exception being thrown when a field type does not support term queries to be IllegalArgumentException. Note that this is not a breaking change as both exceptions previously returned translated to 400 status code.\n- Adapt the MatchQuery logic to skip fields that don't support term queries. There is no need to call termQuery passing an empty string and catch exceptions potentially thrown. We can rather check the TextSearchInfo which tells already whether the field supports text queries or not.\n- add a test method to MapperTestCase that verifies the consistency of a field type by verifying that it is not searchable whenever it uses TextSearchInfo.NONE.  while it is otherwise. This is what triggered all of the above changes.","date":"2020-10-13 17:05:43","modifiedFileCount":"41","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":6,"curCode":"    public void testExactOnUnsupportedField() throws Exception {\n        MatchQueryBuilder query = new MatchQueryBuilder(GEO_POINT_FIELD_NAME, \"2,3\");\n        SearchExecutionContext context = createSearchExecutionContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context));\n        assertEquals(\"Field [mapped_geo_point] of type [geo_point] does not support match queries\", e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), Matchers.instanceOf(MatchNoDocsQuery.class));\n    }\n","date":"2021-01-15 01:11:59","endLine":298,"groupId":"103495","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExactOnUnsupportedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fe/bef003dadd4ecf44f88693de56c7329680117c.src","preCode":"    public void testExactOnUnsupportedField() throws Exception {\n        MatchQueryBuilder query = new MatchQueryBuilder(GEO_POINT_FIELD_NAME, \"2,3\");\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context));\n        assertEquals(\"Field [mapped_geo_point] of type [geo_point] does not support match queries\", e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), Matchers.instanceOf(MatchNoDocsQuery.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":6,"curCode":"    public void testLenientFlag() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"test\").defaultField(BINARY_FIELD_NAME);\n        SearchExecutionContext context = createSearchExecutionContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context));\n        assertEquals(\"Field [mapped_binary] of type [binary] does not support match queries\", e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), instanceOf(MatchNoDocsQuery.class));\n    }\n","date":"2021-01-15 01:11:59","endLine":875,"groupId":"103495","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLenientFlag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/f2b7c45a7bb331c91e314966d9eec736b3e669.src","preCode":"    public void testLenientFlag() throws Exception {\n        QueryStringQueryBuilder query = queryStringQuery(\"test\").defaultField(BINARY_FIELD_NAME);\n        QueryShardContext context = createShardContext();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> query.toQuery(context));\n        assertEquals(\"Field [mapped_binary] of type [binary] does not support match queries\", e.getMessage());\n        query.lenient(true);\n        assertThat(query.toQuery(context), instanceOf(MatchNoDocsQuery.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":868,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
