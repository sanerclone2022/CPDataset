[{"authorTime":"2019-07-01 22:02:36","codes":[{"authorDate":"2019-07-01 22:02:36","commitOrder":1,"curCode":"    public void testMatchAllDocs() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset,\n            aggregation -> aggregation.field(LONG_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }, ValueType.NUMERIC\n        );\n        testBothCases(query, dataset,\n            aggregation -> aggregation.field(KEYWORD_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKeyAsString(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }, ValueType.STRING\n        );\n    }\n","date":"2019-07-01 22:02:36","endLine":130,"groupId":"33067","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchAllDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a0/d48b7ab778f30d1fe6ac2a993519363c68ec52.src","preCode":"    public void testMatchAllDocs() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset,\n            aggregation -> aggregation.field(LONG_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }, ValueType.NUMERIC\n        );\n        testBothCases(query, dataset,\n            aggregation -> aggregation.field(KEYWORD_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKeyAsString(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }, ValueType.STRING\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"},{"authorDate":"2019-07-01 22:02:36","commitOrder":1,"curCode":"    public void testManyDocsOneRare() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        List<Long> d = new ArrayList<>(500);\n        for (int i = 1; i < 500; i++) {\n            d.add((long) i);\n            d.add((long) i);\n        }\n\n        \r\n        d.add(0L);\n\n        testSearchAndReduceCase(query, d,\n            aggregation -> aggregation.field(LONG_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(0L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }, ValueType.NUMERIC\n        );\n        testSearchAndReduceCase(query, d,\n            aggregation -> aggregation.field(KEYWORD_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKeyAsString(), equalTo(\"0\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }, ValueType.STRING\n        );\n    }\n","date":"2019-07-01 22:02:36","endLine":162,"groupId":"57758","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testManyDocsOneRare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a0/d48b7ab778f30d1fe6ac2a993519363c68ec52.src","preCode":"    public void testManyDocsOneRare() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        List<Long> d = new ArrayList<>(500);\n        for (int i = 1; i < 500; i++) {\n            d.add((long) i);\n            d.add((long) i);\n        }\n\n        \r\n        d.add(0L);\n\n        testSearchAndReduceCase(query, d,\n            aggregation -> aggregation.field(LONG_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(0L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }, ValueType.NUMERIC\n        );\n        testSearchAndReduceCase(query, d,\n            aggregation -> aggregation.field(KEYWORD_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKeyAsString(), equalTo(\"0\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }, ValueType.STRING\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"}],"commitId":"baf155dced6280951320bc188c13f4307f2bd5b9","commitMessage":"@@@Add RareTerms aggregation (#35718)\n\nThis adds a `rare_terms` aggregation.  It is an aggregation designed\nto identify the long-tail of keywords.  e.g. terms that are \"rare\" or\nhave low doc counts.\n\nThis aggregation is designed to be more memory efficient than the\nalternative.  which is setting a terms aggregation to size: LONG_MAX\n(or worse.  ordering a terms agg by count ascending.  which has\nunbounded error).\n\nThis aggregation works by maintaining a map of terms that have\nbeen seen. A counter associated with each value is incremented\nwhen we see the term again.  If the counter surpasses a predefined\nthreshold.  the term is removed from the map and inserted into a cuckoo\nfilter.  If a future term is found in the cuckoo filter we assume it\nwas previously removed from the map and is \"common\".\n\nThe map keys are the \"rare\" terms after collection is done.\n\n","date":"2019-07-01 22:02:36","modifiedFileCount":"7","status":"B","submitter":"Zachary Tong"},{"authorTime":"2020-06-13 04:23:20","codes":[{"authorDate":"2020-06-13 04:23:20","commitOrder":2,"curCode":"    public void testMatchAllDocs() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset,\n            aggregation -> aggregation.field(LONG_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }\n        );\n        testBothCases(query, dataset,\n            aggregation -> aggregation.field(KEYWORD_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKeyAsString(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }\n        );\n    }\n","date":"2020-06-13 04:23:20","endLine":133,"groupId":"33067","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchAllDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/4baa80b8da810db0c045b63a9e3373b8348b46.src","preCode":"    public void testMatchAllDocs() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset,\n            aggregation -> aggregation.field(LONG_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }, ValueType.NUMERIC\n        );\n        testBothCases(query, dataset,\n            aggregation -> aggregation.field(KEYWORD_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKeyAsString(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }, ValueType.STRING\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-06-13 04:23:20","commitOrder":2,"curCode":"    public void testManyDocsOneRare() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        List<Long> d = new ArrayList<>(500);\n        for (int i = 1; i < 500; i++) {\n            d.add((long) i);\n            d.add((long) i);\n        }\n\n        \r\n        d.add(0L);\n\n        testSearchAndReduceCase(query, d,\n            aggregation -> aggregation.field(LONG_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(0L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }\n        );\n        testSearchAndReduceCase(query, d,\n            aggregation -> aggregation.field(KEYWORD_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKeyAsString(), equalTo(\"0\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }\n        );\n    }\n","date":"2020-06-13 04:23:20","endLine":165,"groupId":"57758","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testManyDocsOneRare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/4baa80b8da810db0c045b63a9e3373b8348b46.src","preCode":"    public void testManyDocsOneRare() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        List<Long> d = new ArrayList<>(500);\n        for (int i = 1; i < 500; i++) {\n            d.add((long) i);\n            d.add((long) i);\n        }\n\n        \r\n        d.add(0L);\n\n        testSearchAndReduceCase(query, d,\n            aggregation -> aggregation.field(LONG_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(0L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }, ValueType.NUMERIC\n        );\n        testSearchAndReduceCase(query, d,\n            aggregation -> aggregation.field(KEYWORD_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKeyAsString(), equalTo(\"0\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }, ValueType.STRING\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"}],"commitId":"933565d54c81fac7830e721a823abd8f98cbb1a8","commitMessage":"@@@Save memory when rare_terms is not on top (#57948)\n\nThis uses the optimization that we started making in #55873 for\n`rare_terms` to save a bit of memory when that aggregation is not on the\ntop level.\n","date":"2020-06-13 04:23:20","modifiedFileCount":"8","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-08-07 05:14:20","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":3,"curCode":"    public void testMatchAllDocs() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testSearchCase(query, dataset,\n            aggregation -> aggregation.field(LONG_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }\n        );\n        testSearchCase(query, dataset,\n            aggregation -> aggregation.field(KEYWORD_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKeyAsString(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }\n        );\n    }\n","date":"2020-08-07 05:14:20","endLine":133,"groupId":"105181","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMatchAllDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/e8ca6f681478850bed8393aeea8a5d0baf6433.src","preCode":"    public void testMatchAllDocs() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        testBothCases(query, dataset,\n            aggregation -> aggregation.field(LONG_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(1L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }\n        );\n        testBothCases(query, dataset,\n            aggregation -> aggregation.field(KEYWORD_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKeyAsString(), equalTo(\"1\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-08-07 05:14:20","commitOrder":3,"curCode":"    public void testManyDocsOneRare() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        List<Long> d = new ArrayList<>(500);\n        for (int i = 1; i < 500; i++) {\n            d.add((long) i);\n            d.add((long) i);\n        }\n\n        \r\n        d.add(0L);\n\n        testSearchCase(query, d,\n            aggregation -> aggregation.field(LONG_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(0L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }\n        );\n        testSearchCase(query, d,\n            aggregation -> aggregation.field(KEYWORD_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKeyAsString(), equalTo(\"0\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }\n        );\n    }\n","date":"2020-08-07 05:14:20","endLine":165,"groupId":"105181","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testManyDocsOneRare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/e8ca6f681478850bed8393aeea8a5d0baf6433.src","preCode":"    public void testManyDocsOneRare() throws IOException {\n        Query query = new MatchAllDocsQuery();\n\n        List<Long> d = new ArrayList<>(500);\n        for (int i = 1; i < 500; i++) {\n            d.add((long) i);\n            d.add((long) i);\n        }\n\n        \r\n        d.add(0L);\n\n        testSearchAndReduceCase(query, d,\n            aggregation -> aggregation.field(LONG_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                LongRareTerms.Bucket bucket = (LongRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKey(), equalTo(0L));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }\n        );\n        testSearchAndReduceCase(query, d,\n            aggregation -> aggregation.field(KEYWORD_FIELD).maxDocCount(1),\n            agg -> {\n                assertEquals(1, agg.getBuckets().size());\n                StringRareTerms.Bucket bucket = (StringRareTerms.Bucket) agg.getBuckets().get(0);\n                assertThat(bucket.getKeyAsString(), equalTo(\"0\"));\n                assertThat(bucket.getDocCount(), equalTo(1L));\n            }\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/RareTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"}],"commitId":"5e3ea6eb11c68bdcc9adda51715a6e1fea9186d6","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-07 05:14:20","modifiedFileCount":"73","status":"M","submitter":"Nik Everett"}]
