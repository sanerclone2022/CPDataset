[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        final Query luceneQuery = rewrittenRange.toQuery(queryShardContext);\n        final Query expectedQuery;\n        if (getCurrentTypes().length > 0) {\n            if (queryShardContext.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_1_0)\n                    && queryShardContext.fieldMapper(query.fieldName()).hasDocValues()) {\n                expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n            } else {\n                expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n            }\n        } else {\n            expectedQuery = new MatchNoDocsQuery(\"no mappings yet\");\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n    }\n","date":"2018-04-26 03:22:53","endLine":440,"groupId":"26364","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRewriteDateToMatchAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/68c7dec17a0808937666f22e9c5ba3772acc10.src","preCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        final Query luceneQuery = rewrittenRange.toQuery(queryShardContext);\n        final Query expectedQuery;\n        if (getCurrentTypes().length > 0) {\n            if (queryShardContext.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_1_0)\n                    && queryShardContext.fieldMapper(query.fieldName()).hasDocValues()) {\n                expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n            } else {\n                expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n            }\n        } else {\n            expectedQuery = new MatchNoDocsQuery(\"no mappings yet\");\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomFrom(DateTimeZone.getAvailableIDs()));\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","date":"2018-04-26 03:22:53","endLine":465,"groupId":"26365","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRewriteDateToMatchAllWithTimezoneAndFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/68c7dec17a0808937666f22e9c5ba3772acc10.src","preCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomFrom(DateTimeZone.getAvailableIDs()));\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":2,"curCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        Query luceneQuery = rewrittenRange.toQuery(queryShardContext);\n        final Query expectedQuery;\n        if (queryShardContext.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_1_0)\n                && queryShardContext.fieldMapper(query.fieldName()).hasDocValues()) {\n            expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n        } else {\n            expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n\n        QueryShardContext queryShardContextWithUnkType = createShardContextWithNoType();\n        luceneQuery  = rewrittenRange.toQuery(queryShardContextWithUnkType);\n        assertThat(luceneQuery, equalTo(new MatchNoDocsQuery(\"no mappings yet\")));\n    }\n","date":"2018-07-27 17:51:09","endLine":433,"groupId":"26002","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRewriteDateToMatchAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6b/e12cc841a59787caae74062c46536010973d4c.src","preCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        final Query luceneQuery = rewrittenRange.toQuery(queryShardContext);\n        final Query expectedQuery;\n        if (getCurrentTypes().length > 0) {\n            if (queryShardContext.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_1_0)\n                    && queryShardContext.fieldMapper(query.fieldName()).hasDocValues()) {\n                expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n            } else {\n                expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n            }\n        } else {\n            expectedQuery = new MatchNoDocsQuery(\"no mappings yet\");\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomFrom(DateTimeZone.getAvailableIDs()));\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","date":"2018-04-26 03:22:53","endLine":465,"groupId":"26365","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRewriteDateToMatchAllWithTimezoneAndFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/68c7dec17a0808937666f22e9c5ba3772acc10.src","preCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomFrom(DateTimeZone.getAvailableIDs()));\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"N"}],"commitId":"dfb277cfb7969ad543a31dea234579d0e886a73a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-27 17:51:09","modifiedFileCount":"105","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-11-01 01:47:07","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":3,"curCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        Query luceneQuery = rewrittenRange.toQuery(queryShardContext);\n        final Query expectedQuery;\n        if (queryShardContext.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_1_0)\n                && queryShardContext.fieldMapper(query.fieldName()).hasDocValues()) {\n            expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n        } else {\n            expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n\n        QueryShardContext queryShardContextWithUnkType = createShardContextWithNoType();\n        luceneQuery  = rewrittenRange.toQuery(queryShardContextWithUnkType);\n        assertThat(luceneQuery, equalTo(new MatchNoDocsQuery(\"no mappings yet\")));\n    }\n","date":"2018-07-27 17:51:09","endLine":433,"groupId":"26002","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRewriteDateToMatchAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6b/e12cc841a59787caae74062c46536010973d4c.src","preCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        Query luceneQuery = rewrittenRange.toQuery(queryShardContext);\n        final Query expectedQuery;\n        if (queryShardContext.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_1_0)\n                && queryShardContext.fieldMapper(query.fieldName()).hasDocValues()) {\n            expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n        } else {\n            expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n\n        QueryShardContext queryShardContextWithUnkType = createShardContextWithNoType();\n        luceneQuery  = rewrittenRange.toQuery(queryShardContextWithUnkType);\n        assertThat(luceneQuery, equalTo(new MatchNoDocsQuery(\"no mappings yet\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"N"},{"authorDate":"2018-11-01 01:47:07","commitOrder":3,"curCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomDateTimeZone().getID());\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","date":"2018-11-01 01:47:07","endLine":458,"groupId":"27749","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRewriteDateToMatchAllWithTimezoneAndFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/e157255b6b702d6293195fc9e2dc4df1a25ce0.src","preCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomFrom(DateTimeZone.getAvailableIDs()));\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"M"}],"commitId":"d5d28420b636275705d7998a88592b4060b905db","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-11-01 01:47:07","modifiedFileCount":"168","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-01-23 17:40:05","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":4,"curCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        Query luceneQuery = rewrittenRange.toQuery(queryShardContext);\n        final Query expectedQuery;\n        if (queryShardContext.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_1_0)\n                && queryShardContext.fieldMapper(query.fieldName()).hasDocValues()) {\n            expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n        } else {\n            expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n\n        QueryShardContext queryShardContextWithUnkType = createShardContextWithNoType();\n        luceneQuery  = rewrittenRange.toQuery(queryShardContextWithUnkType);\n        assertThat(luceneQuery, equalTo(new MatchNoDocsQuery(\"no mappings yet\")));\n    }\n","date":"2018-07-27 17:51:09","endLine":433,"groupId":"26002","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRewriteDateToMatchAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6b/e12cc841a59787caae74062c46536010973d4c.src","preCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        Query luceneQuery = rewrittenRange.toQuery(queryShardContext);\n        final Query expectedQuery;\n        if (queryShardContext.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_1_0)\n                && queryShardContext.fieldMapper(query.fieldName()).hasDocValues()) {\n            expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n        } else {\n            expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n\n        QueryShardContext queryShardContextWithUnkType = createShardContextWithNoType();\n        luceneQuery  = rewrittenRange.toQuery(queryShardContextWithUnkType);\n        assertThat(luceneQuery, equalTo(new MatchNoDocsQuery(\"no mappings yet\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"N"},{"authorDate":"2019-01-23 17:40:05","commitOrder":4,"curCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomZone().getId());\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","date":"2019-01-23 17:40:05","endLine":464,"groupId":"27749","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRewriteDateToMatchAllWithTimezoneAndFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/f2c89d645f9f46bdc600ac7aa3be80d97d7f6f.src","preCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomDateTimeZone().getID());\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"M"}],"commitId":"daa2ec8a605d385a65b9ab3e89d016b3fd0dffe2","commitMessage":"@@@Switch mapping/aggregations over to java time (#36363)\n\nThis commit moves the aggregation and mapping code from joda time to\njava time. This includes field mappers.  root object mappers.  aggregations with date\nhistograms.  query builders and a lot of changes within tests.\n\nThe cut-over to java time is a requirement so that we can support nanoseconds\nproperly in a future field mapper.\n\nRelates #27330","date":"2019-01-23 17:40:05","modifiedFileCount":"154","status":"M","submitter":"Alexander Reelsen"},{"authorTime":"2019-01-23 17:40:05","codes":[{"authorDate":"2019-05-15 22:48:11","commitOrder":5,"curCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        Query luceneQuery = rewrittenRange.toQuery(queryShardContext);\n        final Query expectedQuery;\n        if (queryShardContext.fieldMapper(query.fieldName()).hasDocValues()) {\n            expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n        } else {\n            expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n\n        QueryShardContext queryShardContextWithUnkType = createShardContextWithNoType();\n        luceneQuery  = rewrittenRange.toQuery(queryShardContextWithUnkType);\n        assertThat(luceneQuery, equalTo(new MatchNoDocsQuery(\"no mappings yet\")));\n    }\n","date":"2019-05-15 22:48:11","endLine":435,"groupId":"29205","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRewriteDateToMatchAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/70a8c7113b590f09c3f6dd393bb43cc10f39c6.src","preCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        Query luceneQuery = rewrittenRange.toQuery(queryShardContext);\n        final Query expectedQuery;\n        if (queryShardContext.getIndexSettings().getIndexVersionCreated().onOrAfter(Version.V_6_1_0)\n                && queryShardContext.fieldMapper(query.fieldName()).hasDocValues()) {\n            expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n        } else {\n            expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n\n        QueryShardContext queryShardContextWithUnkType = createShardContextWithNoType();\n        luceneQuery  = rewrittenRange.toQuery(queryShardContextWithUnkType);\n        assertThat(luceneQuery, equalTo(new MatchNoDocsQuery(\"no mappings yet\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"M"},{"authorDate":"2019-01-23 17:40:05","commitOrder":5,"curCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomZone().getId());\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","date":"2019-01-23 17:40:05","endLine":464,"groupId":"27749","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRewriteDateToMatchAllWithTimezoneAndFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/f2c89d645f9f46bdc600ac7aa3be80d97d7f6f.src","preCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomZone().getId());\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"N"}],"commitId":"4b28f5b57c0836b0cf99fe8351a41ddc21563972","commitMessage":"@@@remove backcompat handling of 6.1.x versions (#42032)\n\nrelates to refactoring initiative #41164.","date":"2019-05-15 22:48:11","modifiedFileCount":"26","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-01-23 17:40:05","codes":[{"authorDate":"2020-10-07 22:11:53","commitOrder":6,"curCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        Query luceneQuery = rewrittenRange.toQuery(queryShardContext);\n        final Query expectedQuery;\n        if (queryShardContext.getFieldType(query.fieldName()).hasDocValues()) {\n            expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n        } else {\n            expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n\n        QueryShardContext queryShardContextWithUnkType = createShardContextWithNoType();\n        luceneQuery  = rewrittenRange.toQuery(queryShardContextWithUnkType);\n        assertThat(luceneQuery, equalTo(new MatchNoDocsQuery(\"no mappings yet\")));\n    }\n","date":"2020-10-07 22:11:53","endLine":425,"groupId":"8320","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRewriteDateToMatchAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/f7eae86b55cc812c1a58a49ffcd7c6ccdb5211.src","preCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        Query luceneQuery = rewrittenRange.toQuery(queryShardContext);\n        final Query expectedQuery;\n        if (queryShardContext.fieldMapper(query.fieldName()).hasDocValues()) {\n            expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n        } else {\n            expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n\n        QueryShardContext queryShardContextWithUnkType = createShardContextWithNoType();\n        luceneQuery  = rewrittenRange.toQuery(queryShardContextWithUnkType);\n        assertThat(luceneQuery, equalTo(new MatchNoDocsQuery(\"no mappings yet\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"},{"authorDate":"2019-01-23 17:40:05","commitOrder":6,"curCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomZone().getId());\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","date":"2019-01-23 17:40:05","endLine":464,"groupId":"27749","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRewriteDateToMatchAllWithTimezoneAndFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/f2c89d645f9f46bdc600ac7aa3be80d97d7f6f.src","preCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomZone().getId());\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"N"}],"commitId":"95582da9a57086c1bf519b300ffc420d03448e28","commitMessage":"@@@Rename QueryShardContext#fieldMapper to getFieldType (#63399)\n\nGiven that we have a class called `FieldMapper` and that the `fieldMapper` method exposed by `QueryShardContext` actually allows to get a `MappedFieldType` given its name.  this commit renames such method to `getFieldType`","date":"2020-10-07 22:11:53","modifiedFileCount":"72","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":7,"curCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        SearchExecutionContext searchExecutionContext = createSearchExecutionContext();\n        QueryBuilder rewritten = query.rewrite(searchExecutionContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        Query luceneQuery = rewrittenRange.toQuery(searchExecutionContext);\n        final Query expectedQuery;\n        if (searchExecutionContext.getFieldType(query.fieldName()).hasDocValues()) {\n            expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n        } else {\n            expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n\n        SearchExecutionContext searchExecutionContextWithUnkType = createShardContextWithNoType();\n        luceneQuery  = rewrittenRange.toQuery(searchExecutionContextWithUnkType);\n        assertThat(luceneQuery, equalTo(new MatchNoDocsQuery(\"no mappings yet\")));\n    }\n","date":"2021-01-15 01:11:59","endLine":426,"groupId":"103348","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRewriteDateToMatchAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/36fc51b7d6f8e83b7adf536461df5ff174b3fe.src","preCode":"    public void testRewriteDateToMatchAll() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n\n        \r\n        Query luceneQuery = rewrittenRange.toQuery(queryShardContext);\n        final Query expectedQuery;\n        if (queryShardContext.getFieldType(query.fieldName()).hasDocValues()) {\n            expectedQuery = new ConstantScoreQuery(new DocValuesFieldExistsQuery(query.fieldName()));\n        } else {\n            expectedQuery = new ConstantScoreQuery(new TermQuery(new Term(FieldNamesFieldMapper.NAME, query.fieldName())));\n        }\n        assertThat(luceneQuery, equalTo(expectedQuery));\n\n        QueryShardContext queryShardContextWithUnkType = createShardContextWithNoType();\n        luceneQuery  = rewrittenRange.toQuery(queryShardContextWithUnkType);\n        assertThat(luceneQuery, equalTo(new MatchNoDocsQuery(\"no mappings yet\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":7,"curCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomZone().getId());\n        query.format(\"yyyy-MM-dd\");\n        SearchExecutionContext searchExecutionContext = createSearchExecutionContext();\n        QueryBuilder rewritten = query.rewrite(searchExecutionContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","date":"2021-01-15 01:11:59","endLine":451,"groupId":"103348","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRewriteDateToMatchAllWithTimezoneAndFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/36fc51b7d6f8e83b7adf536461df5ff174b3fe.src","preCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomZone().getId());\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
