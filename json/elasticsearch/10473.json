[{"authorTime":"2018-07-25 17:39:14","codes":[{"authorDate":"2018-07-25 17:39:14","commitOrder":1,"curCode":"    public void testConvertIntHexError() {\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random());\n        String value = \"0x\" + randomAlphaOfLengthBetween(1, 10);\n        String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, value);\n        Processor processor = new ConvertProcessor(randomAlphaOfLength(10), fieldName, fieldName, Type.INTEGER, false);\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument));\n        assertThat(e.getMessage(), equalTo(\"unable to convert [\" + value + \"] to integer\"));\n    }\n","date":"2018-07-25 17:39:14","endLine":77,"groupId":"41610","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvertIntHexError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f0/fc31dab35331d92048813ec7e9dbd27d9ff946.src","preCode":"    public void testConvertIntHexError() {\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random());\n        String value = \"0x\" + randomAlphaOfLengthBetween(1, 10);\n        String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, value);\n        Processor processor = new ConvertProcessor(randomAlphaOfLength(10), fieldName, fieldName, Type.INTEGER, false);\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument));\n        assertThat(e.getMessage(), equalTo(\"unable to convert [\" + value + \"] to integer\"));\n    }\n","realPath":"modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ConvertProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2018-07-25 17:39:14","commitOrder":1,"curCode":"    public void testConvertLongHexError() {\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random());\n        String value = \"0x\" + randomAlphaOfLengthBetween(1, 10);\n        String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, value);\n        Processor processor = new ConvertProcessor(randomAlphaOfLength(10), fieldName, fieldName, Type.LONG, false);\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument));\n        assertThat(e.getMessage(), equalTo(\"unable to convert [\" + value + \"] to long\"));\n    }\n","date":"2018-07-25 17:39:14","endLine":147,"groupId":"66364","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConvertLongHexError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f0/fc31dab35331d92048813ec7e9dbd27d9ff946.src","preCode":"    public void testConvertLongHexError() {\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random());\n        String value = \"0x\" + randomAlphaOfLengthBetween(1, 10);\n        String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, value);\n        Processor processor = new ConvertProcessor(randomAlphaOfLength(10), fieldName, fieldName, Type.LONG, false);\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument));\n        assertThat(e.getMessage(), equalTo(\"unable to convert [\" + value + \"] to long\"));\n    }\n","realPath":"modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ConvertProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"B"}],"commitId":"81faa2fe6b73a251aa16c17fb6266d56b5205b2b","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-25 17:39:14","modifiedFileCount":"13","status":"B","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-08-01 02:50:33","codes":[{"authorDate":"2018-08-01 02:50:33","commitOrder":2,"curCode":"    public void testConvertIntHexError() {\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random());\n        String value = \"0xnotanumber\";\n        String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, value);\n        Processor processor = new ConvertProcessor(randomAlphaOfLength(10), fieldName, fieldName, Type.INTEGER, false);\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument));\n        assertThat(e.getMessage(), equalTo(\"unable to convert [\" + value + \"] to integer\"));\n    }\n","date":"2018-08-01 02:50:33","endLine":77,"groupId":"41610","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvertIntHexError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/fd4ec27a3b3f2663850c4c35922c70ea723825.src","preCode":"    public void testConvertIntHexError() {\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random());\n        String value = \"0x\" + randomAlphaOfLengthBetween(1, 10);\n        String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, value);\n        Processor processor = new ConvertProcessor(randomAlphaOfLength(10), fieldName, fieldName, Type.INTEGER, false);\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument));\n        assertThat(e.getMessage(), equalTo(\"unable to convert [\" + value + \"] to integer\"));\n    }\n","realPath":"modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ConvertProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2018-08-01 02:50:33","commitOrder":2,"curCode":"    public void testConvertLongHexError() {\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random());\n        String value = \"0xnotanumber\";\n        String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, value);\n        Processor processor = new ConvertProcessor(randomAlphaOfLength(10), fieldName, fieldName, Type.LONG, false);\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument));\n        assertThat(e.getMessage(), equalTo(\"unable to convert [\" + value + \"] to long\"));\n    }\n","date":"2018-08-01 02:50:33","endLine":147,"groupId":"66364","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConvertLongHexError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/fd4ec27a3b3f2663850c4c35922c70ea723825.src","preCode":"    public void testConvertLongHexError() {\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random());\n        String value = \"0x\" + randomAlphaOfLengthBetween(1, 10);\n        String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, value);\n        Processor processor = new ConvertProcessor(randomAlphaOfLength(10), fieldName, fieldName, Type.LONG, false);\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument));\n        assertThat(e.getMessage(), equalTo(\"unable to convert [\" + value + \"] to long\"));\n    }\n","realPath":"modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ConvertProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"73cdfaf07be5c8afe00c5dd4e5c6741b152086d5","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-01 02:50:33","modifiedFileCount":"116","status":"M","submitter":"Tal Levy"},{"authorTime":"2020-06-16 05:08:29","codes":[{"authorDate":"2020-06-16 05:08:29","commitOrder":3,"curCode":"    public void testConvertIntHexError() {\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random());\n        String value = \"0xnotanumber\";\n        String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, value);\n        Processor processor = new ConvertProcessor(randomAlphaOfLength(10), null, fieldName, fieldName, Type.INTEGER, false);\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument));\n        assertThat(e.getMessage(), equalTo(\"unable to convert [\" + value + \"] to integer\"));\n    }\n","date":"2020-06-16 05:08:29","endLine":77,"groupId":"10473","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvertIntHexError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/02/598f41348581ae337a899567dcb6093cc41421.src","preCode":"    public void testConvertIntHexError() {\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random());\n        String value = \"0xnotanumber\";\n        String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, value);\n        Processor processor = new ConvertProcessor(randomAlphaOfLength(10), fieldName, fieldName, Type.INTEGER, false);\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument));\n        assertThat(e.getMessage(), equalTo(\"unable to convert [\" + value + \"] to integer\"));\n    }\n","realPath":"modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ConvertProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-06-16 05:08:29","commitOrder":3,"curCode":"    public void testConvertLongHexError() {\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random());\n        String value = \"0xnotanumber\";\n        String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, value);\n        Processor processor = new ConvertProcessor(randomAlphaOfLength(10), null, fieldName, fieldName, Type.LONG, false);\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument));\n        assertThat(e.getMessage(), equalTo(\"unable to convert [\" + value + \"] to long\"));\n    }\n","date":"2020-06-16 05:08:29","endLine":147,"groupId":"10473","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testConvertLongHexError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/02/598f41348581ae337a899567dcb6093cc41421.src","preCode":"    public void testConvertLongHexError() {\n        IngestDocument ingestDocument = RandomDocumentPicks.randomIngestDocument(random());\n        String value = \"0xnotanumber\";\n        String fieldName = RandomDocumentPicks.addRandomField(random(), ingestDocument, value);\n        Processor processor = new ConvertProcessor(randomAlphaOfLength(10), fieldName, fieldName, Type.LONG, false);\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> processor.execute(ingestDocument));\n        assertThat(e.getMessage(), equalTo(\"unable to convert [\" + value + \"] to long\"));\n    }\n","realPath":"modules/ingest-common/src/test/java/org/elasticsearch/ingest/common/ConvertProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"69a6a18d8dc3f95001cfe6f55c1451ac616f7e84","commitMessage":"@@@Add optional description parameter to ingest processors. (#57906)\n\nThis commit adds an optional field.  `description`.  to all ingest processors\nso that users can explain the purpose of the specific processor instance.\n\nCloses #56000.","date":"2020-06-16 05:08:29","modifiedFileCount":"125","status":"M","submitter":"Tal Levy"}]
