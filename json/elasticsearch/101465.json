[{"authorTime":"2018-11-08 21:13:00","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testParentChild() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n\n        final Map<String, Tuple<Integer, Integer>> expectedParentChildRelations = setupIndex(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory),\n                new ShardId(new Index(\"foo\", \"_na_\"), 1));\n        \r\n        IndexSearcher indexSearcher = newSearcher(indexReader, false, true);\n\n        testCase(new MatchAllDocsQuery(), indexSearcher, child -> {\n            int expectedTotalChildren = 0;\n            int expectedMinValue = Integer.MAX_VALUE;\n            for (Tuple<Integer, Integer> expectedValues : expectedParentChildRelations.values()) {\n                expectedTotalChildren += expectedValues.v1();\n                expectedMinValue = Math.min(expectedMinValue, expectedValues.v2());\n            }\n            assertEquals(expectedTotalChildren, child.getDocCount());\n            assertEquals(expectedMinValue, ((InternalMin) child.getAggregations().get(\"in_child\")).getValue(), Double.MIN_VALUE);\n        });\n\n        for (String parent : expectedParentChildRelations.keySet()) {\n            testCase(new TermInSetQuery(IdFieldMapper.NAME, Uid.encodeId(parent)), indexSearcher, child -> {\n                assertEquals((long) expectedParentChildRelations.get(parent).v1(), child.getDocCount());\n                assertEquals(expectedParentChildRelations.get(parent).v2(),\n                        ((InternalMin) child.getAggregations().get(\"in_child\")).getValue(), Double.MIN_VALUE);\n            });\n        }\n        indexReader.close();\n        directory.close();\n    }\n","date":"2018-04-26 03:22:53","endLine":120,"groupId":"36103","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParentChild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/557256ce0029c9f807f379f33c2ad376f39d5c.src","preCode":"    public void testParentChild() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n\n        final Map<String, Tuple<Integer, Integer>> expectedParentChildRelations = setupIndex(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory),\n                new ShardId(new Index(\"foo\", \"_na_\"), 1));\n        \r\n        IndexSearcher indexSearcher = newSearcher(indexReader, false, true);\n\n        testCase(new MatchAllDocsQuery(), indexSearcher, child -> {\n            int expectedTotalChildren = 0;\n            int expectedMinValue = Integer.MAX_VALUE;\n            for (Tuple<Integer, Integer> expectedValues : expectedParentChildRelations.values()) {\n                expectedTotalChildren += expectedValues.v1();\n                expectedMinValue = Math.min(expectedMinValue, expectedValues.v2());\n            }\n            assertEquals(expectedTotalChildren, child.getDocCount());\n            assertEquals(expectedMinValue, ((InternalMin) child.getAggregations().get(\"in_child\")).getValue(), Double.MIN_VALUE);\n        });\n\n        for (String parent : expectedParentChildRelations.keySet()) {\n            testCase(new TermInSetQuery(IdFieldMapper.NAME, Uid.encodeId(parent)), indexSearcher, child -> {\n                assertEquals((long) expectedParentChildRelations.get(parent).v1(), child.getDocCount());\n                assertEquals(expectedParentChildRelations.get(parent).v2(),\n                        ((InternalMin) child.getAggregations().get(\"in_child\")).getValue(), Double.MIN_VALUE);\n            });\n        }\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"modules/parent-join/src/test/java/org/elasticsearch/join/aggregations/ParentToChildrenAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"NB"},{"authorDate":"2018-11-08 21:13:00","commitOrder":2,"curCode":"    public void testParentChild() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n\n        final Map<String, Tuple<Integer, Integer>> expectedParentChildRelations = setupIndex(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory),\n                new ShardId(new Index(\"foo\", \"_na_\"), 1));\n        \r\n        IndexSearcher indexSearcher = newSearcher(indexReader, false, true);\n\n        \r\n        testCase(new MatchAllDocsQuery(), indexSearcher, parent -> {\n            int expectedTotalParents = 0;\n            int expectedMinValue = Integer.MAX_VALUE;\n            for (Tuple<Integer, Integer> expectedValues : expectedParentChildRelations.values()) {\n                expectedTotalParents++;\n                expectedMinValue = Math.min(expectedMinValue, expectedValues.v2());\n            }\n            assertEquals(\"Having \" + parent.getDocCount() + \" docs and aggregation results: \" +\n                    parent.getAggregations().asMap(),\n                expectedTotalParents, parent.getDocCount());\n            assertEquals(expectedMinValue, ((InternalMin) parent.getAggregations().get(\"in_parent\")).getValue(), Double.MIN_VALUE);\n        });\n\n        \r\n        for (String parent : expectedParentChildRelations.keySet()) {\n            testCase(new TermInSetQuery(IdFieldMapper.NAME, Uid.encodeId(\"child0_\" + parent)),\n                indexSearcher, aggregation -> {\n                assertEquals(\"Expected one result for min-aggregation for parent: \" + parent +\n                        \", but had aggregation-results: \" + aggregation,\n                    1, aggregation.getDocCount());\n                assertEquals(expectedParentChildRelations.get(parent).v2(),\n                        ((InternalMin) aggregation.getAggregations().get(\"in_parent\")).getValue(), Double.MIN_VALUE);\n            });\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2018-11-08 21:13:00","endLine":138,"groupId":"17407","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParentChild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/68/5c872fa72d43c00f1ec527a4921b290fc288ae.src","preCode":"    public void testParentChild() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n\n        final Map<String, Tuple<Integer, Integer>> expectedParentChildRelations = setupIndex(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory),\n                new ShardId(new Index(\"foo\", \"_na_\"), 1));\n        \r\n        IndexSearcher indexSearcher = newSearcher(indexReader, false, true);\n\n        \r\n        testCase(new MatchAllDocsQuery(), indexSearcher, parent -> {\n            int expectedTotalParents = 0;\n            int expectedMinValue = Integer.MAX_VALUE;\n            for (Tuple<Integer, Integer> expectedValues : expectedParentChildRelations.values()) {\n                expectedTotalParents++;\n                expectedMinValue = Math.min(expectedMinValue, expectedValues.v2());\n            }\n            assertEquals(\"Having \" + parent.getDocCount() + \" docs and aggregation results: \" +\n                    parent.getAggregations().asMap(),\n                expectedTotalParents, parent.getDocCount());\n            assertEquals(expectedMinValue, ((InternalMin) parent.getAggregations().get(\"in_parent\")).getValue(), Double.MIN_VALUE);\n        });\n\n        \r\n        for (String parent : expectedParentChildRelations.keySet()) {\n            testCase(new TermInSetQuery(IdFieldMapper.NAME, Uid.encodeId(\"child0_\" + parent)),\n                indexSearcher, aggregation -> {\n                assertEquals(\"Expected one result for min-aggregation for parent: \" + parent +\n                        \", but had aggregation-results: \" + aggregation,\n                    1, aggregation.getDocCount());\n                assertEquals(expectedParentChildRelations.get(parent).v2(),\n                        ((InternalMin) aggregation.getAggregations().get(\"in_parent\")).getValue(), Double.MIN_VALUE);\n            });\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"modules/parent-join/src/test/java/org/elasticsearch/join/aggregations/ChildrenToParentAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"}],"commitId":"d351422215548f518e497f78df32210ae245e260","commitMessage":"@@@Add parent-aggregation to parent-join module (#34210)\n\nAdd `parent` aggregation.  a special single bucket aggregation that joins children documents to their parent.","date":"2018-11-08 21:13:00","modifiedFileCount":"7","status":"M","submitter":"Dominik Stadler"},{"authorTime":"2019-01-23 01:38:55","codes":[{"authorDate":"2019-01-23 01:38:55","commitOrder":3,"curCode":"    public void testParentChild() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n\n        final Map<String, Tuple<Integer, Integer>> expectedParentChildRelations = setupIndex(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory),\n                new ShardId(new Index(\"foo\", \"_na_\"), 1));\n        \r\n        IndexSearcher indexSearcher = newSearcher(indexReader, false, true);\n\n        testCase(new MatchAllDocsQuery(), indexSearcher, child -> {\n            int expectedTotalChildren = 0;\n            int expectedMinValue = Integer.MAX_VALUE;\n            for (Tuple<Integer, Integer> expectedValues : expectedParentChildRelations.values()) {\n                expectedTotalChildren += expectedValues.v1();\n                expectedMinValue = Math.min(expectedMinValue, expectedValues.v2());\n            }\n            assertEquals(expectedTotalChildren, child.getDocCount());\n            assertTrue(JoinAggregationInspectionHelper.hasValue(child));\n            assertEquals(expectedMinValue, ((InternalMin) child.getAggregations().get(\"in_child\")).getValue(), Double.MIN_VALUE);\n        });\n\n        for (String parent : expectedParentChildRelations.keySet()) {\n            testCase(new TermInSetQuery(IdFieldMapper.NAME, Uid.encodeId(parent)), indexSearcher, child -> {\n                assertEquals((long) expectedParentChildRelations.get(parent).v1(), child.getDocCount());\n                assertEquals(expectedParentChildRelations.get(parent).v2(),\n                        ((InternalMin) child.getAggregations().get(\"in_child\")).getValue(), Double.MIN_VALUE);\n            });\n        }\n        indexReader.close();\n        directory.close();\n    }\n","date":"2019-01-23 01:38:55","endLine":121,"groupId":"36103","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testParentChild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/90/23f3f0485ba56160f5b3b7633678efe0377d70.src","preCode":"    public void testParentChild() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n\n        final Map<String, Tuple<Integer, Integer>> expectedParentChildRelations = setupIndex(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory),\n                new ShardId(new Index(\"foo\", \"_na_\"), 1));\n        \r\n        IndexSearcher indexSearcher = newSearcher(indexReader, false, true);\n\n        testCase(new MatchAllDocsQuery(), indexSearcher, child -> {\n            int expectedTotalChildren = 0;\n            int expectedMinValue = Integer.MAX_VALUE;\n            for (Tuple<Integer, Integer> expectedValues : expectedParentChildRelations.values()) {\n                expectedTotalChildren += expectedValues.v1();\n                expectedMinValue = Math.min(expectedMinValue, expectedValues.v2());\n            }\n            assertEquals(expectedTotalChildren, child.getDocCount());\n            assertEquals(expectedMinValue, ((InternalMin) child.getAggregations().get(\"in_child\")).getValue(), Double.MIN_VALUE);\n        });\n\n        for (String parent : expectedParentChildRelations.keySet()) {\n            testCase(new TermInSetQuery(IdFieldMapper.NAME, Uid.encodeId(parent)), indexSearcher, child -> {\n                assertEquals((long) expectedParentChildRelations.get(parent).v1(), child.getDocCount());\n                assertEquals(expectedParentChildRelations.get(parent).v2(),\n                        ((InternalMin) child.getAggregations().get(\"in_child\")).getValue(), Double.MIN_VALUE);\n            });\n        }\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"modules/parent-join/src/test/java/org/elasticsearch/join/aggregations/ParentToChildrenAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2019-01-23 01:38:55","commitOrder":3,"curCode":"    public void testParentChild() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n\n        final Map<String, Tuple<Integer, Integer>> expectedParentChildRelations = setupIndex(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory),\n                new ShardId(new Index(\"foo\", \"_na_\"), 1));\n        \r\n        IndexSearcher indexSearcher = newSearcher(indexReader, false, true);\n\n        \r\n        testCase(new MatchAllDocsQuery(), indexSearcher, parent -> {\n            int expectedTotalParents = 0;\n            int expectedMinValue = Integer.MAX_VALUE;\n            for (Tuple<Integer, Integer> expectedValues : expectedParentChildRelations.values()) {\n                expectedTotalParents++;\n                expectedMinValue = Math.min(expectedMinValue, expectedValues.v2());\n            }\n            assertEquals(\"Having \" + parent.getDocCount() + \" docs and aggregation results: \" +\n                    parent.getAggregations().asMap(),\n                expectedTotalParents, parent.getDocCount());\n            assertEquals(expectedMinValue, ((InternalMin) parent.getAggregations().get(\"in_parent\")).getValue(), Double.MIN_VALUE);\n            assertTrue(JoinAggregationInspectionHelper.hasValue(parent));\n        });\n\n        \r\n        for (String parent : expectedParentChildRelations.keySet()) {\n            testCase(new TermInSetQuery(IdFieldMapper.NAME, Uid.encodeId(\"child0_\" + parent)),\n                indexSearcher, aggregation -> {\n                assertEquals(\"Expected one result for min-aggregation for parent: \" + parent +\n                        \", but had aggregation-results: \" + aggregation,\n                    1, aggregation.getDocCount());\n                assertEquals(expectedParentChildRelations.get(parent).v2(),\n                        ((InternalMin) aggregation.getAggregations().get(\"in_parent\")).getValue(), Double.MIN_VALUE);\n            });\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2019-01-23 01:38:55","endLine":140,"groupId":"17407","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParentChild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/c7200df6114f6dfb0b1a0ce7140baa4abfa25a.src","preCode":"    public void testParentChild() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n\n        final Map<String, Tuple<Integer, Integer>> expectedParentChildRelations = setupIndex(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory),\n                new ShardId(new Index(\"foo\", \"_na_\"), 1));\n        \r\n        IndexSearcher indexSearcher = newSearcher(indexReader, false, true);\n\n        \r\n        testCase(new MatchAllDocsQuery(), indexSearcher, parent -> {\n            int expectedTotalParents = 0;\n            int expectedMinValue = Integer.MAX_VALUE;\n            for (Tuple<Integer, Integer> expectedValues : expectedParentChildRelations.values()) {\n                expectedTotalParents++;\n                expectedMinValue = Math.min(expectedMinValue, expectedValues.v2());\n            }\n            assertEquals(\"Having \" + parent.getDocCount() + \" docs and aggregation results: \" +\n                    parent.getAggregations().asMap(),\n                expectedTotalParents, parent.getDocCount());\n            assertEquals(expectedMinValue, ((InternalMin) parent.getAggregations().get(\"in_parent\")).getValue(), Double.MIN_VALUE);\n        });\n\n        \r\n        for (String parent : expectedParentChildRelations.keySet()) {\n            testCase(new TermInSetQuery(IdFieldMapper.NAME, Uid.encodeId(\"child0_\" + parent)),\n                indexSearcher, aggregation -> {\n                assertEquals(\"Expected one result for min-aggregation for parent: \" + parent +\n                        \", but had aggregation-results: \" + aggregation,\n                    1, aggregation.getDocCount());\n                assertEquals(expectedParentChildRelations.get(parent).v2(),\n                        ((InternalMin) aggregation.getAggregations().get(\"in_parent\")).getValue(), Double.MIN_VALUE);\n            });\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"modules/parent-join/src/test/java/org/elasticsearch/join/aggregations/ChildrenToParentAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"2ba9e361aba7df6e9c0b5fa8fae3d219d50ddf09","commitMessage":"@@@Add helper classes to determine if aggs have a value (#36020)\n\nThis adds a set of helper classes to determine if an agg \"has a value\". \nThis is needed because InternalAggs represent \"empty\" in different \nmanners according to convention. Some use `NaN`.  `+/- Inf`.  `0.0`.  etc.\n\nA user can pass the Internal agg type to one of these helper methods\nand it will report if the agg contains a value or not.  which allows the\nuser to differentiate \"empty\" from a real `NaN`.\n\nThese helpers are best-effort in some cases.  For example.  several\npipeline aggs share a single return class but use different conventions\nto mark \"empty\".  so the helper uses the loosest definition that applies\nto all the aggs that use the class.\n\nSums in particular are unreliable.  The InternalSum simply returns 0.0\nif the agg is empty (which is correct.  no values == sum of zero).  But this\nalso means the helper cannot differentiate from \"empty\" and `+1 + -1`.","date":"2019-01-23 01:38:55","modifiedFileCount":"45","status":"M","submitter":"Zachary Tong"},{"authorTime":"2020-08-18 01:34:59","codes":[{"authorDate":"2019-01-23 01:38:55","commitOrder":4,"curCode":"    public void testParentChild() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n\n        final Map<String, Tuple<Integer, Integer>> expectedParentChildRelations = setupIndex(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory),\n                new ShardId(new Index(\"foo\", \"_na_\"), 1));\n        \r\n        IndexSearcher indexSearcher = newSearcher(indexReader, false, true);\n\n        testCase(new MatchAllDocsQuery(), indexSearcher, child -> {\n            int expectedTotalChildren = 0;\n            int expectedMinValue = Integer.MAX_VALUE;\n            for (Tuple<Integer, Integer> expectedValues : expectedParentChildRelations.values()) {\n                expectedTotalChildren += expectedValues.v1();\n                expectedMinValue = Math.min(expectedMinValue, expectedValues.v2());\n            }\n            assertEquals(expectedTotalChildren, child.getDocCount());\n            assertTrue(JoinAggregationInspectionHelper.hasValue(child));\n            assertEquals(expectedMinValue, ((InternalMin) child.getAggregations().get(\"in_child\")).getValue(), Double.MIN_VALUE);\n        });\n\n        for (String parent : expectedParentChildRelations.keySet()) {\n            testCase(new TermInSetQuery(IdFieldMapper.NAME, Uid.encodeId(parent)), indexSearcher, child -> {\n                assertEquals((long) expectedParentChildRelations.get(parent).v1(), child.getDocCount());\n                assertEquals(expectedParentChildRelations.get(parent).v2(),\n                        ((InternalMin) child.getAggregations().get(\"in_child\")).getValue(), Double.MIN_VALUE);\n            });\n        }\n        indexReader.close();\n        directory.close();\n    }\n","date":"2019-01-23 01:38:55","endLine":121,"groupId":"101465","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testParentChild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/90/23f3f0485ba56160f5b3b7633678efe0377d70.src","preCode":"    public void testParentChild() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n\n        final Map<String, Tuple<Integer, Integer>> expectedParentChildRelations = setupIndex(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory),\n                new ShardId(new Index(\"foo\", \"_na_\"), 1));\n        \r\n        IndexSearcher indexSearcher = newSearcher(indexReader, false, true);\n\n        testCase(new MatchAllDocsQuery(), indexSearcher, child -> {\n            int expectedTotalChildren = 0;\n            int expectedMinValue = Integer.MAX_VALUE;\n            for (Tuple<Integer, Integer> expectedValues : expectedParentChildRelations.values()) {\n                expectedTotalChildren += expectedValues.v1();\n                expectedMinValue = Math.min(expectedMinValue, expectedValues.v2());\n            }\n            assertEquals(expectedTotalChildren, child.getDocCount());\n            assertTrue(JoinAggregationInspectionHelper.hasValue(child));\n            assertEquals(expectedMinValue, ((InternalMin) child.getAggregations().get(\"in_child\")).getValue(), Double.MIN_VALUE);\n        });\n\n        for (String parent : expectedParentChildRelations.keySet()) {\n            testCase(new TermInSetQuery(IdFieldMapper.NAME, Uid.encodeId(parent)), indexSearcher, child -> {\n                assertEquals((long) expectedParentChildRelations.get(parent).v1(), child.getDocCount());\n                assertEquals(expectedParentChildRelations.get(parent).v2(),\n                        ((InternalMin) child.getAggregations().get(\"in_child\")).getValue(), Double.MIN_VALUE);\n            });\n        }\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"modules/parent-join/src/test/java/org/elasticsearch/join/aggregations/ParentToChildrenAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"},{"authorDate":"2020-08-18 01:34:59","commitOrder":4,"curCode":"    public void testParentChild() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n\n        final Map<String, Tuple<Integer, Integer>> expectedParentChildRelations = setupIndex(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory),\n                new ShardId(new Index(\"foo\", \"_na_\"), 1));\n        \r\n        IndexSearcher indexSearcher = newSearcher(indexReader, false, true);\n\n        \r\n        testCase(new MatchAllDocsQuery(), indexSearcher, parent -> {\n            int expectedTotalParents = 0;\n            int expectedMinValue = Integer.MAX_VALUE;\n            for (Tuple<Integer, Integer> expectedValues : expectedParentChildRelations.values()) {\n                expectedTotalParents++;\n                expectedMinValue = Math.min(expectedMinValue, expectedValues.v2());\n            }\n            assertEquals(\n                \"Having \" + parent.getDocCount() + \" docs and aggregation results: \" + parent,\n                expectedTotalParents,\n                parent.getDocCount()\n            );\n            assertEquals(expectedMinValue, ((InternalMin) parent.getAggregations().get(\"in_parent\")).getValue(), Double.MIN_VALUE);\n            assertTrue(JoinAggregationInspectionHelper.hasValue(parent));\n        });\n\n        \r\n        for (String parent : expectedParentChildRelations.keySet()) {\n            testCase(new TermInSetQuery(IdFieldMapper.NAME, Uid.encodeId(\"child0_\" + parent)),\n                indexSearcher, aggregation -> {\n                assertEquals(\"Expected one result for min-aggregation for parent: \" + parent +\n                        \", but had aggregation-results: \" + aggregation,\n                    1, aggregation.getDocCount());\n                assertEquals(expectedParentChildRelations.get(parent).v2(),\n                        ((InternalMin) aggregation.getAggregations().get(\"in_parent\")).getValue(), Double.MIN_VALUE);\n            });\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","date":"2020-08-18 01:34:59","endLine":145,"groupId":"101465","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testParentChild","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f6/4f8880f9ce967400d8c1d43f31cc24f3b0431c.src","preCode":"    public void testParentChild() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n\n        final Map<String, Tuple<Integer, Integer>> expectedParentChildRelations = setupIndex(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = ElasticsearchDirectoryReader.wrap(DirectoryReader.open(directory),\n                new ShardId(new Index(\"foo\", \"_na_\"), 1));\n        \r\n        IndexSearcher indexSearcher = newSearcher(indexReader, false, true);\n\n        \r\n        testCase(new MatchAllDocsQuery(), indexSearcher, parent -> {\n            int expectedTotalParents = 0;\n            int expectedMinValue = Integer.MAX_VALUE;\n            for (Tuple<Integer, Integer> expectedValues : expectedParentChildRelations.values()) {\n                expectedTotalParents++;\n                expectedMinValue = Math.min(expectedMinValue, expectedValues.v2());\n            }\n            assertEquals(\"Having \" + parent.getDocCount() + \" docs and aggregation results: \" +\n                    parent.getAggregations().asMap(),\n                expectedTotalParents, parent.getDocCount());\n            assertEquals(expectedMinValue, ((InternalMin) parent.getAggregations().get(\"in_parent\")).getValue(), Double.MIN_VALUE);\n            assertTrue(JoinAggregationInspectionHelper.hasValue(parent));\n        });\n\n        \r\n        for (String parent : expectedParentChildRelations.keySet()) {\n            testCase(new TermInSetQuery(IdFieldMapper.NAME, Uid.encodeId(\"child0_\" + parent)),\n                indexSearcher, aggregation -> {\n                assertEquals(\"Expected one result for min-aggregation for parent: \" + parent +\n                        \", but had aggregation-results: \" + aggregation,\n                    1, aggregation.getDocCount());\n                assertEquals(expectedParentChildRelations.get(parent).v2(),\n                        ((InternalMin) aggregation.getAggregations().get(\"in_parent\")).getValue(), Double.MIN_VALUE);\n            });\n        }\n\n        indexReader.close();\n        directory.close();\n    }\n","realPath":"modules/parent-join/src/test/java/org/elasticsearch/join/aggregations/ChildrenToParentAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"99c885e5dad18c791ff91d03542abf85ad983ad7","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-18 01:34:59","modifiedFileCount":"346","status":"M","submitter":"Nik Everett"}]
