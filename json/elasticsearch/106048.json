[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testFileDescriptorLimits() throws NodeValidationException {\n        final boolean osX = randomBoolean(); \r\n        final int limit = osX ? 10240 : 1 << 16;\n        final AtomicLong maxFileDescriptorCount = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.FileDescriptorCheck check;\n        if (osX) {\n            check = new BootstrapChecks.OsXFileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        } else {\n            check = new BootstrapChecks.FileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        }\n\n        final NodeValidationException e =\n                expectThrows(NodeValidationException.class,\n                        () -> BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testFileDescriptorLimits\"));\n        assertThat(e.getMessage(), containsString(\"max file descriptors\"));\n\n        maxFileDescriptorCount.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testFileDescriptorLimits\");\n\n        \r\n        \r\n        maxFileDescriptorCount.set(-1);\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testFileDescriptorLimits\");\n    }\n","date":"2018-04-26 03:22:53","endLine":219,"groupId":"18195","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFileDescriptorLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/ba6d19b39ca1971a93138d54bf312091ec6736.src","preCode":"    public void testFileDescriptorLimits() throws NodeValidationException {\n        final boolean osX = randomBoolean(); \r\n        final int limit = osX ? 10240 : 1 << 16;\n        final AtomicLong maxFileDescriptorCount = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.FileDescriptorCheck check;\n        if (osX) {\n            check = new BootstrapChecks.OsXFileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        } else {\n            check = new BootstrapChecks.FileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        }\n\n        final NodeValidationException e =\n                expectThrows(NodeValidationException.class,\n                        () -> BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testFileDescriptorLimits\"));\n        assertThat(e.getMessage(), containsString(\"max file descriptors\"));\n\n        maxFileDescriptorCount.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testFileDescriptorLimits\");\n\n        \r\n        \r\n        maxFileDescriptorCount.set(-1);\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testFileDescriptorLimits\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testMaxNumberOfThreadsCheck() throws NodeValidationException {\n        final int limit = 1 << 11;\n        final AtomicLong maxNumberOfThreads = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.MaxNumberOfThreadsCheck check = new BootstrapChecks.MaxNumberOfThreadsCheck() {\n            @Override\n            long getMaxNumberOfThreads() {\n                return maxNumberOfThreads.get();\n            }\n        };\n\n        final NodeValidationException e = expectThrows(\n                NodeValidationException.class,\n                () -> BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testMaxNumberOfThreadsCheck\"));\n        assertThat(e.getMessage(), containsString(\"max number of threads\"));\n\n        maxNumberOfThreads.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testMaxNumberOfThreadsCheck\");\n\n        \r\n        \r\n        maxNumberOfThreads.set(-1);\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testMaxNumberOfThreadsCheck\");\n    }\n","date":"2018-04-26 03:22:53","endLine":301,"groupId":"54300","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxNumberOfThreadsCheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/ba6d19b39ca1971a93138d54bf312091ec6736.src","preCode":"    public void testMaxNumberOfThreadsCheck() throws NodeValidationException {\n        final int limit = 1 << 11;\n        final AtomicLong maxNumberOfThreads = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.MaxNumberOfThreadsCheck check = new BootstrapChecks.MaxNumberOfThreadsCheck() {\n            @Override\n            long getMaxNumberOfThreads() {\n                return maxNumberOfThreads.get();\n            }\n        };\n\n        final NodeValidationException e = expectThrows(\n                NodeValidationException.class,\n                () -> BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testMaxNumberOfThreadsCheck\"));\n        assertThat(e.getMessage(), containsString(\"max number of threads\"));\n\n        maxNumberOfThreads.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testMaxNumberOfThreadsCheck\");\n\n        \r\n        \r\n        maxNumberOfThreads.set(-1);\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testMaxNumberOfThreadsCheck\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-08-01 02:50:33","codes":[{"authorDate":"2018-08-01 02:50:33","commitOrder":2,"curCode":"    public void testFileDescriptorLimits() throws NodeValidationException {\n        final boolean osX = randomBoolean(); \r\n        final int limit = osX ? 10240 : 1 << 16;\n        final AtomicLong maxFileDescriptorCount = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.FileDescriptorCheck check;\n        if (osX) {\n            check = new BootstrapChecks.OsXFileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        } else {\n            check = new BootstrapChecks.FileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        }\n\n        final NodeValidationException e =\n                expectThrows(NodeValidationException.class,\n                        () -> BootstrapChecks.check(defaultContext, true, Collections.singletonList(check)));\n        assertThat(e.getMessage(), containsString(\"max file descriptors\"));\n\n        maxFileDescriptorCount.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check));\n\n        \r\n        \r\n        maxFileDescriptorCount.set(-1);\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check));\n    }\n","date":"2018-08-01 02:50:33","endLine":219,"groupId":"18195","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFileDescriptorLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/81/80dd96e8e1855127143c892fce4a468c326574.src","preCode":"    public void testFileDescriptorLimits() throws NodeValidationException {\n        final boolean osX = randomBoolean(); \r\n        final int limit = osX ? 10240 : 1 << 16;\n        final AtomicLong maxFileDescriptorCount = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.FileDescriptorCheck check;\n        if (osX) {\n            check = new BootstrapChecks.OsXFileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        } else {\n            check = new BootstrapChecks.FileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        }\n\n        final NodeValidationException e =\n                expectThrows(NodeValidationException.class,\n                        () -> BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testFileDescriptorLimits\"));\n        assertThat(e.getMessage(), containsString(\"max file descriptors\"));\n\n        maxFileDescriptorCount.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testFileDescriptorLimits\");\n\n        \r\n        \r\n        maxFileDescriptorCount.set(-1);\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testFileDescriptorLimits\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2018-08-01 02:50:33","commitOrder":2,"curCode":"    public void testMaxNumberOfThreadsCheck() throws NodeValidationException {\n        final int limit = 1 << 11;\n        final AtomicLong maxNumberOfThreads = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.MaxNumberOfThreadsCheck check = new BootstrapChecks.MaxNumberOfThreadsCheck() {\n            @Override\n            long getMaxNumberOfThreads() {\n                return maxNumberOfThreads.get();\n            }\n        };\n\n        final NodeValidationException e = expectThrows(\n                NodeValidationException.class,\n                () -> BootstrapChecks.check(defaultContext, true, Collections.singletonList(check)));\n        assertThat(e.getMessage(), containsString(\"max number of threads\"));\n\n        maxNumberOfThreads.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check));\n\n        \r\n        \r\n        maxNumberOfThreads.set(-1);\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check));\n    }\n","date":"2018-08-01 02:50:33","endLine":299,"groupId":"54300","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxNumberOfThreadsCheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/81/80dd96e8e1855127143c892fce4a468c326574.src","preCode":"    public void testMaxNumberOfThreadsCheck() throws NodeValidationException {\n        final int limit = 1 << 11;\n        final AtomicLong maxNumberOfThreads = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.MaxNumberOfThreadsCheck check = new BootstrapChecks.MaxNumberOfThreadsCheck() {\n            @Override\n            long getMaxNumberOfThreads() {\n                return maxNumberOfThreads.get();\n            }\n        };\n\n        final NodeValidationException e = expectThrows(\n                NodeValidationException.class,\n                () -> BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testMaxNumberOfThreadsCheck\"));\n        assertThat(e.getMessage(), containsString(\"max number of threads\"));\n\n        maxNumberOfThreads.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testMaxNumberOfThreadsCheck\");\n\n        \r\n        \r\n        maxNumberOfThreads.set(-1);\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check), \"testMaxNumberOfThreadsCheck\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"}],"commitId":"73cdfaf07be5c8afe00c5dd4e5c6741b152086d5","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-01 02:50:33","modifiedFileCount":"116","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-12-13 13:07:21","codes":[{"authorDate":"2018-12-13 13:07:21","commitOrder":3,"curCode":"    public void testFileDescriptorLimits() throws NodeValidationException {\n        final boolean osX = randomBoolean(); \r\n        final int limit = osX ? 10240 : 1 << 16;\n        final AtomicLong maxFileDescriptorCount = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.FileDescriptorCheck check;\n        if (osX) {\n            check = new BootstrapChecks.OsXFileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        } else {\n            check = new BootstrapChecks.FileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        }\n\n        final NodeValidationException e =\n                expectThrows(NodeValidationException.class,\n                        () -> BootstrapChecks.check(emptyContext, true, Collections.singletonList(check)));\n        assertThat(e.getMessage(), containsString(\"max file descriptors\"));\n\n        maxFileDescriptorCount.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(emptyContext, true, Collections.singletonList(check));\n\n        \r\n        \r\n        maxFileDescriptorCount.set(-1);\n        BootstrapChecks.check(emptyContext, true, Collections.singletonList(check));\n    }\n","date":"2018-12-13 13:07:21","endLine":223,"groupId":"18195","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFileDescriptorLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/625dcc2adefcb72e91cf7e305e1812147f74e4.src","preCode":"    public void testFileDescriptorLimits() throws NodeValidationException {\n        final boolean osX = randomBoolean(); \r\n        final int limit = osX ? 10240 : 1 << 16;\n        final AtomicLong maxFileDescriptorCount = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.FileDescriptorCheck check;\n        if (osX) {\n            check = new BootstrapChecks.OsXFileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        } else {\n            check = new BootstrapChecks.FileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        }\n\n        final NodeValidationException e =\n                expectThrows(NodeValidationException.class,\n                        () -> BootstrapChecks.check(defaultContext, true, Collections.singletonList(check)));\n        assertThat(e.getMessage(), containsString(\"max file descriptors\"));\n\n        maxFileDescriptorCount.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check));\n\n        \r\n        \r\n        maxFileDescriptorCount.set(-1);\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"},{"authorDate":"2018-12-13 13:07:21","commitOrder":3,"curCode":"    public void testMaxNumberOfThreadsCheck() throws NodeValidationException {\n        final int limit = 1 << 11;\n        final AtomicLong maxNumberOfThreads = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.MaxNumberOfThreadsCheck check = new BootstrapChecks.MaxNumberOfThreadsCheck() {\n            @Override\n            long getMaxNumberOfThreads() {\n                return maxNumberOfThreads.get();\n            }\n        };\n\n        final NodeValidationException e = expectThrows(\n                NodeValidationException.class,\n                () -> BootstrapChecks.check(emptyContext, true, Collections.singletonList(check)));\n        assertThat(e.getMessage(), containsString(\"max number of threads\"));\n\n        maxNumberOfThreads.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(emptyContext, true, Collections.singletonList(check));\n\n        \r\n        \r\n        maxNumberOfThreads.set(-1);\n        BootstrapChecks.check(emptyContext, true, Collections.singletonList(check));\n    }\n","date":"2018-12-13 13:07:21","endLine":303,"groupId":"54300","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxNumberOfThreadsCheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/625dcc2adefcb72e91cf7e305e1812147f74e4.src","preCode":"    public void testMaxNumberOfThreadsCheck() throws NodeValidationException {\n        final int limit = 1 << 11;\n        final AtomicLong maxNumberOfThreads = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.MaxNumberOfThreadsCheck check = new BootstrapChecks.MaxNumberOfThreadsCheck() {\n            @Override\n            long getMaxNumberOfThreads() {\n                return maxNumberOfThreads.get();\n            }\n        };\n\n        final NodeValidationException e = expectThrows(\n                NodeValidationException.class,\n                () -> BootstrapChecks.check(defaultContext, true, Collections.singletonList(check)));\n        assertThat(e.getMessage(), containsString(\"max number of threads\"));\n\n        maxNumberOfThreads.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check));\n\n        \r\n        \r\n        maxNumberOfThreads.set(-1);\n        BootstrapChecks.check(defaultContext, true, Collections.singletonList(check));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"}],"commitId":"cd1bec3a06df97a5ec7c135f475d0059dc1bee64","commitMessage":"@@@[refactor] add Environment in BootstrapContext (#36573)\n\nThere are certain BootstrapCheck checks that may need access environment-specific\nvalues. Watcher's EncryptSensitiveDataBootstrapCheck passes in the node's environment\nvia a constructor to bypass the shortcoming in BootstrapContext. This commit\npulls in the node's environment into BootstrapContext.\n\nAnother case is found in #36519.  where it is useful to check the state of the\ndata-path. Since PathUtils.get and Paths.get are forbidden APIs.  we rely on\nthe environment to retrieve references to things like node data paths.\n\nThis means that the BootstrapContext will have the same Settings used in the\nEnvironment.  which currently differs from the Node's settings.","date":"2018-12-13 13:07:21","modifiedFileCount":"23","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-12-13 13:07:21","codes":[{"authorDate":"2019-01-17 06:19:12","commitOrder":4,"curCode":"    public void testFileDescriptorLimits() throws NodeValidationException {\n        final boolean osX = randomBoolean(); \r\n        final int limit = osX ? 10240 : 65535;\n        final AtomicLong maxFileDescriptorCount = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.FileDescriptorCheck check;\n        if (osX) {\n            check = new BootstrapChecks.OsXFileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        } else {\n            check = new BootstrapChecks.FileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        }\n\n        final NodeValidationException e =\n                expectThrows(NodeValidationException.class,\n                        () -> BootstrapChecks.check(emptyContext, true, Collections.singletonList(check)));\n        assertThat(e.getMessage(), containsString(\"max file descriptors\"));\n\n        maxFileDescriptorCount.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(emptyContext, true, Collections.singletonList(check));\n\n        \r\n        \r\n        maxFileDescriptorCount.set(-1);\n        BootstrapChecks.check(emptyContext, true, Collections.singletonList(check));\n    }\n","date":"2019-01-17 06:19:12","endLine":223,"groupId":"106048","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFileDescriptorLimits","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/a3aea37b4c531289231ff6bfbb21d247a68297.src","preCode":"    public void testFileDescriptorLimits() throws NodeValidationException {\n        final boolean osX = randomBoolean(); \r\n        final int limit = osX ? 10240 : 1 << 16;\n        final AtomicLong maxFileDescriptorCount = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.FileDescriptorCheck check;\n        if (osX) {\n            check = new BootstrapChecks.OsXFileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        } else {\n            check = new BootstrapChecks.FileDescriptorCheck() {\n                @Override\n                long getMaxFileDescriptorCount() {\n                    return maxFileDescriptorCount.get();\n                }\n            };\n        }\n\n        final NodeValidationException e =\n                expectThrows(NodeValidationException.class,\n                        () -> BootstrapChecks.check(emptyContext, true, Collections.singletonList(check)));\n        assertThat(e.getMessage(), containsString(\"max file descriptors\"));\n\n        maxFileDescriptorCount.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(emptyContext, true, Collections.singletonList(check));\n\n        \r\n        \r\n        maxFileDescriptorCount.set(-1);\n        BootstrapChecks.check(emptyContext, true, Collections.singletonList(check));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"},{"authorDate":"2018-12-13 13:07:21","commitOrder":4,"curCode":"    public void testMaxNumberOfThreadsCheck() throws NodeValidationException {\n        final int limit = 1 << 11;\n        final AtomicLong maxNumberOfThreads = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.MaxNumberOfThreadsCheck check = new BootstrapChecks.MaxNumberOfThreadsCheck() {\n            @Override\n            long getMaxNumberOfThreads() {\n                return maxNumberOfThreads.get();\n            }\n        };\n\n        final NodeValidationException e = expectThrows(\n                NodeValidationException.class,\n                () -> BootstrapChecks.check(emptyContext, true, Collections.singletonList(check)));\n        assertThat(e.getMessage(), containsString(\"max number of threads\"));\n\n        maxNumberOfThreads.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(emptyContext, true, Collections.singletonList(check));\n\n        \r\n        \r\n        maxNumberOfThreads.set(-1);\n        BootstrapChecks.check(emptyContext, true, Collections.singletonList(check));\n    }\n","date":"2018-12-13 13:07:21","endLine":303,"groupId":"106048","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxNumberOfThreadsCheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/625dcc2adefcb72e91cf7e305e1812147f74e4.src","preCode":"    public void testMaxNumberOfThreadsCheck() throws NodeValidationException {\n        final int limit = 1 << 11;\n        final AtomicLong maxNumberOfThreads = new AtomicLong(randomIntBetween(1, limit - 1));\n        final BootstrapChecks.MaxNumberOfThreadsCheck check = new BootstrapChecks.MaxNumberOfThreadsCheck() {\n            @Override\n            long getMaxNumberOfThreads() {\n                return maxNumberOfThreads.get();\n            }\n        };\n\n        final NodeValidationException e = expectThrows(\n                NodeValidationException.class,\n                () -> BootstrapChecks.check(emptyContext, true, Collections.singletonList(check)));\n        assertThat(e.getMessage(), containsString(\"max number of threads\"));\n\n        maxNumberOfThreads.set(randomIntBetween(limit + 1, Integer.MAX_VALUE));\n\n        BootstrapChecks.check(emptyContext, true, Collections.singletonList(check));\n\n        \r\n        \r\n        maxNumberOfThreads.set(-1);\n        BootstrapChecks.check(emptyContext, true, Collections.singletonList(check));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/BootstrapChecksTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"N"}],"commitId":"18a3e48a4a7aaff948dc209f7c0798b703d439cc","commitMessage":"@@@Change file descriptor limit to 65535 (#37537)\n\nSome systems default to a nofile ulimit of 65535. To reduce the pain of\ndeploying Elasticsearch to such systems.  this commit lowers the required\nlimit from 65536 to 65535.","date":"2019-01-17 06:19:12","modifiedFileCount":"2","status":"M","submitter":"Jason Tedor"}]
