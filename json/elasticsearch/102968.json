[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        DocumentMapper docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = docMapper.parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), nullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n\n        doc = docMapper.parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), notNullValue());\n    }\n","date":"2018-04-26 03:22:53","endLine":91,"groupId":"47521","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeMultiField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/084c50310fcfcbe2355026bbd5e9c8fa318eed.src","preCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        DocumentMapper docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = docMapper.parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), nullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n\n        doc = docMapper.parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), notNullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        DocumentMapper docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = docMapper.parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), nullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n\n        doc = docMapper.parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n    }\n","date":"2018-04-26 03:22:53","endLine":154,"groupId":"47521","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpgradeFromMultiFieldTypeToMultiFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/084c50310fcfcbe2355026bbd5e9c8fa318eed.src","preCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        DocumentMapper docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = docMapper.parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), nullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n\n        doc = docMapper.parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-07-19 02:10:12","codes":[{"authorDate":"2018-07-19 02:10:12","commitOrder":2,"curCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), notNullValue());\n    }\n","date":"2018-07-19 02:10:12","endLine":89,"groupId":"67419","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeMultiField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/80/60c0a3f92c89bf7210a83f5d859b7d7ed3503c.src","preCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        DocumentMapper docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = docMapper.parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), nullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n\n        doc = docMapper.parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), notNullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2018-07-19 02:10:12","commitOrder":2,"curCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n    }\n","date":"2018-07-19 02:10:12","endLine":152,"groupId":"67419","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpgradeFromMultiFieldTypeToMultiFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/80/60c0a3f92c89bf7210a83f5d859b7d7ed3503c.src","preCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        DocumentMapper docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = docMapper.parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), nullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n\n        doc = docMapper.parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        docMapper = mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertNotSame(IndexOptions.NONE, docMapper.mappers().getMapper(\"name\").fieldType().indexOptions());\n        assertThat(docMapper.mappers().getMapper(\"name.indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed2\"), notNullValue());\n        assertThat(docMapper.mappers().getMapper(\"name.not_indexed3\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"a019e723b5475f0ca77063dab45fbcccd1d6559a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-19 02:10:12","modifiedFileCount":"121","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-12-25 03:06:50","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":3,"curCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), notNullValue());\n    }\n","date":"2018-12-25 03:06:50","endLine":89,"groupId":"71478","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeMultiField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fb/a695ba86cac7c99c2783cb58a6f447dee76b16.src","preCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), notNullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2018-12-25 03:06:50","commitOrder":3,"curCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n    }\n","date":"2018-12-25 03:06:50","endLine":152,"groupId":"71478","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpgradeFromMultiFieldTypeToMultiFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fb/a695ba86cac7c99c2783cb58a6f447dee76b16.src","preCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            SourceToParse.source(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"7580d9d925d864b25466d693637b3bd3092d44cf","commitMessage":"@@@Make SourceToParse immutable (#36971)\n\nToday the routing of a SourceToParse is assigned in a separate step\nafter the object is created. We can easily forget to set the routing.\nWith this commit.  the routing must be provided in the constructor of\nSourceToParse.\n\nRelates #36921","date":"2018-12-25 03:06:50","modifiedFileCount":"66","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), notNullValue());\n    }\n","date":"2019-10-15 16:05:29","endLine":89,"groupId":"71478","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeMultiField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a3/9e9892ad6399ec8f41ce7941aa0023837497a6.src","preCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), notNullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n    }\n","date":"2019-10-15 16:05:29","endLine":152,"groupId":"71478","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpgradeFromMultiFieldTypeToMultiFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a3/9e9892ad6399ec8f41ce7941aa0023837497a6.src","preCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"person\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-02-08 02:16:53","codes":[{"authorDate":"2020-02-08 02:16:53","commitOrder":5,"curCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), notNullValue());\n    }\n","date":"2020-02-08 02:16:53","endLine":89,"groupId":"58414","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeMultiField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/1b91700df6c16570e20efd9159769bdd7e31a3.src","preCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), notNullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2020-02-08 02:16:53","commitOrder":5,"curCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n    }\n","date":"2020-02-08 02:16:53","endLine":152,"groupId":"58414","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpgradeFromMultiFieldTypeToMultiFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/1b91700df6c16570e20efd9159769bdd7e31a3.src","preCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertNotSame(IndexOptions.NONE, mapperService.fullName(\"name\").indexOptions());\n        assertThat(mapperService.fullName(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fullName(\"name.not_indexed3\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"e0b3ea041671e7600e8a1b76491f91041940a386","commitMessage":"@@@Rename MapperService#fullName to fieldType. (#52025)\n\nThe new name more accurately describes what the method returns.","date":"2020-02-08 02:16:53","modifiedFileCount":"83","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":6,"curCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), notNullValue());\n    }\n","date":"2020-06-16 00:47:15","endLine":89,"groupId":"58414","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeMultiField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/49/d4504ad2c82ad3767756ee79fffb0f59494a27.src","preCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), notNullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":6,"curCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n    }\n","date":"2020-06-16 00:47:15","endLine":152,"groupId":"58414","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpgradeFromMultiFieldTypeToMultiFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/49/d4504ad2c82ad3767756ee79fffb0f59494a27.src","preCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertNotSame(IndexOptions.NONE, mapperService.fieldType(\"name\").indexOptions());\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":7,"curCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), notNullValue());\n    }\n","date":"2020-06-26 22:33:37","endLine":88,"groupId":"26589","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeMultiField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/0bdcbea27706d48b428ccfec7a284c8dadeb57.src","preCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), notNullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2020-06-26 22:33:37","commitOrder":7,"curCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n    }\n","date":"2020-06-26 22:33:37","endLine":151,"groupId":"26589","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpgradeFromMultiFieldTypeToMultiFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/0bdcbea27706d48b428ccfec7a284c8dadeb57.src","preCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertNotSame(IndexOptions.NONE, mapperService.getLuceneFieldType(\"name\").indexOptions());\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-10-07 17:29:29","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":8,"curCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), notNullValue());\n    }\n","date":"2020-06-26 22:33:37","endLine":88,"groupId":"26589","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeMultiField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/0bdcbea27706d48b428ccfec7a284c8dadeb57.src","preCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), notNullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"},{"authorDate":"2020-10-07 17:29:29","commitOrder":8,"curCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"Cannot update parameter [index] from [true] to [false]\"));\n            assertThat(e.getMessage(), containsString(\"Cannot update parameter [store] from [true] to [false]\"));\n        }\n\n        \r\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n    }\n","date":"2020-10-07 17:29:29","endLine":151,"groupId":"26589","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpgradeFromMultiFieldTypeToMultiFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/c7014c2344794b168412b595c69893238a40e3.src","preCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [index] values\"));\n            assertThat(e.getMessage(), containsString(\"mapper [name] has different [store] values\"));\n        }\n\n        \r\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"f4c85e4562c79e6411801904f2d80e3310c6dbe7","commitMessage":"@@@Convert TextFieldMapper to parametrized form (#63269)\n\nAs a result of this.  we can remove a chunk of code from TypeParsers as well. Tests\nfor search/index mode analyzers have moved into their own file. This commit also\nrationalises the serialization checks for parameters into a single SerializerCheck\ninterface that takes the values includeDefaults.  isConfigured and the value\nitself.\n\nRelates to #62988","date":"2020-10-07 17:29:29","modifiedFileCount":"42","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-10-21 23:16:11","codes":[{"authorDate":"2020-10-21 23:16:11","commitOrder":9,"curCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createMapperService(mapping);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), notNullValue());\n    }\n","date":"2020-10-21 23:16:11","endLine":85,"groupId":"26589","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeMultiField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/99ff3edefb94c71880826c23772c6b8d8228e0.src","preCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), notNullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2020-10-21 23:16:11","commitOrder":9,"curCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createMapperService(mapping);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        Document doc = mapperService.documentMapper().parse(source(b -> b.field(\"name\", \"some name\"))).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(source(b -> b.field(\"name\", \"some name\"))).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"Cannot update parameter [index] from [true] to [false]\"));\n            assertThat(e.getMessage(), containsString(\"Cannot update parameter [store] from [true] to [false]\"));\n        }\n\n        \r\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n    }\n","date":"2020-10-21 23:16:11","endLine":142,"groupId":"33777","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testUpgradeFromMultiFieldTypeToMultiFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/99ff3edefb94c71880826c23772c6b8d8228e0.src","preCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"Cannot update parameter [index] from [true] to [false]\"));\n            assertThat(e.getMessage(), containsString(\"Cannot update parameter [store] from [true] to [false]\"));\n        }\n\n        \r\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"e075e0fab0715a3b484dff5df810f3e0903d110b","commitMessage":"@@@Convert some more tests to MapperServiceTestCase (#63997)\n\nRelates to #62774","date":"2020-10-21 23:16:11","modifiedFileCount":"7","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-06-24 16:56:30","codes":[{"authorDate":"2021-06-24 16:56:30","commitOrder":10,"curCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createMapperService(mapping);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        LuceneDocument doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), notNullValue());\n    }\n","date":"2021-06-24 16:56:30","endLine":73,"groupId":"102968","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"testMergeMultiField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/f22a9cd41c5e20db08b003eb643b8ae26ae35c.src","preCode":"    public void testMergeMultiField() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createMapperService(mapping);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        BytesReference json = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"name\", \"some name\").endObject());\n        Document doc = mapperService.documentMapper().parse(\n            new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(new SourceToParse(\"test\", \"1\", json, XContentType.JSON)).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping3.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping4.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), notNullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":23,"status":"M"},{"authorDate":"2021-06-24 16:56:30","commitOrder":10,"curCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createMapperService(mapping);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        LuceneDocument doc = mapperService.documentMapper().parse(source(b -> b.field(\"name\", \"some name\"))).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(source(b -> b.field(\"name\", \"some name\"))).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"Cannot update parameter [index] from [true] to [false]\"));\n            assertThat(e.getMessage(), containsString(\"Cannot update parameter [store] from [true] to [false]\"));\n        }\n\n        \r\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n    }\n","date":"2021-06-24 16:56:30","endLine":130,"groupId":"102968","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"testUpgradeFromMultiFieldTypeToMultiFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/f22a9cd41c5e20db08b003eb643b8ae26ae35c.src","preCode":"    public void testUpgradeFromMultiFieldTypeToMultiFields() throws Exception {\n        String mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json\");\n        MapperService mapperService = createMapperService(mapping);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), nullValue());\n\n        Document doc = mapperService.documentMapper().parse(source(b -> b.field(\"name\", \"some name\"))).rootDoc();\n        IndexableField f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, nullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), nullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n        doc = mapperService.documentMapper().parse(source(b -> b.field(\"name\", \"some name\"))).rootDoc();\n        f = doc.getField(\"name\");\n        assertThat(f, notNullValue());\n        f = doc.getField(\"name.indexed\");\n        assertThat(f, notNullValue());\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json\");\n        mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n\n\n        mapping = copyToStringFromClasspath(\"/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json\");\n        try {\n            mapperService.merge(\"person\", new CompressedXContent(mapping), MapperService.MergeReason.MAPPING_UPDATE);\n            fail();\n        } catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), containsString(\"Cannot update parameter [index] from [true] to [false]\"));\n            assertThat(e.getMessage(), containsString(\"Cannot update parameter [store] from [true] to [false]\"));\n        }\n\n        \r\n        assertTrue(mapperService.fieldType(\"name\").isSearchable());\n        assertThat(mapperService.fieldType(\"name.indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed2\"), notNullValue());\n        assertThat(mapperService.fieldType(\"name.not_indexed3\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/JavaMultiFieldMergeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"7cedc3ec3a109f02f54b9e12a7ca8a3470b67e80","commitMessage":"@@@Make Document a top-level class (#74472)\n\nThere is no reason for Document to be an inner class of ParseContext.  especially as it is public and accessed directly from many different places.\n\nThis commit takes it out to its own top-level class file.  which has the advantage of simplifying ParseContext which could use some love too.\n","date":"2021-06-24 16:56:30","modifiedFileCount":"46","status":"M","submitter":"Luca Cavanna"}]
