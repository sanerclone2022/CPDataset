[{"authorTime":"2021-06-18 07:33:58","codes":[{"authorDate":"2021-06-18 07:33:58","commitOrder":1,"curCode":"    private void doTestPagination(String repoName, List<String> names, GetSnapshotsRequest.SortBy sort, SortOrder order) {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final List<SnapshotInfo> batch1 = sortedWithLimit(repoName, sort, null, 2, order);\n        assertEquals(batch1, allSnapshotsSorted.subList(0, 2));\n        final List<SnapshotInfo> batch2 = sortedWithLimit(repoName, sort, batch1.get(1), 2, order);\n        assertEquals(batch2, allSnapshotsSorted.subList(2, 4));\n        final int lastBatch = names.size() - batch1.size() - batch2.size();\n        final List<SnapshotInfo> batch3 = sortedWithLimit(repoName, sort, batch2.get(1), lastBatch, order);\n        assertEquals(batch3, allSnapshotsSorted.subList(batch1.size() + batch2.size(), names.size()));\n        final List<SnapshotInfo> batch3NoLimit = sortedWithLimit(repoName, sort, batch2.get(1), GetSnapshotsRequest.NO_LIMIT, order);\n        assertEquals(batch3, batch3NoLimit);\n        final List<SnapshotInfo> batch3LargeLimit = sortedWithLimit(\n            repoName,\n            sort,\n            batch2.get(1),\n            lastBatch + randomIntBetween(1, 100),\n            order\n        );\n        assertEquals(batch3, batch3LargeLimit);\n    }\n","date":"2021-06-18 07:33:58","endLine":115,"groupId":"14816","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestPagination","params":"(StringrepoName@List<String>names@GetSnapshotsRequest.SortBysort@SortOrderorder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/12224472a73e05001369d606246eeec793cad8.src","preCode":"    private void doTestPagination(String repoName, List<String> names, GetSnapshotsRequest.SortBy sort, SortOrder order) {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final List<SnapshotInfo> batch1 = sortedWithLimit(repoName, sort, null, 2, order);\n        assertEquals(batch1, allSnapshotsSorted.subList(0, 2));\n        final List<SnapshotInfo> batch2 = sortedWithLimit(repoName, sort, batch1.get(1), 2, order);\n        assertEquals(batch2, allSnapshotsSorted.subList(2, 4));\n        final int lastBatch = names.size() - batch1.size() - batch2.size();\n        final List<SnapshotInfo> batch3 = sortedWithLimit(repoName, sort, batch2.get(1), lastBatch, order);\n        assertEquals(batch3, allSnapshotsSorted.subList(batch1.size() + batch2.size(), names.size()));\n        final List<SnapshotInfo> batch3NoLimit = sortedWithLimit(repoName, sort, batch2.get(1), GetSnapshotsRequest.NO_LIMIT, order);\n        assertEquals(batch3, batch3NoLimit);\n        final List<SnapshotInfo> batch3LargeLimit = sortedWithLimit(\n            repoName,\n            sort,\n            batch2.get(1),\n            lastBatch + randomIntBetween(1, 100),\n            order\n        );\n        assertEquals(batch3, batch3LargeLimit);\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/GetSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"},{"authorDate":"2021-06-18 07:33:58","commitOrder":1,"curCode":"    private void doTestPagination(String repoName,\n                                  List<String> names,\n                                  GetSnapshotsRequest.SortBy sort,\n                                  SortOrder order) throws IOException {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final List<SnapshotInfo> batch1 = sortedWithLimit(repoName, sort, 2, order);\n        assertEquals(batch1, allSnapshotsSorted.subList(0, 2));\n        final List<SnapshotInfo> batch2 = sortedWithLimit(repoName, sort, batch1.get(1), 2, order);\n        assertEquals(batch2, allSnapshotsSorted.subList(2, 4));\n        final int lastBatch = names.size() - batch1.size() - batch2.size();\n        final List<SnapshotInfo> batch3 = sortedWithLimit(repoName, sort, batch2.get(1), lastBatch, order);\n        assertEquals(batch3, allSnapshotsSorted.subList(batch1.size() + batch2.size(), names.size()));\n        final List<SnapshotInfo> batch3NoLimit =\n            sortedWithLimit(repoName, sort, batch2.get(1), GetSnapshotsRequest.NO_LIMIT, order);\n        assertEquals(batch3, batch3NoLimit);\n        final List<SnapshotInfo> batch3LargeLimit = sortedWithLimit(\n                repoName,\n                sort,\n                batch2.get(1),\n                lastBatch + randomIntBetween(1, 100),\n                order\n        );\n        assertEquals(batch3, batch3LargeLimit);\n    }\n","date":"2021-06-18 07:33:58","endLine":127,"groupId":"14816","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestPagination","params":"(StringrepoName@List<String>names@GetSnapshotsRequest.SortBysort@SortOrderorder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/72/514beed85042539e5a4505478ea77339f5818f.src","preCode":"    private void doTestPagination(String repoName,\n                                  List<String> names,\n                                  GetSnapshotsRequest.SortBy sort,\n                                  SortOrder order) throws IOException {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final List<SnapshotInfo> batch1 = sortedWithLimit(repoName, sort, 2, order);\n        assertEquals(batch1, allSnapshotsSorted.subList(0, 2));\n        final List<SnapshotInfo> batch2 = sortedWithLimit(repoName, sort, batch1.get(1), 2, order);\n        assertEquals(batch2, allSnapshotsSorted.subList(2, 4));\n        final int lastBatch = names.size() - batch1.size() - batch2.size();\n        final List<SnapshotInfo> batch3 = sortedWithLimit(repoName, sort, batch2.get(1), lastBatch, order);\n        assertEquals(batch3, allSnapshotsSorted.subList(batch1.size() + batch2.size(), names.size()));\n        final List<SnapshotInfo> batch3NoLimit =\n            sortedWithLimit(repoName, sort, batch2.get(1), GetSnapshotsRequest.NO_LIMIT, order);\n        assertEquals(batch3, batch3NoLimit);\n        final List<SnapshotInfo> batch3LargeLimit = sortedWithLimit(\n                repoName,\n                sort,\n                batch2.get(1),\n                lastBatch + randomIntBetween(1, 100),\n                order\n        );\n        assertEquals(batch3, batch3LargeLimit);\n    }\n","realPath":"qa/smoke-test-http/src/test/java/org/elasticsearch/http/snapshots/RestGetSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"}],"commitId":"82ae6742eba59c58a93bf9e32ea37220d01ab75c","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles","date":"2021-06-18 07:33:58","modifiedFileCount":"125","status":"B","submitter":"Elastic Machine"},{"authorTime":"2021-06-29 04:28:30","codes":[{"authorDate":"2021-06-29 04:28:30","commitOrder":2,"curCode":"    private void doTestPagination(String repoName, List<String> names, GetSnapshotsRequest.SortBy sort, SortOrder order) {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final Tuple<String, List<SnapshotInfo>> batch1 = sortedWithLimit(repoName, sort, null, 2, order);\n        assertEquals(allSnapshotsSorted.subList(0, 2), batch1.v2());\n        final Tuple<String, List<SnapshotInfo>> batch2 = sortedWithLimit(repoName, sort, batch1.v1(), 2, order);\n        assertEquals(allSnapshotsSorted.subList(2, 4), batch2.v2());\n        final int lastBatch = names.size() - batch1.v2().size() - batch2.v2().size();\n        final Tuple<String, List<SnapshotInfo>> batch3 = sortedWithLimit(repoName, sort, batch2.v1(), lastBatch, order);\n        assertEquals(batch3.v2(), allSnapshotsSorted.subList(batch1.v2().size() + batch2.v2().size(), names.size()));\n        final Tuple<String, List<SnapshotInfo>> batch3NoLimit = sortedWithLimit(\n            repoName,\n            sort,\n            batch2.v1(),\n            GetSnapshotsRequest.NO_LIMIT,\n            order\n        );\n        assertNull(batch3NoLimit.v1());\n        assertEquals(batch3.v2(), batch3NoLimit.v2());\n        final Tuple<String, List<SnapshotInfo>> batch3LargeLimit = sortedWithLimit(\n            repoName,\n            sort,\n            batch2.v1(),\n            lastBatch + randomIntBetween(1, 100),\n            order\n        );\n        assertEquals(batch3.v2(), batch3LargeLimit.v2());\n        assertNull(batch3LargeLimit.v1());\n    }\n","date":"2021-06-29 04:28:30","endLine":125,"groupId":"38653","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestPagination","params":"(StringrepoName@List<String>names@GetSnapshotsRequest.SortBysort@SortOrderorder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/c217e3cd6a03e99dc1dae7bd3752893b3e48cc.src","preCode":"    private void doTestPagination(String repoName, List<String> names, GetSnapshotsRequest.SortBy sort, SortOrder order) {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final List<SnapshotInfo> batch1 = sortedWithLimit(repoName, sort, null, 2, order);\n        assertEquals(batch1, allSnapshotsSorted.subList(0, 2));\n        final List<SnapshotInfo> batch2 = sortedWithLimit(repoName, sort, batch1.get(1), 2, order);\n        assertEquals(batch2, allSnapshotsSorted.subList(2, 4));\n        final int lastBatch = names.size() - batch1.size() - batch2.size();\n        final List<SnapshotInfo> batch3 = sortedWithLimit(repoName, sort, batch2.get(1), lastBatch, order);\n        assertEquals(batch3, allSnapshotsSorted.subList(batch1.size() + batch2.size(), names.size()));\n        final List<SnapshotInfo> batch3NoLimit = sortedWithLimit(repoName, sort, batch2.get(1), GetSnapshotsRequest.NO_LIMIT, order);\n        assertEquals(batch3, batch3NoLimit);\n        final List<SnapshotInfo> batch3LargeLimit = sortedWithLimit(\n            repoName,\n            sort,\n            batch2.get(1),\n            lastBatch + randomIntBetween(1, 100),\n            order\n        );\n        assertEquals(batch3, batch3LargeLimit);\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/GetSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2021-06-29 04:28:30","commitOrder":2,"curCode":"    private void doTestPagination(String repoName,\n                                  List<String> names,\n                                  GetSnapshotsRequest.SortBy sort,\n                                  SortOrder order) throws IOException {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final Tuple<String, List<SnapshotInfo>> batch1 = sortedWithLimit(repoName, sort, null, 2, order);\n        assertEquals(allSnapshotsSorted.subList(0, 2), batch1.v2());\n        final Tuple<String, List<SnapshotInfo>> batch2 = sortedWithLimit(repoName, sort, batch1.v1(), 2, order);\n        assertEquals(allSnapshotsSorted.subList(2, 4), batch2.v2());\n        final int lastBatch = names.size() - batch1.v2().size() - batch2.v2().size();\n        final Tuple<String, List<SnapshotInfo>> batch3 = sortedWithLimit(repoName, sort, batch2.v1(), lastBatch, order);\n        assertEquals(batch3.v2(), allSnapshotsSorted.subList(batch1.v2().size() + batch2.v2().size(), names.size()));\n        final Tuple<String, List<SnapshotInfo>> batch3NoLimit = sortedWithLimit(\n                repoName,\n                sort,\n                batch2.v1(),\n                GetSnapshotsRequest.NO_LIMIT,\n                order\n        );\n        assertNull(batch3NoLimit.v1());\n        assertEquals(batch3.v2(), batch3NoLimit.v2());\n        final Tuple<String, List<SnapshotInfo>> batch3LargeLimit = sortedWithLimit(\n                repoName,\n                sort,\n                batch2.v1(),\n                lastBatch + randomIntBetween(1, 100),\n                order\n        );\n        assertEquals(batch3.v2(), batch3LargeLimit.v2());\n        assertNull(batch3LargeLimit.v1());\n    }\n","date":"2021-06-29 04:28:30","endLine":134,"groupId":"38653","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestPagination","params":"(StringrepoName@List<String>names@GetSnapshotsRequest.SortBysort@SortOrderorder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/95/496e3e537c6beda053c6a82fa0e55750172b91.src","preCode":"    private void doTestPagination(String repoName,\n                                  List<String> names,\n                                  GetSnapshotsRequest.SortBy sort,\n                                  SortOrder order) throws IOException {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final List<SnapshotInfo> batch1 = sortedWithLimit(repoName, sort, 2, order);\n        assertEquals(batch1, allSnapshotsSorted.subList(0, 2));\n        final List<SnapshotInfo> batch2 = sortedWithLimit(repoName, sort, batch1.get(1), 2, order);\n        assertEquals(batch2, allSnapshotsSorted.subList(2, 4));\n        final int lastBatch = names.size() - batch1.size() - batch2.size();\n        final List<SnapshotInfo> batch3 = sortedWithLimit(repoName, sort, batch2.get(1), lastBatch, order);\n        assertEquals(batch3, allSnapshotsSorted.subList(batch1.size() + batch2.size(), names.size()));\n        final List<SnapshotInfo> batch3NoLimit =\n            sortedWithLimit(repoName, sort, batch2.get(1), GetSnapshotsRequest.NO_LIMIT, order);\n        assertEquals(batch3, batch3NoLimit);\n        final List<SnapshotInfo> batch3LargeLimit = sortedWithLimit(\n                repoName,\n                sort,\n                batch2.get(1),\n                lastBatch + randomIntBetween(1, 100),\n                order\n        );\n        assertEquals(batch3, batch3LargeLimit);\n    }\n","realPath":"qa/smoke-test-http/src/test/java/org/elasticsearch/http/snapshots/RestGetSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"5f89f8be3ff96ba9593838ff85731cd860138bcf","commitMessage":"@@@Introduce Next Field in Paginated GetSnapshots Response (#74236)\n\nFollow up to #73952 adding documentation for the `after` query parameter\nand the related `next` response field.\n\n","date":"2021-06-29 04:28:30","modifiedFileCount":"10","status":"M","submitter":"Armin Braun"},{"authorTime":"2021-08-09 17:34:24","codes":[{"authorDate":"2021-08-09 17:34:24","commitOrder":3,"curCode":"    private void doTestPagination(String repoName, List<String> names, GetSnapshotsRequest.SortBy sort, SortOrder order) {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final GetSnapshotsResponse batch1 = sortedWithLimit(repoName, sort, null, 2, order);\n        assertEquals(allSnapshotsSorted.subList(0, 2), batch1.getSnapshots());\n        final GetSnapshotsResponse batch2 = sortedWithLimit(repoName, sort, batch1.next(), 2, order);\n        assertEquals(allSnapshotsSorted.subList(2, 4), batch2.getSnapshots());\n        final int lastBatch = names.size() - batch1.getSnapshots().size() - batch2.getSnapshots().size();\n        final GetSnapshotsResponse batch3 = sortedWithLimit(repoName, sort, batch2.next(), lastBatch, order);\n        assertEquals(\n            batch3.getSnapshots(),\n            allSnapshotsSorted.subList(batch1.getSnapshots().size() + batch2.getSnapshots().size(), names.size())\n        );\n        final GetSnapshotsResponse batch3NoLimit = sortedWithLimit(repoName, sort, batch2.next(), GetSnapshotsRequest.NO_LIMIT, order);\n        assertNull(batch3NoLimit.next());\n        assertEquals(batch3.getSnapshots(), batch3NoLimit.getSnapshots());\n        final GetSnapshotsResponse batch3LargeLimit = sortedWithLimit(\n            repoName,\n            sort,\n            batch2.next(),\n            lastBatch + randomIntBetween(1, 100),\n            order\n        );\n        assertEquals(batch3.getSnapshots(), batch3LargeLimit.getSnapshots());\n        assertNull(batch3LargeLimit.next());\n    }\n","date":"2021-08-09 17:34:24","endLine":121,"groupId":"71135","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestPagination","params":"(StringrepoName@List<String>names@GetSnapshotsRequest.SortBysort@SortOrderorder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/e1be41b78495fc39b8befc0fdbae16eabaa607.src","preCode":"    private void doTestPagination(String repoName, List<String> names, GetSnapshotsRequest.SortBy sort, SortOrder order) {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final Tuple<String, List<SnapshotInfo>> batch1 = sortedWithLimit(repoName, sort, null, 2, order);\n        assertEquals(allSnapshotsSorted.subList(0, 2), batch1.v2());\n        final Tuple<String, List<SnapshotInfo>> batch2 = sortedWithLimit(repoName, sort, batch1.v1(), 2, order);\n        assertEquals(allSnapshotsSorted.subList(2, 4), batch2.v2());\n        final int lastBatch = names.size() - batch1.v2().size() - batch2.v2().size();\n        final Tuple<String, List<SnapshotInfo>> batch3 = sortedWithLimit(repoName, sort, batch2.v1(), lastBatch, order);\n        assertEquals(batch3.v2(), allSnapshotsSorted.subList(batch1.v2().size() + batch2.v2().size(), names.size()));\n        final Tuple<String, List<SnapshotInfo>> batch3NoLimit = sortedWithLimit(\n            repoName,\n            sort,\n            batch2.v1(),\n            GetSnapshotsRequest.NO_LIMIT,\n            order\n        );\n        assertNull(batch3NoLimit.v1());\n        assertEquals(batch3.v2(), batch3NoLimit.v2());\n        final Tuple<String, List<SnapshotInfo>> batch3LargeLimit = sortedWithLimit(\n            repoName,\n            sort,\n            batch2.v1(),\n            lastBatch + randomIntBetween(1, 100),\n            order\n        );\n        assertEquals(batch3.v2(), batch3LargeLimit.v2());\n        assertNull(batch3LargeLimit.v1());\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/GetSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2021-08-09 17:34:24","commitOrder":3,"curCode":"    private void doTestPagination(String repoName,\n                                  List<String> names,\n                                  GetSnapshotsRequest.SortBy sort,\n                                  SortOrder order) throws IOException {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final GetSnapshotsResponse batch1 = sortedWithLimit(repoName, sort, null, 2, order);\n        assertEquals(allSnapshotsSorted.subList(0, 2), batch1.getSnapshots());\n        final GetSnapshotsResponse batch2 = sortedWithLimit(repoName, sort, batch1.next(), 2, order);\n        assertEquals(allSnapshotsSorted.subList(2, 4), batch2.getSnapshots());\n        final int lastBatch = names.size() - batch1.getSnapshots().size() - batch2.getSnapshots().size();\n        final GetSnapshotsResponse batch3 = sortedWithLimit(repoName, sort, batch2.next(), lastBatch, order);\n        assertEquals(\n            batch3.getSnapshots(),\n            allSnapshotsSorted.subList(batch1.getSnapshots().size() + batch2.getSnapshots().size(), names.size())\n        );\n        final GetSnapshotsResponse batch3NoLimit = sortedWithLimit(\n                repoName,\n                sort,\n                batch2.next(),\n                GetSnapshotsRequest.NO_LIMIT,\n                order\n        );\n        assertNull(batch3NoLimit.next());\n        assertEquals(batch3.getSnapshots(), batch3NoLimit.getSnapshots());\n        final GetSnapshotsResponse batch3LargeLimit = sortedWithLimit(\n                repoName,\n                sort,\n                batch2.next(),\n                lastBatch + randomIntBetween(1, 100),\n                order\n        );\n        assertEquals(batch3.getSnapshots(), batch3LargeLimit.getSnapshots());\n        assertNull(batch3LargeLimit.next());\n    }\n","date":"2021-08-09 17:34:24","endLine":136,"groupId":"71135","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestPagination","params":"(StringrepoName@List<String>names@GetSnapshotsRequest.SortBysort@SortOrderorder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/949e6a98e13088ac79c8af60e94368c851df93.src","preCode":"    private void doTestPagination(String repoName,\n                                  List<String> names,\n                                  GetSnapshotsRequest.SortBy sort,\n                                  SortOrder order) throws IOException {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final Tuple<String, List<SnapshotInfo>> batch1 = sortedWithLimit(repoName, sort, null, 2, order);\n        assertEquals(allSnapshotsSorted.subList(0, 2), batch1.v2());\n        final Tuple<String, List<SnapshotInfo>> batch2 = sortedWithLimit(repoName, sort, batch1.v1(), 2, order);\n        assertEquals(allSnapshotsSorted.subList(2, 4), batch2.v2());\n        final int lastBatch = names.size() - batch1.v2().size() - batch2.v2().size();\n        final Tuple<String, List<SnapshotInfo>> batch3 = sortedWithLimit(repoName, sort, batch2.v1(), lastBatch, order);\n        assertEquals(batch3.v2(), allSnapshotsSorted.subList(batch1.v2().size() + batch2.v2().size(), names.size()));\n        final Tuple<String, List<SnapshotInfo>> batch3NoLimit = sortedWithLimit(\n                repoName,\n                sort,\n                batch2.v1(),\n                GetSnapshotsRequest.NO_LIMIT,\n                order\n        );\n        assertNull(batch3NoLimit.v1());\n        assertEquals(batch3.v2(), batch3NoLimit.v2());\n        final Tuple<String, List<SnapshotInfo>> batch3LargeLimit = sortedWithLimit(\n                repoName,\n                sort,\n                batch2.v1(),\n                lastBatch + randomIntBetween(1, 100),\n                order\n        );\n        assertEquals(batch3.v2(), batch3LargeLimit.v2());\n        assertNull(batch3LargeLimit.v1());\n    }\n","realPath":"qa/smoke-test-http/src/test/java/org/elasticsearch/http/snapshots/RestGetSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"a4983f5ab9812e0cc79d0914aee8a61c6fae0680","commitMessage":"@@@Return Total Result Count and Remaining Count in Get Snapshots Response (#76150)\n\nAdd total result count and remaining count to get snapshots response.","date":"2021-08-09 17:34:24","modifiedFileCount":"7","status":"M","submitter":"Armin Braun"},{"authorTime":"2021-08-09 17:34:24","codes":[{"authorDate":"2021-09-10 21:00:44","commitOrder":4,"curCode":"    private void doTestPagination(String repoName, List<String> names, GetSnapshotsRequest.SortBy sort, SortOrder order) {\n        final String[] repos = { repoName };\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repos, sort, order);\n        final GetSnapshotsResponse batch1 = sortedWithLimit(repos, sort, null, 2, order);\n        assertEquals(allSnapshotsSorted.subList(0, 2), batch1.getSnapshots());\n        final GetSnapshotsResponse batch2 = sortedWithLimit(repos, sort, batch1.next(), 2, order);\n        assertEquals(allSnapshotsSorted.subList(2, 4), batch2.getSnapshots());\n        final int lastBatch = names.size() - batch1.getSnapshots().size() - batch2.getSnapshots().size();\n        final GetSnapshotsResponse batch3 = sortedWithLimit(repos, sort, batch2.next(), lastBatch, order);\n        assertEquals(\n            batch3.getSnapshots(),\n            allSnapshotsSorted.subList(batch1.getSnapshots().size() + batch2.getSnapshots().size(), names.size())\n        );\n        final GetSnapshotsResponse batch3NoLimit = sortedWithLimit(repos, sort, batch2.next(), GetSnapshotsRequest.NO_LIMIT, order);\n        assertNull(batch3NoLimit.next());\n        assertEquals(batch3.getSnapshots(), batch3NoLimit.getSnapshots());\n        final GetSnapshotsResponse batch3LargeLimit = sortedWithLimit(\n            repos,\n            sort,\n            batch2.next(),\n            lastBatch + randomIntBetween(1, 100),\n            order\n        );\n        assertEquals(batch3.getSnapshots(), batch3LargeLimit.getSnapshots());\n        assertNull(batch3LargeLimit.next());\n    }\n","date":"2021-09-10 21:00:44","endLine":158,"groupId":"106296","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestPagination","params":"(StringrepoName@List<String>names@GetSnapshotsRequest.SortBysort@SortOrderorder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/a124ff8f5876a469afd2ec1d3982fc177544c8.src","preCode":"    private void doTestPagination(String repoName, List<String> names, GetSnapshotsRequest.SortBy sort, SortOrder order) {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final GetSnapshotsResponse batch1 = sortedWithLimit(repoName, sort, null, 2, order);\n        assertEquals(allSnapshotsSorted.subList(0, 2), batch1.getSnapshots());\n        final GetSnapshotsResponse batch2 = sortedWithLimit(repoName, sort, batch1.next(), 2, order);\n        assertEquals(allSnapshotsSorted.subList(2, 4), batch2.getSnapshots());\n        final int lastBatch = names.size() - batch1.getSnapshots().size() - batch2.getSnapshots().size();\n        final GetSnapshotsResponse batch3 = sortedWithLimit(repoName, sort, batch2.next(), lastBatch, order);\n        assertEquals(\n            batch3.getSnapshots(),\n            allSnapshotsSorted.subList(batch1.getSnapshots().size() + batch2.getSnapshots().size(), names.size())\n        );\n        final GetSnapshotsResponse batch3NoLimit = sortedWithLimit(repoName, sort, batch2.next(), GetSnapshotsRequest.NO_LIMIT, order);\n        assertNull(batch3NoLimit.next());\n        assertEquals(batch3.getSnapshots(), batch3NoLimit.getSnapshots());\n        final GetSnapshotsResponse batch3LargeLimit = sortedWithLimit(\n            repoName,\n            sort,\n            batch2.next(),\n            lastBatch + randomIntBetween(1, 100),\n            order\n        );\n        assertEquals(batch3.getSnapshots(), batch3LargeLimit.getSnapshots());\n        assertNull(batch3LargeLimit.next());\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/GetSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2021-08-09 17:34:24","commitOrder":4,"curCode":"    private void doTestPagination(String repoName,\n                                  List<String> names,\n                                  GetSnapshotsRequest.SortBy sort,\n                                  SortOrder order) throws IOException {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final GetSnapshotsResponse batch1 = sortedWithLimit(repoName, sort, null, 2, order);\n        assertEquals(allSnapshotsSorted.subList(0, 2), batch1.getSnapshots());\n        final GetSnapshotsResponse batch2 = sortedWithLimit(repoName, sort, batch1.next(), 2, order);\n        assertEquals(allSnapshotsSorted.subList(2, 4), batch2.getSnapshots());\n        final int lastBatch = names.size() - batch1.getSnapshots().size() - batch2.getSnapshots().size();\n        final GetSnapshotsResponse batch3 = sortedWithLimit(repoName, sort, batch2.next(), lastBatch, order);\n        assertEquals(\n            batch3.getSnapshots(),\n            allSnapshotsSorted.subList(batch1.getSnapshots().size() + batch2.getSnapshots().size(), names.size())\n        );\n        final GetSnapshotsResponse batch3NoLimit = sortedWithLimit(\n                repoName,\n                sort,\n                batch2.next(),\n                GetSnapshotsRequest.NO_LIMIT,\n                order\n        );\n        assertNull(batch3NoLimit.next());\n        assertEquals(batch3.getSnapshots(), batch3NoLimit.getSnapshots());\n        final GetSnapshotsResponse batch3LargeLimit = sortedWithLimit(\n                repoName,\n                sort,\n                batch2.next(),\n                lastBatch + randomIntBetween(1, 100),\n                order\n        );\n        assertEquals(batch3.getSnapshots(), batch3LargeLimit.getSnapshots());\n        assertNull(batch3LargeLimit.next());\n    }\n","date":"2021-08-09 17:34:24","endLine":136,"groupId":"106296","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestPagination","params":"(StringrepoName@List<String>names@GetSnapshotsRequest.SortBysort@SortOrderorder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/949e6a98e13088ac79c8af60e94368c851df93.src","preCode":"    private void doTestPagination(String repoName,\n                                  List<String> names,\n                                  GetSnapshotsRequest.SortBy sort,\n                                  SortOrder order) throws IOException {\n        final List<SnapshotInfo> allSnapshotsSorted = allSnapshotsSorted(names, repoName, sort, order);\n        final GetSnapshotsResponse batch1 = sortedWithLimit(repoName, sort, null, 2, order);\n        assertEquals(allSnapshotsSorted.subList(0, 2), batch1.getSnapshots());\n        final GetSnapshotsResponse batch2 = sortedWithLimit(repoName, sort, batch1.next(), 2, order);\n        assertEquals(allSnapshotsSorted.subList(2, 4), batch2.getSnapshots());\n        final int lastBatch = names.size() - batch1.getSnapshots().size() - batch2.getSnapshots().size();\n        final GetSnapshotsResponse batch3 = sortedWithLimit(repoName, sort, batch2.next(), lastBatch, order);\n        assertEquals(\n            batch3.getSnapshots(),\n            allSnapshotsSorted.subList(batch1.getSnapshots().size() + batch2.getSnapshots().size(), names.size())\n        );\n        final GetSnapshotsResponse batch3NoLimit = sortedWithLimit(\n                repoName,\n                sort,\n                batch2.next(),\n                GetSnapshotsRequest.NO_LIMIT,\n                order\n        );\n        assertNull(batch3NoLimit.next());\n        assertEquals(batch3.getSnapshots(), batch3NoLimit.getSnapshots());\n        final GetSnapshotsResponse batch3LargeLimit = sortedWithLimit(\n                repoName,\n                sort,\n                batch2.next(),\n                lastBatch + randomIntBetween(1, 100),\n                order\n        );\n        assertEquals(batch3.getSnapshots(), batch3LargeLimit.getSnapshots());\n        assertNull(batch3LargeLimit.next());\n    }\n","realPath":"qa/smoke-test-http/src/test/java/org/elasticsearch/http/snapshots/RestGetSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"}],"commitId":"f1a4551e9363d2633b7807ab770029482d9efe53","commitMessage":"@@@Implement Exclude Patterns for Snapshot- and Repository Names in Get Snapshots API (#77308)\n\nIt's in the title. Adds support for exclude patterns combined with wildcard requests\nsimilar to what we support for index names.\n","date":"2021-09-10 21:00:44","modifiedFileCount":"5","status":"M","submitter":"Armin Braun"}]
