[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":85,"groupId":"46424","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/d6c6bd6e45be7aebabd3dd3e3780fb665683d7.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testMaxFromParentDocs() throws IOException {\n        int numParentDocs = randomIntBetween(1, 20);\n        int expectedParentDocs = 0;\n        int expectedNestedDocs = 0;\n        double expectedMaxValue = Double.NEGATIVE_INFINITY;\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                for (int i = 0; i < numParentDocs; i++) {\n                    List<Document> documents = new ArrayList<>();\n                    int numNestedDocs = randomIntBetween(0, 20);\n                    for (int nested = 0; nested < numNestedDocs; nested++) {\n                        Document document = new Document();\n                        document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                                IdFieldMapper.Defaults.NESTED_FIELD_TYPE));\n                        document.add(new Field(TypeFieldMapper.NAME, \"__\" + NESTED_OBJECT,\n                                TypeFieldMapper.Defaults.FIELD_TYPE));\n                        documents.add(document);\n                        expectedNestedDocs++;\n                    }\n                    Document document = new Document();\n                    document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                            IdFieldMapper.Defaults.FIELD_TYPE));\n                    document.add(new Field(TypeFieldMapper.NAME, \"test\",\n                            TypeFieldMapper.Defaults.FIELD_TYPE));\n                    long value = randomNonNegativeLong() % 10000;\n                    document.add(new SortedNumericDocValuesField(VALUE_FIELD_NAME, value));\n                    document.add(SeqNoFieldMapper.SequenceIDFields.emptySeqID().primaryTerm);\n                    if (numNestedDocs > 0) {\n                        expectedMaxValue = Math.max(expectedMaxValue, value);\n                        expectedParentDocs++;\n                    }\n                    documents.add(document);\n                    iw.addDocuments(documents);\n                }\n                iw.commit();\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                assertEquals(expectedNestedDocs, nested.getDocCount());\n\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(expectedParentDocs, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(expectedMaxValue, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":151,"groupId":"1470","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxFromParentDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/d6c6bd6e45be7aebabd3dd3e3780fb665683d7.src","preCode":"    public void testMaxFromParentDocs() throws IOException {\n        int numParentDocs = randomIntBetween(1, 20);\n        int expectedParentDocs = 0;\n        int expectedNestedDocs = 0;\n        double expectedMaxValue = Double.NEGATIVE_INFINITY;\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                for (int i = 0; i < numParentDocs; i++) {\n                    List<Document> documents = new ArrayList<>();\n                    int numNestedDocs = randomIntBetween(0, 20);\n                    for (int nested = 0; nested < numNestedDocs; nested++) {\n                        Document document = new Document();\n                        document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                                IdFieldMapper.Defaults.NESTED_FIELD_TYPE));\n                        document.add(new Field(TypeFieldMapper.NAME, \"__\" + NESTED_OBJECT,\n                                TypeFieldMapper.Defaults.FIELD_TYPE));\n                        documents.add(document);\n                        expectedNestedDocs++;\n                    }\n                    Document document = new Document();\n                    document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                            IdFieldMapper.Defaults.FIELD_TYPE));\n                    document.add(new Field(TypeFieldMapper.NAME, \"test\",\n                            TypeFieldMapper.Defaults.FIELD_TYPE));\n                    long value = randomNonNegativeLong() % 10000;\n                    document.add(new SortedNumericDocValuesField(VALUE_FIELD_NAME, value));\n                    document.add(SeqNoFieldMapper.SequenceIDFields.emptySeqID().primaryTerm);\n                    if (numNestedDocs > 0) {\n                        expectedMaxValue = Math.max(expectedMaxValue, value);\n                        expectedParentDocs++;\n                    }\n                    documents.add(document);\n                    iw.addDocuments(documents);\n                }\n                iw.commit();\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                assertEquals(expectedNestedDocs, nested.getDocCount());\n\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(expectedParentDocs, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(expectedMaxValue, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2020-01-23 00:31:34","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":85,"groupId":"46424","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/d6c6bd6e45be7aebabd3dd3e3780fb665683d7.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2020-01-23 00:31:34","commitOrder":2,"curCode":"    public void testMaxFromParentDocs() throws IOException {\n        int numParentDocs = randomIntBetween(1, 20);\n        int expectedParentDocs = 0;\n        int expectedNestedDocs = 0;\n        double expectedMaxValue = Double.NEGATIVE_INFINITY;\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                for (int i = 0; i < numParentDocs; i++) {\n                    List<Document> documents = new ArrayList<>();\n                    int numNestedDocs = randomIntBetween(0, 20);\n                    for (int nested = 0; nested < numNestedDocs; nested++) {\n                        Document document = new Document();\n                        document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                                IdFieldMapper.Defaults.NESTED_FIELD_TYPE));\n                        document.add(new Field(NestedPathFieldMapper.NAME, NESTED_OBJECT,\n                            NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                        documents.add(document);\n                        expectedNestedDocs++;\n                    }\n                    Document document = new Document();\n                    document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                            IdFieldMapper.Defaults.FIELD_TYPE));\n                    document.add(new Field(NestedPathFieldMapper.NAME, \"test\",\n                        NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                    long value = randomNonNegativeLong() % 10000;\n                    document.add(new SortedNumericDocValuesField(VALUE_FIELD_NAME, value));\n                    document.add(SeqNoFieldMapper.SequenceIDFields.emptySeqID().primaryTerm);\n                    if (numNestedDocs > 0) {\n                        expectedMaxValue = Math.max(expectedMaxValue, value);\n                        expectedParentDocs++;\n                    }\n                    documents.add(document);\n                    iw.addDocuments(documents);\n                }\n                iw.commit();\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                assertEquals(expectedNestedDocs, nested.getDocCount());\n\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(expectedParentDocs, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(expectedMaxValue, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2020-01-23 00:31:34","endLine":168,"groupId":"1470","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxFromParentDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5f/1edcfded8135894de7ac73853a1eaff9841743.src","preCode":"    public void testMaxFromParentDocs() throws IOException {\n        int numParentDocs = randomIntBetween(1, 20);\n        int expectedParentDocs = 0;\n        int expectedNestedDocs = 0;\n        double expectedMaxValue = Double.NEGATIVE_INFINITY;\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                for (int i = 0; i < numParentDocs; i++) {\n                    List<Document> documents = new ArrayList<>();\n                    int numNestedDocs = randomIntBetween(0, 20);\n                    for (int nested = 0; nested < numNestedDocs; nested++) {\n                        Document document = new Document();\n                        document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                                IdFieldMapper.Defaults.NESTED_FIELD_TYPE));\n                        document.add(new Field(TypeFieldMapper.NAME, \"__\" + NESTED_OBJECT,\n                                TypeFieldMapper.Defaults.FIELD_TYPE));\n                        documents.add(document);\n                        expectedNestedDocs++;\n                    }\n                    Document document = new Document();\n                    document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                            IdFieldMapper.Defaults.FIELD_TYPE));\n                    document.add(new Field(TypeFieldMapper.NAME, \"test\",\n                            TypeFieldMapper.Defaults.FIELD_TYPE));\n                    long value = randomNonNegativeLong() % 10000;\n                    document.add(new SortedNumericDocValuesField(VALUE_FIELD_NAME, value));\n                    document.add(SeqNoFieldMapper.SequenceIDFields.emptySeqID().primaryTerm);\n                    if (numNestedDocs > 0) {\n                        expectedMaxValue = Math.max(expectedMaxValue, value);\n                        expectedParentDocs++;\n                    }\n                    documents.add(document);\n                    iw.addDocuments(documents);\n                }\n                iw.commit();\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                assertEquals(expectedNestedDocs, nested.getDocCount());\n\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(expectedParentDocs, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(expectedMaxValue, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"1dc9dd42235e876fde8c3b31934f1bc88d668896","commitMessage":"@@@Add NestedPathFieldMapper to store nested path information (#51100)\n\nCurrently nested documents repurpose the _type field to store their nested paths.\nThis commit adds a dedicated _nested_path field instead.  which decouples this\ninformation from types and will allow the removal of the _type field entirely further\ndown the line. To preserve backwards compatibility.  references to this field are\nmediated via methods that take an index settings object.  and indexes created before\n8x still use the _type field.\n\nRelates to #41059\nCloses #24362","date":"2020-01-23 00:31:34","modifiedFileCount":"21","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-05-09 03:39:49","codes":[{"authorDate":"2020-05-09 03:39:49","commitOrder":3,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2020-05-09 03:39:49","endLine":118,"groupId":"46424","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/55db28a916ee4220759eb41eba5cf13eb06ca8.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2020-05-09 03:39:49","commitOrder":3,"curCode":"    public void testMaxFromParentDocs() throws IOException {\n        int numParentDocs = randomIntBetween(1, 20);\n        int expectedParentDocs = 0;\n        int expectedNestedDocs = 0;\n        double expectedMaxValue = Double.NEGATIVE_INFINITY;\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                for (int i = 0; i < numParentDocs; i++) {\n                    List<Document> documents = new ArrayList<>();\n                    int numNestedDocs = randomIntBetween(0, 20);\n                    for (int nested = 0; nested < numNestedDocs; nested++) {\n                        Document document = new Document();\n                        document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                                IdFieldMapper.Defaults.NESTED_FIELD_TYPE));\n                        document.add(new Field(NestedPathFieldMapper.NAME, NESTED_OBJECT,\n                            NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                        documents.add(document);\n                        expectedNestedDocs++;\n                    }\n                    Document document = new Document();\n                    document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                            IdFieldMapper.Defaults.FIELD_TYPE));\n                    document.add(new Field(NestedPathFieldMapper.NAME, \"test\",\n                        NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                    long value = randomNonNegativeLong() % 10000;\n                    document.add(new SortedNumericDocValuesField(VALUE_FIELD_NAME, value));\n                    document.add(SeqNoFieldMapper.SequenceIDFields.emptySeqID().primaryTerm);\n                    if (numNestedDocs > 0) {\n                        expectedMaxValue = Math.max(expectedMaxValue, value);\n                        expectedParentDocs++;\n                    }\n                    documents.add(document);\n                    iw.addDocuments(documents);\n                }\n                iw.commit();\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                assertEquals(expectedNestedDocs, nested.getDocCount());\n\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(expectedParentDocs, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(expectedMaxValue, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2020-05-09 03:39:49","endLine":184,"groupId":"1470","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxFromParentDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/55db28a916ee4220759eb41eba5cf13eb06ca8.src","preCode":"    public void testMaxFromParentDocs() throws IOException {\n        int numParentDocs = randomIntBetween(1, 20);\n        int expectedParentDocs = 0;\n        int expectedNestedDocs = 0;\n        double expectedMaxValue = Double.NEGATIVE_INFINITY;\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                for (int i = 0; i < numParentDocs; i++) {\n                    List<Document> documents = new ArrayList<>();\n                    int numNestedDocs = randomIntBetween(0, 20);\n                    for (int nested = 0; nested < numNestedDocs; nested++) {\n                        Document document = new Document();\n                        document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                                IdFieldMapper.Defaults.NESTED_FIELD_TYPE));\n                        document.add(new Field(NestedPathFieldMapper.NAME, NESTED_OBJECT,\n                            NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                        documents.add(document);\n                        expectedNestedDocs++;\n                    }\n                    Document document = new Document();\n                    document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                            IdFieldMapper.Defaults.FIELD_TYPE));\n                    document.add(new Field(NestedPathFieldMapper.NAME, \"test\",\n                        NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                    long value = randomNonNegativeLong() % 10000;\n                    document.add(new SortedNumericDocValuesField(VALUE_FIELD_NAME, value));\n                    document.add(SeqNoFieldMapper.SequenceIDFields.emptySeqID().primaryTerm);\n                    if (numNestedDocs > 0) {\n                        expectedMaxValue = Math.max(expectedMaxValue, value);\n                        expectedParentDocs++;\n                    }\n                    documents.add(document);\n                    iw.addDocuments(documents);\n                }\n                iw.commit();\n            }\n            try (IndexReader indexReader = wrap(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                assertEquals(expectedNestedDocs, nested.getDocCount());\n\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(expectedParentDocs, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(expectedMaxValue, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"0d7320499d77e57e16b1789b9d1e91e42f4638c9","commitMessage":"@@@Save memory when numeric terms agg is not top (#55873)\n\nRight now all implementations of the `terms` agg allocate a new\n`Aggregator` per bucket. This uses a bunch of memory. Exactly how much\nisn't clear but each `Aggregator` ends up making its own objects to read\ndoc values which have non-trivial buffers. And it forces all of it\nsub-aggregations to do the same. We allocate a new `Aggregator` per\nbucket for two reasons:\n\n1. We didn't have an appropriate data structure to track the\n   sub-ordinals of each parent bucket.\n2. You can only make a single call to `runDeferredCollections(long...)`\n   per `Aggregator` which was the only way to delay collection of\n   sub-aggregations.\n\nThis change switches the method that builds aggregation results from\nbuilding them one at a time to building all of the results for the\nentire aggregator at the same time.\n\nIt also adds a fairly simplistic data structure to track the sub-ordinals\nfor `long`-keyed buckets.\n\nIt uses both of those to power numeric `terms` aggregations and removes\nthe per-bucket allocation of their `Aggregator`. This fairly\nsubstantially reduces memory consumption of numeric `terms` aggregations\nthat are not the \"top level\".  especially when those aggregations contain\nmany sub-aggregations. It also is a pretty big speed up.  especially when\nthe aggregation is under a non-selective aggregation like\nthe `date_histogram`.\n\nI picked numeric `terms` aggregations because those have the simplest\nimplementation. At least.  I could kind of fit it in my head. And I\nhaven't fully understood the \"bytes\"-based terms aggregations.  but I\nimagine I'll be able to make similar optimizations to them in follow up\nchanges.\n","date":"2020-05-09 03:39:49","modifiedFileCount":"62","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(VALUE_FIELD_NAME, NumberFieldMapper.NumberType.LONG);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":116,"groupId":"59677","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/36fcf129fc7ff8d9d1886935d2b1fa6ab37066.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    public void testMaxFromParentDocs() throws IOException {\n        int numParentDocs = randomIntBetween(1, 20);\n        int expectedParentDocs = 0;\n        int expectedNestedDocs = 0;\n        double expectedMaxValue = Double.NEGATIVE_INFINITY;\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                for (int i = 0; i < numParentDocs; i++) {\n                    List<Document> documents = new ArrayList<>();\n                    int numNestedDocs = randomIntBetween(0, 20);\n                    for (int nested = 0; nested < numNestedDocs; nested++) {\n                        Document document = new Document();\n                        document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                                IdFieldMapper.Defaults.NESTED_FIELD_TYPE));\n                        document.add(new Field(NestedPathFieldMapper.NAME, NESTED_OBJECT,\n                            NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                        documents.add(document);\n                        expectedNestedDocs++;\n                    }\n                    Document document = new Document();\n                    document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                            IdFieldMapper.Defaults.FIELD_TYPE));\n                    document.add(new Field(NestedPathFieldMapper.NAME, \"test\",\n                        NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                    long value = randomNonNegativeLong() % 10000;\n                    document.add(new SortedNumericDocValuesField(VALUE_FIELD_NAME, value));\n                    document.add(SeqNoFieldMapper.SequenceIDFields.emptySeqID().primaryTerm);\n                    if (numNestedDocs > 0) {\n                        expectedMaxValue = Math.max(expectedMaxValue, value);\n                        expectedParentDocs++;\n                    }\n                    documents.add(document);\n                    iw.addDocuments(documents);\n                }\n                iw.commit();\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(VALUE_FIELD_NAME, NumberFieldMapper.NumberType.LONG);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                assertEquals(expectedNestedDocs, nested.getDocCount());\n\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(expectedParentDocs, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(expectedMaxValue, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":180,"groupId":"1470","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxFromParentDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/36fcf129fc7ff8d9d1886935d2b1fa6ab37066.src","preCode":"    public void testMaxFromParentDocs() throws IOException {\n        int numParentDocs = randomIntBetween(1, 20);\n        int expectedParentDocs = 0;\n        int expectedNestedDocs = 0;\n        double expectedMaxValue = Double.NEGATIVE_INFINITY;\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                for (int i = 0; i < numParentDocs; i++) {\n                    List<Document> documents = new ArrayList<>();\n                    int numNestedDocs = randomIntBetween(0, 20);\n                    for (int nested = 0; nested < numNestedDocs; nested++) {\n                        Document document = new Document();\n                        document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                                IdFieldMapper.Defaults.NESTED_FIELD_TYPE));\n                        document.add(new Field(NestedPathFieldMapper.NAME, NESTED_OBJECT,\n                            NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                        documents.add(document);\n                        expectedNestedDocs++;\n                    }\n                    Document document = new Document();\n                    document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                            IdFieldMapper.Defaults.FIELD_TYPE));\n                    document.add(new Field(NestedPathFieldMapper.NAME, \"test\",\n                        NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                    long value = randomNonNegativeLong() % 10000;\n                    document.add(new SortedNumericDocValuesField(VALUE_FIELD_NAME, value));\n                    document.add(SeqNoFieldMapper.SequenceIDFields.emptySeqID().primaryTerm);\n                    if (numNestedDocs > 0) {\n                        expectedMaxValue = Math.max(expectedMaxValue, value);\n                        expectedParentDocs++;\n                    }\n                    documents.add(document);\n                    iw.addDocuments(documents);\n                }\n                iw.commit();\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\n                        NumberFieldMapper.NumberType.LONG);\n                fieldType.setName(VALUE_FIELD_NAME);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                assertEquals(expectedNestedDocs, nested.getDocCount());\n\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(expectedParentDocs, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(expectedMaxValue, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-08-07 05:14:20","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":5,"curCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(VALUE_FIELD_NAME, NumberFieldMapper.NumberType.LONG);\n\n                Nested nested = searchAndReduce(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2020-08-07 05:14:20","endLine":114,"groupId":"104816","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/db/cfa73d895b8615586cc847232f774b774611b1.src","preCode":"    public void testNoDocs() throws IOException {\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                \r\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(VALUE_FIELD_NAME, NumberFieldMapper.NumberType.LONG);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(0, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(Double.NEGATIVE_INFINITY, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-08-07 05:14:20","commitOrder":5,"curCode":"    public void testMaxFromParentDocs() throws IOException {\n        int numParentDocs = randomIntBetween(1, 20);\n        int expectedParentDocs = 0;\n        int expectedNestedDocs = 0;\n        double expectedMaxValue = Double.NEGATIVE_INFINITY;\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                for (int i = 0; i < numParentDocs; i++) {\n                    List<Document> documents = new ArrayList<>();\n                    int numNestedDocs = randomIntBetween(0, 20);\n                    for (int nested = 0; nested < numNestedDocs; nested++) {\n                        Document document = new Document();\n                        document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                                IdFieldMapper.Defaults.NESTED_FIELD_TYPE));\n                        document.add(new Field(NestedPathFieldMapper.NAME, NESTED_OBJECT,\n                            NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                        documents.add(document);\n                        expectedNestedDocs++;\n                    }\n                    Document document = new Document();\n                    document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                            IdFieldMapper.Defaults.FIELD_TYPE));\n                    document.add(new Field(NestedPathFieldMapper.NAME, \"test\",\n                        NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                    long value = randomNonNegativeLong() % 10000;\n                    document.add(new SortedNumericDocValuesField(VALUE_FIELD_NAME, value));\n                    document.add(SeqNoFieldMapper.SequenceIDFields.emptySeqID().primaryTerm);\n                    if (numNestedDocs > 0) {\n                        expectedMaxValue = Math.max(expectedMaxValue, value);\n                        expectedParentDocs++;\n                    }\n                    documents.add(document);\n                    iw.addDocuments(documents);\n                }\n                iw.commit();\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(VALUE_FIELD_NAME, NumberFieldMapper.NumberType.LONG);\n\n                Nested nested = searchAndReduce(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                assertEquals(expectedNestedDocs, nested.getDocCount());\n\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(expectedParentDocs, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(expectedMaxValue, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","date":"2020-08-07 05:14:20","endLine":178,"groupId":"104816","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMaxFromParentDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/db/cfa73d895b8615586cc847232f774b774611b1.src","preCode":"    public void testMaxFromParentDocs() throws IOException {\n        int numParentDocs = randomIntBetween(1, 20);\n        int expectedParentDocs = 0;\n        int expectedNestedDocs = 0;\n        double expectedMaxValue = Double.NEGATIVE_INFINITY;\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter iw = new RandomIndexWriter(random(), directory)) {\n                for (int i = 0; i < numParentDocs; i++) {\n                    List<Document> documents = new ArrayList<>();\n                    int numNestedDocs = randomIntBetween(0, 20);\n                    for (int nested = 0; nested < numNestedDocs; nested++) {\n                        Document document = new Document();\n                        document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                                IdFieldMapper.Defaults.NESTED_FIELD_TYPE));\n                        document.add(new Field(NestedPathFieldMapper.NAME, NESTED_OBJECT,\n                            NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                        documents.add(document);\n                        expectedNestedDocs++;\n                    }\n                    Document document = new Document();\n                    document.add(new Field(IdFieldMapper.NAME, Uid.encodeId(Integer.toString(i)),\n                            IdFieldMapper.Defaults.FIELD_TYPE));\n                    document.add(new Field(NestedPathFieldMapper.NAME, \"test\",\n                        NestedPathFieldMapper.Defaults.FIELD_TYPE));\n                    long value = randomNonNegativeLong() % 10000;\n                    document.add(new SortedNumericDocValuesField(VALUE_FIELD_NAME, value));\n                    document.add(SeqNoFieldMapper.SequenceIDFields.emptySeqID().primaryTerm);\n                    if (numNestedDocs > 0) {\n                        expectedMaxValue = Math.max(expectedMaxValue, value);\n                        expectedParentDocs++;\n                    }\n                    documents.add(document);\n                    iw.addDocuments(documents);\n                }\n                iw.commit();\n            }\n            try (IndexReader indexReader = wrapInMockESDirectoryReader(DirectoryReader.open(directory))) {\n                NestedAggregationBuilder nestedBuilder = new NestedAggregationBuilder(NESTED_AGG,\n                        NESTED_OBJECT);\n                ReverseNestedAggregationBuilder reverseNestedBuilder\n                    = new ReverseNestedAggregationBuilder(REVERSE_AGG_NAME);\n                nestedBuilder.subAggregation(reverseNestedBuilder);\n                MaxAggregationBuilder maxAgg = new MaxAggregationBuilder(MAX_AGG_NAME)\n                        .field(VALUE_FIELD_NAME);\n                reverseNestedBuilder.subAggregation(maxAgg);\n                MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(VALUE_FIELD_NAME, NumberFieldMapper.NumberType.LONG);\n\n                Nested nested = search(newSearcher(indexReader, false, true),\n                        new MatchAllDocsQuery(), nestedBuilder, fieldType);\n                assertEquals(expectedNestedDocs, nested.getDocCount());\n\n                ReverseNested reverseNested = (ReverseNested)\n                        ((InternalAggregation)nested).getProperty(REVERSE_AGG_NAME);\n                assertEquals(REVERSE_AGG_NAME, reverseNested.getName());\n                assertEquals(expectedParentDocs, reverseNested.getDocCount());\n\n                InternalMax max = (InternalMax)\n                        ((InternalAggregation)reverseNested).getProperty(MAX_AGG_NAME);\n                assertEquals(MAX_AGG_NAME, max.getName());\n                assertEquals(expectedMaxValue, max.getValue(), Double.MIN_VALUE);\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"5e3ea6eb11c68bdcc9adda51715a6e1fea9186d6","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-07 05:14:20","modifiedFileCount":"73","status":"M","submitter":"Nik Everett"}]
