[{"authorTime":"2018-12-06 15:31:46","codes":[{"authorDate":"2018-12-06 15:31:46","commitOrder":1,"curCode":"    public LeaderChecker(final Settings settings, final TransportService transportService, final Runnable onLeaderFailure) {\n        this.settings = settings;\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.registerRequestHandler(MasterFaultDetection.MASTER_PING_ACTION_NAME, MasterFaultDetection.MasterPingRequest::new,\n            Names.SAME, false, false, (request, channel, task) -> {\n                try {\n                    handleLeaderCheck(new LeaderCheckRequest(request.sourceNode));\n                } catch (CoordinationStateRejectedException e) {\n                    throw new MasterFaultDetection.ThisIsNotTheMasterYouAreLookingForException(e.getMessage());\n                }\n                channel.sendResponse(new MasterFaultDetection.MasterPingResponseResponse());\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2018-12-06 15:31:46","endLine":122,"groupId":"25180","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"LeaderChecker","params":"(finalSettingssettings@finalTransportServicetransportService@finalRunnableonLeaderFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/cbde35c18a95048977ef187b36888b22676bfc.src","preCode":"    public LeaderChecker(final Settings settings, final TransportService transportService, final Runnable onLeaderFailure) {\n        this.settings = settings;\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.registerRequestHandler(MasterFaultDetection.MASTER_PING_ACTION_NAME, MasterFaultDetection.MasterPingRequest::new,\n            Names.SAME, false, false, (request, channel, task) -> {\n                try {\n                    handleLeaderCheck(new LeaderCheckRequest(request.sourceNode));\n                } catch (CoordinationStateRejectedException e) {\n                    throw new MasterFaultDetection.ThisIsNotTheMasterYouAreLookingForException(e.getMessage());\n                }\n                channel.sendResponse(new MasterFaultDetection.MasterPingResponseResponse());\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/LeaderChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"},{"authorDate":"2018-12-06 15:31:46","commitOrder":1,"curCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure) {\n        this.settings = settings;\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.registerRequestHandler(\n            NodesFaultDetection.PING_ACTION_NAME, NodesFaultDetection.PingRequest::new, Names.SAME, false, false,\n            (request, channel, task) -> \r\n                channel.sendResponse(new NodesFaultDetection.PingResponse()));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2018-12-06 15:31:46","endLine":127,"groupId":"59724","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"FollowersChecker","params":"(Settingssettings@TransportServicetransportService@Consumer<FollowerCheckRequest>handleRequestAndUpdateState@BiConsumer<DiscoveryNode@String>onNodeFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/f99df31c0182b9c05d1c3cb0ff5e40108000e9.src","preCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure) {\n        this.settings = settings;\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.registerRequestHandler(\n            NodesFaultDetection.PING_ACTION_NAME, NodesFaultDetection.PingRequest::new, Names.SAME, false, false,\n            (request, channel, task) -> \r\n                channel.sendResponse(new NodesFaultDetection.PingResponse()));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/FollowersChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"}],"commitId":"ee05ef131286eead295cf58ed4393af56f0d7ade","commitMessage":"@@@Merge branch 'zen2'\n","date":"2018-12-06 15:31:46","modifiedFileCount":"122","status":"B","submitter":"Yannick Welsch"},{"authorTime":"2019-03-04 22:51:12","codes":[{"authorDate":"2019-03-04 22:51:12","commitOrder":2,"curCode":"    public LeaderChecker(final Settings settings, final TransportService transportService, final Runnable onLeaderFailure) {\n        this.settings = settings;\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2019-03-04 22:51:12","endLine":110,"groupId":"25180","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"LeaderChecker","params":"(finalSettingssettings@finalTransportServicetransportService@finalRunnableonLeaderFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/c5ea866ee8366187c6236af9010294e49280dd.src","preCode":"    public LeaderChecker(final Settings settings, final TransportService transportService, final Runnable onLeaderFailure) {\n        this.settings = settings;\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.registerRequestHandler(MasterFaultDetection.MASTER_PING_ACTION_NAME, MasterFaultDetection.MasterPingRequest::new,\n            Names.SAME, false, false, (request, channel, task) -> {\n                try {\n                    handleLeaderCheck(new LeaderCheckRequest(request.sourceNode));\n                } catch (CoordinationStateRejectedException e) {\n                    throw new MasterFaultDetection.ThisIsNotTheMasterYouAreLookingForException(e.getMessage());\n                }\n                channel.sendResponse(new MasterFaultDetection.MasterPingResponseResponse());\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/LeaderChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2019-03-04 22:51:12","commitOrder":2,"curCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure) {\n        this.settings = settings;\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2019-03-04 22:51:12","endLine":120,"groupId":"59724","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"FollowersChecker","params":"(Settingssettings@TransportServicetransportService@Consumer<FollowerCheckRequest>handleRequestAndUpdateState@BiConsumer<DiscoveryNode@String>onNodeFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4a/9be561ae96dff14a4432064fc08d3b7875c730.src","preCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure) {\n        this.settings = settings;\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.registerRequestHandler(\n            NodesFaultDetection.PING_ACTION_NAME, NodesFaultDetection.PingRequest::new, Names.SAME, false, false,\n            (request, channel, task) -> \r\n                channel.sendResponse(new NodesFaultDetection.PingResponse()));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/FollowersChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"3b71a31557e2a9a2a5a7ab6aa77609b03eb3be7e","commitMessage":"@@@Remove Zen1 (#39466)\n\nRemoves all traces of Zen1 from the code base. Some of these commits will also be backported to\n7.0/7.x (#39470) as the cluster.coordination package was making use of some things in\ndiscovery.zen and we want to keep 7.x as close as possible to master.","date":"2019-03-04 22:51:12","modifiedFileCount":"47","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2019-03-04 22:51:12","codes":[{"authorDate":"2019-05-30 15:02:13","commitOrder":3,"curCode":"    public LeaderChecker(final Settings settings, final TransportService transportService, final Consumer<Exception> onLeaderFailure) {\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2019-05-30 15:02:13","endLine":110,"groupId":"25180","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"LeaderChecker","params":"(finalSettingssettings@finalTransportServicetransportService@finalConsumer<Exception>onLeaderFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/70/3c08bf260c7841f666ab7ce39235e082676b88.src","preCode":"    public LeaderChecker(final Settings settings, final TransportService transportService, final Runnable onLeaderFailure) {\n        this.settings = settings;\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/LeaderChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2019-03-04 22:51:12","commitOrder":3,"curCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure) {\n        this.settings = settings;\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2019-03-04 22:51:12","endLine":120,"groupId":"59724","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"FollowersChecker","params":"(Settingssettings@TransportServicetransportService@Consumer<FollowerCheckRequest>handleRequestAndUpdateState@BiConsumer<DiscoveryNode@String>onNodeFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4a/9be561ae96dff14a4432064fc08d3b7875c730.src","preCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure) {\n        this.settings = settings;\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/FollowersChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"N"}],"commitId":"0ee8fed6cfec5801d0e08c0c91b840f13c637d63","commitMessage":"@@@Log leader and handshake failures by default (#42342)\n\nToday the `LeaderChecker` and `HandshakingTransportAddressConnector` do not log\nanything above `DEBUG` level. However there are some situations where it is\nappropriate for them to log at a higher level:\n\n- if the low-level handshake succeeds but the high-level one fails then this\n  indicates a config error that the user should resolve.  and the exception\n  will help them to do so.\n\n- if leader checks fail repeatedly then we restart discovery.  and the exception\n  will help to determine what went wrong.\n\nResolves #42153","date":"2019-05-30 15:02:13","modifiedFileCount":"4","status":"M","submitter":"David Turner"},{"authorTime":"2019-03-04 22:51:12","codes":[{"authorDate":"2019-09-24 20:39:44","commitOrder":4,"curCode":"    LeaderChecker(final Settings settings, final TransportService transportService, final Consumer<Exception> onLeaderFailure) {\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2019-09-24 20:39:44","endLine":110,"groupId":"25180","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"LeaderChecker","params":"(finalSettingssettings@finalTransportServicetransportService@finalConsumer<Exception>onLeaderFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/4d27ab31392308d4c4508b3eff93c9722d18d9.src","preCode":"    public LeaderChecker(final Settings settings, final TransportService transportService, final Consumer<Exception> onLeaderFailure) {\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/LeaderChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2019-03-04 22:51:12","commitOrder":4,"curCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure) {\n        this.settings = settings;\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2019-03-04 22:51:12","endLine":120,"groupId":"59724","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"FollowersChecker","params":"(Settingssettings@TransportServicetransportService@Consumer<FollowerCheckRequest>handleRequestAndUpdateState@BiConsumer<DiscoveryNode@String>onNodeFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4a/9be561ae96dff14a4432064fc08d3b7875c730.src","preCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure) {\n        this.settings = settings;\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/FollowersChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"N"}],"commitId":"02b6ce9ac57e296d47a91dfa5d984df1deec0c5a","commitMessage":"@@@Improve LeaderCheck rejection messages (#46998)\n\nToday the `LeaderChecker` rejects checks from nodes that are not in the current\ncluster with the exception message `leader check from unknown node` which\noffers no information about why the node is unknown. In fact the node must have\nbeen in the cluster in the recent past.  so it might help guide the user to a\nmore useful log message if we describe it as a `removed node` instead of an\n`unknown node`. This commit changes the exception message like this.  and also\ntidies up a few other loose ends in the `LeaderChecker`.","date":"2019-09-24 20:39:44","modifiedFileCount":"2","status":"M","submitter":"David Turner"},{"authorTime":"2019-09-26 00:50:11","codes":[{"authorDate":"2019-09-26 00:50:11","commitOrder":5,"curCode":"    LeaderChecker(final Settings settings, final TransportService transportService, final Consumer<Exception> onLeaderFailure) {\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2019-09-26 00:50:11","endLine":111,"groupId":"25180","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"LeaderChecker","params":"(finalSettingssettings@finalTransportServicetransportService@finalConsumer<Exception>onLeaderFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/029d2d5339bea07d79ed8a6fc7c48b99ade16e.src","preCode":"    LeaderChecker(final Settings settings, final TransportService transportService, final Consumer<Exception> onLeaderFailure) {\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/LeaderChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2019-09-26 00:50:11","commitOrder":5,"curCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure) {\n        this.settings = settings;\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2019-09-26 00:50:11","endLine":121,"groupId":"59724","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"FollowersChecker","params":"(Settingssettings@TransportServicetransportService@Consumer<FollowerCheckRequest>handleRequestAndUpdateState@BiConsumer<DiscoveryNode@String>onNodeFailure)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/39/0b7a4cbde3ab6a9245a00c79a6264a7d141b16.src","preCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure) {\n        this.settings = settings;\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/FollowersChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"632855885e77caaa31b37336576d92acca44641e","commitMessage":"@@@Extract proxy connection logic to specialized class (#46898)\n\nCurrently the logic to check if a connection to a remote discovery node\nexists and otherwise create a proxy connection is mixed with the\ncollect nodes.  cluster connection lifecycle.  and other\nRemoteClusterConnection logic. This commit introduces a specialized\nRemoteConnectionManager class which handles the open connections.\nAdditionally.  it reworks the \"round-robin\" proxy logic to create the list\nof potential connections at connection open/close time.  opposed to each\ntime a connection is requested.","date":"2019-09-26 00:50:11","modifiedFileCount":"14","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-07-10 21:44:56","codes":[{"authorDate":"2020-07-10 21:44:56","commitOrder":6,"curCode":"    LeaderChecker(final Settings settings, final TransportService transportService, final Consumer<Exception> onLeaderFailure,\n                  NodeHealthService nodeHealthService) {\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n        this.nodeHealthService = nodeHealthService;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2020-07-10 21:44:56","endLine":118,"groupId":"51398","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"LeaderChecker","params":"(finalSettingssettings@finalTransportServicetransportService@finalConsumer<Exception>onLeaderFailure@NodeHealthServicenodeHealthService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e9/5acceeda866461ffe381d08e5da0ca0528b039.src","preCode":"    LeaderChecker(final Settings settings, final TransportService transportService, final Consumer<Exception> onLeaderFailure) {\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/LeaderChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2020-07-10 21:44:56","commitOrder":6,"curCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure, NodeHealthService nodeHealthService) {\n        this.settings = settings;\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n        this.nodeHealthService = nodeHealthService;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2020-07-10 21:44:56","endLine":125,"groupId":"59724","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"FollowersChecker","params":"(Settingssettings@TransportServicetransportService@Consumer<FollowerCheckRequest>handleRequestAndUpdateState@BiConsumer<DiscoveryNode@String>onNodeFailure@NodeHealthServicenodeHealthService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/48/2cff11ea9c50e48102d074660275c21cd3a9d0.src","preCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure) {\n        this.settings = settings;\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/FollowersChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"366ca378a8644d6654417988820c67f4feb714fe","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-10 21:44:56","modifiedFileCount":"565","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-11-19 20:12:53","codes":[{"authorDate":"2020-07-10 21:44:56","commitOrder":7,"curCode":"    LeaderChecker(final Settings settings, final TransportService transportService, final Consumer<Exception> onLeaderFailure,\n                  NodeHealthService nodeHealthService) {\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n        this.nodeHealthService = nodeHealthService;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2020-07-10 21:44:56","endLine":118,"groupId":"107675","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"LeaderChecker","params":"(finalSettingssettings@finalTransportServicetransportService@finalConsumer<Exception>onLeaderFailure@NodeHealthServicenodeHealthService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e9/5acceeda866461ffe381d08e5da0ca0528b039.src","preCode":"    LeaderChecker(final Settings settings, final TransportService transportService, final Consumer<Exception> onLeaderFailure,\n                  NodeHealthService nodeHealthService) {\n        leaderCheckInterval = LEADER_CHECK_INTERVAL_SETTING.get(settings);\n        leaderCheckTimeout = LEADER_CHECK_TIMEOUT_SETTING.get(settings);\n        leaderCheckRetryCount = LEADER_CHECK_RETRY_COUNT_SETTING.get(settings);\n        this.transportService = transportService;\n        this.onLeaderFailure = onLeaderFailure;\n        this.nodeHealthService = nodeHealthService;\n\n        transportService.registerRequestHandler(LEADER_CHECK_ACTION_NAME, Names.SAME, false, false, LeaderCheckRequest::new,\n            (request, channel, task) -> {\n                handleLeaderCheck(request);\n                channel.sendResponse(Empty.INSTANCE);\n            });\n\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/LeaderChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"},{"authorDate":"2020-11-19 20:12:53","commitOrder":7,"curCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure, NodeHealthService nodeHealthService) {\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n        this.nodeHealthService = nodeHealthService;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","date":"2020-11-19 20:12:53","endLine":123,"groupId":"107675","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"FollowersChecker","params":"(Settingssettings@TransportServicetransportService@Consumer<FollowerCheckRequest>handleRequestAndUpdateState@BiConsumer<DiscoveryNode@String>onNodeFailure@NodeHealthServicenodeHealthService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2e/1ef85b74804b1ad06329aa7aa526ca8252b656.src","preCode":"    public FollowersChecker(Settings settings, TransportService transportService,\n                            Consumer<FollowerCheckRequest> handleRequestAndUpdateState,\n                            BiConsumer<DiscoveryNode, String> onNodeFailure, NodeHealthService nodeHealthService) {\n        this.settings = settings;\n        this.transportService = transportService;\n        this.handleRequestAndUpdateState = handleRequestAndUpdateState;\n        this.onNodeFailure = onNodeFailure;\n        this.nodeHealthService = nodeHealthService;\n\n        followerCheckInterval = FOLLOWER_CHECK_INTERVAL_SETTING.get(settings);\n        followerCheckTimeout = FOLLOWER_CHECK_TIMEOUT_SETTING.get(settings);\n        followerCheckRetryCount = FOLLOWER_CHECK_RETRY_COUNT_SETTING.get(settings);\n\n        updateFastResponseState(0, Mode.CANDIDATE);\n        transportService.registerRequestHandler(FOLLOWER_CHECK_ACTION_NAME, Names.SAME, false, false, FollowerCheckRequest::new,\n            (request, transportChannel, task) -> handleFollowerCheck(request, transportChannel));\n        transportService.addConnectionListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                handleDisconnectedNode(node);\n            }\n        });\n    }\n","realPath":"server/src/main/java/org/elasticsearch/cluster/coordination/FollowersChecker.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"8b39992bf879e702ac4be854822fae47dc44ebb6","commitMessage":"@@@Cleanup TransportRequestOptions Usage (#65248)\n\nA class with 2 fields does not need a builder.  especially\nwhen in many cases the builder result is just equivalent to the\n`EMPTY` singleton to begin with.\nRemoved the builder and simplified related code accordingly.\n","date":"2020-11-19 20:12:53","modifiedFileCount":"25","status":"M","submitter":"Armin Braun"}]
