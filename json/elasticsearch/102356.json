[{"authorTime":"2018-12-28 15:37:04","codes":[{"authorDate":"2018-12-28 15:37:04","commitOrder":1,"curCode":"    private void handleStartJoinFrom(DiscoveryNode node, long term) throws Exception {\n        final RequestHandlerRegistry<StartJoinRequest> startJoinHandler = (RequestHandlerRegistry<StartJoinRequest>)\n            transport.getRequestHandler(JoinHelper.START_JOIN_ACTION_NAME);\n        startJoinHandler.processMessageReceived(new StartJoinRequest(node, term), new TransportChannel() {\n            @Override\n            public String getProfileName() {\n                return \"dummy\";\n            }\n\n            @Override\n            public String getChannelType() {\n                return \"dummy\";\n            }\n\n            @Override\n            public void sendResponse(TransportResponse response) {\n\n            }\n\n            @Override\n            public void sendResponse(Exception exception) {\n                fail();\n            }\n        });\n        deterministicTaskQueue.runAllRunnableTasks();\n        assertFalse(isLocalNodeElectedMaster());\n        assertThat(coordinator.getMode(), equalTo(Coordinator.Mode.CANDIDATE));\n    }\n","date":"2018-12-28 15:37:04","endLine":403,"groupId":"16530","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"handleStartJoinFrom","params":"(DiscoveryNodenode@longterm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/21/4174d2a52faa26cd8c50d3b18b882c6f67ded1.src","preCode":"    private void handleStartJoinFrom(DiscoveryNode node, long term) throws Exception {\n        final RequestHandlerRegistry<StartJoinRequest> startJoinHandler = (RequestHandlerRegistry<StartJoinRequest>)\n            transport.getRequestHandler(JoinHelper.START_JOIN_ACTION_NAME);\n        startJoinHandler.processMessageReceived(new StartJoinRequest(node, term), new TransportChannel() {\n            @Override\n            public String getProfileName() {\n                return \"dummy\";\n            }\n\n            @Override\n            public String getChannelType() {\n                return \"dummy\";\n            }\n\n            @Override\n            public void sendResponse(TransportResponse response) {\n\n            }\n\n            @Override\n            public void sendResponse(Exception exception) {\n                fail();\n            }\n        });\n        deterministicTaskQueue.runAllRunnableTasks();\n        assertFalse(isLocalNodeElectedMaster());\n        assertThat(coordinator.getMode(), equalTo(Coordinator.Mode.CANDIDATE));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"B"},{"authorDate":"2018-12-28 15:37:04","commitOrder":1,"curCode":"    private void handleFollowerCheckFrom(DiscoveryNode node, long term) throws Exception {\n        final RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest> followerCheckHandler =\n            (RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest>)\n            transport.getRequestHandler(FollowersChecker.FOLLOWER_CHECK_ACTION_NAME);\n        followerCheckHandler.processMessageReceived(new FollowersChecker.FollowerCheckRequest(term, node), new TransportChannel() {\n            @Override\n            public String getProfileName() {\n                return \"dummy\";\n            }\n\n            @Override\n            public String getChannelType() {\n                return \"dummy\";\n            }\n\n            @Override\n            public void sendResponse(TransportResponse response) {\n\n            }\n\n            @Override\n            public void sendResponse(Exception exception) {\n                fail();\n            }\n        });\n        deterministicTaskQueue.runAllRunnableTasks();\n        assertFalse(isLocalNodeElectedMaster());\n        assertThat(coordinator.getMode(), equalTo(Coordinator.Mode.FOLLOWER));\n    }\n","date":"2018-12-28 15:37:04","endLine":433,"groupId":"14888","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handleFollowerCheckFrom","params":"(DiscoveryNodenode@longterm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/21/4174d2a52faa26cd8c50d3b18b882c6f67ded1.src","preCode":"    private void handleFollowerCheckFrom(DiscoveryNode node, long term) throws Exception {\n        final RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest> followerCheckHandler =\n            (RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest>)\n            transport.getRequestHandler(FollowersChecker.FOLLOWER_CHECK_ACTION_NAME);\n        followerCheckHandler.processMessageReceived(new FollowersChecker.FollowerCheckRequest(term, node), new TransportChannel() {\n            @Override\n            public String getProfileName() {\n                return \"dummy\";\n            }\n\n            @Override\n            public String getChannelType() {\n                return \"dummy\";\n            }\n\n            @Override\n            public void sendResponse(TransportResponse response) {\n\n            }\n\n            @Override\n            public void sendResponse(Exception exception) {\n                fail();\n            }\n        });\n        deterministicTaskQueue.runAllRunnableTasks();\n        assertFalse(isLocalNodeElectedMaster());\n        assertThat(coordinator.getMode(), equalTo(Coordinator.Mode.FOLLOWER));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":405,"status":"B"}],"commitId":"935c2e98b0cec6fa560cd7cb65939cbe5ca7c895","commitMessage":"@@@Zen2: Turn to follower on follower check when no state accepted yet from new leader (#37003)\n\nImproves on #36449 which did not cover the situation where a node had bumped its term during\nthe election.  and not when receiving the first follower check. This was uncovered while refactoring\nNodeJoinTests so that they don't need to access to an internal field of Coordinator anymore (which\ncan now be made private).","date":"2018-12-28 15:37:04","modifiedFileCount":"2","status":"B","submitter":"Yannick Welsch"},{"authorTime":"2020-04-03 23:47:59","codes":[{"authorDate":"2020-04-03 23:47:59","commitOrder":2,"curCode":"    private void handleStartJoinFrom(DiscoveryNode node, long term) throws Exception {\n        final RequestHandlerRegistry<StartJoinRequest> startJoinHandler = (RequestHandlerRegistry<StartJoinRequest>)\n            transport.getRequestHandler(JoinHelper.START_JOIN_ACTION_NAME);\n        startJoinHandler.processMessageReceived(new StartJoinRequest(node, term), new TestTransportChannel(new ActionListener<>() {\n            @Override\n            public void onResponse(TransportResponse transportResponse) {\n\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                fail();\n            }\n        }));\n        deterministicTaskQueue.runAllRunnableTasks();\n        assertFalse(isLocalNodeElectedMaster());\n        assertThat(coordinator.getMode(), equalTo(Coordinator.Mode.CANDIDATE));\n    }\n","date":"2020-04-03 23:47:59","endLine":413,"groupId":"2491","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"handleStartJoinFrom","params":"(DiscoveryNodenode@longterm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6f/be2383899579fa9d66ba69c690c07e1411daf2.src","preCode":"    private void handleStartJoinFrom(DiscoveryNode node, long term) throws Exception {\n        final RequestHandlerRegistry<StartJoinRequest> startJoinHandler = (RequestHandlerRegistry<StartJoinRequest>)\n            transport.getRequestHandler(JoinHelper.START_JOIN_ACTION_NAME);\n        startJoinHandler.processMessageReceived(new StartJoinRequest(node, term), new TransportChannel() {\n            @Override\n            public String getProfileName() {\n                return \"dummy\";\n            }\n\n            @Override\n            public String getChannelType() {\n                return \"dummy\";\n            }\n\n            @Override\n            public void sendResponse(TransportResponse response) {\n\n            }\n\n            @Override\n            public void sendResponse(Exception exception) {\n                fail();\n            }\n        });\n        deterministicTaskQueue.runAllRunnableTasks();\n        assertFalse(isLocalNodeElectedMaster());\n        assertThat(coordinator.getMode(), equalTo(Coordinator.Mode.CANDIDATE));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"},{"authorDate":"2020-04-03 23:47:59","commitOrder":2,"curCode":"    private void handleFollowerCheckFrom(DiscoveryNode node, long term) throws Exception {\n        final RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest> followerCheckHandler =\n            (RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest>)\n            transport.getRequestHandler(FollowersChecker.FOLLOWER_CHECK_ACTION_NAME);\n        final TestTransportChannel channel = new TestTransportChannel(new ActionListener<>() {\n            @Override\n            public void onResponse(TransportResponse transportResponse) {\n\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                fail();\n            }\n        });\n        followerCheckHandler.processMessageReceived(new FollowersChecker.FollowerCheckRequest(term, node), channel);\n        \r\n        deterministicTaskQueue.runAllRunnableTasks();\n        assertFalse(isLocalNodeElectedMaster());\n        assertThat(coordinator.getMode(), equalTo(Coordinator.Mode.FOLLOWER));\n    }\n","date":"2020-04-03 23:47:59","endLine":435,"groupId":"12578","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"handleFollowerCheckFrom","params":"(DiscoveryNodenode@longterm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6f/be2383899579fa9d66ba69c690c07e1411daf2.src","preCode":"    private void handleFollowerCheckFrom(DiscoveryNode node, long term) throws Exception {\n        final RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest> followerCheckHandler =\n            (RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest>)\n            transport.getRequestHandler(FollowersChecker.FOLLOWER_CHECK_ACTION_NAME);\n        followerCheckHandler.processMessageReceived(new FollowersChecker.FollowerCheckRequest(term, node), new TransportChannel() {\n            @Override\n            public String getProfileName() {\n                return \"dummy\";\n            }\n\n            @Override\n            public String getChannelType() {\n                return \"dummy\";\n            }\n\n            @Override\n            public void sendResponse(TransportResponse response) {\n\n            }\n\n            @Override\n            public void sendResponse(Exception exception) {\n                fail();\n            }\n        });\n        deterministicTaskQueue.runAllRunnableTasks();\n        assertFalse(isLocalNodeElectedMaster());\n        assertThat(coordinator.getMode(), equalTo(Coordinator.Mode.FOLLOWER));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"M"}],"commitId":"2c5951ae1cfaa207bb52ec952b7d9bd5cf09e564","commitMessage":"@@@Use TransportChannel in TransportHandshaker (#54684)\n\nCurrently the TransportHandshaker has a specialized codepath for sending\na response. In other work.  we are going to start having handshakes\ncontribute to circuit breaking (while not being breakable). This commit\nmoves in that direction by allowing the handshaker to responding using a\nstandard TcpTransportChannel similar to other requests.","date":"2020-04-03 23:47:59","modifiedFileCount":"9","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-04-15 01:32:37","codes":[{"authorDate":"2020-04-15 01:32:37","commitOrder":3,"curCode":"    private void handleStartJoinFrom(DiscoveryNode node, long term) throws Exception {\n        final RequestHandlerRegistry<StartJoinRequest> startJoinHandler = transport.getRequestHandlers()\n            .getHandler(JoinHelper.START_JOIN_ACTION_NAME);\n        startJoinHandler.processMessageReceived(new StartJoinRequest(node, term), new TestTransportChannel(new ActionListener<>() {\n            @Override\n            public void onResponse(TransportResponse transportResponse) {\n\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                fail();\n            }\n        }));\n        deterministicTaskQueue.runAllRunnableTasks();\n        assertFalse(isLocalNodeElectedMaster());\n        assertThat(coordinator.getMode(), equalTo(Coordinator.Mode.CANDIDATE));\n    }\n","date":"2020-04-15 01:32:37","endLine":413,"groupId":"102356","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"handleStartJoinFrom","params":"(DiscoveryNodenode@longterm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e9/4e355c8419cd4e049b300197382d6466eb1e10.src","preCode":"    private void handleStartJoinFrom(DiscoveryNode node, long term) throws Exception {\n        final RequestHandlerRegistry<StartJoinRequest> startJoinHandler = (RequestHandlerRegistry<StartJoinRequest>)\n            transport.getRequestHandler(JoinHelper.START_JOIN_ACTION_NAME);\n        startJoinHandler.processMessageReceived(new StartJoinRequest(node, term), new TestTransportChannel(new ActionListener<>() {\n            @Override\n            public void onResponse(TransportResponse transportResponse) {\n\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                fail();\n            }\n        }));\n        deterministicTaskQueue.runAllRunnableTasks();\n        assertFalse(isLocalNodeElectedMaster());\n        assertThat(coordinator.getMode(), equalTo(Coordinator.Mode.CANDIDATE));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"},{"authorDate":"2020-04-15 01:32:37","commitOrder":3,"curCode":"    private void handleFollowerCheckFrom(DiscoveryNode node, long term) throws Exception {\n        final RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest> followerCheckHandler = transport.getRequestHandlers()\n            .getHandler(FollowersChecker.FOLLOWER_CHECK_ACTION_NAME);\n        final TestTransportChannel channel = new TestTransportChannel(new ActionListener<>() {\n            @Override\n            public void onResponse(TransportResponse transportResponse) {\n\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                fail();\n            }\n        });\n        followerCheckHandler.processMessageReceived(new FollowersChecker.FollowerCheckRequest(term, node), channel);\n        \r\n        deterministicTaskQueue.runAllRunnableTasks();\n        assertFalse(isLocalNodeElectedMaster());\n        assertThat(coordinator.getMode(), equalTo(Coordinator.Mode.FOLLOWER));\n    }\n","date":"2020-04-15 01:32:37","endLine":434,"groupId":"102356","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"handleFollowerCheckFrom","params":"(DiscoveryNodenode@longterm)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e9/4e355c8419cd4e049b300197382d6466eb1e10.src","preCode":"    private void handleFollowerCheckFrom(DiscoveryNode node, long term) throws Exception {\n        final RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest> followerCheckHandler =\n            (RequestHandlerRegistry<FollowersChecker.FollowerCheckRequest>)\n            transport.getRequestHandler(FollowersChecker.FOLLOWER_CHECK_ACTION_NAME);\n        final TestTransportChannel channel = new TestTransportChannel(new ActionListener<>() {\n            @Override\n            public void onResponse(TransportResponse transportResponse) {\n\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                fail();\n            }\n        });\n        followerCheckHandler.processMessageReceived(new FollowersChecker.FollowerCheckRequest(term, node), channel);\n        \r\n        deterministicTaskQueue.runAllRunnableTasks();\n        assertFalse(isLocalNodeElectedMaster());\n        assertThat(coordinator.getMode(), equalTo(Coordinator.Mode.FOLLOWER));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"M"}],"commitId":"b54ee89511d20fd4bfccf265556fc64ed8117d06","commitMessage":"@@@Introduce mechanism to stub request handling (#55091)\n\nCurrently there is a clear mechanism to stub sending a request through\nthe transport. However.  this is limited to testing exceptions on the\nsender side. This commit reworks our transport related testing\ninfrastructure to allow stubbing request handling on the receiving side.","date":"2020-04-15 01:32:37","modifiedFileCount":"21","status":"M","submitter":"Tim Brooks"}]
