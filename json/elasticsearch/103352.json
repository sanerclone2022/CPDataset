[{"authorTime":"2018-05-17 06:46:44","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2018-04-26 03:22:53","endLine":72,"groupId":"69755","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/e6018d0ef6b194f8a2de82e8e8591dbcbd43e7.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"NB"},{"authorDate":"2018-05-17 06:46:44","commitOrder":2,"curCode":"        ServiceHolder(Settings nodeSettings, Settings indexSettings,\n                      Collection<Class<? extends Plugin>> plugins, AbstractBuilderTestCase testCase) throws IOException {\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings);\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            additionalSettings.add(InternalSettingsPlugin.VERSION_CREATED);\n            SettingsModule settingsModule = new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            for (String type : currentTypes) {\n                mapperService.merge(type, new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(type,\n                        STRING_FIELD_NAME, \"type=text\",\n                        STRING_FIELD_NAME_2, \"type=keyword\",\n                        INT_FIELD_NAME, \"type=integer\",\n                        INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                        DOUBLE_FIELD_NAME, \"type=double\",\n                        BOOLEAN_FIELD_NAME, \"type=boolean\",\n                        DATE_FIELD_NAME, \"type=date\",\n                        DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                        OBJECT_FIELD_NAME, \"type=object\",\n                        GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                        GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(type, new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                                + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                                INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                        MapperService.MergeReason.MAPPING_UPDATE);\n            }\n            testCase.initializeAdditionalMappings(mapperService);\n        }\n","date":"2018-05-17 06:46:44","endLine":380,"groupId":"57393","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@AbstractBuilderTestCasetestCase)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/0e93ec672b84ffa8b07ef090660d3234691832.src","preCode":"        ServiceHolder(Settings nodeSettings, Settings indexSettings,\n                      Collection<Class<? extends Plugin>> plugins, AbstractBuilderTestCase testCase) throws IOException {\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings);\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            additionalSettings.add(InternalSettingsPlugin.VERSION_CREATED);\n            SettingsModule settingsModule = new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            for (String type : currentTypes) {\n                mapperService.merge(type, new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(type,\n                        STRING_FIELD_NAME, \"type=text\",\n                        STRING_FIELD_NAME_2, \"type=keyword\",\n                        INT_FIELD_NAME, \"type=integer\",\n                        INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                        DOUBLE_FIELD_NAME, \"type=double\",\n                        BOOLEAN_FIELD_NAME, \"type=boolean\",\n                        DATE_FIELD_NAME, \"type=date\",\n                        DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                        OBJECT_FIELD_NAME, \"type=object\",\n                        GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                        GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(type, new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                                + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                                INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                        MapperService.MergeReason.MAPPING_UPDATE);\n            }\n            testCase.initializeAdditionalMappings(mapperService);\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"B"}],"commitId":"4e757fff211db64a1411cdb785d99980babec98e","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-17 06:46:44","modifiedFileCount":"61","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-07-19 02:10:12","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2018-04-26 03:22:53","endLine":72,"groupId":"69755","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/e6018d0ef6b194f8a2de82e8e8591dbcbd43e7.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2018-07-19 02:10:12","commitOrder":3,"curCode":"        ServiceHolder(Settings nodeSettings, Settings indexSettings,\n                      Collection<Class<? extends Plugin>> plugins, AbstractBuilderTestCase testCase) throws IOException {\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings);\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            additionalSettings.add(InternalSettingsPlugin.VERSION_CREATED);\n            SettingsModule settingsModule = new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n\n            for (String type : currentTypes) {\n                mapperService.merge(type, new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(type,\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(type, new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                                + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                                INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                        MapperService.MergeReason.MAPPING_UPDATE);\n            }\n            testCase.initializeAdditionalMappings(mapperService);\n        }\n","date":"2018-07-19 02:10:12","endLine":408,"groupId":"57393","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@AbstractBuilderTestCasetestCase)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a8/91f30b93d210ebb97ae8a7b80d494dbbe40afc.src","preCode":"        ServiceHolder(Settings nodeSettings, Settings indexSettings,\n                      Collection<Class<? extends Plugin>> plugins, AbstractBuilderTestCase testCase) throws IOException {\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings);\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            additionalSettings.add(InternalSettingsPlugin.VERSION_CREATED);\n            SettingsModule settingsModule = new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            for (String type : currentTypes) {\n                mapperService.merge(type, new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(type,\n                        STRING_FIELD_NAME, \"type=text\",\n                        STRING_FIELD_NAME_2, \"type=keyword\",\n                        INT_FIELD_NAME, \"type=integer\",\n                        INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                        DOUBLE_FIELD_NAME, \"type=double\",\n                        BOOLEAN_FIELD_NAME, \"type=boolean\",\n                        DATE_FIELD_NAME, \"type=date\",\n                        DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                        OBJECT_FIELD_NAME, \"type=object\",\n                        GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                        GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(type, new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                                + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                                INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                        MapperService.MergeReason.MAPPING_UPDATE);\n            }\n            testCase.initializeAdditionalMappings(mapperService);\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"}],"commitId":"a019e723b5475f0ca77063dab45fbcccd1d6559a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-19 02:10:12","modifiedFileCount":"121","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-07-27 17:51:09","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":4,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2018-04-26 03:22:53","endLine":72,"groupId":"69755","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/e6018d0ef6b194f8a2de82e8e8591dbcbd43e7.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2018-07-27 17:51:09","commitOrder":4,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings);\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            additionalSettings.add(InternalSettingsPlugin.VERSION_CREATED);\n            SettingsModule settingsModule = new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2018-07-27 17:51:09","endLine":386,"groupId":"57393","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fc/cec5f784f8b218229233c356ce2127f4ccc509.src","preCode":"        ServiceHolder(Settings nodeSettings, Settings indexSettings,\n                      Collection<Class<? extends Plugin>> plugins, AbstractBuilderTestCase testCase) throws IOException {\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings);\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            additionalSettings.add(InternalSettingsPlugin.VERSION_CREATED);\n            SettingsModule settingsModule = new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n\n            for (String type : currentTypes) {\n                mapperService.merge(type, new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(type,\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(type, new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                                + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                                INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                        MapperService.MergeReason.MAPPING_UPDATE);\n            }\n            testCase.initializeAdditionalMappings(mapperService);\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"}],"commitId":"dfb277cfb7969ad543a31dea234579d0e886a73a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-27 17:51:09","modifiedFileCount":"105","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-08-11 01:23:14","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":5,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2018-04-26 03:22:53","endLine":72,"groupId":"69755","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/e6018d0ef6b194f8a2de82e8e8591dbcbd43e7.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2018-08-11 01:23:14","commitOrder":5,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings);\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            additionalSettings.add(InternalSettingsPlugin.VERSION_CREATED);\n            SettingsModule settingsModule = new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2018-08-11 01:23:14","endLine":404,"groupId":"57393","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/11325311dd8e26023deb7c39edca7856fab66c.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings);\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            additionalSettings.add(InternalSettingsPlugin.VERSION_CREATED);\n            SettingsModule settingsModule = new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"93637e2135fe449dbc4addcc871055e5ed2a00c4","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-11 01:23:14","modifiedFileCount":"38","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-09-05 16:48:48","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":6,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2018-04-26 03:22:53","endLine":72,"groupId":"69755","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/e6018d0ef6b194f8a2de82e8e8591dbcbd43e7.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2018-09-05 16:48:48","commitOrder":6,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings);\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule = new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2018-09-05 16:48:48","endLine":403,"groupId":"57393","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/3902893411a59aa9b3221629f1513729c5a265.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings);\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            additionalSettings.add(InternalSettingsPlugin.VERSION_CREATED);\n            SettingsModule settingsModule = new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"f00a28a909be71e17f0d1bc4c4a6ee15c5fdd0cb","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-05 16:48:48","modifiedFileCount":"122","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-11 04:30:44","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":7,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2018-04-26 03:22:53","endLine":72,"groupId":"69755","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/e6018d0ef6b194f8a2de82e8e8591dbcbd43e7.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2018-09-11 04:30:44","commitOrder":7,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings);\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2018-09-11 04:30:44","endLine":404,"groupId":"57393","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/f93f8ea30fe4c0567967edd281c12789be37a0.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings);\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule = new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"cdc4f57a773b588fe872f247ee62c3d5539e2faa","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-11 04:30:44","modifiedFileCount":"186","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-25 00:33:51","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":8,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2018-04-26 03:22:53","endLine":72,"groupId":"69755","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/e6018d0ef6b194f8a2de82e8e8591dbcbd43e7.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2018-09-25 00:33:51","commitOrder":8,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2018-09-25 00:33:51","endLine":408,"groupId":"57393","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/ef0a249b6879303049860c3d5df3b005a07b1e.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings);\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"}],"commitId":"243e863f6e862074b564f909e90a8fd83ae8ad01","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-25 00:33:51","modifiedFileCount":"253","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-12-18 04:38:14","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":9,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2018-04-26 03:22:53","endLine":72,"groupId":"69755","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/e6018d0ef6b194f8a2de82e8e8591dbcbd43e7.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2018-12-18 04:38:14","commitOrder":9,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\",\n                    LEGACY_GEO_SHAPE_FIELD_NAME, \"type=geo_shape,tree=quadtree\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2018-12-18 04:38:14","endLine":426,"groupId":"57393","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/da/f29e46b05191bb05eea38cf97f0d0d117e7201.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"M"}],"commitId":"5bc7822562a6eefa4a64743233160cdc9f431adf","commitMessage":"@@@[Geo] Integrate Lucene's LatLonShape (BKD Backed GeoShapes) as default `geo_shape` indexing approach (#35320)\n\nThis commit  exposes lucene's LatLonShape field as the\ndefault type in GeoShapeFieldMapper. To use the new \nindexing approach.  simply set \"type\" : \"geo_shape\" in \nthe mappings without setting any of the strategy.  precision.  \ntree_levels.  or distance_error_pct parameters. Note the \nfollowing when using the new indexing approach:\n\n* geo_shape query does not support querying by \nMULTIPOINT.\n* LINESTRING and MULTILINESTRING queries do not \nyet support WITHIN relation.\n* CONTAINS relation is not yet supported.\nThe tree.  precision.  tree_levels.  distance_error_pct.  \nand points_only parameters are deprecated.\n","date":"2018-12-18 04:38:14","modifiedFileCount":"22","status":"M","submitter":"Nick Knize"},{"authorTime":"2018-12-18 10:09:46","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":10,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2018-04-26 03:22:53","endLine":72,"groupId":"69755","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/e6018d0ef6b194f8a2de82e8e8591dbcbd43e7.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2018-12-18 10:09:46","commitOrder":10,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2018-12-18 10:09:46","endLine":408,"groupId":"57393","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/ef0a249b6879303049860c3d5df3b005a07b1e.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\",\n                    LEGACY_GEO_SHAPE_FIELD_NAME, \"type=geo_shape,tree=quadtree\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"}],"commitId":"96d279ed83e25f427db86b831333ca6772202a91","commitMessage":"@@@Revert \"[Geo] Integrate Lucene's LatLonShape (BKD Backed GeoShapes) as default `geo_shape` indexing approach (#35320)\"\n\nThis reverts commit 5bc7822562a6eefa4a64743233160cdc9f431adf.\n","date":"2018-12-18 10:09:46","modifiedFileCount":"22","status":"M","submitter":"Nicholas Knize"},{"authorTime":"2019-03-19 19:04:35","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":11,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2018-04-26 03:22:53","endLine":72,"groupId":"69755","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/e6018d0ef6b194f8a2de82e8e8591dbcbd43e7.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2019-03-19 19:04:35","commitOrder":11,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2019-03-19 19:04:35","endLine":410,"groupId":"57393","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0f/1a3fb3dcb7c71140dccf3057cf5b2e1b1f6565.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"}],"commitId":"a87b1391d639876e2797d2a347593295f0a5d164","commitMessage":"@@@Expose proximity boosting (#39385)\n\nExpose DistanceFeatureQuery for geo.  date and date_nanos types\n\nCloses #33382","date":"2019-03-19 19:04:35","modifiedFileCount":"8","status":"M","submitter":"Mayya Sharipova"},{"authorTime":"2019-06-06 08:22:37","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":12,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2018-04-26 03:22:53","endLine":72,"groupId":"69755","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/e6018d0ef6b194f8a2de82e8e8591dbcbd43e7.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2019-06-06 08:22:37","commitOrder":12,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2019-06-06 08:22:37","endLine":413,"groupId":"57393","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/85/aec4535a9b71de6c01784044099efb8123b8a6.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, false, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"}],"commitId":"b15d62c3ab5b3766a975f8d4b3878cbde8c2b6c0","commitMessage":"@@@Remove the transport client (#42538)\n\nThis commit removes the transport client and all remaining uses in the code.\n","date":"2019-06-06 08:22:37","modifiedFileCount":"136","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2019-08-01 21:40:51","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":13,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2018-04-26 03:22:53","endLine":72,"groupId":"69755","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/e6018d0ef6b194f8a2de82e8e8591dbcbd43e7.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2019-08-01 21:40:51","commitOrder":13,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2019-08-01 21:40:51","endLine":418,"groupId":"57393","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5f/3a52a44fe2428fa3d0e4f0ce48e806efd0af84.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(indicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"}],"commitId":"0a6adceaa36f758afd5a24a7d764ec32f9bd6d4d","commitMessage":"@@@Use IndicesModule named writables in elasticsearch-shard tool (#45036)\n\n* Use IndicesModule named writables in es shard tool\n\n* Fix compilation\n\n* Make IndicesModule named methods static\n\n* Make checkstyle happy\n","date":"2019-08-01 21:40:51","modifiedFileCount":"12","status":"M","submitter":"Andrey Ershov"},{"authorTime":"2019-11-27 20:38:09","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":14,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2018-04-26 03:22:53","endLine":72,"groupId":"69755","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/e6018d0ef6b194f8a2de82e8e8591dbcbd43e7.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2019-11-27 20:38:09","commitOrder":14,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2019-11-27 20:38:09","endLine":402,"groupId":"56600","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/07/420ce2d3f7b6bbe67ada2f28d3852561bd1f43.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null));\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"c2deb287f138323e9cee1b4fd0aa3d5a9056b1f3","commitMessage":"@@@Add a cluster setting to disallow loading fielddata on _id field (#49166)\n\nThis change adds a dynamic cluster setting named `indices.id_field_data.enabled`.\nWhen set to `false` any attempt to load the fielddata for the `_id` field will fail\nwith an exception. The default value in this change is set to `false` in order to prevent\nfielddata usage on this field for future versions but it will be set to `true` when backporting\nto 7x. When the setting is set to true (manually or by default in 7x) the loading will also issue\na deprecation warning since we want to disallow fielddata entirely when https://github.com/elastic/elasticsearch/issues/26472\nis implemented.\n\nCloses #43599","date":"2019-11-27 20:38:09","modifiedFileCount":"30","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-01-10 21:29:19","codes":[{"authorDate":"2020-01-10 21:29:19","commitOrder":15,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2020-01-10 21:29:19","endLine":73,"groupId":"69755","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/4aff6d10cdf883ca9410f9d15a35ecfa2e5082.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2020-01-10 21:29:19","commitOrder":15,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2020-01-10 21:29:19","endLine":402,"groupId":"56600","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/82cf4ea490dcc730abdbc0c95d555eaa3822f4.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.buildFromSimplifiedDef(\"_doc\",\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"807a4fb996602a27b46afae96da676a0f5c783d2","commitMessage":"@@@Remove type parameter from PutMappingRequest.buildFromSimplifiedDef() (#50844)\n\nMappings built by this method should all be wrapped with _doc.  so there's no need\nto pass the type any more. This also renames the method to simpleMapping.  in line\nwith CreateIndexRequest.  to help migration by causing compilation errors; and changes\nthe signature to take a String... rather than an Object....\n\nRelates to #41059","date":"2020-01-10 21:29:19","modifiedFileCount":"23","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-02-21 07:48:26","codes":[{"authorDate":"2020-01-10 21:29:19","commitOrder":16,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2020-01-10 21:29:19","endLine":73,"groupId":"69755","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/4aff6d10cdf883ca9410f9d15a35ecfa2e5082.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"},{"authorDate":"2020-02-21 07:48:26","commitOrder":16,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = new MockScriptService(Settings.EMPTY, scriptModule.engines, scriptModule.contexts);\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2020-02-21 07:48:26","endLine":403,"groupId":"48545","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a4/24501a152966b812672e2498146eb7c9532e8b.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = scriptModule.getScriptService();\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"0866031899a889afb6f296e89a4c1d277b496cfc","commitMessage":"@@@Scripting: split out compile limits and caching (#52498)\n\nPhase 1 of adding compilation limits per context.\n* Refactor rate limiting and caching into separate class.  \n  `ScriptCache`.   which will be used per context.\n* Disable compilation limit for certain tests.\n\nRefs: #50152\n","date":"2020-02-21 07:48:26","modifiedFileCount":"9","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2020-04-03 22:00:46","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":17,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                TEXT_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2020-04-03 22:00:46","endLine":72,"groupId":"69755","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/62fbeeebe3074dd5be3b2dcbfcdafedae3f7c6.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                STRING_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-04-03 22:00:46","commitOrder":17,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = new MockScriptService(Settings.EMPTY, scriptModule.engines, scriptModule.contexts);\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    TEXT_FIELD_NAME, \"type=text\",\n                    KEYWORD_FIELD_NAME, \"type=keyword\",\n                    TEXT_ALIAS_FIELD_NAME, \"type=alias,path=\" + TEXT_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2020-04-03 22:00:46","endLine":404,"groupId":"48545","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3d/8724f68fcc415bb5c4aa3a6e776de79cb5464d.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = new MockScriptService(Settings.EMPTY, scriptModule.engines, scriptModule.contexts);\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    STRING_FIELD_NAME, \"type=text\",\n                    STRING_FIELD_NAME_2, \"type=keyword\",\n                    STRING_ALIAS_FIELD_NAME, \"type=alias,path=\" + STRING_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"M"}],"commitId":"f5759bb2092f1a957e79626c872c3f5707c1ee04","commitMessage":"@@@Rename field name constants in AbstractBuilderTestCase (#53234)\n\nSome field name constants were not updaten when we moved from \"string\" to \"text\"\nand \"keyword\" fields. Renaming them makes it easier and faster to know which\nfield type is used in test subclassing this base test case.","date":"2020-04-03 22:00:46","modifiedFileCount":"34","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2020-08-11 21:30:56","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":18,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                TEXT_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2020-04-03 22:00:46","endLine":72,"groupId":"69755","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/62fbeeebe3074dd5be3b2dcbfcdafedae3f7c6.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                TEXT_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2020-08-11 21:30:56","commitOrder":18,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = new MockScriptService(Settings.EMPTY, scriptModule.engines, scriptModule.contexts);\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false, null);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    TEXT_FIELD_NAME, \"type=text\",\n                    KEYWORD_FIELD_NAME, \"type=keyword\",\n                    TEXT_ALIAS_FIELD_NAME, \"type=alias,path=\" + TEXT_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2020-08-11 21:30:56","endLine":405,"groupId":"16976","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a5/efdae46d58fe24dfd5bf8a903df7a7e27174a0.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = new MockScriptService(Settings.EMPTY, scriptModule.engines, scriptModule.contexts);\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    TEXT_FIELD_NAME, \"type=text\",\n                    KEYWORD_FIELD_NAME, \"type=keyword\",\n                    TEXT_ALIAS_FIELD_NAME, \"type=alias,path=\" + TEXT_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"9b9aa5fa451a161377bd365e2285c4683bf9d771","commitMessage":"@@@Add the ScriptService to the field parser config (#60933)\n\nThis makes parsing runtime fields much simpler.\n\nWe'd initially resisted doing this but all of our other integration options\nproved more troublesome.","date":"2020-08-11 21:30:56","modifiedFileCount":"21","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-10-13 02:52:13","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":19,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                TEXT_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2020-04-03 22:00:46","endLine":72,"groupId":"69755","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/62fbeeebe3074dd5be3b2dcbfcdafedae3f7c6.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                TEXT_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2020-10-13 02:52:13","commitOrder":19,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = new MockScriptService(Settings.EMPTY, scriptModule.engines, scriptModule.contexts);\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false, null);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    TEXT_FIELD_NAME, \"type=text\",\n                    KEYWORD_FIELD_NAME, \"type=keyword\",\n                    TEXT_ALIAS_FIELD_NAME, \"type=alias,path=\" + TEXT_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\",\n                    BINARY_FIELD_NAME, \"type=binary\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2020-10-13 02:52:13","endLine":407,"groupId":"16976","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/44/03c8a7a346acbef93958c8df5f9c85a947730a.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = new MockScriptService(Settings.EMPTY, scriptModule.engines, scriptModule.contexts);\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false, null);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    TEXT_FIELD_NAME, \"type=text\",\n                    KEYWORD_FIELD_NAME, \"type=keyword\",\n                    TEXT_ALIAS_FIELD_NAME, \"type=alias,path=\" + TEXT_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"}],"commitId":"1e949ca10d45adeec480ff9d2dbe856f612d04d4","commitMessage":"@@@Match query to respect lenient flag (#63555)\n\nA recent change introduced throwing exception when a match query is executed against a field that does not support text search. The query would fail anyways.  only at a later stage. The problem though is that the lenient flag needs to be taken into account.","date":"2020-10-13 02:52:13","modifiedFileCount":"6","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-02-01 21:24:28","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":20,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                TEXT_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2020-04-03 22:00:46","endLine":72,"groupId":"69755","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/62fbeeebe3074dd5be3b2dcbfcdafedae3f7c6.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                TEXT_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2021-02-01 21:24:28","commitOrder":20,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class<?>[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = new MockScriptService(Settings.EMPTY, scriptModule.engines, scriptModule.contexts);\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false, null);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    TEXT_FIELD_NAME, \"type=text\",\n                    KEYWORD_FIELD_NAME, \"type=keyword\",\n                    TEXT_ALIAS_FIELD_NAME, \"type=alias,path=\" + TEXT_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\",\n                    BINARY_FIELD_NAME, \"type=binary\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2021-02-01 21:24:28","endLine":403,"groupId":"16976","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/41/f6c2835c7b41c5efb4731f74be8ec36ab76568.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = new MockScriptService(Settings.EMPTY, scriptModule.engines, scriptModule.contexts);\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false, null);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    TEXT_FIELD_NAME, \"type=text\",\n                    KEYWORD_FIELD_NAME, \"type=keyword\",\n                    TEXT_ALIAS_FIELD_NAME, \"type=alias,path=\" + TEXT_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\",\n                    BINARY_FIELD_NAME, \"type=binary\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"dc66f06cbfad807d9888364328e80b1d423fc417","commitMessage":"@@@Drop rawtypes suppression from test framework (#68247)\n\nThis drops the `-Xlint:-rawtypes` suppression from the test framework\nbuild because it makes it easier to write code with \"funny\" assumptions.\nFor the most part I made the assumptions explicit rather than implicit.\nSome of them are still \"funny\".  but at least they are a little more\nobvious when you read the code.\n\nI also had to touch a pile of agg tests due to a signature that had a raw\ntype as well.","date":"2021-02-01 21:24:28","modifiedFileCount":"33","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-04-21 21:28:12","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":21,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                TEXT_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2020-04-03 22:00:46","endLine":72,"groupId":"69755","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/62fbeeebe3074dd5be3b2dcbfcdafedae3f7c6.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                TEXT_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2021-04-21 21:28:12","commitOrder":21,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class<?>[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = new MockScriptService(Settings.EMPTY, scriptModule.engines, scriptModule.contexts);\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false, ScriptCompiler.NONE);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    TEXT_FIELD_NAME, \"type=text\",\n                    KEYWORD_FIELD_NAME, \"type=keyword\",\n                    TEXT_ALIAS_FIELD_NAME, \"type=alias,path=\" + TEXT_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\",\n                    BINARY_FIELD_NAME, \"type=binary\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2021-04-21 21:28:12","endLine":392,"groupId":"0","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/90/9a4dd451a989c27a7c2eceb73c1257f0fa8169.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class<?>[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = new MockScriptService(Settings.EMPTY, scriptModule.engines, scriptModule.contexts);\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false, null);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    TEXT_FIELD_NAME, \"type=text\",\n                    KEYWORD_FIELD_NAME, \"type=keyword\",\n                    TEXT_ALIAS_FIELD_NAME, \"type=alias,path=\" + TEXT_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\",\n                    BINARY_FIELD_NAME, \"type=binary\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"M"}],"commitId":"9a86dde3572a6f3999eea75bc3ce30b965837ba3","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-21 21:28:12","modifiedFileCount":"1285","status":"M","submitter":"iverase"},{"authorTime":"2021-09-06 20:26:46","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":22,"curCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                TEXT_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","date":"2020-04-03 22:00:46","endLine":72,"groupId":"103352","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"initializeAdditionalMappings","params":"(MapperServicemapperService)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/62fbeeebe3074dd5be3b2dcbfcdafedae3f7c6.src","preCode":"    protected void initializeAdditionalMappings(MapperService mapperService) throws IOException {\n        mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                TEXT_FIELD_NAME, \"type=text\",\n                INT_FIELD_NAME, \"type=integer\",\n                DOUBLE_FIELD_NAME, \"type=double\",\n                BOOLEAN_FIELD_NAME, \"type=boolean\",\n                DATE_FIELD_NAME, \"type=date\",\n                OBJECT_FIELD_NAME, \"type=object\",\n                GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                \"nested1\", \"type=nested\"\n        ))), MapperService.MergeReason.MAPPING_UPDATE);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/NestedQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2021-09-06 20:26:46","commitOrder":22,"curCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class<?>[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = new MockScriptService(Settings.EMPTY, scriptModule.engines, scriptModule.contexts);\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false, ScriptCompiler.NONE);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService());\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    TEXT_FIELD_NAME, \"type=text\",\n                    KEYWORD_FIELD_NAME, \"type=keyword\",\n                    TEXT_ALIAS_FIELD_NAME, \"type=alias,path=\" + TEXT_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\",\n                    BINARY_FIELD_NAME, \"type=binary\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","date":"2021-09-06 20:26:46","endLine":392,"groupId":"103352","id":42,"instanceNumber":2,"isCurCommit":1,"methodName":"ServiceHolder","params":"(SettingsnodeSettings@SettingsindexSettings@Collection<Class<?extendsPlugin>>plugins@longnowInMillis@AbstractBuilderTestCasetestCase@booleanregisterType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/bcfd62a8e99a62fb97529e8ef215bc9fd6a607.src","preCode":"        ServiceHolder(Settings nodeSettings,\n                        Settings indexSettings,\n                        Collection<Class<? extends Plugin>> plugins,\n                        long nowInMillis,\n                        AbstractBuilderTestCase testCase,\n                        boolean registerType) throws IOException {\n            this.nowInMillis = nowInMillis;\n            Environment env = InternalSettingsPreparer.prepareEnvironment(nodeSettings, emptyMap(),\n                    null, () -> {\n                        throw new AssertionError(\"node.name must be set\");\n                    });\n            PluginsService pluginsService;\n            pluginsService = new PluginsService(nodeSettings, null, env.modulesFile(), env.pluginsFile(), plugins);\n\n            client = (Client) Proxy.newProxyInstance(\n                    Client.class.getClassLoader(),\n                    new Class<?>[]{Client.class},\n                    clientInvocationHandler);\n            ScriptModule scriptModule = createScriptModule(pluginsService.filterPlugins(ScriptPlugin.class));\n            List<Setting<?>> additionalSettings = pluginsService.getPluginSettings();\n            SettingsModule settingsModule =\n                    new SettingsModule(nodeSettings, additionalSettings, pluginsService.getPluginSettingsFilter(), Collections.emptySet());\n            searchModule = new SearchModule(nodeSettings, pluginsService.filterPlugins(SearchPlugin.class));\n            IndicesModule indicesModule = new IndicesModule(pluginsService.filterPlugins(MapperPlugin.class));\n            List<NamedWriteableRegistry.Entry> entries = new ArrayList<>();\n            entries.addAll(IndicesModule.getNamedWriteables());\n            entries.addAll(searchModule.getNamedWriteables());\n            namedWriteableRegistry = new NamedWriteableRegistry(entries);\n            xContentRegistry = new NamedXContentRegistry(Stream.of(\n                    searchModule.getNamedXContents().stream()\n                    ).flatMap(Function.identity()).collect(toList()));\n            IndexScopedSettings indexScopedSettings = settingsModule.getIndexScopedSettings();\n            idxSettings = IndexSettingsModule.newIndexSettings(index, indexSettings, indexScopedSettings);\n            AnalysisModule analysisModule = new AnalysisModule(TestEnvironment.newEnvironment(nodeSettings), emptyList());\n            IndexAnalyzers indexAnalyzers = analysisModule.getAnalysisRegistry().build(idxSettings);\n            scriptService = new MockScriptService(Settings.EMPTY, scriptModule.engines, scriptModule.contexts);\n            similarityService = new SimilarityService(idxSettings, null, Collections.emptyMap());\n            MapperRegistry mapperRegistry = indicesModule.getMapperRegistry();\n            mapperService = new MapperService(idxSettings, indexAnalyzers, xContentRegistry, similarityService, mapperRegistry,\n                    () -> createShardContext(null), () -> false, ScriptCompiler.NONE);\n            IndicesFieldDataCache indicesFieldDataCache = new IndicesFieldDataCache(nodeSettings, new IndexFieldDataCache.Listener() {\n            });\n            indexFieldDataService = new IndexFieldDataService(idxSettings, indicesFieldDataCache,\n                    new NoneCircuitBreakerService(), mapperService);\n            bitsetFilterCache = new BitsetFilterCache(idxSettings, new BitsetFilterCache.Listener() {\n                @Override\n                public void onCache(ShardId shardId, Accountable accountable) {\n\n                }\n\n                @Override\n                public void onRemoval(ShardId shardId, Accountable accountable) {\n\n                }\n            });\n\n            if (registerType) {\n                mapperService.merge(\"_doc\", new CompressedXContent(Strings.toString(PutMappingRequest.simpleMapping(\n                    TEXT_FIELD_NAME, \"type=text\",\n                    KEYWORD_FIELD_NAME, \"type=keyword\",\n                    TEXT_ALIAS_FIELD_NAME, \"type=alias,path=\" + TEXT_FIELD_NAME,\n                    INT_FIELD_NAME, \"type=integer\",\n                    INT_ALIAS_FIELD_NAME, \"type=alias,path=\" + INT_FIELD_NAME,\n                    INT_RANGE_FIELD_NAME, \"type=integer_range\",\n                    DOUBLE_FIELD_NAME, \"type=double\",\n                    BOOLEAN_FIELD_NAME, \"type=boolean\",\n                    DATE_NANOS_FIELD_NAME, \"type=date_nanos\",\n                    DATE_FIELD_NAME, \"type=date\",\n                    DATE_ALIAS_FIELD_NAME, \"type=alias,path=\" + DATE_FIELD_NAME,\n                    DATE_RANGE_FIELD_NAME, \"type=date_range\",\n                    OBJECT_FIELD_NAME, \"type=object\",\n                    GEO_POINT_FIELD_NAME, \"type=geo_point\",\n                    GEO_POINT_ALIAS_FIELD_NAME, \"type=alias,path=\" + GEO_POINT_FIELD_NAME,\n                    GEO_SHAPE_FIELD_NAME, \"type=geo_shape\",\n                    BINARY_FIELD_NAME, \"type=binary\"\n                ))), MapperService.MergeReason.MAPPING_UPDATE);\n                \r\n                mapperService.merge(\"_doc\", new CompressedXContent(\"{\\\"properties\\\":{\\\"\" + OBJECT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"object\\\",\"\n                        + \"\\\"properties\\\":{\\\"\" + DATE_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"date\\\"},\\\"\" +\n                        INT_FIELD_NAME + \"\\\":{\\\"type\\\":\\\"integer\\\"}}}}}\"),\n                    MapperService.MergeReason.MAPPING_UPDATE);\n                testCase.initializeAdditionalMappings(mapperService);\n            }\n        }\n","realPath":"test/framework/src/main/java/org/elasticsearch/test/AbstractBuilderTestCase.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"M"}],"commitId":"9519e1885e44eef4f777c60ca9a86d84b6ee034d","commitMessage":"@@@Cleanup Deadcode in o.e.index and o.e.indices (#77302)\n\nJust some obvious dead code removal found while researching things.","date":"2021-09-06 20:26:46","modifiedFileCount":"16","status":"M","submitter":"Armin Braun"}]
