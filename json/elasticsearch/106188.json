[{"authorTime":"2020-11-16 16:11:24","codes":[{"authorDate":"2020-11-16 16:11:24","commitOrder":1,"curCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService,\n            (a,c,h)->Version.CURRENT.minimumRestCompatibilityVersion());\r\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMimeType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT.minimumRestCompatibilityVersion();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2020-11-16 16:11:24","endLine":673,"groupId":"65331","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDispatchCompatibleHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/f229e7b60aad8566028cd41ca619f2ac30e814.src","preCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService,\n            (a,c,h)->Version.CURRENT.minimumRestCompatibilityVersion());\r\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMimeType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT.minimumRestCompatibilityVersion();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":639,"status":"B"},{"authorDate":"2020-11-16 16:11:24","commitOrder":1,"curCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService,\n            (a,c,h)->Version.CURRENT.minimumRestCompatibilityVersion());\r\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMimeType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT;\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2020-11-16 16:11:24","endLine":713,"groupId":"65331","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDispatchCompatibleRequestToNewlyAddedHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/f229e7b60aad8566028cd41ca619f2ac30e814.src","preCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService,\n            (a,c,h)->Version.CURRENT.minimumRestCompatibilityVersion());\r\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMimeType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT;\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":675,"status":"B"}],"commitId":"618d8bcec62ecc963ad277e01175b6859e341b3c","commitMessage":"@@@Allow registering compatible handlers (#64423)\n\nAdding an infrastructure to allow for registration of Compatible Handlers.\nCompatible handlers are RestHandlers used for handling rest request from old version clients ( CURRENT-1 version). They might be registered under an endpoint that was removed or changed in CURRENT version (different path.  method or an endpoint completely removed).\nBut they also can be registered under the same endpoint (same path.  method as the RestHandler in CURRENT)\nRestHandler's endpoint is at the moment 2dimensional - a method and a path.\n\nThis PR adds a 3rd dimension - a version.\n\nRegistration:\nRestHandler declares a new compatibleWithVersion method.  which will be overridden by Compatible Handlers and returning a Version.CURRENT -1. By default the method returns Version.CURRENT\ncompatibleWithVersion is used when iterating over handlers within RestController#registerHandler. The returned value is used to set a version on MethodHandlers\n\nLookup:\nAn interface CompatibleVersion is introduced in order to abstract a logic to calculate a compatible version requested by a user.\nIt is not implemented in this PR. A simplified.  always returning Version.CURRENT implementation is used.\nWithin RestController.  a version is calculated with the use of CompatibleVersion.  then the lookup for MethodHandlers is performed (the logic is the same)\nOnce it is find.  an additional lookup for a RestHandler for requested version is made.\n\nThe requested version has to be also passed down to XContentBuilder in order to allow for per version serialisation logic\n\nrelates #51816","date":"2020-11-16 16:11:24","modifiedFileCount":"12","status":"B","submitter":"Przemyslaw Gomulka"},{"authorTime":"2021-01-18 15:54:18","codes":[{"authorDate":"2021-01-18 15:54:18","commitOrder":2,"curCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService,\n            (a,c,h)->Version.CURRENT.minimumRestCompatibilityVersion());\r\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMediaType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT.minimumRestCompatibilityVersion();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-01-18 15:54:18","endLine":673,"groupId":"65331","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDispatchCompatibleHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/0442319bf4ba1a38d6c485a25573ce698d2701.src","preCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService,\n            (a,c,h)->Version.CURRENT.minimumRestCompatibilityVersion());\r\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMimeType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT.minimumRestCompatibilityVersion();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":639,"status":"M"},{"authorDate":"2021-01-18 15:54:18","commitOrder":2,"curCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService,\n            (a,c,h)->Version.CURRENT.minimumRestCompatibilityVersion());\r\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMediaType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT;\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-01-18 15:54:18","endLine":713,"groupId":"65331","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDispatchCompatibleRequestToNewlyAddedHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/0442319bf4ba1a38d6c485a25573ce698d2701.src","preCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService,\n            (a,c,h)->Version.CURRENT.minimumRestCompatibilityVersion());\r\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMimeType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT;\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":675,"status":"M"}],"commitId":"8ce39ddc2b3be308ca3adb84e447ee77226cff03","commitMessage":"@@@Make ParsedMediaType truly immutable (#67552)\n\nBy accident ParsedMediaType was not truly immutable and it was possible\nto modify other ParsedMediaType's by accident when building.\nParsedMediaType#parseMediaType(XContentType. Map) was modifying\nParsedMediaTypes within XContentType. This should never happen.\n\nThis commit is addressing this by making Map of parameters immutable.\n\ncloses #67545\n","date":"2021-01-18 15:54:18","modifiedFileCount":"4","status":"M","submitter":"Przemyslaw Gomulka"},{"authorTime":"2021-01-29 01:49:44","codes":[{"authorDate":"2021-01-29 01:49:44","commitOrder":3,"curCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMediaType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT.minimumRestCompatibilityVersion();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-01-29 01:49:44","endLine":666,"groupId":"65331","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDispatchCompatibleHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/98/65c3b96686a2fe2f8a405c4f82ff8fa59e5188.src","preCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService,\n            (a,c,h)->Version.CURRENT.minimumRestCompatibilityVersion());\r\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMediaType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT.minimumRestCompatibilityVersion();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":633,"status":"M"},{"authorDate":"2021-01-29 01:49:44","commitOrder":3,"curCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMediaType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT;\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-01-29 01:49:44","endLine":705,"groupId":"65331","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDispatchCompatibleRequestToNewlyAddedHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/98/65c3b96686a2fe2f8a405c4f82ff8fa59e5188.src","preCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService,\n            (a,c,h)->Version.CURRENT.minimumRestCompatibilityVersion());\r\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMediaType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT;\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"M"}],"commitId":"83aa071ae6745afa4c23442c0e52ef32f456e694","commitMessage":"@@@Move REST compatible header parsing into server (#68047)\n\nCurrently the logic for parsing vendor specific headers - i.e. application/vnd.elasticsearch+json;compatible-with=7 is within rest-compatibility module.\nThis commit is removing the rest-compatibility plugin and moving the version parsing logic\ninto server module. It no longer needs to be injected from xpack into server.  therefore can be directly used from RestRequest.\n\nrelates #51816","date":"2021-01-29 01:49:44","modifiedFileCount":"11","status":"M","submitter":"Przemyslaw Gomulka"},{"authorTime":"2021-02-02 02:05:48","codes":[{"authorDate":"2021-02-02 02:05:48","commitOrder":4,"curCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                assertThat(request.contentParser().useCompatibility(), is(true));\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT.minimumRestCompatibilityVersion();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-02-02 02:05:48","endLine":666,"groupId":"18667","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDispatchCompatibleHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/c6de9a94631e72e97e53a3461e2e1aa21967fb.src","preCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMediaType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT.minimumRestCompatibilityVersion();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":638,"status":"M"},{"authorDate":"2021-02-02 02:05:48","commitOrder":4,"curCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                assertThat(request.contentParser().useCompatibility(), is(true));\n\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT;\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-02-02 02:05:48","endLine":701,"groupId":"18667","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDispatchCompatibleRequestToNewlyAddedHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/c6de9a94631e72e97e53a3461e2e1aa21967fb.src","preCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mimeType = randomCompatibleMediaType(version);\n        String content = randomAlphaOfLength((int) Math.round(BREAKER_LIMIT.getBytes() / inFlightRequestsBreaker.getOverhead()));\n        final List<String> mimeTypeList = Collections.singletonList(mimeType);\n        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)\n            .withContent(new BytesArray(content), RestRequest.parseContentType(mimeTypeList))\n            .withPath(\"/foo\")\n            .withHeaders(Map.of(\"Content-Type\", mimeTypeList, \"Accept\", mimeTypeList))\n            .build();\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT;\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"M"}],"commitId":"0c648a2459eadc26b228d4c1870ca2543d0f0c64","commitMessage":"@@@Make XContentParser aware of compatible API version (#68113)\n\nMaking XContentParser aware of the compatible API version. This is a preparatory work for supporting compatible changes to named xcontent object parsing.\nXContentParser#useCompatibleApi will not be used for surgical compatible implementations.  it will be only used in the infrastructure to select a compatible namedxcontent registry. Therefore information about the exact major version is not needed.\n\nrelates #51816","date":"2021-02-02 02:05:48","modifiedFileCount":"15","status":"M","submitter":"Przemyslaw Gomulka"},{"authorTime":"2021-02-10 17:22:34","codes":[{"authorDate":"2021-02-10 17:22:34","commitOrder":5,"curCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiCompatibleVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                \r\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getRestApiCompatibilityVersion(), equalTo(RestApiCompatibleVersion.minimumSupported()));\n                assertThat(request.contentParser().getRestApiCompatibleVersion(), equalTo(RestApiCompatibleVersion.minimumSupported()));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public RestApiCompatibleVersion compatibleWithVersion() {\n                return RestApiCompatibleVersion.minimumSupported();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-02-10 17:22:34","endLine":656,"groupId":"20197","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDispatchCompatibleHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/1132a233f99e0239a077c0b13c917532d08081.src","preCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                assertThat(request.contentParser().useCompatibility(), is(true));\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT.minimumRestCompatibilityVersion();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":627,"status":"M"},{"authorDate":"2021-02-10 17:22:34","commitOrder":5,"curCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiCompatibleVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getRestApiCompatibilityVersion(), equalTo(RestApiCompatibleVersion.minimumSupported()));\n                assertThat(request.contentParser().getRestApiCompatibleVersion(), equalTo(RestApiCompatibleVersion.minimumSupported()));\n\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public RestApiCompatibleVersion compatibleWithVersion() {\n                return RestApiCompatibleVersion.currentVersion();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-02-10 17:22:34","endLine":692,"groupId":"20197","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDispatchCompatibleRequestToNewlyAddedHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/1132a233f99e0239a077c0b13c917532d08081.src","preCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = Version.CURRENT.minimumRestCompatibilityVersion().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                assertThat(request.contentParser().useCompatibility(), is(true));\n\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getCompatibleMajorVersion(), equalTo(version));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public Version compatibleWithVersion() {\n                return Version.CURRENT;\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":658,"status":"M"}],"commitId":"71d43b598d7d65fe9c9a810f20e7c76fbaec45f2","commitMessage":"@@@Refactor usage of compatible version (#68648)\n\nCompatible API version is at the moment represented by both Version and\nbyte - representing a major version. This can lead to a confusion which\nrepresentation to use.  as well as to incorrect assumptions that minor\nversions are supported (with the use of Version.V_7_0_0)\n\nCurrent usage of XContentParser.useCompatible is also not allowing to\ndefine two compatible implementations. This is not about\nsupport N-2 compatibility.  but to allow to continue development when a\nmajor release is performed.\n\nThis commit is introducing the CompatibleVersion object responsible for\nwrapping around a major version of compatible API.\n\nrelates #68100","date":"2021-02-10 17:22:34","modifiedFileCount":"28","status":"M","submitter":"Przemyslaw Gomulka"},{"authorTime":"2021-03-04 01:17:48","codes":[{"authorDate":"2021-03-04 01:17:48","commitOrder":6,"curCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                \r\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n                assertThat(request.contentParser().getRestApiCompatibleVersion(), equalTo(RestApiVersion.minimumSupported()));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public RestApiVersion compatibleWithVersion() {\n                return RestApiVersion.minimumSupported();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-03-04 01:17:48","endLine":656,"groupId":"20197","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDispatchCompatibleHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ee/f125846d7df90a1355769798c8a6ce96e975c2.src","preCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiCompatibleVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                \r\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getRestApiCompatibilityVersion(), equalTo(RestApiCompatibleVersion.minimumSupported()));\n                assertThat(request.contentParser().getRestApiCompatibleVersion(), equalTo(RestApiCompatibleVersion.minimumSupported()));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public RestApiCompatibleVersion compatibleWithVersion() {\n                return RestApiCompatibleVersion.minimumSupported();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":627,"status":"M"},{"authorDate":"2021-03-04 01:17:48","commitOrder":6,"curCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n                assertThat(request.contentParser().getRestApiCompatibleVersion(), equalTo(RestApiVersion.minimumSupported()));\n\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public RestApiVersion compatibleWithVersion() {\n                return RestApiVersion.current();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-03-04 01:17:48","endLine":692,"groupId":"20197","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDispatchCompatibleRequestToNewlyAddedHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ee/f125846d7df90a1355769798c8a6ce96e975c2.src","preCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiCompatibleVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getRestApiCompatibilityVersion(), equalTo(RestApiCompatibleVersion.minimumSupported()));\n                assertThat(request.contentParser().getRestApiCompatibleVersion(), equalTo(RestApiCompatibleVersion.minimumSupported()));\n\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public RestApiCompatibleVersion compatibleWithVersion() {\n                return RestApiCompatibleVersion.currentVersion();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":658,"status":"M"}],"commitId":"638735bbb9612504bd665ddb0ec91d9eafee93a7","commitMessage":"@@@Rename RestApiCompatibleVersion to RestApiVersion (#69897)\n\n","date":"2021-03-04 01:17:48","modifiedFileCount":"36","status":"M","submitter":"Joe Gallo"},{"authorTime":"2021-03-04 02:56:03","codes":[{"authorDate":"2021-03-04 02:56:03","commitOrder":7,"curCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                \r\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n                assertThat(request.contentParser().getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public RestApiVersion compatibleWithVersion() {\n                return RestApiVersion.minimumSupported();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-03-04 02:56:03","endLine":656,"groupId":"20197","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDispatchCompatibleHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/00ec5c79eb827aeff3366cfb466aa3ba159ca5.src","preCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                \r\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n                assertThat(request.contentParser().getRestApiCompatibleVersion(), equalTo(RestApiVersion.minimumSupported()));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public RestApiVersion compatibleWithVersion() {\n                return RestApiVersion.minimumSupported();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":627,"status":"M"},{"authorDate":"2021-03-04 02:56:03","commitOrder":7,"curCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n                assertThat(request.contentParser().getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public RestApiVersion compatibleWithVersion() {\n                return RestApiVersion.current();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-03-04 02:56:03","endLine":692,"groupId":"20197","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testDispatchCompatibleRequestToNewlyAddedHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/00ec5c79eb827aeff3366cfb466aa3ba159ca5.src","preCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n                assertThat(request.contentParser().getRestApiCompatibleVersion(), equalTo(RestApiVersion.minimumSupported()));\n\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public RestApiVersion compatibleWithVersion() {\n                return RestApiVersion.current();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":658,"status":"M"}],"commitId":"f2763edb2d0bb600bf55dd0e34f577fd09564496","commitMessage":"@@@Additional renames of RestApiCompatibleVersion to RestApiVersion (#69913)\n\n","date":"2021-03-04 02:56:03","modifiedFileCount":"15","status":"M","submitter":"Joe Gallo"},{"authorTime":"2021-03-06 08:11:37","codes":[{"authorDate":"2021-03-06 08:11:37","commitOrder":8,"curCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(GET, \"/foo\", RestApiVersion.minimumSupported(), (request, channel1, client) -> {\n            \r\n            XContentBuilder xContentBuilder = channel1.newBuilder();\n            assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n            assertThat(request.contentParser().getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n            channel1.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-03-06 08:11:37","endLine":651,"groupId":"56139","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testDispatchCompatibleHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/dd98712b45938caa4b64b2b8406e765f3f9d75.src","preCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                \r\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n                assertThat(request.contentParser().getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public RestApiVersion compatibleWithVersion() {\n                return RestApiVersion.minimumSupported();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"M"},{"authorDate":"2021-03-06 08:11:37","commitOrder":8,"curCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(new Route(GET, \"/foo\"), (request, channel1, client) -> {\n            XContentBuilder xContentBuilder = channel1.newBuilder();\n            \r\n            \r\n            \r\n            assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n            assertThat(request.contentParser().getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n\n            channel1.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-03-06 08:11:37","endLine":678,"groupId":"54759","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testDispatchCompatibleRequestToNewlyAddedHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/dd98712b45938caa4b64b2b8406e765f3f9d75.src","preCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(RestRequest.Method.GET, \"/foo\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n\n                XContentBuilder xContentBuilder = channel.newBuilder();\n                \r\n                \r\n                \r\n                assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n                assertThat(request.contentParser().getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n\n            @Override\n            public RestApiVersion compatibleWithVersion() {\n                return RestApiVersion.current();\n            }\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"M"}],"commitId":"4cc4c2cc4769f5a2c53db2d909f310e17bd017c0","commitMessage":"@@@[REST Compatible API] Route refactoring (#69573)\n\nRelated to #51816\n\nMakes `Route`s  `RestApiVersion` -aware (and `RestHandler`s `RestApiVersion` -agnostic). Refactors \nhow `Route`s are constructed in the case of deprecation or replacement of routes.","date":"2021-03-06 08:11:37","modifiedFileCount":"102","status":"M","submitter":"Joe Gallo"},{"authorTime":"2021-03-23 17:59:21","codes":[{"authorDate":"2021-03-23 17:59:21","commitOrder":9,"curCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final RestApiVersion version = RestApiVersion.minimumSupported();\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(GET, \"/foo\", RestApiVersion.minimumSupported(), (request, channel1, client) -> {\n            \r\n            XContentBuilder xContentBuilder = channel1.newBuilder();\n            assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n            assertThat(request.contentParser().getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n            channel1.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-03-23 17:59:21","endLine":650,"groupId":"106188","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testDispatchCompatibleHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bf/535e3a205ea0c73e99be110964e190e739abcb.src","preCode":"    public void testDispatchCompatibleHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(GET, \"/foo\", RestApiVersion.minimumSupported(), (request, channel1, client) -> {\n            \r\n            XContentBuilder xContentBuilder = channel1.newBuilder();\n            assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n            assertThat(request.contentParser().getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n            channel1.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":628,"status":"M"},{"authorDate":"2021-03-23 17:59:21","commitOrder":9,"curCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final RestApiVersion version = RestApiVersion.minimumSupported();\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(new Route(GET, \"/foo\"), (request, channel1, client) -> {\n            XContentBuilder xContentBuilder = channel1.newBuilder();\n            \r\n            \r\n            \r\n            assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n            assertThat(request.contentParser().getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n\n            channel1.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-03-23 17:59:21","endLine":677,"groupId":"106188","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testDispatchCompatibleRequestToNewlyAddedHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bf/535e3a205ea0c73e99be110964e190e739abcb.src","preCode":"    public void testDispatchCompatibleRequestToNewlyAddedHandler() {\n\n        RestController restController = new RestController(Collections.emptySet(), null, client, circuitBreakerService, usageService);\n\n        final byte version = RestApiVersion.minimumSupported().major;\n\n        final String mediaType = randomCompatibleMediaType(version);\n        FakeRestRequest fakeRestRequest = requestWithContent(mediaType);\n        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);\n\n        \r\n        restController.registerHandler(new Route(GET, \"/foo\"), (request, channel1, client) -> {\n            XContentBuilder xContentBuilder = channel1.newBuilder();\n            \r\n            \r\n            \r\n            assertThat(xContentBuilder.getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n            assertThat(request.contentParser().getRestApiVersion(), equalTo(RestApiVersion.minimumSupported()));\n\n            channel1.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n        });\n\n        assertFalse(channel.getSendResponseCalled());\n        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":652,"status":"M"}],"commitId":"e942873bd525761b6b2561c3a3fed0d6c7d5a8d0","commitMessage":"@@@[REST Compatible API] Typed endpoints for Index and Get APIs (#69131)\n\nThe types removal effort has removed the type from Index API in #47671 and from Get API in #46587\nThis commit allows to use 'typed' endpoints for the both Index and Get APIs\n\nrelates compatible types-removal meta issue #54160","date":"2021-03-23 17:59:21","modifiedFileCount":"10","status":"M","submitter":"Przemyslaw Gomulka"}]
