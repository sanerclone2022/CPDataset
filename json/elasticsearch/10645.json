[{"authorTime":"2019-07-17 09:27:29","codes":[{"authorDate":"2019-07-17 09:27:29","commitOrder":1,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport =\n                 new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2019-07-17 09:27:29","endLine":323,"groupId":"40505","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/04c51ec835366c3c5e106e707a9a6eca1564ad.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport =\n                 new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"B"},{"authorDate":"2019-07-17 09:27:29","commitOrder":1,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2019-07-17 09:27:29","endLine":259,"groupId":"63963","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0c/16cd01aaa90ca4c49f46bb77aa547c3a2df18f.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"B"}],"commitId":"c9607061ae2adf27d951c75c69d40ccb769f5362","commitMessage":"@@@Add Cors integration tests (#44361)\n\nThis commit adds integration tests to ensure that the basic cors\nfunctionality works for the netty and nio transports.","date":"2019-07-17 09:27:29","modifiedFileCount":"4","status":"B","submitter":"Tim Brooks"},{"authorTime":"2019-08-02 02:19:25","codes":[{"authorDate":"2019-08-02 02:19:25","commitOrder":2,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport =\n                 new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2019-08-02 02:19:25","endLine":319,"groupId":"40505","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/71/7e14ebc89c3233f8247fe9c59abffccd440d27.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport =\n                 new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"},{"authorDate":"2019-08-02 02:19:25","commitOrder":2,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2019-08-02 02:19:25","endLine":258,"groupId":"63963","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3a/747bf12e3523a7710fc5e959f4cc7314c07f82.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"}],"commitId":"570e406e91742cf385c37688a4996825e5ab5083","commitMessage":"@@@Stop Passing Around REST Request in Multiple Spots (#44949)\n\n* Stop Passing Around REST Request in Multiple Spots\n\n* Motivated by #44564\n  * We are currently passing the REST request object around to a large number of places. This works fine since we simply copy the full request content before we handle the rest itself which is needlessly hard on GC and heap.\n  * This PR removes a number of spots where the request is passed around needlessly. There are many more spots to optimize in follow-ups to this.  but this one would already enable bypassing the request copying for some error paths in a follow up.\n","date":"2019-08-02 02:19:25","modifiedFileCount":"10","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-02-07 03:05:03","codes":[{"authorDate":"2020-02-07 03:05:03","commitOrder":3,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n            xContentRegistry(), dispatcher, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2020-02-07 03:05:03","endLine":332,"groupId":"40505","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c5/ff905b1446507936f0558c1f5e4333910b2149.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport =\n                 new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"},{"authorDate":"2020-02-07 03:05:03","commitOrder":3,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2020-02-07 03:05:03","endLine":270,"groupId":"63963","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ea/3d44f60d180cdcb2f81128de09ca8ab56520b2.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"26b9cf787dfcfb2340fd2dbc98e4c42faf868e40","commitMessage":"@@@Add Trace Logging of REST Requests (#51684)\n\nBeing able to trace log all REST requests to a node would make debugging\na number of issues a lot easier.\n","date":"2020-02-07 03:05:03","modifiedFileCount":"27","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-02-07 03:05:03","codes":[{"authorDate":"2020-05-12 04:49:40","commitOrder":4,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n            xContentRegistry(), dispatcher, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2020-05-12 04:49:40","endLine":335,"groupId":"40505","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/71/ed191322b72c16a983440c2f76cd164b372022.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n            xContentRegistry(), dispatcher, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2020-02-07 03:05:03","commitOrder":4,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2020-02-07 03:05:03","endLine":270,"groupId":"63963","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ea/3d44f60d180cdcb2f81128de09ca8ab56520b2.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"N"}],"commitId":"0bf4be7dd7f1f2393d65ddd01f2f052ed6f270d5","commitMessage":"@@@Share netty event loops between transports (#46346)\n\nCurrently Elasticsearch creates independent event loop groups for each\ntransport (http and internal) transport type. This is unnecessary and\ncan lead to contention when different threads access shared resources\n(ex: allocators). This commit moves to a model where.  by default.  the\nevent loops are shared between the transports. The previous behavior can\nbe attained by specifically setting the http worker count.","date":"2020-05-12 04:49:40","modifiedFileCount":"15","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":5,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n            xContentRegistry(), dispatcher, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2020-06-26 22:33:37","endLine":343,"groupId":"40505","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6f/b2ad01f1519e39e9200ab3a50b2fa76ca53e54.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n            xContentRegistry(), dispatcher, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"},{"authorDate":"2020-06-26 22:33:37","commitOrder":5,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2020-06-26 22:33:37","endLine":277,"groupId":"63963","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8f/8d0179b3581c16a99d952f4e467267cddbf380.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-07-06 16:42:47","codes":[{"authorDate":"2020-07-06 16:42:47","commitOrder":6,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = createBuilderWithPort()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n            xContentRegistry(), dispatcher, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2020-07-06 16:42:47","endLine":345,"groupId":"40505","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/4b5b9337b893264951f5ba3e1603d19d78ba8a.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n            xContentRegistry(), dispatcher, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"},{"authorDate":"2020-07-06 16:42:47","commitOrder":6,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = createBuilderWithPort()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\")\n            .build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2020-07-06 16:42:47","endLine":280,"groupId":"63963","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/b0cd7f0ed423884d36927b5750c9782380f294.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = Settings.builder()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"2ba8e2e98bf4b7c54929c0a19046deba61951817","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-06 16:42:47","modifiedFileCount":"330","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-07-06 16:42:47","codes":[{"authorDate":"2020-09-25 04:20:12","commitOrder":7,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = createBuilderWithPort()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n            xContentRegistry(), dispatcher, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2020-09-25 04:20:12","endLine":409,"groupId":"69245","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/ce3a687884980ba6358bfddc515c940d6b0cc4.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = createBuilderWithPort()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n            xContentRegistry(), dispatcher, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"},{"authorDate":"2020-07-06 16:42:47","commitOrder":7,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = createBuilderWithPort()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\")\n            .build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2020-07-06 16:42:47","endLine":280,"groupId":"63963","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/b0cd7f0ed423884d36927b5750c9782380f294.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = createBuilderWithPort()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\")\n            .build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"N"}],"commitId":"19c19f28cb7b82f0c9b480e7f07289ab6bfeeb60","commitMessage":"@@@Split up large HTTP responses in outbound pipeline (#62666)\n\nCurrently Netty will batch compression an entire HTTP response\nregardless of its content size. It allocates a byte array at least of\nthe same size as the uncompressed content. This causes issues with our\nattempts to remove humungous G1GC allocations. This commit resolves the\nissue by split responses into 128KB chunks.\n\nThis has the side-effect of making large outbound HTTP responses that\nare compressed be send as chunked transfer-encoding.","date":"2020-09-25 04:20:12","modifiedFileCount":"9","status":"M","submitter":"Tim Brooks"},{"authorTime":"2021-08-10 18:39:12","codes":[{"authorDate":"2021-08-10 18:39:12","commitOrder":8,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = createBuilderWithPort()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n            xContentRegistry(), dispatcher, randomClusterSettings(),\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2021-08-10 18:39:12","endLine":398,"groupId":"10645","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/3b3eab2e7550853dcdfd70f2a477843098f491.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = createBuilderWithPort()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\").build();\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool,\n            xContentRegistry(), dispatcher, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS),\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"M"},{"authorDate":"2021-08-10 18:39:12","commitOrder":8,"curCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = createBuilderWithPort()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\")\n            .build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            randomClusterSettings())) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","date":"2021-08-10 18:39:12","endLine":267,"groupId":"10645","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"testCorsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/769272582ab0d57084431f1119660b84530a9c.src","preCode":"    public void testCorsRequest() throws InterruptedException {\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                logger.error(new ParameterizedMessage(\"--> Unexpected bad request [{}]\",\n                    FakeRestRequest.requestToString(channel.request())), cause);\n                throw new AssertionError();\n            }\n\n        };\n\n        final Settings settings = createBuilderWithPort()\n            .put(SETTING_CORS_ENABLED.getKey(), true)\n            .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), \"elastic.co\")\n            .build();\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.OPTIONS, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic.co\");\n                request.headers().add(CorsHandler.ACCESS_CONTROL_REQUEST_METHOD, \"POST\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.OK));\n                    assertThat(response.headers().get(CorsHandler.ACCESS_CONTROL_ALLOW_ORIGIN), equalTo(\"elastic.co\"));\n                    assertThat(response.headers().get(CorsHandler.VARY), equalTo(CorsHandler.ORIGIN));\n                    assertTrue(response.headers().contains(CorsHandler.DATE));\n                } finally {\n                    response.release();\n                }\n            }\n\n            \r\n            try (NioHttpClient client = new NioHttpClient()) {\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/\");\n                request.headers().add(CorsHandler.ORIGIN, \"elastic2.co\");\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.FORBIDDEN));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"}],"commitId":"873fbf7b650e9b78a8537d8759dee37b1470864f","commitMessage":"@@@Fix Leaking Http Channel Objects when Http Client Stats are Disabled (#76257)\n\nWe have to remove the channel from the internal collection of channels when stats are disabled.\n\nCloses #76183\n","date":"2021-08-10 18:39:12","modifiedFileCount":"5","status":"M","submitter":"Armin Braun"}]
