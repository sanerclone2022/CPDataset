[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void doExecute(Task task, DeleteByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, DeleteByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncDeleteByQueryAction(bulkByScrollTask, logger, assigningClient, threadPool, request, scriptService, state,\n                    listener).start();\n            }\n        );\n    }\n","date":"2018-04-26 03:22:53","endLine":65,"groupId":"19440","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doExecute","params":"(Tasktask@DeleteByQueryRequestrequest@ActionListener<BulkByScrollResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/de5cd4ffc556f555b8411198333116f0ad880c.src","preCode":"    public void doExecute(Task task, DeleteByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, DeleteByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncDeleteByQueryAction(bulkByScrollTask, logger, assigningClient, threadPool, request, scriptService, state,\n                    listener).start();\n            }\n        );\n    }\n","realPath":"modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportDeleteByQueryAction.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    protected void doExecute(Task task, UpdateByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, UpdateByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncIndexBySearchAction(bulkByScrollTask, logger, assigningClient, threadPool, request, scriptService, state,\n                    listener).start();\n            }\n        );\n    }\n","date":"2018-04-26 03:22:53","endLine":77,"groupId":"19440","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doExecute","params":"(Tasktask@UpdateByQueryRequestrequest@ActionListener<BulkByScrollResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8e/55df60734dcfc9810dd614d7d89b5ccc0489db.src","preCode":"    protected void doExecute(Task task, UpdateByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, UpdateByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncIndexBySearchAction(bulkByScrollTask, logger, assigningClient, threadPool, request, scriptService, state,\n                    listener).start();\n            }\n        );\n    }\n","realPath":"modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportUpdateByQueryAction.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-01-31 15:06:05","codes":[{"authorDate":"2019-01-31 15:06:05","commitOrder":2,"curCode":"    public void doExecute(Task task, DeleteByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, DeleteByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncDeleteByQueryAction(bulkByScrollTask, logger, assigningClient, threadPool, this, request, scriptService, state,\n                    listener).start();\n            }\n        );\n    }\n","date":"2019-01-31 15:06:05","endLine":68,"groupId":"19440","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doExecute","params":"(Tasktask@DeleteByQueryRequestrequest@ActionListener<BulkByScrollResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/08/538b335535da57a9dd762e130adeee9117390a.src","preCode":"    public void doExecute(Task task, DeleteByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, DeleteByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncDeleteByQueryAction(bulkByScrollTask, logger, assigningClient, threadPool, request, scriptService, state,\n                    listener).start();\n            }\n        );\n    }\n","realPath":"modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportDeleteByQueryAction.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2019-01-31 15:06:05","commitOrder":2,"curCode":"    protected void doExecute(Task task, UpdateByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, UpdateByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncIndexBySearchAction(bulkByScrollTask, logger, assigningClient, threadPool, this, request, state,\n                    listener).start();\n            }\n        );\n    }\n","date":"2019-01-31 15:06:05","endLine":79,"groupId":"19440","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doExecute","params":"(Tasktask@UpdateByQueryRequestrequest@ActionListener<BulkByScrollResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b8/8696d65526c667782323e59f2ae83c67239017.src","preCode":"    protected void doExecute(Task task, UpdateByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, UpdateByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncIndexBySearchAction(bulkByScrollTask, logger, assigningClient, threadPool, request, scriptService, state,\n                    listener).start();\n            }\n        );\n    }\n","realPath":"modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportUpdateByQueryAction.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"a8596de31fff2372fadd3f48dd97c6d674f2eb58","commitMessage":"@@@Introduce ssl settings to reindex from remote (#37527)\n\nAdds reindex.ssl.* settings for reindex from remote.\n\nThis uses the ssl-config/ internal library to parse and load SSL\nconfiguration and files. This is applied when using the low level\nrest client to connect to a remote ES node\n\nRelates: #37287\nResolves: #29755","date":"2019-01-31 15:06:05","modifiedFileCount":"14","status":"M","submitter":"Tim Vernum"},{"authorTime":"2019-01-31 15:06:05","codes":[{"authorDate":"2019-02-06 03:53:35","commitOrder":3,"curCode":"    public void doExecute(Task task, DeleteByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, DeleteByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncDeleteByQueryAction(bulkByScrollTask, logger, assigningClient, threadPool, this, request, scriptService,\n                    listener).start();\n            }\n        );\n    }\n","date":"2019-02-06 03:53:35","endLine":68,"groupId":"19440","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doExecute","params":"(Tasktask@DeleteByQueryRequestrequest@ActionListener<BulkByScrollResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/959f005897414c8deb25258a447f3218de69b1.src","preCode":"    public void doExecute(Task task, DeleteByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, DeleteByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncDeleteByQueryAction(bulkByScrollTask, logger, assigningClient, threadPool, this, request, scriptService, state,\n                    listener).start();\n            }\n        );\n    }\n","realPath":"modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportDeleteByQueryAction.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2019-01-31 15:06:05","commitOrder":3,"curCode":"    protected void doExecute(Task task, UpdateByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, UpdateByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncIndexBySearchAction(bulkByScrollTask, logger, assigningClient, threadPool, this, request, state,\n                    listener).start();\n            }\n        );\n    }\n","date":"2019-01-31 15:06:05","endLine":79,"groupId":"19440","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doExecute","params":"(Tasktask@UpdateByQueryRequestrequest@ActionListener<BulkByScrollResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b8/8696d65526c667782323e59f2ae83c67239017.src","preCode":"    protected void doExecute(Task task, UpdateByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, UpdateByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncIndexBySearchAction(bulkByScrollTask, logger, assigningClient, threadPool, this, request, state,\n                    listener).start();\n            }\n        );\n    }\n","realPath":"modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportUpdateByQueryAction.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"033ba725af26b940226aaa9b1ce88349bc433af6","commitMessage":"@@@Remove support for internal versioning for concurrency control (#38254)\n\nElasticsearch has long [supported](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html#index-versioning) compare and set (a.k.a optimistic concurrency control) operations using internal document versioning. Sadly that approach is flawed and can sometime do the wrong thing. Here's the relevant excerpt from the resiliency status page:\n\n> When a primary has been partitioned away from the cluster there is a short period of time until it detects this. During that time it will continue indexing writes locally.  thereby updating document versions. When it tries to replicate the operation.  however.  it will discover that it is partitioned away. It won?t acknowledge the write and will wait until the partition is resolved to negotiate with the master on how to proceed. The master will decide to either fail any replicas which failed to index the operations on the primary or tell the primary that it has to step down because a new primary has been chosen in the meantime. Since the old primary has already written documents.  clients may already have read from the old primary before it shuts itself down. The version numbers of these reads may not be unique if the new primary has already accepted writes for the same document \n\nWe recently [introduced](https://www.elastic.co/guide/en/elasticsearch/reference/6.x/optimistic-concurrency-control.html) a new sequence number based approach that doesn't suffer from this dirty reads problem. \n\nThis commit removes support for internal versioning as a concurrency control mechanism in favor of the sequence number approach.\n\nRelates to #1078","date":"2019-02-06 03:53:35","modifiedFileCount":"31","status":"M","submitter":"Boaz Leskes"},{"authorTime":"2019-08-01 23:14:43","codes":[{"authorDate":"2019-08-01 23:14:43","commitOrder":4,"curCode":"    public void doExecute(Task task, DeleteByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, DeleteByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncDeleteByQueryAction(bulkByScrollTask, logger, assigningClient, threadPool, request, scriptService,\n                    listener).start();\n            }\n        );\n    }\n","date":"2019-08-01 23:14:43","endLine":66,"groupId":"10256","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doExecute","params":"(Tasktask@DeleteByQueryRequestrequest@ActionListener<BulkByScrollResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/8412ad349cab83c366df1615ce386ef2125c30.src","preCode":"    public void doExecute(Task task, DeleteByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, DeleteByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncDeleteByQueryAction(bulkByScrollTask, logger, assigningClient, threadPool, this, request, scriptService,\n                    listener).start();\n            }\n        );\n    }\n","realPath":"modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportDeleteByQueryAction.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2019-08-01 23:14:43","commitOrder":4,"curCode":"    protected void doExecute(Task task, UpdateByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, UpdateByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncIndexBySearchAction(bulkByScrollTask, logger, assigningClient, threadPool, scriptService, request, state,\n                    listener).start();\n            }\n        );\n    }\n","date":"2019-08-01 23:14:43","endLine":77,"groupId":"10256","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doExecute","params":"(Tasktask@UpdateByQueryRequestrequest@ActionListener<BulkByScrollResponse>listener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b9/8b20e390e5727c125e554e39c7e79b9e09b98e.src","preCode":"    protected void doExecute(Task task, UpdateByQueryRequest request, ActionListener<BulkByScrollResponse> listener) {\n        BulkByScrollTask bulkByScrollTask = (BulkByScrollTask) task;\n        BulkByScrollParallelizationHelper.startSlicedAction(request, bulkByScrollTask, UpdateByQueryAction.INSTANCE, listener, client,\n            clusterService.localNode(),\n            () -> {\n                ClusterState state = clusterService.state();\n                ParentTaskAssigningClient assigningClient = new ParentTaskAssigningClient(client, clusterService.localNode(),\n                    bulkByScrollTask);\n                new AsyncIndexBySearchAction(bulkByScrollTask, logger, assigningClient, threadPool, this, request, state,\n                    listener).start();\n            }\n        );\n    }\n","realPath":"modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportUpdateByQueryAction.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"f57d67c56cc86f4bca9f950c61d677631747ac96","commitMessage":"@@@Extract reindexing logic from transport action (#45024)\n\nThis commit extracts the reindexing logic from the transport action so\nthat it can be incorporated into the persistent reindex work without\nrequiring the usage of the client.","date":"2019-08-01 23:14:43","modifiedFileCount":"13","status":"M","submitter":"Tim Brooks"}]
