[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static RegexpQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        int flagsValue = RegexpQueryBuilder.DEFAULT_FLAGS_VALUE;\n        int maxDeterminizedStates = RegexpQueryBuilder.DEFAULT_MAX_DETERMINIZED_STATES;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.textOrNull();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (FLAGS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String flags = parser.textOrNull();\n                            flagsValue = RegexpFlag.resolveValue(flags);\n                        } else if (MAX_DETERMINIZED_STATES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxDeterminizedStates = parser.intValue();\n                        } else if (FLAGS_VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            flagsValue = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[regexp] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = currentFieldName;\n                value = parser.textOrNull();\n            }\n        }\n\n        return new RegexpQueryBuilder(fieldName, value)\n                .flags(flagsValue)\n                .maxDeterminizedStates(maxDeterminizedStates)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n    }\n","date":"2018-04-26 03:22:53","endLine":234,"groupId":"3941","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/39/d7c1e2cf01605f704455a812657ffea5d6cf78.src","preCode":"    public static RegexpQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        int flagsValue = RegexpQueryBuilder.DEFAULT_FLAGS_VALUE;\n        int maxDeterminizedStates = RegexpQueryBuilder.DEFAULT_MAX_DETERMINIZED_STATES;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.textOrNull();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (FLAGS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String flags = parser.textOrNull();\n                            flagsValue = RegexpFlag.resolveValue(flags);\n                        } else if (MAX_DETERMINIZED_STATES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxDeterminizedStates = parser.intValue();\n                        } else if (FLAGS_VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            flagsValue = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[regexp] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = currentFieldName;\n                value = parser.textOrNull();\n            }\n        }\n\n        return new RegexpQueryBuilder(fieldName, value)\n                .flags(flagsValue)\n                .maxDeterminizedStates(maxDeterminizedStates)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static WildcardQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (WILDCARD_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[wildcard] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.text();\n            }\n        }\n\n        return new WildcardQueryBuilder(fieldName, value)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n    }\n","date":"2018-04-26 03:22:53","endLine":184,"groupId":"40553","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/35/1cddd59004ff495dbe6ea2a331872cd8233a45.src","preCode":"    public static WildcardQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (WILDCARD_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[wildcard] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.text();\n            }\n        }\n\n        return new WildcardQueryBuilder(fieldName, value)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2020-08-27 20:29:24","commitOrder":2,"curCode":"    public static RegexpQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        int flagsValue = RegexpQueryBuilder.DEFAULT_FLAGS_VALUE;\n        boolean caseInsensitive = DEFAULT_CASE_INSENSITIVITY;\n        int maxDeterminizedStates = RegexpQueryBuilder.DEFAULT_MAX_DETERMINIZED_STATES;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.textOrNull();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (FLAGS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String flags = parser.textOrNull();\n                            flagsValue = RegexpFlag.resolveValue(flags);\n                        } else if (MAX_DETERMINIZED_STATES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxDeterminizedStates = parser.intValue();\n                        } else if (FLAGS_VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            flagsValue = parser.intValue();\n                        } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            caseInsensitive = parser.booleanValue();\n                            if (caseInsensitive == false) {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"[regexp] query does not support [\" + currentFieldName + \"] = false\");\n                            }\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[regexp] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = currentFieldName;\n                value = parser.textOrNull();\n            }\n        }\n\n        RegexpQueryBuilder result = new RegexpQueryBuilder(fieldName, value)\n                .flags(flagsValue)\n                .maxDeterminizedStates(maxDeterminizedStates)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n        if (caseInsensitive) {\n            result.caseInsensitive(caseInsensitive);\n        }\n        return result;\n    }\n","date":"2020-08-27 20:29:24","endLine":272,"groupId":"3941","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/99cc7e7ac6a6131ce77c34a151ad92946a4be8.src","preCode":"    public static RegexpQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        int flagsValue = RegexpQueryBuilder.DEFAULT_FLAGS_VALUE;\n        int maxDeterminizedStates = RegexpQueryBuilder.DEFAULT_MAX_DETERMINIZED_STATES;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.textOrNull();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (FLAGS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String flags = parser.textOrNull();\n                            flagsValue = RegexpFlag.resolveValue(flags);\n                        } else if (MAX_DETERMINIZED_STATES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxDeterminizedStates = parser.intValue();\n                        } else if (FLAGS_VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            flagsValue = parser.intValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[regexp] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = currentFieldName;\n                value = parser.textOrNull();\n            }\n        }\n\n        return new RegexpQueryBuilder(fieldName, value)\n                .flags(flagsValue)\n                .maxDeterminizedStates(maxDeterminizedStates)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public static WildcardQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (WILDCARD_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[wildcard] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.text();\n            }\n        }\n\n        return new WildcardQueryBuilder(fieldName, value)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n    }\n","date":"2018-04-26 03:22:53","endLine":184,"groupId":"40553","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/35/1cddd59004ff495dbe6ea2a331872cd8233a45.src","preCode":"    public static WildcardQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (WILDCARD_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[wildcard] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.text();\n            }\n        }\n\n        return new WildcardQueryBuilder(fieldName, value)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"}],"commitId":"0a3d3919a141e6e3c9bbddc43d046a4c9211b6be","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-27 20:29:24","modifiedFileCount":"256","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-09-19 00:17:08","codes":[{"authorDate":"2020-08-27 20:29:24","commitOrder":3,"curCode":"    public static RegexpQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        int flagsValue = RegexpQueryBuilder.DEFAULT_FLAGS_VALUE;\n        boolean caseInsensitive = DEFAULT_CASE_INSENSITIVITY;\n        int maxDeterminizedStates = RegexpQueryBuilder.DEFAULT_MAX_DETERMINIZED_STATES;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.textOrNull();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (FLAGS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String flags = parser.textOrNull();\n                            flagsValue = RegexpFlag.resolveValue(flags);\n                        } else if (MAX_DETERMINIZED_STATES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxDeterminizedStates = parser.intValue();\n                        } else if (FLAGS_VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            flagsValue = parser.intValue();\n                        } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            caseInsensitive = parser.booleanValue();\n                            if (caseInsensitive == false) {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"[regexp] query does not support [\" + currentFieldName + \"] = false\");\n                            }\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[regexp] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = currentFieldName;\n                value = parser.textOrNull();\n            }\n        }\n\n        RegexpQueryBuilder result = new RegexpQueryBuilder(fieldName, value)\n                .flags(flagsValue)\n                .maxDeterminizedStates(maxDeterminizedStates)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n        if (caseInsensitive) {\n            result.caseInsensitive(caseInsensitive);\n        }\n        return result;\n    }\n","date":"2020-08-27 20:29:24","endLine":272,"groupId":"3941","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/99cc7e7ac6a6131ce77c34a151ad92946a4be8.src","preCode":"    public static RegexpQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        int flagsValue = RegexpQueryBuilder.DEFAULT_FLAGS_VALUE;\n        boolean caseInsensitive = DEFAULT_CASE_INSENSITIVITY;\n        int maxDeterminizedStates = RegexpQueryBuilder.DEFAULT_MAX_DETERMINIZED_STATES;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.textOrNull();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (FLAGS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String flags = parser.textOrNull();\n                            flagsValue = RegexpFlag.resolveValue(flags);\n                        } else if (MAX_DETERMINIZED_STATES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxDeterminizedStates = parser.intValue();\n                        } else if (FLAGS_VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            flagsValue = parser.intValue();\n                        } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            caseInsensitive = parser.booleanValue();\n                            if (caseInsensitive == false) {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"[regexp] query does not support [\" + currentFieldName + \"] = false\");\n                            }\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[regexp] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = currentFieldName;\n                value = parser.textOrNull();\n            }\n        }\n\n        RegexpQueryBuilder result = new RegexpQueryBuilder(fieldName, value)\n                .flags(flagsValue)\n                .maxDeterminizedStates(maxDeterminizedStates)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n        if (caseInsensitive) {\n            result.caseInsensitive(caseInsensitive);\n        }\n        return result;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"},{"authorDate":"2020-09-19 00:17:08","commitOrder":3,"curCode":"    public static WildcardQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        boolean caseInsensitive = DEFAULT_CASE_INSENSITIVITY;        \n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (WILDCARD_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            caseInsensitive = parser.booleanValue();\n                            if (caseInsensitive == false) {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"[prefix] query does not support [\" + currentFieldName + \"] = false\");\n                            }\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[wildcard] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.text();\n            }\n        }\n\n        WildcardQueryBuilder result = new WildcardQueryBuilder(fieldName, value)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n        if (caseInsensitive) {\n            result.caseInsensitive(caseInsensitive);            \n        }\n        return result;\n    }    \n","date":"2020-09-19 00:17:08","endLine":219,"groupId":"65284","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/876a5828dcf7d679d20178ae16e9b129e006f1.src","preCode":"    public static WildcardQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (WILDCARD_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[wildcard] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.text();\n            }\n        }\n\n        return new WildcardQueryBuilder(fieldName, value)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n    }    \n","realPath":"server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"fe9145fa5e7fb26c190725486eb6d573e5e311ef","commitMessage":"@@@Search - add case insensitive flag for \"term\" family of queries (#61596)\n\nAdds  case insensitive flag for term.  prefix.  and wildcard queries\n\nCloses #61546","date":"2020-09-19 00:17:08","modifiedFileCount":"42","status":"M","submitter":"markharwood"},{"authorTime":"2020-10-21 17:51:22","codes":[{"authorDate":"2020-10-21 17:51:22","commitOrder":4,"curCode":"    public static RegexpQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        int flagsValue = RegexpQueryBuilder.DEFAULT_FLAGS_VALUE;\n        boolean caseInsensitive = DEFAULT_CASE_INSENSITIVITY;\n        int maxDeterminizedStates = RegexpQueryBuilder.DEFAULT_MAX_DETERMINIZED_STATES;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.textOrNull();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (FLAGS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String flags = parser.textOrNull();\n                            flagsValue = RegexpFlag.resolveValue(flags);\n                        } else if (MAX_DETERMINIZED_STATES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxDeterminizedStates = parser.intValue();\n                        } else if (FLAGS_VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            flagsValue = parser.intValue();\n                        } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            caseInsensitive = parser.booleanValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[regexp] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = currentFieldName;\n                value = parser.textOrNull();\n            }\n        }\n\n        RegexpQueryBuilder result = new RegexpQueryBuilder(fieldName, value)\n                .flags(flagsValue)\n                .maxDeterminizedStates(maxDeterminizedStates)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n        result.caseInsensitive(caseInsensitive);\n        return result;\n    }\n","date":"2020-10-21 17:51:22","endLine":263,"groupId":"107892","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d4/dfce79f5659284c54d04c840a93c5a14e2910f.src","preCode":"    public static RegexpQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        int flagsValue = RegexpQueryBuilder.DEFAULT_FLAGS_VALUE;\n        boolean caseInsensitive = DEFAULT_CASE_INSENSITIVITY;\n        int maxDeterminizedStates = RegexpQueryBuilder.DEFAULT_MAX_DETERMINIZED_STATES;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.textOrNull();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (FLAGS_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            String flags = parser.textOrNull();\n                            flagsValue = RegexpFlag.resolveValue(flags);\n                        } else if (MAX_DETERMINIZED_STATES_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            maxDeterminizedStates = parser.intValue();\n                        } else if (FLAGS_VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            flagsValue = parser.intValue();\n                        } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            caseInsensitive = parser.booleanValue();\n                            if (caseInsensitive == false) {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"[regexp] query does not support [\" + currentFieldName + \"] = false\");\n                            }\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[regexp] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = currentFieldName;\n                value = parser.textOrNull();\n            }\n        }\n\n        RegexpQueryBuilder result = new RegexpQueryBuilder(fieldName, value)\n                .flags(flagsValue)\n                .maxDeterminizedStates(maxDeterminizedStates)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n        if (caseInsensitive) {\n            result.caseInsensitive(caseInsensitive);\n        }\n        return result;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/RegexpQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"},{"authorDate":"2020-10-21 17:51:22","commitOrder":4,"curCode":"    public static WildcardQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        boolean caseInsensitive = DEFAULT_CASE_INSENSITIVITY;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (WILDCARD_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            caseInsensitive = parser.booleanValue();\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[wildcard] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.text();\n            }\n        }\n\n        WildcardQueryBuilder result = new WildcardQueryBuilder(fieldName, value)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n        result.caseInsensitive(caseInsensitive);\n        return result;\n    }\n","date":"2020-10-21 17:51:22","endLine":210,"groupId":"107892","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"fromXContent","params":"(XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/08/db089a844808aff9572407024f2abdd9cb4854.src","preCode":"    public static WildcardQueryBuilder fromXContent(XContentParser parser) throws IOException {\n        String fieldName = null;\n        String rewrite = null;\n        String value = null;\n        float boost = AbstractQueryBuilder.DEFAULT_BOOST;\n        boolean caseInsensitive = DEFAULT_CASE_INSENSITIVITY;\n        String queryName = null;\n        String currentFieldName = null;\n        XContentParser.Token token;\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (token == XContentParser.Token.START_OBJECT) {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);\n                fieldName = currentFieldName;\n                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                    if (token == XContentParser.Token.FIELD_NAME) {\n                        currentFieldName = parser.currentName();\n                    } else {\n                        if (WILDCARD_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (VALUE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            value = parser.text();\n                        } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            boost = parser.floatValue();\n                        } else if (REWRITE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            rewrite = parser.textOrNull();\n                        } else if (CASE_INSENSITIVE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            caseInsensitive = parser.booleanValue();\n                            if (caseInsensitive == false) {\n                                throw new ParsingException(parser.getTokenLocation(),\n                                    \"[prefix] query does not support [\" + currentFieldName + \"] = false\");\n                            }\n                        } else if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {\n                            queryName = parser.text();\n                        } else {\n                            throw new ParsingException(parser.getTokenLocation(),\n                                    \"[wildcard] query does not support [\" + currentFieldName + \"]\");\n                        }\n                    }\n                }\n            } else {\n                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, parser.currentName());\n                fieldName = parser.currentName();\n                value = parser.text();\n            }\n        }\n\n        WildcardQueryBuilder result = new WildcardQueryBuilder(fieldName, value)\n                .rewrite(rewrite)\n                .boost(boost)\n                .queryName(queryName);\n        if (caseInsensitive) {\n            result.caseInsensitive(caseInsensitive);\n        }\n        return result;\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"81b334913a0ecdf8cb53a7ec32c41e1bc32c1cc3","commitMessage":"@@@Search - make term/prefix/wildcard/regex query parsing more lenient (#63926)\n\n* Remove errors when case_insensitive flag set to false\n\nCloses #63893","date":"2020-10-21 17:51:22","modifiedFileCount":"5","status":"M","submitter":"markharwood"}]
