[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomFrom(DateTimeZone.getAvailableIDs()));\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","date":"2018-04-26 03:22:53","endLine":465,"groupId":"26365","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRewriteDateToMatchAllWithTimezoneAndFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/68c7dec17a0808937666f22e9c5ba3772acc10.src","preCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomFrom(DateTimeZone.getAvailableIDs()));\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testRewriteDateToMatchNone() throws IOException {\n        String fieldName = randomAlphaOfLengthBetween(1, 20);\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.DISJOINT;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(MatchNoneQueryBuilder.class));\n    }\n","date":"2018-04-26 03:22:53","endLine":482,"groupId":"8320","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRewriteDateToMatchNone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/68c7dec17a0808937666f22e9c5ba3772acc10.src","preCode":"    public void testRewriteDateToMatchNone() throws IOException {\n        String fieldName = randomAlphaOfLengthBetween(1, 20);\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.DISJOINT;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(MatchNoneQueryBuilder.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":467,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-11-01 01:47:07","commitOrder":2,"curCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomDateTimeZone().getID());\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","date":"2018-11-01 01:47:07","endLine":458,"groupId":"27749","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRewriteDateToMatchAllWithTimezoneAndFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/e157255b6b702d6293195fc9e2dc4df1a25ce0.src","preCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomFrom(DateTimeZone.getAvailableIDs()));\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testRewriteDateToMatchNone() throws IOException {\n        String fieldName = randomAlphaOfLengthBetween(1, 20);\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.DISJOINT;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(MatchNoneQueryBuilder.class));\n    }\n","date":"2018-04-26 03:22:53","endLine":482,"groupId":"8320","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRewriteDateToMatchNone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/68c7dec17a0808937666f22e9c5ba3772acc10.src","preCode":"    public void testRewriteDateToMatchNone() throws IOException {\n        String fieldName = randomAlphaOfLengthBetween(1, 20);\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.DISJOINT;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(MatchNoneQueryBuilder.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":467,"status":"N"}],"commitId":"d5d28420b636275705d7998a88592b4060b905db","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-11-01 01:47:07","modifiedFileCount":"168","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2019-01-23 17:40:05","commitOrder":3,"curCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomZone().getId());\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","date":"2019-01-23 17:40:05","endLine":464,"groupId":"27749","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRewriteDateToMatchAllWithTimezoneAndFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/f2c89d645f9f46bdc600ac7aa3be80d97d7f6f.src","preCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomDateTimeZone().getID());\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"    public void testRewriteDateToMatchNone() throws IOException {\n        String fieldName = randomAlphaOfLengthBetween(1, 20);\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.DISJOINT;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(MatchNoneQueryBuilder.class));\n    }\n","date":"2018-04-26 03:22:53","endLine":482,"groupId":"8320","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRewriteDateToMatchNone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/68c7dec17a0808937666f22e9c5ba3772acc10.src","preCode":"    public void testRewriteDateToMatchNone() throws IOException {\n        String fieldName = randomAlphaOfLengthBetween(1, 20);\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.DISJOINT;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(MatchNoneQueryBuilder.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":467,"status":"N"}],"commitId":"daa2ec8a605d385a65b9ab3e89d016b3fd0dffe2","commitMessage":"@@@Switch mapping/aggregations over to java time (#36363)\n\nThis commit moves the aggregation and mapping code from joda time to\njava time. This includes field mappers.  root object mappers.  aggregations with date\nhistograms.  query builders and a lot of changes within tests.\n\nThe cut-over to java time is a requirement so that we can support nanoseconds\nproperly in a future field mapper.\n\nRelates #27330","date":"2019-01-23 17:40:05","modifiedFileCount":"154","status":"M","submitter":"Alexander Reelsen"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomZone().getId());\n        query.format(\"yyyy-MM-dd\");\n        SearchExecutionContext searchExecutionContext = createSearchExecutionContext();\n        QueryBuilder rewritten = query.rewrite(searchExecutionContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","date":"2021-01-15 01:11:59","endLine":451,"groupId":"103350","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRewriteDateToMatchAllWithTimezoneAndFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/36fc51b7d6f8e83b7adf536461df5ff174b3fe.src","preCode":"    public void testRewriteDateToMatchAllWithTimezoneAndFormat() throws IOException {\n        String fieldName = DATE_FIELD_NAME;\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.WITHIN;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        query.timeZone(randomZone().getId());\n        query.format(\"yyyy-MM-dd\");\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(RangeQueryBuilder.class));\n        RangeQueryBuilder rewrittenRange = (RangeQueryBuilder) rewritten;\n        assertThat(rewrittenRange.fieldName(), equalTo(fieldName));\n        assertThat(rewrittenRange.from(), equalTo(null));\n        assertThat(rewrittenRange.to(), equalTo(null));\n        assertThat(rewrittenRange.timeZone(), equalTo(null));\n        assertThat(rewrittenRange.format(), equalTo(null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    public void testRewriteDateToMatchNone() throws IOException {\n        String fieldName = randomAlphaOfLengthBetween(1, 20);\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.DISJOINT;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        SearchExecutionContext searchExecutionContext = createSearchExecutionContext();\n        QueryBuilder rewritten = query.rewrite(searchExecutionContext);\n        assertThat(rewritten, instanceOf(MatchNoneQueryBuilder.class));\n    }\n","date":"2021-01-15 01:11:59","endLine":468,"groupId":"103350","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRewriteDateToMatchNone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/36fc51b7d6f8e83b7adf536461df5ff174b3fe.src","preCode":"    public void testRewriteDateToMatchNone() throws IOException {\n        String fieldName = randomAlphaOfLengthBetween(1, 20);\n        RangeQueryBuilder query = new RangeQueryBuilder(fieldName) {\n            @Override\n            protected MappedFieldType.Relation getRelation(QueryRewriteContext queryRewriteContext) {\n                return Relation.DISJOINT;\n            }\n        };\n        DateTime queryFromValue = new DateTime(2015, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        DateTime queryToValue = new DateTime(2016, 1, 1, 0, 0, 0, ISOChronology.getInstanceUTC());\n        query.from(queryFromValue);\n        query.to(queryToValue);\n        QueryShardContext queryShardContext = createShardContext();\n        QueryBuilder rewritten = query.rewrite(queryShardContext);\n        assertThat(rewritten, instanceOf(MatchNoneQueryBuilder.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
