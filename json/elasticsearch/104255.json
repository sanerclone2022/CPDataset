[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testParseOGCPolygonWithHoles() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .startArray().value(174.0).value(10.0).endArray()\n                .startArray().value(-172.0).value(-8.0).endArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        Shape shape = ShapeParser.parse(parser).build();\n\n        ElasticsearchGeoAssertions.assertPolygon(shape);\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(-178.0).value(8.0).endArray()\n                .startArray().value(-180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        shape = ShapeParser.parse(parser).build();\n\n        ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(180.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .startArray().value(179.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-8.0).endArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        shape = ShapeParser.parse(parser).build();\n\n        ElasticsearchGeoAssertions.assertPolygon(shape);\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .startArray().value(183.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(182.0).value(8.0).endArray()\n                .startArray().value(180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        shape = ShapeParser.parse(parser).build();\n\n        ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n    }\n","date":"2018-04-26 03:22:53","endLine":614,"groupId":"48056","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseOGCPolygonWithHoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6f/9128454f3743f94eb41b1397535f2a06aae105.src","preCode":"    public void testParseOGCPolygonWithHoles() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .startArray().value(174.0).value(10.0).endArray()\n                .startArray().value(-172.0).value(-8.0).endArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        Shape shape = ShapeParser.parse(parser).build();\n\n        ElasticsearchGeoAssertions.assertPolygon(shape);\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(-178.0).value(8.0).endArray()\n                .startArray().value(-180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        shape = ShapeParser.parse(parser).build();\n\n        ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(180.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .startArray().value(179.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-8.0).endArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        shape = ShapeParser.parse(parser).build();\n\n        ElasticsearchGeoAssertions.assertPolygon(shape);\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .startArray().value(183.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(182.0).value(8.0).endArray()\n                .startArray().value(180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        shape = ShapeParser.parse(parser).build();\n\n        ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testParseSelfCrossingPolygon() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        ElasticsearchGeoAssertions.assertValidException(parser, InvalidShapeException.class);\n    }\n","date":"2018-04-26 03:22:53","endLine":770,"groupId":"48056","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseSelfCrossingPolygon","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6f/9128454f3743f94eb41b1397535f2a06aae105.src","preCode":"    public void testParseSelfCrossingPolygon() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        ElasticsearchGeoAssertions.assertValidException(parser, InvalidShapeException.class);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":751,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-06-25 03:39:56","codes":[{"authorDate":"2018-06-25 03:39:56","commitOrder":2,"curCode":"    public void testParseOGCPolygonWithHoles() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .startArray().value(174.0).value(10.0).endArray()\n                .startArray().value(-172.0).value(-8.0).endArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertPolygon(shape);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(-178.0).value(8.0).endArray()\n                .startArray().value(-180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(180.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .startArray().value(179.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-8.0).endArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertPolygon(shape);\n        }\n\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .startArray().value(183.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(182.0).value(8.0).endArray()\n                .startArray().value(180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n        }\n    }\n","date":"2018-06-25 16:41:24","endLine":634,"groupId":"48056","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseOGCPolygonWithHoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/462ac60342f5462e37ed248fd6151eee744af3.src","preCode":"    public void testParseOGCPolygonWithHoles() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .startArray().value(174.0).value(10.0).endArray()\n                .startArray().value(-172.0).value(-8.0).endArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        Shape shape = ShapeParser.parse(parser).build();\n\n        ElasticsearchGeoAssertions.assertPolygon(shape);\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(-178.0).value(8.0).endArray()\n                .startArray().value(-180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        shape = ShapeParser.parse(parser).build();\n\n        ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(180.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .startArray().value(179.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-8.0).endArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        shape = ShapeParser.parse(parser).build();\n\n        ElasticsearchGeoAssertions.assertPolygon(shape);\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .startArray().value(183.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(182.0).value(8.0).endArray()\n                .startArray().value(180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        shape = ShapeParser.parse(parser).build();\n\n        ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"M"},{"authorDate":"2018-06-25 03:39:56","commitOrder":2,"curCode":"    public void testParseSelfCrossingPolygon() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertValidException(parser, InvalidShapeException.class);\n        }\n    }\n","date":"2018-06-25 16:41:24","endLine":798,"groupId":"48056","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseSelfCrossingPolygon","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/462ac60342f5462e37ed248fd6151eee744af3.src","preCode":"    public void testParseSelfCrossingPolygon() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson);\n        parser.nextToken();\n        ElasticsearchGeoAssertions.assertValidException(parser, InvalidShapeException.class);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":778,"status":"M"}],"commitId":"e6dc01d2b7d36b6d2a6aa11289afb70c9568c986","commitMessage":"@@@Close xcontent parsers (partial) (#31513)\n\nPartial pass at closing XContentParsers in server.  This mostly involved adding try-with-resources statements around the usage of XContentParsers.","date":"2018-06-25 16:41:24","modifiedFileCount":"53","status":"M","submitter":"Tom Callahan"},{"authorTime":"2018-07-10 07:44:12","codes":[{"authorDate":"2018-06-25 03:39:56","commitOrder":3,"curCode":"    public void testParseOGCPolygonWithHoles() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .startArray().value(174.0).value(10.0).endArray()\n                .startArray().value(-172.0).value(-8.0).endArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertPolygon(shape);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(-178.0).value(8.0).endArray()\n                .startArray().value(-180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(180.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .startArray().value(179.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-8.0).endArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertPolygon(shape);\n        }\n\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .startArray().value(183.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(182.0).value(8.0).endArray()\n                .startArray().value(180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n        }\n    }\n","date":"2018-06-25 16:41:24","endLine":634,"groupId":"48056","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseOGCPolygonWithHoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/462ac60342f5462e37ed248fd6151eee744af3.src","preCode":"    public void testParseOGCPolygonWithHoles() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .startArray().value(174.0).value(10.0).endArray()\n                .startArray().value(-172.0).value(-8.0).endArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertPolygon(shape);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(-178.0).value(8.0).endArray()\n                .startArray().value(-180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(180.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .startArray().value(179.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-8.0).endArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertPolygon(shape);\n        }\n\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .startArray().value(183.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(182.0).value(8.0).endArray()\n                .startArray().value(180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"N"},{"authorDate":"2018-07-10 07:44:12","commitOrder":3,"curCode":"    public void testParseSelfCrossingPolygon() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertValidException(parser, InvalidShapeException.class);\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2018-07-10 07:44:12","endLine":817,"groupId":"48056","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseSelfCrossingPolygon","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/17/f25d1556d4832429876e5ed2819ae0ad7c1113.src","preCode":"    public void testParseSelfCrossingPolygon() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertValidException(parser, InvalidShapeException.class);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":796,"status":"M"}],"commitId":"e9cd0556c167b257bb588af5547923e5f13a99ca","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-10 07:44:12","modifiedFileCount":"627","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-07-10 07:44:12","codes":[{"authorDate":"2018-11-22 01:15:01","commitOrder":4,"curCode":"    public void testParseOGCPolygonWithHoles() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .startArray().value(174.0).value(10.0).endArray()\n                .startArray().value(-172.0).value(-8.0).endArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertPolygon(ShapeParser.parse(parser).buildLucene(), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(-178.0).value(8.0).endArray()\n                .startArray().value(-180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertMultiPolygon(ShapeParser.parse(parser).buildLucene(), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(180.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .startArray().value(179.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-8.0).endArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertPolygon(ShapeParser.parse(parser).buildLucene(), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .startArray().value(183.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(182.0).value(8.0).endArray()\n                .startArray().value(180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertMultiPolygon(ShapeParser.parse(parser).buildLucene(), false);\n        }\n    }\n","date":"2018-11-22 01:15:01","endLine":707,"groupId":"48056","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseOGCPolygonWithHoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/81/3b0f3c6267d2f54e30f2852b63e3a5b0918f29.src","preCode":"    public void testParseOGCPolygonWithHoles() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .startArray().value(174.0).value(10.0).endArray()\n                .startArray().value(-172.0).value(-8.0).endArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertPolygon(shape);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(-178.0).value(8.0).endArray()\n                .startArray().value(-180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(180.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .startArray().value(179.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-8.0).endArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertPolygon(shape);\n        }\n\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .startArray().value(183.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(182.0).value(8.0).endArray()\n                .startArray().value(180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).build();\n\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"M"},{"authorDate":"2018-07-10 07:44:12","commitOrder":4,"curCode":"    public void testParseSelfCrossingPolygon() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertValidException(parser, InvalidShapeException.class);\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2018-07-10 07:44:12","endLine":817,"groupId":"48056","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseSelfCrossingPolygon","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/17/f25d1556d4832429876e5ed2819ae0ad7c1113.src","preCode":"    public void testParseSelfCrossingPolygon() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertValidException(parser, InvalidShapeException.class);\n            assertNull(parser.nextToken());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":796,"status":"N"}],"commitId":"3bee25cb700208311ef751b1f460342bdba4ec70","commitMessage":"@@@[GEO] Add support to ShapeBuilders for building Lucene geometry (#35707)\n\n* [GEO] Add support to ShapeBuilders for building Lucene geometry\n\nThis commit adds support for building lucene geometry from the ShapeBuilders.\nThis is needed for integrating LatLonShape as the primary indexing approach\nfor geo_shape field types. All unit and integration tests are updated to\nadd randomization for testing both jts/s4j shapes and lucene shapes.\n","date":"2018-11-22 01:15:01","modifiedFileCount":"25","status":"M","submitter":"Nick Knize"},{"authorTime":"2018-07-10 07:44:12","codes":[{"authorDate":"2019-01-26 00:37:27","commitOrder":5,"curCode":"    public void testParseOGCPolygonWithHoles() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .startArray().value(174.0).value(10.0).endArray()\n                .startArray().value(-172.0).value(-8.0).endArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertPolygon(ShapeParser.parse(parser).buildGeometry(), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(-178.0).value(8.0).endArray()\n                .startArray().value(-180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertMultiPolygon(ShapeParser.parse(parser).buildGeometry(), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(180.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .startArray().value(179.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-8.0).endArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertPolygon(ShapeParser.parse(parser).buildGeometry(), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .startArray().value(183.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(182.0).value(8.0).endArray()\n                .startArray().value(180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertMultiPolygon(ShapeParser.parse(parser).buildGeometry(), false);\n        }\n    }\n","date":"2019-01-26 00:37:27","endLine":714,"groupId":"48056","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseOGCPolygonWithHoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/74/024ddcada5ee8393f8b609bbd68b648e067d97.src","preCode":"    public void testParseOGCPolygonWithHoles() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .startArray().value(174.0).value(10.0).endArray()\n                .startArray().value(-172.0).value(-8.0).endArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertPolygon(ShapeParser.parse(parser).buildLucene(), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(-178.0).value(8.0).endArray()\n                .startArray().value(-180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertMultiPolygon(ShapeParser.parse(parser).buildLucene(), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(180.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .startArray().value(179.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-8.0).endArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertPolygon(ShapeParser.parse(parser).buildLucene(), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .startArray().value(183.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(182.0).value(8.0).endArray()\n                .startArray().value(180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertMultiPolygon(ShapeParser.parse(parser).buildLucene(), false);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":590,"status":"M"},{"authorDate":"2018-07-10 07:44:12","commitOrder":5,"curCode":"    public void testParseSelfCrossingPolygon() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertValidException(parser, InvalidShapeException.class);\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2018-07-10 07:44:12","endLine":817,"groupId":"48056","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseSelfCrossingPolygon","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/17/f25d1556d4832429876e5ed2819ae0ad7c1113.src","preCode":"    public void testParseSelfCrossingPolygon() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertValidException(parser, InvalidShapeException.class);\n            assertNull(parser.nextToken());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":796,"status":"N"}],"commitId":"68149b6058a720ec891974e8a6982c5e480fb9f1","commitMessage":"@@@Geo: replace intermediate geo objects with libs/geo (#37721)\n\nReplaces intermediate geo objects built by ShapeBuilders with\nobjects from the libs/geo hierarchy. This should allow us to build\nall geo functionality around a single hierarchy.\n\nFollow up for #35320","date":"2019-01-26 00:37:27","modifiedFileCount":"27","status":"M","submitter":"Igor Motov"},{"authorTime":"2018-07-10 07:44:12","codes":[{"authorDate":"2019-07-16 21:37:04","commitOrder":6,"curCode":"    public void testParseOGCPolygonWithHoles() throws IOException, ParseException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .startArray().value(174.0).value(10.0).endArray()\n                .startArray().value(-172.0).value(-8.0).endArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertPolygon(parse(parser), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(-178.0).value(8.0).endArray()\n                .startArray().value(-180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertMultiPolygon(parse(parser), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(180.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .startArray().value(179.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-8.0).endArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertPolygon(parse(parser), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .startArray().value(183.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(182.0).value(8.0).endArray()\n                .startArray().value(180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertMultiPolygon(parse(parser), false);\n        }\n    }\n","date":"2019-07-16 21:37:04","endLine":715,"groupId":"104255","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseOGCPolygonWithHoles","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/fc599f4cadc12195886cf7714ac82c70c628ad.src","preCode":"    public void testParseOGCPolygonWithHoles() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .startArray().value(174.0).value(10.0).endArray()\n                .startArray().value(-172.0).value(-8.0).endArray()\n                .startArray().value(-172.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertPolygon(ShapeParser.parse(parser).buildGeometry(), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(-178.0).value(8.0).endArray()\n                .startArray().value(-180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertMultiPolygon(ShapeParser.parse(parser).buildGeometry(), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(180.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .startArray().value(179.0).value(10.0).endArray()\n                .startArray().value(179.0).value(-8.0).endArray()\n                .startArray().value(177.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertPolygon(ShapeParser.parse(parser).buildGeometry(), false);\n        }\n\n        \r\n        polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .startArray().value(183.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(183.0).value(10.0).endArray()\n                .endArray()\n                .startArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .startArray().value(182.0).value(8.0).endArray()\n                .startArray().value(180.0).value(-8.0).endArray()\n                .startArray().value(178.0).value(8.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            Shape shape = ShapeParser.parse(parser).buildS4J();\n            ElasticsearchGeoAssertions.assertMultiPolygon(shape, true);\n        }\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertMultiPolygon(ShapeParser.parse(parser).buildGeometry(), false);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"M"},{"authorDate":"2018-07-10 07:44:12","commitOrder":6,"curCode":"    public void testParseSelfCrossingPolygon() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertValidException(parser, InvalidShapeException.class);\n            assertNull(parser.nextToken());\n        }\n    }\n","date":"2018-07-10 07:44:12","endLine":817,"groupId":"104255","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseSelfCrossingPolygon","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/17/f25d1556d4832429876e5ed2819ae0ad7c1113.src","preCode":"    public void testParseSelfCrossingPolygon() throws IOException {\n        \r\n        String polygonGeoJson = Strings.toString(XContentFactory.jsonBuilder().startObject().field(\"type\", \"Polygon\")\n                .startArray(\"coordinates\")\n                .startArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .startArray().value(-177.0).value(10.0).endArray()\n                .startArray().value(-177.0).value(-10.0).endArray()\n                .startArray().value(176.0).value(-15.0).endArray()\n                .startArray().value(-177.0).value(15.0).endArray()\n                .startArray().value(172.0).value(0.0).endArray()\n                .startArray().value(176.0).value(15.0).endArray()\n                .endArray()\n                .endArray()\n                .endObject());\n\n        try (XContentParser parser = createParser(JsonXContent.jsonXContent, polygonGeoJson)) {\n            parser.nextToken();\n            ElasticsearchGeoAssertions.assertValidException(parser, InvalidShapeException.class);\n            assertNull(parser.nextToken());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/common/geo/GeoJsonShapeParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":796,"status":"N"}],"commitId":"33ad7928fbba6f2a371c5133685bf46afabc2aef","commitMessage":"@@@Geo: extract dateline handling logic from ShapeBuilders (#44187)\n\nExtracts dateline decomposition logic from ShapeBuilder into a separate\nutility class that is used on the indexing side. The search side\nwill be handled as part of another PR at this time we will remove\nthe decomposition logic from ShapeBuilders as well. This PR also doesn't\nchange any existing logic including bugs.\n\nRelates to #40908","date":"2019-07-16 21:37:04","modifiedFileCount":"8","status":"M","submitter":"Igor Motov"}]
