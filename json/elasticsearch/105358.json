[{"authorTime":"2018-09-07 17:59:10","codes":[{"authorDate":"2018-09-07 17:59:10","commitOrder":1,"curCode":"    public void testSomeMatchesSortedNumericDocValues() throws IOException {\n        testCase(new DocValuesFieldExistsQuery(\"number\"), iw -> {\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 8)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 5)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 3)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 2)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 0)));\n        }, tdigest -> {\n            assertEquals(7L, tdigest.state.size());\n            assertEquals(7L, tdigest.state.centroidCount());\n            assertEquals(4.5d, tdigest.percentile(75), 0.0d);\n            assertEquals(\"4.5\", tdigest.percentileAsString(75));\n            assertEquals(2.0d, tdigest.percentile(50), 0.0d);\n            assertEquals(\"2.0\", tdigest.percentileAsString(50));\n            assertEquals(1.0d, tdigest.percentile(22), 0.0d);\n            assertEquals(\"1.0\", tdigest.percentileAsString(22));\n        });\n    }\n","date":"2018-09-07 17:59:10","endLine":86,"groupId":"51091","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSomeMatchesSortedNumericDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/4f399cb25253092b177b7f69a7ce159b5c75e4.src","preCode":"    public void testSomeMatchesSortedNumericDocValues() throws IOException {\n        testCase(new DocValuesFieldExistsQuery(\"number\"), iw -> {\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 8)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 5)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 3)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 2)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 0)));\n        }, tdigest -> {\n            assertEquals(7L, tdigest.state.size());\n            assertEquals(7L, tdigest.state.centroidCount());\n            assertEquals(4.5d, tdigest.percentile(75), 0.0d);\n            assertEquals(\"4.5\", tdigest.percentileAsString(75));\n            assertEquals(2.0d, tdigest.percentile(50), 0.0d);\n            assertEquals(\"2.0\", tdigest.percentileAsString(50));\n            assertEquals(1.0d, tdigest.percentile(22), 0.0d);\n            assertEquals(\"1.0\", tdigest.percentileAsString(22));\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TDigestPercentilesAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"},{"authorDate":"2018-09-07 17:59:10","commitOrder":1,"curCode":"    public void testSomeMatchesNumericDocValues() throws IOException {\n        testCase(new DocValuesFieldExistsQuery(\"number\"), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 5)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 0)));\n        }, tdigest -> {\n            assertEquals(tdigest.state.size(), 7L);\n            assertEquals(tdigest.state.centroidCount(), 7L);\n            assertEquals(8.0d, tdigest.percentile(100), 0.0d);\n            assertEquals(\"8.0\", tdigest.percentileAsString(100));\n            assertEquals(6.98d, tdigest.percentile(88), 0.0d);\n            assertEquals(\"6.98\", tdigest.percentileAsString(88));\n            assertEquals(1.0d, tdigest.percentile(33), 0.0d);\n            assertEquals(\"1.0\", tdigest.percentileAsString(33));\n            assertEquals(1.0d, tdigest.percentile(25), 0.0d);\n            assertEquals(\"1.0\", tdigest.percentileAsString(25));\n            assertEquals(0.0d, tdigest.percentile(1), 0.0d);\n            assertEquals(\"0.0\", tdigest.percentileAsString(1));\n        });\n    }\n","date":"2018-09-07 17:59:10","endLine":111,"groupId":"6500","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSomeMatchesNumericDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/4f399cb25253092b177b7f69a7ce159b5c75e4.src","preCode":"    public void testSomeMatchesNumericDocValues() throws IOException {\n        testCase(new DocValuesFieldExistsQuery(\"number\"), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 5)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 0)));\n        }, tdigest -> {\n            assertEquals(tdigest.state.size(), 7L);\n            assertEquals(tdigest.state.centroidCount(), 7L);\n            assertEquals(8.0d, tdigest.percentile(100), 0.0d);\n            assertEquals(\"8.0\", tdigest.percentileAsString(100));\n            assertEquals(6.98d, tdigest.percentile(88), 0.0d);\n            assertEquals(\"6.98\", tdigest.percentileAsString(88));\n            assertEquals(1.0d, tdigest.percentile(33), 0.0d);\n            assertEquals(\"1.0\", tdigest.percentileAsString(33));\n            assertEquals(1.0d, tdigest.percentile(25), 0.0d);\n            assertEquals(\"1.0\", tdigest.percentileAsString(25));\n            assertEquals(0.0d, tdigest.percentile(1), 0.0d);\n            assertEquals(\"0.0\", tdigest.percentileAsString(1));\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TDigestPercentilesAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"}],"commitId":"017ffe5d127ce0fb33feb8fc4e5fededb8cbfda1","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-07 17:59:10","modifiedFileCount":"370","status":"B","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2019-01-23 01:38:55","codes":[{"authorDate":"2019-01-23 01:38:55","commitOrder":2,"curCode":"    public void testSomeMatchesSortedNumericDocValues() throws IOException {\n        testCase(new DocValuesFieldExistsQuery(\"number\"), iw -> {\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 8)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 5)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 3)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 2)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 0)));\n        }, tdigest -> {\n            assertEquals(7L, tdigest.state.size());\n            assertEquals(7L, tdigest.state.centroidCount());\n            assertEquals(4.5d, tdigest.percentile(75), 0.0d);\n            assertEquals(\"4.5\", tdigest.percentileAsString(75));\n            assertEquals(2.0d, tdigest.percentile(50), 0.0d);\n            assertEquals(\"2.0\", tdigest.percentileAsString(50));\n            assertEquals(1.0d, tdigest.percentile(22), 0.0d);\n            assertEquals(\"1.0\", tdigest.percentileAsString(22));\n            assertTrue(AggregationInspectionHelper.hasValue(tdigest));\n        });\n    }\n","date":"2019-01-23 01:38:55","endLine":90,"groupId":"105358","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSomeMatchesSortedNumericDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0b/1692fa6133cd988fa95a05717a158d808a39f0.src","preCode":"    public void testSomeMatchesSortedNumericDocValues() throws IOException {\n        testCase(new DocValuesFieldExistsQuery(\"number\"), iw -> {\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 8)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 5)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 3)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 2)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new SortedNumericDocValuesField(\"number\", 0)));\n        }, tdigest -> {\n            assertEquals(7L, tdigest.state.size());\n            assertEquals(7L, tdigest.state.centroidCount());\n            assertEquals(4.5d, tdigest.percentile(75), 0.0d);\n            assertEquals(\"4.5\", tdigest.percentileAsString(75));\n            assertEquals(2.0d, tdigest.percentile(50), 0.0d);\n            assertEquals(\"2.0\", tdigest.percentileAsString(50));\n            assertEquals(1.0d, tdigest.percentile(22), 0.0d);\n            assertEquals(\"1.0\", tdigest.percentileAsString(22));\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TDigestPercentilesAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2019-01-23 01:38:55","commitOrder":2,"curCode":"    public void testSomeMatchesNumericDocValues() throws IOException {\n        testCase(new DocValuesFieldExistsQuery(\"number\"), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 5)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 0)));\n        }, tdigest -> {\n            assertEquals(tdigest.state.size(), 7L);\n            assertEquals(tdigest.state.centroidCount(), 7L);\n            assertEquals(8.0d, tdigest.percentile(100), 0.0d);\n            assertEquals(\"8.0\", tdigest.percentileAsString(100));\n            assertEquals(6.98d, tdigest.percentile(88), 0.0d);\n            assertEquals(\"6.98\", tdigest.percentileAsString(88));\n            assertEquals(1.0d, tdigest.percentile(33), 0.0d);\n            assertEquals(\"1.0\", tdigest.percentileAsString(33));\n            assertEquals(1.0d, tdigest.percentile(25), 0.0d);\n            assertEquals(\"1.0\", tdigest.percentileAsString(25));\n            assertEquals(0.0d, tdigest.percentile(1), 0.0d);\n            assertEquals(\"0.0\", tdigest.percentileAsString(1));\n            assertTrue(AggregationInspectionHelper.hasValue(tdigest));\n        });\n    }\n","date":"2019-01-23 01:38:55","endLine":116,"groupId":"105358","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSomeMatchesNumericDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0b/1692fa6133cd988fa95a05717a158d808a39f0.src","preCode":"    public void testSomeMatchesNumericDocValues() throws IOException {\n        testCase(new DocValuesFieldExistsQuery(\"number\"), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 8)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 5)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 3)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 2)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 1)));\n            iw.addDocument(singleton(new NumericDocValuesField(\"number\", 0)));\n        }, tdigest -> {\n            assertEquals(tdigest.state.size(), 7L);\n            assertEquals(tdigest.state.centroidCount(), 7L);\n            assertEquals(8.0d, tdigest.percentile(100), 0.0d);\n            assertEquals(\"8.0\", tdigest.percentileAsString(100));\n            assertEquals(6.98d, tdigest.percentile(88), 0.0d);\n            assertEquals(\"6.98\", tdigest.percentileAsString(88));\n            assertEquals(1.0d, tdigest.percentile(33), 0.0d);\n            assertEquals(\"1.0\", tdigest.percentileAsString(33));\n            assertEquals(1.0d, tdigest.percentile(25), 0.0d);\n            assertEquals(\"1.0\", tdigest.percentileAsString(25));\n            assertEquals(0.0d, tdigest.percentile(1), 0.0d);\n            assertEquals(\"0.0\", tdigest.percentileAsString(1));\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TDigestPercentilesAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"2ba9e361aba7df6e9c0b5fa8fae3d219d50ddf09","commitMessage":"@@@Add helper classes to determine if aggs have a value (#36020)\n\nThis adds a set of helper classes to determine if an agg \"has a value\". \nThis is needed because InternalAggs represent \"empty\" in different \nmanners according to convention. Some use `NaN`.  `+/- Inf`.  `0.0`.  etc.\n\nA user can pass the Internal agg type to one of these helper methods\nand it will report if the agg contains a value or not.  which allows the\nuser to differentiate \"empty\" from a real `NaN`.\n\nThese helpers are best-effort in some cases.  For example.  several\npipeline aggs share a single return class but use different conventions\nto mark \"empty\".  so the helper uses the loosest definition that applies\nto all the aggs that use the class.\n\nSums in particular are unreliable.  The InternalSum simply returns 0.0\nif the agg is empty (which is correct.  no values == sum of zero).  But this\nalso means the helper cannot differentiate from \"empty\" and `+1 + -1`.","date":"2019-01-23 01:38:55","modifiedFileCount":"45","status":"M","submitter":"Zachary Tong"}]
