[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-10-03 03:43:46","commitOrder":2,"curCode":"    public void testTermsQuery() {\n        Query termsQuery = mapperService.fullName(\"foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fullName(\"nested1.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fullName(\"nested2.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fullName(\"nested3.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n    }\n","date":"2018-10-03 03:43:46","endLine":147,"groupId":"43613","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTermsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/40/a8251fb24ef5cd231a5aab3ab171bb5d5b323e.src","preCode":"    public void testTermsQuery() {\n        Query termsQuery = mapperService.fullName(\"foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fullName(\"nested1.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fullName(\"nested2.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fullName(\"nested3.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/NestedHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testRangeQuery() {\n        Query rangeQuery = mapperService.fullName(\"foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fullName(\"nested1.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fullName(\"nested2.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fullName(\"nested3.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":176,"groupId":"43618","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/81a3311b383244444d71b237ecd45626aeab12.src","preCode":"    public void testRangeQuery() {\n        Query rangeQuery = mapperService.fullName(\"foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fullName(\"nested1.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fullName(\"nested2.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fullName(\"nested3.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/NestedHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"NB"}],"commitId":"fb907706ecea4c8894075295f0aa148efe01adbf","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-10-03 03:43:46","modifiedFileCount":"70","status":"M","submitter":"Gordon Brown"},{"authorTime":"2020-02-08 02:16:53","codes":[{"authorDate":"2020-02-08 02:16:53","commitOrder":3,"curCode":"    public void testTermsQuery() {\n        Query termsQuery = mapperService.fieldType(\"foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested1.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested2.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested3.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n    }\n","date":"2020-02-08 02:16:53","endLine":148,"groupId":"43613","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTermsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/701aea801f861b0395c83ca5c6560fa5a20c87.src","preCode":"    public void testTermsQuery() {\n        Query termsQuery = mapperService.fullName(\"foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fullName(\"nested1.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fullName(\"nested2.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fullName(\"nested3.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/NestedHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2020-02-08 02:16:53","commitOrder":3,"curCode":"    public void testRangeQuery() {\n        Query rangeQuery = mapperService.fieldType(\"foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested1.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested2.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested3.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n    }\n","date":"2020-02-08 02:16:53","endLine":208,"groupId":"43618","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/701aea801f861b0395c83ca5c6560fa5a20c87.src","preCode":"    public void testRangeQuery() {\n        Query rangeQuery = mapperService.fullName(\"foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fullName(\"nested1.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fullName(\"nested2.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fullName(\"nested3.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/NestedHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"e0b3ea041671e7600e8a1b76491f91041940a386","commitMessage":"@@@Rename MapperService#fullName to fieldType. (#52025)\n\nThe new name more accurately describes what the method returns.","date":"2020-02-08 02:16:53","modifiedFileCount":"83","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2020-05-14 02:34:54","codes":[{"authorDate":"2020-02-08 02:16:53","commitOrder":4,"curCode":"    public void testTermsQuery() {\n        Query termsQuery = mapperService.fieldType(\"foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested1.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested2.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested3.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n    }\n","date":"2020-02-08 02:16:53","endLine":148,"groupId":"43613","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTermsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/701aea801f861b0395c83ca5c6560fa5a20c87.src","preCode":"    public void testTermsQuery() {\n        Query termsQuery = mapperService.fieldType(\"foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested1.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested2.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested3.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/NestedHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"N"},{"authorDate":"2020-05-14 02:34:54","commitOrder":4,"curCode":"    public void testRangeQuery() {\n        QueryShardContext context = createSearchContext(indexService).getQueryShardContext();\n        Query rangeQuery = mapperService.fieldType(\"foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested1.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested2.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested3.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n    }\n","date":"2020-05-14 02:34:54","endLine":209,"groupId":"43618","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e6/860ca76597d08ef70e47689ebacdb222e0b711.src","preCode":"    public void testRangeQuery() {\n        Query rangeQuery = mapperService.fieldType(\"foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested1.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested2.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested3.foo2\").rangeQuery(2, 5, true, true, null, null, null, null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/NestedHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"7b34e22890e15b7480689b216c48487c87385978","commitMessage":"@@@Use index sort range query when possible. (#56657)\n\nThis PR proposes to use `IndexSortSortedNumericDocValuesRangeQuery` when possible to speed up certain range queries. Points-based queries are already very efficient.  the only time this query makes a difference is when the range matches a large number of documents.\n\nSome notes:\n* The optimization is only applied for fields of type `date`.  `integer`.  and `long`. I found that the query implementation isn't yet suited for `double` or `float` types (I will follow up with a Lucene issue).\n* Before applying the query.  we check that the index is sorted on the query field. This isn't strictly necessary.  since the query itself checks this as part of its execution. But it seemed nice to avoid wrapping the query unnecessarily -- it makes debugging easier.  like when reading search profile results.\n\nBelow are benchmark results on the http-logs dataset. The following ranges were run against the `logs-241998` index:\n\nrange-small (897633930.  897655999]: ~2M docs\nrange-medium (897623930.  897655999]: ~5M docs\nrange-large (897259801.  897503930]: ~21M docs\n\n```\n| 50th percentile service time |  range-small |     11.0228 |     8.19478 | -2.82797 |     ms |\n| 95th percentile service time |  range-small |     11.8153 |     9.06257 | -2.75274 |     ms |\n| 50th percentile service time | range-medium |     22.8912 |     7.23264 | -15.6585 |     ms |\n| 95th percentile service time | range-medium |     25.0957 |     7.93246 | -17.1632 |     ms |\n| 50th percentile service time |  range-large |     39.7224 |     6.34589 | -33.3765 |     ms |\n| 95th percentile service time |  range-large |     43.9104 |     7.06604 | -36.8444 |     ms |\n```\n\nRelates to #48665.","date":"2020-05-14 02:34:54","modifiedFileCount":"12","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2020-10-06 00:02:55","codes":[{"authorDate":"2020-10-06 00:02:55","commitOrder":5,"curCode":"    public void testTermsQuery() {\n        Query termsQuery = mapperService.fieldType(\"foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertFalse(buildNestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested1.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertFalse(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested2.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested3.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n    }\n","date":"2020-10-06 00:02:55","endLine":152,"groupId":"69325","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTermsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/e9940066546dc157ad0986a902b2f2bcb091c4.src","preCode":"    public void testTermsQuery() {\n        Query termsQuery = mapperService.fieldType(\"foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested1.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested2.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested3.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/NestedHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2020-10-06 00:02:55","commitOrder":5,"curCode":"    public void testRangeQuery() {\n        QueryShardContext context = createSearchContext(indexService).getQueryShardContext();\n        Query rangeQuery = mapperService.fieldType(\"foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertFalse(buildNestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested1.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertFalse(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested2.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested3.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n    }\n","date":"2020-10-06 00:02:55","endLine":213,"groupId":"9694","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/e9940066546dc157ad0986a902b2f2bcb091c4.src","preCode":"    public void testRangeQuery() {\n        QueryShardContext context = createSearchContext(indexService).getQueryShardContext();\n        Query rangeQuery = mapperService.fieldType(\"foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertFalse(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested1.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertFalse(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested2.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested3.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(new NestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(new NestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/NestedHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"}],"commitId":"cf130f386e5a83e35508f08a1c75352d3b071a08","commitMessage":"@@@Replace some usages of QueryShardContext#getMapperService (#63239)\n\nQueryShardContext has a getter that allows to have access to MapperService. In many cases.  it is misused to lookup field types which QueryShardContext has a specific method for. This commit replaces those usages with a function String -> MappedFieldType.\n\nThere are also a few other places where MapperService is retrieved to call methods that are also available directly on QueryShardContext.  which are replaced as part of this commit too.","date":"2020-10-06 00:02:55","modifiedFileCount":"41","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2020-10-06 00:02:55","commitOrder":6,"curCode":"    public void testTermsQuery() {\n        Query termsQuery = mapperService.fieldType(\"foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertFalse(buildNestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested1.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertFalse(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested2.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested3.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n    }\n","date":"2020-10-06 00:02:55","endLine":152,"groupId":"102553","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTermsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/e9940066546dc157ad0986a902b2f2bcb091c4.src","preCode":"    public void testTermsQuery() {\n        Query termsQuery = mapperService.fieldType(\"foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertFalse(buildNestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested1.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertFalse(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested2.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n\n        termsQuery = mapperService.fieldType(\"nested3.foo\").termsQuery(Collections.singletonList(\"bar\"), null);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(termsQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(termsQuery, \"nested_missing\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/NestedHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"N"},{"authorDate":"2021-01-15 01:11:59","commitOrder":6,"curCode":"    public void testRangeQuery() {\n        SearchExecutionContext context = createSearchContext(indexService).getSearchExecutionContext();\n        Query rangeQuery = mapperService.fieldType(\"foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertFalse(buildNestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested1.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertFalse(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested2.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested3.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n    }\n","date":"2021-01-15 01:11:59","endLine":215,"groupId":"102553","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/424109acbac6ccaed811ee84b87a8b8b42ecbf.src","preCode":"    public void testRangeQuery() {\n        QueryShardContext context = createSearchContext(indexService).getQueryShardContext();\n        Query rangeQuery = mapperService.fieldType(\"foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertFalse(buildNestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested1.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertFalse(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested2.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n\n        rangeQuery = mapperService.fieldType(\"nested3.foo2\").rangeQuery(2, 5, true, true, null, null, null, context);\n        assertTrue(buildNestedHelper(mapperService).mightMatchNestedDocs(rangeQuery));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested1\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested2\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested3\"));\n        assertTrue(buildNestedHelper(mapperService).mightMatchNonNestedDocs(rangeQuery, \"nested_missing\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/search/NestedHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
