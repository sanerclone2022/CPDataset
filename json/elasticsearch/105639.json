[{"authorTime":"2018-12-06 06:25:50","codes":[{"authorDate":"2018-09-06 03:56:58","commitOrder":5,"curCode":"    public void testSingleItemBulkActionIngestLocal() throws Exception {\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                },\n                e -> {\n                    assertThat(e, sameInstance(exception));\n                    failureCalled.set(true);\n                }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","date":"2018-09-06 03:56:58","endLine":306,"groupId":"66837","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleItemBulkActionIngestLocal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7f/db12ff1356adf6064e9256cf73ac7ad81506d4.src","preCode":"    public void testSingleItemBulkActionIngestLocal() throws Exception {\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                },\n                e -> {\n                    assertThat(e, sameInstance(exception));\n                    failureCalled.set(true);\n                }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"NB"},{"authorDate":"2018-12-06 06:25:50","commitOrder":5,"curCode":"    private void validateDefaultPipeline(IndexRequest indexRequest) {\n        Exception exception = new Exception(\"fake exception\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n            },\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","date":"2018-12-06 06:25:50","endLine":471,"groupId":"66837","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"validateDefaultPipeline","params":"(IndexRequestindexRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/5f8844153a5b33eea5ff17dc1f43b40cb61dac.src","preCode":"    private void validateDefaultPipeline(IndexRequest indexRequest) {\n        Exception exception = new Exception(\"fake exception\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n            },\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"B"}],"commitId":"190ac8e9bfcface46e3061b6f6ba3a238a7ce1f3","commitMessage":"@@@ingest: support default pipeline through an alias (#36231)\n\nThis commit allows writes that go through an alias to use the default\npipeline defined on the backing index.\n\nFixes #35817\n","date":"2018-12-06 06:25:50","modifiedFileCount":"2","status":"M","submitter":"Jake Landis"},{"authorTime":"2018-12-18 06:25:11","codes":[{"authorDate":"2018-09-06 03:56:58","commitOrder":6,"curCode":"    public void testSingleItemBulkActionIngestLocal() throws Exception {\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                },\n                e -> {\n                    assertThat(e, sameInstance(exception));\n                    failureCalled.set(true);\n                }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","date":"2018-09-06 03:56:58","endLine":306,"groupId":"66837","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleItemBulkActionIngestLocal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7f/db12ff1356adf6064e9256cf73ac7ad81506d4.src","preCode":"    public void testSingleItemBulkActionIngestLocal() throws Exception {\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                },\n                e -> {\n                    assertThat(e, sameInstance(exception));\n                    failureCalled.set(true);\n                }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"N"},{"authorDate":"2018-12-18 06:25:11","commitOrder":6,"curCode":"    private void validateDefaultPipeline(IndexRequest indexRequest) {\n        Exception exception = new Exception(\"fake exception\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        assertNull(indexRequest.getPipeline());\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n            },\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        assertEquals(indexRequest.getPipeline(), \"default_pipeline\");\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","date":"2018-12-18 06:25:11","endLine":525,"groupId":"48297","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"validateDefaultPipeline","params":"(IndexRequestindexRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/21/9aee9ebe2ffa02ba112a02196bc58468f30789.src","preCode":"    private void validateDefaultPipeline(IndexRequest indexRequest) {\n        Exception exception = new Exception(\"fake exception\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n            },\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":495,"status":"M"}],"commitId":"384757deffb1bd88781c2d5c3459ca25f15792a3","commitMessage":"@@@ingest: support default pipelines + bulk upserts (#36618)\n\nThis commit adds support to enable bulk upserts to use an index's\ndefault pipeline. Bulk upsert.  doc_as_upsert.  and script_as_upsert\nare all supported.\n\nHowever.  bulk script_as_upsert has slightly surprising behavior since\nthe pipeline is executed _before_ the script is evaluated. This means\nthat the pipeline only has access the data found in the upsert field\nof the script_as_upsert. The non-bulk script_as_upsert (existing behavior)\nruns the pipeline _after_ the script is executed. This commit\ndoes _not_ attempt to consolidate the bulk and non-bulk behavior for\nscript_as_upsert.\n\nThis commit also adds additional testing for the non-bulk behavior. \nwhich remains unchanged with this commit.\n\nfixes #36219\n","date":"2018-12-18 06:25:11","modifiedFileCount":"4","status":"M","submitter":"Jake Landis"},{"authorTime":"2019-07-12 04:53:46","codes":[{"authorDate":"2019-07-12 04:53:46","commitOrder":7,"curCode":"    public void testSingleItemBulkActionIngestLocal() throws Exception {\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                },\n                e -> {\n                    assertThat(e, sameInstance(exception));\n                    failureCalled.set(true);\n                }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","date":"2019-07-12 04:53:46","endLine":313,"groupId":"66837","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleItemBulkActionIngestLocal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/22ed75d60912a306cc7ba72585df219f545b7e.src","preCode":"    public void testSingleItemBulkActionIngestLocal() throws Exception {\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                },\n                e -> {\n                    assertThat(e, sameInstance(exception));\n                    failureCalled.set(true);\n                }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"},{"authorDate":"2019-07-12 04:53:46","commitOrder":7,"curCode":"    private void validateDefaultPipeline(IndexRequest indexRequest) {\n        Exception exception = new Exception(\"fake exception\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        assertNull(indexRequest.getPipeline());\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n            },\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        assertEquals(indexRequest.getPipeline(), \"default_pipeline\");\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","date":"2019-07-12 04:53:46","endLine":598,"groupId":"48297","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"validateDefaultPipeline","params":"(IndexRequestindexRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/22ed75d60912a306cc7ba72585df219f545b7e.src","preCode":"    private void validateDefaultPipeline(IndexRequest indexRequest) {\n        Exception exception = new Exception(\"fake exception\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        assertNull(indexRequest.getPipeline());\n        singleItemBulkWriteAction.execute(null, indexRequest, ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n            },\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        assertEquals(indexRequest.getPipeline(), \"default_pipeline\");\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"M"}],"commitId":"f7d06eea557cc5bb0f5a56c4ec0716bd58ef7bca","commitMessage":"@@@Remove most direct test calls to TransportAction.execute (#44241)\n\nThere are currently 3 variants of TransportAction.execute. The\nimplementations of these require additional ctor arguments to all\nTransportAction implementations. While the non test uses can be\nconverted to using NodeClient to execute other actions.  using that for\ntest cases would be cumbersome and defeat the purpose of unit tests\ntesting an action's implementation directly. This commit adds a public\ntest-only utility method for test to use to call execute. This method\nwill continue to be available when the execute implementations are\ncollapsed and made package private.\n\nrelates #43881","date":"2019-07-12 04:53:46","modifiedFileCount":"12","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2019-09-25 22:03:06","codes":[{"authorDate":"2019-09-25 22:03:06","commitOrder":8,"curCode":"    public void testSingleItemBulkActionIngestLocal() throws Exception {\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                },\n                e -> {\n                    assertThat(e, sameInstance(exception));\n                    failureCalled.set(true);\n                }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n        completionHandler.getValue().accept(null, exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(DUMMY_WRITE_THREAD, null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","date":"2019-09-25 22:03:06","endLine":317,"groupId":"66837","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleItemBulkActionIngestLocal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/90b5200d19a1ff79e24d52ad0067627eeb00da.src","preCode":"    public void testSingleItemBulkActionIngestLocal() throws Exception {\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                },\n                e -> {\n                    assertThat(e, sameInstance(exception));\n                    failureCalled.set(true);\n                }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"},{"authorDate":"2019-09-25 22:03:06","commitOrder":8,"curCode":"    private void validateDefaultPipeline(IndexRequest indexRequest) {\n        Exception exception = new Exception(\"fake exception\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        assertNull(indexRequest.getPipeline());\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n            },\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n        assertEquals(indexRequest.getPipeline(), \"default_pipeline\");\n        completionHandler.getValue().accept(null, exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(DUMMY_WRITE_THREAD, null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","date":"2019-09-25 22:03:06","endLine":606,"groupId":"26910","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"validateDefaultPipeline","params":"(IndexRequestindexRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/90b5200d19a1ff79e24d52ad0067627eeb00da.src","preCode":"    private void validateDefaultPipeline(IndexRequest indexRequest) {\n        Exception exception = new Exception(\"fake exception\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        assertNull(indexRequest.getPipeline());\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n            },\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(bulkDocsItr.capture(), failureHandler.capture(), completionHandler.capture(), any());\n        assertEquals(indexRequest.getPipeline(), \"default_pipeline\");\n        completionHandler.getValue().accept(exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"M"}],"commitId":"2c7fd822930b4ecb651d1903d99798e6f0c504b2","commitMessage":"@@@Allow ingest processors to execute in a non blocking manner. (#46241)\n\nThis PR changes the ingest executing to be non blocking\nby adding an additional method to the Processor interface\nthat accepts a BiConsumer as handler and changing\nIngestService#executeBulkRequest(...) to ingest document\nin a non blocking fashion iff a processor executes\nin a non blocking fashion.\n\nThis is the second PR that merges changes made to server module from\nthe enrich branch (see #32789) into the master branch.\n\nThe plan is to merge changes made to the server module separately from\nthe pr that will merge enrich into master.  so that these changes can\nbe reviewed in isolation.\n\nThis change originates from the enrich branch and was introduced there\nin #43361.","date":"2019-09-25 22:03:06","modifiedFileCount":"20","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2019-09-25 22:03:06","codes":[{"authorDate":"2019-10-11 17:23:55","commitOrder":9,"curCode":"    public void testSingleItemBulkActionIngestLocal() throws Exception {\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                },\n                e -> {\n                    assertThat(e, sameInstance(exception));\n                    failureCalled.set(true);\n                }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n        completionHandler.getValue().accept(null, exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(DUMMY_WRITE_THREAD, null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","date":"2019-10-11 17:23:55","endLine":318,"groupId":"66837","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleItemBulkActionIngestLocal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9a/e9f04eb81003a02abc5113d1561e0ca6dc62ab.src","preCode":"    public void testSingleItemBulkActionIngestLocal() throws Exception {\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"index\", \"type\", \"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                },\n                e -> {\n                    assertThat(e, sameInstance(exception));\n                    failureCalled.set(true);\n                }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n        completionHandler.getValue().accept(null, exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(DUMMY_WRITE_THREAD, null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"},{"authorDate":"2019-09-25 22:03:06","commitOrder":9,"curCode":"    private void validateDefaultPipeline(IndexRequest indexRequest) {\n        Exception exception = new Exception(\"fake exception\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        assertNull(indexRequest.getPipeline());\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n            },\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n        assertEquals(indexRequest.getPipeline(), \"default_pipeline\");\n        completionHandler.getValue().accept(null, exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(DUMMY_WRITE_THREAD, null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","date":"2019-09-25 22:03:06","endLine":606,"groupId":"26910","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"validateDefaultPipeline","params":"(IndexRequestindexRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/26/90b5200d19a1ff79e24d52ad0067627eeb00da.src","preCode":"    private void validateDefaultPipeline(IndexRequest indexRequest) {\n        Exception exception = new Exception(\"fake exception\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        assertNull(indexRequest.getPipeline());\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n            },\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n        assertEquals(indexRequest.getPipeline(), \"default_pipeline\");\n        completionHandler.getValue().accept(null, exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(DUMMY_WRITE_THREAD, null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"}],"commitId":"566e1b7d33ec62e2f6011245782cd65d6381ee43","commitMessage":"@@@Remove type field from DocWriteRequest and associated Response objects (#47671)\n\nThis commit removes the type field from index.  update and delete requests.  and their\nassociated responses.\n\nRelates to #41059","date":"2019-10-11 17:23:55","modifiedFileCount":"145","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-09-23 02:14:45","codes":[{"authorDate":"2020-09-23 02:14:45","commitOrder":10,"curCode":"    public void testSingleItemBulkActionIngestLocal() throws Exception {\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                },\n                e -> {\n                    assertThat(e, sameInstance(exception));\n                    failureCalled.set(true);\n                }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n        completionHandler.getValue().accept(null, exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(DUMMY_WRITE_THREAD, null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","date":"2020-09-23 02:14:45","endLine":327,"groupId":"105639","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleItemBulkActionIngestLocal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/335056aff2db76f80f903c8632689e4cf57e66.src","preCode":"    public void testSingleItemBulkActionIngestLocal() throws Exception {\n        Exception exception = new Exception(\"fake exception\");\n        IndexRequest indexRequest = new IndexRequest(\"index\").id(\"id\");\n        indexRequest.source(Collections.emptyMap());\n        indexRequest.setPipeline(\"testpipeline\");\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n                response -> {\n                    responseCalled.set(true);\n                },\n                e -> {\n                    assertThat(e, sameInstance(exception));\n                    failureCalled.set(true);\n                }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n        completionHandler.getValue().accept(null, exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(DUMMY_WRITE_THREAD, null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"},{"authorDate":"2020-09-23 02:14:45","commitOrder":10,"curCode":"    private void validateDefaultPipeline(IndexRequest indexRequest) {\n        Exception exception = new Exception(\"fake exception\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        assertNull(indexRequest.getPipeline());\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n            },\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any(), eq(Names.WRITE));\n        assertEquals(indexRequest.getPipeline(), \"default_pipeline\");\n        completionHandler.getValue().accept(null, exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(DUMMY_WRITE_THREAD, null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","date":"2020-09-23 02:14:45","endLine":690,"groupId":"105639","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"validateDefaultPipeline","params":"(IndexRequestindexRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/335056aff2db76f80f903c8632689e4cf57e66.src","preCode":"    private void validateDefaultPipeline(IndexRequest indexRequest) {\n        Exception exception = new Exception(\"fake exception\");\n        indexRequest.source(Collections.emptyMap());\n        AtomicBoolean responseCalled = new AtomicBoolean(false);\n        AtomicBoolean failureCalled = new AtomicBoolean(false);\n        assertNull(indexRequest.getPipeline());\n        ActionTestUtils.execute(singleItemBulkWriteAction, null, indexRequest, ActionListener.wrap(\n            response -> {\n                responseCalled.set(true);\n            },\n            e -> {\n                assertThat(e, sameInstance(exception));\n                failureCalled.set(true);\n            }));\n\n        \r\n        assertFalse(action.isExecuted); \r\n        assertFalse(responseCalled.get());\n        assertFalse(failureCalled.get());\n        verify(ingestService).executeBulkRequest(eq(1), bulkDocsItr.capture(), failureHandler.capture(),\n            completionHandler.capture(), any());\n        assertEquals(indexRequest.getPipeline(), \"default_pipeline\");\n        completionHandler.getValue().accept(null, exception);\n        assertTrue(failureCalled.get());\n\n        \r\n        indexRequest.setPipeline(IngestService.NOOP_PIPELINE_NAME); \r\n        completionHandler.getValue().accept(DUMMY_WRITE_THREAD, null);\n        assertTrue(action.isExecuted);\n        assertFalse(responseCalled.get()); \r\n        verifyZeroInteractions(transportService);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIngestTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":659,"status":"M"}],"commitId":"242083a36e02496aae9214dc41b89372022e7076","commitMessage":"@@@Dedicated threadpool for system index writes (#61655)\n\nThis commit adds a dedicated threadpool for system index write\noperations. The dedicated resources for system index writes serves as\na means to ensure that user activity does not block important system\noperations from occurring such as the management of users and roles.","date":"2020-09-23 02:14:45","modifiedFileCount":"29","status":"M","submitter":"Jay Modi"}]
