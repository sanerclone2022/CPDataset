[{"authorTime":"2019-06-27 20:33:28","codes":[{"authorDate":"2019-12-04 20:16:36","commitOrder":2,"curCode":"    public void testCacheability() throws IOException {\n        IntervalQueryBuilder queryBuilder = new IntervalQueryBuilder(STRING_FIELD_NAME, createRandomSource(0, false));\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        IntervalsSourceProvider.IntervalFilter scriptFilter = new IntervalsSourceProvider.IntervalFilter(\n            new Script(ScriptType.INLINE, \"mockscript\", \"1\", Collections.emptyMap())\n        );\n        IntervalsSourceProvider source = new IntervalsSourceProvider.Match(\"text\", 0, true, \"simple\", scriptFilter, null);\n        queryBuilder = new IntervalQueryBuilder(STRING_FIELD_NAME, source);\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query with scripts should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2019-12-04 20:16:36","endLine":157,"groupId":"37519","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/73/75b5951948f56ae3bf2f1ba4a4749d75395133.src","preCode":"    public void testCacheability() throws IOException {\n        IntervalQueryBuilder queryBuilder = new IntervalQueryBuilder(STRING_FIELD_NAME, createRandomSource(0, false));\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        IntervalsSourceProvider.IntervalFilter scriptFilter = new IntervalsSourceProvider.IntervalFilter(\n            new Script(ScriptType.INLINE, \"mockscript\", \"1\", Collections.emptyMap())\n        );\n        IntervalsSourceProvider source = new IntervalsSourceProvider.Match(\"text\", 0, true, \"simple\", scriptFilter, null);\n        queryBuilder = new IntervalQueryBuilder(STRING_FIELD_NAME, source);\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query with scripts should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/IntervalQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"},{"authorDate":"2019-06-27 20:33:28","commitOrder":2,"curCode":"    public void testCacheability() throws IOException {\n        ScriptScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2019-06-27 20:33:28","endLine":101,"groupId":"37519","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ad/420e8bbdc33da5773390a4fb04afd6bffcb119.src","preCode":"    public void testCacheability() throws IOException {\n        ScriptScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/ScriptScoreQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"NB"}],"commitId":"f38ce06b9e66e0671cc0121c3ae3c0f25abeb7ee","commitMessage":"@@@[CI] Interval queries cannot be cached if they use scripts (#49824)\n\n#49793 added test coverage for interval queries that contain script filters.  but did\nnot adjust testCacheability().  which how fails occasionally when given a random\ninterval source containing a script. This commit overrides testCacheability() to\nexplicitly sources with and without script filters.\n\nFixes #49821","date":"2019-12-04 20:16:36","modifiedFileCount":"1","status":"M","submitter":"Alan Woodward"},{"authorTime":"2019-06-27 20:33:28","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":3,"curCode":"    public void testCacheability() throws IOException {\n        IntervalQueryBuilder queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, createRandomSource(0, false));\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        IntervalsSourceProvider.IntervalFilter scriptFilter = new IntervalsSourceProvider.IntervalFilter(\n            new Script(ScriptType.INLINE, \"mockscript\", \"1\", Collections.emptyMap())\n        );\n        IntervalsSourceProvider source = new IntervalsSourceProvider.Match(\"text\", 0, true, \"simple\", scriptFilter, null);\n        queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, source);\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query with scripts should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2020-04-03 22:00:46","endLine":175,"groupId":"37519","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/bd21ad8df1d5631775be3670736034570253f6.src","preCode":"    public void testCacheability() throws IOException {\n        IntervalQueryBuilder queryBuilder = new IntervalQueryBuilder(STRING_FIELD_NAME, createRandomSource(0, false));\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        IntervalsSourceProvider.IntervalFilter scriptFilter = new IntervalsSourceProvider.IntervalFilter(\n            new Script(ScriptType.INLINE, \"mockscript\", \"1\", Collections.emptyMap())\n        );\n        IntervalsSourceProvider source = new IntervalsSourceProvider.Match(\"text\", 0, true, \"simple\", scriptFilter, null);\n        queryBuilder = new IntervalQueryBuilder(STRING_FIELD_NAME, source);\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query with scripts should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/IntervalQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2019-06-27 20:33:28","commitOrder":3,"curCode":"    public void testCacheability() throws IOException {\n        ScriptScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2019-06-27 20:33:28","endLine":101,"groupId":"37519","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ad/420e8bbdc33da5773390a4fb04afd6bffcb119.src","preCode":"    public void testCacheability() throws IOException {\n        ScriptScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/ScriptScoreQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"}],"commitId":"f5759bb2092f1a957e79626c872c3f5707c1ee04","commitMessage":"@@@Rename field name constants in AbstractBuilderTestCase (#53234)\n\nSome field name constants were not updaten when we moved from \"string\" to \"text\"\nand \"keyword\" fields. Renaming them makes it easier and faster to know which\nfield type is used in test subclassing this base test case.","date":"2020-04-03 22:00:46","modifiedFileCount":"34","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2020-04-16 23:43:27","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":4,"curCode":"    public void testCacheability() throws IOException {\n        IntervalQueryBuilder queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, createRandomSource(0, false));\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        IntervalsSourceProvider.IntervalFilter scriptFilter = new IntervalsSourceProvider.IntervalFilter(\n            new Script(ScriptType.INLINE, \"mockscript\", \"1\", Collections.emptyMap())\n        );\n        IntervalsSourceProvider source = new IntervalsSourceProvider.Match(\"text\", 0, true, \"simple\", scriptFilter, null);\n        queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, source);\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query with scripts should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2020-04-03 22:00:46","endLine":175,"groupId":"37519","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/bd21ad8df1d5631775be3670736034570253f6.src","preCode":"    public void testCacheability() throws IOException {\n        IntervalQueryBuilder queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, createRandomSource(0, false));\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        IntervalsSourceProvider.IntervalFilter scriptFilter = new IntervalsSourceProvider.IntervalFilter(\n            new Script(ScriptType.INLINE, \"mockscript\", \"1\", Collections.emptyMap())\n        );\n        IntervalsSourceProvider source = new IntervalsSourceProvider.Match(\"text\", 0, true, \"simple\", scriptFilter, null);\n        queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, source);\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query with scripts should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/IntervalQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"N"},{"authorDate":"2020-04-16 23:43:27","commitOrder":4,"curCode":"    public void testCacheability() throws IOException {\n        Script script = new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap());\n        ScriptScoreQueryBuilder queryBuilder = new ScriptScoreQueryBuilder(\n            new TermQueryBuilder(KEYWORD_FIELD_NAME, \"value\"), script);\n\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2020-04-16 23:43:27","endLine":109,"groupId":"37519","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a3/2b96b8f247973a51cf2699f7c38721c3eaddf8.src","preCode":"    public void testCacheability() throws IOException {\n        ScriptScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/ScriptScoreQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"d1394f8c3beababcbbaaa38132a5f6db1474e485","commitMessage":"@@@Rewrite wrapper queries to match_none if possible. (#55271)\n\nQueries like script_score wrap a query and modify its score. If the inner query\nrewrites to match_none.  then the entire query can rewrite to match_none. This\nlets us detect that certain shards can be skipped during the 'can match' phase.\n\nThis was a simple change that seemed like it would help in some cases. But it\nwill likely not have a huge impact.  since in many use cases where the 'can\nmatch' phase is helpful.  the search is not sorted by score.","date":"2020-04-16 23:43:27","modifiedFileCount":"6","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2020-04-21 04:16:13","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":5,"curCode":"    public void testCacheability() throws IOException {\n        IntervalQueryBuilder queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, createRandomSource(0, false));\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        IntervalsSourceProvider.IntervalFilter scriptFilter = new IntervalsSourceProvider.IntervalFilter(\n            new Script(ScriptType.INLINE, \"mockscript\", \"1\", Collections.emptyMap())\n        );\n        IntervalsSourceProvider source = new IntervalsSourceProvider.Match(\"text\", 0, true, \"simple\", scriptFilter, null);\n        queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, source);\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query with scripts should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2020-04-03 22:00:46","endLine":175,"groupId":"37519","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/bd21ad8df1d5631775be3670736034570253f6.src","preCode":"    public void testCacheability() throws IOException {\n        IntervalQueryBuilder queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, createRandomSource(0, false));\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        IntervalsSourceProvider.IntervalFilter scriptFilter = new IntervalsSourceProvider.IntervalFilter(\n            new Script(ScriptType.INLINE, \"mockscript\", \"1\", Collections.emptyMap())\n        );\n        IntervalsSourceProvider source = new IntervalsSourceProvider.Match(\"text\", 0, true, \"simple\", scriptFilter, null);\n        queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, source);\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query with scripts should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/IntervalQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"N"},{"authorDate":"2020-04-21 04:16:13","commitOrder":5,"curCode":"    public void testCacheability() throws IOException {\n        Script script = new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap());\n        ScriptScoreQueryBuilder queryBuilder = new ScriptScoreQueryBuilder(\n            new TermQueryBuilder(KEYWORD_FIELD_NAME, \"value\"), script);\n\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2020-04-21 04:16:13","endLine":109,"groupId":"37519","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/239d7c8876552092a86c29223712e3df9076bf.src","preCode":"    public void testCacheability() throws IOException {\n        Script script = new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap());\n        ScriptScoreQueryBuilder queryBuilder = new ScriptScoreQueryBuilder(\n            new TermQueryBuilder(KEYWORD_FIELD_NAME, \"value\"), script);\n\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/ScriptScoreQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"0ed1eb5994338292a6342e7320faf4127c66dba0","commitMessage":"@@@Test: MockScoreScript can be cacheable (#55422)\n\n","date":"2020-04-21 04:16:13","modifiedFileCount":"5","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":6,"curCode":"    public void testCacheability() throws IOException {\n        IntervalQueryBuilder queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, createRandomSource(0, false));\n        SearchExecutionContext context = createSearchExecutionContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        IntervalsSourceProvider.IntervalFilter scriptFilter = new IntervalsSourceProvider.IntervalFilter(\n            new Script(ScriptType.INLINE, \"mockscript\", \"1\", Collections.emptyMap())\n        );\n        IntervalsSourceProvider source = new IntervalsSourceProvider.Match(\"text\", 0, true, \"simple\", scriptFilter, null);\n        queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, source);\n        rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query with scripts should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2021-01-15 01:11:59","endLine":171,"groupId":"37519","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ab/ea56aeab55bb4d372bb7fcadc1e5bee0a2860c.src","preCode":"    public void testCacheability() throws IOException {\n        IntervalQueryBuilder queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, createRandomSource(0, false));\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        IntervalsSourceProvider.IntervalFilter scriptFilter = new IntervalsSourceProvider.IntervalFilter(\n            new Script(ScriptType.INLINE, \"mockscript\", \"1\", Collections.emptyMap())\n        );\n        IntervalsSourceProvider source = new IntervalsSourceProvider.Match(\"text\", 0, true, \"simple\", scriptFilter, null);\n        queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, source);\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query with scripts should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/IntervalQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":6,"curCode":"    public void testCacheability() throws IOException {\n        Script script = new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap());\n        ScriptScoreQueryBuilder queryBuilder = new ScriptScoreQueryBuilder(\n            new TermQueryBuilder(KEYWORD_FIELD_NAME, \"value\"), script);\n\n        SearchExecutionContext context = createSearchExecutionContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2021-01-15 01:11:59","endLine":110,"groupId":"37519","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/83/c64c20cc0c1747638517d53b18f2f14288a57a.src","preCode":"    public void testCacheability() throws IOException {\n        Script script = new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap());\n        ScriptScoreQueryBuilder queryBuilder = new ScriptScoreQueryBuilder(\n            new TermQueryBuilder(KEYWORD_FIELD_NAME, \"value\"), script);\n\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/ScriptScoreQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-06-17 05:31:31","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":7,"curCode":"    public void testCacheability() throws IOException {\n        IntervalQueryBuilder queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, createRandomSource(0, false));\n        SearchExecutionContext context = createSearchExecutionContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        IntervalsSourceProvider.IntervalFilter scriptFilter = new IntervalsSourceProvider.IntervalFilter(\n            new Script(ScriptType.INLINE, \"mockscript\", \"1\", Collections.emptyMap())\n        );\n        IntervalsSourceProvider source = new IntervalsSourceProvider.Match(\"text\", 0, true, \"simple\", scriptFilter, null);\n        queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, source);\n        rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query with scripts should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2021-01-15 01:11:59","endLine":171,"groupId":"103415","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ab/ea56aeab55bb4d372bb7fcadc1e5bee0a2860c.src","preCode":"    public void testCacheability() throws IOException {\n        IntervalQueryBuilder queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, createRandomSource(0, false));\n        SearchExecutionContext context = createSearchExecutionContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        IntervalsSourceProvider.IntervalFilter scriptFilter = new IntervalsSourceProvider.IntervalFilter(\n            new Script(ScriptType.INLINE, \"mockscript\", \"1\", Collections.emptyMap())\n        );\n        IntervalsSourceProvider source = new IntervalsSourceProvider.Match(\"text\", 0, true, \"simple\", scriptFilter, null);\n        queryBuilder = new IntervalQueryBuilder(TEXT_FIELD_NAME, source);\n        rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query with scripts should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/IntervalQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"},{"authorDate":"2021-06-17 05:31:31","commitOrder":7,"curCode":"    public void testCacheability() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter iw = new RandomIndexWriter(random(), directory);\n        iw.addDocument(new Document());\n        final IndexSearcher searcher = new IndexSearcher(iw.getReader());\n        iw.close();\n        assertThat(searcher.getIndexReader().leaves().size(), greaterThan(0));\n\n        Script script = new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap());\n        ScriptScoreQueryBuilder queryBuilder = new ScriptScoreQueryBuilder(\n            new TermQueryBuilder(KEYWORD_FIELD_NAME, \"value\"), script);\n\n        SearchExecutionContext context = createSearchExecutionContext(searcher);\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        Query luceneQuery = rewriteQuery.toQuery(context);\n        assertNotNull(luceneQuery);\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        \r\n        if (rewriteQuery instanceof MatchNoneQueryBuilder == false) {\n            Weight queryWeight = context.searcher().createWeight(searcher.rewrite(luceneQuery), ScoreMode.COMPLETE, 1.0f);\n            for (LeafReaderContext ctx : context.getIndexReader().leaves()) {\n                assertFalse(\"\" + searcher.rewrite(luceneQuery) + \" \" + rewriteQuery.toString(), queryWeight.isCacheable(ctx));\n            }\n        }\n\n        searcher.getIndexReader().close();\n        directory.close();\n    }\n","date":"2021-06-17 05:31:31","endLine":126,"groupId":"103415","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/84705168f3f4fc2e7c3d32f45f0c198e8a8d0b.src","preCode":"    public void testCacheability() throws IOException {\n        Script script = new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap());\n        ScriptScoreQueryBuilder queryBuilder = new ScriptScoreQueryBuilder(\n            new TermQueryBuilder(KEYWORD_FIELD_NAME, \"value\"), script);\n\n        SearchExecutionContext context = createSearchExecutionContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/ScriptScoreQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"6a8f8f3f718bd21bf14176049c9e1f1def13463b","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-17 05:31:31","modifiedFileCount":"4429","status":"M","submitter":"Igor Motov"}]
