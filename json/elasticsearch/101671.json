[{"authorTime":"2018-05-16 13:41:23","codes":[{"authorDate":"2018-06-11 16:47:26","commitOrder":3,"curCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer[].class), anyInt(), anyInt())).thenAnswer(invocationOnMock -> {\n            ByteBuffer[] buffers = (ByteBuffer[]) invocationOnMock.getArguments()[0];\n            buffers[0].put(bytes);\n            return bytes.length;\n        });\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(BigArrays.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","date":"2018-06-11 16:47:26","endLine":103,"groupId":"55166","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleReadsConsumed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2a/b20522db65bc101b97914cb58b519fb92d244b.src","preCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer[].class), anyInt(), anyInt())).thenAnswer(invocationOnMock -> {\n            ByteBuffer[] buffers = (ByteBuffer[]) invocationOnMock.getArguments()[0];\n            buffers[0].put(bytes);\n            return bytes.length;\n        });\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(BigArrays.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","realPath":"libs/nio/src/test/java/org/elasticsearch/nio/BytesChannelContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"},{"authorDate":"2018-05-16 13:41:23","commitOrder":3,"curCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(same(readBuffer))).thenReturn(bytes.length);\n        doAnswer(getAnswerForBytes(bytes)).when(sslDriver).read(channelBuffer);\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(BigArrays.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","date":"2018-05-16 13:41:23","endLine":101,"groupId":"67369","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleReadsConsumed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fc/501c68922e5f371ca64595285b17939e362d1f.src","preCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(same(readBuffer))).thenReturn(bytes.length);\n        doAnswer(getAnswerForBytes(bytes)).when(sslDriver).read(channelBuffer);\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(BigArrays.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","realPath":"x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/transport/nio/SSLChannelContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"NB"}],"commitId":"9ee492a3f0768a3790671bfe46223e700082730a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-11 16:47:26","modifiedFileCount":"192","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-12-07 09:09:07","codes":[{"authorDate":"2018-12-07 09:09:07","commitOrder":4,"curCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenAnswer(invocationOnMock -> {\n            ByteBuffer buffer = (ByteBuffer) invocationOnMock.getArguments()[0];\n            buffer.put(bytes);\n            return bytes.length;\n        });\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(BigArrays.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","date":"2018-12-07 09:09:07","endLine":108,"groupId":"59755","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleReadsConsumed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/22/a90a32d65c405defc28bf54c8b48757a0ee0f0.src","preCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer[].class), anyInt(), anyInt())).thenAnswer(invocationOnMock -> {\n            ByteBuffer[] buffers = (ByteBuffer[]) invocationOnMock.getArguments()[0];\n            buffers[0].put(bytes);\n            return bytes.length;\n        });\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(BigArrays.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","realPath":"libs/nio/src/test/java/org/elasticsearch/nio/BytesChannelContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2018-12-07 09:09:07","commitOrder":4,"curCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenReturn(bytes.length);\n        doAnswer(getAnswerForBytes(bytes)).when(sslDriver).read(channelBuffer);\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(BigArrays.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","date":"2018-12-07 09:09:07","endLine":106,"groupId":"67369","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleReadsConsumed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/fe1bbda254914ac3d163a71382b4e52ce45d7b.src","preCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(same(readBuffer))).thenReturn(bytes.length);\n        doAnswer(getAnswerForBytes(bytes)).when(sslDriver).read(channelBuffer);\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(BigArrays.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","realPath":"x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/transport/nio/SSLChannelContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"373c67dd7ab31d5b57a2efa32b4188c9dc61449d","commitMessage":"@@@Add DirectByteBuffer strategy for transport-nio (#36289)\n\nThis is related to #27260. In Elasticsearch all of the messages that we\nserialize to write to the network are composed of heap bytes. When you\nread or write to a nio socket in java.  the heap memory you passed down\nmust be copied to/from direct memory. The JVM internally does some\nbuffering of the direct memory.  however it is essentially unbounded.\n\nThis commit introduces a simple mechanism of buffering and copying the\nmemory in transport-nio. Each network event loop is given a 64kb\nDirectByteBuffer. When we go to read we use this buffer and copy the\ndata after the read. Additionally.  when we go to write.  we copy the data\nto the direct memory before calling write. 64KB is chosen as this is the\ndefault receive buffer size we use for transport-netty4\n(NETTY_RECEIVE_PREDICTOR_SIZE).\n\nSince we only have one buffer per thread.  we could afford larger.\nHowever.  if we the buffer is large and not all of the data is flushed in\na write call.  we will do excess copies. This is something we can\nexplore in the future.","date":"2018-12-07 09:09:07","modifiedFileCount":"6","status":"M","submitter":"Tim Brooks"},{"authorTime":"2018-12-12 22:00:50","codes":[{"authorDate":"2018-12-12 22:00:50","commitOrder":5,"curCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenAnswer(invocationOnMock -> {\n            ByteBuffer buffer = (ByteBuffer) invocationOnMock.getArguments()[0];\n            buffer.put(bytes);\n            return bytes.length;\n        });\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(PageCacheRecycler.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","date":"2018-12-12 22:00:50","endLine":108,"groupId":"59755","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleReadsConsumed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/91abdd69a97aeab2fd4dfe6591ed82f49262e2.src","preCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenAnswer(invocationOnMock -> {\n            ByteBuffer buffer = (ByteBuffer) invocationOnMock.getArguments()[0];\n            buffer.put(bytes);\n            return bytes.length;\n        });\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(BigArrays.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","realPath":"libs/nio/src/test/java/org/elasticsearch/nio/BytesChannelContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2018-12-12 22:00:50","commitOrder":5,"curCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenReturn(bytes.length);\n        doAnswer(getAnswerForBytes(bytes)).when(sslDriver).read(channelBuffer);\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(PageCacheRecycler.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","date":"2018-12-12 22:00:50","endLine":106,"groupId":"67369","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleReadsConsumed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/dfb196d034ee28e4eebdeb71a6fb331fae5494.src","preCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenReturn(bytes.length);\n        doAnswer(getAnswerForBytes(bytes)).when(sslDriver).read(channelBuffer);\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(BigArrays.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","realPath":"x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/transport/nio/SSLChannelContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"e63d52af63ed66bbc8400935efc4c359f84b5a08","commitMessage":"@@@Move page size constants to PageCacheRecycler (#36524)\n\n`PageCacheRecycler` is the class that creates and holds pages of arrays\nfor various uses. `BigArrays` is just one user of these pages. This\ncommit moves the constants that define the page sizes for the recycler\nto be on the recycler class.","date":"2018-12-12 22:00:50","modifiedFileCount":"19","status":"M","submitter":"Tim Brooks"},{"authorTime":"2019-04-26 04:30:16","codes":[{"authorDate":"2018-12-12 22:00:50","commitOrder":6,"curCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenAnswer(invocationOnMock -> {\n            ByteBuffer buffer = (ByteBuffer) invocationOnMock.getArguments()[0];\n            buffer.put(bytes);\n            return bytes.length;\n        });\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(PageCacheRecycler.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","date":"2018-12-12 22:00:50","endLine":108,"groupId":"59755","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleReadsConsumed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/91abdd69a97aeab2fd4dfe6591ed82f49262e2.src","preCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenAnswer(invocationOnMock -> {\n            ByteBuffer buffer = (ByteBuffer) invocationOnMock.getArguments()[0];\n            buffer.put(bytes);\n            return bytes.length;\n        });\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(PageCacheRecycler.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","realPath":"libs/nio/src/test/java/org/elasticsearch/nio/BytesChannelContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2019-04-26 04:30:16","commitOrder":6,"curCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenReturn(bytes.length);\n        doAnswer(getReadAnswerForBytes(bytes)).when(sslDriver).read(channelBuffer);\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(PageCacheRecycler.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","date":"2019-04-26 04:30:16","endLine":112,"groupId":"67369","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleReadsConsumed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/3af2140b9b0dfef7cfc65d8b31fd074f436efa.src","preCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenReturn(bytes.length);\n        doAnswer(getAnswerForBytes(bytes)).when(sslDriver).read(channelBuffer);\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(PageCacheRecycler.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","realPath":"x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/transport/nio/SSLChannelContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"0ca375ed42f420f4c7c4a8c489a2ecc328db3648","commitMessage":"@@@Remove dedicated SSL network write buffer (#41283)\n\nThis is related to #27260. Currently for the SSLDriver we allocate a\ndedicated network write buffer and encrypt the data into that buffer one\nbuffer at a time. This requires constantly switching between encrypting\nand flushing. This commit adds a dedicated outbound buffer for SSL\noperations that will internally allocate new packet sized buffers as\nthey are need (for writing encrypted data). This allows us to totally\nencrypt an operation before writing it to the network. Eventually it can\nbe hooked up to buffer recycling.","date":"2019-04-26 04:30:16","modifiedFileCount":"20","status":"M","submitter":"Tim Brooks"},{"authorTime":"2019-05-03 04:44:22","codes":[{"authorDate":"2018-12-12 22:00:50","commitOrder":7,"curCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenAnswer(invocationOnMock -> {\n            ByteBuffer buffer = (ByteBuffer) invocationOnMock.getArguments()[0];\n            buffer.put(bytes);\n            return bytes.length;\n        });\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(PageCacheRecycler.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","date":"2018-12-12 22:00:50","endLine":108,"groupId":"101671","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleReadsConsumed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/91abdd69a97aeab2fd4dfe6591ed82f49262e2.src","preCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenAnswer(invocationOnMock -> {\n            ByteBuffer buffer = (ByteBuffer) invocationOnMock.getArguments()[0];\n            buffer.put(bytes);\n            return bytes.length;\n        });\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(PageCacheRecycler.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","realPath":"libs/nio/src/test/java/org/elasticsearch/nio/BytesChannelContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2019-05-03 04:44:22","commitOrder":7,"curCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenAnswer(invocationOnMock -> {\n            ByteBuffer buffer = (ByteBuffer) invocationOnMock.getArguments()[0];\n            buffer.put(bytes);\n            return bytes.length;\n        });\n        doAnswer(getReadAnswerForBytes(bytes)).when(sslDriver).read(any(InboundChannelBuffer.class), eq(channelBuffer));\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(PageCacheRecycler.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","date":"2019-05-03 04:44:22","endLine":122,"groupId":"101671","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleReadsConsumed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/380a8fab20519b5c4961f8ca6b6321a1a19d13.src","preCode":"    public void testMultipleReadsConsumed() throws IOException {\n        byte[] bytes = createMessage(messageLength * 2);\n\n        when(rawChannel.read(any(ByteBuffer.class))).thenReturn(bytes.length);\n        doAnswer(getReadAnswerForBytes(bytes)).when(sslDriver).read(channelBuffer);\n\n        when(readConsumer.apply(channelBuffer)).thenReturn(messageLength, messageLength, 0);\n\n        assertEquals(bytes.length, context.read());\n\n        assertEquals(0, channelBuffer.getIndex());\n        assertEquals(PageCacheRecycler.BYTE_PAGE_SIZE - bytes.length, channelBuffer.getCapacity());\n        verify(readConsumer, times(2)).apply(channelBuffer);\n    }\n","realPath":"x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/transport/nio/SSLChannelContextTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"cb2bd0bb6b907c141a857d23d2630d7af80d5768","commitMessage":"@@@Read multiple TLS packets in one read call (#41725)\n\nThis is related to #27260. Currently we have a single read buffer that\nis no larger than a single TLS packet. This prevents us from reading\nmultiple TLS packets in a single socket read call. This commit modifies\nour TLS work to support reading similar to the plaintext case. The data\nwill be copied to a (potentially) recycled TLS packet-sized buffer for\ninteraction with the SSLEngine.","date":"2019-05-03 04:44:22","modifiedFileCount":"13","status":"M","submitter":"Tim Brooks"}]
