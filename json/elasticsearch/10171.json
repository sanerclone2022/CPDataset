[{"authorTime":"2020-02-13 01:06:04","codes":[{"authorDate":"2020-02-13 01:06:04","commitOrder":1,"curCode":"    public void testRangeQuery() {\n        MappedFieldType ft = createDefaultFieldType();\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                        \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","date":"2020-02-13 01:06:04","endLine":148,"groupId":"59744","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/54dcda3100a262b5bd0bb9f3e4ab08102ec95d.src","preCode":"    public void testRangeQuery() {\n        MappedFieldType ft = createDefaultFieldType();\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                        \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2020-02-13 01:06:04","commitOrder":1,"curCode":"    public void testRangeQuery() {\n        MappedFieldType ft = createDefaultFieldType();\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","date":"2020-02-13 01:06:04","endLine":167,"groupId":"59744","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/5c4c779cf6edda93c30b3a2e16470b851369ac.src","preCode":"    public void testRangeQuery() {\n        MappedFieldType ft = createDefaultFieldType();\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"a8b39ed842c7770bd9275958c9f747502fd9a3ea","commitMessage":"@@@Add a cluster setting to disallow expensive queries (#51385)\n\nAdd a new cluster setting `search.allow_expensive_queries` which by\ndefault is `true`. If set to `false`.  certain queries that have \nusually slow performance cannot be executed and an error message\nis returned.\n\n- Queries that need to do linear scans to identify matches:\n  - Script queries\n- Queries that have a high up-front cost:\n  - Fuzzy queries\n  - Regexp queries\n  - Prefix queries (without index_prefixes enabled\n  - Wildcard queries\n  - Range queries on text and keyword fields\n- Joining queries\n  - HasParent queries\n  - HasChild queries\n  - ParentId queries\n  - Nested queries\n- Queries on deprecated 6.x geo shapes (using PrefixTree implementation)\n- Queries that may have a high per-document cost:\n  - Script score queries\n  - Percolate queries\n\nCloses: #29050","date":"2020-02-13 01:06:04","modifiedFileCount":"66","status":"B","submitter":"Marios Trivyzas"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":2,"curCode":"    public void testRangeQuery() {\n        MappedFieldType ft = new TextFieldType(\"field\");\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                        \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","date":"2020-06-16 00:47:15","endLine":116,"groupId":"59744","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e5/3d85adfb6e75be830cd1f333d25bc01db3cd79.src","preCode":"    public void testRangeQuery() {\n        MappedFieldType ft = createDefaultFieldType();\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                        \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":2,"curCode":"    public void testRangeQuery() {\n        MappedFieldType ft = new KeywordFieldType(\"field\");\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","date":"2020-06-16 00:47:15","endLine":159,"groupId":"59744","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/5a7a100129f0de60492313a5799b11334cbfc3.src","preCode":"    public void testRangeQuery() {\n        MappedFieldType ft = createDefaultFieldType();\n        ft.setName(\"field\");\n        ft.setIndexOptions(IndexOptions.DOCS);\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-09-19 06:27:17","commitOrder":3,"curCode":"    public void testRangeQuery() {\n        MappedFieldType ft = createFieldType();\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                        \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","date":"2020-09-19 06:27:17","endLine":98,"groupId":"59744","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/b611a4a660297f756fe97a8e5fc147c68114dd.src","preCode":"    public void testRangeQuery() {\n        MappedFieldType ft = new TextFieldType(\"field\");\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                        \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":3,"curCode":"    public void testRangeQuery() {\n        MappedFieldType ft = new KeywordFieldType(\"field\");\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","date":"2020-06-16 00:47:15","endLine":159,"groupId":"59744","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/5a7a100129f0de60492313a5799b11334cbfc3.src","preCode":"    public void testRangeQuery() {\n        MappedFieldType ft = new KeywordFieldType(\"field\");\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"N"}],"commitId":"d669cb500fadd52fd2ceb1dff0fe5a0e9379cc04","commitMessage":"@@@Dense vector field type minor fixes (#62631)\n\nThe dense vector field is not aggregatable although it produces fielddata through its BinaryDocValuesField. It should pass up hasDocValues set to true to its parent class in its constructor.  and return isAggregatable false\n\nThis may not have consequences today.  but it will be important once we try to share the same exists query implementation throughout all of the mappers with #57607.","date":"2020-09-19 06:27:17","modifiedFileCount":"13","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    public void testRangeQuery() {\n        MappedFieldType ft = createFieldType();\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_CONTEXT));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_CONTEXT_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                        \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","date":"2021-01-15 01:11:59","endLine":99,"groupId":"10171","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/d2dbeb4cbab23e75d3ad54e92f55d4bba69248.src","preCode":"    public void testRangeQuery() {\n        MappedFieldType ft = createFieldType();\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                        \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    public void testRangeQuery() {\n        MappedFieldType ft = new KeywordFieldType(\"field\");\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_CONTEXT));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_CONTEXT_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","date":"2021-01-15 01:11:59","endLine":139,"groupId":"10171","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/90614c8ab231ff05cbff84e1b622bfb1a42a7f.src","preCode":"    public void testRangeQuery() {\n        MappedFieldType ft = new KeywordFieldType(\"field\");\n        assertEquals(new TermRangeQuery(\"field\", BytesRefs.toBytesRef(\"foo\"), BytesRefs.toBytesRef(\"bar\"), true, false),\n                ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC));\n\n        ElasticsearchException ee = expectThrows(ElasticsearchException.class,\n                () -> ft.rangeQuery(\"foo\", \"bar\", true, false, null, null, null, MOCK_QSC_DISALLOW_EXPENSIVE));\n        assertEquals(\"[range] queries on [text] or [keyword] fields cannot be executed when \" +\n                \"'search.allow_expensive_queries' is set to false.\", ee.getMessage());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
