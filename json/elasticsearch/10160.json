[{"authorTime":"2020-10-13 04:57:29","codes":[{"authorDate":"2020-10-13 04:57:29","commitOrder":3,"curCode":"    public void testFetchSourceValue() throws IOException {\n        SearchAsYouTypeFieldType fieldType = createFieldType();\n        fieldType.setIndexAnalyzer(Lucene.STANDARD_ANALYZER);\n\n        assertEquals(List.of(\"value\"), fetchSourceValue(fieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(fieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(fieldType, true));\n\n        SearchAsYouTypeFieldMapper.PrefixFieldType prefixFieldType = new SearchAsYouTypeFieldMapper.PrefixFieldType(\n            fieldType.name(), fieldType.getTextSearchInfo(), 2, 10);\n        assertEquals(List.of(\"value\"), fetchSourceValue(prefixFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(prefixFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(prefixFieldType, true));\n\n        SearchAsYouTypeFieldMapper.ShingleFieldType shingleFieldType = new SearchAsYouTypeFieldMapper.ShingleFieldType(\n            fieldType.name(), 5, fieldType.getTextSearchInfo());\n        assertEquals(List.of(\"value\"), fetchSourceValue(shingleFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(shingleFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(shingleFieldType, true));\n    }\n","date":"2020-10-13 04:57:29","endLine":134,"groupId":"44819","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/da/b80326afa18ef3657ffee5660b705baf269c46.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        SearchAsYouTypeFieldType fieldType = createFieldType();\n        fieldType.setIndexAnalyzer(Lucene.STANDARD_ANALYZER);\n\n        assertEquals(List.of(\"value\"), fetchSourceValue(fieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(fieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(fieldType, true));\n\n        SearchAsYouTypeFieldMapper.PrefixFieldType prefixFieldType = new SearchAsYouTypeFieldMapper.PrefixFieldType(\n            fieldType.name(), fieldType.getTextSearchInfo(), 2, 10);\n        assertEquals(List.of(\"value\"), fetchSourceValue(prefixFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(prefixFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(prefixFieldType, true));\n\n        SearchAsYouTypeFieldMapper.ShingleFieldType shingleFieldType = new SearchAsYouTypeFieldMapper.ShingleFieldType(\n            fieldType.name(), 5, fieldType.getTextSearchInfo());\n        assertEquals(List.of(\"value\"), fetchSourceValue(shingleFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(shingleFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(shingleFieldType, true));\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"},{"authorDate":"2020-10-13 04:57:29","commitOrder":3,"curCode":"    public void testFetchSourceValue() throws IOException {\n        TextFieldType fieldType = createFieldType();\n        fieldType.setIndexAnalyzer(Lucene.STANDARD_ANALYZER);\n\n        assertEquals(List.of(\"value\"), fetchSourceValue(fieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(fieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(fieldType, true));\n\n        TextFieldMapper.PrefixFieldType prefixFieldType = new TextFieldMapper.PrefixFieldType(fieldType, \"field._index_prefix\", 2, 10);\n        assertEquals(List.of(\"value\"), fetchSourceValue(prefixFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(prefixFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(prefixFieldType, true));\n\n        TextFieldMapper.PhraseFieldType phraseFieldType = new TextFieldMapper.PhraseFieldType(fieldType);\n        assertEquals(List.of(\"value\"), fetchSourceValue(phraseFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(phraseFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(phraseFieldType, true));\n    }\n","date":"2020-10-13 04:57:29","endLine":183,"groupId":"44819","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/a1f23dcfe5fd26f6f79a2a1889c9fc19b789a3.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        TextFieldType fieldType = createFieldType();\n        fieldType.setIndexAnalyzer(Lucene.STANDARD_ANALYZER);\n\n        assertEquals(List.of(\"value\"), fetchSourceValue(fieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(fieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(fieldType, true));\n\n        TextFieldMapper.PrefixFieldType prefixFieldType = new TextFieldMapper.PrefixFieldType(fieldType, \"field._index_prefix\", 2, 10);\n        assertEquals(List.of(\"value\"), fetchSourceValue(prefixFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(prefixFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(prefixFieldType, true));\n\n        TextFieldMapper.PhraseFieldType phraseFieldType = new TextFieldMapper.PhraseFieldType(fieldType);\n        assertEquals(List.of(\"value\"), fetchSourceValue(phraseFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(phraseFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(phraseFieldType, true));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"MB"}],"commitId":"62857b49d1d1bcad8dc2f7a2e4b12ce1174a72c7","commitMessage":"@@@Add support for missing value fetchers. (#63515)\n\nThis PR implements value fetching for the following field types:\n* `text` phrase and prefix subfields\n* `search_as_you_type`.  plus its subfields\n* `token_count`.  which is implemented by fetching doc values\n\nSupporting these types helps ensure that retrieving all fields through\n`\"fields\": [\"*\"]` doesn't fail because of unsupported value fetchers.","date":"2020-10-13 04:57:29","modifiedFileCount":"9","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2020-11-04 21:53:09","codes":[{"authorDate":"2020-11-04 21:53:09","commitOrder":4,"curCode":"    public void testFetchSourceValue() throws IOException {\n        SearchAsYouTypeFieldType fieldType = createFieldType();\n\n        assertEquals(List.of(\"value\"), fetchSourceValue(fieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(fieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(fieldType, true));\n\n        SearchAsYouTypeFieldMapper.PrefixFieldType prefixFieldType = new SearchAsYouTypeFieldMapper.PrefixFieldType(\n            fieldType.name(), fieldType.getTextSearchInfo(), 2, 10);\n        assertEquals(List.of(\"value\"), fetchSourceValue(prefixFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(prefixFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(prefixFieldType, true));\n\n        SearchAsYouTypeFieldMapper.ShingleFieldType shingleFieldType = new SearchAsYouTypeFieldMapper.ShingleFieldType(\n            fieldType.name(), 5, fieldType.getTextSearchInfo());\n        assertEquals(List.of(\"value\"), fetchSourceValue(shingleFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(shingleFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(shingleFieldType, true));\n    }\n","date":"2020-11-04 21:53:09","endLine":133,"groupId":"44819","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/31/721fb77fe4a3019d64bfd23ceca492dcef6e50.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        SearchAsYouTypeFieldType fieldType = createFieldType();\n        fieldType.setIndexAnalyzer(Lucene.STANDARD_ANALYZER);\n\n        assertEquals(List.of(\"value\"), fetchSourceValue(fieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(fieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(fieldType, true));\n\n        SearchAsYouTypeFieldMapper.PrefixFieldType prefixFieldType = new SearchAsYouTypeFieldMapper.PrefixFieldType(\n            fieldType.name(), fieldType.getTextSearchInfo(), 2, 10);\n        assertEquals(List.of(\"value\"), fetchSourceValue(prefixFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(prefixFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(prefixFieldType, true));\n\n        SearchAsYouTypeFieldMapper.ShingleFieldType shingleFieldType = new SearchAsYouTypeFieldMapper.ShingleFieldType(\n            fieldType.name(), 5, fieldType.getTextSearchInfo());\n        assertEquals(List.of(\"value\"), fetchSourceValue(shingleFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(shingleFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(shingleFieldType, true));\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2020-11-04 21:53:09","commitOrder":4,"curCode":"    public void testFetchSourceValue() throws IOException {\n        TextFieldType fieldType = createFieldType();\n\n        assertEquals(List.of(\"value\"), fetchSourceValue(fieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(fieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(fieldType, true));\n\n        TextFieldMapper.PrefixFieldType prefixFieldType = new TextFieldMapper.PrefixFieldType(fieldType, \"field._index_prefix\", 2, 10);\n        assertEquals(List.of(\"value\"), fetchSourceValue(prefixFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(prefixFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(prefixFieldType, true));\n\n        TextFieldMapper.PhraseFieldType phraseFieldType = new TextFieldMapper.PhraseFieldType(fieldType);\n        assertEquals(List.of(\"value\"), fetchSourceValue(phraseFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(phraseFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(phraseFieldType, true));\n    }\n","date":"2020-11-04 21:53:09","endLine":181,"groupId":"44819","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/30c2fac063e1b4c67f3d5caee630eea1ba1896.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        TextFieldType fieldType = createFieldType();\n        fieldType.setIndexAnalyzer(Lucene.STANDARD_ANALYZER);\n\n        assertEquals(List.of(\"value\"), fetchSourceValue(fieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(fieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(fieldType, true));\n\n        TextFieldMapper.PrefixFieldType prefixFieldType = new TextFieldMapper.PrefixFieldType(fieldType, \"field._index_prefix\", 2, 10);\n        assertEquals(List.of(\"value\"), fetchSourceValue(prefixFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(prefixFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(prefixFieldType, true));\n\n        TextFieldMapper.PhraseFieldType phraseFieldType = new TextFieldMapper.PhraseFieldType(fieldType);\n        assertEquals(List.of(\"value\"), fetchSourceValue(phraseFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(phraseFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(phraseFieldType, true));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"f010269ab797e2502d8145799fc4eb19a954aea6","commitMessage":"@@@Move index analyzer management to FieldMapper/MapperService (#63937)\n\nIndex-time analyzers are currently specified on the MappedFieldType. This\nhas a number of unfortunate consequences; for example.  field mappers that\nindex data into implementation sub-fields.  such as prefix or phrase\naccelerators on text fields.  need to expose these sub-fields as MappedFieldTypes. \nwhich means that they then appear in field caps.  are externally searchable. \netc. It also adds index-time logic to a class that should only be concerned\nwith search-time behaviour.\n\nThis commit removes references to the index analyzer from MappedFieldType.\nInstead.  FieldMappers that use the terms index can pass either a single analyzer\nor a Map of fields to analyzers to their super constructor.  which are then\nexposed via a new FieldMapper#indexAnalyzers() method; all index-time analysis \nis mediated through the delegating analyzer wrapper on MapperService. \nIn a follow-up.  this will make it possible to register multiple field analyzers from \na single FieldMapper.  removing the need for 'hidden' mapper implementations \non text field.  parent joins.  and elsewhere.","date":"2020-11-04 21:53:09","modifiedFileCount":"54","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-11-05 21:16:31","codes":[{"authorDate":"2020-11-04 21:53:09","commitOrder":5,"curCode":"    public void testFetchSourceValue() throws IOException {\n        SearchAsYouTypeFieldType fieldType = createFieldType();\n\n        assertEquals(List.of(\"value\"), fetchSourceValue(fieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(fieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(fieldType, true));\n\n        SearchAsYouTypeFieldMapper.PrefixFieldType prefixFieldType = new SearchAsYouTypeFieldMapper.PrefixFieldType(\n            fieldType.name(), fieldType.getTextSearchInfo(), 2, 10);\n        assertEquals(List.of(\"value\"), fetchSourceValue(prefixFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(prefixFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(prefixFieldType, true));\n\n        SearchAsYouTypeFieldMapper.ShingleFieldType shingleFieldType = new SearchAsYouTypeFieldMapper.ShingleFieldType(\n            fieldType.name(), 5, fieldType.getTextSearchInfo());\n        assertEquals(List.of(\"value\"), fetchSourceValue(shingleFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(shingleFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(shingleFieldType, true));\n    }\n","date":"2020-11-04 21:53:09","endLine":133,"groupId":"10160","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/31/721fb77fe4a3019d64bfd23ceca492dcef6e50.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        SearchAsYouTypeFieldType fieldType = createFieldType();\n\n        assertEquals(List.of(\"value\"), fetchSourceValue(fieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(fieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(fieldType, true));\n\n        SearchAsYouTypeFieldMapper.PrefixFieldType prefixFieldType = new SearchAsYouTypeFieldMapper.PrefixFieldType(\n            fieldType.name(), fieldType.getTextSearchInfo(), 2, 10);\n        assertEquals(List.of(\"value\"), fetchSourceValue(prefixFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(prefixFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(prefixFieldType, true));\n\n        SearchAsYouTypeFieldMapper.ShingleFieldType shingleFieldType = new SearchAsYouTypeFieldMapper.ShingleFieldType(\n            fieldType.name(), 5, fieldType.getTextSearchInfo());\n        assertEquals(List.of(\"value\"), fetchSourceValue(shingleFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(shingleFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(shingleFieldType, true));\n    }\n","realPath":"modules/mapper-extras/src/test/java/org/elasticsearch/index/mapper/SearchAsYouTypeFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"},{"authorDate":"2020-11-05 21:16:31","commitOrder":5,"curCode":"    public void testFetchSourceValue() throws IOException {\n        TextFieldType fieldType = createFieldType();\n\n        assertEquals(List.of(\"value\"), fetchSourceValue(fieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(fieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(fieldType, true));\n    }\n","date":"2020-11-05 21:16:31","endLine":171,"groupId":"10160","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFetchSourceValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c7/d3171068ed15f2e1a73732ee5cfcaeef52eeba.src","preCode":"    public void testFetchSourceValue() throws IOException {\n        TextFieldType fieldType = createFieldType();\n\n        assertEquals(List.of(\"value\"), fetchSourceValue(fieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(fieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(fieldType, true));\n\n        TextFieldMapper.PrefixFieldType prefixFieldType = new TextFieldMapper.PrefixFieldType(fieldType, \"field._index_prefix\", 2, 10);\n        assertEquals(List.of(\"value\"), fetchSourceValue(prefixFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(prefixFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(prefixFieldType, true));\n\n        TextFieldMapper.PhraseFieldType phraseFieldType = new TextFieldMapper.PhraseFieldType(fieldType);\n        assertEquals(List.of(\"value\"), fetchSourceValue(phraseFieldType, \"value\"));\n        assertEquals(List.of(\"42\"), fetchSourceValue(phraseFieldType, 42L));\n        assertEquals(List.of(\"true\"), fetchSourceValue(phraseFieldType, true));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldTypeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"cea93d1c65b014ac02abf546bdb3a27150088bd2","commitMessage":"@@@Don't expose TextFieldMapper subfields (#64597)\n\nTextFieldMapper can optionally index data into subfields for accelerated\nprefix and phrase queries. Currently.  these subfields are implemented\nas FieldMappers in their own right.  made available via TextFieldMapper's\niterator() method and with their own standalone MappedFieldType objects.\n\nThis has the disadvantage that these subfields are directly available for\nsearching.  and appear in APIs such as field caps. In addition.  because\nexists queries are not implemented on them.  an exists query against an\nobject which contains a text field with one of the subfields enabled can\nthrow an error (see #63585).\n\nThis commit reworks the subfields so that they are no longer implemented\nas FieldMappers.  and are no longer exposed to classes outside\nTextFieldMapper either as MappedFieldTypes or as FieldMappers. The\nparent TextFieldMapper handles indexing and analyzer registration. \nPhraseFieldType is removed entirely.  and PrefixFieldType is retained as\na private implementation for fast prefix queries but is unavailable for\nquerying directly.\n\nFixes #63585\nCloses #63446","date":"2020-11-05 21:16:31","modifiedFileCount":"4","status":"M","submitter":"Alan Woodward"}]
