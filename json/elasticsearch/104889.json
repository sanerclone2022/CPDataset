[{"authorTime":"2020-02-19 21:37:22","codes":[{"authorDate":"2020-02-19 21:37:22","commitOrder":1,"curCode":"    public void testUnmappedWithMissingNumber() throws IOException {\n        RangeAggregationBuilder aggregationBuilder = new RangeAggregationBuilder(\"range\")\n            .field(\"does_not_exist\")\n            .addRange(-2d, 5d)\n            .missing(0L);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(NUMBER_FIELD_NAME);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 1)));\n        }, range -> {\n            List<? extends InternalRange.Bucket> ranges = range.getBuckets();\n            assertEquals(1, ranges.size());\n            assertEquals(2, ranges.get(0).getDocCount());\n            assertTrue(AggregationInspectionHelper.hasValue(range));\n        }, fieldType);\n    }\n","date":"2020-02-19 21:37:22","endLine":210,"groupId":"11487","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnmappedWithMissingNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/3571ffaac85cfecaacae46ec22358ea86235af.src","preCode":"    public void testUnmappedWithMissingNumber() throws IOException {\n        RangeAggregationBuilder aggregationBuilder = new RangeAggregationBuilder(\"range\")\n            .field(\"does_not_exist\")\n            .addRange(-2d, 5d)\n            .missing(0L);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(NUMBER_FIELD_NAME);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 1)));\n        }, range -> {\n            List<? extends InternalRange.Bucket> ranges = range.getBuckets();\n            assertEquals(1, ranges.size());\n            assertEquals(2, ranges.get(0).getDocCount());\n            assertTrue(AggregationInspectionHelper.hasValue(range));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"B"},{"authorDate":"2020-02-19 21:37:22","commitOrder":1,"curCode":"        public void testUnmappedWithMissingDate() throws IOException {\n            DateRangeAggregationBuilder aggregationBuilder = new DateRangeAggregationBuilder(\"date_range\")\n                .field(\"does_not_exist\")\n                .addRange(\"2015-11-13\", \"2015-11-14\")\n                .missing(\"2015-11-13T10:11:12\");\n\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n            fieldType.setName(NUMBER_FIELD_NAME);\n\n                testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n                    iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 7)));\n                    iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 1)));\n                }, range -> {\n                    List<? extends InternalRange.Bucket> ranges = range.getBuckets();\n                    assertEquals(1, ranges.size());\n                    assertEquals(2, ranges.get(0).getDocCount());\n                    assertTrue(AggregationInspectionHelper.hasValue(range));\n                }, fieldType);\n        }\n","date":"2020-02-19 21:37:22","endLine":212,"groupId":"11487","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnmappedWithMissingDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/27/46e69be29dea8542b9afafcc8c85727c702789.src","preCode":"        public void testUnmappedWithMissingDate() throws IOException {\n            DateRangeAggregationBuilder aggregationBuilder = new DateRangeAggregationBuilder(\"date_range\")\n                .field(\"does_not_exist\")\n                .addRange(\"2015-11-13\", \"2015-11-14\")\n                .missing(\"2015-11-13T10:11:12\");\n\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n            fieldType.setName(NUMBER_FIELD_NAME);\n\n                testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n                    iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 7)));\n                    iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 1)));\n                }, range -> {\n                    List<? extends InternalRange.Bucket> ranges = range.getBuckets();\n                    assertEquals(1, ranges.size());\n                    assertEquals(2, ranges.get(0).getDocCount());\n                    assertTrue(AggregationInspectionHelper.hasValue(range));\n                }, fieldType);\n        }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/range/DateRangeAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"B"}],"commitId":"85fa2bdb3575b7b96fca03a15c8a4c1a236b6de4","commitMessage":"@@@Unit tests for Range and DateRange aggs (#52380)\n\n","date":"2020-02-19 21:37:22","modifiedFileCount":"0","status":"B","submitter":"Mark Tozzi"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":2,"curCode":"    public void testUnmappedWithMissingNumber() throws IOException {\n        RangeAggregationBuilder aggregationBuilder = new RangeAggregationBuilder(\"range\")\n            .field(\"does_not_exist\")\n            .addRange(-2d, 5d)\n            .missing(0L);\n\n        MappedFieldType fieldType\n            = new NumberFieldMapper.NumberFieldType(NUMBER_FIELD_NAME, NumberFieldMapper.NumberType.INTEGER);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 1)));\n        }, range -> {\n            List<? extends InternalRange.Bucket> ranges = range.getBuckets();\n            assertEquals(1, ranges.size());\n            assertEquals(2, ranges.get(0).getDocCount());\n            assertTrue(AggregationInspectionHelper.hasValue(range));\n        }, fieldType);\n    }\n","date":"2020-06-16 00:47:15","endLine":203,"groupId":"104889","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnmappedWithMissingNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/e15b56ede4eee34aa949ba2604380328aea9ad.src","preCode":"    public void testUnmappedWithMissingNumber() throws IOException {\n        RangeAggregationBuilder aggregationBuilder = new RangeAggregationBuilder(\"range\")\n            .field(\"does_not_exist\")\n            .addRange(-2d, 5d)\n            .missing(0L);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(NUMBER_FIELD_NAME);\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 7)));\n            iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 1)));\n        }, range -> {\n            List<? extends InternalRange.Bucket> ranges = range.getBuckets();\n            assertEquals(1, ranges.size());\n            assertEquals(2, ranges.get(0).getDocCount());\n            assertTrue(AggregationInspectionHelper.hasValue(range));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/range/RangeAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":2,"curCode":"        public void testUnmappedWithMissingDate() throws IOException {\n            DateRangeAggregationBuilder aggregationBuilder = new DateRangeAggregationBuilder(\"date_range\")\n                .field(\"does_not_exist\")\n                .addRange(\"2015-11-13\", \"2015-11-14\")\n                .missing(\"2015-11-13T10:11:12\");\n\n            MappedFieldType fieldType\n                = new NumberFieldMapper.NumberFieldType(NUMBER_FIELD_NAME, NumberFieldMapper.NumberType.INTEGER);\n\n                testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n                    iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 7)));\n                    iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 1)));\n                }, range -> {\n                    List<? extends InternalRange.Bucket> ranges = range.getBuckets();\n                    assertEquals(1, ranges.size());\n                    assertEquals(2, ranges.get(0).getDocCount());\n                    assertTrue(AggregationInspectionHelper.hasValue(range));\n                }, fieldType);\n        }\n","date":"2020-06-16 00:47:15","endLine":213,"groupId":"104889","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnmappedWithMissingDate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/2dcc8b52d6031d3d997e50727ad81f1fd09f21.src","preCode":"        public void testUnmappedWithMissingDate() throws IOException {\n            DateRangeAggregationBuilder aggregationBuilder = new DateRangeAggregationBuilder(\"date_range\")\n                .field(\"does_not_exist\")\n                .addRange(\"2015-11-13\", \"2015-11-14\")\n                .missing(\"2015-11-13T10:11:12\");\n\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n            fieldType.setName(NUMBER_FIELD_NAME);\n\n                testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n                    iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 7)));\n                    iw.addDocument(singleton(new NumericDocValuesField(NUMBER_FIELD_NAME, 1)));\n                }, range -> {\n                    List<? extends InternalRange.Bucket> ranges = range.getBuckets();\n                    assertEquals(1, ranges.size());\n                    assertEquals(2, ranges.get(0).getDocCount());\n                    assertTrue(AggregationInspectionHelper.hasValue(range));\n                }, fieldType);\n        }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/range/DateRangeAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"}]
