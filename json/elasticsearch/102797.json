[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testDateDetection() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"date_detection\", true)\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"date_detection\", false)\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n\n        \r\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n    }\n","date":"2018-04-26 03:22:53","endLine":92,"groupId":"26922","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateDetection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ec/21a1f7286a4dd2e5f7b906b3e6ae97788b188b.src","preCode":"    public void testDateDetection() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"date_detection\", true)\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"date_detection\", false)\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n\n        \r\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RootObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testDateFormatters() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"dynamic_date_formats\", Arrays.asList(\"YYYY-MM-dd\"))\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"dynamic_date_formats\", Arrays.asList())\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping3, mapper.mappingSource().toString());\n    }\n","date":"2018-04-26 03:22:53","endLine":122,"groupId":"26923","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDateFormatters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ec/21a1f7286a4dd2e5f7b906b3e6ae97788b188b.src","preCode":"    public void testDateFormatters() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"dynamic_date_formats\", Arrays.asList(\"YYYY-MM-dd\"))\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"dynamic_date_formats\", Arrays.asList())\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping3, mapper.mappingSource().toString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RootObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-12-14 04:26:51","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testDateDetection() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"date_detection\", true)\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"date_detection\", false)\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n\n        \r\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n    }\n","date":"2018-04-26 03:22:53","endLine":92,"groupId":"26922","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateDetection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ec/21a1f7286a4dd2e5f7b906b3e6ae97788b188b.src","preCode":"    public void testDateDetection() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"date_detection\", true)\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"date_detection\", false)\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n\n        \r\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RootObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2018-12-14 04:26:51","commitOrder":2,"curCode":"    public void testDateFormatters() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"dynamic_date_formats\", Arrays.asList(\"yyyy-MM-dd\"))\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"dynamic_date_formats\", Arrays.asList())\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping3, mapper.mappingSource().toString());\n    }\n","date":"2018-12-14 04:26:51","endLine":122,"groupId":"26923","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDateFormatters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0b/805eb726646ac7201230263fbd8f627db0bc52.src","preCode":"    public void testDateFormatters() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"dynamic_date_formats\", Arrays.asList(\"YYYY-MM-dd\"))\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"dynamic_date_formats\", Arrays.asList())\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping3, mapper.mappingSource().toString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RootObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"254d1e8f22d49f836cfdaa77442384749965f4ea","commitMessage":"@@@Core: Add backcompat for joda time formats (#36531)\n\nThis commit adds deprecation warnings when using format specifiers with\njoda data formats that will change with java time. It also adds the \"8\"\nprefix which may be used to force the new java time format parsing.\n\n","date":"2018-12-14 04:26:51","modifiedFileCount":"14","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2020-01-14 23:15:19","codes":[{"authorDate":"2020-01-14 23:15:19","commitOrder":3,"curCode":"    public void testDateDetection() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"_doc\")\n                        .field(\"date_detection\", true)\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"_doc\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"_doc\")\n                    .field(\"date_detection\", false)\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"_doc\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n\n        \r\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"_doc\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"_doc\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n    }\n","date":"2020-01-14 23:15:19","endLine":92,"groupId":"47243","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateDetection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/46d7a235420c78e95c174ec4883221458d86e7.src","preCode":"    public void testDateDetection() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"date_detection\", true)\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"date_detection\", false)\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n\n        \r\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RootObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2020-01-14 23:15:19","commitOrder":3,"curCode":"    public void testDateFormatters() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"_doc\")\n                        .field(\"dynamic_date_formats\", Arrays.asList(\"yyyy-MM-dd\"))\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"_doc\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"_doc\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"_doc\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"_doc\")\n                    .field(\"dynamic_date_formats\", Arrays.asList())\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"_doc\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping3, mapper.mappingSource().toString());\n    }\n","date":"2020-01-14 23:15:19","endLine":122,"groupId":"47246","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDateFormatters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/46d7a235420c78e95c174ec4883221458d86e7.src","preCode":"    public void testDateFormatters() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"dynamic_date_formats\", Arrays.asList(\"yyyy-MM-dd\"))\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"dynamic_date_formats\", Arrays.asList())\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping3, mapper.mappingSource().toString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RootObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"774bfb5e22389a923678ed8013e8cd284703d5dd","commitMessage":"@@@Don't use user-supplied type when building DocumentMapper (#50960)\n\nThis commit begins the process of removing types from the document parsing\ninfrastructure. Initially.  we just ignore the user-supplied type after it has been\nremoved from the mapping json structure.  and always supply _doc as the name\nof the root parser.\n\nThe production code change is very small here.  and most of the changeset\nconsists of alterations to Mapper test code that was passing in non-standard\ntype names and checking serialization.\n\nRelates to #41059","date":"2020-01-14 23:15:19","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-20 19:14:49","codes":[{"authorDate":"2020-01-20 19:14:49","commitOrder":4,"curCode":"    public void testDateDetection() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"date_detection\", true)\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"date_detection\", false)\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n\n        \r\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n    }\n","date":"2020-01-20 19:14:49","endLine":92,"groupId":"26922","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateDetection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0b/805eb726646ac7201230263fbd8f627db0bc52.src","preCode":"    public void testDateDetection() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"_doc\")\n                        .field(\"date_detection\", true)\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"_doc\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"_doc\")\n                    .field(\"date_detection\", false)\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"_doc\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n\n        \r\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"_doc\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"_doc\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RootObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2020-01-20 19:14:49","commitOrder":4,"curCode":"    public void testDateFormatters() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"dynamic_date_formats\", Arrays.asList(\"yyyy-MM-dd\"))\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"dynamic_date_formats\", Arrays.asList())\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping3, mapper.mappingSource().toString());\n    }\n","date":"2020-01-20 19:14:49","endLine":122,"groupId":"26923","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDateFormatters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0b/805eb726646ac7201230263fbd8f627db0bc52.src","preCode":"    public void testDateFormatters() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"_doc\")\n                        .field(\"dynamic_date_formats\", Arrays.asList(\"yyyy-MM-dd\"))\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"_doc\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"_doc\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"_doc\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"_doc\")\n                    .field(\"dynamic_date_formats\", Arrays.asList())\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"_doc\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping3, mapper.mappingSource().toString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RootObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"3d796248437e06dc90c15077702b67851bcb63a8","commitMessage":"@@@Revert \"Don't use user-supplied type when building DocumentMapper (#50960)\" (#51214)\n\nReverts #50960\n\nThis commit has been causing test failures during upgrade tests: specifically.  an upgraded\nnode becomes master and sends a cluster state update to a 7.x node; this node sees that the\nmapping version of its .tasks index is the same as the master.  so asserts that the serialized\nmappings are the same; however.  because the master has rewritten the mapping to use\n_docinstead oftasks`.  we get an assertion failure. The logical fix is for the master to\nincrement its mapping version when it rewrites the mapping.  but there isn't a simple way to\ndo that currently.\n\nThis reverts commit 774bfb5e22389a923678ed8013e8cd284703d5dd.","date":"2020-01-20 19:14:49","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-07-02 18:25:49","codes":[{"authorDate":"2020-07-02 18:25:49","commitOrder":5,"curCode":"    public void testDateDetection() throws Exception {\n        MergeReason reason = randomFrom(MergeReason.MAPPING_UPDATE, MergeReason.INDEX_TEMPLATE);\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"date_detection\", true)\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), reason);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"date_detection\", false)\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), reason);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n\n        \r\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), reason);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n    }\n","date":"2020-07-02 18:25:49","endLine":104,"groupId":"23571","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateDetection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f5/d7459f517d77545808d543710b46b8442d0e1d.src","preCode":"    public void testDateDetection() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"date_detection\", true)\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"date_detection\", false)\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n\n        \r\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RootObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2020-07-02 18:25:49","commitOrder":5,"curCode":"    public void testDateFormatters() throws Exception {\n        MergeReason reason = randomFrom(MergeReason.MAPPING_UPDATE, MergeReason.INDEX_TEMPLATE);\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"dynamic_date_formats\", Arrays.asList(\"yyyy-MM-dd\"))\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), reason);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), reason);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"dynamic_date_formats\", Arrays.asList())\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), reason);\n        assertEquals(mapping3, mapper.mappingSource().toString());\n    }\n","date":"2020-07-02 18:25:49","endLine":135,"groupId":"50784","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDateFormatters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f5/d7459f517d77545808d543710b46b8442d0e1d.src","preCode":"    public void testDateFormatters() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"dynamic_date_formats\", Arrays.asList(\"yyyy-MM-dd\"))\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"dynamic_date_formats\", Arrays.asList())\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), MergeReason.MAPPING_UPDATE);\n        assertEquals(mapping3, mapper.mappingSource().toString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RootObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"59fc3d74d58c390828267569022ac177e77ffbd1","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-02 18:25:49","modifiedFileCount":"724","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-11-12 22:56:04","codes":[{"authorDate":"2020-11-12 22:56:04","commitOrder":6,"curCode":"    public void testDateDetection() throws Exception {\n        MergeReason reason = randomFrom(MergeReason.MAPPING_UPDATE, MergeReason.INDEX_TEMPLATE);\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(MapperService.SINGLE_MAPPING_NAME)\n                        .field(\"date_detection\", true)\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createMapperService(mapping);\n        assertEquals(mapping, mapperService.documentMapper().mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(MapperService.SINGLE_MAPPING_NAME)\n                    .field(\"date_detection\", false)\n                .endObject()\n            .endObject());\n        merge(mapperService, reason, mapping2);\n        assertEquals(mapping2, mapperService.documentMapper().mappingSource().toString());\n\n        \r\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(MapperService.SINGLE_MAPPING_NAME)\n                .endObject()\n            .endObject());\n        merge(mapperService, reason, mapping3);\n        assertEquals(mapping2, mapperService.documentMapper().mappingSource().toString());\n    }\n","date":"2020-11-12 22:56:04","endLine":108,"groupId":"102797","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateDetection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/27/014d2f5cd3d999e5723ec0d95c4233ee31b668.src","preCode":"    public void testDateDetection() throws Exception {\n        MergeReason reason = randomFrom(MergeReason.MAPPING_UPDATE, MergeReason.INDEX_TEMPLATE);\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"date_detection\", true)\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), reason);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"date_detection\", false)\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), reason);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n\n        \r\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), reason);\n        assertEquals(mapping2, mapper.mappingSource().toString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RootObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2020-11-12 22:56:04","commitOrder":6,"curCode":"    public void testDateFormatters() throws Exception {\n        MergeReason reason = randomFrom(MergeReason.MAPPING_UPDATE, MergeReason.INDEX_TEMPLATE);\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(MapperService.SINGLE_MAPPING_NAME)\n                        .field(\"dynamic_date_formats\", Collections.singletonList(\"yyyy-MM-dd\"))\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createMapperService(mapping);\n        assertEquals(mapping, mapperService.documentMapper().mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(MapperService.SINGLE_MAPPING_NAME)\n                .endObject()\n            .endObject());\n        merge(mapperService, reason, mapping2);\n        assertEquals(mapping, mapperService.documentMapper().mappingSource().toString());\n\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(MapperService.SINGLE_MAPPING_NAME)\n                    .field(\"dynamic_date_formats\", Collections.emptyList())\n                .endObject()\n            .endObject());\n        merge(mapperService, reason, mapping3);\n        assertEquals(mapping3, mapperService.documentMapper().mappingSource().toString());\n    }\n","date":"2020-11-12 22:56:04","endLine":138,"groupId":"102797","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDateFormatters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/27/014d2f5cd3d999e5723ec0d95c4233ee31b668.src","preCode":"    public void testDateFormatters() throws Exception {\n        MergeReason reason = randomFrom(MergeReason.MAPPING_UPDATE, MergeReason.INDEX_TEMPLATE);\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                    .startObject(\"type\")\n                        .field(\"dynamic_date_formats\", Arrays.asList(\"yyyy-MM-dd\"))\n                    .endObject()\n                .endObject());\n        MapperService mapperService = createIndex(\"test\").mapperService();\n        DocumentMapper mapper = mapperService.merge(\"type\", new CompressedXContent(mapping), reason);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        \r\n        String mapping2 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping2), reason);\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        String mapping3 = Strings.toString(XContentFactory.jsonBuilder()\n                .startObject()\n                .startObject(\"type\")\n                    .field(\"dynamic_date_formats\", Arrays.asList())\n                .endObject()\n            .endObject());\n        mapper = mapperService.merge(\"type\", new CompressedXContent(mapping3), reason);\n        assertEquals(mapping3, mapper.mappingSource().toString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/RootObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"3101293165acc0db8ef0f9e499eb498a4be4d23a","commitMessage":"@@@Introduce runtime section in mappings (#62906)\n\nThe runtime section is at the same level as the existing properties section. Its purpose is to hold runtime fields only. With the introduction of the runtime section.  a runtime field can be defined by specifying its type (previously called runtime_type) and script.\n\n```\nPUT /my-index/_mappings\n{\n    \"runtime\" : {\n        \"day_of_week\" : {\n            \"type\" : \"keyword\". \n            \"script\" : {\n                \"source\" : \"emit(doc['timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL.  Locale.ROOT))\"\n            }\n        }\n    }. \n    \"properties\" : {\n        \"timestamp\" : {\n            \"type\" : \"date\"\n        }\n    }\n}\n```\n\nFields defined in the runtime section can be updated at any time as they are not present in the lucene index. They get replaced entirely when they get updated.\n\nThanks to the introduction of the runtime section.  runtime fields override existing mapped fields defined with the same name.  similarly to runtime fields defined in the search request.\n\nRelates to #59332 \n","date":"2020-11-12 22:56:04","modifiedFileCount":"51","status":"M","submitter":"Luca Cavanna"}]
