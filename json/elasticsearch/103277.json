[{"authorTime":"2019-03-28 01:03:30","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testIllegalValues() {\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchPhrasePrefixQueryBuilder(null, \"value\"));\n        assertEquals(\"[match_phrase_prefix] requires fieldName\", e.getMessage());\n\n        e = expectThrows(IllegalArgumentException.class, () -> new MatchPhrasePrefixQueryBuilder(\"fieldName\", null));\n        assertEquals(\"[match_phrase_prefix] requires query value\", e.getMessage());\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(\"fieldName\", \"text\");\n        e = expectThrows(IllegalArgumentException.class, () -> matchQuery.maxExpansions(-1));\n    }\n","date":"2018-04-26 03:22:53","endLine":111,"groupId":"68215","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIllegalValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/d5f98fe0b4769e74ba2b33275a7b53cfef14b8.src","preCode":"    public void testIllegalValues() {\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchPhrasePrefixQueryBuilder(null, \"value\"));\n        assertEquals(\"[match_phrase_prefix] requires fieldName\", e.getMessage());\n\n        e = expectThrows(IllegalArgumentException.class, () -> new MatchPhrasePrefixQueryBuilder(\"fieldName\", null));\n        assertEquals(\"[match_phrase_prefix] requires query value\", e.getMessage());\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(\"fieldName\", \"text\");\n        e = expectThrows(IllegalArgumentException.class, () -> matchQuery.maxExpansions(-1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"NB"},{"authorDate":"2019-03-28 01:03:30","commitOrder":2,"curCode":"    public void testIllegalValues() {\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchBoolPrefixQueryBuilder(null, \"value\"));\n            assertEquals(\"[match_bool_prefix] requires fieldName\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchBoolPrefixQueryBuilder(\"name\", null));\n            assertEquals(\"[match_bool_prefix] requires query value\", e.getMessage());\n        }\n\n        {\n            final MatchBoolPrefixQueryBuilder builder = new MatchBoolPrefixQueryBuilder(\"name\", \"value\");\n            builder.analyzer(\"bogusAnalyzer\");\n            QueryShardException e = expectThrows(QueryShardException.class, () -> builder.toQuery(createShardContext()));\n            assertThat(e.getMessage(), containsString(\"analyzer [bogusAnalyzer] not found\"));\n        }\n    }\n","date":"2019-03-28 01:03:30","endLine":162,"groupId":"54598","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b3/a3a2512a5ff87ff23a62665f244fe559797546.src","preCode":"    public void testIllegalValues() {\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchBoolPrefixQueryBuilder(null, \"value\"));\n            assertEquals(\"[match_bool_prefix] requires fieldName\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchBoolPrefixQueryBuilder(\"name\", null));\n            assertEquals(\"[match_bool_prefix] requires query value\", e.getMessage());\n        }\n\n        {\n            final MatchBoolPrefixQueryBuilder builder = new MatchBoolPrefixQueryBuilder(\"name\", \"value\");\n            builder.analyzer(\"bogusAnalyzer\");\n            QueryShardException e = expectThrows(QueryShardException.class, () -> builder.toQuery(createShardContext()));\n            assertThat(e.getMessage(), containsString(\"analyzer [bogusAnalyzer] not found\"));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchBoolPrefixQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"B"}],"commitId":"6bba9fc83bc30d29c67e66e8e4c70f4dcc3b7494","commitMessage":"@@@search as you type fieldmapper (#35600)\n\nAdds the search_as_you_type field type that acts like a text field optimized\nfor as-you-type search completion. It creates a couple subfields that analyze\nthe indexed terms as shingles.  against which full terms are queried.  and a\nprefix subfield that analyze terms as the largest shingle size used and\nedge-ngrams.  against which partial terms are queried\n\nAdds a match_bool_prefix query type that creates a boolean clause of a term\nquery for each term except the last.  for which a boolean clause with a prefix\nquery is created.\n\nThe match_bool_prefix query is the recommended way of querying a search as you\ntype field.  which will boil down to term queries for each shingle of the input\ntext on the appropriate shingle field.  and the final (possibly partial) term\nas a term query on the prefix field. This field type also supports phrase and\nphrase prefix queries however\n","date":"2019-03-28 01:03:30","modifiedFileCount":"10","status":"M","submitter":"Andy Bristol"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"    public void testIllegalValues() {\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchPhrasePrefixQueryBuilder(null, \"value\"));\n        assertEquals(\"[match_phrase_prefix] requires fieldName\", e.getMessage());\n\n        e = expectThrows(IllegalArgumentException.class, () -> new MatchPhrasePrefixQueryBuilder(\"fieldName\", null));\n        assertEquals(\"[match_phrase_prefix] requires query value\", e.getMessage());\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(\"fieldName\", \"text\");\n        e = expectThrows(IllegalArgumentException.class, () -> matchQuery.maxExpansions(-1));\n    }\n","date":"2018-04-26 03:22:53","endLine":111,"groupId":"103277","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIllegalValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/d5f98fe0b4769e74ba2b33275a7b53cfef14b8.src","preCode":"    public void testIllegalValues() {\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchPhrasePrefixQueryBuilder(null, \"value\"));\n        assertEquals(\"[match_phrase_prefix] requires fieldName\", e.getMessage());\n\n        e = expectThrows(IllegalArgumentException.class, () -> new MatchPhrasePrefixQueryBuilder(\"fieldName\", null));\n        assertEquals(\"[match_phrase_prefix] requires query value\", e.getMessage());\n\n        MatchPhrasePrefixQueryBuilder matchQuery = new MatchPhrasePrefixQueryBuilder(\"fieldName\", \"text\");\n        e = expectThrows(IllegalArgumentException.class, () -> matchQuery.maxExpansions(-1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhrasePrefixQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"},{"authorDate":"2021-01-15 01:11:59","commitOrder":3,"curCode":"    public void testIllegalValues() {\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchBoolPrefixQueryBuilder(null, \"value\"));\n            assertEquals(\"[match_bool_prefix] requires fieldName\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchBoolPrefixQueryBuilder(\"name\", null));\n            assertEquals(\"[match_bool_prefix] requires query value\", e.getMessage());\n        }\n\n        {\n            final MatchBoolPrefixQueryBuilder builder = new MatchBoolPrefixQueryBuilder(\"name\", \"value\");\n            builder.analyzer(\"bogusAnalyzer\");\n            QueryShardException e = expectThrows(QueryShardException.class, () -> builder.toQuery(createSearchExecutionContext()));\n            assertThat(e.getMessage(), containsString(\"analyzer [bogusAnalyzer] not found\"));\n        }\n    }\n","date":"2021-01-15 01:11:59","endLine":163,"groupId":"103277","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIllegalValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e6/a9052ff676e6d3c7c5a70c6cbab2c332e5e80c.src","preCode":"    public void testIllegalValues() {\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchBoolPrefixQueryBuilder(null, \"value\"));\n            assertEquals(\"[match_bool_prefix] requires fieldName\", e.getMessage());\n        }\n\n        {\n            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> new MatchBoolPrefixQueryBuilder(\"name\", null));\n            assertEquals(\"[match_bool_prefix] requires query value\", e.getMessage());\n        }\n\n        {\n            final MatchBoolPrefixQueryBuilder builder = new MatchBoolPrefixQueryBuilder(\"name\", \"value\");\n            builder.analyzer(\"bogusAnalyzer\");\n            QueryShardException e = expectThrows(QueryShardException.class, () -> builder.toQuery(createShardContext()));\n            assertThat(e.getMessage(), containsString(\"analyzer [bogusAnalyzer] not found\"));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchBoolPrefixQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
