[{"authorTime":"2021-09-07 22:23:18","codes":[{"authorDate":"2021-09-14 01:10:20","commitOrder":2,"curCode":"    public void testLongToBigIntegerToLong() {\n        long[] raw = { randomLong(), Long.MIN_VALUE, Long.MAX_VALUE, ((long) Integer.MIN_VALUE - 1), ((long) Integer.MAX_VALUE + 1),\n                       -1L, 0L, 1L };\n        Field<Long> src = new Field.LongField(\"\", new FieldValues<Long>() {\n            @Override\n            public boolean isEmpty() {\n                return false;\n            }\n\n            @Override\n            public int size() {\n                return raw.length;\n            }\n\n            @Override\n            public List<Long> getValues() {\n                return LongStream.of(raw).boxed().collect(Collectors.toList());\n            }\n\n            @Override\n            public Long getNonPrimitiveValue() {\n                return raw[0];\n            }\n\n            @Override\n            public long getLongValue() {\n                return raw[0];\n            }\n\n            @Override\n            public double getDoubleValue() {\n                return raw[0];\n            }\n        });\n\n        Field<BigInteger> dst = src.as(Field.BigInteger);\n\n        List<BigInteger> expected = LongStream.of(raw).mapToObj(BigInteger::valueOf).collect(Collectors.toList());\n        assertEquals(expected, dst.getValues());\n        assertEquals(expected.get(0), dst.getValue(null));\n        \r\n        assertEquals(raw[0], dst.getLong(10));\n        assertEquals((double) raw[0], dst.getDouble(10.0d), 0.1d);\n\n        Field<Long> dstLong = dst.as(Field.Long);\n        assertEquals(LongStream.of(raw).boxed().collect(Collectors.toList()), dstLong.getValues());\n        assertEquals(Long.valueOf(raw[0]), dstLong.getValue(null));\n        assertEquals(raw[0], dstLong.getLong(10));\n        assertEquals((double) raw[0], dstLong.getDouble(10.0d), 0.1d);\n    }\n","date":"2021-09-14 01:10:20","endLine":73,"groupId":"67390","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLongToBigIntegerToLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/21/abd028b37644c58108ca203409d50af91b360c.src","preCode":"    public void testLongToBigIntegerToLong() {\n        long[] raw = { randomLong(), Long.MIN_VALUE, Long.MAX_VALUE, ((long) Integer.MIN_VALUE - 1), ((long) Integer.MAX_VALUE + 1),\n                       -1L, 0L, 1L };\n        Field<Long> src = new Field.LongField(\"\", new FieldValues<Long>() {\n            @Override\n            public boolean isEmpty() {\n                return false;\n            }\n\n            @Override\n            public int size() {\n                return raw.length;\n            }\n\n            @Override\n            public List<Long> getValues() {\n                return LongStream.of(raw).boxed().collect(Collectors.toList());\n            }\n\n            @Override\n            public Long getNonPrimitiveValue() {\n                return raw[0];\n            }\n\n            @Override\n            public long getLongValue() {\n                return raw[0];\n            }\n\n            @Override\n            public double getDoubleValue() {\n                return raw[0];\n            }\n        });\n\n        Field<BigInteger> dst = src.as(Field.BigInteger);\n\n        List<BigInteger> expected = LongStream.of(raw).mapToObj(BigInteger::valueOf).collect(Collectors.toList());\n        assertEquals(expected, dst.getValues());\n        assertEquals(expected.get(0), dst.getValue(null));\n        \r\n        assertEquals(raw[0], dst.getLong(10));\n        assertEquals((double) raw[0], dst.getDouble(10.0d), 0.1d);\n\n        Field<Long> dstLong = dst.as(Field.Long);\n        assertEquals(LongStream.of(raw).boxed().collect(Collectors.toList()), dstLong.getValues());\n        assertEquals(Long.valueOf(raw[0]), dstLong.getValue(null));\n        assertEquals(raw[0], dstLong.getLong(10));\n        assertEquals((double) raw[0], dstLong.getDouble(10.0d), 0.1d);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/script/field/ConvertersTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":24,"status":"B"},{"authorDate":"2021-09-07 22:23:18","commitOrder":2,"curCode":"    public void testLongToUnsignedLong() {\n        long[] raw = { Long.MIN_VALUE, Long.MAX_VALUE, ((long) Integer.MIN_VALUE - 1), ((long) Integer.MAX_VALUE + 1), -1L, 0L, 1L };\n        Field<Long> src = new Field.LongField(\"\", new FieldValues<Long>() {\n            @Override\n            public boolean isEmpty() {\n                return false;\n            }\n\n            @Override\n            public int size() {\n                return raw.length;\n            }\n\n            @Override\n            public List<Long> getValues() {\n                return LongStream.of(raw).boxed().collect(Collectors.toList());\n            }\n\n            @Override\n            public Long getNonPrimitiveValue() {\n                return raw[0];\n            }\n\n            @Override\n            public long getLongValue() {\n                return raw[0];\n            }\n\n            @Override\n            public double getDoubleValue() {\n                return raw[0];\n            }\n        });\n\n        Field<Long> dst = src.as(UnsignedLongField.UnsignedLong);\n        assertEquals(LongStream.of(raw).map(l -> l ^ MASK_2_63).boxed().collect(Collectors.toList()), dst.getValues());\n        assertEquals(Long.valueOf(raw[0] ^ MASK_2_63), dst.getValue(null));\n        assertEquals(raw[0] ^ MASK_2_63, dst.getLong(10));\n        assertEquals((double) (raw[0] ^ MASK_2_63), dst.getDouble(10.0d), 0.1d);\n    }\n","date":"2021-09-07 22:23:18","endLine":111,"groupId":"50895","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongToUnsignedLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/17/c8ead0d4c4cc0172eb9eee266aa5df7e64d727.src","preCode":"    public void testLongToUnsignedLong() {\n        long[] raw = { Long.MIN_VALUE, Long.MAX_VALUE, ((long) Integer.MIN_VALUE - 1), ((long) Integer.MAX_VALUE + 1), -1L, 0L, 1L };\n        Field<Long> src = new Field.LongField(\"\", new FieldValues<Long>() {\n            @Override\n            public boolean isEmpty() {\n                return false;\n            }\n\n            @Override\n            public int size() {\n                return raw.length;\n            }\n\n            @Override\n            public List<Long> getValues() {\n                return LongStream.of(raw).boxed().collect(Collectors.toList());\n            }\n\n            @Override\n            public Long getNonPrimitiveValue() {\n                return raw[0];\n            }\n\n            @Override\n            public long getLongValue() {\n                return raw[0];\n            }\n\n            @Override\n            public double getDoubleValue() {\n                return raw[0];\n            }\n        });\n\n        Field<Long> dst = src.as(UnsignedLongField.UnsignedLong);\n        assertEquals(LongStream.of(raw).map(l -> l ^ MASK_2_63).boxed().collect(Collectors.toList()), dst.getValues());\n        assertEquals(Long.valueOf(raw[0] ^ MASK_2_63), dst.getValue(null));\n        assertEquals(raw[0] ^ MASK_2_63, dst.getLong(10));\n        assertEquals((double) (raw[0] ^ MASK_2_63), dst.getDouble(10.0d), 0.1d);\n    }\n","realPath":"x-pack/plugin/mapper-unsigned-long/src/test/java/org/elasticsearch/xpack/unsignedlong/UnsignedLongFieldTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"NB"}],"commitId":"b9974881c45671ebc0fa5b4ef833b9b162d79fdb","commitMessage":"@@@Add a script.field package for fields api specific classes (#77642)\n\nThis adds a script.field package so that we can start to separate the different types of converters into \ntheir own class files without polluting the script package as we add more of them. This change is \npurely mechanical.","date":"2021-09-14 01:10:20","modifiedFileCount":"12","status":"M","submitter":"Jack Conradson"},{"authorTime":"2021-09-14 02:56:46","codes":[{"authorDate":"2021-09-14 02:56:46","commitOrder":3,"curCode":"    public void testLongToBigIntegerToLong() {\n        long[] raw = { randomLong(), Long.MIN_VALUE, Long.MAX_VALUE, ((long) Integer.MIN_VALUE - 1), ((long) Integer.MAX_VALUE + 1),\n                       -1L, 0L, 1L };\n        Field<Long> src = new LongField(\"\", new FieldValues<Long>() {\n            @Override\n            public boolean isEmpty() {\n                return false;\n            }\n\n            @Override\n            public int size() {\n                return raw.length;\n            }\n\n            @Override\n            public List<Long> getValues() {\n                return LongStream.of(raw).boxed().collect(Collectors.toList());\n            }\n\n            @Override\n            public Long getNonPrimitiveValue() {\n                return raw[0];\n            }\n\n            @Override\n            public long getLongValue() {\n                return raw[0];\n            }\n\n            @Override\n            public double getDoubleValue() {\n                return raw[0];\n            }\n        });\n\n        Field<BigInteger> dst = src.as(Field.BigInteger);\n\n        List<BigInteger> expected = LongStream.of(raw).mapToObj(BigInteger::valueOf).collect(Collectors.toList());\n        assertEquals(expected, dst.getValues());\n        assertEquals(expected.get(0), dst.getValue(null));\n        \r\n        assertEquals(raw[0], dst.getLong(10));\n        assertEquals((double) raw[0], dst.getDouble(10.0d), 0.1d);\n\n        Field<Long> dstLong = dst.as(Field.Long);\n        assertEquals(LongStream.of(raw).boxed().collect(Collectors.toList()), dstLong.getValues());\n        assertEquals(Long.valueOf(raw[0]), dstLong.getValue(null));\n        assertEquals(raw[0], dstLong.getLong(10));\n        assertEquals((double) raw[0], dstLong.getDouble(10.0d), 0.1d);\n    }\n","date":"2021-09-14 02:56:46","endLine":73,"groupId":"67390","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLongToBigIntegerToLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/0334a2785d1422213282ccf39cfb6dbabeb0d8.src","preCode":"    public void testLongToBigIntegerToLong() {\n        long[] raw = { randomLong(), Long.MIN_VALUE, Long.MAX_VALUE, ((long) Integer.MIN_VALUE - 1), ((long) Integer.MAX_VALUE + 1),\n                       -1L, 0L, 1L };\n        Field<Long> src = new Field.LongField(\"\", new FieldValues<Long>() {\n            @Override\n            public boolean isEmpty() {\n                return false;\n            }\n\n            @Override\n            public int size() {\n                return raw.length;\n            }\n\n            @Override\n            public List<Long> getValues() {\n                return LongStream.of(raw).boxed().collect(Collectors.toList());\n            }\n\n            @Override\n            public Long getNonPrimitiveValue() {\n                return raw[0];\n            }\n\n            @Override\n            public long getLongValue() {\n                return raw[0];\n            }\n\n            @Override\n            public double getDoubleValue() {\n                return raw[0];\n            }\n        });\n\n        Field<BigInteger> dst = src.as(Field.BigInteger);\n\n        List<BigInteger> expected = LongStream.of(raw).mapToObj(BigInteger::valueOf).collect(Collectors.toList());\n        assertEquals(expected, dst.getValues());\n        assertEquals(expected.get(0), dst.getValue(null));\n        \r\n        assertEquals(raw[0], dst.getLong(10));\n        assertEquals((double) raw[0], dst.getDouble(10.0d), 0.1d);\n\n        Field<Long> dstLong = dst.as(Field.Long);\n        assertEquals(LongStream.of(raw).boxed().collect(Collectors.toList()), dstLong.getValues());\n        assertEquals(Long.valueOf(raw[0]), dstLong.getValue(null));\n        assertEquals(raw[0], dstLong.getLong(10));\n        assertEquals((double) raw[0], dstLong.getDouble(10.0d), 0.1d);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/script/field/ConvertersTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":24,"status":"M"},{"authorDate":"2021-09-14 02:56:46","commitOrder":3,"curCode":"    public void testLongToUnsignedLong() {\n        long[] raw = { Long.MIN_VALUE, Long.MAX_VALUE, ((long) Integer.MIN_VALUE - 1), ((long) Integer.MAX_VALUE + 1), -1L, 0L, 1L };\n        Field<Long> src = new LongField(\"\", new FieldValues<Long>() {\n            @Override\n            public boolean isEmpty() {\n                return false;\n            }\n\n            @Override\n            public int size() {\n                return raw.length;\n            }\n\n            @Override\n            public List<Long> getValues() {\n                return LongStream.of(raw).boxed().collect(Collectors.toList());\n            }\n\n            @Override\n            public Long getNonPrimitiveValue() {\n                return raw[0];\n            }\n\n            @Override\n            public long getLongValue() {\n                return raw[0];\n            }\n\n            @Override\n            public double getDoubleValue() {\n                return raw[0];\n            }\n        });\n\n        Field<Long> dst = src.as(UnsignedLongField.UnsignedLong);\n        assertEquals(LongStream.of(raw).map(l -> l ^ MASK_2_63).boxed().collect(Collectors.toList()), dst.getValues());\n        assertEquals(Long.valueOf(raw[0] ^ MASK_2_63), dst.getValue(null));\n        assertEquals(raw[0] ^ MASK_2_63, dst.getLong(10));\n        assertEquals((double) (raw[0] ^ MASK_2_63), dst.getDouble(10.0d), 0.1d);\n    }\n","date":"2021-09-14 02:56:46","endLine":112,"groupId":"50895","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongToUnsignedLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/2d86a50727b89dd827161b9c9f2cbfc96f9bb0.src","preCode":"    public void testLongToUnsignedLong() {\n        long[] raw = { Long.MIN_VALUE, Long.MAX_VALUE, ((long) Integer.MIN_VALUE - 1), ((long) Integer.MAX_VALUE + 1), -1L, 0L, 1L };\n        Field<Long> src = new Field.LongField(\"\", new FieldValues<Long>() {\n            @Override\n            public boolean isEmpty() {\n                return false;\n            }\n\n            @Override\n            public int size() {\n                return raw.length;\n            }\n\n            @Override\n            public List<Long> getValues() {\n                return LongStream.of(raw).boxed().collect(Collectors.toList());\n            }\n\n            @Override\n            public Long getNonPrimitiveValue() {\n                return raw[0];\n            }\n\n            @Override\n            public long getLongValue() {\n                return raw[0];\n            }\n\n            @Override\n            public double getDoubleValue() {\n                return raw[0];\n            }\n        });\n\n        Field<Long> dst = src.as(UnsignedLongField.UnsignedLong);\n        assertEquals(LongStream.of(raw).map(l -> l ^ MASK_2_63).boxed().collect(Collectors.toList()), dst.getValues());\n        assertEquals(Long.valueOf(raw[0] ^ MASK_2_63), dst.getValue(null));\n        assertEquals(raw[0] ^ MASK_2_63, dst.getLong(10));\n        assertEquals((double) (raw[0] ^ MASK_2_63), dst.getDouble(10.0d), 0.1d);\n    }\n","realPath":"x-pack/plugin/mapper-unsigned-long/src/test/java/org/elasticsearch/xpack/unsignedlong/UnsignedLongFieldTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"9b2eb915e75f4a0326d940927a806792567ec8c5","commitMessage":"@@@Move each field in the Painless Fields API to its own class file (#77652)\n\nThis change is a purely mechanical refactor to move each type of field to its own class. This allows for an \neasy way to separate the converters as well as each converter will require many lines of code.","date":"2021-09-14 02:56:46","modifiedFileCount":"9","status":"M","submitter":"Jack Conradson"},{"authorTime":"2021-09-14 02:56:46","codes":[{"authorDate":"2021-09-16 02:55:28","commitOrder":4,"curCode":"    public void testLongToBigIntegerToLong() {\n        long[] raw = { randomLong(), Long.MIN_VALUE, Long.MAX_VALUE, ((long) Integer.MIN_VALUE - 1), ((long) Integer.MAX_VALUE + 1),\n                       -1L, 0L, 1L };\n        Field<Long> src = new LongField(\"\", new FieldValues<Long>() {\n            @Override\n            public boolean isEmpty() {\n                return false;\n            }\n\n            @Override\n            public int size() {\n                return raw.length;\n            }\n\n            @Override\n            public List<Long> getValues() {\n                return LongStream.of(raw).boxed().collect(Collectors.toList());\n            }\n\n            @Override\n            public Long getNonPrimitiveValue() {\n                return raw[0];\n            }\n\n            @Override\n            public long getLongValue() {\n                return raw[0];\n            }\n\n            @Override\n            public double getDoubleValue() {\n                return raw[0];\n            }\n        });\n\n        Field<BigInteger> dst = src.as(BigIntegerField.BigInteger);\n\n        List<BigInteger> expected = LongStream.of(raw).mapToObj(BigInteger::valueOf).collect(Collectors.toList());\n        assertEquals(expected, dst.getValues());\n        assertEquals(expected.get(0), dst.getValue(null));\n        \r\n        assertEquals(raw[0], dst.getLong(10));\n        assertEquals((double) raw[0], dst.getDouble(10.0d), 0.1d);\n\n        Field<Long> dstLong = dst.as(LongField.Long);\n        assertEquals(LongStream.of(raw).boxed().collect(Collectors.toList()), dstLong.getValues());\n        assertEquals(Long.valueOf(raw[0]), dstLong.getValue(null));\n        assertEquals(raw[0], dstLong.getLong(10));\n        assertEquals((double) raw[0], dstLong.getDouble(10.0d), 0.1d);\n    }\n","date":"2021-09-16 02:55:28","endLine":73,"groupId":"101890","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testLongToBigIntegerToLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/54/e27d2ac78facf938a95526bdac1d934aca082a.src","preCode":"    public void testLongToBigIntegerToLong() {\n        long[] raw = { randomLong(), Long.MIN_VALUE, Long.MAX_VALUE, ((long) Integer.MIN_VALUE - 1), ((long) Integer.MAX_VALUE + 1),\n                       -1L, 0L, 1L };\n        Field<Long> src = new LongField(\"\", new FieldValues<Long>() {\n            @Override\n            public boolean isEmpty() {\n                return false;\n            }\n\n            @Override\n            public int size() {\n                return raw.length;\n            }\n\n            @Override\n            public List<Long> getValues() {\n                return LongStream.of(raw).boxed().collect(Collectors.toList());\n            }\n\n            @Override\n            public Long getNonPrimitiveValue() {\n                return raw[0];\n            }\n\n            @Override\n            public long getLongValue() {\n                return raw[0];\n            }\n\n            @Override\n            public double getDoubleValue() {\n                return raw[0];\n            }\n        });\n\n        Field<BigInteger> dst = src.as(Field.BigInteger);\n\n        List<BigInteger> expected = LongStream.of(raw).mapToObj(BigInteger::valueOf).collect(Collectors.toList());\n        assertEquals(expected, dst.getValues());\n        assertEquals(expected.get(0), dst.getValue(null));\n        \r\n        assertEquals(raw[0], dst.getLong(10));\n        assertEquals((double) raw[0], dst.getDouble(10.0d), 0.1d);\n\n        Field<Long> dstLong = dst.as(Field.Long);\n        assertEquals(LongStream.of(raw).boxed().collect(Collectors.toList()), dstLong.getValues());\n        assertEquals(Long.valueOf(raw[0]), dstLong.getValue(null));\n        assertEquals(raw[0], dstLong.getLong(10));\n        assertEquals((double) raw[0], dstLong.getDouble(10.0d), 0.1d);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/script/field/ConvertersTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":24,"status":"M"},{"authorDate":"2021-09-14 02:56:46","commitOrder":4,"curCode":"    public void testLongToUnsignedLong() {\n        long[] raw = { Long.MIN_VALUE, Long.MAX_VALUE, ((long) Integer.MIN_VALUE - 1), ((long) Integer.MAX_VALUE + 1), -1L, 0L, 1L };\n        Field<Long> src = new LongField(\"\", new FieldValues<Long>() {\n            @Override\n            public boolean isEmpty() {\n                return false;\n            }\n\n            @Override\n            public int size() {\n                return raw.length;\n            }\n\n            @Override\n            public List<Long> getValues() {\n                return LongStream.of(raw).boxed().collect(Collectors.toList());\n            }\n\n            @Override\n            public Long getNonPrimitiveValue() {\n                return raw[0];\n            }\n\n            @Override\n            public long getLongValue() {\n                return raw[0];\n            }\n\n            @Override\n            public double getDoubleValue() {\n                return raw[0];\n            }\n        });\n\n        Field<Long> dst = src.as(UnsignedLongField.UnsignedLong);\n        assertEquals(LongStream.of(raw).map(l -> l ^ MASK_2_63).boxed().collect(Collectors.toList()), dst.getValues());\n        assertEquals(Long.valueOf(raw[0] ^ MASK_2_63), dst.getValue(null));\n        assertEquals(raw[0] ^ MASK_2_63, dst.getLong(10));\n        assertEquals((double) (raw[0] ^ MASK_2_63), dst.getDouble(10.0d), 0.1d);\n    }\n","date":"2021-09-14 02:56:46","endLine":112,"groupId":"101890","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongToUnsignedLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/2d86a50727b89dd827161b9c9f2cbfc96f9bb0.src","preCode":"    public void testLongToUnsignedLong() {\n        long[] raw = { Long.MIN_VALUE, Long.MAX_VALUE, ((long) Integer.MIN_VALUE - 1), ((long) Integer.MAX_VALUE + 1), -1L, 0L, 1L };\n        Field<Long> src = new LongField(\"\", new FieldValues<Long>() {\n            @Override\n            public boolean isEmpty() {\n                return false;\n            }\n\n            @Override\n            public int size() {\n                return raw.length;\n            }\n\n            @Override\n            public List<Long> getValues() {\n                return LongStream.of(raw).boxed().collect(Collectors.toList());\n            }\n\n            @Override\n            public Long getNonPrimitiveValue() {\n                return raw[0];\n            }\n\n            @Override\n            public long getLongValue() {\n                return raw[0];\n            }\n\n            @Override\n            public double getDoubleValue() {\n                return raw[0];\n            }\n        });\n\n        Field<Long> dst = src.as(UnsignedLongField.UnsignedLong);\n        assertEquals(LongStream.of(raw).map(l -> l ^ MASK_2_63).boxed().collect(Collectors.toList()), dst.getValues());\n        assertEquals(Long.valueOf(raw[0] ^ MASK_2_63), dst.getValue(null));\n        assertEquals(raw[0] ^ MASK_2_63, dst.getLong(10));\n        assertEquals((double) (raw[0] ^ MASK_2_63), dst.getDouble(10.0d), 0.1d);\n    }\n","realPath":"x-pack/plugin/mapper-unsigned-long/src/test/java/org/elasticsearch/xpack/unsignedlong/UnsignedLongFieldTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"25ae1363a217b07b6369c8d463c600c9bd9c7037","commitMessage":"@@@Split up fields into different field types for Painless Fields API (#77732)\n\nThis change refactors the inner fields classes and inner converter classes into field class split by type \nfor the Painless Fields API.\n\nEach field class now contains the following:\n\n* it's own members\n* a converter that converts from other types of fields to its own type of field\n* conversion helper methods to go from its own type of field to other types of fields\n* conversion helper methods to go from its own type to other types\n","date":"2021-09-16 02:55:28","modifiedFileCount":"17","status":"M","submitter":"Jack Conradson"}]
