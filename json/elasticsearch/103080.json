[{"authorTime":"2020-11-12 22:56:04","codes":[{"authorDate":"2020-11-12 22:56:04","commitOrder":1,"curCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = new MappingLookup(Collections.emptyList(), Collections.emptyList(), Collections.emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\")), 0);\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","date":"2020-11-12 22:56:04","endLine":39,"groupId":"18568","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnlyRuntimeField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f8/307a7fdd3614abfbd12e14f97d462a6d542d48.src","preCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = new MappingLookup(Collections.emptyList(), Collections.emptyList(), Collections.emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\")), 0);\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"B"},{"authorDate":"2020-11-12 22:56:04","commitOrder":1,"curCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = new MappingLookup(Collections.singletonList(fieldMapper), Collections.emptyList(),\n            Collections.emptyList(), Collections.singletonList(new TestRuntimeField(\"test\")), 0);\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n        assertEquals(1, size(mappingLookup.fieldTypes().filter(ft -> true)));\n    }\n","date":"2020-11-12 22:56:04","endLine":50,"groupId":"18568","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRuntimeFieldLeafOverride","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f8/307a7fdd3614abfbd12e14f97d462a6d542d48.src","preCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = new MappingLookup(Collections.singletonList(fieldMapper), Collections.emptyList(),\n            Collections.emptyList(), Collections.singletonList(new TestRuntimeField(\"test\")), 0);\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n        assertEquals(1, size(mappingLookup.fieldTypes().filter(ft -> true)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"}],"commitId":"3101293165acc0db8ef0f9e499eb498a4be4d23a","commitMessage":"@@@Introduce runtime section in mappings (#62906)\n\nThe runtime section is at the same level as the existing properties section. Its purpose is to hold runtime fields only. With the introduction of the runtime section.  a runtime field can be defined by specifying its type (previously called runtime_type) and script.\n\n```\nPUT /my-index/_mappings\n{\n    \"runtime\" : {\n        \"day_of_week\" : {\n            \"type\" : \"keyword\". \n            \"script\" : {\n                \"source\" : \"emit(doc['timestamp'].value.dayOfWeekEnum.getDisplayName(TextStyle.FULL.  Locale.ROOT))\"\n            }\n        }\n    }. \n    \"properties\" : {\n        \"timestamp\" : {\n            \"type\" : \"date\"\n        }\n    }\n}\n```\n\nFields defined in the runtime section can be updated at any time as they are not present in the lucene index. They get replaced entirely when they get updated.\n\nThanks to the introduction of the runtime section.  runtime fields override existing mapped fields defined with the same name.  similarly to runtime fields defined in the search request.\n\nRelates to #59332 \n","date":"2020-11-12 22:56:04","modifiedFileCount":"51","status":"B","submitter":"Luca Cavanna"},{"authorTime":"2020-12-08 22:29:24","codes":[{"authorDate":"2020-12-08 22:29:24","commitOrder":2,"curCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = new MappingLookup(Collections.emptyList(), Collections.emptyList(), Collections.emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")), 0);\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","date":"2020-12-08 22:29:24","endLine":39,"groupId":"18568","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnlyRuntimeField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b9/18819bcd29b30449ef583c72c4e3b5533cdfed.src","preCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = new MappingLookup(Collections.emptyList(), Collections.emptyList(), Collections.emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\")), 0);\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2020-12-08 22:29:24","commitOrder":2,"curCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = new MappingLookup(Collections.singletonList(fieldMapper), Collections.emptyList(),\n            Collections.emptyList(), Collections.singletonList(new TestRuntimeField(\"test\", \"type\")), 0);\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n        assertEquals(1, size(mappingLookup.fieldTypes().filter(ft -> true)));\n    }\n","date":"2020-12-08 22:29:24","endLine":50,"groupId":"18568","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRuntimeFieldLeafOverride","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b9/18819bcd29b30449ef583c72c4e3b5533cdfed.src","preCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = new MappingLookup(Collections.singletonList(fieldMapper), Collections.emptyList(),\n            Collections.emptyList(), Collections.singletonList(new TestRuntimeField(\"test\")), 0);\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n        assertEquals(1, size(mappingLookup.fieldTypes().filter(ft -> true)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"e144471b3e607cc8b6b3c7a0e7f4706a4bdb9381","commitMessage":"@@@Introduce dynamic runtime setting (#65489)\n\nThe dynamic:runtime setting is similar to dynamic:true in that it dynamically defines fields based on values parsed from incoming documents. Though instead of defining leaf fields under properties.  it defines them as runtime fields under the runtime section. This is useful in scenarios where search speed can be traded for storage costs.  given that runtime fields are loaded at runtime rather than indexed.\n","date":"2020-12-08 22:29:24","modifiedFileCount":"31","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-12-24 02:19:02","codes":[{"authorDate":"2020-12-24 02:19:02","commitOrder":3,"curCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = new MappingLookup(\"_doc\", Collections.emptyList(), Collections.emptyList(), Collections.emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")), 0, null, false);\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","date":"2020-12-24 02:19:02","endLine":49,"groupId":"18568","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnlyRuntimeField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/09dbf842dd795def166610f789adb2d0cdf018.src","preCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = new MappingLookup(Collections.emptyList(), Collections.emptyList(), Collections.emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")), 0);\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2020-12-24 02:19:02","commitOrder":3,"curCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = new MappingLookup(\"_doc\", Collections.singletonList(fieldMapper), Collections.emptyList(),\n            Collections.emptyList(), Collections.singletonList(new TestRuntimeField(\"test\", \"type\")), 0, null, false);\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n        assertEquals(1, size(mappingLookup.fieldTypes().filter(ft -> true)));\n    }\n","date":"2020-12-24 02:19:02","endLine":60,"groupId":"18568","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRuntimeFieldLeafOverride","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/09dbf842dd795def166610f789adb2d0cdf018.src","preCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = new MappingLookup(Collections.singletonList(fieldMapper), Collections.emptyList(),\n            Collections.emptyList(), Collections.singletonList(new TestRuntimeField(\"test\", \"type\")), 0);\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n        assertEquals(1, size(mappingLookup.fieldTypes().filter(ft -> true)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"3e3152406a4fda2cebeceac3d7fdae4071ce7ea6","commitMessage":"@@@Bust the request cache when the mapping changes (#66295)\n\nThis makes sure that we only serve a hit from the request cache if it\nwas build using the same mapping and that the same mapping is used for\nthe entire \"query phase\" of the search.\n\nCloses #62033","date":"2020-12-24 02:19:02","modifiedFileCount":"41","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-01-12 18:48:51","codes":[{"authorDate":"2021-01-12 18:48:51","commitOrder":4,"curCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = createMappingLookup(emptyList(), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","date":"2021-01-12 18:48:51","endLine":60,"groupId":"18568","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnlyRuntimeField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1b/c810811b68d8bd45d41c779d78005946e40e38.src","preCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = new MappingLookup(\"_doc\", Collections.emptyList(), Collections.emptyList(), Collections.emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")), 0, null, false);\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2021-01-12 18:48:51","commitOrder":4,"curCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = createMappingLookup(Collections.singletonList(fieldMapper), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n        assertEquals(1, size(mappingLookup.fieldTypes().filter(ft -> true)));\n    }\n","date":"2021-01-12 18:48:51","endLine":71,"groupId":"18568","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRuntimeFieldLeafOverride","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1b/c810811b68d8bd45d41c779d78005946e40e38.src","preCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = new MappingLookup(\"_doc\", Collections.singletonList(fieldMapper), Collections.emptyList(),\n            Collections.emptyList(), Collections.singletonList(new TestRuntimeField(\"test\", \"type\")), 0, null, false);\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n        assertEquals(1, size(mappingLookup.fieldTypes().filter(ft -> true)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"df7041f45a83544d4db4e016d8d59a8a48e95557","commitMessage":"@@@Remove last DocumentMapper reference from MappingLookup (#67157)\n\nAs part of #66295 we made QueryShardContext perform mapping lookups through MappingLookup rather than MapperService. That helps as MapperService relies on DocumentMapper which may change througout the execution of the search request. At search time.  the percolate query also needs to parse documents.  which made us add a parse method to MappingLookup.Such parse method currently relies on calling DocumentMapper#parseDocument through a function.  but we would like to rather make this easier to follow. (see https://github.com/elastic/elasticsearch/pull/66295/files#r544639868)\n\nWe recently removed the need to provide the entire DocumentMapper to DocumentParser#parse.  opening the possibility for using DocumentParser directly when needing to parse a document at query time. This commit adds everything that is needed (namely Mapping.  IndexSettings and IndexAnalyzers) to MappingLookup so that it can parse a document through DocumentParser without relying on DocumentMapper.\n\nAs a bonus.  given that MappingLookup holds a reference to these three additional objects.  we can make DocumentMapper rely on MappingLookup to retrieve those and not hold its own same references to them.\nAlong the same lines.  given that MappingLookup holds all that's necessary to parse a document.  the signature of DocumentParser#parse can be simplified by replacing most of its arguments with MappingLookup and retrieving what is needed from it.","date":"2021-01-12 18:48:51","modifiedFileCount":"18","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-03-10 16:19:30","codes":[{"authorDate":"2021-03-10 16:19:30","commitOrder":5,"curCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = createMappingLookup(emptyList(), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypesLookup().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","date":"2021-03-10 16:19:30","endLine":52,"groupId":"18568","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnlyRuntimeField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/59/d5c4e2994bb8c8911e16df36421973f420aa33.src","preCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = createMappingLookup(emptyList(), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2021-03-10 16:19:30","commitOrder":5,"curCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = createMappingLookup(Collections.singletonList(fieldMapper), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypesLookup().get(\"test\"), instanceOf(TestRuntimeField.class));\n        assertEquals(1, size(mappingLookup.fieldTypesLookup().filter(ft -> true)));\n    }\n","date":"2021-03-10 16:19:30","endLine":63,"groupId":"18568","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRuntimeFieldLeafOverride","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/59/d5c4e2994bb8c8911e16df36421973f420aa33.src","preCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = createMappingLookup(Collections.singletonList(fieldMapper), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypes().get(\"test\"), instanceOf(TestRuntimeField.class));\n        assertEquals(1, size(mappingLookup.fieldTypes().filter(ft -> true)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"ff50da5a77eb47e3ed3abae6e1da820f082c8b0a","commitMessage":"@@@Remove the _parent_join metadata field (#70143)\n\nThis commit removes the metadata field _parent_join\nthat was needed to ensure that only one join field is used in a mapping.\nIt is replaced with a validation at the field level.\nThis change also fixes in [bug](https://github.com/elastic/kibana/issues/92960) in the handling of parent join fields in _field_caps.\nThis metadata field throws an unexpected exception in [7.11](https://github.com/elastic/elasticsearch/pull/63878)\nwhen checking if the field is aggregatable.\nThat's now fixed since this unused field has been removed.","date":"2021-03-10 16:19:30","modifiedFileCount":"16","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2021-03-27 01:29:16","codes":[{"authorDate":"2021-03-10 16:19:30","commitOrder":6,"curCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = createMappingLookup(emptyList(), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypesLookup().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","date":"2021-03-10 16:19:30","endLine":52,"groupId":"18568","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnlyRuntimeField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/59/d5c4e2994bb8c8911e16df36421973f420aa33.src","preCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = createMappingLookup(emptyList(), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypesLookup().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"},{"authorDate":"2021-03-27 01:29:16","commitOrder":6,"curCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = createMappingLookup(Collections.singletonList(fieldMapper), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypesLookup().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","date":"2021-03-27 01:29:16","endLine":62,"groupId":"18568","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRuntimeFieldLeafOverride","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/cd3285787eb5f30b7f20a5a0fdcdf743ec7aa3.src","preCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = createMappingLookup(Collections.singletonList(fieldMapper), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypesLookup().get(\"test\"), instanceOf(TestRuntimeField.class));\n        assertEquals(1, size(mappingLookup.fieldTypesLookup().filter(ft -> true)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"5c579ed70b1f58fe2b6ae53a9f0f857221503517","commitMessage":"@@@Remove FieldTypeLookup#filter method (#70919)\n\nThis is only used to fetch field types with eager global ordinals.  which can\neasily be done using other methods.  and it misses dynamic field types\nmaking it trappy to use.","date":"2021-03-27 01:29:16","modifiedFileCount":"5","status":"M","submitter":"Alan Woodward"},{"authorTime":"2021-06-17 05:31:31","codes":[{"authorDate":"2021-06-17 05:31:31","commitOrder":7,"curCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = createMappingLookup(emptyList(), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypesLookup().get(\"test\"), instanceOf(TestRuntimeField.TestRuntimeFieldType.class));\n    }\n","date":"2021-06-17 05:31:31","endLine":53,"groupId":"103080","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnlyRuntimeField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/9093cfb0e74d1f016c997dd8835d3042d173f5.src","preCode":"    public void testOnlyRuntimeField() {\n        MappingLookup mappingLookup = createMappingLookup(emptyList(), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertEquals(0, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertNull(mappingLookup.getMapper(\"test\"));\n        assertThat(mappingLookup.fieldTypesLookup().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2021-06-17 05:31:31","commitOrder":7,"curCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = createMappingLookup(Collections.singletonList(fieldMapper), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypesLookup().get(\"test\"), instanceOf(TestRuntimeField.TestRuntimeFieldType.class));\n    }\n","date":"2021-06-17 05:31:31","endLine":63,"groupId":"103080","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRuntimeFieldLeafOverride","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/9093cfb0e74d1f016c997dd8835d3042d173f5.src","preCode":"    public void testRuntimeFieldLeafOverride() {\n        MockFieldMapper fieldMapper = new MockFieldMapper(\"test\");\n        MappingLookup mappingLookup = createMappingLookup(Collections.singletonList(fieldMapper), emptyList(),\n            Collections.singletonList(new TestRuntimeField(\"test\", \"type\")));\n        assertThat(mappingLookup.getMapper(\"test\"), instanceOf(MockFieldMapper.class));\n        assertEquals(1, size(mappingLookup.fieldMappers()));\n        assertEquals(0, mappingLookup.objectMappers().size());\n        assertThat(mappingLookup.fieldTypesLookup().get(\"test\"), instanceOf(TestRuntimeField.class));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/MappingLookupTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"6a8f8f3f718bd21bf14176049c9e1f1def13463b","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-17 05:31:31","modifiedFileCount":"4429","status":"M","submitter":"Igor Motov"}]
