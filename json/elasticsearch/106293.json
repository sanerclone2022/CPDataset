[{"authorTime":"2020-06-08 23:14:45","codes":[{"authorDate":"2020-06-08 23:14:45","commitOrder":2,"curCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n\n        \r\n        \r\n        final String oldVersionSnapshot = \"old-version-snapshot\";\n        final CreateSnapshotResponse createSnapshotResponse = client().admin().cluster()\n                .prepareCreateSnapshot(repoName, oldVersionSnapshot).setIndices().setWaitForCompletion(true).get();\n        assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(), is(0));\n\n        logger.info(\"--> writing downgraded RepositoryData\");\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final XContentBuilder jsonBuilder = JsonXContent.contentBuilder();\n        repositoryData.snapshotsToXContent(jsonBuilder, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n        final RepositoryData downgradedRepoData = RepositoryData.snapshotsFromXContent(JsonXContent.jsonXContent.createParser(\n                NamedXContentRegistry.EMPTY,\n                DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                Strings.toString(jsonBuilder).replace(Version.CURRENT.toString(), SnapshotsService.OLD_SNAPSHOT_FORMAT.toString())),\n                repositoryData.getGenId(), randomBoolean());\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        downgradedRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), SnapshotsService.OLD_SNAPSHOT_FORMAT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-2\");\n    }\n","date":"2020-06-08 23:14:45","endLine":364,"groupId":"47878","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleSnapshotErrorWithBwCFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/83dc198de8679b7045f9fd6ce815c22cec2f1f.src","preCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n\n        \r\n        \r\n        final String oldVersionSnapshot = \"old-version-snapshot\";\n        final CreateSnapshotResponse createSnapshotResponse = client().admin().cluster()\n                .prepareCreateSnapshot(repoName, oldVersionSnapshot).setIndices().setWaitForCompletion(true).get();\n        assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(), is(0));\n\n        logger.info(\"--> writing downgraded RepositoryData\");\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final XContentBuilder jsonBuilder = JsonXContent.contentBuilder();\n        repositoryData.snapshotsToXContent(jsonBuilder, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n        final RepositoryData downgradedRepoData = RepositoryData.snapshotsFromXContent(JsonXContent.jsonXContent.createParser(\n                NamedXContentRegistry.EMPTY,\n                DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                Strings.toString(jsonBuilder).replace(Version.CURRENT.toString(), SnapshotsService.OLD_SNAPSHOT_FORMAT.toString())),\n                repositoryData.getGenId(), randomBoolean());\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        downgradedRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), SnapshotsService.OLD_SNAPSHOT_FORMAT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"MB"},{"authorDate":"2020-06-08 23:14:45","commitOrder":2,"curCode":"    public void testRepairBrokenShardGenerations() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n\n        \r\n        \r\n        final String oldVersionSnapshot = \"old-version-snapshot\";\n        final CreateSnapshotResponse createSnapshotResponse = client().admin().cluster()\n                .prepareCreateSnapshot(repoName, oldVersionSnapshot).setIndices().setWaitForCompletion(true).get();\n        assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(), is(0));\n\n        logger.info(\"--> writing downgraded RepositoryData\");\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final XContentBuilder jsonBuilder = JsonXContent.contentBuilder();\n        repositoryData.snapshotsToXContent(jsonBuilder, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n        final RepositoryData downgradedRepoData = RepositoryData.snapshotsFromXContent(JsonXContent.jsonXContent.createParser(\n                NamedXContentRegistry.EMPTY,\n                DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                Strings.toString(jsonBuilder).replace(Version.CURRENT.toString(), SnapshotsService.OLD_SNAPSHOT_FORMAT.toString())),\n                repositoryData.getGenId(), randomBoolean());\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        downgradedRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), SnapshotsService.OLD_SNAPSHOT_FORMAT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-1\");\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData1 = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData1.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData1.getGenId(), snapshotIds, snapshotIds.values().stream().collect(\n                Collectors.toMap(SnapshotId::getUUID, repositoryData1::getSnapshotState)),\n                snapshotIds.values().stream().collect(\n                        Collectors.toMap(SnapshotId::getUUID, repositoryData1::getVersion)),\n                repositoryData1.getIndices().values().stream().collect(\n                        Collectors.toMap(Function.identity(), repositoryData1::getSnapshots)\n                ),  ShardGenerations.builder().putAll(repositoryData1.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData1.indexMetaDataGenerations()\n        );\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData1.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-2\");\n    }\n","date":"2020-06-08 23:14:45","endLine":434,"groupId":"47878","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRepairBrokenShardGenerations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/83dc198de8679b7045f9fd6ce815c22cec2f1f.src","preCode":"    public void testRepairBrokenShardGenerations() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n\n        \r\n        \r\n        final String oldVersionSnapshot = \"old-version-snapshot\";\n        final CreateSnapshotResponse createSnapshotResponse = client().admin().cluster()\n                .prepareCreateSnapshot(repoName, oldVersionSnapshot).setIndices().setWaitForCompletion(true).get();\n        assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(), is(0));\n\n        logger.info(\"--> writing downgraded RepositoryData\");\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final XContentBuilder jsonBuilder = JsonXContent.contentBuilder();\n        repositoryData.snapshotsToXContent(jsonBuilder, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n        final RepositoryData downgradedRepoData = RepositoryData.snapshotsFromXContent(JsonXContent.jsonXContent.createParser(\n                NamedXContentRegistry.EMPTY,\n                DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                Strings.toString(jsonBuilder).replace(Version.CURRENT.toString(), SnapshotsService.OLD_SNAPSHOT_FORMAT.toString())),\n                repositoryData.getGenId(), randomBoolean());\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        downgradedRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), SnapshotsService.OLD_SNAPSHOT_FORMAT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-1\");\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData1 = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData1.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData1.getGenId(), snapshotIds, snapshotIds.values().stream().collect(\n                Collectors.toMap(SnapshotId::getUUID, repositoryData1::getSnapshotState)),\n                snapshotIds.values().stream().collect(\n                        Collectors.toMap(SnapshotId::getUUID, repositoryData1::getVersion)),\n                repositoryData1.getIndices().values().stream().collect(\n                        Collectors.toMap(Function.identity(), repositoryData1::getSnapshots)\n                ),  ShardGenerations.builder().putAll(repositoryData1.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData1.indexMetaDataGenerations()\n        );\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData1.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"B"}],"commitId":"db09e803ddbdea3dd7f3a03b2e5a7093a1a35805","commitMessage":"@@@Fix Broken Numeric Shard Generations in RepositoryData (#57813)\n\nFix broken numeric shard generations when reading them from the wire\nor physically from the physical repository.\nThis should be the cheapest way to clean up broken shard generations\nin a BwC and safe-to-backport manner for now. We can potentially\nfurther optimize this by also not doing the checks on the generations\nbased on the versions we see in the `RepositoryData` but I don't think\nit matters much since we will read `RepositoryData` from cache in almost\nall cases.\n\nCloses #57798","date":"2020-06-08 23:14:45","modifiedFileCount":"6","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-06-10 16:44:19","codes":[{"authorDate":"2020-06-10 16:44:19","commitOrder":3,"curCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-2\");\n    }\n","date":"2020-06-10 16:44:19","endLine":335,"groupId":"47878","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleSnapshotErrorWithBwCFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/71/e4deee38d7681d4534d631c7bde90d1ba9e928.src","preCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n\n        \r\n        \r\n        final String oldVersionSnapshot = \"old-version-snapshot\";\n        final CreateSnapshotResponse createSnapshotResponse = client().admin().cluster()\n                .prepareCreateSnapshot(repoName, oldVersionSnapshot).setIndices().setWaitForCompletion(true).get();\n        assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(), is(0));\n\n        logger.info(\"--> writing downgraded RepositoryData\");\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final XContentBuilder jsonBuilder = JsonXContent.contentBuilder();\n        repositoryData.snapshotsToXContent(jsonBuilder, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n        final RepositoryData downgradedRepoData = RepositoryData.snapshotsFromXContent(JsonXContent.jsonXContent.createParser(\n                NamedXContentRegistry.EMPTY,\n                DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                Strings.toString(jsonBuilder).replace(Version.CURRENT.toString(), SnapshotsService.OLD_SNAPSHOT_FORMAT.toString())),\n                repositoryData.getGenId(), randomBoolean());\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        downgradedRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), SnapshotsService.OLD_SNAPSHOT_FORMAT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"},{"authorDate":"2020-06-10 16:44:19","commitOrder":3,"curCode":"    public void testRepairBrokenShardGenerations() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-1\");\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData1 = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData1.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData1.getGenId(), snapshotIds, snapshotIds.values().stream().collect(\n                Collectors.toMap(SnapshotId::getUUID, repositoryData1::getSnapshotState)),\n                snapshotIds.values().stream().collect(\n                        Collectors.toMap(SnapshotId::getUUID, repositoryData1::getVersion)),\n                repositoryData1.getIndices().values().stream().collect(\n                        Collectors.toMap(Function.identity(), repositoryData1::getSnapshots)\n                ),  ShardGenerations.builder().putAll(repositoryData1.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData1.indexMetaDataGenerations()\n        );\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData1.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-2\");\n    }\n","date":"2020-06-10 16:44:19","endLine":385,"groupId":"47878","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRepairBrokenShardGenerations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/71/e4deee38d7681d4534d631c7bde90d1ba9e928.src","preCode":"    public void testRepairBrokenShardGenerations() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n\n        \r\n        \r\n        final String oldVersionSnapshot = \"old-version-snapshot\";\n        final CreateSnapshotResponse createSnapshotResponse = client().admin().cluster()\n                .prepareCreateSnapshot(repoName, oldVersionSnapshot).setIndices().setWaitForCompletion(true).get();\n        assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(), is(0));\n\n        logger.info(\"--> writing downgraded RepositoryData\");\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final XContentBuilder jsonBuilder = JsonXContent.contentBuilder();\n        repositoryData.snapshotsToXContent(jsonBuilder, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n        final RepositoryData downgradedRepoData = RepositoryData.snapshotsFromXContent(JsonXContent.jsonXContent.createParser(\n                NamedXContentRegistry.EMPTY,\n                DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                Strings.toString(jsonBuilder).replace(Version.CURRENT.toString(), SnapshotsService.OLD_SNAPSHOT_FORMAT.toString())),\n                repositoryData.getGenId(), randomBoolean());\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        downgradedRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), SnapshotsService.OLD_SNAPSHOT_FORMAT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-1\");\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData1 = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData1.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData1.getGenId(), snapshotIds, snapshotIds.values().stream().collect(\n                Collectors.toMap(SnapshotId::getUUID, repositoryData1::getSnapshotState)),\n                snapshotIds.values().stream().collect(\n                        Collectors.toMap(SnapshotId::getUUID, repositoryData1::getVersion)),\n                repositoryData1.getIndices().values().stream().collect(\n                        Collectors.toMap(Function.identity(), repositoryData1::getSnapshots)\n                ),  ShardGenerations.builder().putAll(repositoryData1.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData1.indexMetaDataGenerations()\n        );\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData1.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"}],"commitId":"f3b53d9dfed0dbca1ff10194ca0d433494ec6701","commitMessage":"@@@Improve Test Coverage for Old Repository Metadata Formats (#57915)\n\nUse the the hack used in `CorruptedBlobStoreRepositoryIT` in more snapshot\nfailure tests to verify that BwC repository metadata is handled properly\nin these so far not-test-covered scenarios.\nAlso.  some minor related dry-up of snapshot tests.\n\nRelates #57798","date":"2020-06-10 16:44:19","modifiedFileCount":"5","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-07-06 16:42:47","codes":[{"authorDate":"2020-07-06 16:42:47","commitOrder":4,"curCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2020-07-06 16:42:47","endLine":322,"groupId":"67600","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleSnapshotErrorWithBwCFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e0/c00fb8079fcfa9dab1529d8979811d88f6a2dc.src","preCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"},{"authorDate":"2020-07-06 16:42:47","commitOrder":4,"curCode":"    public void testRepairBrokenShardGenerations() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData1 = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData1.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData1.getGenId(), snapshotIds, snapshotIds.values().stream().collect(\n                Collectors.toMap(SnapshotId::getUUID, repositoryData1::getSnapshotState)),\n                snapshotIds.values().stream().collect(\n                        Collectors.toMap(SnapshotId::getUUID, repositoryData1::getVersion)),\n                repositoryData1.getIndices().values().stream().collect(\n                        Collectors.toMap(Function.identity(), repositoryData1::getSnapshots)\n                ),  ShardGenerations.builder().putAll(repositoryData1.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData1.indexMetaDataGenerations()\n        );\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData1.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2020-07-06 16:42:47","endLine":372,"groupId":"47878","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRepairBrokenShardGenerations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e0/c00fb8079fcfa9dab1529d8979811d88f6a2dc.src","preCode":"    public void testRepairBrokenShardGenerations() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-1\");\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData1 = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData1.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData1.getGenId(), snapshotIds, snapshotIds.values().stream().collect(\n                Collectors.toMap(SnapshotId::getUUID, repositoryData1::getSnapshotState)),\n                snapshotIds.values().stream().collect(\n                        Collectors.toMap(SnapshotId::getUUID, repositoryData1::getVersion)),\n                repositoryData1.getIndices().values().stream().collect(\n                        Collectors.toMap(Function.identity(), repositoryData1::getSnapshots)\n                ),  ShardGenerations.builder().putAll(repositoryData1.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData1.indexMetaDataGenerations()\n        );\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData1.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        assertCreateSnapshotSuccess(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"}],"commitId":"2ba8e2e98bf4b7c54929c0a19046deba61951817","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-06 16:42:47","modifiedFileCount":"330","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-09-18 21:51:56","codes":[{"authorDate":"2020-09-18 21:51:56","commitOrder":5,"curCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException, ExecutionException, InterruptedException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2020-09-18 21:51:56","endLine":320,"groupId":"67600","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleSnapshotErrorWithBwCFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/d6ba09bbd11e7ff149e8f9e9580a18f337b5a8.src","preCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"},{"authorDate":"2020-09-18 21:51:56","commitOrder":5,"curCode":"    public void testRepairBrokenShardGenerations() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData1 = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData1.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData1.getGenId(), snapshotIds, snapshotIds.values().stream().collect(\n                Collectors.toMap(SnapshotId::getUUID, repositoryData1::getSnapshotState)),\n                snapshotIds.values().stream().collect(\n                        Collectors.toMap(SnapshotId::getUUID, repositoryData1::getVersion)),\n                repositoryData1.getIndices().values().stream().collect(\n                        Collectors.toMap(Function.identity(), repositoryData1::getSnapshots)\n                ),  ShardGenerations.builder().putAll(repositoryData1.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData1.indexMetaDataGenerations()\n        );\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData1.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2020-09-18 21:51:56","endLine":369,"groupId":"47878","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRepairBrokenShardGenerations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/d6ba09bbd11e7ff149e8f9e9580a18f337b5a8.src","preCode":"    public void testRepairBrokenShardGenerations() throws IOException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        logger.info(\"--> delete old version snapshot\");\n        client().admin().cluster().prepareDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData1 = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData1.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData1.getGenId(), snapshotIds, snapshotIds.values().stream().collect(\n                Collectors.toMap(SnapshotId::getUUID, repositoryData1::getSnapshotState)),\n                snapshotIds.values().stream().collect(\n                        Collectors.toMap(SnapshotId::getUUID, repositoryData1::getVersion)),\n                repositoryData1.getIndices().values().stream().collect(\n                        Collectors.toMap(Function.identity(), repositoryData1::getSnapshots)\n                ),  ShardGenerations.builder().putAll(repositoryData1.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData1.indexMetaDataGenerations()\n        );\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData1.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"M"}],"commitId":"1b8547e5766f7acb1bbf1b255c1448e1bc85f43e","commitMessage":"@@@Dry up Snapshot IT Infrastructure (#62578)\n\nMainly just shortening the diff of #61839 here by moving test utilities\nto the abstract test case.\nAlso.  making use of the now available functionality to simplify existing tests\nand improve logging in them.\n","date":"2020-09-18 21:51:56","modifiedFileCount":"6","status":"M","submitter":"Armin Braun"},{"authorTime":"2021-01-21 02:16:05","codes":[{"authorDate":"2020-09-18 21:51:56","commitOrder":6,"curCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException, ExecutionException, InterruptedException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2020-09-18 21:51:56","endLine":320,"groupId":"67600","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleSnapshotErrorWithBwCFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/d6ba09bbd11e7ff149e8f9e9580a18f337b5a8.src","preCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException, ExecutionException, InterruptedException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"N"},{"authorDate":"2021-01-21 02:16:05","commitOrder":6,"curCode":"    public void testRepairBrokenShardGenerations() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData.getGenId(),\n                snapshotIds,\n                snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getSnapshotState)),\n                snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getVersion)),\n                repositoryData.getIndices().values().stream().collect(Collectors.toMap(Function.identity(), repositoryData::getSnapshots)),\n                ShardGenerations.builder().putAll(repositoryData.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData.indexMetaDataGenerations());\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2021-01-21 02:16:05","endLine":356,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRepairBrokenShardGenerations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/35b0e2d71dba4b25c43e8df0f45626fad57da2.src","preCode":"    public void testRepairBrokenShardGenerations() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData1 = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData1.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData1.getGenId(), snapshotIds, snapshotIds.values().stream().collect(\n                Collectors.toMap(SnapshotId::getUUID, repositoryData1::getSnapshotState)),\n                snapshotIds.values().stream().collect(\n                        Collectors.toMap(SnapshotId::getUUID, repositoryData1::getVersion)),\n                repositoryData1.getIndices().values().stream().collect(\n                        Collectors.toMap(Function.identity(), repositoryData1::getSnapshots)\n                ),  ShardGenerations.builder().putAll(repositoryData1.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData1.indexMetaDataGenerations()\n        );\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData1.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"M"}],"commitId":"86b600da7c4738fb7c2c61ba92c7411f578514eb","commitMessage":"@@@Reformat some RepositoryData code (#67775)\n\nSplit this out from another branch that makes more meaningful changes. \nto get the trivial stuff out of the way first.","date":"2021-01-21 02:16:05","modifiedFileCount":"6","status":"M","submitter":"David Turner"},{"authorTime":"2021-01-25 20:17:52","codes":[{"authorDate":"2020-09-18 21:51:56","commitOrder":7,"curCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException, ExecutionException, InterruptedException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2020-09-18 21:51:56","endLine":320,"groupId":"67600","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleSnapshotErrorWithBwCFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/d6ba09bbd11e7ff149e8f9e9580a18f337b5a8.src","preCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException, ExecutionException, InterruptedException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"N"},{"authorDate":"2021-01-25 20:17:52","commitOrder":7,"curCode":"    public void testRepairBrokenShardGenerations() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData.getUuid(),\n                repositoryData.getGenId(),\n                snapshotIds,\n                snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getSnapshotState)),\n                snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getVersion)),\n                repositoryData.getIndices().values().stream().collect(Collectors.toMap(Function.identity(), repositoryData::getSnapshots)),\n                ShardGenerations.builder().putAll(repositoryData.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData.indexMetaDataGenerations());\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2021-01-25 20:17:52","endLine":360,"groupId":"53864","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRepairBrokenShardGenerations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1b/308afaf63aeea2cf3ecd464274f2288fe9735b.src","preCode":"    public void testRepairBrokenShardGenerations() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData.getGenId(),\n                snapshotIds,\n                snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getSnapshotState)),\n                snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getVersion)),\n                repositoryData.getIndices().values().stream().collect(Collectors.toMap(Function.identity(), repositoryData::getSnapshots)),\n                ShardGenerations.builder().putAll(repositoryData.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData.indexMetaDataGenerations());\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"}],"commitId":"e5a15d4fcb2a4eff0ecfa54168e992217ab5d409","commitMessage":"@@@Introduce repository UUIDs (#67829)\n\nToday a snapshot repository does not have a well-defined identity. It\ncan be reregistered with a different cluster under a different name.  and\ncan even be registered with multiple clusters in readonly mode.\n\nThis presents problems for cases where we need to refer to a specific\nsnapshot in a globally-unique fashion. Today we rely on the repository\nbeing registered under the same name on every cluster.  but this is not a\nsafe assumption.\n\nThis commit adds a UUID that can be used to uniquely identify a\nrepository. The UUID is stored in the top-level index blob.  represented\nby `RepositoryData`.  and is also usually copied into the\n`RepositoryMetadata` that represents the repository in the cluster\nstate. The repository UUID is exposed in the get-repositories API; other\nmore meaningful consumers will be added in due course.","date":"2021-01-25 20:17:52","modifiedFileCount":"20","status":"M","submitter":"David Turner"},{"authorTime":"2021-01-28 19:38:15","codes":[{"authorDate":"2020-09-18 21:51:56","commitOrder":8,"curCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException, ExecutionException, InterruptedException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2020-09-18 21:51:56","endLine":320,"groupId":"67600","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleSnapshotErrorWithBwCFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/d6ba09bbd11e7ff149e8f9e9580a18f337b5a8.src","preCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException, ExecutionException, InterruptedException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"N"},{"authorDate":"2021-01-28 19:38:15","commitOrder":8,"curCode":"    public void testRepairBrokenShardGenerations() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData.getUuid(),\n                repositoryData.getGenId(),\n                snapshotIds,\n                snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getSnapshotState)),\n                snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getVersion)),\n                repositoryData.getIndices().values().stream().collect(Collectors.toMap(Function.identity(), repositoryData::getSnapshots)),\n                ShardGenerations.builder().putAll(repositoryData.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData.indexMetaDataGenerations(), repositoryData.getClusterUUID());\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2021-01-28 19:38:15","endLine":362,"groupId":"53864","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRepairBrokenShardGenerations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c0/65fef3cb15c29c89129943af758e8588e69c27.src","preCode":"    public void testRepairBrokenShardGenerations() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData.getUuid(),\n                repositoryData.getGenId(),\n                snapshotIds,\n                snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getSnapshotState)),\n                snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getVersion)),\n                repositoryData.getIndices().values().stream().collect(Collectors.toMap(Function.identity(), repositoryData::getSnapshots)),\n                ShardGenerations.builder().putAll(repositoryData.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData.indexMetaDataGenerations());\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"}],"commitId":"77162071f59b9dcc3b8a748ca39f5c2725905dbd","commitMessage":"@@@Add ClusterUUID to RepositoryData (#68002)\n\nRecord the clusterUUID of the last cluster to write\nto a repository in the `RepositoryData` and use it for more\nmeaningful logging when running into a concurrent modification\nissue.\n","date":"2021-01-28 19:38:15","modifiedFileCount":"12","status":"M","submitter":"Armin Braun"},{"authorTime":"2021-04-27 19:31:29","codes":[{"authorDate":"2020-09-18 21:51:56","commitOrder":9,"curCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException, ExecutionException, InterruptedException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2020-09-18 21:51:56","endLine":320,"groupId":"67600","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleSnapshotErrorWithBwCFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/d6ba09bbd11e7ff149e8f9e9580a18f337b5a8.src","preCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException, ExecutionException, InterruptedException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"N"},{"authorDate":"2021-04-27 19:31:29","commitOrder":9,"curCode":"    public void testRepairBrokenShardGenerations() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData.getUuid(),\n                repositoryData.getGenId(),\n                snapshotIds,\n                snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getSnapshotDetails)),\n                repositoryData.getIndices().values().stream().collect(Collectors.toMap(Function.identity(), repositoryData::getSnapshots)),\n                ShardGenerations.builder().putAll(repositoryData.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData.indexMetaDataGenerations(), repositoryData.getClusterUUID());\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2021-04-27 19:31:29","endLine":349,"groupId":"42998","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testRepairBrokenShardGenerations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/20/49b82c623e8768f7d09d70d40f9b48869a2f37.src","preCode":"    public void testRepairBrokenShardGenerations() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds =\n                repositoryData.getSnapshotIds().stream().collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n                repositoryData.getUuid(),\n                repositoryData.getGenId(),\n                snapshotIds,\n                snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getSnapshotState)),\n                snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getVersion)),\n                repositoryData.getIndices().values().stream().collect(Collectors.toMap(Function.identity(), repositoryData::getSnapshots)),\n                ShardGenerations.builder().putAll(repositoryData.shardGenerations()).put(indexId, 0, \"0\").build(),\n                repositoryData.indexMetaDataGenerations(), repositoryData.getClusterUUID());\n        Files.write(repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n                BytesReference.toBytes(BytesReference.bytes(\n                        brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))),\n                StandardOpenOption.TRUNCATE_EXISTING);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"}],"commitId":"cf360cefb68002fb5871d879f3a07643209904dc","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-27 19:31:29","modifiedFileCount":"260","status":"M","submitter":"iverase"},{"authorTime":"2021-08-04 19:00:33","codes":[{"authorDate":"2020-09-18 21:51:56","commitOrder":10,"curCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException, ExecutionException, InterruptedException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2020-09-18 21:51:56","endLine":320,"groupId":"67600","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleSnapshotErrorWithBwCFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/d6ba09bbd11e7ff149e8f9e9580a18f337b5a8.src","preCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException, ExecutionException, InterruptedException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"N"},{"authorDate":"2021-08-04 19:00:33","commitOrder":10,"curCode":"    public void testRepairBrokenShardGenerations() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds = repositoryData.getSnapshotIds()\n            .stream()\n            .collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n            repositoryData.getUuid(),\n            repositoryData.getGenId(),\n            snapshotIds,\n            snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getSnapshotDetails)),\n            repositoryData.getIndices().values().stream().collect(Collectors.toMap(Function.identity(), repositoryData::getSnapshots)),\n            ShardGenerations.builder().putAll(repositoryData.shardGenerations()).put(indexId, 0, new ShardGeneration(0L)).build(),\n            repositoryData.indexMetaDataGenerations(),\n            repositoryData.getClusterUUID()\n        );\n        Files.write(\n            repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n            BytesReference.toBytes(\n                BytesReference.bytes(brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))\n            ),\n            StandardOpenOption.TRUNCATE_EXISTING\n        );\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2021-08-04 19:00:33","endLine":451,"groupId":"42998","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testRepairBrokenShardGenerations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/21/9b72516493f493c7c8eb3f43f963953fa330c4.src","preCode":"    public void testRepairBrokenShardGenerations() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds = repositoryData.getSnapshotIds()\n            .stream()\n            .collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n            repositoryData.getUuid(),\n            repositoryData.getGenId(),\n            snapshotIds,\n            snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getSnapshotDetails)),\n            repositoryData.getIndices().values().stream().collect(Collectors.toMap(Function.identity(), repositoryData::getSnapshots)),\n            ShardGenerations.builder().putAll(repositoryData.shardGenerations()).put(indexId, 0, \"0\").build(),\n            repositoryData.indexMetaDataGenerations(),\n            repositoryData.getClusterUUID()\n        );\n        Files.write(\n            repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n            BytesReference.toBytes(\n                BytesReference.bytes(brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))\n            ),\n            StandardOpenOption.TRUNCATE_EXISTING\n        );\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"}],"commitId":"4441b66c26d5fe85d809f1213f2e8683c15eec86","commitMessage":"@@@Replace String shard gen with ShardGeneration (#75927)\n\nToday we use Strings for lots of different things when manipulating\nsnapshots; one crucial such thing is a shard generation. We're not very\nconsistent about naming the variables containing these things.  and have\nother kinds of generation in use.  so it takes extra effort to track\nshard generations through the code. This commit introduces a\n`ShardGeneration` class to encapsulate just those strings that are used\nas shard generations.","date":"2021-08-04 19:00:33","modifiedFileCount":"30","status":"M","submitter":"David Turner"},{"authorTime":"2021-08-31 21:28:57","codes":[{"authorDate":"2021-08-31 21:28:57","commitOrder":11,"curCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2021-08-31 21:28:57","endLine":392,"groupId":"106293","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"testHandleSnapshotErrorWithBwCFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5f/497ebf7b125a1dfdf96d7eb476084e4b3d015e.src","preCode":"    public void testHandleSnapshotErrorWithBwCFormat() throws IOException, ExecutionException, InterruptedException {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        \r\n        \r\n        logger.info(\"--> move shard level metadata to new generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"1\"));\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":369,"status":"M"},{"authorDate":"2021-08-31 21:28:57","commitOrder":11,"curCode":"    public void testRepairBrokenShardGenerations() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds = repositoryData.getSnapshotIds()\n            .stream()\n            .collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n            repositoryData.getUuid(),\n            repositoryData.getGenId(),\n            snapshotIds,\n            snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getSnapshotDetails)),\n            repositoryData.getIndices().values().stream().collect(Collectors.toMap(Function.identity(), repositoryData::getSnapshots)),\n            ShardGenerations.builder().putAll(repositoryData.shardGenerations()).put(indexId, 0, new ShardGeneration(0L)).build(),\n            repositoryData.indexMetaDataGenerations(),\n            repositoryData.getClusterUUID()\n        );\n        Files.write(\n            repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n            BytesReference.toBytes(\n                BytesReference.bytes(brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))\n            ),\n            StandardOpenOption.TRUNCATE_EXISTING\n        );\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","date":"2021-08-31 21:28:57","endLine":441,"groupId":"106293","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"testRepairBrokenShardGenerations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5f/497ebf7b125a1dfdf96d7eb476084e4b3d015e.src","preCode":"    public void testRepairBrokenShardGenerations() throws Exception {\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"fs\", repoPath);\n        final String oldVersionSnapshot = initWithSnapshotVersion(repoName, repoPath, SnapshotsService.OLD_SNAPSHOT_FORMAT);\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        final String indexName = \"test-index\";\n        createIndex(indexName);\n\n        createFullSnapshot(repoName, \"snapshot-1\");\n\n        startDeleteSnapshot(repoName, oldVersionSnapshot).get();\n\n        logger.info(\"--> move shard level metadata to new generation and make RepositoryData point at an older generation\");\n        final IndexId indexId = getRepositoryData(repoName).resolveIndexId(indexName);\n        final Path shardPath = repoPath.resolve(\"indices\").resolve(indexId.getId()).resolve(\"0\");\n        final Path initialShardMetaPath = shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + \"0\");\n        assertFileExists(initialShardMetaPath);\n        Files.move(initialShardMetaPath, shardPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + randomIntBetween(1, 1000)));\n\n        final RepositoryData repositoryData = getRepositoryData(repoName);\n        final Map<String, SnapshotId> snapshotIds = repositoryData.getSnapshotIds()\n            .stream()\n            .collect(Collectors.toMap(SnapshotId::getUUID, Function.identity()));\n        final RepositoryData brokenRepoData = new RepositoryData(\n            repositoryData.getUuid(),\n            repositoryData.getGenId(),\n            snapshotIds,\n            snapshotIds.values().stream().collect(Collectors.toMap(SnapshotId::getUUID, repositoryData::getSnapshotDetails)),\n            repositoryData.getIndices().values().stream().collect(Collectors.toMap(Function.identity(), repositoryData::getSnapshots)),\n            ShardGenerations.builder().putAll(repositoryData.shardGenerations()).put(indexId, 0, new ShardGeneration(0L)).build(),\n            repositoryData.indexMetaDataGenerations(),\n            repositoryData.getClusterUUID()\n        );\n        Files.write(\n            repoPath.resolve(BlobStoreRepository.INDEX_FILE_PREFIX + repositoryData.getGenId()),\n            BytesReference.toBytes(\n                BytesReference.bytes(brokenRepoData.snapshotsToXContent(XContentFactory.jsonBuilder(), Version.CURRENT))\n            ),\n            StandardOpenOption.TRUNCATE_EXISTING\n        );\n\n        logger.info(\"--> recreating repository to clear caches\");\n        client().admin().cluster().prepareDeleteRepository(repoName).get();\n        createRepository(repoName, \"fs\", repoPath);\n\n        createFullSnapshot(repoName, \"snapshot-2\");\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/CorruptedBlobStoreRepositoryIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"}],"commitId":"f89eda5f9d89fa6b197dd00cb1dd700b78880887","commitMessage":"@@@Fix Snapshot BwC Version Randomization Behavior (#77057)\n\nThe randomization of the repo version often wasn't used because of the repository cache.\nForce re-creating the repository every time we manually mess with the versions.","date":"2021-08-31 21:28:57","modifiedFileCount":"4","status":"M","submitter":"Armin Braun"}]
