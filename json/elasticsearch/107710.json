[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static List<String> getWordList(Environment env, Settings settings, String settingPrefix) {\n        String wordListPath = settings.get(settingPrefix + \"_path\", null);\n\n        if (wordListPath == null) {\n            List<String> explicitWordList = settings.getAsList(settingPrefix, null);\n            if (explicitWordList == null) {\n                return null;\n            } else {\n                return explicitWordList;\n            }\n        }\n\n        final Path path = env.configFile().resolve(wordListPath);\n\n        try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {\n            return loadWordList(reader, \"#\");\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s_path: %s - files must be UTF-8 encoded\",\n                settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":248,"groupId":"44451","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getWordList","params":"(Environmentenv@Settingssettings@StringsettingPrefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/36703f6418e935db0d0374cb20e25bedeeda2c.src","preCode":"    public static List<String> getWordList(Environment env, Settings settings, String settingPrefix) {\n        String wordListPath = settings.get(settingPrefix + \"_path\", null);\n\n        if (wordListPath == null) {\n            List<String> explicitWordList = settings.getAsList(settingPrefix, null);\n            if (explicitWordList == null) {\n                return null;\n            } else {\n                return explicitWordList;\n            }\n        }\n\n        final Path path = env.configFile().resolve(wordListPath);\n\n        try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {\n            return loadWordList(reader, \"#\");\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s_path: %s - files must be UTF-8 encoded\",\n                settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/analysis/Analysis.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static Reader getReaderFromFile(Environment env, Settings settings, String settingPrefix) {\n        String filePath = settings.get(settingPrefix, null);\n\n        if (filePath == null) {\n            return null;\n        }\n        final Path path = env.configFile().resolve(filePath);\n        try {\n            return Files.newBufferedReader(path, StandardCharsets.UTF_8);\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s_path: %s files must be UTF-8 encoded\",\n                settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":298,"groupId":"22021","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getReaderFromFile","params":"(Environmentenv@Settingssettings@StringsettingPrefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/36703f6418e935db0d0374cb20e25bedeeda2c.src","preCode":"    public static Reader getReaderFromFile(Environment env, Settings settings, String settingPrefix) {\n        String filePath = settings.get(settingPrefix, null);\n\n        if (filePath == null) {\n            return null;\n        }\n        final Path path = env.configFile().resolve(filePath);\n        try {\n            return Files.newBufferedReader(path, StandardCharsets.UTF_8);\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s_path: %s files must be UTF-8 encoded\",\n                settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/analysis/Analysis.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-05-29 16:47:43","commitOrder":2,"curCode":"    public static List<String> getWordList(Environment env, Settings settings, String settingPrefix) {\n        String wordListPath = settings.get(settingPrefix + \"_path\", null);\n\n        if (wordListPath == null) {\n            List<String> explicitWordList = settings.getAsList(settingPrefix, null);\n            if (explicitWordList == null) {\n                return null;\n            } else {\n                return explicitWordList;\n            }\n        }\n\n        final Path path = env.configFile().resolve(wordListPath);\n\n        try {\n            return loadWordList(path, \"#\");\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s_path: %s - files must be UTF-8 encoded\",\n                settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","date":"2018-05-29 16:47:43","endLine":248,"groupId":"44451","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getWordList","params":"(Environmentenv@Settingssettings@StringsettingPrefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d5/6b8820e9b1cbdeb7bc266fe3cf3a02d2977448.src","preCode":"    public static List<String> getWordList(Environment env, Settings settings, String settingPrefix) {\n        String wordListPath = settings.get(settingPrefix + \"_path\", null);\n\n        if (wordListPath == null) {\n            List<String> explicitWordList = settings.getAsList(settingPrefix, null);\n            if (explicitWordList == null) {\n                return null;\n            } else {\n                return explicitWordList;\n            }\n        }\n\n        final Path path = env.configFile().resolve(wordListPath);\n\n        try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {\n            return loadWordList(reader, \"#\");\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s_path: %s - files must be UTF-8 encoded\",\n                settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/analysis/Analysis.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public static Reader getReaderFromFile(Environment env, Settings settings, String settingPrefix) {\n        String filePath = settings.get(settingPrefix, null);\n\n        if (filePath == null) {\n            return null;\n        }\n        final Path path = env.configFile().resolve(filePath);\n        try {\n            return Files.newBufferedReader(path, StandardCharsets.UTF_8);\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s_path: %s files must be UTF-8 encoded\",\n                settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":298,"groupId":"22021","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getReaderFromFile","params":"(Environmentenv@Settingssettings@StringsettingPrefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/36703f6418e935db0d0374cb20e25bedeeda2c.src","preCode":"    public static Reader getReaderFromFile(Environment env, Settings settings, String settingPrefix) {\n        String filePath = settings.get(settingPrefix, null);\n\n        if (filePath == null) {\n            return null;\n        }\n        final Path path = env.configFile().resolve(filePath);\n        try {\n            return Files.newBufferedReader(path, StandardCharsets.UTF_8);\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s_path: %s files must be UTF-8 encoded\",\n                settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/analysis/Analysis.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"N"}],"commitId":"2ccb4df00512e19734f3e5ef003302f336752624","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-29 16:47:43","modifiedFileCount":"42","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-12-07 22:26:08","commitOrder":3,"curCode":"    public static List<String> getWordList(Environment env, Settings settings, String settingPath, String settingList) {\n        String wordListPath = settings.get(settingPath, null);\n\n        if (wordListPath == null) {\n            List<String> explicitWordList = settings.getAsList(settingList, null);\n            if (explicitWordList == null) {\n                return null;\n            } else {\n                return explicitWordList;\n            }\n        }\n\n        final Path path = env.configFile().resolve(wordListPath);\n\n        try {\n            return loadWordList(path, \"#\");\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s: %s - files must be UTF-8 encoded\",\n                settingPath, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s: %s\", settingPath, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","date":"2018-12-07 22:26:08","endLine":259,"groupId":"3879","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getWordList","params":"(Environmentenv@Settingssettings@StringsettingPath@StringsettingList)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/09/a87124110b303ed8b392428ee257a7288cb5f0.src","preCode":"    public static List<String> getWordList(Environment env, Settings settings, String settingPrefix) {\n        String wordListPath = settings.get(settingPrefix + \"_path\", null);\n\n        if (wordListPath == null) {\n            List<String> explicitWordList = settings.getAsList(settingPrefix, null);\n            if (explicitWordList == null) {\n                return null;\n            } else {\n                return explicitWordList;\n            }\n        }\n\n        final Path path = env.configFile().resolve(wordListPath);\n\n        try {\n            return loadWordList(path, \"#\");\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s_path: %s - files must be UTF-8 encoded\",\n                settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/analysis/Analysis.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"    public static Reader getReaderFromFile(Environment env, Settings settings, String settingPrefix) {\n        String filePath = settings.get(settingPrefix, null);\n\n        if (filePath == null) {\n            return null;\n        }\n        final Path path = env.configFile().resolve(filePath);\n        try {\n            return Files.newBufferedReader(path, StandardCharsets.UTF_8);\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s_path: %s files must be UTF-8 encoded\",\n                settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":298,"groupId":"22021","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getReaderFromFile","params":"(Environmentenv@Settingssettings@StringsettingPrefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/36703f6418e935db0d0374cb20e25bedeeda2c.src","preCode":"    public static Reader getReaderFromFile(Environment env, Settings settings, String settingPrefix) {\n        String filePath = settings.get(settingPrefix, null);\n\n        if (filePath == null) {\n            return null;\n        }\n        final Path path = env.configFile().resolve(filePath);\n        try {\n            return Files.newBufferedReader(path, StandardCharsets.UTF_8);\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s_path: %s files must be UTF-8 encoded\",\n                settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/analysis/Analysis.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"N"}],"commitId":"a53e8653f292b9a4ff37bdee1f9d535b82c546e7","commitMessage":"@@@Add support for inlined user dictionary in Nori (#36123)\n\nAdd support for inlined user dictionary in Nori\n\nThis change adds a new option called `user_dictionary_rules` to the\nNori a tokenizer`. It can be used to set additional tokenization rules\nto the Korean tokenizer directly in the settings (instead of using a file).\n\nCloses #35842","date":"2018-12-07 22:26:08","modifiedFileCount":"3","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2019-08-20 21:06:01","commitOrder":4,"curCode":"    public static List<String> getWordList(Environment env, Settings settings,\n                                           String settingPath, String settingList, boolean removeComments) {\n        String wordListPath = settings.get(settingPath, null);\n\n        if (wordListPath == null) {\n            List<String> explicitWordList = settings.getAsList(settingList, null);\n            if (explicitWordList == null) {\n                return null;\n            } else {\n                return explicitWordList;\n            }\n        }\n\n        final Path path = env.configFile().resolve(wordListPath);\n\n        try {\n            return loadWordList(path, removeComments);\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s: %s - files must be UTF-8 encoded\",\n                settingPath, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s: %s\", settingPath, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","date":"2019-08-20 21:06:01","endLine":254,"groupId":"107710","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getWordList","params":"(Environmentenv@Settingssettings@StringsettingPath@StringsettingList@booleanremoveComments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/01/b3e97af5988c171d362086d5d59f725e0ed7c9.src","preCode":"    public static List<String> getWordList(Environment env, Settings settings, String settingPath, String settingList) {\n        String wordListPath = settings.get(settingPath, null);\n\n        if (wordListPath == null) {\n            List<String> explicitWordList = settings.getAsList(settingList, null);\n            if (explicitWordList == null) {\n                return null;\n            } else {\n                return explicitWordList;\n            }\n        }\n\n        final Path path = env.configFile().resolve(wordListPath);\n\n        try {\n            return loadWordList(path, \"#\");\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s: %s - files must be UTF-8 encoded\",\n                settingPath, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s: %s\", settingPath, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/analysis/Analysis.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":4,"curCode":"    public static Reader getReaderFromFile(Environment env, Settings settings, String settingPrefix) {\n        String filePath = settings.get(settingPrefix, null);\n\n        if (filePath == null) {\n            return null;\n        }\n        final Path path = env.configFile().resolve(filePath);\n        try {\n            return Files.newBufferedReader(path, StandardCharsets.UTF_8);\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s_path: %s files must be UTF-8 encoded\",\n                settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":298,"groupId":"107710","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getReaderFromFile","params":"(Environmentenv@Settingssettings@StringsettingPrefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/36703f6418e935db0d0374cb20e25bedeeda2c.src","preCode":"    public static Reader getReaderFromFile(Environment env, Settings settings, String settingPrefix) {\n        String filePath = settings.get(settingPrefix, null);\n\n        if (filePath == null) {\n            return null;\n        }\n        final Path path = env.configFile().resolve(filePath);\n        try {\n            return Files.newBufferedReader(path, StandardCharsets.UTF_8);\n        } catch (CharacterCodingException ex) {\n            String message = String.format(Locale.ROOT,\n                \"Unsupported character encoding detected while reading %s_path: %s files must be UTF-8 encoded\",\n                settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ex);\n        } catch (IOException ioe) {\n            String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());\n            throw new IllegalArgumentException(message, ioe);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/analysis/Analysis.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"N"}],"commitId":"d66a307599403a9f7b78482f1d5a934984ed136d","commitMessage":"@@@Add support for inlined user dictionary in the Kuromoji plugin (#45489)\n\nThis change adds a new option called user_dictionary_rules to\nKuromoji's tokenizer. It can be used to set additional tokenization rules\nto the Japanese tokenizer directly in the settings (instead of using a file).\nThis commit also adds a check that no rules are duplicated since this is not allowed\nin the UserDictionary.\n\nCloses #25343","date":"2019-08-20 21:06:01","modifiedFileCount":"4","status":"M","submitter":"Jim Ferenczi"}]
