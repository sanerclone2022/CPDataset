[{"authorTime":"2018-08-07 19:35:32","codes":[{"authorDate":"2018-04-27 06:15:45","commitOrder":3,"curCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,\n                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {\n            assertNotNull(context);\n            searchSourceBuilder.docValueField(\"one_field_too_much\");\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,\n                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f,\n                        true, null, null)));\n            assertEquals(\n                    \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                            + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                    ex.getMessage());\n        }\n    }\n","date":"2018-04-27 06:15:45","endLine":312,"groupId":"7811","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxDocvalueFieldsSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c5/8a158fc677d94ad491a3964c45a888ce6f74eb.src","preCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,\n                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {\n            assertNotNull(context);\n            searchSourceBuilder.docValueField(\"one_field_too_much\");\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,\n                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f,\n                        true, null, null)));\n            assertEquals(\n                    \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                            + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                    ex.getMessage());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"NB"},{"authorDate":"2018-08-07 19:35:32","commitOrder":3,"curCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,\n                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {\n                assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","date":"2018-08-07 19:35:32","endLine":363,"groupId":"5212","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreScriptfieldIfSizeZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/62683466a8c9b9ab3d0586d818af3ab403a32f.src","preCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,\n                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {\n                assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"B"}],"commitId":"b9c04adb295ef9c6e27d6bc76521f5a2f0a5703b","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-07 19:35:32","modifiedFileCount":"53","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2019-02-11 22:55:17","codes":[{"authorDate":"2019-02-11 22:55:17","commitOrder":4,"curCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null))) {\n            assertNotNull(context);\n            searchSourceBuilder.docValueField(\"one_field_too_much\");\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                    () -> service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1,\n                        new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null)));\n            assertEquals(\n                    \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                            + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                    ex.getMessage());\n        }\n    }\n","date":"2019-02-11 22:55:17","endLine":368,"groupId":"30440","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxDocvalueFieldsSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/71/b70285e0bda0fd3e0a04ab59bb943aee18eb43.src","preCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,\n                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {\n            assertNotNull(context);\n            searchSourceBuilder.docValueField(\"one_field_too_much\");\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                    () -> service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,\n                            searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f,\n                        true, null, null)));\n            assertEquals(\n                    \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                            + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                    ex.getMessage());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2019-02-11 22:55:17","commitOrder":4,"curCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null))) {\n                assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","date":"2019-02-11 22:55:17","endLine":422,"groupId":"30443","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreScriptfieldIfSizeZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/71/b70285e0bda0fd3e0a04ab59bb943aee18eb43.src","preCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(indexShard.shardId(), 1, SearchType.DEFAULT,\n                searchSourceBuilder, new String[0], false, new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, true, null, null))) {\n                assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":405,"status":"M"}],"commitId":"f3cfb66e21cbd98f4895601ab3ace198f2f9c351","commitMessage":"@@@Clean up ShardSearchLocalRequest (#38574)\n\nAdded a constructor accepting `StreamInput` as argument.  which allowed to\nmake most of the instance members final as well as remove the default\nconstructor.\nRemoved a test only constructor in favour of invoking the existing\nconstructor that takes a `SearchRequest` as first argument.\nAlso removed profile members and related methods as they were all unused.","date":"2019-02-11 22:55:17","modifiedFileCount":"8","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2019-09-25 15:29:46","codes":[{"authorDate":"2019-09-25 15:29:46","commitOrder":5,"curCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n        try (SearchContext context = service.createContext(\n            new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n                new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null))\n        ) {\n            assertNotNull(context);\n            searchSourceBuilder.docValueField(\"one_field_too_much\");\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                    () -> service.createContext(new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n                        new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null)));\n            assertEquals(\n                    \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                            + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                    ex.getMessage());\n        }\n    }\n","date":"2019-09-25 15:29:46","endLine":389,"groupId":"30440","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxDocvalueFieldsSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a4/526d979da693321f093379b8e1a7154f2cab1a.src","preCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null))) {\n            assertNotNull(context);\n            searchSourceBuilder.docValueField(\"one_field_too_much\");\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                    () -> service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1,\n                        new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null)));\n            assertEquals(\n                    \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                            + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                    ex.getMessage());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"},{"authorDate":"2019-09-25 15:29:46","commitOrder":5,"curCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        try (SearchContext context = service.createContext(new ShardSearchRequest(OriginalIndices.NONE,\n            searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY),\n                1.0f, -1, null, null))) {\n                assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","date":"2019-09-25 15:29:46","endLine":445,"groupId":"30443","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreScriptfieldIfSizeZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a4/526d979da693321f093379b8e1a7154f2cab1a.src","preCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        try (SearchContext context = service.createContext(new ShardSearchLocalRequest(searchRequest, indexShard.shardId(), 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null))) {\n                assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"M"}],"commitId":"7a0fdfa6a780f6156bc8e43f1263eab23f8c3160","commitMessage":"@@@Merge ShardSearchTransportRequest and ShardSearchLocalRequest (#46996)\n\nThis change merges the `ShardSearchTransportRequest` and `ShardSearchLocalRequest`\ninto a single `ShardSearchRequest` that can be used to create a SearchContext.\n\nRelates #46523\n","date":"2019-09-25 15:29:46","modifiedFileCount":"15","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-02-06 15:55:20","codes":[{"authorDate":"2020-02-06 15:55:20","commitOrder":6,"curCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n\n        ShardSearchRequest shardRequest =  new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null);\n\n        {\n            SearchService.SearchRewriteContext rewriteContext = service.acquireSearcherAndRewrite(shardRequest, indexShard);\n            try (SearchContext context = service.createContext(rewriteContext)) {\n                assertNotNull(context);\n            }\n        }\n\n        {\n            SearchService.SearchRewriteContext rewriteContext = service.acquireSearcherAndRewrite(shardRequest, indexShard);\n            searchSourceBuilder.docValueField(\"one_field_too_much\");\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                () -> service.createContext(rewriteContext));\n            assertEquals(\n                \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                    + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\", ex.getMessage());\n        }\n    }\n","date":"2020-02-06 15:55:20","endLine":431,"groupId":"12404","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxDocvalueFieldsSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/dc231f0997b22a8c1eca8b35f91bb89dc8eae6.src","preCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n        try (SearchContext context = service.createContext(\n            new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n                new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null))\n        ) {\n            assertNotNull(context);\n            searchSourceBuilder.docValueField(\"one_field_too_much\");\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                    () -> service.createContext(new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n                        new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null)));\n            assertEquals(\n                    \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                            + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                    ex.getMessage());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"M"},{"authorDate":"2020-02-06 15:55:20","commitOrder":6,"curCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        SearchService.SearchRewriteContext rewriteContext = service.acquireSearcherAndRewrite(\n            new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n                new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null),\n            indexShard);\n        try (SearchContext context = service.createContext(rewriteContext)) {\n            assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","date":"2020-02-06 15:55:20","endLine":497,"groupId":"37716","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreScriptfieldIfSizeZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/dc231f0997b22a8c1eca8b35f91bb89dc8eae6.src","preCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        try (SearchContext context = service.createContext(new ShardSearchRequest(OriginalIndices.NONE,\n            searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY),\n                1.0f, -1, null, null))) {\n                assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":477,"status":"M"}],"commitId":"eb69c6fe7cf5620e1726ceecb77b35cd0f4e016d","commitMessage":"@@@Always rewrite search shard request outside of the search thread pool (#51708)\n\nThis change ensures that the rewrite of the shard request is executed in the network thread or in the refresh listener when waiting for an active shard. This allows queries that rewrite to match_no_docs to bypass the search thread pool entirely even if the can_match phase was skipped (pre_filter_shard_size > number of shards). Coordinating nodes don't have the ability to create empty responses so this change also ensures that at least one shard creates a full empty response while the other can return null ones. This is needed since creating true empty responses on shards require to create concrete aggregators which would be too costly to build on a network thread. We should move this functionality to aggregation builders in a follow up but that would be a much bigger change.\nThis change is also important for #49601 since we want to add the ability to use the result of other shards to rewrite the request of subsequent ones. For instance if the first M shards have their top N computed.  the top worst document in the global queue can be pass to subsequent shards that can then rewrite to match_no_docs if they can guarantee that they don't have any document better than the provided one.","date":"2020-02-06 15:55:20","modifiedFileCount":"12","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-03-24 02:49:32","codes":[{"authorDate":"2020-03-24 02:49:32","commitOrder":7,"curCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n\n        ShardSearchRequest shardRequest =  new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null);\n\n        {\n            SearchService.SearchRewriteContext rewriteContext = service.acquireSearcherAndRewrite(shardRequest, indexShard);\n            try (SearchContext context = service.createContext(rewriteContext, null)) {\n                assertNotNull(context);\n            }\n        }\n\n        {\n            SearchService.SearchRewriteContext rewriteContext = service.acquireSearcherAndRewrite(shardRequest, indexShard);\n            searchSourceBuilder.docValueField(\"one_field_too_much\");\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                () -> service.createContext(rewriteContext, null));\n            assertEquals(\n                \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                    + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\", ex.getMessage());\n        }\n    }\n","date":"2020-03-24 02:49:32","endLine":434,"groupId":"12404","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxDocvalueFieldsSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7c/5d573ce226ca17000931fff61c520b590d8d6f.src","preCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n\n        ShardSearchRequest shardRequest =  new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null);\n\n        {\n            SearchService.SearchRewriteContext rewriteContext = service.acquireSearcherAndRewrite(shardRequest, indexShard);\n            try (SearchContext context = service.createContext(rewriteContext)) {\n                assertNotNull(context);\n            }\n        }\n\n        {\n            SearchService.SearchRewriteContext rewriteContext = service.acquireSearcherAndRewrite(shardRequest, indexShard);\n            searchSourceBuilder.docValueField(\"one_field_too_much\");\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                () -> service.createContext(rewriteContext));\n            assertEquals(\n                \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                    + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\", ex.getMessage());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"},{"authorDate":"2020-03-24 02:49:32","commitOrder":7,"curCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        SearchService.SearchRewriteContext rewriteContext = service.acquireSearcherAndRewrite(\n            new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n                new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null),\n            indexShard);\n        try (SearchContext context = service.createContext(rewriteContext, null)) {\n            assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","date":"2020-03-24 02:49:32","endLine":500,"groupId":"37716","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreScriptfieldIfSizeZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7c/5d573ce226ca17000931fff61c520b590d8d6f.src","preCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        SearchService.SearchRewriteContext rewriteContext = service.acquireSearcherAndRewrite(\n            new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n                new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null),\n            indexShard);\n        try (SearchContext context = service.createContext(rewriteContext)) {\n            assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":480,"status":"M"}],"commitId":"cdc377e8e74d3ca6c231c36dc5e80621aab47c69","commitMessage":"@@@Reduce performance impact of ExitableDirectoryReader (#53978)\n\nBenchmarking showed that the effect of the ExitableDirectoryReader\nis reduced considerably when checking every 8191 docs. Moreover. \nset the cancellable task before calling QueryPhase#preProcess()\nand make sure we don't wrap with an ExitableDirectoryReader at all\nwhen lowLevelCancellation is set to false to avoid completely any\nperformance impact.\n\nFollows: #52822\nFollows: #53166\nFollows: #53496","date":"2020-03-24 02:49:32","modifiedFileCount":"13","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2020-03-25 07:26:10","codes":[{"authorDate":"2020-03-25 07:26:10","commitOrder":8,"curCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n        try (SearchContext context = service.createContext(\n            new ShardSearchRequest(OriginalIndices.NONE,\n                searchRequest, indexShard.shardId(), 1,\n                new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null\n            ), null)) {\n            assertNotNull(context);\n            searchSourceBuilder.docValueField(\"one_field_too_much\");\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                    () -> service.createContext(new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n                        new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null), null));\n            assertEquals(\n                \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                    + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\", ex.getMessage());\n        }\n    }\n","date":"2020-03-25 07:26:10","endLine":436,"groupId":"30440","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxDocvalueFieldsSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/39/126ae54778b5e55acf7e8243f1c4e44753dc6c.src","preCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n\n        ShardSearchRequest shardRequest =  new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null);\n\n        {\n            SearchService.SearchRewriteContext rewriteContext = service.acquireSearcherAndRewrite(shardRequest, indexShard);\n            try (SearchContext context = service.createContext(rewriteContext, null)) {\n                assertNotNull(context);\n            }\n        }\n\n        {\n            SearchService.SearchRewriteContext rewriteContext = service.acquireSearcherAndRewrite(shardRequest, indexShard);\n            searchSourceBuilder.docValueField(\"one_field_too_much\");\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                () -> service.createContext(rewriteContext, null));\n            assertEquals(\n                \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                    + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\", ex.getMessage());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"},{"authorDate":"2020-03-25 07:26:10","commitOrder":8,"curCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        try (SearchContext context = service.createContext(new ShardSearchRequest(OriginalIndices.NONE,\n            searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY),\n                1.0f, -1, null, null),  null)) {\n                assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","date":"2020-03-25 07:26:10","endLine":492,"groupId":"30443","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreScriptfieldIfSizeZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/39/126ae54778b5e55acf7e8243f1c4e44753dc6c.src","preCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        SearchService.SearchRewriteContext rewriteContext = service.acquireSearcherAndRewrite(\n            new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n                new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null),\n            indexShard);\n        try (SearchContext context = service.createContext(rewriteContext, null)) {\n            assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"M"}],"commitId":"f301f49918452bd89e0c2afbde5d1f0813e76091","commitMessage":"@@@Avoid I/O operations when rewriting shard search request (#54044)\n\nThis commit ensures that we rewrite the shard request with a short-lived can_match searcher.\nThis is required for frozen indices since the high level rewrite is now performed on a network thread where we don't want to perform I/O.\n\nCloses #53985","date":"2020-03-25 07:26:10","modifiedFileCount":"5","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-08-27 20:29:24","codes":[{"authorDate":"2020-08-27 20:29:24","commitOrder":9,"curCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n            assertNotNull(context);\n        }\n        searchSourceBuilder.docValueField(\"one_field_too_much\");\n        try (ReaderContext reader = createReaderContext(indexService, indexShard)) {\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                () -> service.createContext(reader, request, null, randomBoolean()));\n            assertEquals(\n                \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                    + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                ex.getMessage());\n        }\n    }\n","date":"2020-08-27 20:29:24","endLine":472,"groupId":"19977","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxDocvalueFieldsSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/0ba1e504578702a63166a3cc56bc9a2eabca63.src","preCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n        try (SearchContext context = service.createContext(\n            new ShardSearchRequest(OriginalIndices.NONE,\n                searchRequest, indexShard.shardId(), 1,\n                new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null\n            ), null)) {\n            assertNotNull(context);\n            searchSourceBuilder.docValueField(\"one_field_too_much\");\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                    () -> service.createContext(new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n                        new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null), null));\n            assertEquals(\n                \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                    + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\", ex.getMessage());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"M"},{"authorDate":"2020-08-27 20:29:24","commitOrder":9,"curCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE,\n            searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY),\n            1.0f, -1, null, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n            assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","date":"2020-08-27 20:29:24","endLine":532,"groupId":"34290","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreScriptfieldIfSizeZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/0ba1e504578702a63166a3cc56bc9a2eabca63.src","preCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        try (SearchContext context = service.createContext(new ShardSearchRequest(OriginalIndices.NONE,\n            searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY),\n                1.0f, -1, null, null),  null)) {\n                assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":512,"status":"M"}],"commitId":"0a3d3919a141e6e3c9bbddc43d046a4c9211b6be","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-27 20:29:24","modifiedFileCount":"256","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-08-27 20:29:24","codes":[{"authorDate":"2020-10-21 23:51:11","commitOrder":10,"curCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        final Settings settings = Settings.builder()\n            .put(IndexSettings.MAX_DOCVALUE_FIELDS_SEARCH_SETTING.getKey(), 1)\n            .build();\n        createIndex(\"index\", settings, null, \"field1\", \"keyword\", \"field2\", \"keyword\");\n        client().prepareIndex(\"index\").setId(\"1\").setSource(\"field1\", \"value1\", \"field2\", \"value2\").setRefreshPolicy(IMMEDIATE).get();\n\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.docValueField(\"field1\");\n\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n            assertNotNull(context);\n        }\n\n        searchSourceBuilder.docValueField(\"unmapped_field\");\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n            SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n           assertNotNull(context);\n       }\n\n        searchSourceBuilder.docValueField(\"field2\");\n        try (ReaderContext reader = createReaderContext(indexService, indexShard)) {\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                () -> service.createContext(reader, request, null, randomBoolean()));\n            assertEquals(\n                \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [1] but was [2]. \"\n                    + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                ex.getMessage());\n        }\n    }\n","date":"2020-10-21 23:51:11","endLine":483,"groupId":"15745","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxDocvalueFieldsSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f3/03d837f56e666c654e3a6321c199e8e5bc2fef.src","preCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        \r\n        for (int i = 0; i < indexService.getIndexSettings().getMaxDocvalueFields(); i++) {\n            searchSourceBuilder.docValueField(\"field\" + i);\n        }\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n            assertNotNull(context);\n        }\n        searchSourceBuilder.docValueField(\"one_field_too_much\");\n        try (ReaderContext reader = createReaderContext(indexService, indexShard)) {\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                () -> service.createContext(reader, request, null, randomBoolean()));\n            assertEquals(\n                \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [100] but was [101]. \"\n                    + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                ex.getMessage());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"M"},{"authorDate":"2020-08-27 20:29:24","commitOrder":10,"curCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE,\n            searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY),\n            1.0f, -1, null, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n            assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","date":"2020-08-27 20:29:24","endLine":532,"groupId":"34290","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreScriptfieldIfSizeZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/0ba1e504578702a63166a3cc56bc9a2eabca63.src","preCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE,\n            searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY),\n            1.0f, -1, null, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n            assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":512,"status":"N"}],"commitId":"498e264df4e8f3c833dd9e3531a1ec5acd305ebd","commitMessage":"@@@Count only mapped fields towards docvalue_fields limit (#63806)\n\nCurrently we count every field requested in the search request bodies\n'docvalue_fields' section towards the limit defined by\nthe 'max_docvalue_fields_search' index setting which defaults to 100. This can\nbe a problem e.g. if the user searches across several indices with some fields\npresent in one index but not the other and has to add the joint set of field\nnames to the query. We currently trip the limit even if the number of actually\nmapped fields in each index is below the limit.\nThis change adds a step to distiguish between mappend and unmapped fields and\nonly count the former towards the limit.\n\nCloses #63730","date":"2020-10-21 23:51:11","modifiedFileCount":"6","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2020-12-07 16:16:36","codes":[{"authorDate":"2020-12-07 16:16:36","commitOrder":11,"curCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        final Settings settings = Settings.builder()\n            .put(IndexSettings.MAX_DOCVALUE_FIELDS_SEARCH_SETTING.getKey(), 1)\n            .build();\n        createIndex(\"index\", settings, null, \"field1\", \"keyword\", \"field2\", \"keyword\");\n        client().prepareIndex(\"index\").setId(\"1\").setSource(\"field1\", \"value1\", \"field2\", \"value2\").setRefreshPolicy(IMMEDIATE).get();\n\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.docValueField(\"field1\");\n\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 0, 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n            assertNotNull(context);\n        }\n\n        searchSourceBuilder.docValueField(\"unmapped_field\");\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n            SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n           assertNotNull(context);\n       }\n\n        searchSourceBuilder.docValueField(\"field2\");\n        try (ReaderContext reader = createReaderContext(indexService, indexShard)) {\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                () -> service.createContext(reader, request, null, randomBoolean()));\n            assertEquals(\n                \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [1] but was [2]. \"\n                    + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                ex.getMessage());\n        }\n    }\n","date":"2020-12-07 16:16:36","endLine":485,"groupId":"15745","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxDocvalueFieldsSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/44/526aa7554376336228b375f159691ebc29428f.src","preCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        final Settings settings = Settings.builder()\n            .put(IndexSettings.MAX_DOCVALUE_FIELDS_SEARCH_SETTING.getKey(), 1)\n            .build();\n        createIndex(\"index\", settings, null, \"field1\", \"keyword\", \"field2\", \"keyword\");\n        client().prepareIndex(\"index\").setId(\"1\").setSource(\"field1\", \"value1\", \"field2\", \"value2\").setRefreshPolicy(IMMEDIATE).get();\n\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.docValueField(\"field1\");\n\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n            assertNotNull(context);\n        }\n\n        searchSourceBuilder.docValueField(\"unmapped_field\");\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n            SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n           assertNotNull(context);\n       }\n\n        searchSourceBuilder.docValueField(\"field2\");\n        try (ReaderContext reader = createReaderContext(indexService, indexShard)) {\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                () -> service.createContext(reader, request, null, randomBoolean()));\n            assertEquals(\n                \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [1] but was [2]. \"\n                    + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                ex.getMessage());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":446,"status":"M"},{"authorDate":"2020-12-07 16:16:36","commitOrder":11,"curCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE,\n            searchRequest, indexShard.shardId(), 0, 1, new AliasFilter(null, Strings.EMPTY_ARRAY),\n            1.0f, -1, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n            assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","date":"2020-12-07 16:16:36","endLine":545,"groupId":"27513","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreScriptfieldIfSizeZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/44/526aa7554376336228b375f159691ebc29428f.src","preCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE,\n            searchRequest, indexShard.shardId(), 1, new AliasFilter(null, Strings.EMPTY_ARRAY),\n            1.0f, -1, null, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n            assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"M"}],"commitId":"9eb9f92b36dd8c28ce6926c94de8d8d886e5ab74","commitMessage":"@@@Adds a consistent shard index to ShardSearchRequest (#65706)\n\n* Adds a consistent shard index to ShardSearchRequest\n\nThis change ensures that the shard index that is used to tiebreak documents with identical sort\nremains consistent between two requests that target the same shards. The index is now always computed from the\nnatural order of the shards in the search request.\nThis change also adds the consistent shard index to the ShardSearchRequest. That allows the slice builder\nto use this information to build more balanced slice query.\n\nRelates #56828","date":"2020-12-07 16:16:36","modifiedFileCount":"22","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2021-03-05 21:28:20","codes":[{"authorDate":"2021-03-05 21:28:20","commitOrder":12,"curCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        final Settings settings = Settings.builder()\n            .put(IndexSettings.MAX_DOCVALUE_FIELDS_SEARCH_SETTING.getKey(), 1)\n            .build();\n        createIndex(\"index\", settings, null, \"field1\", \"keyword\", \"field2\", \"keyword\");\n        client().prepareIndex(\"index\").setId(\"1\").setSource(\"field1\", \"value1\", \"field2\", \"value2\").setRefreshPolicy(IMMEDIATE).get();\n\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.docValueField(\"field1\");\n\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 0, 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, mock(SearchShardTask.class), randomBoolean())) {\n            assertNotNull(context);\n        }\n\n        searchSourceBuilder.docValueField(\"unmapped_field\");\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n            SearchContext context = service.createContext(reader, request, mock(SearchShardTask.class), randomBoolean())) {\n           assertNotNull(context);\n       }\n\n        searchSourceBuilder.docValueField(\"field2\");\n        try (ReaderContext reader = createReaderContext(indexService, indexShard)) {\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                () -> service.createContext(reader, request, mock(SearchShardTask.class), randomBoolean()));\n            assertEquals(\n                \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [1] but was [2]. \"\n                    + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                ex.getMessage());\n        }\n    }\n","date":"2021-03-05 21:28:20","endLine":513,"groupId":"104731","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testMaxDocvalueFieldsSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/755ad5a6a27ad1636b437abfdd43d16e8e643b.src","preCode":"    public void testMaxDocvalueFieldsSearch() throws IOException {\n        final Settings settings = Settings.builder()\n            .put(IndexSettings.MAX_DOCVALUE_FIELDS_SEARCH_SETTING.getKey(), 1)\n            .build();\n        createIndex(\"index\", settings, null, \"field1\", \"keyword\", \"field2\", \"keyword\");\n        client().prepareIndex(\"index\").setId(\"1\").setSource(\"field1\", \"value1\", \"field2\", \"value2\").setRefreshPolicy(IMMEDIATE).get();\n\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.docValueField(\"field1\");\n\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE, searchRequest, indexShard.shardId(), 0, 1,\n            new AliasFilter(null, Strings.EMPTY_ARRAY), 1.0f, -1, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n            assertNotNull(context);\n        }\n\n        searchSourceBuilder.docValueField(\"unmapped_field\");\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n            SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n           assertNotNull(context);\n       }\n\n        searchSourceBuilder.docValueField(\"field2\");\n        try (ReaderContext reader = createReaderContext(indexService, indexShard)) {\n            IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,\n                () -> service.createContext(reader, request, null, randomBoolean()));\n            assertEquals(\n                \"Trying to retrieve too many docvalue_fields. Must be less than or equal to: [1] but was [2]. \"\n                    + \"This limit can be set by changing the [index.max_docvalue_fields_search] index level setting.\",\n                ex.getMessage());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"M"},{"authorDate":"2021-03-05 21:28:20","commitOrder":12,"curCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE,\n            searchRequest, indexShard.shardId(), 0, 1, new AliasFilter(null, Strings.EMPTY_ARRAY),\n            1.0f, -1, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, mock(SearchShardTask.class), randomBoolean())) {\n            assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","date":"2021-03-05 21:28:20","endLine":573,"groupId":"104731","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoreScriptfieldIfSizeZero","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/755ad5a6a27ad1636b437abfdd43d16e8e643b.src","preCode":"    public void testIgnoreScriptfieldIfSizeZero() throws IOException {\n        createIndex(\"index\");\n        final SearchService service = getInstanceFromNode(SearchService.class);\n        final IndicesService indicesService = getInstanceFromNode(IndicesService.class);\n        final IndexService indexService = indicesService.indexServiceSafe(resolveIndex(\"index\"));\n        final IndexShard indexShard = indexService.getShard(0);\n\n        SearchRequest searchRequest = new SearchRequest().allowPartialSearchResults(true);\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        searchSourceBuilder.scriptField(\"field\" + 0,\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, CustomScriptPlugin.DUMMY_SCRIPT, Collections.emptyMap()));\n        searchSourceBuilder.size(0);\n        final ShardSearchRequest request = new ShardSearchRequest(OriginalIndices.NONE,\n            searchRequest, indexShard.shardId(), 0, 1, new AliasFilter(null, Strings.EMPTY_ARRAY),\n            1.0f, -1, null);\n        try (ReaderContext reader = createReaderContext(indexService, indexShard);\n             SearchContext context = service.createContext(reader, request, null, randomBoolean())) {\n            assertEquals(0, context.scriptFields().fields().size());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/SearchServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"M"}],"commitId":"96e412f771514a4d5c49ff363fe0c7ab403ef2b1","commitMessage":"@@@Cancel searches earlier (#69795)\n\nSearch cancellation currently does not work well in the context of searchable snapshot shards.  as it requires search\ntasks to fully enter the query phase (i.e. start execution on the node.  loading up the searcher.  which means loading up\nthe index on FrozenEngine and doing some actual work) to detect cancellation.  which can take a while in the frozen tier. \nblocking on file downloads.","date":"2021-03-05 21:28:20","modifiedFileCount":"3","status":"M","submitter":"Yannick Welsch"}]
