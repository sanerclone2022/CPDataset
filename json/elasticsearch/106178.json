[{"authorTime":"2019-10-30 14:38:50","codes":[{"authorDate":"2019-10-30 14:38:50","commitOrder":1,"curCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2019-10-30 14:38:50","endLine":154,"groupId":"54739","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/3d76bc82ae26c4f4bec2f40f10c74b9a0bbec2.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"},{"authorDate":"2019-10-30 14:38:50","commitOrder":1,"curCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(RestRequest.Method.GET, \"/bar\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n        });\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2019-10-30 14:38:50","endLine":174,"groupId":"26569","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeaderButSameValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/3d76bc82ae26c4f4bec2f40f10c74b9a0bbec2.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(RestRequest.Method.GET, \"/bar\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n        });\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"1fc1df9499a07cfe7729a0aa12e13e16898c13fb","commitMessage":"@@@Copy http headers to ThreadContext strictly (#45945)\n\nPrevious behavior while copying HTTP headers to the ThreadContext. \nwould allow multiple HTTP headers with the same name.  handling only\nthe first occurrence and disregarding the rest of the values. This\ncan be confusing when dealing with multiple Headers as it is not\nobvious which value is read and which ones are silently dropped.\n\nAccording to RFC-7230.  a client must not send multiple header fields\nwith the same field name in a HTTP message.  unless the entire field\nvalue for this header is defined as a comma separated list or this\nspecific header is a well-known exception.\n\nThis commits changes the behavior in order to be more compliant to\nthe aforementioned RFC by requiring the classes that implement\nActionPlugin to declare if a header can be multi-valued or not when\nregistering this header to be copied over to the ThreadContext in\nActionPlugin#getRestHeaders.\nIf the header is allowed to be multivalued.  then all such headers\nare read from the HTTP request and their values get concatenated in\na comma-separated string.\nIf the header is not allowed to be multivalued.  and the HTTP\nrequest contains multiple such Headers with different values.  the\nrequest is rejected with a 400 status.","date":"2019-10-30 14:38:50","modifiedFileCount":"8","status":"B","submitter":"Ioannis Kakavas"},{"authorTime":"2020-03-03 05:32:41","codes":[{"authorDate":"2020-03-03 05:32:41","commitOrder":2,"curCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService, randomBoolean());\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2020-03-03 05:32:41","endLine":153,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/cfd644dde34df892ee4667536e3a2950ed584c.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2020-03-03 05:32:41","commitOrder":2,"curCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService, randomBoolean());\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(RestRequest.Method.GET, \"/bar\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n        });\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2020-03-03 05:32:41","endLine":173,"groupId":"26569","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeaderButSameValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/cfd644dde34df892ee4667536e3a2950ed584c.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(RestRequest.Method.GET, \"/bar\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n        });\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"4c0e8f12cbc078c1b85a67af76ed8a4be11a6f01","commitMessage":"@@@Introduce system index APIs for Kibana (#52385)\n\nThis commit introduces a module for Kibana that exposes REST APIs that\nwill be used by Kibana for access to its system indices. These APIs are wrapped\nversions of the existing REST endpoints. A new setting is also introduced since\nthe Kibana system indices' names are allowed to be changed by a user in case\nmultiple instances of Kibana use the same instance of Elasticsearch.\n\nAdditionally.  the ThreadContext has been extended to indicate that the use of\nsystem indices may be allowed in a request. This will be built upon in the future\nfor the protection of system indices.","date":"2020-03-03 05:32:41","modifiedFileCount":"38","status":"M","submitter":"Jay Modi"},{"authorTime":"2020-03-24 00:11:16","codes":[{"authorDate":"2020-03-24 00:11:16","commitOrder":3,"curCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2020-03-24 00:11:16","endLine":153,"groupId":"54739","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/41/5fe1bf713fa860bdb8d44724bda5e4b16ced15.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService, randomBoolean());\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2020-03-24 00:11:16","commitOrder":3,"curCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(RestRequest.Method.GET, \"/bar\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n        });\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2020-03-24 00:11:16","endLine":173,"groupId":"26569","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeaderButSameValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/41/5fe1bf713fa860bdb8d44724bda5e4b16ced15.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService, randomBoolean());\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(RestRequest.Method.GET, \"/bar\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n        });\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"8264bdd36a2db3c204387c4f8c8a846001bee899","commitMessage":"@@@Revert \"Introduce system index APIs for Kibana (#52385)\" (#53912)\n\nThis reverts commit 4c0e8f12cbc078c1b85a67af76ed8a4be11a6f01.\n\nIt should be re-added once #53909 is addressed.","date":"2020-03-24 00:11:16","modifiedFileCount":"37","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2020-10-07 01:13:48","codes":[{"authorDate":"2020-10-07 01:13:48","commitOrder":4,"curCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2020-10-07 01:13:48","endLine":164,"groupId":"54739","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0b/756acb5ef86b0a32d766a778a4f94a3c5c4634.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"},{"authorDate":"2020-10-07 01:13:48","commitOrder":4,"curCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, client, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(RestRequest.Method.GET, \"/bar\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n        });\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2020-10-07 01:13:48","endLine":184,"groupId":"26569","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeaderButSameValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0b/756acb5ef86b0a32d766a778a4f94a3c5c4634.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = new ThreadContext(Settings.EMPTY);\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(RestRequest.Method.GET, \"/bar\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n        });\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"91f4b58bf71249cf81562bd6069c64aafa46591b","commitMessage":"@@@Deprecate REST access to System Indices (#60945)\n\nThis PR adds deprecation warnings when accessing System Indices via the REST layer. At this time.  these warnings are only enabled for Snapshot builds by default.  to allow projects external to Elasticsearch additional time to adjust their access patterns.\n\nDeprecation warnings will be triggered by all REST requests which access registered System Indices.  except for purpose-specific APIs which access System Indices as an implementation detail a few specific APIs which will continue to allow access to system indices by default:\n\n- `GET _cluster/health`\n- `GET {index}/_recovery`\n- `GET _cluster/allocation/explain`\n- `GET _cluster/state`\n- `POST _cluster/reroute`\n- `GET {index}/_stats`\n- `GET {index}/_segments`\n- `GET {index}/_shard_stores`\n- `GET _cat/[indices. aliases. health. recovery. shards. segments]`\n\nDeprecation warnings for accessing system indices take the form:\n```\nthis request accesses system indices: [.some_system_index].  but in a future major version.  direct access to system indices will be prevented by default\n```","date":"2020-10-07 01:13:48","modifiedFileCount":"132","status":"M","submitter":"Gordon Brown"},{"authorTime":"2020-11-16 16:11:24","codes":[{"authorDate":"2020-11-16 16:11:24","commitOrder":5,"curCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService,\n            CompatibleVersion.CURRENT_VERSION);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2020-11-16 16:11:24","endLine":170,"groupId":"1988","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/f229e7b60aad8566028cd41ca619f2ac30e814.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2020-11-16 16:11:24","commitOrder":5,"curCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, client, circuitBreakerService, usageService,\n            CompatibleVersion.CURRENT_VERSION);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(RestRequest.Method.GET, \"/bar\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n        });\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2020-11-16 16:11:24","endLine":191,"groupId":"26569","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeaderButSameValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/f229e7b60aad8566028cd41ca619f2ac30e814.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, client, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(RestRequest.Method.GET, \"/bar\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n        });\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"618d8bcec62ecc963ad277e01175b6859e341b3c","commitMessage":"@@@Allow registering compatible handlers (#64423)\n\nAdding an infrastructure to allow for registration of Compatible Handlers.\nCompatible handlers are RestHandlers used for handling rest request from old version clients ( CURRENT-1 version). They might be registered under an endpoint that was removed or changed in CURRENT version (different path.  method or an endpoint completely removed).\nBut they also can be registered under the same endpoint (same path.  method as the RestHandler in CURRENT)\nRestHandler's endpoint is at the moment 2dimensional - a method and a path.\n\nThis PR adds a 3rd dimension - a version.\n\nRegistration:\nRestHandler declares a new compatibleWithVersion method.  which will be overridden by Compatible Handlers and returning a Version.CURRENT -1. By default the method returns Version.CURRENT\ncompatibleWithVersion is used when iterating over handlers within RestController#registerHandler. The returned value is used to set a version on MethodHandlers\n\nLookup:\nAn interface CompatibleVersion is introduced in order to abstract a logic to calculate a compatible version requested by a user.\nIt is not implemented in this PR. A simplified.  always returning Version.CURRENT implementation is used.\nWithin RestController.  a version is calculated with the use of CompatibleVersion.  then the lookup for MethodHandlers is performed (the logic is the same)\nOnce it is find.  an additional lookup for a RestHandler for requested version is made.\n\nThe requested version has to be also passed down to XContentBuilder in order to allow for per version serialisation logic\n\nrelates #51816","date":"2020-11-16 16:11:24","modifiedFileCount":"12","status":"M","submitter":"Przemyslaw Gomulka"},{"authorTime":"2021-01-29 01:49:44","codes":[{"authorDate":"2021-01-29 01:49:44","commitOrder":6,"curCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-01-29 01:49:44","endLine":167,"groupId":"54739","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/98/65c3b96686a2fe2f8a405c4f82ff8fa59e5188.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService,\n            CompatibleVersion.CURRENT_VERSION);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2021-01-29 01:49:44","commitOrder":6,"curCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, client, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(RestRequest.Method.GET, \"/bar\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n        });\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-01-29 01:49:44","endLine":187,"groupId":"26569","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeaderButSameValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/98/65c3b96686a2fe2f8a405c4f82ff8fa59e5188.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, client, circuitBreakerService, usageService,\n            CompatibleVersion.CURRENT_VERSION);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(RestRequest.Method.GET, \"/bar\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n        });\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"83aa071ae6745afa4c23442c0e52ef32f456e694","commitMessage":"@@@Move REST compatible header parsing into server (#68047)\n\nCurrently the logic for parsing vendor specific headers - i.e. application/vnd.elasticsearch+json;compatible-with=7 is within rest-compatibility module.\nThis commit is removing the rest-compatibility plugin and moving the version parsing logic\ninto server module. It no longer needs to be injected from xpack into server.  therefore can be directly used from RestRequest.\n\nrelates #51816","date":"2021-01-29 01:49:44","modifiedFileCount":"11","status":"M","submitter":"Przemyslaw Gomulka"},{"authorTime":"2021-03-06 08:11:37","codes":[{"authorDate":"2021-01-29 01:49:44","commitOrder":7,"curCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-01-29 01:49:44","endLine":167,"groupId":"106178","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/98/65c3b96686a2fe2f8a405c4f82ff8fa59e5188.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeader() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, null, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"bar\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).build();\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.BAD_REQUEST);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"N"},{"authorDate":"2021-03-06 08:11:37","commitOrder":7,"curCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, client, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(new Route(GET, \"/bar\"),\n            (request, channel, client) ->\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY)));\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","date":"2021-03-06 08:11:37","endLine":177,"groupId":"106178","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRequestWithDisallowedMultiValuedHeaderButSameValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/dd98712b45938caa4b64b2b8406e765f3f9d75.src","preCode":"    public void testRequestWithDisallowedMultiValuedHeaderButSameValues() {\n        final ThreadContext threadContext = client.threadPool().getThreadContext();\n        Set<RestHeaderDefinition> headers = new HashSet<>(Arrays.asList(new RestHeaderDefinition(\"header.1\", true),\n            new RestHeaderDefinition(\"header.2\", false)));\n        final RestController restController = new RestController(headers, null, client, circuitBreakerService, usageService);\n        Map<String, List<String>> restHeaders = new HashMap<>();\n        restHeaders.put(\"header.1\", Collections.singletonList(\"boo\"));\n        restHeaders.put(\"header.2\", List.of(\"foo\", \"foo\"));\n        RestRequest fakeRequest = new FakeRestRequest.Builder(xContentRegistry()).withHeaders(restHeaders).withPath(\"/bar\").build();\n        restController.registerHandler(RestRequest.Method.GET, \"/bar\", new RestHandler() {\n            @Override\n            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));\n            }\n        });\n        AssertingChannel channel = new AssertingChannel(fakeRequest, false, RestStatus.OK);\n        restController.dispatchRequest(fakeRequest, channel, threadContext);\n        assertTrue(channel.getSendResponseCalled());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/rest/RestControllerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"4cc4c2cc4769f5a2c53db2d909f310e17bd017c0","commitMessage":"@@@[REST Compatible API] Route refactoring (#69573)\n\nRelated to #51816\n\nMakes `Route`s  `RestApiVersion` -aware (and `RestHandler`s `RestApiVersion` -agnostic). Refactors \nhow `Route`s are constructed in the case of deprecation or replacement of routes.","date":"2021-03-06 08:11:37","modifiedFileCount":"102","status":"M","submitter":"Joe Gallo"}]
