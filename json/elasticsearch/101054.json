[{"authorTime":"2021-02-09 01:08:01","codes":[{"authorDate":"2021-02-09 01:08:01","commitOrder":1,"curCode":"        public void putMethod(MethodDeclaration declaration) {\n            if (valid == false) {\n                return;\n            }\n            methods.put(\n                MethodSignature.fromDeclaration(declaration),\n                new ParsedMethod(\n                        declaration.getJavadoc().map(Javadoc::toText).orElse(\"\"),\n                        declaration.getParameters()\n                                .stream()\n                                .map(p -> p.getName().asString())\n                                .collect(Collectors.toList())\n                )\n            );\n        }\n","date":"2021-02-09 01:08:01","endLine":104,"groupId":"72852","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"putMethod","params":"(MethodDeclarationdeclaration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/27c0cedb247700a83d38c0ffcd6bacd0d48558.src","preCode":"        public void putMethod(MethodDeclaration declaration) {\n            if (valid == false) {\n                return;\n            }\n            methods.put(\n                MethodSignature.fromDeclaration(declaration),\n                new ParsedMethod(\n                        declaration.getJavadoc().map(Javadoc::toText).orElse(\"\"),\n                        declaration.getParameters()\n                                .stream()\n                                .map(p -> p.getName().asString())\n                                .collect(Collectors.toList())\n                )\n            );\n        }\n","realPath":"modules/lang-painless/src/doc/java/org/elasticsearch/painless/JavadocExtractor.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"B"},{"authorDate":"2021-02-09 01:08:01","commitOrder":1,"curCode":"        public void putConstructor(ConstructorDeclaration declaration) {\n            if (valid == false) {\n                return;\n            }\n            constructors.put(\n                declaration.getParameters().stream().map(p -> stripTypeParameters(p.getType().asString())).collect(Collectors.toList()),\n                new ParsedMethod(\n                        declaration.getJavadoc().map(Javadoc::toText).orElse(\"\"),\n                        declaration.getParameters()\n                                .stream()\n                                .map(p -> p.getName().asString())\n                                .collect(Collectors.toList())\n                )\n            );\n        }\n","date":"2021-02-09 01:08:01","endLine":120,"groupId":"72852","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"putConstructor","params":"(ConstructorDeclarationdeclaration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/27c0cedb247700a83d38c0ffcd6bacd0d48558.src","preCode":"        public void putConstructor(ConstructorDeclaration declaration) {\n            if (valid == false) {\n                return;\n            }\n            constructors.put(\n                declaration.getParameters().stream().map(p -> stripTypeParameters(p.getType().asString())).collect(Collectors.toList()),\n                new ParsedMethod(\n                        declaration.getJavadoc().map(Javadoc::toText).orElse(\"\"),\n                        declaration.getParameters()\n                                .stream()\n                                .map(p -> p.getName().asString())\n                                .collect(Collectors.toList())\n                )\n            );\n        }\n","realPath":"modules/lang-painless/src/doc/java/org/elasticsearch/painless/JavadocExtractor.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"}],"commitId":"11524758e104c7d10920f282e1b42ab30d39eaed","commitMessage":"@@@Scripting: enforce GPLv2 for parsed stdlib docs (#68601)\n\nWhen parsing Java standard library javadocs.  we need to ensure\nthat our use will comply with the license.  Our use complies\nwith GPLv2 licenses but may not comply with proprietary licenses.\n\nReject .java files that have non-GPL licenses when parsing them\nfor parameter names and javadoc comments.\n","date":"2021-02-09 01:08:01","modifiedFileCount":"3","status":"B","submitter":"Stuart Tettemer"},{"authorTime":"2021-02-10 23:20:52","codes":[{"authorDate":"2021-02-10 23:20:52","commitOrder":2,"curCode":"        public void putMethod(MethodDeclaration declaration) {\n            if (valid == false) {\n                return;\n            }\n            methods.put(\n                MethodSignature.fromDeclaration(declaration),\n                new ParsedMethod(\n                        declaration.getJavadoc().map(JavadocExtractor::clean).orElse(null),\n                        declaration.getParameters()\n                                .stream()\n                                .map(p -> p.getName().asString())\n                                .collect(Collectors.toList())\n                )\n            );\n        }\n","date":"2021-02-10 23:20:52","endLine":114,"groupId":"72852","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"putMethod","params":"(MethodDeclarationdeclaration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/572ae65fb2b5029572819c2b5525f76d241c1c.src","preCode":"        public void putMethod(MethodDeclaration declaration) {\n            if (valid == false) {\n                return;\n            }\n            methods.put(\n                MethodSignature.fromDeclaration(declaration),\n                new ParsedMethod(\n                        declaration.getJavadoc().map(Javadoc::toText).orElse(\"\"),\n                        declaration.getParameters()\n                                .stream()\n                                .map(p -> p.getName().asString())\n                                .collect(Collectors.toList())\n                )\n            );\n        }\n","realPath":"modules/lang-painless/src/doc/java/org/elasticsearch/painless/JavadocExtractor.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2021-02-10 23:20:52","commitOrder":2,"curCode":"        public void putConstructor(ConstructorDeclaration declaration) {\n            if (valid == false) {\n                return;\n            }\n            constructors.put(\n                declaration.getParameters().stream().map(p -> stripTypeParameters(p.getType().asString())).collect(Collectors.toList()),\n                new ParsedMethod(\n                        declaration.getJavadoc().map(JavadocExtractor::clean).orElse(null),\n                        declaration.getParameters()\n                                .stream()\n                                .map(p -> p.getName().asString())\n                                .collect(Collectors.toList())\n                )\n            );\n        }\n","date":"2021-02-10 23:20:52","endLine":130,"groupId":"72852","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"putConstructor","params":"(ConstructorDeclarationdeclaration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/572ae65fb2b5029572819c2b5525f76d241c1c.src","preCode":"        public void putConstructor(ConstructorDeclaration declaration) {\n            if (valid == false) {\n                return;\n            }\n            constructors.put(\n                declaration.getParameters().stream().map(p -> stripTypeParameters(p.getType().asString())).collect(Collectors.toList()),\n                new ParsedMethod(\n                        declaration.getJavadoc().map(Javadoc::toText).orElse(\"\"),\n                        declaration.getParameters()\n                                .stream()\n                                .map(p -> p.getName().asString())\n                                .collect(Collectors.toList())\n                )\n            );\n        }\n","realPath":"modules/lang-painless/src/doc/java/org/elasticsearch/painless/JavadocExtractor.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"c35eebea9d352f7d15fb51fa0ccd2c6a10b8f497","commitMessage":"@@@Scripting: capture structured javadoc from stdlib (#68782)\n\nClean javadoc tags and strip html.\nMethods and constructors have an optional `javadoc` field.  All fields under\n`javadoc` are optional but at least one will be present.\n\nFields also have optional `javadoc` field which.  if present.  is a string.\n```\n\"javadoc\": {\n  \"description\": \"...\". \n\n  // from @param <param name> <param description>\n  \"parameters\": {\n    \"p1\": \"<p1 description>\". \n    \"p2\": \"<p2 description>\"\n  }. \n\n  // from @return\n  \"return\": \"...\". \n\n  // from @throws <type> <description>\n  \"throws\": [\n    [\n      \"IndexOutOfBoundsException\". \n      \"<description>\"\n    ]. \n    [\n      \"IOException\". \n      \"<description>\"\n    ]\n  ]\n}\n```","date":"2021-02-10 23:20:52","modifiedFileCount":"2","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2021-02-10 23:20:52","codes":[{"authorDate":"2021-02-18 00:21:27","commitOrder":3,"curCode":"        public void putMethod(MethodDeclaration declaration) {\n            if (valid == false) {\n                return;\n            }\n            methods.put(\n                MethodSignature.fromDeclaration(declaration),\n                new ParsedMethod(\n                        declaration.getJavadoc().map(JavadocExtractor::clean).orElse(null),\n                        declaration.getParameters()\n                                .stream()\n                                .map(p -> stripTypeParameters(p.getName().asString()))\n                                .collect(Collectors.toList())\n                )\n            );\n        }\n","date":"2021-02-18 00:21:27","endLine":148,"groupId":"101054","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"putMethod","params":"(MethodDeclarationdeclaration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/591d5cc3b2bd5fcd32f7e3ea2c0d4e8ead30df.src","preCode":"        public void putMethod(MethodDeclaration declaration) {\n            if (valid == false) {\n                return;\n            }\n            methods.put(\n                MethodSignature.fromDeclaration(declaration),\n                new ParsedMethod(\n                        declaration.getJavadoc().map(JavadocExtractor::clean).orElse(null),\n                        declaration.getParameters()\n                                .stream()\n                                .map(p -> p.getName().asString())\n                                .collect(Collectors.toList())\n                )\n            );\n        }\n","realPath":"modules/lang-painless/src/doc/java/org/elasticsearch/painless/JavadocExtractor.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2021-02-10 23:20:52","commitOrder":3,"curCode":"        public void putConstructor(ConstructorDeclaration declaration) {\n            if (valid == false) {\n                return;\n            }\n            constructors.put(\n                declaration.getParameters().stream().map(p -> stripTypeParameters(p.getType().asString())).collect(Collectors.toList()),\n                new ParsedMethod(\n                        declaration.getJavadoc().map(JavadocExtractor::clean).orElse(null),\n                        declaration.getParameters()\n                                .stream()\n                                .map(p -> p.getName().asString())\n                                .collect(Collectors.toList())\n                )\n            );\n        }\n","date":"2021-02-10 23:20:52","endLine":130,"groupId":"101054","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"putConstructor","params":"(ConstructorDeclarationdeclaration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/572ae65fb2b5029572819c2b5525f76d241c1c.src","preCode":"        public void putConstructor(ConstructorDeclaration declaration) {\n            if (valid == false) {\n                return;\n            }\n            constructors.put(\n                declaration.getParameters().stream().map(p -> stripTypeParameters(p.getType().asString())).collect(Collectors.toList()),\n                new ParsedMethod(\n                        declaration.getJavadoc().map(JavadocExtractor::clean).orElse(null),\n                        declaration.getParameters()\n                                .stream()\n                                .map(p -> p.getName().asString())\n                                .collect(Collectors.toList())\n                )\n            );\n        }\n","realPath":"modules/lang-painless/src/doc/java/org/elasticsearch/painless/JavadocExtractor.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"N"}],"commitId":"dde3df29c5542c6a780800a3623b7484f0cbf175","commitMessage":"@@@Scripting: augmented javadoc to api spec (#69082)\n\nAccept system property `packageSources` with mapping of\npackage names to source roots.\n\nFormat `<package0>:<path0>;<package1>:<path1>`.\n\nChecks ESv2 License in addition to GPLv2.","date":"2021-02-18 00:21:27","modifiedFileCount":"3","status":"M","submitter":"Stuart Tettemer"}]
