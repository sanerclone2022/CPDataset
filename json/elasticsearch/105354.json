[{"authorTime":"2020-09-21 21:33:58","codes":[{"authorDate":"2020-09-21 20:30:47","commitOrder":2,"curCode":"    public void testCircuitBreakerOnConstruction() {\n        int whenToBreak = randomInt(10);\n        AtomicLong total = new AtomicLong();\n        CircuitBreakerService breakerService = mock(CircuitBreakerService.class);\n        when(breakerService.getBreaker(CircuitBreaker.REQUEST)).thenReturn(new NoopCircuitBreaker(CircuitBreaker.REQUEST) {\n            private int countDown = whenToBreak;\n            @Override\n            public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n                if (countDown-- == 0) {\n                    throw new CircuitBreakingException(\"test error\", bytes, Long.MAX_VALUE, Durability.TRANSIENT);\n                }\n                total.addAndGet(bytes);\n                return total.get();\n            }\n\n            @Override\n            public long addWithoutBreaking(long bytes) {\n                total.addAndGet(bytes);\n                return total.get();\n            }\n        });\n        BigArrays bigArrays = new BigArrays(null, breakerService, CircuitBreaker.REQUEST).withCircuitBreaking();\n        final int p = randomIntBetween(HyperLogLogPlusPlus.MIN_PRECISION, HyperLogLogPlusPlus.MAX_PRECISION);\n        try {\n            for (int i = 0; i < whenToBreak + 1; ++i) {\n                final HyperLogLogPlusPlus subject = new HyperLogLogPlusPlus(p, bigArrays, 0);\n                subject.close();\n            }\n            fail(\"Must fail\");\n        } catch (CircuitBreakingException e) {\n            \r\n        }\n\n        assertThat(total.get(), equalTo(0L));\n    }\n","date":"2020-09-21 20:30:47","endLine":173,"groupId":"49979","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCircuitBreakerOnConstruction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/79/b539ddd5921cad2516289f1c04e894a6744a38.src","preCode":"    public void testCircuitBreakerOnConstruction() {\n        int whenToBreak = randomInt(10);\n        AtomicLong total = new AtomicLong();\n        CircuitBreakerService breakerService = mock(CircuitBreakerService.class);\n        when(breakerService.getBreaker(CircuitBreaker.REQUEST)).thenReturn(new NoopCircuitBreaker(CircuitBreaker.REQUEST) {\n            private int countDown = whenToBreak;\n            @Override\n            public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n                if (countDown-- == 0) {\n                    throw new CircuitBreakingException(\"test error\", bytes, Long.MAX_VALUE, Durability.TRANSIENT);\n                }\n                total.addAndGet(bytes);\n                return total.get();\n            }\n\n            @Override\n            public long addWithoutBreaking(long bytes) {\n                total.addAndGet(bytes);\n                return total.get();\n            }\n        });\n        BigArrays bigArrays = new BigArrays(null, breakerService, CircuitBreaker.REQUEST).withCircuitBreaking();\n        final int p = randomIntBetween(HyperLogLogPlusPlus.MIN_PRECISION, HyperLogLogPlusPlus.MAX_PRECISION);\n        try {\n            for (int i = 0; i < whenToBreak + 1; ++i) {\n                final HyperLogLogPlusPlus subject = new HyperLogLogPlusPlus(p, bigArrays, 0);\n                subject.close();\n            }\n            fail(\"Must fail\");\n        } catch (CircuitBreakingException e) {\n            \r\n        }\n\n        assertThat(total.get(), equalTo(0L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/HyperLogLogPlusPlusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"NB"},{"authorDate":"2020-09-21 21:33:58","commitOrder":2,"curCode":"    public void testCircuitBreakerOnConstruction() {\n        int whenToBreak = randomInt(10);\n        AtomicLong total = new AtomicLong();\n        CircuitBreakerService breakerService = mock(CircuitBreakerService.class);\n        when(breakerService.getBreaker(CircuitBreaker.REQUEST)).thenReturn(new NoopCircuitBreaker(CircuitBreaker.REQUEST) {\n            private int countDown = whenToBreak;\n            @Override\n            public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n                if (countDown-- == 0) {\n                    throw new CircuitBreakingException(\"test error\", bytes, Long.MAX_VALUE, Durability.TRANSIENT);\n                }\n                total.addAndGet(bytes);\n                return total.get();\n            }\n\n            @Override\n            public long addWithoutBreaking(long bytes) {\n                total.addAndGet(bytes);\n                return total.get();\n            }\n        });\n        BigArrays bigArrays = new BigArrays(null, breakerService, CircuitBreaker.REQUEST).withCircuitBreaking();\n        final int p = randomIntBetween(AbstractCardinalityAlgorithm.MIN_PRECISION, AbstractCardinalityAlgorithm.MAX_PRECISION);\n        try {\n            for (int i = 0; i < whenToBreak + 1; ++i) {\n                final HyperLogLogPlusPlusSparse subject = new HyperLogLogPlusPlusSparse(p, bigArrays, 1, 1);\n                subject.close();\n            }\n            fail(\"Must fail\");\n        } catch (CircuitBreakingException e) {\n            \r\n        }\n\n        assertThat(total.get(), CoreMatchers.equalTo(0L));\n    }\n","date":"2020-09-21 21:33:58","endLine":132,"groupId":"49979","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCircuitBreakerOnConstruction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/02f04927f6e938e159256d0bb78bdbcf8dc51f.src","preCode":"    public void testCircuitBreakerOnConstruction() {\n        int whenToBreak = randomInt(10);\n        AtomicLong total = new AtomicLong();\n        CircuitBreakerService breakerService = mock(CircuitBreakerService.class);\n        when(breakerService.getBreaker(CircuitBreaker.REQUEST)).thenReturn(new NoopCircuitBreaker(CircuitBreaker.REQUEST) {\n            private int countDown = whenToBreak;\n            @Override\n            public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n                if (countDown-- == 0) {\n                    throw new CircuitBreakingException(\"test error\", bytes, Long.MAX_VALUE, Durability.TRANSIENT);\n                }\n                total.addAndGet(bytes);\n                return total.get();\n            }\n\n            @Override\n            public long addWithoutBreaking(long bytes) {\n                total.addAndGet(bytes);\n                return total.get();\n            }\n        });\n        BigArrays bigArrays = new BigArrays(null, breakerService, CircuitBreaker.REQUEST).withCircuitBreaking();\n        final int p = randomIntBetween(AbstractCardinalityAlgorithm.MIN_PRECISION, AbstractCardinalityAlgorithm.MAX_PRECISION);\n        try {\n            for (int i = 0; i < whenToBreak + 1; ++i) {\n                final HyperLogLogPlusPlusSparse subject = new HyperLogLogPlusPlusSparse(p, bigArrays, 1, 1);\n                subject.close();\n            }\n            fail(\"Must fail\");\n        } catch (CircuitBreakingException e) {\n            \r\n        }\n\n        assertThat(total.get(), CoreMatchers.equalTo(0L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/HyperLogLogPlusPlusSparseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"}],"commitId":"5e37907660def2169d356346a9c421234ddf1d23","commitMessage":"@@@Fix bug when initializing HyperLogLogPlusPlusSparse (#62602)\n\nThis is a follow up of #62480 where we are oversizing one array when initialising. In addition it prevents a possible CircuitBreaker leak during initialisation.","date":"2020-09-21 21:33:58","modifiedFileCount":"2","status":"M","submitter":"Ignacio Vera"},{"authorTime":"2020-10-13 15:19:15","codes":[{"authorDate":"2020-09-21 20:30:47","commitOrder":3,"curCode":"    public void testCircuitBreakerOnConstruction() {\n        int whenToBreak = randomInt(10);\n        AtomicLong total = new AtomicLong();\n        CircuitBreakerService breakerService = mock(CircuitBreakerService.class);\n        when(breakerService.getBreaker(CircuitBreaker.REQUEST)).thenReturn(new NoopCircuitBreaker(CircuitBreaker.REQUEST) {\n            private int countDown = whenToBreak;\n            @Override\n            public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n                if (countDown-- == 0) {\n                    throw new CircuitBreakingException(\"test error\", bytes, Long.MAX_VALUE, Durability.TRANSIENT);\n                }\n                total.addAndGet(bytes);\n                return total.get();\n            }\n\n            @Override\n            public long addWithoutBreaking(long bytes) {\n                total.addAndGet(bytes);\n                return total.get();\n            }\n        });\n        BigArrays bigArrays = new BigArrays(null, breakerService, CircuitBreaker.REQUEST).withCircuitBreaking();\n        final int p = randomIntBetween(HyperLogLogPlusPlus.MIN_PRECISION, HyperLogLogPlusPlus.MAX_PRECISION);\n        try {\n            for (int i = 0; i < whenToBreak + 1; ++i) {\n                final HyperLogLogPlusPlus subject = new HyperLogLogPlusPlus(p, bigArrays, 0);\n                subject.close();\n            }\n            fail(\"Must fail\");\n        } catch (CircuitBreakingException e) {\n            \r\n        }\n\n        assertThat(total.get(), equalTo(0L));\n    }\n","date":"2020-09-21 20:30:47","endLine":173,"groupId":"49979","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCircuitBreakerOnConstruction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/79/b539ddd5921cad2516289f1c04e894a6744a38.src","preCode":"    public void testCircuitBreakerOnConstruction() {\n        int whenToBreak = randomInt(10);\n        AtomicLong total = new AtomicLong();\n        CircuitBreakerService breakerService = mock(CircuitBreakerService.class);\n        when(breakerService.getBreaker(CircuitBreaker.REQUEST)).thenReturn(new NoopCircuitBreaker(CircuitBreaker.REQUEST) {\n            private int countDown = whenToBreak;\n            @Override\n            public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n                if (countDown-- == 0) {\n                    throw new CircuitBreakingException(\"test error\", bytes, Long.MAX_VALUE, Durability.TRANSIENT);\n                }\n                total.addAndGet(bytes);\n                return total.get();\n            }\n\n            @Override\n            public long addWithoutBreaking(long bytes) {\n                total.addAndGet(bytes);\n                return total.get();\n            }\n        });\n        BigArrays bigArrays = new BigArrays(null, breakerService, CircuitBreaker.REQUEST).withCircuitBreaking();\n        final int p = randomIntBetween(HyperLogLogPlusPlus.MIN_PRECISION, HyperLogLogPlusPlus.MAX_PRECISION);\n        try {\n            for (int i = 0; i < whenToBreak + 1; ++i) {\n                final HyperLogLogPlusPlus subject = new HyperLogLogPlusPlus(p, bigArrays, 0);\n                subject.close();\n            }\n            fail(\"Must fail\");\n        } catch (CircuitBreakingException e) {\n            \r\n        }\n\n        assertThat(total.get(), equalTo(0L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/HyperLogLogPlusPlusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"},{"authorDate":"2020-10-13 15:19:15","commitOrder":3,"curCode":"    public void testCircuitBreakerOnConstruction() {\n        int whenToBreak = randomInt(10);\n        AtomicLong total = new AtomicLong();\n        CircuitBreakerService breakerService = mock(CircuitBreakerService.class);\n        when(breakerService.getBreaker(CircuitBreaker.REQUEST)).thenReturn(new NoopCircuitBreaker(CircuitBreaker.REQUEST) {\n            private int countDown = whenToBreak;\n            @Override\n            public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n                if (countDown-- == 0) {\n                    throw new CircuitBreakingException(\"test error\", bytes, Long.MAX_VALUE, Durability.TRANSIENT);\n                }\n                total.addAndGet(bytes);\n                return total.get();\n            }\n\n            @Override\n            public long addWithoutBreaking(long bytes) {\n                total.addAndGet(bytes);\n                return total.get();\n            }\n        });\n        BigArrays bigArrays = new BigArrays(null, breakerService, CircuitBreaker.REQUEST).withCircuitBreaking();\n        final int p = randomIntBetween(AbstractCardinalityAlgorithm.MIN_PRECISION, AbstractCardinalityAlgorithm.MAX_PRECISION);\n        try {\n            for (int i = 0; i < whenToBreak + 1; ++i) {\n                final HyperLogLogPlusPlusSparse subject = new HyperLogLogPlusPlusSparse(p, bigArrays, 1);\n                subject.close();\n            }\n            fail(\"Must fail\");\n        } catch (CircuitBreakingException e) {\n            \r\n        }\n\n        assertThat(total.get(), CoreMatchers.equalTo(0L));\n    }\n","date":"2020-10-13 15:19:15","endLine":121,"groupId":"49979","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCircuitBreakerOnConstruction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d1/5b90bb3783a03de5e24c116a2a352c040deed1.src","preCode":"    public void testCircuitBreakerOnConstruction() {\n        int whenToBreak = randomInt(10);\n        AtomicLong total = new AtomicLong();\n        CircuitBreakerService breakerService = mock(CircuitBreakerService.class);\n        when(breakerService.getBreaker(CircuitBreaker.REQUEST)).thenReturn(new NoopCircuitBreaker(CircuitBreaker.REQUEST) {\n            private int countDown = whenToBreak;\n            @Override\n            public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n                if (countDown-- == 0) {\n                    throw new CircuitBreakingException(\"test error\", bytes, Long.MAX_VALUE, Durability.TRANSIENT);\n                }\n                total.addAndGet(bytes);\n                return total.get();\n            }\n\n            @Override\n            public long addWithoutBreaking(long bytes) {\n                total.addAndGet(bytes);\n                return total.get();\n            }\n        });\n        BigArrays bigArrays = new BigArrays(null, breakerService, CircuitBreaker.REQUEST).withCircuitBreaking();\n        final int p = randomIntBetween(AbstractCardinalityAlgorithm.MIN_PRECISION, AbstractCardinalityAlgorithm.MAX_PRECISION);\n        try {\n            for (int i = 0; i < whenToBreak + 1; ++i) {\n                final HyperLogLogPlusPlusSparse subject = new HyperLogLogPlusPlusSparse(p, bigArrays, 1, 1);\n                subject.close();\n            }\n            fail(\"Must fail\");\n        } catch (CircuitBreakingException e) {\n            \r\n        }\n\n        assertThat(total.get(), CoreMatchers.equalTo(0L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/HyperLogLogPlusPlusSparseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"1dea28a87843cb10360fda60cd409208814eb87b","commitMessage":"@@@Use Globals Ords in Cardinality aggregation for low cardinality fields (#62560)\n\nNew Cardinality aggregator implementation that uses global ords.","date":"2020-10-13 15:19:15","modifiedFileCount":"6","status":"M","submitter":"Ignacio Vera"},{"authorTime":"2021-01-06 01:15:22","codes":[{"authorDate":"2021-01-06 01:15:22","commitOrder":4,"curCode":"    public void testCircuitBreakerOnConstruction() {\n        int whenToBreak = randomInt(10);\n        AtomicLong total = new AtomicLong();\n        CircuitBreakerService breakerService = mock(CircuitBreakerService.class);\n        when(breakerService.getBreaker(CircuitBreaker.REQUEST)).thenReturn(new NoopCircuitBreaker(CircuitBreaker.REQUEST) {\n            private int countDown = whenToBreak;\n            @Override\n            public void addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n                if (countDown-- == 0) {\n                    throw new CircuitBreakingException(\"test error\", bytes, Long.MAX_VALUE, Durability.TRANSIENT);\n                }\n                total.addAndGet(bytes);\n            }\n\n            @Override\n            public void addWithoutBreaking(long bytes) {\n                total.addAndGet(bytes);\n            }\n        });\n        BigArrays bigArrays = new BigArrays(null, breakerService, CircuitBreaker.REQUEST).withCircuitBreaking();\n        final int p = randomIntBetween(HyperLogLogPlusPlus.MIN_PRECISION, HyperLogLogPlusPlus.MAX_PRECISION);\n        try {\n            for (int i = 0; i < whenToBreak + 1; ++i) {\n                final HyperLogLogPlusPlus subject = new HyperLogLogPlusPlus(p, bigArrays, 0);\n                subject.close();\n            }\n            fail(\"Must fail\");\n        } catch (CircuitBreakingException e) {\n            \r\n        }\n\n        assertThat(total.get(), equalTo(0L));\n    }\n","date":"2021-01-06 01:15:22","endLine":175,"groupId":"105354","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCircuitBreakerOnConstruction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/80/da4d15c894969a20a9efdcd5f9aae7b10d73b4.src","preCode":"    public void testCircuitBreakerOnConstruction() {\n        int whenToBreak = randomInt(10);\n        AtomicLong total = new AtomicLong();\n        CircuitBreakerService breakerService = mock(CircuitBreakerService.class);\n        when(breakerService.getBreaker(CircuitBreaker.REQUEST)).thenReturn(new NoopCircuitBreaker(CircuitBreaker.REQUEST) {\n            private int countDown = whenToBreak;\n            @Override\n            public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n                if (countDown-- == 0) {\n                    throw new CircuitBreakingException(\"test error\", bytes, Long.MAX_VALUE, Durability.TRANSIENT);\n                }\n                total.addAndGet(bytes);\n                return total.get();\n            }\n\n            @Override\n            public long addWithoutBreaking(long bytes) {\n                total.addAndGet(bytes);\n                return total.get();\n            }\n        });\n        BigArrays bigArrays = new BigArrays(null, breakerService, CircuitBreaker.REQUEST).withCircuitBreaking();\n        final int p = randomIntBetween(HyperLogLogPlusPlus.MIN_PRECISION, HyperLogLogPlusPlus.MAX_PRECISION);\n        try {\n            for (int i = 0; i < whenToBreak + 1; ++i) {\n                final HyperLogLogPlusPlus subject = new HyperLogLogPlusPlus(p, bigArrays, 0);\n                subject.close();\n            }\n            fail(\"Must fail\");\n        } catch (CircuitBreakingException e) {\n            \r\n        }\n\n        assertThat(total.get(), equalTo(0L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/HyperLogLogPlusPlusTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2021-01-06 01:15:22","commitOrder":4,"curCode":"    public void testCircuitBreakerOnConstruction() {\n        int whenToBreak = randomInt(10);\n        AtomicLong total = new AtomicLong();\n        CircuitBreakerService breakerService = mock(CircuitBreakerService.class);\n        when(breakerService.getBreaker(CircuitBreaker.REQUEST)).thenReturn(new NoopCircuitBreaker(CircuitBreaker.REQUEST) {\n            private int countDown = whenToBreak;\n            @Override\n            public void addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n                if (countDown-- == 0) {\n                    throw new CircuitBreakingException(\"test error\", bytes, Long.MAX_VALUE, Durability.TRANSIENT);\n                }\n                total.addAndGet(bytes);\n            }\n\n            @Override\n            public void addWithoutBreaking(long bytes) {\n                total.addAndGet(bytes);\n            }\n        });\n        BigArrays bigArrays = new BigArrays(null, breakerService, CircuitBreaker.REQUEST).withCircuitBreaking();\n        final int p = randomIntBetween(AbstractCardinalityAlgorithm.MIN_PRECISION, AbstractCardinalityAlgorithm.MAX_PRECISION);\n        try {\n            for (int i = 0; i < whenToBreak + 1; ++i) {\n                final HyperLogLogPlusPlusSparse subject = new HyperLogLogPlusPlusSparse(p, bigArrays, 1);\n                subject.close();\n            }\n            fail(\"Must fail\");\n        } catch (CircuitBreakingException e) {\n            \r\n        }\n\n        assertThat(total.get(), CoreMatchers.equalTo(0L));\n    }\n","date":"2021-01-06 01:15:22","endLine":122,"groupId":"105354","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCircuitBreakerOnConstruction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/cef48987f8082dd92a9ca6482927649cd8ece0.src","preCode":"    public void testCircuitBreakerOnConstruction() {\n        int whenToBreak = randomInt(10);\n        AtomicLong total = new AtomicLong();\n        CircuitBreakerService breakerService = mock(CircuitBreakerService.class);\n        when(breakerService.getBreaker(CircuitBreaker.REQUEST)).thenReturn(new NoopCircuitBreaker(CircuitBreaker.REQUEST) {\n            private int countDown = whenToBreak;\n            @Override\n            public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws CircuitBreakingException {\n                if (countDown-- == 0) {\n                    throw new CircuitBreakingException(\"test error\", bytes, Long.MAX_VALUE, Durability.TRANSIENT);\n                }\n                total.addAndGet(bytes);\n                return total.get();\n            }\n\n            @Override\n            public long addWithoutBreaking(long bytes) {\n                total.addAndGet(bytes);\n                return total.get();\n            }\n        });\n        BigArrays bigArrays = new BigArrays(null, breakerService, CircuitBreaker.REQUEST).withCircuitBreaking();\n        final int p = randomIntBetween(AbstractCardinalityAlgorithm.MIN_PRECISION, AbstractCardinalityAlgorithm.MAX_PRECISION);\n        try {\n            for (int i = 0; i < whenToBreak + 1; ++i) {\n                final HyperLogLogPlusPlusSparse subject = new HyperLogLogPlusPlusSparse(p, bigArrays, 1);\n                subject.close();\n            }\n            fail(\"Must fail\");\n        } catch (CircuitBreakingException e) {\n            \r\n        }\n\n        assertThat(total.get(), CoreMatchers.equalTo(0L));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/HyperLogLogPlusPlusSparseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"1bd9fa206c0992484bfc0f5e6243f409ea98a6e5","commitMessage":"@@@Remove return from breakers (#66943)\n\nThis removes the return values from `CircuitBreaker`'s\n`addEstimateBytesAndMaybeBreak` and `addWithoutBreaking` because they\nare not supported by the new pre-allocating `CircuitBreaker` and they\naren't used for anything other than tests.","date":"2021-01-06 01:15:22","modifiedFileCount":"12","status":"M","submitter":"Nik Everett"}]
