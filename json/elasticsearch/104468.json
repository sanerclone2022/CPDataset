[{"authorTime":"2018-10-24 00:43:46","codes":[{"authorDate":"2018-10-24 00:43:46","commitOrder":2,"curCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n       trackingProcessor.execute(ingestDocument);\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2018-10-24 00:43:46","endLine":310,"groupId":"12472","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithTrueConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/047283ed1bb4ca5add784bb6dfc1cae45b4fb7.src","preCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n       trackingProcessor.execute(ingestDocument);\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"B"},{"authorDate":"2018-10-24 00:43:46","commitOrder":2,"curCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> trackingProcessor.execute(ingestDocument));\n        assertThat(exception.getCause(), instanceOf(IllegalArgumentException.class));\n        assertThat(exception.getCause().getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","date":"2018-10-24 00:43:46","endLine":464,"groupId":"1746","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2c/047283ed1bb4ca5add784bb6dfc1cae45b4fb7.src","preCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> trackingProcessor.execute(ingestDocument));\n        assertThat(exception.getCause(), instanceOf(IllegalArgumentException.class));\n        assertThat(exception.getCause().getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"MB"}],"commitId":"62ac2fa5ec57a4701323d1c2a0077e2179a7d422","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-10-24 00:43:46","modifiedFileCount":"121","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-09-25 22:03:06","codes":[{"authorDate":"2019-09-25 22:03:06","commitOrder":3,"curCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2019-09-25 22:03:06","endLine":307,"groupId":"12472","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithTrueConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/afb13deaface07d2ede6a1f1419cfd7f79acf5.src","preCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n       trackingProcessor.execute(ingestDocument);\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2019-09-25 22:03:06","commitOrder":3,"curCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        ElasticsearchException exception = (ElasticsearchException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalArgumentException.class));\n        assertThat(exception.getCause().getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","date":"2019-09-25 22:03:06","endLine":463,"groupId":"1746","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/afb13deaface07d2ede6a1f1419cfd7f79acf5.src","preCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        ElasticsearchException exception = expectThrows(ElasticsearchException.class, () -> trackingProcessor.execute(ingestDocument));\n        assertThat(exception.getCause(), instanceOf(IllegalArgumentException.class));\n        assertThat(exception.getCause().getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"M"}],"commitId":"2c7fd822930b4ecb651d1903d99798e6f0c504b2","commitMessage":"@@@Allow ingest processors to execute in a non blocking manner. (#46241)\n\nThis PR changes the ingest executing to be non blocking\nby adding an additional method to the Processor interface\nthat accepts a BiConsumer as handler and changing\nIngestService#executeBulkRequest(...) to ingest document\nin a non blocking fashion iff a processor executes\nin a non blocking fashion.\n\nThis is the second PR that merges changes made to server module from\nthe enrich branch (see #32789) into the master branch.\n\nThe plan is to merge changes made to the server module separately from\nthe pr that will merge enrich into master.  so that these changes can\nbe reviewed in isolation.\n\nThis change originates from the enrich branch and was introduced there\nin #43361.","date":"2019-09-25 22:03:06","modifiedFileCount":"20","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2019-11-02 03:11:18","codes":[{"authorDate":"2019-09-25 22:03:06","commitOrder":4,"curCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2019-09-25 22:03:06","endLine":307,"groupId":"12472","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithTrueConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/afb13deaface07d2ede6a1f1419cfd7f79acf5.src","preCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"N"},{"authorDate":"2019-11-02 03:11:18","commitOrder":4,"curCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        ElasticsearchException exception = (ElasticsearchException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","date":"2019-11-02 03:11:18","endLine":462,"groupId":"1746","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/840b9e4bb481ed0b7769db654ca7bbd68a3657.src","preCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        ElasticsearchException exception = (ElasticsearchException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalArgumentException.class));\n        assertThat(exception.getCause().getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"M"}],"commitId":"a565b2d52600a282bb798e6ec2b4c0c6afaa04cb","commitMessage":"@@@Do not wrap ingest processor exception with IAE (#48816)\n\nThe problem with wrapping here is that it converts any exception into an\nIAE.  which we treat as a client error (400 status) whereas the exception\nbeing wrapped here could be a server error (e.g..  NPE). This commit\nstops wrapping all ingest processor exceptions as IAEs.","date":"2019-11-02 03:11:18","modifiedFileCount":"5","status":"M","submitter":"Jason Tedor"},{"authorTime":"2019-11-14 23:53:08","codes":[{"authorDate":"2019-09-25 22:03:06","commitOrder":5,"curCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2019-09-25 22:03:06","endLine":307,"groupId":"12472","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithTrueConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/afb13deaface07d2ede6a1f1419cfd7f79acf5.src","preCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"N"},{"authorDate":"2019-11-14 23:53:08","commitOrder":5,"curCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","date":"2019-11-14 23:53:08","endLine":461,"groupId":"1746","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/9e44e387baf47d927c00daf291b53d93827e96.src","preCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        ElasticsearchException exception = (ElasticsearchException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"M"}],"commitId":"d4e82d4020873dd58fa5db0c5ed88db9eac60739","commitMessage":"@@@Introduce dedicated ingest processor exception (#48810)\n\nToday we wrap exceptions that occur while executing an ingest processor\nin an ElasticsearchException. Today.  in ExceptionsHelper#unwrapCause we\nonly unwrap causes for exceptions that implement\nElasticsearchWrapperException.  which the top-level\nElasticsearchException does not. Ultimately.  this means that any\nexception that occurs during processor execution does not have its cause\nunwrapped.  and so its status is blanket treated as a 500. This means\nthat while executing a bulk request with an ingest pipeline. \ndocument-level failures that occur during a processor will cause the\nstatus for that document to be treated as 500. Since that does not give\nthe client any indication that they made a mistake.  it means some\nclients will enter infinite retries.  thinking that there is some\nserver-side problem that merely needs to clear. This commit addresses\nthis by introducing a dedicated ingest processor exception.  so that its\ncauses can be unwrapped. While we could consider a broader change to\nunwrap causes for more than just ElasticsearchWrapperExceptions.  that is\na broad change with unclear implications. Since the problem of reporting\n500s on client errors is a user-facing bug.  we take the conservative\napproach for now.  and we can revisit the unwrapping in a future change.","date":"2019-11-14 23:53:08","modifiedFileCount":"7","status":"M","submitter":"Jason Tedor"},{"authorTime":"2019-11-27 20:45:11","codes":[{"authorDate":"2019-11-27 20:45:11","commitOrder":6,"curCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2019-11-27 20:45:11","endLine":306,"groupId":"12472","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithTrueConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/6d4742b991bf6105bf7a66ab8c005a41ca2a1a.src","preCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2019-11-27 20:45:11","commitOrder":6,"curCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","date":"2019-11-27 20:45:11","endLine":461,"groupId":"1746","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/6d4742b991bf6105bf7a66ab8c005a41ca2a1a.src","preCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = mock(IngestService.class);\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"M"}],"commitId":"88aea2107dc0591d3954b4696f473b95e128fcf7","commitMessage":"@@@Add templating support to pipeline processor. (#49030)\n\nThis commit adds templating support to the pipeline processor's `name` option.\n\nCloses #39955","date":"2019-11-27 20:45:11","modifiedFileCount":"6","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2019-11-27 20:45:11","codes":[{"authorDate":"2020-01-15 23:17:05","commitOrder":7,"curCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId1);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2020-01-15 23:17:05","endLine":308,"groupId":"12472","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithTrueConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ef/4613ce2ffd1bb722e28bf2de36ac9e4540eb59.src","preCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2019-11-27 20:45:11","commitOrder":7,"curCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","date":"2019-11-27 20:45:11","endLine":461,"groupId":"1746","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/6d4742b991bf6105bf7a66ab8c005a41ca2a1a.src","preCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"N"}],"commitId":"2b2935fd52368928307ff2e8614e9d4e4b56e027","commitMessage":"@@@Add pipeline name to ingest metadata (#50467)\n\nThis commit adds the name of the current pipeline to ingest metadata.\nThis pipeline name is accessible under the following key: '_ingest.pipeline'.\n\nExample usage in pipeline:\nPUT /_ingest/pipeline/2\n{\n    \"processors\": [\n        {\n            \"set\": {\n                \"field\": \"pipeline_name\". \n                \"value\": \"{{_ingest.pipeline}}\"\n            }\n        }\n    ]\n}\n\nCloses #42106","date":"2020-01-15 23:17:05","modifiedFileCount":"6","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2020-05-13 03:36:16","codes":[{"authorDate":"2020-05-13 03:36:16","commitOrder":8,"curCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId1);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2020-05-13 03:36:16","endLine":349,"groupId":"12472","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithTrueConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/ec8a5fcde0062c0dce0c265a0ef597f3532496.src","preCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId1);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"},{"authorDate":"2020-05-13 03:36:16","commitOrder":8,"curCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","date":"2020-05-13 03:36:16","endLine":506,"groupId":"1746","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5a/ec8a5fcde0062c0dce0c265a0ef597f3532496.src","preCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":475,"status":"M"}],"commitId":"db2c82c5a52b5c5b4dbaebaf9b6c8d41961608fc","commitMessage":"@@@Fix ingest simulate verbose on failure with conditional (#56478)\n\nIf a conditional is added to a processor.  and that processor fails.  and \nthat processor has an on_failure handler.  the full trace of all of the \nexecuted processors may not be displayed in simulate verbose. The \ninformation is correct.  but misses displaying some of the steps used \nto get there.\n\nThis happens because a processor that is conditional processor is a \nwrapper around the real processor and a processor with an on_failure \nhandler is also a wrapper around the processor(s). When decorating for \nsimulation we treat compound processor specially.  but if a compound processor\nis wrapped by a conditional processor that compound processor's processors \ncan be missed for decoration resulting in the missing displayed steps.\n\nThe fix to this is to treat the conditional processor specially and\nexplicitly seperate it from the processor it is wrapping. This requires\nus to keep track of 2 processors a possible conditional processor and\nthe actual processor it may be wrapping.\n\nrelated: #56004","date":"2020-05-13 03:36:16","modifiedFileCount":"3","status":"M","submitter":"Jake Landis"},{"authorTime":"2020-06-16 05:08:29","codes":[{"authorDate":"2020-06-16 05:08:29","commitOrder":9,"curCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                null,\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId1);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2020-06-16 05:08:29","endLine":352,"groupId":"9252","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithTrueConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/e1e6d32559bb0a4ae068f2fc14a817960c2718.src","preCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId1);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"},{"authorDate":"2020-06-16 05:08:29","commitOrder":9,"curCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","date":"2020-06-16 05:08:29","endLine":510,"groupId":"38796","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/e1e6d32559bb0a4ae068f2fc14a817960c2718.src","preCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":479,"status":"M"}],"commitId":"69a6a18d8dc3f95001cfe6f55c1451ac616f7e84","commitMessage":"@@@Add optional description parameter to ingest processors. (#57906)\n\nThis commit adds an optional field.  `description`.  to all ingest processors\nso that users can explain the purpose of the specific processor instance.\n\nCloses #56000.","date":"2020-06-16 05:08:29","modifiedFileCount":"125","status":"M","submitter":"Tal Levy"},{"authorTime":"2020-06-16 05:08:29","codes":[{"authorDate":"2020-07-22 18:29:36","commitOrder":10,"curCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                null,\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId1);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","date":"2020-07-22 18:29:36","endLine":362,"groupId":"9252","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithTrueConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/6aa815c916bf345279c803b11cb6c9d62068a5.src","preCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                null,\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId1);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"},{"authorDate":"2020-06-16 05:08:29","commitOrder":10,"curCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","date":"2020-06-16 05:08:29","endLine":510,"groupId":"38796","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/e1e6d32559bb0a4ae068f2fc14a817960c2718.src","preCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":479,"status":"N"}],"commitId":"5fcef9a90090b170ef0e963f3e3e56b6fdeaf2d9","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-22 18:29:36","modifiedFileCount":"81","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-06-16 05:08:29","codes":[{"authorDate":"2020-08-06 04:58:53","commitOrder":11,"curCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                null,\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), \"pipeline1\", null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), \"pipeline0\", null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getType(), actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument, null);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId1);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n\n        assertThat(resultList.size(), equalTo(5));\n\n        assertNull(resultList.get(0).getConditionalWithResult());\n        assertThat(resultList.get(0).getType(), equalTo(\"pipeline\"));\n        assertThat(resultList.get(0).getProcessorTag(), equalTo(\"pipeline0\"));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getConditionalWithResult().v1(), equalTo(scriptName));\n        assertThat(resultList.get(2).getConditionalWithResult().v2(), is(Boolean.TRUE));\n        assertThat(resultList.get(2).getType(), equalTo(\"pipeline\"));\n        assertThat(resultList.get(2).getProcessorTag(), equalTo(\"pipeline1\"));\n\n        assertTrue(resultList.get(3).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(3).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(3).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(4).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(4).getFailure(), nullValue());\n        assertThat(resultList.get(4).getProcessorTag(), nullValue());\n    }\n","date":"2020-08-06 04:58:53","endLine":381,"groupId":"38800","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithTrueConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2d/5a6f184aa7ac47e10590ac509a41df2ecdc1ff.src","preCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                null,\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), null, null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId1);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n        assertThat(resultList.size(), equalTo(3));\n\n        assertTrue(resultList.get(0).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(0).getIngestDocument().hasField(key3));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(2).getFailure(), nullValue());\n        assertThat(resultList.get(2).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"},{"authorDate":"2020-06-16 05:08:29","commitOrder":11,"curCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","date":"2020-06-16 05:08:29","endLine":510,"groupId":"38796","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testActualPipelineProcessorWithCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/e1e6d32559bb0a4ae068f2fc14a817960c2718.src","preCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":479,"status":"N"}],"commitId":"45402118936d96100445723a849c869627cf1dc2","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-06 04:58:53","modifiedFileCount":"224","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-08-11 21:30:36","codes":[{"authorDate":"2021-08-11 21:30:36","commitOrder":12,"curCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                null,\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), \"pipeline1\", null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), \"pipeline0\", null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getType(), actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument, null);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId1);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n\n        assertThat(resultList.size(), equalTo(5));\n\n        assertNull(resultList.get(0).getConditionalWithResult());\n        assertThat(resultList.get(0).getType(), equalTo(\"pipeline\"));\n        assertThat(resultList.get(0).getProcessorTag(), equalTo(\"pipeline0\"));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getConditionalWithResult().v1(), equalTo(scriptName));\n        assertThat(resultList.get(2).getConditionalWithResult().v2(), is(Boolean.TRUE));\n        assertThat(resultList.get(2).getType(), equalTo(\"pipeline\"));\n        assertThat(resultList.get(2).getProcessorTag(), equalTo(\"pipeline1\"));\n\n        assertTrue(resultList.get(3).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(3).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(3).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(4).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(4).getFailure(), nullValue());\n        assertThat(resultList.get(4).getProcessorTag(), nullValue());\n    }\n","date":"2021-08-11 21:30:36","endLine":370,"groupId":"104468","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"testActualPipelineProcessorWithTrueConditional","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/e0928871ec5cd71d90fa61cb3b752e6e3d25bf.src","preCode":"    public void testActualPipelineProcessorWithTrueConditional() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        String key1 = randomAlphaOfLength(10);\n        String key2 = randomAlphaOfLength(10);\n        String key3 = randomAlphaOfLength(10);\n\n        String scriptName = \"conditionalScript\";\n\n        ScriptService scriptService = new ScriptService(Settings.builder().build(), Collections.singletonMap(Script.DEFAULT_SCRIPT_LANG,\n            new MockScriptEngine(Script.DEFAULT_SCRIPT_LANG, Collections.singletonMap(scriptName, ctx -> true), Collections.emptyMap())),\n            new HashMap<>(ScriptModule.CORE_CONTEXTS)\n        );\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key1, randomInt()); }),\n            new ConditionalProcessor(\n                randomAlphaOfLength(10),\n                null,\n                new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, scriptName, Collections.emptyMap()), scriptService,\n                factory.create(Collections.emptyMap(), \"pipeline1\", null, pipelineConfig2)),\n            new TestProcessor(ingestDocument -> {ingestDocument.setFieldValue(key3, randomInt()); })\n        )\n        );\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(\n                new TestProcessor(ingestDocument -> { ingestDocument.setFieldValue(key2, randomInt()); })));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), \"pipeline0\", null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        trackingProcessor.execute(ingestDocument, (result, e) -> {});\n\n        SimulateProcessorResult expectedResult = new SimulateProcessorResult(actualProcessor.getType(), actualProcessor.getTag(),\n            actualProcessor.getDescription(), ingestDocument, null);\n        expectedResult.getIngestDocument().getIngestMetadata().put(\"pipeline\", pipelineId1);\n\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId1);\n        verify(ingestService, Mockito.atLeast(1)).getPipeline(pipelineId2);\n\n        assertThat(resultList.size(), equalTo(5));\n\n        assertNull(resultList.get(0).getConditionalWithResult());\n        assertThat(resultList.get(0).getType(), equalTo(\"pipeline\"));\n        assertThat(resultList.get(0).getProcessorTag(), equalTo(\"pipeline0\"));\n\n        assertTrue(resultList.get(1).getIngestDocument().hasField(key1));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(1).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(2).getConditionalWithResult().v1(), equalTo(scriptName));\n        assertThat(resultList.get(2).getConditionalWithResult().v2(), is(Boolean.TRUE));\n        assertThat(resultList.get(2).getType(), equalTo(\"pipeline\"));\n        assertThat(resultList.get(2).getProcessorTag(), equalTo(\"pipeline1\"));\n\n        assertTrue(resultList.get(3).getIngestDocument().hasField(key1));\n        assertTrue(resultList.get(3).getIngestDocument().hasField(key2));\n        assertFalse(resultList.get(3).getIngestDocument().hasField(key3));\n\n        assertThat(resultList.get(4).getIngestDocument(), equalTo(expectedResult.getIngestDocument()));\n        assertThat(resultList.get(4).getFailure(), nullValue());\n        assertThat(resultList.get(4).getProcessorTag(), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"},{"authorDate":"2021-08-11 21:30:36","commitOrder":12,"curCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","date":"2021-08-11 21:30:36","endLine":572,"groupId":"104468","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"testActualPipelineProcessorWithCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0e/e0928871ec5cd71d90fa61cb3b752e6e3d25bf.src","preCode":"    public void testActualPipelineProcessorWithCycle() throws Exception {\n        String pipelineId1 = \"pipeline1\";\n        String pipelineId2 = \"pipeline2\";\n        IngestService ingestService = createIngestService();\n        Map<String, Object> pipelineConfig0 = new HashMap<>();\n        pipelineConfig0.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig1 = new HashMap<>();\n        pipelineConfig1.put(\"name\", pipelineId1);\n        Map<String, Object> pipelineConfig2 = new HashMap<>();\n        pipelineConfig2.put(\"name\", pipelineId2);\n        PipelineProcessor.Factory factory = new PipelineProcessor.Factory(ingestService);\n\n        Pipeline pipeline1 = new Pipeline(\n            pipelineId1, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig2)));\n\n        Pipeline pipeline2 = new Pipeline(\n            pipelineId2, null, null, new CompoundProcessor(factory.create(Collections.emptyMap(), null, null, pipelineConfig1)));\n\n        when(ingestService.getPipeline(pipelineId1)).thenReturn(pipeline1);\n        when(ingestService.getPipeline(pipelineId2)).thenReturn(pipeline2);\n\n        PipelineProcessor pipelineProcessor = factory.create(Collections.emptyMap(), null, null, pipelineConfig0);\n        CompoundProcessor actualProcessor = new CompoundProcessor(pipelineProcessor);\n\n        CompoundProcessor trackingProcessor = decorate(actualProcessor, null, resultList);\n\n        Exception[] holder = new Exception[1];\n        trackingProcessor.execute(ingestDocument, (result, e) -> holder[0] = e);\n        IngestProcessorException exception = (IngestProcessorException) holder[0];\n        assertThat(exception.getCause(), instanceOf(IllegalStateException.class));\n        assertThat(exception.getMessage(), containsString(\"Cycle detected for pipeline: pipeline1\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/ingest/TrackingResultProcessorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":541,"status":"M"}],"commitId":"498684a696fb2d81689a9c5e51fbc3c370e234f6","commitMessage":"@@@Add support for _meta field to ingest pipelines (#75905)\n\nWe are adding a _meta field to many of our REST APIs so that users can attach whatever metadata they\nwant. The data in this field will not be used by Elasticsearch. This commit add the _meta field to ingest\npipelines.","date":"2021-08-11 21:30:36","modifiedFileCount":"13","status":"M","submitter":"Keith Massey"}]
