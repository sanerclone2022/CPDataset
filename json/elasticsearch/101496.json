[{"authorTime":"2020-03-27 03:01:07","codes":[{"authorDate":"2020-03-27 03:01:07","commitOrder":1,"curCode":"    protected ValuesSourceConfig resolveConfig(QueryShardContext queryShardContext) {\n        ValuesSourceConfig config;\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(queryShardContext.getMapperService());\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper != null) {\n            parentFilter = parentIdFieldMapper.getParentFilter();\n            childFilter = parentIdFieldMapper.getChildFilter(childType);\n            MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n            config = ValuesSourceConfig.resolveFieldOnly(fieldType, queryShardContext);\n        } else {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), queryShardContext);\n        }\n        return config;\n    }\n","date":"2020-03-27 03:01:07","endLine":123,"groupId":"55209","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"resolveConfig","params":"(QueryShardContextqueryShardContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f9/20965e178cd1e5155a756145d1fc73be363e89.src","preCode":"    protected ValuesSourceConfig resolveConfig(QueryShardContext queryShardContext) {\n        ValuesSourceConfig config;\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(queryShardContext.getMapperService());\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper != null) {\n            parentFilter = parentIdFieldMapper.getParentFilter();\n            childFilter = parentIdFieldMapper.getChildFilter(childType);\n            MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n            config = ValuesSourceConfig.resolveFieldOnly(fieldType, queryShardContext);\n        } else {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), queryShardContext);\n        }\n        return config;\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregationBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"},{"authorDate":"2020-03-27 03:01:07","commitOrder":1,"curCode":"    protected ValuesSourceConfig resolveConfig(QueryShardContext queryShardContext) {\n        ValuesSourceConfig config;\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(queryShardContext.getMapperService());\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper != null) {\n            parentFilter = parentIdFieldMapper.getParentFilter();\n            childFilter = parentIdFieldMapper.getChildFilter(childType);\n            MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n            config = ValuesSourceConfig.resolveFieldOnly(fieldType, queryShardContext);\n        } else {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), queryShardContext);\n        }\n        return config;\n    }\n","date":"2020-03-27 03:01:07","endLine":123,"groupId":"55209","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveConfig","params":"(QueryShardContextqueryShardContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8e/edf429fa5d754fffa74888bddf1731bc916695.src","preCode":"    protected ValuesSourceConfig resolveConfig(QueryShardContext queryShardContext) {\n        ValuesSourceConfig config;\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(queryShardContext.getMapperService());\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper != null) {\n            parentFilter = parentIdFieldMapper.getParentFilter();\n            childFilter = parentIdFieldMapper.getChildFilter(childType);\n            MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n            config = ValuesSourceConfig.resolveFieldOnly(fieldType, queryShardContext);\n        } else {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), queryShardContext);\n        }\n        return config;\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregationBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"a90c1de8745681356a6516f4f22a8c40f71f6b12","commitMessage":"@@@Add ValuesSource Registry and associated logic (#54281)\n\n* Remove ValuesSourceType argument to ValuesSourceAggregationBuilder (#48638)\n\n* ValuesSourceRegistry Prototype (#48758)\n\n* Remove generics from ValuesSource related classes (#49606)\n\n* fix percentile aggregation tests (#50712)\n\n* Basic thread safety for ValuesSourceRegistry (#50340)\n\n* Remove target value type from ValuesSourceAggregationBuilder (#49943)\n\n* Cleanup default values source type (#50992)\n\n* CoreValuesSourceType no longer implements Writable (#51276)\n\n* Remove genereics & hard coded ValuesSource references from Matrix Stats (#51131)\n\n* Put values source types on fields (#51503)\n\n* Remove VST Any (#51539)\n\n* Rewire terms agg to use new VS registry (#51182)\n\nAlso adds some basic AggTestCases for untested code\npaths (and boilerplate for future tests once the IT are\nconverted over)\n\n* Wire Cardinality aggregation to work with the ValuesSourceRegistry (#51337)\n\n* Wire Percentiles aggregator into new VS framework (#51639)\n\nThis required a bit of a refactor to percentiles itself.  Before. \nthe Builder would switch on the chosen algo to generate an\nalgo-specific factory.  This doesn't work (or at least.  would be\ndifficult) in the new VS framework.\n\nThis refactor consolidates both factories together and introduces\na PercentilesConfig object to act as a standardized way to pass\nalgo-specific parameters through the factory.  This object\nis then used when deciding which kind of aggregator to create\n\nNote: CoreValuesSourceType.HISTOGRAM still lives in core.  and will\nbe moved in a subsequent PR.\n\n* Remove generics and target value type from MultiVSAB (#51647)\n\n* fix checkstyle after merge (#52008)\n\n* Plumb ValuesSourceRegistry through to QuerySearchContext (#51710)\n\n* Convert RareTerms to new VS registry (#52166)\n\n* Wire up Value Count (#52225)\n\n* Wire up Max & Min aggregations (#52219)\n\n* ValuesSource refactoring: Wire up Sum aggregation (#52571)\n\n* ValuesSource refactoring: Wire up SigTerms aggregation (#52590)\n\n* Soft immutability for VSConfig (#52729)\n\n* Unmute testSupportedFieldTypes.  fix Percentiles/Ranks/Terms tests (#52734)\n\nAlso fixes Percentiles which was incorrectly specified to only accept\nnumeric.  but in fact also accepts Boolean and Date (because those are\nnumeric on master - thanks `testSupportedFieldTypes` for catching it!)\n\n* VS refactoring: Wire up stats aggregation (#52891)\n\n* ValuesSource refactoring: Wire up string_stats aggregation (#52875)\n\n* VS refactoring: Wire up median (MAD) aggregation (#52945)\n\n* fix valuesourcetype issue with constant_keyword field (#53041)\n\nthis commit implements `getValuesSourceType` for\nthe ConstantKeyword field type.\n\nmaster was merged into feature/extensible-values-source\nintroducing a new field type that was not implementing\n`getValuesSourceType`.\n\n* ValuesSource refactoring: Wire up Avg aggregation (#52752)\n\n* Wire PercentileRanks aggregator into new VS framework  (#51693)\n\n* Add a VSConfig resolver for aggregations not using the registry (#53038)\n\n* Vs refactor wire up ranges and date ranges (#52918)\n\n* Wire up geo_bounds aggregation to ValuesSourceRegistry (#53034)\n\nThis commit updates the geo_bounds aggregation to depend\non registering itself in the ValuesSourceRegistry\n\nrelates #42949.\n\n* VS refactoring: convert Boxplot to new registry (#53132)\n\n* Wire-up geotile_grid and geohash_grid to ValuesSourceRegistry (#53037)\n\nThis commit updates the geo*_grid aggregations to depend\non registering itself in the ValuesSourceRegistry\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Wire-up geo_centroid agg to ValuesSourceRegistry (#53040)\n\nThis commit updates the geo_centroid aggregation to depend\non registering itself in the ValuesSourceRegistry.\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Fix type tests for Missing aggregation (#53501)\n\n* ValuesSource Refactor: move histo VSType into XPack module (#53298)\n\n- Introduces a new API (`getBareAggregatorRegistrar()`) which allows plugins to register aggregations against existing agg definitions defined in Core.\n- This moves the histogram VSType over to XPack where it belongs. `getHistogramValues()` still remains as a Core concept\n- Moves the histo-specific bits over to xpack (e.g. the actual aggregator logic). This requires extra boilerplate since we need to create a new \"Analytics\" Percentile/Rank aggregators to deal with the histo field. Doubly-so since percentiles/ranks are extra boiler-plate'y... should be much lighter for other aggs\n\n* Wire up DateHistogram to the ValuesSourceRegistry (#53484)\n\n* Vs refactor parser cleanup (#53198)\n\nCo-authored-by: Zachary Tong <polyfractal@elastic.co>\nCo-authored-by: Zachary Tong <zach@elastic.co>\nCo-authored-by: Christos Soulios <1561376+csoulios@users.noreply.github.com>\nCo-authored-by: Tal Levy <JubBoy333@gmail.com>","date":"2020-03-27 03:01:07","modifiedFileCount":"214","status":"B","submitter":"Mark Tozzi"},{"authorTime":"2020-07-10 21:44:56","codes":[{"authorDate":"2020-03-27 03:01:07","commitOrder":2,"curCode":"    protected ValuesSourceConfig resolveConfig(QueryShardContext queryShardContext) {\n        ValuesSourceConfig config;\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(queryShardContext.getMapperService());\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper != null) {\n            parentFilter = parentIdFieldMapper.getParentFilter();\n            childFilter = parentIdFieldMapper.getChildFilter(childType);\n            MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n            config = ValuesSourceConfig.resolveFieldOnly(fieldType, queryShardContext);\n        } else {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), queryShardContext);\n        }\n        return config;\n    }\n","date":"2020-03-27 03:01:07","endLine":123,"groupId":"55209","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"resolveConfig","params":"(QueryShardContextqueryShardContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f9/20965e178cd1e5155a756145d1fc73be363e89.src","preCode":"    protected ValuesSourceConfig resolveConfig(QueryShardContext queryShardContext) {\n        ValuesSourceConfig config;\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(queryShardContext.getMapperService());\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper != null) {\n            parentFilter = parentIdFieldMapper.getParentFilter();\n            childFilter = parentIdFieldMapper.getChildFilter(childType);\n            MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n            config = ValuesSourceConfig.resolveFieldOnly(fieldType, queryShardContext);\n        } else {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), queryShardContext);\n        }\n        return config;\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregationBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"N"},{"authorDate":"2020-07-10 21:44:56","commitOrder":2,"curCode":"    protected ValuesSourceConfig resolveConfig(QueryShardContext queryShardContext) {\n        ValuesSourceConfig config;\n\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(queryShardContext.getMapperService());\n        if (parentJoinFieldMapper == null) {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), queryShardContext);\n            return config;\n        }\n\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper == null) {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), queryShardContext);\n            return config;\n        }\n\n        parentFilter = parentIdFieldMapper.getParentFilter();\n        childFilter = parentIdFieldMapper.getChildFilter(childType);\n        MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n        config = ValuesSourceConfig.resolveFieldOnly(fieldType, queryShardContext);\n        return config;\n    }\n","date":"2020-07-10 21:44:56","endLine":134,"groupId":"4565","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveConfig","params":"(QueryShardContextqueryShardContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/783462bf103b44c71f52fd069bacd6955cf91c.src","preCode":"    protected ValuesSourceConfig resolveConfig(QueryShardContext queryShardContext) {\n        ValuesSourceConfig config;\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(queryShardContext.getMapperService());\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper != null) {\n            parentFilter = parentIdFieldMapper.getParentFilter();\n            childFilter = parentIdFieldMapper.getChildFilter(childType);\n            MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n            config = ValuesSourceConfig.resolveFieldOnly(fieldType, queryShardContext);\n        } else {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), queryShardContext);\n        }\n        return config;\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregationBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"366ca378a8644d6654417988820c67f4feb714fe","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-10 21:44:56","modifiedFileCount":"565","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-10-13 01:11:44","codes":[{"authorDate":"2020-10-13 01:11:44","commitOrder":3,"curCode":"    protected ValuesSourceConfig resolveConfig(AggregationContext context) {\n        ValuesSourceConfig config;\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(context::getFieldType, context::getMapper);\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper != null) {\n            parentFilter = parentIdFieldMapper.getParentFilter();\n            childFilter = parentIdFieldMapper.getChildFilter(childType);\n            MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n            config = ValuesSourceConfig.resolveFieldOnly(fieldType, context);\n        } else {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), context);\n        }\n        return config;\n    }\n","date":"2020-10-13 01:11:44","endLine":128,"groupId":"55209","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"resolveConfig","params":"(AggregationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fd/37aeccdc1c50f5136c1d0164680e2ac571de66.src","preCode":"    protected ValuesSourceConfig resolveConfig(QueryShardContext queryShardContext) {\n        ValuesSourceConfig config;\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(queryShardContext.getMapperService());\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper != null) {\n            parentFilter = parentIdFieldMapper.getParentFilter();\n            childFilter = parentIdFieldMapper.getChildFilter(childType);\n            MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n            config = ValuesSourceConfig.resolveFieldOnly(fieldType, queryShardContext);\n        } else {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), queryShardContext);\n        }\n        return config;\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregationBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2020-10-13 01:11:44","commitOrder":3,"curCode":"    protected ValuesSourceConfig resolveConfig(AggregationContext context) {\n        ValuesSourceConfig config;\n\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(context::getFieldType, context::getMapper);\n        if (parentJoinFieldMapper == null) {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), context);\n            return config;\n        }\n\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper == null) {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), context);\n            return config;\n        }\n\n        parentFilter = parentIdFieldMapper.getParentFilter();\n        childFilter = parentIdFieldMapper.getChildFilter(childType);\n        MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n        config = ValuesSourceConfig.resolveFieldOnly(fieldType, context);\n        return config;\n    }\n","date":"2020-10-13 01:11:44","endLine":135,"groupId":"4565","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveConfig","params":"(AggregationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/81/a41841c1e5627a71077b6eb1d5455080f4c8ea.src","preCode":"    protected ValuesSourceConfig resolveConfig(QueryShardContext queryShardContext) {\n        ValuesSourceConfig config;\n\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(queryShardContext.getMapperService());\n        if (parentJoinFieldMapper == null) {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), queryShardContext);\n            return config;\n        }\n\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper == null) {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), queryShardContext);\n            return config;\n        }\n\n        parentFilter = parentIdFieldMapper.getParentFilter();\n        childFilter = parentIdFieldMapper.getChildFilter(childType);\n        MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n        config = ValuesSourceConfig.resolveFieldOnly(fieldType, queryShardContext);\n        return config;\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregationBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"4aaffc6a3deef28e8dedd3d9211951e3db0e2d8e","commitMessage":"@@@Consider query when optimizing date rounding (#63403)\n\nBefore this change we inspected the index when optimizing\n`date_histogram` aggregations.  precalculating the divisions for the\nbuckets for the entire range of dates on the index so long as there\naren't a ton of these buckets. This works very well when you query all\nof the dates in the index which is quite common - after all.  folks\nfrequently want to query a week of data and have daily indices.\n\nBut it doesn't work as well when the index is much larger than the\nquery. This is quite common when dumping data into ES just to\ninvestigate it but less common in the traditional time series use case.\nBut even there it still happens.  it is just less impactful. Consider\nthe default query produced by Kibana's Discover app: a range of 15\nminutes and a interval of 30 seconds. This optimization saves something\nlike 3 to 12 nanoseconds per document.  so that 15 minutes would have to\nhave hundreds of millions of documents for it to be impactful.\n\nAnyway.  this commit takes the query into account when precalculating the\nbuckets. Mostly this is good when you have \"dirty data\". Immagine\nloading 80 billion docs in an index to investigate them. Most of them\nhave dates around 2015 and 2016 but some have dates in 1970 and\nothers have dates in 2030. These outlier dates are \"dirty\" \"garbage\".\nWell.  without this change a `date_histogram` across many of these docs\nis significantly slowed down because we don't precalculate the range due\nto the outliers. That's just rude! So this change takes the query into\naccount.\n\nThe bulk of the code change here is plumbing the query into place. It\nturns out that its a *ton* of plumbing.  so instead of just adding a\n`Query` member in hundreds of args replace `QueryShardContext` with a\nnew `AggregationContext` which does two things:\n1. Has the top level `Query`.\n2. Exposes just the parts of `QueryShardContext` that we actually need\n   to run aggregation. This lets us simplify a few tests now and will\n   let us simplify many.  many tests later.\n","date":"2020-10-13 01:11:44","modifiedFileCount":"156","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-10-19 19:17:48","codes":[{"authorDate":"2020-10-19 19:17:48","commitOrder":4,"curCode":"    protected ValuesSourceConfig resolveConfig(AggregationContext context) {\n        ValuesSourceConfig config;\n        Joiner joiner = Joiner.getJoiner(context);\n        if (joiner != null && joiner.childTypeExists(childType)) {\n            parentFilter = joiner.parentFilter(childType);\n            childFilter = joiner.filter(childType);\n            MappedFieldType fieldType = context.getFieldType(joiner.parentJoinField(childType));\n            config = ValuesSourceConfig.resolveFieldOnly(fieldType, context);\n        } else {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), context);\n        }\n        return config;\n    }\n","date":"2020-10-19 19:17:48","endLine":126,"groupId":"101496","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"resolveConfig","params":"(AggregationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/5f1fbe1c4908d7edbb4161940bf2a6bc436288.src","preCode":"    protected ValuesSourceConfig resolveConfig(AggregationContext context) {\n        ValuesSourceConfig config;\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(context::getFieldType, context::getMapper);\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper != null) {\n            parentFilter = parentIdFieldMapper.getParentFilter();\n            childFilter = parentIdFieldMapper.getChildFilter(childType);\n            MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n            config = ValuesSourceConfig.resolveFieldOnly(fieldType, context);\n        } else {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), context);\n        }\n        return config;\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ParentAggregationBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2020-10-19 19:17:48","commitOrder":4,"curCode":"    protected ValuesSourceConfig resolveConfig(AggregationContext context) {\n        ValuesSourceConfig config;\n\n        Joiner joiner = Joiner.getJoiner(context);\n        if (joiner == null || joiner.childTypeExists(childType) == false) {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), context);\n            return config;\n        }\n\n        parentFilter = joiner.parentFilter(childType);\n        childFilter = joiner.filter(childType);\n        MappedFieldType fieldType = context.getFieldType(joiner.parentJoinField(childType));\n        config = ValuesSourceConfig.resolveFieldOnly(fieldType, context);\n        return config;\n    }\n","date":"2020-10-19 19:17:48","endLine":127,"groupId":"101496","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveConfig","params":"(AggregationContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/57/89d86a16968fc28ab8768944e6a6ecdb42fb2c.src","preCode":"    protected ValuesSourceConfig resolveConfig(AggregationContext context) {\n        ValuesSourceConfig config;\n\n        ParentJoinFieldMapper parentJoinFieldMapper = ParentJoinFieldMapper.getMapper(context::getFieldType, context::getMapper);\n        if (parentJoinFieldMapper == null) {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), context);\n            return config;\n        }\n\n        ParentIdFieldMapper parentIdFieldMapper = parentJoinFieldMapper.getParentIdFieldMapper(childType, false);\n        if (parentIdFieldMapper == null) {\n            \r\n            config = ValuesSourceConfig.resolveUnmapped(defaultValueSourceType(), context);\n            return config;\n        }\n\n        parentFilter = parentIdFieldMapper.getParentFilter();\n        childFilter = parentIdFieldMapper.getChildFilter(childType);\n        MappedFieldType fieldType = parentIdFieldMapper.fieldType();\n        config = ValuesSourceConfig.resolveFieldOnly(fieldType, context);\n        return config;\n    }\n","realPath":"modules/parent-join/src/main/java/org/elasticsearch/join/aggregations/ChildrenAggregationBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"70d88ef62d7ea287907c98b3f3263e3b08e60f3f","commitMessage":"@@@Rework parent-join to not require access to DocumentMapper (#63738)\n\nParent joins work using a cluster of field mappers: the join field itself;\na set of subfields that allow multiple relationships between parents and\nchildren to be defined; and a metadata field that acts to only allow a\nsingle join field per index to be defined. The various queries and\naggregations that use this infrastructure retrieve the join field mapper\nvia a static method and then build themselves by pulling individual\nrelationship mappers from this main mapper.\n\nUsing mappers rather than MappedFieldTypes means that we need to\nexpose DocumentMapper at search time.  which is something we are\ntrying to avoid. This commit refactors things so that the join relations\nare encapsulated in a Joiner object.  which lives instead on the\nMappedFieldType associated with the metadata join field. Rather than\nusing the ParentJoinFieldMapper and connected ParentIdFieldMappers. \nwe can now build queries and aggregations using this Joiner object. \nretrieved via the QueryShardContext or AggregationContext using\na static helper method on Joiner itself.","date":"2020-10-19 19:17:48","modifiedFileCount":"16","status":"M","submitter":"Alan Woodward"}]
