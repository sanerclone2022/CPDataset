[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.type = parser.text();\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","date":"2018-04-26 03:22:53","endLine":412,"groupId":"33645","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parse","params":"(XContentParserparser@Itemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/e3272ab0a6e4ff5aed1dbf78e679919825268f.src","preCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.type = parser.text();\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) { \r\n                    termVectorsRequest.index = parser.text();\n                } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.type = parser.text();\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":654,"groupId":"17686","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"parseRequest","params":"(TermVectorsRequesttermVectorsRequest@XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/3eb6939da97c05b1cde2c8af08768edc8f0a63.src","preCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) { \r\n                    termVectorsRequest.index = parser.text();\n                } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.type = parser.text();\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-11-17 05:11:39","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.type = parser.text();\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","date":"2018-04-26 03:22:53","endLine":412,"groupId":"33645","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"parse","params":"(XContentParserparser@Itemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/e3272ab0a6e4ff5aed1dbf78e679919825268f.src","preCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.type = parser.text();\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"N"},{"authorDate":"2018-11-17 05:11:39","commitOrder":2,"curCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                    \r\n                    termVectorsRequest.index = parser.text();\n                } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.type = parser.text();\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","date":"2018-11-17 05:11:39","endLine":651,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"parseRequest","params":"(TermVectorsRequesttermVectorsRequest@XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dc/849ca3d1334656d54fcec8a5060b3d53a24619.src","preCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) { \r\n                    termVectorsRequest.index = parser.text();\n                } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.type = parser.text();\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":587,"status":"M"}],"commitId":"22933ebcd5cab852ad144da607253a13cdd98017","commitMessage":"@@@Fix line length for org.elasticsearch.action.* files (#35607)\n\nThis removes the checkstyle suppressions for things in the `action` package.\n\nRelates to #34884\n","date":"2018-11-17 05:11:39","modifiedFileCount":"25","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-12-07 02:23:15","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.type = parser.text();\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","date":"2018-04-26 03:22:53","endLine":412,"groupId":"33645","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"parse","params":"(XContentParserparser@Itemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/e3272ab0a6e4ff5aed1dbf78e679919825268f.src","preCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.type = parser.text();\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"N"},{"authorDate":"2018-12-07 02:23:15","commitOrder":3,"curCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                    \r\n                    termVectorsRequest.index = parser.text();\n                } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.type = parser.text();\n                    deprecationLogger.deprecated(RestTermVectorsAction.TYPES_DEPRECATION_MESSAGE);\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","date":"2018-12-07 02:23:15","endLine":657,"groupId":"9418","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"parseRequest","params":"(TermVectorsRequesttermVectorsRequest@XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/ee23c9a2391dec9b0cfda7aa7bd2d31a32795c.src","preCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                    \r\n                    termVectorsRequest.index = parser.text();\n                } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.type = parser.text();\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"}],"commitId":"3f3cde41d39b20b5b4408716db89bd059ef77561","commitMessage":"@@@Deprecate types in termvector and mtermvector requests. (#36182)\n\n* Add deprecation warnings to `Rest*TermVectorsAction`.  plus tests in `Rest*TermVectorsActionTests`.\n* Deprecate relevant methods on the Java HLRC requests/ responses.\n* Update documentation (for both the REST API and Java HLRC).\n* For each REST yml test.  create one version without types.  and another legacy version that retains types (called *_with_types.yml).","date":"2018-12-07 02:23:15","modifiedFileCount":"12","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2018-12-08 03:21:24","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":4,"curCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.type = parser.text();\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","date":"2018-04-26 03:22:53","endLine":412,"groupId":"33645","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"parse","params":"(XContentParserparser@Itemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/e3272ab0a6e4ff5aed1dbf78e679919825268f.src","preCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.type = parser.text();\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"N"},{"authorDate":"2018-12-08 03:21:24","commitOrder":4,"curCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                    \r\n                    termVectorsRequest.index = parser.text();\n                } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.type = parser.text();\n                    deprecationLogger.deprecatedAndMaybeLog(\"termvectors_with_types\",\n                        RestTermVectorsAction.TYPES_DEPRECATION_MESSAGE);\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","date":"2018-12-08 03:21:24","endLine":658,"groupId":"9418","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"parseRequest","params":"(TermVectorsRequesttermVectorsRequest@XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/cff10f48a4b620ce83f1131106ce4371934258.src","preCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                    \r\n                    termVectorsRequest.index = parser.text();\n                } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.type = parser.text();\n                    deprecationLogger.deprecated(RestTermVectorsAction.TYPES_DEPRECATION_MESSAGE);\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"}],"commitId":"51e1d40dca00385d9b8946fd38c000f226a8830f","commitMessage":"@@@Small improvements related to types deprecation. (#36328)\n\n* Make sure to use deprecatedAndMaybeLog for types deprecation messages.\n* Introduce a common base class for Rest*Action tests.","date":"2018-12-08 03:21:24","modifiedFileCount":"15","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2019-06-05 16:32:48","codes":[{"authorDate":"2019-06-05 16:32:48","commitOrder":5,"curCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","date":"2019-06-05 16:32:48","endLine":404,"groupId":"33645","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"parse","params":"(XContentParserparser@Itemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/71829830b85da56533f400bd01a433bc42f4bc.src","preCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.type = parser.text();\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"},{"authorDate":"2019-06-05 16:32:48","commitOrder":5,"curCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                    \r\n                    termVectorsRequest.index = parser.text();\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","date":"2019-06-05 16:32:48","endLine":605,"groupId":"16999","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"parseRequest","params":"(TermVectorsRequesttermVectorsRequest@XContentParserparser)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0c/f5f78f17a5eafd1dfdb8c3b048794f346455d4.src","preCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                    \r\n                    termVectorsRequest.index = parser.text();\n                } else if (TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.type = parser.text();\n                    deprecationLogger.deprecatedAndMaybeLog(\"termvectors_with_types\",\n                        RestTermVectorsAction.TYPES_DEPRECATION_MESSAGE);\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":543,"status":"M"}],"commitId":"795fa816d9373114b5c1ae94de5608b3801a11f6","commitMessage":"@@@Removes type from TermVectors APIs (#42198)\n\n","date":"2019-06-05 16:32:48","modifiedFileCount":"39","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2021-05-26 14:46:59","codes":[{"authorDate":"2019-06-05 16:32:48","commitOrder":6,"curCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","date":"2019-06-05 16:32:48","endLine":404,"groupId":"33645","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"parse","params":"(XContentParserparser@Itemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/71829830b85da56533f400bd01a433bc42f4bc.src","preCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"N"},{"authorDate":"2021-05-26 14:46:59","commitOrder":6,"curCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser, RestApiVersion restApiVersion)\n        throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                    \r\n                    termVectorsRequest.index = parser.text();\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else if (restApiVersion == RestApiVersion.V_7 && TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    deprecationLogger.compatibleApiWarning(\"termvectors_with_types\",\n                        RestTermVectorsAction.TYPES_DEPRECATION_MESSAGE);\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","date":"2021-05-26 14:46:59","endLine":592,"groupId":"16999","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"parseRequest","params":"(TermVectorsRequesttermVectorsRequest@XContentParserparser@RestApiVersionrestApiVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9f/e2c43872ea4b91d82b8e576c77b563cc0d5abf.src","preCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser) throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                    \r\n                    termVectorsRequest.index = parser.text();\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":526,"status":"M"}],"commitId":"18e30d98bbd2c5825f40e8aa659217bbaab8eb00","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-05-26 14:46:59","modifiedFileCount":"317","status":"M","submitter":"iverase"},{"authorTime":"2021-05-26 14:46:59","codes":[{"authorDate":"2021-07-12 18:08:45","commitOrder":7,"curCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (parser.getRestApiVersion() == RestApiVersion.V_7 &&\n                        TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        deprecationLogger.compatibleApiWarning(\"more_like_this_query_with_types\", TYPES_DEPRECATION_MESSAGE);\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","date":"2021-07-12 18:08:45","endLine":398,"groupId":"33645","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"parse","params":"(XContentParserparser@Itemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/6e12d09b8fd75e0a7e966b9cfa2724aa4c0dad.src","preCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"},{"authorDate":"2021-05-26 14:46:59","commitOrder":7,"curCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser, RestApiVersion restApiVersion)\n        throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                    \r\n                    termVectorsRequest.index = parser.text();\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else if (restApiVersion == RestApiVersion.V_7 && TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    deprecationLogger.compatibleApiWarning(\"termvectors_with_types\",\n                        RestTermVectorsAction.TYPES_DEPRECATION_MESSAGE);\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","date":"2021-05-26 14:46:59","endLine":592,"groupId":"16999","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"parseRequest","params":"(TermVectorsRequesttermVectorsRequest@XContentParserparser@RestApiVersionrestApiVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9f/e2c43872ea4b91d82b8e576c77b563cc0d5abf.src","preCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser, RestApiVersion restApiVersion)\n        throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                    \r\n                    termVectorsRequest.index = parser.text();\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else if (restApiVersion == RestApiVersion.V_7 && TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    deprecationLogger.compatibleApiWarning(\"termvectors_with_types\",\n                        RestTermVectorsAction.TYPES_DEPRECATION_MESSAGE);\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":526,"status":"N"}],"commitId":"ff8aede63a66590c217c0a2236299d12878da433","commitMessage":"@@@[Rest Api Compatibility] MoreLikeThisQuery with types (#75123)\n\npreviously removed in #42198\nalso adding a type for MultiTermVectorsResponse in failures\n\nrelates #54160\nrelates #51816","date":"2021-07-12 18:08:45","modifiedFileCount":"3","status":"M","submitter":"Przemyslaw Gomulka"},{"authorTime":"2021-09-09 18:23:52","codes":[{"authorDate":"2021-09-09 18:23:52","commitOrder":8,"curCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (parser.getRestApiVersion() == RestApiVersion.V_7 &&\n                        TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        deprecationLogger.compatibleCritical(\"more_like_this_query_with_types\", TYPES_DEPRECATION_MESSAGE);\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","date":"2021-09-09 18:23:52","endLine":399,"groupId":"107915","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"parse","params":"(XContentParserparser@Itemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7a/56d94748f817161c13be1a0d3508be43ff070f.src","preCode":"        public static Item parse(XContentParser parser, Item item) throws IOException {\n            XContentParser.Token token;\n            String currentFieldName = null;\n            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n                if (token == XContentParser.Token.FIELD_NAME) {\n                    currentFieldName = parser.currentName();\n                } else if (currentFieldName != null) {\n                    if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.index = parser.text();\n                    } else if (parser.getRestApiVersion() == RestApiVersion.V_7 &&\n                        TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        deprecationLogger.compatibleApiWarning(\"more_like_this_query_with_types\", TYPES_DEPRECATION_MESSAGE);\n                    } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.id = parser.text();\n                    } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.doc = BytesReference.bytes(jsonBuilder().copyCurrentStructure(parser));\n                        item.xContentType = XContentType.JSON;\n                    } else if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                        if (token == XContentParser.Token.START_ARRAY) {\n                            List<String> fields = new ArrayList<>();\n                            while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                                fields.add(parser.text());\n                            }\n                            item.fields(fields.toArray(new String[fields.size()]));\n                        } else {\n                            throw new ElasticsearchParseException(\n                                    \"failed to parse More Like This item. field [fields] must be an array\");\n                        }\n                    } else if (PER_FIELD_ANALYZER.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.perFieldAnalyzer(TermVectorsRequest.readPerFieldAnalyzer(parser.map()));\n                    } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.routing = parser.text();\n                    } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.version = parser.longValue();\n                    } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                        item.versionType = VersionType.fromString(parser.text());\n                    } else {\n                        throw new ElasticsearchParseException(\n                                \"failed to parse More Like This item. unknown field [{}]\", currentFieldName);\n                    }\n                }\n            }\n            if (item.id != null && item.doc != null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. either [id] or [doc] can be specified, but not both!\");\n            }\n            if (item.id == null && item.doc == null) {\n                throw new ElasticsearchParseException(\n                        \"failed to parse More Like This item. neither [id] nor [doc] is specified!\");\n            }\n            return item;\n        }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"M"},{"authorDate":"2021-09-09 18:23:52","commitOrder":8,"curCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser, RestApiVersion restApiVersion)\n        throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                    \r\n                    termVectorsRequest.index = parser.text();\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else if (restApiVersion == RestApiVersion.V_7 && TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    deprecationLogger.compatibleCritical(\"termvectors_with_types\",\n                        RestTermVectorsAction.TYPES_DEPRECATION_MESSAGE);\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","date":"2021-09-09 18:23:52","endLine":594,"groupId":"107915","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"parseRequest","params":"(TermVectorsRequesttermVectorsRequest@XContentParserparser@RestApiVersionrestApiVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/f6125dcbf17c41e9714462a09b4066f086ac60.src","preCode":"    public static void parseRequest(TermVectorsRequest termVectorsRequest, XContentParser parser, RestApiVersion restApiVersion)\n        throws IOException {\n        XContentParser.Token token;\n        String currentFieldName = null;\n        List<String> fields = new ArrayList<>();\n        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {\n            if (token == XContentParser.Token.FIELD_NAME) {\n                currentFieldName = parser.currentName();\n            } else if (currentFieldName != null) {\n                if (FIELDS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (token == XContentParser.Token.START_ARRAY) {\n                        while (parser.nextToken() != XContentParser.Token.END_ARRAY) {\n                            fields.add(parser.text());\n                        }\n                    } else {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. field [fields] must be an array\");\n                    }\n                } else if (OFFSETS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.offsets(parser.booleanValue());\n                } else if (POSITIONS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.positions(parser.booleanValue());\n                } else if (PAYLOADS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.payloads(parser.booleanValue());\n                } else if (currentFieldName.equals(\"term_statistics\") || currentFieldName.equals(\"termStatistics\")) {\n                    termVectorsRequest.termStatistics(parser.booleanValue());\n                } else if (currentFieldName.equals(\"field_statistics\") || currentFieldName.equals(\"fieldStatistics\")) {\n                    termVectorsRequest.fieldStatistics(parser.booleanValue());\n                } else if (DFS.match(currentFieldName, parser.getDeprecationHandler())) {\n                    throw new IllegalArgumentException(\"distributed frequencies is not supported anymore for term vectors\");\n                } else if (currentFieldName.equals(\"per_field_analyzer\") || currentFieldName.equals(\"perFieldAnalyzer\")) {\n                    termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));\n                } else if (FILTER.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.filterSettings(readFilterSettings(parser));\n                } else if (INDEX.match(currentFieldName, parser.getDeprecationHandler())) {\n                    \r\n                    termVectorsRequest.index = parser.text();\n                } else if (ID.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.doc != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.id = parser.text();\n                } else if (DOC.match(currentFieldName, parser.getDeprecationHandler())) {\n                    if (termVectorsRequest.id != null) {\n                        throw new ElasticsearchParseException(\"failed to parse term vectors request. \" +\n                            \"either [id] or [doc] can be specified, but not both!\");\n                    }\n                    termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));\n                } else if (ROUTING.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.routing = parser.text();\n                } else if (VERSION.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.version = parser.longValue();\n                } else if (VERSION_TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    termVectorsRequest.versionType = VersionType.fromString(parser.text());\n                } else if (restApiVersion == RestApiVersion.V_7 && TYPE.match(currentFieldName, parser.getDeprecationHandler())) {\n                    deprecationLogger.compatibleApiWarning(\"termvectors_with_types\",\n                        RestTermVectorsAction.TYPES_DEPRECATION_MESSAGE);\n                } else {\n                    throw new ElasticsearchParseException(\"failed to parse term vectors request. unknown field [{}]\", currentFieldName);\n                }\n            }\n        }\n        if (fields.size() > 0) {\n            String[] fieldsAsArray = new String[fields.size()];\n            termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/action/termvectors/TermVectorsRequest.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":528,"status":"M"}],"commitId":"0d3cebe812080ea153d124b313fb2c184c7df75b","commitMessage":"@@@Change default deprecation logger level to CRITICAL (#77030)\n\nThis commit changes default deprecation logger level to CRITICAL.  where default means deprecations emitted by DeprecationLogger#critical method.\nIt also introduces WARN deprecations which are emitted by DeprecationLogger#warn Those log lines emitted at WARN are meant to indicate that a functionality is deprecated but will not break at next major version.\nrelates #76754","date":"2021-09-09 18:23:52","modifiedFileCount":"122","status":"M","submitter":"Przemyslaw Gomulka"}]
