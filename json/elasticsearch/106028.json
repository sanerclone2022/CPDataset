[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService(settings.getSettings());\n        ActionModule actionModule = new ActionModule(false, settings.getSettings(), new IndexNameExpressionResolver(Settings.EMPTY),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(Method.GET, \"/\", null));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":123,"groupId":"7357","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/66a3e3c5635bb8fe03d61def5ab3045da27a0e.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService(settings.getSettings());\n        ActionModule actionModule = new ActionModule(false, settings.getSettings(), new IndexNameExpressionResolver(Settings.EMPTY),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(Method.GET, \"/\", null));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService(settings.getSettings());\n            ActionModule actionModule = new ActionModule(false, settings.getSettings(), new IndexNameExpressionResolver(Settings.EMPTY),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(Method.GET, \"/_dummy\", null));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2018-04-26 03:22:53","endLine":178,"groupId":"7358","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/66a3e3c5635bb8fe03d61def5ab3045da27a0e.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService(settings.getSettings());\n            ActionModule actionModule = new ActionModule(false, settings.getSettings(), new IndexNameExpressionResolver(Settings.EMPTY),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(Method.GET, \"/_dummy\", null));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-11-02 00:05:41","codes":[{"authorDate":"2018-11-02 00:05:41","commitOrder":2,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(false, settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(Method.GET, \"/\", null));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2018-11-02 01:13:02","endLine":123,"groupId":"7357","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8d/c24735a292f0cc76e4988b0ff3e452dbc7f5ed.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService(settings.getSettings());\n        ActionModule actionModule = new ActionModule(false, settings.getSettings(), new IndexNameExpressionResolver(Settings.EMPTY),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(Method.GET, \"/\", null));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2018-11-02 00:05:41","commitOrder":2,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(false, settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(Method.GET, \"/_dummy\", null));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2018-11-02 01:13:02","endLine":178,"groupId":"7358","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8d/c24735a292f0cc76e4988b0ff3e452dbc7f5ed.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService(settings.getSettings());\n            ActionModule actionModule = new ActionModule(false, settings.getSettings(), new IndexNameExpressionResolver(Settings.EMPTY),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(Method.GET, \"/_dummy\", null));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"c3cf7dd305b3d4636405c292659dbff05307f146","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-11-02 01:13:02","modifiedFileCount":"456","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-06-06 08:22:37","codes":[{"authorDate":"2019-06-06 08:22:37","commitOrder":3,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(Method.GET, \"/\", null));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2019-06-06 08:22:37","endLine":123,"groupId":"7357","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ac/07c18b04189a6839809b93a45053846cc0f858.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(false, settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(Method.GET, \"/\", null));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2019-06-06 08:22:37","commitOrder":3,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(Method.GET, \"/_dummy\", null));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2019-06-06 08:22:37","endLine":178,"groupId":"7358","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ac/07c18b04189a6839809b93a45053846cc0f858.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(false, settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(Method.GET, \"/_dummy\", null));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"b15d62c3ab5b3766a975f8d4b3878cbde8c2b6c0","commitMessage":"@@@Remove the transport client (#42538)\n\nThis commit removes the transport client and all remaining uses in the code.\n","date":"2019-06-06 08:22:37","modifiedFileCount":"136","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2019-10-02 17:04:19","codes":[{"authorDate":"2019-10-02 17:04:19","commitOrder":4,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(Method.GET, \"/\", null));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2019-10-02 17:04:19","endLine":118,"groupId":"47863","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/0c77c96ea191d53a04b8b5eadf971db93aa279.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(Method.GET, \"/\", null));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2019-10-02 17:04:19","commitOrder":4,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(Method.GET, \"/_dummy\", null));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2019-10-02 17:04:19","endLine":173,"groupId":"39741","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/0c77c96ea191d53a04b8b5eadf971db93aa279.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(Method.GET, \"/_dummy\", null));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"e1012efbd1d5ef5acb002a41418137a96fe23aac","commitMessage":"@@@Use optype CREATE for single auto-id index requests (#47353)\n\nChanges auto-id index requests to use optype CREATE.  making it compliant with our docs.\nThis will also make these auto-id index requests compatible with the new \"create-doc\" index\nprivilege (which is based on the optype).  the default optype is changed to create.  just as it is\nalready documented.","date":"2019-10-02 17:04:19","modifiedFileCount":"6","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2020-02-10 12:35:39","codes":[{"authorDate":"2020-02-10 12:35:39","commitOrder":5,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return singletonList(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2020-02-10 12:35:39","endLine":127,"groupId":"47863","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/2c67d6d2b0fa44bac2c2b12ca85aae553c2afb.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(Method.GET, \"/\", null));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-02-10 12:35:39","commitOrder":5,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return singletonList(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2020-02-10 12:35:39","endLine":193,"groupId":"39741","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/2c67d6d2b0fa44bac2c2b12ca85aae553c2afb.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(Method.GET, \"/_dummy\", null));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"627d853f18c65a3ae7d23dd455db8b061eaad104","commitMessage":"@@@RestHandlers declare handled routes (#51950)\n\nThis commit changes how RestHandlers are registered with the\nRestController so that a RestHandler no longer needs to register itself\nwith the RestController. Instead the RestHandler interface has new\nmethods which when called provide information about the routes\n(method and path combinations) that are handled by the handler\nincluding any deprecated and/or replaced combinations.\n\nThis change also makes the publication of RestHandlers safe since they\nno longer publish a reference to themselves within their constructors.\n\nCloses #51622\n\nCo-authored-by: Jason Tedor <jason@tedor.me>\n","date":"2020-02-10 12:35:39","modifiedFileCount":"374","status":"M","submitter":"Jay Modi"},{"authorTime":"2020-02-13 06:11:22","codes":[{"authorDate":"2020-02-13 06:11:22","commitOrder":6,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2020-02-13 06:11:22","endLine":127,"groupId":"47863","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/4abe0b2dcb7d4f9bb32b19bb700ffaa56496ee.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return singletonList(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-02-13 06:11:22","commitOrder":6,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2020-02-13 06:11:22","endLine":193,"groupId":"39741","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/4abe0b2dcb7d4f9bb32b19bb700ffaa56496ee.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return singletonList(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"a11ccb83d45905e0f48907b29be9489bb6260d96","commitMessage":"@@@Use List convenience methods in rest actions (#52286)\n\nThis commit replaces usages of older collection utility methods with\nthe JDK 9 convenience method `List.of()`.\n\nRelates #51950","date":"2020-02-13 06:11:22","modifiedFileCount":"254","status":"M","submitter":"Jay Modi"},{"authorTime":"2020-03-03 05:32:41","codes":[{"authorDate":"2020-03-03 05:32:41","commitOrder":7,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2020-03-03 05:32:41","endLine":127,"groupId":"7357","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/61/118d31b3a2a2498e41bef573bedb3466abdf8b.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-03-03 05:32:41","commitOrder":7,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2020-03-03 05:32:41","endLine":193,"groupId":"7358","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/61/118d31b3a2a2498e41bef573bedb3466abdf8b.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"4c0e8f12cbc078c1b85a67af76ed8a4be11a6f01","commitMessage":"@@@Introduce system index APIs for Kibana (#52385)\n\nThis commit introduces a module for Kibana that exposes REST APIs that\nwill be used by Kibana for access to its system indices. These APIs are wrapped\nversions of the existing REST endpoints. A new setting is also introduced since\nthe Kibana system indices' names are allowed to be changed by a user in case\nmultiple instances of Kibana use the same instance of Elasticsearch.\n\nAdditionally.  the ThreadContext has been extended to indicate that the use of\nsystem indices may be allowed in a request. This will be built upon in the future\nfor the protection of system indices.","date":"2020-03-03 05:32:41","modifiedFileCount":"38","status":"M","submitter":"Jay Modi"},{"authorTime":"2020-03-24 00:11:16","codes":[{"authorDate":"2020-03-24 00:11:16","commitOrder":8,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2020-03-24 00:11:16","endLine":127,"groupId":"47863","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/4abe0b2dcb7d4f9bb32b19bb700ffaa56496ee.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-03-24 00:11:16","commitOrder":8,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2020-03-24 00:11:16","endLine":193,"groupId":"39741","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/4abe0b2dcb7d4f9bb32b19bb700ffaa56496ee.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"8264bdd36a2db3c204387c4f8c8a846001bee899","commitMessage":"@@@Revert \"Introduce system index APIs for Kibana (#52385)\" (#53912)\n\nThis reverts commit 4c0e8f12cbc078c1b85a67af76ed8a4be11a6f01.\n\nIt should be re-added once #53909 is addressed.","date":"2020-03-24 00:11:16","modifiedFileCount":"37","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2020-07-29 01:14:40","codes":[{"authorDate":"2020-07-29 01:14:40","commitOrder":9,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2020-07-29 01:42:59","endLine":127,"groupId":"7357","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/54/4b0b6f38ef95b05d2bdda2245f7c9df281189c.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-07-29 01:14:40","commitOrder":9,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2020-07-29 01:42:59","endLine":200,"groupId":"7358","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/54/4b0b6f38ef95b05d2bdda2245f7c9df281189c.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"e3bbb3bed4ed9430ab43eb4a3e8276ae503c13ab","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-29 01:42:59","modifiedFileCount":"261","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-10-02 02:17:30","codes":[{"authorDate":"2020-10-02 02:17:30","commitOrder":10,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2020-10-02 02:17:30","endLine":127,"groupId":"47863","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/0e592e01a7903151a8345e0eb359fef9fddf80.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-10-02 02:17:30","commitOrder":10,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2020-10-02 02:17:30","endLine":200,"groupId":"39741","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/0e592e01a7903151a8345e0eb359fef9fddf80.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"5f7a15168f61299447dffa1564811ef8c5022027","commitMessage":"@@@System index auto-creation should not be disabled by user settings (#62984)\n\n* Add System Indices check to AutoCreateIndex\n\nBy default.  Elasticsearch auto-creates indices when a document is\nsubmitted to a non-existent index. There is a setting that allows users\nto disable this behavior. However.  this setting should not apply to\nsystem indices.  so that Elasticsearch modules and plugins are able to\nuse auto-create behavior whether or not it is exposed to users.\n\nThis commit constructs the AutoCreateIndex object with a reference to\nthe SystemIndices object so that we bypass the check for the user-facing\nautocreate setting when it's a system index that is being autocreated.\n\nWe also modify the logic in TransportBulkAction to make sure that if a\nsystem index is included in a bulk request.  we don't skip the\nautocreation step.","date":"2020-10-02 02:17:30","modifiedFileCount":"10","status":"M","submitter":"William Brafford"},{"authorTime":"2020-10-07 01:13:48","codes":[{"authorDate":"2020-10-07 01:13:48","commitOrder":11,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(),\n            new IndexNameExpressionResolver(new ThreadContext(Settings.EMPTY)), settings.getIndexScopedSettings(),\n            settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n            null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2020-10-07 01:13:48","endLine":129,"groupId":"47863","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/15/d2aff8d8787d26170d7cd46ab42dd5e30ea8d3.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n                null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-10-07 01:13:48","commitOrder":11,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(),\n                new IndexNameExpressionResolver(threadPool.getThreadContext()), settings.getIndexScopedSettings(),\n                settings.getClusterSettings(), settings.getSettingsFilter(), threadPool, singletonList(registersFakeHandler),\n                null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2020-10-07 01:13:48","endLine":204,"groupId":"39741","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/15/d2aff8d8787d26170d7cd46ab42dd5e30ea8d3.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(), new IndexNameExpressionResolver(),\n                    settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                    singletonList(registersFakeHandler), null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"91f4b58bf71249cf81562bd6069c64aafa46591b","commitMessage":"@@@Deprecate REST access to System Indices (#60945)\n\nThis PR adds deprecation warnings when accessing System Indices via the REST layer. At this time.  these warnings are only enabled for Snapshot builds by default.  to allow projects external to Elasticsearch additional time to adjust their access patterns.\n\nDeprecation warnings will be triggered by all REST requests which access registered System Indices.  except for purpose-specific APIs which access System Indices as an implementation detail a few specific APIs which will continue to allow access to system indices by default:\n\n- `GET _cluster/health`\n- `GET {index}/_recovery`\n- `GET _cluster/allocation/explain`\n- `GET _cluster/state`\n- `POST _cluster/reroute`\n- `GET {index}/_stats`\n- `GET {index}/_segments`\n- `GET {index}/_shard_stores`\n- `GET _cat/[indices. aliases. health. recovery. shards. segments]`\n\nDeprecation warnings for accessing system indices take the form:\n```\nthis request accesses system indices: [.some_system_index].  but in a future major version.  direct access to system indices will be prevented by default\n```","date":"2020-10-07 01:13:48","modifiedFileCount":"132","status":"M","submitter":"Gordon Brown"},{"authorTime":"2020-11-16 16:11:24","codes":[{"authorDate":"2020-11-16 16:11:24","commitOrder":12,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(),\n            new IndexNameExpressionResolver(new ThreadContext(Settings.EMPTY)), settings.getIndexScopedSettings(),\n            settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n            null, usageService, null, CompatibleVersion.CURRENT_VERSION);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2020-11-16 16:11:24","endLine":130,"groupId":"47863","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/02/3745cbe8d46fbce9ae49b675754852028fab14.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(),\n            new IndexNameExpressionResolver(new ThreadContext(Settings.EMPTY)), settings.getIndexScopedSettings(),\n            settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n            null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2020-11-16 16:11:24","commitOrder":12,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(),\n                new IndexNameExpressionResolver(threadPool.getThreadContext()), settings.getIndexScopedSettings(),\n                settings.getClusterSettings(), settings.getSettingsFilter(), threadPool, singletonList(registersFakeHandler),\n                null, null, usageService, null, CompatibleVersion.CURRENT_VERSION);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2020-11-16 16:11:24","endLine":205,"groupId":"39741","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/02/3745cbe8d46fbce9ae49b675754852028fab14.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(),\n                new IndexNameExpressionResolver(threadPool.getThreadContext()), settings.getIndexScopedSettings(),\n                settings.getClusterSettings(), settings.getSettingsFilter(), threadPool, singletonList(registersFakeHandler),\n                null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"}],"commitId":"618d8bcec62ecc963ad277e01175b6859e341b3c","commitMessage":"@@@Allow registering compatible handlers (#64423)\n\nAdding an infrastructure to allow for registration of Compatible Handlers.\nCompatible handlers are RestHandlers used for handling rest request from old version clients ( CURRENT-1 version). They might be registered under an endpoint that was removed or changed in CURRENT version (different path.  method or an endpoint completely removed).\nBut they also can be registered under the same endpoint (same path.  method as the RestHandler in CURRENT)\nRestHandler's endpoint is at the moment 2dimensional - a method and a path.\n\nThis PR adds a 3rd dimension - a version.\n\nRegistration:\nRestHandler declares a new compatibleWithVersion method.  which will be overridden by Compatible Handlers and returning a Version.CURRENT -1. By default the method returns Version.CURRENT\ncompatibleWithVersion is used when iterating over handlers within RestController#registerHandler. The returned value is used to set a version on MethodHandlers\n\nLookup:\nAn interface CompatibleVersion is introduced in order to abstract a logic to calculate a compatible version requested by a user.\nIt is not implemented in this PR. A simplified.  always returning Version.CURRENT implementation is used.\nWithin RestController.  a version is calculated with the use of CompatibleVersion.  then the lookup for MethodHandlers is performed (the logic is the same)\nOnce it is find.  an additional lookup for a RestHandler for requested version is made.\n\nThe requested version has to be also passed down to XContentBuilder in order to allow for per version serialisation logic\n\nrelates #51816","date":"2020-11-16 16:11:24","modifiedFileCount":"12","status":"M","submitter":"Przemyslaw Gomulka"},{"authorTime":"2021-01-29 01:49:44","codes":[{"authorDate":"2021-01-29 01:49:44","commitOrder":13,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(),\n            new IndexNameExpressionResolver(new ThreadContext(Settings.EMPTY)), settings.getIndexScopedSettings(),\n            settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n            null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2021-01-29 01:49:44","endLine":129,"groupId":"47863","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/15/d2aff8d8787d26170d7cd46ab42dd5e30ea8d3.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(),\n            new IndexNameExpressionResolver(new ThreadContext(Settings.EMPTY)), settings.getIndexScopedSettings(),\n            settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n            null, usageService, null, CompatibleVersion.CURRENT_VERSION);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2021-01-29 01:49:44","commitOrder":13,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(),\n                new IndexNameExpressionResolver(threadPool.getThreadContext()), settings.getIndexScopedSettings(),\n                settings.getClusterSettings(), settings.getSettingsFilter(), threadPool, singletonList(registersFakeHandler),\n                null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2021-01-29 01:49:44","endLine":204,"groupId":"39741","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/15/d2aff8d8787d26170d7cd46ab42dd5e30ea8d3.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(),\n                new IndexNameExpressionResolver(threadPool.getThreadContext()), settings.getIndexScopedSettings(),\n                settings.getClusterSettings(), settings.getSettingsFilter(), threadPool, singletonList(registersFakeHandler),\n                null, null, usageService, null, CompatibleVersion.CURRENT_VERSION);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"83aa071ae6745afa4c23442c0e52ef32f456e694","commitMessage":"@@@Move REST compatible header parsing into server (#68047)\n\nCurrently the logic for parsing vendor specific headers - i.e. application/vnd.elasticsearch+json;compatible-with=7 is within rest-compatibility module.\nThis commit is removing the rest-compatibility plugin and moving the version parsing logic\ninto server module. It no longer needs to be injected from xpack into server.  therefore can be directly used from RestRequest.\n\nrelates #51816","date":"2021-01-29 01:49:44","modifiedFileCount":"11","status":"M","submitter":"Przemyslaw Gomulka"},{"authorTime":"2021-03-02 01:38:53","codes":[{"authorDate":"2021-03-02 01:38:53","commitOrder":14,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(),\n            TestIndexNameExpressionResolver.newInstance(),\n            settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n            null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2021-03-02 01:38:53","endLine":118,"groupId":"47863","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fc/d6cfbfead15ae8740abf4cddf5484e57a7886e.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(),\n            new IndexNameExpressionResolver(new ThreadContext(Settings.EMPTY)), settings.getIndexScopedSettings(),\n            settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n            null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2021-03-02 01:38:53","commitOrder":14,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(),\n                TestIndexNameExpressionResolver.newInstance(threadPool.getThreadContext()),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                singletonList(registersFakeHandler), null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2021-03-02 01:38:53","endLine":193,"groupId":"39741","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fc/d6cfbfead15ae8740abf4cddf5484e57a7886e.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(),\n                new IndexNameExpressionResolver(threadPool.getThreadContext()), settings.getIndexScopedSettings(),\n                settings.getClusterSettings(), settings.getSettingsFilter(), threadPool, singletonList(registersFakeHandler),\n                null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"1487a5a991e78dc17eebb349b105409b51b63b36","commitMessage":"@@@Introduce system index types including external (#68919)\n\nThis commit introduces system index types that will be used to\ndifferentiate behavior. Previously system indices were all treated the\nsame regardless of whether they belonged to Elasticsearch.  a stack\ncomponent.  or one of our solutions. Upon further discussion and\nanalysis this decision was not in the best interest of the various\nteams and instead a new type of system index was needed. These system\nindices will be referred to as external system indices. Within external\nsystem indices.  an option exists for these indices to be managed by\nElasticsearch or to be managed by the external product.\n\nIn order to represent this within Elasticsearch.  each system index will\nhave a type and this type will be used to control behavior.\n\nCloses #67383","date":"2021-03-02 01:38:53","modifiedFileCount":"87","status":"M","submitter":"Jay Modi"},{"authorTime":"2021-03-06 08:11:37","codes":[{"authorDate":"2021-03-06 08:11:37","commitOrder":15,"curCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(),\n            TestIndexNameExpressionResolver.newInstance(),\n            settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n            null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","date":"2021-03-06 08:11:37","endLine":118,"groupId":"106028","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetupRestHandlerContainsKnownBuiltin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/0814699d8ae1677eea2035431020fcc9f57ea8.src","preCode":"    public void testSetupRestHandlerContainsKnownBuiltin() {\n        SettingsModule settings = new SettingsModule(Settings.EMPTY);\n        UsageService usageService = new UsageService();\n        ActionModule actionModule = new ActionModule(settings.getSettings(),\n            TestIndexNameExpressionResolver.newInstance(),\n            settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), null, emptyList(), null,\n            null, usageService, null);\n        actionModule.initRestHandlers(null);\n        \r\n        Exception e = expectThrows(IllegalArgumentException.class, () ->\n            actionModule.getRestController().registerHandler(new RestHandler() {\n                @Override\n                public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                }\n\n                @Override\n                public List<Route> routes() {\n                    return List.of(new Route(Method.GET, \"/\"));\n                }\n            }));\n        assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/] for method: GET\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2021-03-06 08:11:37","commitOrder":15,"curCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(),\n                TestIndexNameExpressionResolver.newInstance(threadPool.getThreadContext()),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                singletonList(registersFakeHandler), null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","date":"2021-03-06 08:11:37","endLine":193,"groupId":"106028","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"threadPool","params":"(getTestName())","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/0814699d8ae1677eea2035431020fcc9f57ea8.src","preCode":"        ThreadPool threadPool = new TestThreadPool(getTestName());\n        try {\n            UsageService usageService = new UsageService();\n            ActionModule actionModule = new ActionModule(settings.getSettings(),\n                TestIndexNameExpressionResolver.newInstance(threadPool.getThreadContext()),\n                settings.getIndexScopedSettings(), settings.getClusterSettings(), settings.getSettingsFilter(), threadPool,\n                singletonList(registersFakeHandler), null, null, usageService, null);\n            actionModule.initRestHandlers(null);\n            \r\n            Exception e = expectThrows(IllegalArgumentException.class, () ->\n                actionModule.getRestController().registerHandler(new RestHandler() {\n                    @Override\n                    public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {\n                    }\n\n                    @Override\n                    public List<Route> routes() {\n                        return List.of(new Route(Method.GET, \"/_dummy\"));\n                    }\n                }));\n            assertThat(e.getMessage(), startsWith(\"Cannot replace existing handler for [/_dummy] for method: GET\"));\n        } finally {\n","realPath":"server/src/test/java/org/elasticsearch/action/ActionModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"4cc4c2cc4769f5a2c53db2d909f310e17bd017c0","commitMessage":"@@@[REST Compatible API] Route refactoring (#69573)\n\nRelated to #51816\n\nMakes `Route`s  `RestApiVersion` -aware (and `RestHandler`s `RestApiVersion` -agnostic). Refactors \nhow `Route`s are constructed in the case of deprecation or replacement of routes.","date":"2021-03-06 08:11:37","modifiedFileCount":"102","status":"M","submitter":"Joe Gallo"}]
