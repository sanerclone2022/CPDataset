[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testXContentParsingIsNotLenient() throws IOException {\n        RatedDocument testItem = createRatedDocument();\n        XContentType xContentType = randomFrom(XContentType.values());\n        BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean());\n        BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random());\n        try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {\n            Exception exception = expectThrows(IllegalArgumentException.class, () -> RatedDocument.fromXContent(parser));\n            assertThat(exception.getMessage(), startsWith(\"[rated_document] unknown field\"));\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":65,"groupId":"32675","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testXContentParsingIsNotLenient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cd/38233bfa9a9c77c96b0f5c11b4e1da0df93345.src","preCode":"    public void testXContentParsingIsNotLenient() throws IOException {\n        RatedDocument testItem = createRatedDocument();\n        XContentType xContentType = randomFrom(XContentType.values());\n        BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean());\n        BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random());\n        try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {\n            Exception exception = expectThrows(IllegalArgumentException.class, () -> RatedDocument.fromXContent(parser));\n            assertThat(exception.getMessage(), startsWith(\"[rated_document] unknown field\"));\n        }\n    }\n","realPath":"modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RatedDocumentTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testXContentParsingIsNotLenient() throws IOException {\n        MeanReciprocalRank testItem = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean());\n        BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random());\n        try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {\n            parser.nextToken();\n            parser.nextToken();\n            IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n                    () -> MeanReciprocalRank.fromXContent(parser));\n            assertThat(exception.getMessage(), startsWith(\"[reciprocal_rank] unknown field\"));\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":197,"groupId":"68655","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testXContentParsingIsNotLenient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/ff39bbd118acfe0653c0e2c6d449f2bdf1b6f0.src","preCode":"    public void testXContentParsingIsNotLenient() throws IOException {\n        MeanReciprocalRank testItem = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean());\n        BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random());\n        try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {\n            parser.nextToken();\n            parser.nextToken();\n            IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n                    () -> MeanReciprocalRank.fromXContent(parser));\n            assertThat(exception.getMessage(), startsWith(\"[reciprocal_rank] unknown field\"));\n        }\n    }\n","realPath":"modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/MeanReciprocalRankTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-06-05 10:59:49","codes":[{"authorDate":"2018-06-05 10:59:49","commitOrder":2,"curCode":"    public void testXContentParsingIsNotLenient() throws IOException {\n        RatedDocument testItem = createRatedDocument();\n        XContentType xContentType = randomFrom(XContentType.values());\n        BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean());\n        BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random());\n        try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {\n            XContentParseException exception = expectThrows(XContentParseException.class, () -> RatedDocument.fromXContent(parser));\n            assertThat(exception.getMessage(), containsString(\"[rated_document] unknown field\"));\n        }\n    }\n","date":"2018-06-05 10:59:49","endLine":66,"groupId":"10303","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testXContentParsingIsNotLenient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/2fc1fa2bb479a77b1e8750b32b3fb6ca02c039.src","preCode":"    public void testXContentParsingIsNotLenient() throws IOException {\n        RatedDocument testItem = createRatedDocument();\n        XContentType xContentType = randomFrom(XContentType.values());\n        BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean());\n        BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random());\n        try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {\n            Exception exception = expectThrows(IllegalArgumentException.class, () -> RatedDocument.fromXContent(parser));\n            assertThat(exception.getMessage(), startsWith(\"[rated_document] unknown field\"));\n        }\n    }\n","realPath":"modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/RatedDocumentTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2018-06-05 10:59:49","commitOrder":2,"curCode":"    public void testXContentParsingIsNotLenient() throws IOException {\n        MeanReciprocalRank testItem = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean());\n        BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random());\n        try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {\n            parser.nextToken();\n            parser.nextToken();\n            XContentParseException exception = expectThrows(XContentParseException.class,\n                    () -> MeanReciprocalRank.fromXContent(parser));\n            assertThat(exception.getMessage(), containsString(\"[reciprocal_rank] unknown field\"));\n        }\n    }\n","date":"2018-06-05 10:59:49","endLine":197,"groupId":"10303","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testXContentParsingIsNotLenient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f8/8b0cc66348987da5005f011cbe7aa751d48b9b.src","preCode":"    public void testXContentParsingIsNotLenient() throws IOException {\n        MeanReciprocalRank testItem = createTestItem();\n        XContentType xContentType = randomFrom(XContentType.values());\n        BytesReference originalBytes = toShuffledXContent(testItem, xContentType, ToXContent.EMPTY_PARAMS, randomBoolean());\n        BytesReference withRandomFields = insertRandomFields(xContentType, originalBytes, null, random());\n        try (XContentParser parser = createParser(xContentType.xContent(), withRandomFields)) {\n            parser.nextToken();\n            parser.nextToken();\n            IllegalArgumentException exception = expectThrows(IllegalArgumentException.class,\n                    () -> MeanReciprocalRank.fromXContent(parser));\n            assertThat(exception.getMessage(), startsWith(\"[reciprocal_rank] unknown field\"));\n        }\n    }\n","realPath":"modules/rank-eval/src/test/java/org/elasticsearch/index/rankeval/MeanReciprocalRankTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"2820dba2d7cbbd39e32df7216bbb00a15a0784ad","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-05 10:59:49","modifiedFileCount":"48","status":"M","submitter":"Tal Levy"}]
