[{"authorTime":"2018-09-07 17:59:10","codes":[{"authorDate":"2018-09-07 17:59:10","commitOrder":1,"curCode":"    public void testTopLevel() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(), topHits(\"_name\").sort(\"string\", SortOrder.DESC));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query, topHits(\"_name\"));\n        }\n        SearchHits searchHits = ((TopHits) result).getHits();\n        assertEquals(3L, searchHits.getTotalHits());\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"type\", searchHits.getAt(0).getType());\n        assertEquals(\"2\", searchHits.getAt(1).getId());\n        assertEquals(\"type\", searchHits.getAt(1).getType());\n        assertEquals(\"1\", searchHits.getAt(2).getId());\n        assertEquals(\"type\", searchHits.getAt(2).getType());\n    }\n","date":"2018-09-07 17:59:10","endLine":77,"groupId":"31539","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/88dbf8d2eea4b513ae45eb9cd56a795b4304c7.src","preCode":"    public void testTopLevel() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(), topHits(\"_name\").sort(\"string\", SortOrder.DESC));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query, topHits(\"_name\"));\n        }\n        SearchHits searchHits = ((TopHits) result).getHits();\n        assertEquals(3L, searchHits.getTotalHits());\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"type\", searchHits.getAt(0).getType());\n        assertEquals(\"2\", searchHits.getAt(1).getId());\n        assertEquals(\"type\", searchHits.getAt(1).getType());\n        assertEquals(\"1\", searchHits.getAt(2).getId());\n        assertEquals(\"type\", searchHits.getAt(2).getType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2018-09-07 17:59:10","commitOrder":1,"curCode":"    public void testInsideTerms() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(),\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\").sort(\"string\", SortOrder.DESC)));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query,\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\")));\n        }\n        Terms terms = (Terms) result;\n\n        \r\n        TopHits hits = (TopHits) terms.getBucketByKey(\"a\").getAggregations().get(\"top\");\n        SearchHits searchHits = (hits).getHits();\n        assertEquals(2L, searchHits.getTotalHits());\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"b\").getAggregations().get(\"top\")).getHits();\n        assertEquals(2L, searchHits.getTotalHits());\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"c\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits());\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"d\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits());\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n    }\n","date":"2018-09-07 17:59:10","endLine":125,"groupId":"3421","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsideTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c8/88dbf8d2eea4b513ae45eb9cd56a795b4304c7.src","preCode":"    public void testInsideTerms() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(),\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\").sort(\"string\", SortOrder.DESC)));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query,\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\")));\n        }\n        Terms terms = (Terms) result;\n\n        \r\n        TopHits hits = (TopHits) terms.getBucketByKey(\"a\").getAggregations().get(\"top\");\n        SearchHits searchHits = (hits).getHits();\n        assertEquals(2L, searchHits.getTotalHits());\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"b\").getAggregations().get(\"top\")).getHits();\n        assertEquals(2L, searchHits.getTotalHits());\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"c\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits());\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"d\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits());\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"}],"commitId":"017ffe5d127ce0fb33feb8fc4e5fededb8cbfda1","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-07 17:59:10","modifiedFileCount":"370","status":"B","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-12-06 02:49:06","codes":[{"authorDate":"2018-12-06 02:49:06","commitOrder":2,"curCode":"    public void testTopLevel() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(), topHits(\"_name\").sort(\"string\", SortOrder.DESC));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query, topHits(\"_name\"));\n        }\n        SearchHits searchHits = ((TopHits) result).getHits();\n        assertEquals(3L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"type\", searchHits.getAt(0).getType());\n        assertEquals(\"2\", searchHits.getAt(1).getId());\n        assertEquals(\"type\", searchHits.getAt(1).getType());\n        assertEquals(\"1\", searchHits.getAt(2).getId());\n        assertEquals(\"type\", searchHits.getAt(2).getType());\n    }\n","date":"2018-12-06 02:49:06","endLine":77,"groupId":"3420","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/1f29c915f5180efcdbf97fd874eeef5c13d8ca.src","preCode":"    public void testTopLevel() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(), topHits(\"_name\").sort(\"string\", SortOrder.DESC));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query, topHits(\"_name\"));\n        }\n        SearchHits searchHits = ((TopHits) result).getHits();\n        assertEquals(3L, searchHits.getTotalHits());\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"type\", searchHits.getAt(0).getType());\n        assertEquals(\"2\", searchHits.getAt(1).getId());\n        assertEquals(\"type\", searchHits.getAt(1).getType());\n        assertEquals(\"1\", searchHits.getAt(2).getId());\n        assertEquals(\"type\", searchHits.getAt(2).getType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2018-12-06 02:49:06","commitOrder":2,"curCode":"    public void testInsideTerms() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(),\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\").sort(\"string\", SortOrder.DESC)));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query,\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\")));\n        }\n        Terms terms = (Terms) result;\n\n        \r\n        TopHits hits = (TopHits) terms.getBucketByKey(\"a\").getAggregations().get(\"top\");\n        SearchHits searchHits = (hits).getHits();\n        assertEquals(2L, searchHits.getTotalHits().value);\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"b\").getAggregations().get(\"top\")).getHits();\n        assertEquals(2L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"c\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits().value);\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"d\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n    }\n","date":"2018-12-06 02:49:06","endLine":125,"groupId":"3421","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsideTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/1f29c915f5180efcdbf97fd874eeef5c13d8ca.src","preCode":"    public void testInsideTerms() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(),\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\").sort(\"string\", SortOrder.DESC)));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query,\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\")));\n        }\n        Terms terms = (Terms) result;\n\n        \r\n        TopHits hits = (TopHits) terms.getBucketByKey(\"a\").getAggregations().get(\"top\");\n        SearchHits searchHits = (hits).getHits();\n        assertEquals(2L, searchHits.getTotalHits());\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"b\").getAggregations().get(\"top\")).getHits();\n        assertEquals(2L, searchHits.getTotalHits());\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"c\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits());\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"d\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits());\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"18866c4c0b1ad640f8554dc4b41765a04dcefa04","commitMessage":"@@@Make hits.total an object in the search response (#35849)\n\nThis commit changes the format of the `hits.total` in the search response to be an object with\na `value` and a `relation`. The `value` indicates the number of hits that match the query and the\n`relation` indicates whether the number is accurate (in which case the relation is equals to `eq`)\nor a lower bound of the total (in which case it is equals to `gte`).\nThis change also adds a parameter called `rest_total_hits_as_int` that can be used in the\nsearch APIs to opt out from this change (retrieve the total hits as a number in the rest response).\nNote that currently all search responses are accurate (`track_total_hits: true`) or they don't contain\n`hits.total` (`track_total_hits: true`). We'll add a way to get a lower bound of the total hits in a\nfollow up (to allow numbers to be passed to `track_total_hits`).\n\nRelates #33028","date":"2018-12-06 02:49:06","modifiedFileCount":"234","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2019-01-23 01:38:55","codes":[{"authorDate":"2019-01-23 01:38:55","commitOrder":3,"curCode":"    public void testTopLevel() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(), topHits(\"_name\").sort(\"string\", SortOrder.DESC));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query, topHits(\"_name\"));\n        }\n        SearchHits searchHits = ((TopHits) result).getHits();\n        assertEquals(3L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"type\", searchHits.getAt(0).getType());\n        assertEquals(\"2\", searchHits.getAt(1).getId());\n        assertEquals(\"type\", searchHits.getAt(1).getType());\n        assertEquals(\"1\", searchHits.getAt(2).getId());\n        assertEquals(\"type\", searchHits.getAt(2).getType());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits)result)));\n    }\n","date":"2019-01-23 01:38:55","endLine":79,"groupId":"3420","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/58/5cd7f9ff434bada80662cf743da5656903f600.src","preCode":"    public void testTopLevel() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(), topHits(\"_name\").sort(\"string\", SortOrder.DESC));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query, topHits(\"_name\"));\n        }\n        SearchHits searchHits = ((TopHits) result).getHits();\n        assertEquals(3L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"type\", searchHits.getAt(0).getType());\n        assertEquals(\"2\", searchHits.getAt(1).getId());\n        assertEquals(\"type\", searchHits.getAt(1).getType());\n        assertEquals(\"1\", searchHits.getAt(2).getId());\n        assertEquals(\"type\", searchHits.getAt(2).getType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2019-01-23 01:38:55","commitOrder":3,"curCode":"    public void testInsideTerms() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(),\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\").sort(\"string\", SortOrder.DESC)));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query,\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\")));\n        }\n        Terms terms = (Terms) result;\n\n        \r\n        TopHits hits = (TopHits) terms.getBucketByKey(\"a\").getAggregations().get(\"top\");\n        SearchHits searchHits = (hits).getHits();\n        assertEquals(2L, searchHits.getTotalHits().value);\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits) terms.getBucketByKey(\"a\").getAggregations().get(\"top\"))));\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"b\").getAggregations().get(\"top\")).getHits();\n        assertEquals(2L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits) terms.getBucketByKey(\"b\").getAggregations().get(\"top\"))));\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"c\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits().value);\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits) terms.getBucketByKey(\"c\").getAggregations().get(\"top\"))));\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"d\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits) terms.getBucketByKey(\"d\").getAggregations().get(\"top\"))));\n    }\n","date":"2019-01-23 01:38:55","endLine":132,"groupId":"3421","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsideTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/58/5cd7f9ff434bada80662cf743da5656903f600.src","preCode":"    public void testInsideTerms() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(),\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\").sort(\"string\", SortOrder.DESC)));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query,\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\")));\n        }\n        Terms terms = (Terms) result;\n\n        \r\n        TopHits hits = (TopHits) terms.getBucketByKey(\"a\").getAggregations().get(\"top\");\n        SearchHits searchHits = (hits).getHits();\n        assertEquals(2L, searchHits.getTotalHits().value);\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"b\").getAggregations().get(\"top\")).getHits();\n        assertEquals(2L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"c\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits().value);\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"d\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"2ba9e361aba7df6e9c0b5fa8fae3d219d50ddf09","commitMessage":"@@@Add helper classes to determine if aggs have a value (#36020)\n\nThis adds a set of helper classes to determine if an agg \"has a value\". \nThis is needed because InternalAggs represent \"empty\" in different \nmanners according to convention. Some use `NaN`.  `+/- Inf`.  `0.0`.  etc.\n\nA user can pass the Internal agg type to one of these helper methods\nand it will report if the agg contains a value or not.  which allows the\nuser to differentiate \"empty\" from a real `NaN`.\n\nThese helpers are best-effort in some cases.  For example.  several\npipeline aggs share a single return class but use different conventions\nto mark \"empty\".  so the helper uses the loosest definition that applies\nto all the aggs that use the class.\n\nSums in particular are unreliable.  The InternalSum simply returns 0.0\nif the agg is empty (which is correct.  no values == sum of zero).  But this\nalso means the helper cannot differentiate from \"empty\" and `+1 + -1`.","date":"2019-01-23 01:38:55","modifiedFileCount":"45","status":"M","submitter":"Zachary Tong"},{"authorTime":"2019-01-23 01:38:55","codes":[{"authorDate":"2019-09-24 02:14:54","commitOrder":4,"curCode":"    public void testTopLevel() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(), topHits(\"_name\").sort(\"string\", SortOrder.DESC));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query, topHits(\"_name\"));\n        }\n        SearchHits searchHits = ((TopHits) result).getHits();\n        assertEquals(3L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"2\", searchHits.getAt(1).getId());\n        assertEquals(\"1\", searchHits.getAt(2).getId());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits)result)));\n    }\n","date":"2019-09-24 02:14:54","endLine":75,"groupId":"105282","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/6dfd77fc8dcacb0aa706f716f3ab57ae9dbf63.src","preCode":"    public void testTopLevel() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(), topHits(\"_name\").sort(\"string\", SortOrder.DESC));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query, topHits(\"_name\"));\n        }\n        SearchHits searchHits = ((TopHits) result).getHits();\n        assertEquals(3L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"type\", searchHits.getAt(0).getType());\n        assertEquals(\"2\", searchHits.getAt(1).getId());\n        assertEquals(\"type\", searchHits.getAt(1).getType());\n        assertEquals(\"1\", searchHits.getAt(2).getId());\n        assertEquals(\"type\", searchHits.getAt(2).getType());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits)result)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-01-23 01:38:55","commitOrder":4,"curCode":"    public void testInsideTerms() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(),\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\").sort(\"string\", SortOrder.DESC)));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query,\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\")));\n        }\n        Terms terms = (Terms) result;\n\n        \r\n        TopHits hits = (TopHits) terms.getBucketByKey(\"a\").getAggregations().get(\"top\");\n        SearchHits searchHits = (hits).getHits();\n        assertEquals(2L, searchHits.getTotalHits().value);\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits) terms.getBucketByKey(\"a\").getAggregations().get(\"top\"))));\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"b\").getAggregations().get(\"top\")).getHits();\n        assertEquals(2L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits) terms.getBucketByKey(\"b\").getAggregations().get(\"top\"))));\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"c\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits().value);\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits) terms.getBucketByKey(\"c\").getAggregations().get(\"top\"))));\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"d\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits) terms.getBucketByKey(\"d\").getAggregations().get(\"top\"))));\n    }\n","date":"2019-01-23 01:38:55","endLine":132,"groupId":"105282","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testInsideTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/58/5cd7f9ff434bada80662cf743da5656903f600.src","preCode":"    public void testInsideTerms() throws Exception {\n        Aggregation result;\n        if (randomBoolean()) {\n            result = testCase(new MatchAllDocsQuery(),\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\").sort(\"string\", SortOrder.DESC)));\n        } else {\n            Query query = new QueryParser(\"string\", new KeywordAnalyzer()).parse(\"d^1000 c^100 b^10 a^1\");\n            result = testCase(query,\n                    terms(\"term\").field(\"string\")\n                        .subAggregation(topHits(\"top\")));\n        }\n        Terms terms = (Terms) result;\n\n        \r\n        TopHits hits = (TopHits) terms.getBucketByKey(\"a\").getAggregations().get(\"top\");\n        SearchHits searchHits = (hits).getHits();\n        assertEquals(2L, searchHits.getTotalHits().value);\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits) terms.getBucketByKey(\"a\").getAggregations().get(\"top\"))));\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"b\").getAggregations().get(\"top\")).getHits();\n        assertEquals(2L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertEquals(\"1\", searchHits.getAt(1).getId());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits) terms.getBucketByKey(\"b\").getAggregations().get(\"top\"))));\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"c\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits().value);\n        assertEquals(\"2\", searchHits.getAt(0).getId());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits) terms.getBucketByKey(\"c\").getAggregations().get(\"top\"))));\n\n        \r\n        searchHits = ((TopHits) terms.getBucketByKey(\"d\").getAggregations().get(\"top\")).getHits();\n        assertEquals(1L, searchHits.getTotalHits().value);\n        assertEquals(\"3\", searchHits.getAt(0).getId());\n        assertTrue(AggregationInspectionHelper.hasValue(((InternalTopHits) terms.getBucketByKey(\"d\").getAggregations().get(\"top\"))));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"}],"commitId":"c1f99e2d75b8aa6a5e146971e6db876065436902","commitMessage":"@@@Remove `_type` from SearchHit (#46942)\n\nThis commit removes the `_type` field from all search hit responses.\n\nRelates to #41059 ","date":"2019-09-24 02:14:54","modifiedFileCount":"57","status":"M","submitter":"Alan Woodward"}]
