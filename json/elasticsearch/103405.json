[{"authorTime":"2019-06-27 20:33:28","codes":[{"authorDate":"2019-06-27 20:33:28","commitOrder":1,"curCode":"    public void testCacheability() throws IOException {\n        RangeQueryBuilder queryBuilder = createTestQueryBuilder();\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        \r\n        queryBuilder = new RangeQueryBuilder(randomFrom(DATE_FIELD_NAME, DATE_RANGE_FIELD_NAME, DATE_ALIAS_FIELD_NAME));\n        queryBuilder.to(\"now\");\n        context = createShardContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2019-06-27 20:33:28","endLine":624,"groupId":"37519","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/129d689a86ea9de313116ce677be604e67e79f.src","preCode":"    public void testCacheability() throws IOException {\n        RangeQueryBuilder queryBuilder = createTestQueryBuilder();\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        \r\n        queryBuilder = new RangeQueryBuilder(randomFrom(DATE_FIELD_NAME, DATE_RANGE_FIELD_NAME, DATE_ALIAS_FIELD_NAME));\n        queryBuilder.to(\"now\");\n        context = createShardContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":610,"status":"B"},{"authorDate":"2019-06-27 20:33:28","commitOrder":1,"curCode":"    public void testCacheability() throws IOException {\n        FunctionScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        boolean isCacheable = isCacheable(queryBuilder);\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                context.isCacheable());\n\n        \r\n        ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n\n        for (ScoreFunctionBuilder<?> scoreFunction : List.of(scriptScoreFunction, randomScoreFunctionBuilder)) {\n            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[] {\n                    new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scoreFunction) };\n            queryBuilder = new FunctionScoreQueryBuilder(functions);\n\n            context = createShardContext();\n            rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n            assertNotNull(rewriteQuery.toQuery(context));\n            assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n        }\n    }\n","date":"2019-06-27 20:33:28","endLine":830,"groupId":"37519","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/1c9a56a4c3c40eeeb51a4a6e5963e77e7806f1.src","preCode":"    public void testCacheability() throws IOException {\n        FunctionScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        boolean isCacheable = isCacheable(queryBuilder);\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                context.isCacheable());\n\n        \r\n        ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n\n        for (ScoreFunctionBuilder<?> scoreFunction : List.of(scriptScoreFunction, randomScoreFunctionBuilder)) {\n            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[] {\n                    new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scoreFunction) };\n            queryBuilder = new FunctionScoreQueryBuilder(functions);\n\n            context = createShardContext();\n            rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n            assertNotNull(rewriteQuery.toQuery(context));\n            assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":806,"status":"B"}],"commitId":"a4b97b67b1feace5444496ccc4f70cd81fad92b5","commitMessage":"@@@Move query builder caching check to dedicated tests (#43238)\n\nCurrently `AbstractQueryTestCase#testToQuery` checks the search context cachable\nflag. This is a bit fragile due to the high randomization of query builders\nperformed by this general test. Also we might only rarely check the\n\"interesting\" cases because they rarely get generated when fully randomizing the\nquery builder.\n\nThis change moved the general checks out ot #testToQuery and instead adds\ndedicated cache tests for those query builders that exhibit something other than\nthe default behaviour.\n\nCloses #43200","date":"2019-06-27 20:33:28","modifiedFileCount":"11","status":"B","submitter":"Christoph B?scher"},{"authorTime":"2020-04-17 17:13:02","codes":[{"authorDate":"2019-06-27 20:33:28","commitOrder":2,"curCode":"    public void testCacheability() throws IOException {\n        RangeQueryBuilder queryBuilder = createTestQueryBuilder();\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        \r\n        queryBuilder = new RangeQueryBuilder(randomFrom(DATE_FIELD_NAME, DATE_RANGE_FIELD_NAME, DATE_ALIAS_FIELD_NAME));\n        queryBuilder.to(\"now\");\n        context = createShardContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2019-06-27 20:33:28","endLine":624,"groupId":"37519","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/129d689a86ea9de313116ce677be604e67e79f.src","preCode":"    public void testCacheability() throws IOException {\n        RangeQueryBuilder queryBuilder = createTestQueryBuilder();\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        \r\n        queryBuilder = new RangeQueryBuilder(randomFrom(DATE_FIELD_NAME, DATE_RANGE_FIELD_NAME, DATE_ALIAS_FIELD_NAME));\n        queryBuilder.to(\"now\");\n        context = createShardContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":610,"status":"N"},{"authorDate":"2020-04-17 17:13:02","commitOrder":2,"curCode":"    public void testCacheability() throws IOException {\n        FunctionScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        boolean isCacheable = isCacheable(queryBuilder);\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        \r\n        if (rewriteQuery instanceof MatchNoneQueryBuilder) {\n            isCacheable = true;\n        }\n        assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                context.isCacheable());\n\n        \r\n        ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n\n        for (ScoreFunctionBuilder<?> scoreFunction : List.of(scriptScoreFunction, randomScoreFunctionBuilder)) {\n            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[] {\n                    new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scoreFunction) };\n            queryBuilder = new FunctionScoreQueryBuilder(functions);\n\n            context = createShardContext();\n            rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n            assertNotNull(rewriteQuery.toQuery(context));\n            assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n        }\n    }\n","date":"2020-04-17 17:13:02","endLine":855,"groupId":"37519","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/06/8a4536757c48ff60fa2eac7e8c9585aed2f9db.src","preCode":"    public void testCacheability() throws IOException {\n        FunctionScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        boolean isCacheable = isCacheable(queryBuilder);\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                context.isCacheable());\n\n        \r\n        ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n\n        for (ScoreFunctionBuilder<?> scoreFunction : List.of(scriptScoreFunction, randomScoreFunctionBuilder)) {\n            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[] {\n                    new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scoreFunction) };\n            queryBuilder = new FunctionScoreQueryBuilder(functions);\n\n            context = createShardContext();\n            rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n            assertNotNull(rewriteQuery.toQuery(context));\n            assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":827,"status":"M"}],"commitId":"feeb0c63fcb687b06b5d706bceb6b037284206cf","commitMessage":"@@@Fix test failure in FunctionScoreQueryBuilderTests.testCacheability (#55343)\n\nWe rewrite more query builders to MatchNoneQueryBuilders now.  which are always\ncacheable. We should make sure the tests expects this when the rewritten query\nis a MatchNoneQueryBuilder.\n\nCloses #55331","date":"2020-04-17 17:13:02","modifiedFileCount":"1","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2020-04-21 04:16:13","codes":[{"authorDate":"2019-06-27 20:33:28","commitOrder":3,"curCode":"    public void testCacheability() throws IOException {\n        RangeQueryBuilder queryBuilder = createTestQueryBuilder();\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        \r\n        queryBuilder = new RangeQueryBuilder(randomFrom(DATE_FIELD_NAME, DATE_RANGE_FIELD_NAME, DATE_ALIAS_FIELD_NAME));\n        queryBuilder.to(\"now\");\n        context = createShardContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2019-06-27 20:33:28","endLine":624,"groupId":"37519","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/129d689a86ea9de313116ce677be604e67e79f.src","preCode":"    public void testCacheability() throws IOException {\n        RangeQueryBuilder queryBuilder = createTestQueryBuilder();\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        \r\n        queryBuilder = new RangeQueryBuilder(randomFrom(DATE_FIELD_NAME, DATE_RANGE_FIELD_NAME, DATE_ALIAS_FIELD_NAME));\n        queryBuilder.to(\"now\");\n        context = createShardContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":610,"status":"N"},{"authorDate":"2020-04-21 04:16:13","commitOrder":3,"curCode":"    public void testCacheability() throws IOException {\n        FunctionScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        boolean isCacheable = isCacheable(queryBuilder);\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        \r\n        if (rewriteQuery instanceof MatchNoneQueryBuilder) {\n            isCacheable = true;\n        }\n        assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                context.isCacheable());\n\n        ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scriptScoreFunction) });\n        context = createShardContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"function script query should be cacheable\" + queryBuilder.toString(), context.isCacheable());\n\n        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunctionBuilder) });\n        context = createShardContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"function random query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2020-04-21 04:16:13","endLine":856,"groupId":"37519","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dd/5a746b735dbb0fcedb4d0c5059ddf679c1abf7.src","preCode":"    public void testCacheability() throws IOException {\n        FunctionScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        boolean isCacheable = isCacheable(queryBuilder);\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        \r\n        if (rewriteQuery instanceof MatchNoneQueryBuilder) {\n            isCacheable = true;\n        }\n        assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                context.isCacheable());\n\n        \r\n        ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n\n        for (ScoreFunctionBuilder<?> scoreFunction : List.of(scriptScoreFunction, randomScoreFunctionBuilder)) {\n            FilterFunctionBuilder[] functions = new FilterFunctionBuilder[] {\n                    new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scoreFunction) };\n            queryBuilder = new FunctionScoreQueryBuilder(functions);\n\n            context = createShardContext();\n            rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n            assertNotNull(rewriteQuery.toQuery(context));\n            assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":827,"status":"M"}],"commitId":"0ed1eb5994338292a6342e7320faf4127c66dba0","commitMessage":"@@@Test: MockScoreScript can be cacheable (#55422)\n\n","date":"2020-04-21 04:16:13","modifiedFileCount":"5","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    public void testCacheability() throws IOException {\n        RangeQueryBuilder queryBuilder = createTestQueryBuilder();\n        SearchExecutionContext context = createSearchExecutionContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        \r\n        queryBuilder = new RangeQueryBuilder(randomFrom(DATE_FIELD_NAME, DATE_RANGE_FIELD_NAME, DATE_ALIAS_FIELD_NAME));\n        queryBuilder.to(\"now\");\n        context = createSearchExecutionContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2021-01-15 01:11:59","endLine":579,"groupId":"37519","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/36fc51b7d6f8e83b7adf536461df5ff174b3fe.src","preCode":"    public void testCacheability() throws IOException {\n        RangeQueryBuilder queryBuilder = createTestQueryBuilder();\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        \r\n        queryBuilder = new RangeQueryBuilder(randomFrom(DATE_FIELD_NAME, DATE_RANGE_FIELD_NAME, DATE_ALIAS_FIELD_NAME));\n        queryBuilder.to(\"now\");\n        context = createShardContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":565,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    public void testCacheability() throws IOException {\n        FunctionScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        boolean isCacheable = isCacheable(queryBuilder);\n        SearchExecutionContext context = createSearchExecutionContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        \r\n        if (rewriteQuery instanceof MatchNoneQueryBuilder) {\n            isCacheable = true;\n        }\n        assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                context.isCacheable());\n\n        ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scriptScoreFunction) });\n        context = createSearchExecutionContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"function script query should be cacheable\" + queryBuilder.toString(), context.isCacheable());\n\n        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunctionBuilder) });\n        context = createSearchExecutionContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"function random query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2021-01-15 01:11:59","endLine":857,"groupId":"37519","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/878a77d518b53f73960127579fac42289a0eeb.src","preCode":"    public void testCacheability() throws IOException {\n        FunctionScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        boolean isCacheable = isCacheable(queryBuilder);\n        QueryShardContext context = createShardContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        \r\n        if (rewriteQuery instanceof MatchNoneQueryBuilder) {\n            isCacheable = true;\n        }\n        assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                context.isCacheable());\n\n        ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scriptScoreFunction) });\n        context = createShardContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"function script query should be cacheable\" + queryBuilder.toString(), context.isCacheable());\n\n        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunctionBuilder) });\n        context = createShardContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new QueryShardContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"function random query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":828,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-06-17 05:31:31","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":5,"curCode":"    public void testCacheability() throws IOException {\n        RangeQueryBuilder queryBuilder = createTestQueryBuilder();\n        SearchExecutionContext context = createSearchExecutionContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        \r\n        queryBuilder = new RangeQueryBuilder(randomFrom(DATE_FIELD_NAME, DATE_RANGE_FIELD_NAME, DATE_ALIAS_FIELD_NAME));\n        queryBuilder.to(\"now\");\n        context = createSearchExecutionContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","date":"2021-01-15 01:11:59","endLine":579,"groupId":"103405","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/36fc51b7d6f8e83b7adf536461df5ff174b3fe.src","preCode":"    public void testCacheability() throws IOException {\n        RangeQueryBuilder queryBuilder = createTestQueryBuilder();\n        SearchExecutionContext context = createSearchExecutionContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"query should be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n\n        \r\n        queryBuilder = new RangeQueryBuilder(randomFrom(DATE_FIELD_NAME, DATE_RANGE_FIELD_NAME, DATE_ALIAS_FIELD_NAME));\n        queryBuilder.to(\"now\");\n        context = createSearchExecutionContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/RangeQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":565,"status":"N"},{"authorDate":"2021-06-17 05:31:31","commitOrder":5,"curCode":"    public void testCacheability() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter iw = new RandomIndexWriter(random(), directory);\n        iw.addDocument(new Document());\n        final IndexSearcher searcher = new IndexSearcher(iw.getReader());\n        iw.close();\n        assertThat(searcher.getIndexReader().leaves().size(), greaterThan(0));\n\n        FunctionScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        boolean requestCache = isCacheable(queryBuilder);\n        SearchExecutionContext context = createSearchExecutionContext(searcher);\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        \r\n        if (rewriteQuery instanceof MatchNoneQueryBuilder) {\n            requestCache = true;\n        }\n        assertEquals(\"query should \" + (requestCache ? \"\" : \"not\") + \" be eligible for the request cache: \" + queryBuilder.toString(),\n            requestCache, context.isCacheable());\n\n        \r\n        if (rewriteQuery instanceof MatchNoneQueryBuilder == false) {\n            Query luceneQuery = rewriteQuery.toQuery(context);\n            Weight queryWeight = context.searcher().createWeight(searcher.rewrite(luceneQuery), ScoreMode.COMPLETE, 1.0f);\n            for (LeafReaderContext ctx : context.getIndexReader().leaves()) {\n                assertFalse(queryWeight.isCacheable(ctx));\n            }\n        }\n\n        ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scriptScoreFunction) });\n        context = createSearchExecutionContext(searcher);\n        rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"function script query should be eligible for the request cache: \" + queryBuilder.toString(),\n            context.isCacheable());\n\n        \r\n        if (rewriteQuery instanceof MatchNoneQueryBuilder == false) {\n            Query luceneQuery = rewriteQuery.toQuery(context);\n            Weight queryWeight = context.searcher().createWeight(searcher.rewrite(luceneQuery), ScoreMode.COMPLETE, 1.0f);\n            for (LeafReaderContext ctx : context.getIndexReader().leaves()) {\n                assertFalse(queryWeight.isCacheable(ctx));\n            }\n        }\n\n        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunctionBuilder) });\n        context = createSearchExecutionContext(searcher);\n        rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"function random query should not be eligible for the request cache: \" + queryBuilder.toString(),\n            context.isCacheable());\n\n        \r\n        if (rewriteQuery instanceof MatchNoneQueryBuilder == false) {\n            Query luceneQuery = rewriteQuery.toQuery(context);\n            Weight queryWeight = context.searcher().createWeight(searcher.rewrite(luceneQuery), ScoreMode.COMPLETE, 1.0f);\n            for (LeafReaderContext ctx : context.getIndexReader().leaves()) {\n                assertFalse(queryWeight.isCacheable(ctx));\n            }\n        }\n        searcher.getIndexReader().close();\n        directory.close();\n    }\n","date":"2021-06-17 05:31:31","endLine":892,"groupId":"103405","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheability","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/88bb0d496944c1210932072fa2459d7bfac018.src","preCode":"    public void testCacheability() throws IOException {\n        FunctionScoreQueryBuilder queryBuilder = createTestQueryBuilder();\n        boolean isCacheable = isCacheable(queryBuilder);\n        SearchExecutionContext context = createSearchExecutionContext();\n        QueryBuilder rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        \r\n        if (rewriteQuery instanceof MatchNoneQueryBuilder) {\n            isCacheable = true;\n        }\n        assertEquals(\"query should \" + (isCacheable ? \"\" : \"not\") + \" be cacheable: \" + queryBuilder.toString(), isCacheable,\n                context.isCacheable());\n\n        ScoreFunctionBuilder<?> scriptScoreFunction = new ScriptScoreFunctionBuilder(\n                new Script(ScriptType.INLINE, MockScriptEngine.NAME, \"1\", Collections.emptyMap()));\n        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), scriptScoreFunction) });\n        context = createSearchExecutionContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertTrue(\"function script query should be cacheable\" + queryBuilder.toString(), context.isCacheable());\n\n        RandomScoreFunctionBuilder randomScoreFunctionBuilder = new RandomScoreFunctionBuilderWithFixedSeed();\n        queryBuilder = new FunctionScoreQueryBuilder(new FilterFunctionBuilder[] {\n            new FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()), randomScoreFunctionBuilder) });\n        context = createSearchExecutionContext();\n        rewriteQuery = rewriteQuery(queryBuilder, new SearchExecutionContext(context));\n        assertNotNull(rewriteQuery.toQuery(context));\n        assertFalse(\"function random query should not be cacheable: \" + queryBuilder.toString(), context.isCacheable());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/functionscore/FunctionScoreQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":825,"status":"M"}],"commitId":"6a8f8f3f718bd21bf14176049c9e1f1def13463b","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-17 05:31:31","modifiedFileCount":"4429","status":"M","submitter":"Igor Motov"}]
