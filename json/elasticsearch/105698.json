[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testMasterBecomesAvailable() throws ExecutionException, InterruptedException {\n        Request request = new Request();\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, null, allNodes));\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(Settings.EMPTY, \"testAction\", transportService, clusterService, threadPool).execute(request, listener);\n        assertFalse(listener.isDone());\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n        assertTrue(listener.isDone());\n        listener.get();\n    }\n","date":"2018-04-26 03:22:53","endLine":313,"groupId":"36801","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterBecomesAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/b18a8c8f56177b0d453ae2936430aaca1042ea.src","preCode":"    public void testMasterBecomesAvailable() throws ExecutionException, InterruptedException {\n        Request request = new Request();\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, null, allNodes));\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(Settings.EMPTY, \"testAction\", transportService, clusterService, threadPool).execute(request, listener);\n        assertFalse(listener.isDone());\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n        assertTrue(listener.isDone());\n        listener.get();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testDelegateToFailingMaster() throws ExecutionException, InterruptedException {\n        boolean failsWithConnectTransportException = randomBoolean();\n        boolean rejoinSameMaster = failsWithConnectTransportException && randomBoolean();\n        Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(failsWithConnectTransportException ? 60 : 0));\n        DiscoveryNode masterNode = this.remoteNode;\n        setState(clusterService, ClusterState.builder(ClusterStateCreationUtils.state(localNode, masterNode, allNodes))\n            .version(randomIntBetween(0, 10))); \r\n\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(Settings.EMPTY, \"testAction\", transportService, clusterService, threadPool).execute(request, listener);\n\n        CapturingTransport.CapturedRequest[] capturedRequests = transport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests.length, equalTo(1));\n        CapturingTransport.CapturedRequest capturedRequest = capturedRequests[0];\n        assertTrue(capturedRequest.node.isMasterNode());\n        assertThat(capturedRequest.request, equalTo(request));\n        assertThat(capturedRequest.action, equalTo(\"testAction\"));\n\n        if (rejoinSameMaster) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            if (randomBoolean()) {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(null);\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            }\n            if (randomBoolean()) {\n                \r\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(masterNode.getId());\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            } else {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.remove(masterNode);\n                masterNode = new DiscoveryNode(masterNode.getId(), masterNode.getAddress(), masterNode.getVersion());\n                nodesBuilder.add(masterNode);\n                nodesBuilder.masterNodeId(masterNode.getId());\n                final ClusterState.Builder builder = ClusterState.builder(clusterService.state()).nodes(nodesBuilder);\n                setState(clusterService, builder.version(0));\n            }\n            assertFalse(listener.isDone());\n            capturedRequests = transport.getCapturedRequestsAndClear();\n            assertThat(capturedRequests.length, equalTo(1));\n            capturedRequest = capturedRequests[0];\n            assertTrue(capturedRequest.node.isMasterNode());\n            assertThat(capturedRequest.request, equalTo(request));\n            assertThat(capturedRequest.action, equalTo(\"testAction\"));\n        } else if (failsWithConnectTransportException) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n            assertTrue(listener.isDone());\n            listener.get();\n        } else {\n            ElasticsearchException t = new ElasticsearchException(\"test\");\n            t.addHeader(\"header\", \"is here\");\n            transport.handleRemoteError(capturedRequest.requestId, t);\n            assertTrue(listener.isDone());\n            try {\n                listener.get();\n                fail(\"Expected exception but returned proper result\");\n            } catch (ExecutionException ex) {\n                final Throwable cause = ex.getCause().getCause();\n                assertThat(cause, instanceOf(ElasticsearchException.class));\n                final ElasticsearchException es = (ElasticsearchException) cause;\n                assertThat(es.getMessage(), equalTo(t.getMessage()));\n                assertThat(es.getHeader(\"header\"), equalTo(t.getHeader(\"header\")));\n            }\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":406,"groupId":"66123","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDelegateToFailingMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f2/b18a8c8f56177b0d453ae2936430aaca1042ea.src","preCode":"    public void testDelegateToFailingMaster() throws ExecutionException, InterruptedException {\n        boolean failsWithConnectTransportException = randomBoolean();\n        boolean rejoinSameMaster = failsWithConnectTransportException && randomBoolean();\n        Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(failsWithConnectTransportException ? 60 : 0));\n        DiscoveryNode masterNode = this.remoteNode;\n        setState(clusterService, ClusterState.builder(ClusterStateCreationUtils.state(localNode, masterNode, allNodes))\n            .version(randomIntBetween(0, 10))); \r\n\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(Settings.EMPTY, \"testAction\", transportService, clusterService, threadPool).execute(request, listener);\n\n        CapturingTransport.CapturedRequest[] capturedRequests = transport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests.length, equalTo(1));\n        CapturingTransport.CapturedRequest capturedRequest = capturedRequests[0];\n        assertTrue(capturedRequest.node.isMasterNode());\n        assertThat(capturedRequest.request, equalTo(request));\n        assertThat(capturedRequest.action, equalTo(\"testAction\"));\n\n        if (rejoinSameMaster) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            if (randomBoolean()) {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(null);\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            }\n            if (randomBoolean()) {\n                \r\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(masterNode.getId());\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            } else {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.remove(masterNode);\n                masterNode = new DiscoveryNode(masterNode.getId(), masterNode.getAddress(), masterNode.getVersion());\n                nodesBuilder.add(masterNode);\n                nodesBuilder.masterNodeId(masterNode.getId());\n                final ClusterState.Builder builder = ClusterState.builder(clusterService.state()).nodes(nodesBuilder);\n                setState(clusterService, builder.version(0));\n            }\n            assertFalse(listener.isDone());\n            capturedRequests = transport.getCapturedRequestsAndClear();\n            assertThat(capturedRequests.length, equalTo(1));\n            capturedRequest = capturedRequests[0];\n            assertTrue(capturedRequest.node.isMasterNode());\n            assertThat(capturedRequest.request, equalTo(request));\n            assertThat(capturedRequest.action, equalTo(\"testAction\"));\n        } else if (failsWithConnectTransportException) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n            assertTrue(listener.isDone());\n            listener.get();\n        } else {\n            ElasticsearchException t = new ElasticsearchException(\"test\");\n            t.addHeader(\"header\", \"is here\");\n            transport.handleRemoteError(capturedRequest.requestId, t);\n            assertTrue(listener.isDone());\n            try {\n                listener.get();\n                fail(\"Expected exception but returned proper result\");\n            } catch (ExecutionException ex) {\n                final Throwable cause = ex.getCause().getCause();\n                assertThat(cause, instanceOf(ElasticsearchException.class));\n                final ElasticsearchException es = (ElasticsearchException) cause;\n                assertThat(es.getMessage(), equalTo(t.getMessage()));\n                assertThat(es.getHeader(\"header\"), equalTo(t.getHeader(\"header\")));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-07-10 07:44:12","codes":[{"authorDate":"2018-07-10 07:44:12","commitOrder":2,"curCode":"    public void testMasterBecomesAvailable() throws ExecutionException, InterruptedException {\n        Request request = new Request();\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, null, allNodes));\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(Settings.EMPTY, \"internal:testAction\", transportService, clusterService, threadPool).execute(request, listener);\n        assertFalse(listener.isDone());\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n        assertTrue(listener.isDone());\n        listener.get();\n    }\n","date":"2018-07-10 07:44:12","endLine":313,"groupId":"36801","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterBecomesAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b2/7bc9ad79432d9d1cb4f9061a20d3a196c20608.src","preCode":"    public void testMasterBecomesAvailable() throws ExecutionException, InterruptedException {\n        Request request = new Request();\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, null, allNodes));\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(Settings.EMPTY, \"testAction\", transportService, clusterService, threadPool).execute(request, listener);\n        assertFalse(listener.isDone());\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n        assertTrue(listener.isDone());\n        listener.get();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"},{"authorDate":"2018-07-10 07:44:12","commitOrder":2,"curCode":"    public void testDelegateToFailingMaster() throws ExecutionException, InterruptedException {\n        boolean failsWithConnectTransportException = randomBoolean();\n        boolean rejoinSameMaster = failsWithConnectTransportException && randomBoolean();\n        Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(failsWithConnectTransportException ? 60 : 0));\n        DiscoveryNode masterNode = this.remoteNode;\n        setState(clusterService, ClusterState.builder(ClusterStateCreationUtils.state(localNode, masterNode, allNodes))\n            .version(randomIntBetween(0, 10))); \r\n\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(Settings.EMPTY, \"internal:testAction\", transportService, clusterService, threadPool).execute(request, listener);\n\n        CapturingTransport.CapturedRequest[] capturedRequests = transport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests.length, equalTo(1));\n        CapturingTransport.CapturedRequest capturedRequest = capturedRequests[0];\n        assertTrue(capturedRequest.node.isMasterNode());\n        assertThat(capturedRequest.request, equalTo(request));\n        assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n\n        if (rejoinSameMaster) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            if (randomBoolean()) {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(null);\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            }\n            if (randomBoolean()) {\n                \r\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(masterNode.getId());\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            } else {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.remove(masterNode);\n                masterNode = new DiscoveryNode(masterNode.getId(), masterNode.getAddress(), masterNode.getVersion());\n                nodesBuilder.add(masterNode);\n                nodesBuilder.masterNodeId(masterNode.getId());\n                final ClusterState.Builder builder = ClusterState.builder(clusterService.state()).nodes(nodesBuilder);\n                setState(clusterService, builder.version(0));\n            }\n            assertFalse(listener.isDone());\n            capturedRequests = transport.getCapturedRequestsAndClear();\n            assertThat(capturedRequests.length, equalTo(1));\n            capturedRequest = capturedRequests[0];\n            assertTrue(capturedRequest.node.isMasterNode());\n            assertThat(capturedRequest.request, equalTo(request));\n            assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n        } else if (failsWithConnectTransportException) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n            assertTrue(listener.isDone());\n            listener.get();\n        } else {\n            ElasticsearchException t = new ElasticsearchException(\"test\");\n            t.addHeader(\"header\", \"is here\");\n            transport.handleRemoteError(capturedRequest.requestId, t);\n            assertTrue(listener.isDone());\n            try {\n                listener.get();\n                fail(\"Expected exception but returned proper result\");\n            } catch (ExecutionException ex) {\n                final Throwable cause = ex.getCause().getCause();\n                assertThat(cause, instanceOf(ElasticsearchException.class));\n                final ElasticsearchException es = (ElasticsearchException) cause;\n                assertThat(es.getMessage(), equalTo(t.getMessage()));\n                assertThat(es.getHeader(\"header\"), equalTo(t.getHeader(\"header\")));\n            }\n        }\n    }\n","date":"2018-07-10 07:44:12","endLine":406,"groupId":"66123","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDelegateToFailingMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b2/7bc9ad79432d9d1cb4f9061a20d3a196c20608.src","preCode":"    public void testDelegateToFailingMaster() throws ExecutionException, InterruptedException {\n        boolean failsWithConnectTransportException = randomBoolean();\n        boolean rejoinSameMaster = failsWithConnectTransportException && randomBoolean();\n        Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(failsWithConnectTransportException ? 60 : 0));\n        DiscoveryNode masterNode = this.remoteNode;\n        setState(clusterService, ClusterState.builder(ClusterStateCreationUtils.state(localNode, masterNode, allNodes))\n            .version(randomIntBetween(0, 10))); \r\n\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(Settings.EMPTY, \"testAction\", transportService, clusterService, threadPool).execute(request, listener);\n\n        CapturingTransport.CapturedRequest[] capturedRequests = transport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests.length, equalTo(1));\n        CapturingTransport.CapturedRequest capturedRequest = capturedRequests[0];\n        assertTrue(capturedRequest.node.isMasterNode());\n        assertThat(capturedRequest.request, equalTo(request));\n        assertThat(capturedRequest.action, equalTo(\"testAction\"));\n\n        if (rejoinSameMaster) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            if (randomBoolean()) {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(null);\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            }\n            if (randomBoolean()) {\n                \r\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(masterNode.getId());\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            } else {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.remove(masterNode);\n                masterNode = new DiscoveryNode(masterNode.getId(), masterNode.getAddress(), masterNode.getVersion());\n                nodesBuilder.add(masterNode);\n                nodesBuilder.masterNodeId(masterNode.getId());\n                final ClusterState.Builder builder = ClusterState.builder(clusterService.state()).nodes(nodesBuilder);\n                setState(clusterService, builder.version(0));\n            }\n            assertFalse(listener.isDone());\n            capturedRequests = transport.getCapturedRequestsAndClear();\n            assertThat(capturedRequests.length, equalTo(1));\n            capturedRequest = capturedRequests[0];\n            assertTrue(capturedRequest.node.isMasterNode());\n            assertThat(capturedRequest.request, equalTo(request));\n            assertThat(capturedRequest.action, equalTo(\"testAction\"));\n        } else if (failsWithConnectTransportException) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n            assertTrue(listener.isDone());\n            listener.get();\n        } else {\n            ElasticsearchException t = new ElasticsearchException(\"test\");\n            t.addHeader(\"header\", \"is here\");\n            transport.handleRemoteError(capturedRequest.requestId, t);\n            assertTrue(listener.isDone());\n            try {\n                listener.get();\n                fail(\"Expected exception but returned proper result\");\n            } catch (ExecutionException ex) {\n                final Throwable cause = ex.getCause().getCause();\n                assertThat(cause, instanceOf(ElasticsearchException.class));\n                final ElasticsearchException es = (ElasticsearchException) cause;\n                assertThat(es.getMessage(), equalTo(t.getMessage()));\n                assertThat(es.getHeader(\"header\"), equalTo(t.getHeader(\"header\")));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"}],"commitId":"e9cd0556c167b257bb588af5547923e5f13a99ca","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-10 07:44:12","modifiedFileCount":"627","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-11-05 20:08:18","codes":[{"authorDate":"2018-11-05 20:08:18","commitOrder":3,"curCode":"    public void testMasterBecomesAvailable() throws ExecutionException, InterruptedException {\n        Request request = new Request();\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, null, allNodes));\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(\"internal:testAction\", transportService, clusterService, threadPool).execute(request, listener);\n        assertFalse(listener.isDone());\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n        assertTrue(listener.isDone());\n        listener.get();\n    }\n","date":"2018-11-05 20:08:18","endLine":314,"groupId":"36801","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterBecomesAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/917ceb2322df29301b66cf7f29f955d62f4c14.src","preCode":"    public void testMasterBecomesAvailable() throws ExecutionException, InterruptedException {\n        Request request = new Request();\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, null, allNodes));\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(Settings.EMPTY, \"internal:testAction\", transportService, clusterService, threadPool).execute(request, listener);\n        assertFalse(listener.isDone());\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n        assertTrue(listener.isDone());\n        listener.get();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"},{"authorDate":"2018-11-05 20:08:18","commitOrder":3,"curCode":"    public void testDelegateToFailingMaster() throws ExecutionException, InterruptedException {\n        boolean failsWithConnectTransportException = randomBoolean();\n        boolean rejoinSameMaster = failsWithConnectTransportException && randomBoolean();\n        Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(failsWithConnectTransportException ? 60 : 0));\n        DiscoveryNode masterNode = this.remoteNode;\n        setState(clusterService, ClusterState.builder(ClusterStateCreationUtils.state(localNode, masterNode, allNodes))\n            .version(randomIntBetween(0, 10))); \r\n\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(\"internal:testAction\", transportService, clusterService, threadPool).execute(request, listener);\n\n        CapturingTransport.CapturedRequest[] capturedRequests = transport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests.length, equalTo(1));\n        CapturingTransport.CapturedRequest capturedRequest = capturedRequests[0];\n        assertTrue(capturedRequest.node.isMasterNode());\n        assertThat(capturedRequest.request, equalTo(request));\n        assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n\n        if (rejoinSameMaster) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            if (randomBoolean()) {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(null);\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            }\n            if (randomBoolean()) {\n                \r\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(masterNode.getId());\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            } else {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.remove(masterNode);\n                masterNode = new DiscoveryNode(masterNode.getId(), masterNode.getAddress(), masterNode.getVersion());\n                nodesBuilder.add(masterNode);\n                nodesBuilder.masterNodeId(masterNode.getId());\n                final ClusterState.Builder builder = ClusterState.builder(clusterService.state()).nodes(nodesBuilder);\n                setState(clusterService, builder.version(0));\n            }\n            assertFalse(listener.isDone());\n            capturedRequests = transport.getCapturedRequestsAndClear();\n            assertThat(capturedRequests.length, equalTo(1));\n            capturedRequest = capturedRequests[0];\n            assertTrue(capturedRequest.node.isMasterNode());\n            assertThat(capturedRequest.request, equalTo(request));\n            assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n        } else if (failsWithConnectTransportException) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n            assertTrue(listener.isDone());\n            listener.get();\n        } else {\n            ElasticsearchException t = new ElasticsearchException(\"test\");\n            t.addHeader(\"header\", \"is here\");\n            transport.handleRemoteError(capturedRequest.requestId, t);\n            assertTrue(listener.isDone());\n            try {\n                listener.get();\n                fail(\"Expected exception but returned proper result\");\n            } catch (ExecutionException ex) {\n                final Throwable cause = ex.getCause().getCause();\n                assertThat(cause, instanceOf(ElasticsearchException.class));\n                final ElasticsearchException es = (ElasticsearchException) cause;\n                assertThat(es.getMessage(), equalTo(t.getMessage()));\n                assertThat(es.getHeader(\"header\"), equalTo(t.getHeader(\"header\")));\n            }\n        }\n    }\n","date":"2018-11-05 20:08:18","endLine":407,"groupId":"66123","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDelegateToFailingMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/917ceb2322df29301b66cf7f29f955d62f4c14.src","preCode":"    public void testDelegateToFailingMaster() throws ExecutionException, InterruptedException {\n        boolean failsWithConnectTransportException = randomBoolean();\n        boolean rejoinSameMaster = failsWithConnectTransportException && randomBoolean();\n        Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(failsWithConnectTransportException ? 60 : 0));\n        DiscoveryNode masterNode = this.remoteNode;\n        setState(clusterService, ClusterState.builder(ClusterStateCreationUtils.state(localNode, masterNode, allNodes))\n            .version(randomIntBetween(0, 10))); \r\n\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(Settings.EMPTY, \"internal:testAction\", transportService, clusterService, threadPool).execute(request, listener);\n\n        CapturingTransport.CapturedRequest[] capturedRequests = transport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests.length, equalTo(1));\n        CapturingTransport.CapturedRequest capturedRequest = capturedRequests[0];\n        assertTrue(capturedRequest.node.isMasterNode());\n        assertThat(capturedRequest.request, equalTo(request));\n        assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n\n        if (rejoinSameMaster) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            if (randomBoolean()) {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(null);\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            }\n            if (randomBoolean()) {\n                \r\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(masterNode.getId());\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            } else {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.remove(masterNode);\n                masterNode = new DiscoveryNode(masterNode.getId(), masterNode.getAddress(), masterNode.getVersion());\n                nodesBuilder.add(masterNode);\n                nodesBuilder.masterNodeId(masterNode.getId());\n                final ClusterState.Builder builder = ClusterState.builder(clusterService.state()).nodes(nodesBuilder);\n                setState(clusterService, builder.version(0));\n            }\n            assertFalse(listener.isDone());\n            capturedRequests = transport.getCapturedRequestsAndClear();\n            assertThat(capturedRequests.length, equalTo(1));\n            capturedRequest = capturedRequests[0];\n            assertTrue(capturedRequest.node.isMasterNode());\n            assertThat(capturedRequest.request, equalTo(request));\n            assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n        } else if (failsWithConnectTransportException) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n            assertTrue(listener.isDone());\n            listener.get();\n        } else {\n            ElasticsearchException t = new ElasticsearchException(\"test\");\n            t.addHeader(\"header\", \"is here\");\n            transport.handleRemoteError(capturedRequest.requestId, t);\n            assertTrue(listener.isDone());\n            try {\n                listener.get();\n                fail(\"Expected exception but returned proper result\");\n            } catch (ExecutionException ex) {\n                final Throwable cause = ex.getCause().getCause();\n                assertThat(cause, instanceOf(ElasticsearchException.class));\n                final ElasticsearchException es = (ElasticsearchException) cause;\n                assertThat(es.getMessage(), equalTo(t.getMessage()));\n                assertThat(es.getHeader(\"header\"), equalTo(t.getHeader(\"header\")));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"}],"commitId":"409050e8de4cacbfac4b68ab12bbb928437a4499","commitMessage":"@@@Refactor: Remove settings from transport action CTOR (#35208)\n\nAs settings are not used in the transport action constructor.  this\nremoves the passing of the settings in all the transport actions.","date":"2018-11-05 20:08:18","modifiedFileCount":"289","status":"M","submitter":"Alexander Reelsen"},{"authorTime":"2019-07-12 04:53:46","codes":[{"authorDate":"2019-07-12 04:53:46","commitOrder":4,"curCode":"    public void testMasterBecomesAvailable() throws ExecutionException, InterruptedException {\n        Request request = new Request();\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, null, allNodes));\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        ActionTestUtils.execute(new Action(\"internal:testAction\", transportService, clusterService, threadPool), null, request, listener);\n        assertFalse(listener.isDone());\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n        assertTrue(listener.isDone());\n        listener.get();\n    }\n","date":"2019-07-12 04:53:46","endLine":345,"groupId":"36801","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterBecomesAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2a/a6f83df8fcf63eded0662d06e83682785c1f2d.src","preCode":"    public void testMasterBecomesAvailable() throws ExecutionException, InterruptedException {\n        Request request = new Request();\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, null, allNodes));\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(\"internal:testAction\", transportService, clusterService, threadPool).execute(request, listener);\n        assertFalse(listener.isDone());\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n        assertTrue(listener.isDone());\n        listener.get();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"},{"authorDate":"2019-07-12 04:53:46","commitOrder":4,"curCode":"    public void testDelegateToFailingMaster() throws ExecutionException, InterruptedException {\n        boolean failsWithConnectTransportException = randomBoolean();\n        boolean rejoinSameMaster = failsWithConnectTransportException && randomBoolean();\n        Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(failsWithConnectTransportException ? 60 : 0));\n        DiscoveryNode masterNode = this.remoteNode;\n        setState(clusterService, ClusterState.builder(ClusterStateCreationUtils.state(localNode, masterNode, allNodes))\n            .version(randomIntBetween(0, 10))); \r\n\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        ActionTestUtils.execute(new Action(\"internal:testAction\", transportService, clusterService, threadPool), null, request, listener);\n\n        CapturingTransport.CapturedRequest[] capturedRequests = transport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests.length, equalTo(1));\n        CapturingTransport.CapturedRequest capturedRequest = capturedRequests[0];\n        assertTrue(capturedRequest.node.isMasterNode());\n        assertThat(capturedRequest.request, equalTo(request));\n        assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n\n        if (rejoinSameMaster) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            if (randomBoolean()) {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(null);\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            }\n            if (randomBoolean()) {\n                \r\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(masterNode.getId());\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            } else {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.remove(masterNode);\n                masterNode = new DiscoveryNode(masterNode.getId(), masterNode.getAddress(), masterNode.getVersion());\n                nodesBuilder.add(masterNode);\n                nodesBuilder.masterNodeId(masterNode.getId());\n                final ClusterState.Builder builder = ClusterState.builder(clusterService.state()).nodes(nodesBuilder);\n                setState(clusterService, builder.version(0));\n            }\n            assertFalse(listener.isDone());\n            capturedRequests = transport.getCapturedRequestsAndClear();\n            assertThat(capturedRequests.length, equalTo(1));\n            capturedRequest = capturedRequests[0];\n            assertTrue(capturedRequest.node.isMasterNode());\n            assertThat(capturedRequest.request, equalTo(request));\n            assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n        } else if (failsWithConnectTransportException) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n            assertTrue(listener.isDone());\n            listener.get();\n        } else {\n            ElasticsearchException t = new ElasticsearchException(\"test\");\n            t.addHeader(\"header\", \"is here\");\n            transport.handleRemoteError(capturedRequest.requestId, t);\n            assertTrue(listener.isDone());\n            try {\n                listener.get();\n                fail(\"Expected exception but returned proper result\");\n            } catch (ExecutionException ex) {\n                final Throwable cause = ex.getCause().getCause();\n                assertThat(cause, instanceOf(ElasticsearchException.class));\n                final ElasticsearchException es = (ElasticsearchException) cause;\n                assertThat(es.getMessage(), equalTo(t.getMessage()));\n                assertThat(es.getHeader(\"header\"), equalTo(t.getHeader(\"header\")));\n            }\n        }\n    }\n","date":"2019-07-12 04:53:46","endLine":438,"groupId":"66123","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDelegateToFailingMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2a/a6f83df8fcf63eded0662d06e83682785c1f2d.src","preCode":"    public void testDelegateToFailingMaster() throws ExecutionException, InterruptedException {\n        boolean failsWithConnectTransportException = randomBoolean();\n        boolean rejoinSameMaster = failsWithConnectTransportException && randomBoolean();\n        Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(failsWithConnectTransportException ? 60 : 0));\n        DiscoveryNode masterNode = this.remoteNode;\n        setState(clusterService, ClusterState.builder(ClusterStateCreationUtils.state(localNode, masterNode, allNodes))\n            .version(randomIntBetween(0, 10))); \r\n\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        new Action(\"internal:testAction\", transportService, clusterService, threadPool).execute(request, listener);\n\n        CapturingTransport.CapturedRequest[] capturedRequests = transport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests.length, equalTo(1));\n        CapturingTransport.CapturedRequest capturedRequest = capturedRequests[0];\n        assertTrue(capturedRequest.node.isMasterNode());\n        assertThat(capturedRequest.request, equalTo(request));\n        assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n\n        if (rejoinSameMaster) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            if (randomBoolean()) {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(null);\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            }\n            if (randomBoolean()) {\n                \r\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(masterNode.getId());\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            } else {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.remove(masterNode);\n                masterNode = new DiscoveryNode(masterNode.getId(), masterNode.getAddress(), masterNode.getVersion());\n                nodesBuilder.add(masterNode);\n                nodesBuilder.masterNodeId(masterNode.getId());\n                final ClusterState.Builder builder = ClusterState.builder(clusterService.state()).nodes(nodesBuilder);\n                setState(clusterService, builder.version(0));\n            }\n            assertFalse(listener.isDone());\n            capturedRequests = transport.getCapturedRequestsAndClear();\n            assertThat(capturedRequests.length, equalTo(1));\n            capturedRequest = capturedRequests[0];\n            assertTrue(capturedRequest.node.isMasterNode());\n            assertThat(capturedRequest.request, equalTo(request));\n            assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n        } else if (failsWithConnectTransportException) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n            assertTrue(listener.isDone());\n            listener.get();\n        } else {\n            ElasticsearchException t = new ElasticsearchException(\"test\");\n            t.addHeader(\"header\", \"is here\");\n            transport.handleRemoteError(capturedRequest.requestId, t);\n            assertTrue(listener.isDone());\n            try {\n                listener.get();\n                fail(\"Expected exception but returned proper result\");\n            } catch (ExecutionException ex) {\n                final Throwable cause = ex.getCause().getCause();\n                assertThat(cause, instanceOf(ElasticsearchException.class));\n                final ElasticsearchException es = (ElasticsearchException) cause;\n                assertThat(es.getMessage(), equalTo(t.getMessage()));\n                assertThat(es.getHeader(\"header\"), equalTo(t.getHeader(\"header\")));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"}],"commitId":"f7d06eea557cc5bb0f5a56c4ec0716bd58ef7bca","commitMessage":"@@@Remove most direct test calls to TransportAction.execute (#44241)\n\nThere are currently 3 variants of TransportAction.execute. The\nimplementations of these require additional ctor arguments to all\nTransportAction implementations. While the non test uses can be\nconverted to using NodeClient to execute other actions.  using that for\ntest cases would be cumbersome and defeat the purpose of unit tests\ntesting an action's implementation directly. This commit adds a public\ntest-only utility method for test to use to call execute. This method\nwill continue to be available when the execute implementations are\ncollapsed and made package private.\n\nrelates #43881","date":"2019-07-12 04:53:46","modifiedFileCount":"12","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2020-01-25 01:19:54","codes":[{"authorDate":"2019-07-12 04:53:46","commitOrder":5,"curCode":"    public void testMasterBecomesAvailable() throws ExecutionException, InterruptedException {\n        Request request = new Request();\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, null, allNodes));\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        ActionTestUtils.execute(new Action(\"internal:testAction\", transportService, clusterService, threadPool), null, request, listener);\n        assertFalse(listener.isDone());\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n        assertTrue(listener.isDone());\n        listener.get();\n    }\n","date":"2019-07-12 04:53:46","endLine":345,"groupId":"105698","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMasterBecomesAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2a/a6f83df8fcf63eded0662d06e83682785c1f2d.src","preCode":"    public void testMasterBecomesAvailable() throws ExecutionException, InterruptedException {\n        Request request = new Request();\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, null, allNodes));\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        ActionTestUtils.execute(new Action(\"internal:testAction\", transportService, clusterService, threadPool), null, request, listener);\n        assertFalse(listener.isDone());\n        setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n        assertTrue(listener.isDone());\n        listener.get();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"N"},{"authorDate":"2020-01-25 01:19:54","commitOrder":5,"curCode":"    public void testDelegateToFailingMaster() throws ExecutionException, InterruptedException {\n        boolean failsWithConnectTransportException = randomBoolean();\n        boolean rejoinSameMaster = failsWithConnectTransportException && randomBoolean();\n        Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(failsWithConnectTransportException ? 60 : 0));\n        DiscoveryNode masterNode = this.remoteNode;\n        setState(\n            clusterService,\n            \r\n            ClusterState.builder(ClusterStateCreationUtils.state(localNode, masterNode, allNodes)).version(randomIntBetween(0, 10))\n        );\n\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        ActionTestUtils.execute(new Action(\"internal:testAction\", transportService, clusterService, threadPool), null, request, listener);\n\n        CapturingTransport.CapturedRequest[] capturedRequests = transport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests.length, equalTo(1));\n        CapturingTransport.CapturedRequest capturedRequest = capturedRequests[0];\n        assertTrue(capturedRequest.node.isMasterNode());\n        assertThat(capturedRequest.request, equalTo(request));\n        assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n\n        if (rejoinSameMaster) {\n            transport.handleRemoteError(capturedRequest.requestId,\n                randomBoolean() ? new ConnectTransportException(masterNode, \"Fake error\") : new NodeClosedException(masterNode));\n            assertFalse(listener.isDone());\n            if (randomBoolean()) {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(null);\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            }\n            if (randomBoolean()) {\n                \r\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(masterNode.getId());\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            } else {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.remove(masterNode);\n                masterNode = new DiscoveryNode(masterNode.getId(), masterNode.getAddress(), masterNode.getVersion());\n                nodesBuilder.add(masterNode);\n                nodesBuilder.masterNodeId(masterNode.getId());\n                final ClusterState.Builder builder = ClusterState.builder(clusterService.state()).nodes(nodesBuilder);\n                setState(clusterService, builder.version(0));\n            }\n            assertFalse(listener.isDone());\n            capturedRequests = transport.getCapturedRequestsAndClear();\n            assertThat(capturedRequests.length, equalTo(1));\n            capturedRequest = capturedRequests[0];\n            assertTrue(capturedRequest.node.isMasterNode());\n            assertThat(capturedRequest.request, equalTo(request));\n            assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n        } else if (failsWithConnectTransportException) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n            assertTrue(listener.isDone());\n            listener.get();\n        } else {\n            ElasticsearchException t = new ElasticsearchException(\"test\");\n            t.addHeader(\"header\", \"is here\");\n            transport.handleRemoteError(capturedRequest.requestId, t);\n            assertTrue(listener.isDone());\n            try {\n                listener.get();\n                fail(\"Expected exception but returned proper result\");\n            } catch (ExecutionException ex) {\n                final Throwable cause = ex.getCause().getCause();\n                assertThat(cause, instanceOf(ElasticsearchException.class));\n                final ElasticsearchException es = (ElasticsearchException) cause;\n                assertThat(es.getMessage(), equalTo(t.getMessage()));\n                assertThat(es.getHeader(\"header\"), equalTo(t.getHeader(\"header\")));\n            }\n        }\n    }\n","date":"2020-01-25 01:19:54","endLine":450,"groupId":"105698","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDelegateToFailingMaster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/f617ca3f9fdfbeeda498ab4f6b3de0fdb77fa5.src","preCode":"    public void testDelegateToFailingMaster() throws ExecutionException, InterruptedException {\n        boolean failsWithConnectTransportException = randomBoolean();\n        boolean rejoinSameMaster = failsWithConnectTransportException && randomBoolean();\n        Request request = new Request().masterNodeTimeout(TimeValue.timeValueSeconds(failsWithConnectTransportException ? 60 : 0));\n        DiscoveryNode masterNode = this.remoteNode;\n        setState(\n            clusterService,\n            \r\n            ClusterState.builder(ClusterStateCreationUtils.state(localNode, masterNode, allNodes)).version(randomIntBetween(0, 10))\n        );\n\n        PlainActionFuture<Response> listener = new PlainActionFuture<>();\n        ActionTestUtils.execute(new Action(\"internal:testAction\", transportService, clusterService, threadPool), null, request, listener);\n\n        CapturingTransport.CapturedRequest[] capturedRequests = transport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests.length, equalTo(1));\n        CapturingTransport.CapturedRequest capturedRequest = capturedRequests[0];\n        assertTrue(capturedRequest.node.isMasterNode());\n        assertThat(capturedRequest.request, equalTo(request));\n        assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n\n        if (rejoinSameMaster) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            if (randomBoolean()) {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(null);\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            }\n            if (randomBoolean()) {\n                \r\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.masterNodeId(masterNode.getId());\n                setState(clusterService, ClusterState.builder(clusterService.state()).nodes(nodesBuilder));\n            } else {\n                \r\n                final DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes());\n                nodesBuilder.remove(masterNode);\n                masterNode = new DiscoveryNode(masterNode.getId(), masterNode.getAddress(), masterNode.getVersion());\n                nodesBuilder.add(masterNode);\n                nodesBuilder.masterNodeId(masterNode.getId());\n                final ClusterState.Builder builder = ClusterState.builder(clusterService.state()).nodes(nodesBuilder);\n                setState(clusterService, builder.version(0));\n            }\n            assertFalse(listener.isDone());\n            capturedRequests = transport.getCapturedRequestsAndClear();\n            assertThat(capturedRequests.length, equalTo(1));\n            capturedRequest = capturedRequests[0];\n            assertTrue(capturedRequest.node.isMasterNode());\n            assertThat(capturedRequest.request, equalTo(request));\n            assertThat(capturedRequest.action, equalTo(\"internal:testAction\"));\n        } else if (failsWithConnectTransportException) {\n            transport.handleRemoteError(capturedRequest.requestId, new ConnectTransportException(masterNode, \"Fake error\"));\n            assertFalse(listener.isDone());\n            setState(clusterService, ClusterStateCreationUtils.state(localNode, localNode, allNodes));\n            assertTrue(listener.isDone());\n            listener.get();\n        } else {\n            ElasticsearchException t = new ElasticsearchException(\"test\");\n            t.addHeader(\"header\", \"is here\");\n            transport.handleRemoteError(capturedRequest.requestId, t);\n            assertTrue(listener.isDone());\n            try {\n                listener.get();\n                fail(\"Expected exception but returned proper result\");\n            } catch (ExecutionException ex) {\n                final Throwable cause = ex.getCause().getCause();\n                assertThat(cause, instanceOf(ElasticsearchException.class));\n                final ElasticsearchException es = (ElasticsearchException) cause;\n                assertThat(es.getMessage(), equalTo(t.getMessage()));\n                assertThat(es.getHeader(\"header\"), equalTo(t.getHeader(\"header\")));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/master/TransportMasterNodeActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":374,"status":"M"}],"commitId":"db480292eebdf9868e53c10ee07abae5e6a45bc7","commitMessage":"@@@Fix TransportMasterNodeAction not Retrying NodeClosedException (#51325)\n\nAdded node closed exception to the retryable remote exceptions as it's possible to run into this exception instead of a connect exception when the master node is just shutting down but still responding to requests.\n","date":"2020-01-25 01:19:54","modifiedFileCount":"3","status":"M","submitter":"Armin Braun"}]
