[{"authorTime":"2019-03-19 03:16:36","codes":[{"authorDate":"2018-12-05 02:22:17","commitOrder":4,"curCode":"    public void testRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        assertThat(shard.refreshStats().getTotal(), equalTo(2L)); \r\n        long initialTotalTime = shard.refreshStats().getTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(2L + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(2L + i));\n            assertThat(shard.refreshStats().getTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        long refreshCount = shard.refreshStats().getTotal();\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"_doc\", \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+1));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+2));\n        closeShards(shard);\n    }\n","date":"2018-12-05 02:22:17","endLine":1444,"groupId":"13802","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRefreshMetric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/10/941aa4cedee556d14302cfc813a3d7e93d7105.src","preCode":"    public void testRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        assertThat(shard.refreshStats().getTotal(), equalTo(2L)); \r\n        long initialTotalTime = shard.refreshStats().getTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(2L + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(2L + i));\n            assertThat(shard.refreshStats().getTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        long refreshCount = shard.refreshStats().getTotal();\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"_doc\", \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+1));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+2));\n        closeShards(shard);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1422,"status":"NB"},{"authorDate":"2019-03-19 03:16:36","commitOrder":4,"curCode":"    public void testExternalRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L)); \r\n        long initialTotalTime = shard.refreshStats().getExternalTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getExternalTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i));\n            assertThat(shard.refreshStats().getExternalTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        long externalRefreshCount = shard.refreshStats().getExternalTotal();\n\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"_doc\", \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 1));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 2));\n        closeShards(shard);\n    }\n","date":"2019-03-19 03:16:36","endLine":1539,"groupId":"13802","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExternalRefreshMetric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/8b62dec9f7ff77afc5b4db08acd5da0f731887.src","preCode":"    public void testExternalRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L)); \r\n        long initialTotalTime = shard.refreshStats().getExternalTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getExternalTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i));\n            assertThat(shard.refreshStats().getExternalTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        long externalRefreshCount = shard.refreshStats().getExternalTotal();\n\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"_doc\", \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 1));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 2));\n        closeShards(shard);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1514,"status":"B"}],"commitId":"4d7348518f5bc11e88346d7ce0b148ad5413f9f9","commitMessage":"@@@Expose external refreshes through the stats API (#38643)\n\nRight now.  the stats API only provides refresh metrics regarding\ninternal refreshes. This isn't very useful and somewhat misleading for\ncluster administrators since the internal refreshes are not indicative\nof documents being available for search.\n\nIn this PR I added a new metric for collecting external refreshes as\nthey occur and exposing them through the stats API. Now.  calling an\nendpoint for stats will yield external refresh metrics as well.\n\nRelates #36712","date":"2019-03-19 03:16:36","modifiedFileCount":"11","status":"M","submitter":"Conor Landry"},{"authorTime":"2019-08-02 22:00:32","codes":[{"authorDate":"2019-08-02 22:00:32","commitOrder":5,"curCode":"    public void testRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        \r\n        \r\n        final long initialRefreshes = shard.routingEntry().primary() || shard.indexSettings().isSoftDeleteEnabled() == false ? 2L : 3L;\n        assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes));\n        long initialTotalTime = shard.refreshStats().getTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes + i));\n            assertThat(shard.refreshStats().getTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        long refreshCount = shard.refreshStats().getTotal();\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"_doc\", \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+1));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+2));\n        closeShards(shard);\n    }\n","date":"2019-08-02 22:00:32","endLine":1584,"groupId":"49946","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRefreshMetric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/94/82054486dc2c73b8e67c7d322ea48bde4d670b.src","preCode":"    public void testRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        assertThat(shard.refreshStats().getTotal(), equalTo(2L)); \r\n        long initialTotalTime = shard.refreshStats().getTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(2L + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(2L + i));\n            assertThat(shard.refreshStats().getTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        long refreshCount = shard.refreshStats().getTotal();\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"_doc\", \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+1));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+2));\n        closeShards(shard);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1559,"status":"M"},{"authorDate":"2019-08-02 22:00:32","commitOrder":5,"curCode":"    public void testExternalRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L)); \r\n        long initialTotalTime = shard.refreshStats().getExternalTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getExternalTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i));\n            assertThat(shard.refreshStats().getExternalTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        final long externalRefreshCount = shard.refreshStats().getExternalTotal();\n        final long extraInternalRefreshes = shard.routingEntry().primary() || shard.indexSettings().isSoftDeleteEnabled() == false ? 0 : 1;\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"_doc\", \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 1 - extraInternalRefreshes));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 2 - extraInternalRefreshes));\n        closeShards(shard);\n    }\n","date":"2019-08-02 22:00:32","endLine":1611,"groupId":"58738","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExternalRefreshMetric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/94/82054486dc2c73b8e67c7d322ea48bde4d670b.src","preCode":"    public void testExternalRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L)); \r\n        long initialTotalTime = shard.refreshStats().getExternalTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getExternalTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i));\n            assertThat(shard.refreshStats().getExternalTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        long externalRefreshCount = shard.refreshStats().getExternalTotal();\n\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"_doc\", \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 1));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 2));\n        closeShards(shard);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1586,"status":"M"}],"commitId":"01287eacb2f2d2673bc25078fb0b76d81beaad9b","commitMessage":"@@@Use index for peer recovery instead of translog (#45136)\n\nToday we recover a replica by copying operations from the primary's translog.\nHowever we also retain some historical operations in the index itself.  as long\nas soft-deletes are enabled. This commit adjusts peer recovery to use the\noperations in the index for recovery rather than those in the translog.  and\nensures that the replication group retains enough history for use in peer\nrecovery by means of retention leases.\n\nReverts #38904 and #42211\nRelates #41536","date":"2019-08-02 22:00:32","modifiedFileCount":"42","status":"M","submitter":"David Turner"},{"authorTime":"2019-09-20 21:22:57","codes":[{"authorDate":"2019-09-20 21:22:57","commitOrder":6,"curCode":"    public void testRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        \r\n        \r\n        final long initialRefreshes = shard.routingEntry().primary() || shard.indexSettings().isSoftDeleteEnabled() == false ? 2L : 3L;\n        assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes));\n        long initialTotalTime = shard.refreshStats().getTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes + i));\n            assertThat(shard.refreshStats().getTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        long refreshCount = shard.refreshStats().getTotal();\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+1));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+2));\n        closeShards(shard);\n    }\n","date":"2019-09-20 21:22:57","endLine":1586,"groupId":"49946","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRefreshMetric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/81/1e27ee8848ae5a8fedbad364cfcc4ffb0b73b2.src","preCode":"    public void testRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        \r\n        \r\n        final long initialRefreshes = shard.routingEntry().primary() || shard.indexSettings().isSoftDeleteEnabled() == false ? 2L : 3L;\n        assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes));\n        long initialTotalTime = shard.refreshStats().getTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes + i));\n            assertThat(shard.refreshStats().getTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        long refreshCount = shard.refreshStats().getTotal();\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"_doc\", \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+1));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+2));\n        closeShards(shard);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1561,"status":"M"},{"authorDate":"2019-09-20 21:22:57","commitOrder":6,"curCode":"    public void testExternalRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L)); \r\n        long initialTotalTime = shard.refreshStats().getExternalTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getExternalTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i));\n            assertThat(shard.refreshStats().getExternalTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        final long externalRefreshCount = shard.refreshStats().getExternalTotal();\n        final long extraInternalRefreshes = shard.routingEntry().primary() || shard.indexSettings().isSoftDeleteEnabled() == false ? 0 : 1;\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 1 - extraInternalRefreshes));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 2 - extraInternalRefreshes));\n        closeShards(shard);\n    }\n","date":"2019-09-20 21:22:57","endLine":1613,"groupId":"72206","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExternalRefreshMetric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/81/1e27ee8848ae5a8fedbad364cfcc4ffb0b73b2.src","preCode":"    public void testExternalRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L)); \r\n        long initialTotalTime = shard.refreshStats().getExternalTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getExternalTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i));\n            assertThat(shard.refreshStats().getExternalTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        final long externalRefreshCount = shard.refreshStats().getExternalTotal();\n        final long extraInternalRefreshes = shard.routingEntry().primary() || shard.indexSettings().isSoftDeleteEnabled() == false ? 0 : 1;\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"_doc\", \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 1 - extraInternalRefreshes));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 2 - extraInternalRefreshes));\n        closeShards(shard);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1588,"status":"M"}],"commitId":"7c90801aff398d9b73e4fa24933550d2320a5a4d","commitMessage":"@@@Remove types from Get/MultiGet (#46587)\n\nThis commit removes types from the ShardGetService.  and propagates this API change\nup through the Transport and Rest actions for Get and MultiGet\n\nRelates to #41059","date":"2019-09-20 21:22:57","modifiedFileCount":"136","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-10-27 22:33:40","codes":[{"authorDate":"2020-10-27 22:33:40","commitOrder":7,"curCode":"    public void testRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        \r\n        \r\n        final long initialRefreshes = shard.routingEntry().primary() || shard.indexSettings().isSoftDeleteEnabled() == false ? 2L : 3L;\n        assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes));\n        long initialTotalTime = shard.refreshStats().getTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes + i));\n            assertThat(shard.refreshStats().getTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        long refreshCount = shard.refreshStats().getTotal();\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"test\"))) {\n            assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+1));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+2));\n        closeShards(shard);\n    }\n","date":"2020-10-27 22:33:40","endLine":1589,"groupId":"102628","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRefreshMetric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e0/f9c32c4a52a07b62a933a61025fe68d6b637e8.src","preCode":"    public void testRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        \r\n        \r\n        final long initialRefreshes = shard.routingEntry().primary() || shard.indexSettings().isSoftDeleteEnabled() == false ? 2L : 3L;\n        assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes));\n        long initialTotalTime = shard.refreshStats().getTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getTotal(), equalTo(initialRefreshes + i));\n            assertThat(shard.refreshStats().getTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        long refreshCount = shard.refreshStats().getTotal();\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+1));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getTotal(), equalTo(refreshCount+2));\n        closeShards(shard);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1565,"status":"M"},{"authorDate":"2020-10-27 22:33:40","commitOrder":7,"curCode":"    public void testExternalRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L)); \r\n        long initialTotalTime = shard.refreshStats().getExternalTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getExternalTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i));\n            assertThat(shard.refreshStats().getExternalTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        final long externalRefreshCount = shard.refreshStats().getExternalTotal();\n        final long extraInternalRefreshes = shard.routingEntry().primary() || shard.indexSettings().isSoftDeleteEnabled() == false ? 0 : 1;\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"test\"))) {\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 1 - extraInternalRefreshes));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 2 - extraInternalRefreshes));\n        closeShards(shard);\n    }\n","date":"2020-10-27 22:33:40","endLine":1615,"groupId":"102628","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExternalRefreshMetric","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e0/f9c32c4a52a07b62a933a61025fe68d6b637e8.src","preCode":"    public void testExternalRefreshMetric() throws IOException {\n        IndexShard shard = newStartedShard();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L)); \r\n        long initialTotalTime = shard.refreshStats().getExternalTotalTimeInMillis();\n        \r\n        for (int i = 1; shard.refreshStats().getExternalTotalTimeInMillis() == initialTotalTime; i++) {\n            indexDoc(shard, \"_doc\", \"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i - 1));\n            shard.refresh(\"test\");\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(2L + i));\n            assertThat(shard.refreshStats().getExternalTotalTimeInMillis(), greaterThanOrEqualTo(initialTotalTime));\n        }\n        final long externalRefreshCount = shard.refreshStats().getExternalTotal();\n        final long extraInternalRefreshes = shard.routingEntry().primary() || shard.indexSettings().isSoftDeleteEnabled() == false ? 0 : 1;\n        indexDoc(shard, \"_doc\", \"test\");\n        try (Engine.GetResult ignored = shard.get(new Engine.Get(true, false, \"test\",\n            new Term(IdFieldMapper.NAME, Uid.encodeId(\"test\"))))) {\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n            assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 1 - extraInternalRefreshes));\n        }\n        indexDoc(shard, \"_doc\", \"test\");\n        shard.writeIndexingBuffer();\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(externalRefreshCount));\n        assertThat(shard.refreshStats().getExternalTotal(), equalTo(shard.refreshStats().getTotal() - 2 - extraInternalRefreshes));\n        closeShards(shard);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1591,"status":"M"}],"commitId":"3d19ce9b1dd9ab703698035ebf05f5620df94a5e","commitMessage":"@@@Remove uid from Engine#Get constructor (#64119)\n\nWe can no longer need to pass _uid to Engine#Get \nas we now have a single doc type.","date":"2020-10-27 22:33:40","modifiedFileCount":"9","status":"M","submitter":"Nhat Nguyen"}]
