[{"authorTime":"2018-09-29 05:40:12","codes":[{"authorDate":"2018-06-11 16:47:26","commitOrder":3,"curCode":"    public void testGetEngineFactory() throws IOException {\n        final IndicesService indicesService = getIndicesService();\n\n        final Boolean[] values = new Boolean[] { true, false, null };\n        for (final Boolean value : values) {\n            final String indexName = \"foo-\" + value;\n            final Index index = new Index(indexName, UUIDs.randomBase64UUID());\n            final Settings.Builder builder = Settings.builder()\n                    .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)\n                    .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID());\n            if (value != null) {\n                builder.put(FooEnginePlugin.FOO_INDEX_SETTING.getKey(), value);\n            }\n\n            final IndexMetaData indexMetaData = new IndexMetaData.Builder(index.getName())\n                    .settings(builder.build())\n                    .numberOfShards(1)\n                    .numberOfReplicas(0)\n                    .build();\n            final IndexService indexService = indicesService.createIndex(indexMetaData, Collections.emptyList());\n            if (value != null && value) {\n                assertThat(indexService.getEngineFactory(), instanceOf(FooEnginePlugin.FooEngineFactory.class));\n            } else {\n                assertThat(indexService.getEngineFactory(), instanceOf(InternalEngineFactory.class));\n            }\n        }\n    }\n","date":"2018-06-11 16:47:26","endLine":541,"groupId":"26184","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetEngineFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/35/416c617fdd0ca053ccf77554bbdd6a5132c8f6.src","preCode":"    public void testGetEngineFactory() throws IOException {\n        final IndicesService indicesService = getIndicesService();\n\n        final Boolean[] values = new Boolean[] { true, false, null };\n        for (final Boolean value : values) {\n            final String indexName = \"foo-\" + value;\n            final Index index = new Index(indexName, UUIDs.randomBase64UUID());\n            final Settings.Builder builder = Settings.builder()\n                    .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)\n                    .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID());\n            if (value != null) {\n                builder.put(FooEnginePlugin.FOO_INDEX_SETTING.getKey(), value);\n            }\n\n            final IndexMetaData indexMetaData = new IndexMetaData.Builder(index.getName())\n                    .settings(builder.build())\n                    .numberOfShards(1)\n                    .numberOfReplicas(0)\n                    .build();\n            final IndexService indexService = indicesService.createIndex(indexMetaData, Collections.emptyList());\n            if (value != null && value) {\n                assertThat(indexService.getEngineFactory(), instanceOf(FooEnginePlugin.FooEngineFactory.class));\n            } else {\n                assertThat(indexService.getEngineFactory(), instanceOf(InternalEngineFactory.class));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"NB"},{"authorDate":"2018-09-29 05:40:12","commitOrder":3,"curCode":"    public void testGetEngineFactory() throws IOException {\n        final Boolean[] values = new Boolean[] { true, false, null };\n        for (final Boolean value : values) {\n            final String indexName = \"following-\" + value;\n            final Index index = new Index(indexName, UUIDs.randomBase64UUID());\n            final Settings.Builder builder = Settings.builder()\n                    .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)\n                    .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID());\n            if (value != null) {\n                builder.put(CcrSettings.CCR_FOLLOWING_INDEX_SETTING.getKey(), value);\n            }\n\n            final IndexMetaData indexMetaData = new IndexMetaData.Builder(index.getName())\n                    .settings(builder.build())\n                    .numberOfShards(1)\n                    .numberOfReplicas(0)\n                    .build();\n            final Ccr ccr = new Ccr(Settings.EMPTY, new CcrLicenseChecker(() -> true, () -> false));\n            final Optional<EngineFactory> engineFactory = ccr.getEngineFactory(new IndexSettings(indexMetaData, Settings.EMPTY));\n            if (value != null && value) {\n                assertTrue(engineFactory.isPresent());\n                assertThat(engineFactory.get(), instanceOf(FollowingEngineFactory.class));\n            } else {\n                assertFalse(engineFactory.isPresent());\n            }\n        }\n    }\n","date":"2018-09-29 05:40:12","endLine":53,"groupId":"1012","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetEngineFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/65/efc184ec177c15003df00d9b8aefe1e244b20e.src","preCode":"    public void testGetEngineFactory() throws IOException {\n        final Boolean[] values = new Boolean[] { true, false, null };\n        for (final Boolean value : values) {\n            final String indexName = \"following-\" + value;\n            final Index index = new Index(indexName, UUIDs.randomBase64UUID());\n            final Settings.Builder builder = Settings.builder()\n                    .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)\n                    .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID());\n            if (value != null) {\n                builder.put(CcrSettings.CCR_FOLLOWING_INDEX_SETTING.getKey(), value);\n            }\n\n            final IndexMetaData indexMetaData = new IndexMetaData.Builder(index.getName())\n                    .settings(builder.build())\n                    .numberOfShards(1)\n                    .numberOfReplicas(0)\n                    .build();\n            final Ccr ccr = new Ccr(Settings.EMPTY, new CcrLicenseChecker(() -> true, () -> false));\n            final Optional<EngineFactory> engineFactory = ccr.getEngineFactory(new IndexSettings(indexMetaData, Settings.EMPTY));\n            if (value != null && value) {\n                assertTrue(engineFactory.isPresent());\n                assertThat(engineFactory.get(), instanceOf(FollowingEngineFactory.class));\n            } else {\n                assertFalse(engineFactory.isPresent());\n            }\n        }\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/CcrTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"MB"}],"commitId":"6ea396a476ada0c6d5ff0f27a3e5526b42ff1502","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-29 05:40:12","modifiedFileCount":"333","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-09-29 05:40:12","codes":[{"authorDate":"2020-01-13 21:10:02","commitOrder":4,"curCode":"    public void testGetEngineFactory() throws IOException {\n        final IndicesService indicesService = getIndicesService();\n\n        final Boolean[] values = new Boolean[] { true, false, null };\n        for (final Boolean value : values) {\n            final String indexName = \"foo-\" + value;\n            final Index index = new Index(indexName, UUIDs.randomBase64UUID());\n            final Settings.Builder builder = Settings.builder()\n                    .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)\n                    .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID());\n            if (value != null) {\n                builder.put(FooEnginePlugin.FOO_INDEX_SETTING.getKey(), value);\n            }\n\n            final IndexMetaData indexMetaData = new IndexMetaData.Builder(index.getName())\n                    .settings(builder.build())\n                    .numberOfShards(1)\n                    .numberOfReplicas(0)\n                    .build();\n            final IndexService indexService = indicesService.createIndex(indexMetaData, Collections.emptyList(), false);\n            if (value != null && value) {\n                assertThat(indexService.getEngineFactory(), instanceOf(FooEnginePlugin.FooEngineFactory.class));\n            } else {\n                assertThat(indexService.getEngineFactory(), instanceOf(InternalEngineFactory.class));\n            }\n        }\n    }\n","date":"2020-01-13 21:10:02","endLine":559,"groupId":"26184","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetEngineFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ea/41f14a53af3cefcfc48b4fb6df7be933030ab8.src","preCode":"    public void testGetEngineFactory() throws IOException {\n        final IndicesService indicesService = getIndicesService();\n\n        final Boolean[] values = new Boolean[] { true, false, null };\n        for (final Boolean value : values) {\n            final String indexName = \"foo-\" + value;\n            final Index index = new Index(indexName, UUIDs.randomBase64UUID());\n            final Settings.Builder builder = Settings.builder()\n                    .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)\n                    .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID());\n            if (value != null) {\n                builder.put(FooEnginePlugin.FOO_INDEX_SETTING.getKey(), value);\n            }\n\n            final IndexMetaData indexMetaData = new IndexMetaData.Builder(index.getName())\n                    .settings(builder.build())\n                    .numberOfShards(1)\n                    .numberOfReplicas(0)\n                    .build();\n            final IndexService indexService = indicesService.createIndex(indexMetaData, Collections.emptyList());\n            if (value != null && value) {\n                assertThat(indexService.getEngineFactory(), instanceOf(FooEnginePlugin.FooEngineFactory.class));\n            } else {\n                assertThat(indexService.getEngineFactory(), instanceOf(InternalEngineFactory.class));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":533,"status":"M"},{"authorDate":"2018-09-29 05:40:12","commitOrder":4,"curCode":"    public void testGetEngineFactory() throws IOException {\n        final Boolean[] values = new Boolean[] { true, false, null };\n        for (final Boolean value : values) {\n            final String indexName = \"following-\" + value;\n            final Index index = new Index(indexName, UUIDs.randomBase64UUID());\n            final Settings.Builder builder = Settings.builder()\n                    .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)\n                    .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID());\n            if (value != null) {\n                builder.put(CcrSettings.CCR_FOLLOWING_INDEX_SETTING.getKey(), value);\n            }\n\n            final IndexMetaData indexMetaData = new IndexMetaData.Builder(index.getName())\n                    .settings(builder.build())\n                    .numberOfShards(1)\n                    .numberOfReplicas(0)\n                    .build();\n            final Ccr ccr = new Ccr(Settings.EMPTY, new CcrLicenseChecker(() -> true, () -> false));\n            final Optional<EngineFactory> engineFactory = ccr.getEngineFactory(new IndexSettings(indexMetaData, Settings.EMPTY));\n            if (value != null && value) {\n                assertTrue(engineFactory.isPresent());\n                assertThat(engineFactory.get(), instanceOf(FollowingEngineFactory.class));\n            } else {\n                assertFalse(engineFactory.isPresent());\n            }\n        }\n    }\n","date":"2018-09-29 05:40:12","endLine":53,"groupId":"1012","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetEngineFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/65/efc184ec177c15003df00d9b8aefe1e244b20e.src","preCode":"    public void testGetEngineFactory() throws IOException {\n        final Boolean[] values = new Boolean[] { true, false, null };\n        for (final Boolean value : values) {\n            final String indexName = \"following-\" + value;\n            final Index index = new Index(indexName, UUIDs.randomBase64UUID());\n            final Settings.Builder builder = Settings.builder()\n                    .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)\n                    .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID());\n            if (value != null) {\n                builder.put(CcrSettings.CCR_FOLLOWING_INDEX_SETTING.getKey(), value);\n            }\n\n            final IndexMetaData indexMetaData = new IndexMetaData.Builder(index.getName())\n                    .settings(builder.build())\n                    .numberOfShards(1)\n                    .numberOfReplicas(0)\n                    .build();\n            final Ccr ccr = new Ccr(Settings.EMPTY, new CcrLicenseChecker(() -> true, () -> false));\n            final Optional<EngineFactory> engineFactory = ccr.getEngineFactory(new IndexSettings(indexMetaData, Settings.EMPTY));\n            if (value != null && value) {\n                assertTrue(engineFactory.isPresent());\n                assertThat(engineFactory.get(), instanceOf(FollowingEngineFactory.class));\n            } else {\n                assertFalse(engineFactory.isPresent());\n            }\n        }\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/CcrTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"N"}],"commitId":"a0513217dba5d964bf176c8f409baccfbd25359b","commitMessage":"@@@Move metadata storage to Lucene (#50907)\n\nToday we split the on-disk cluster metadata across many files: one file for the metadata of each\nindex.  plus one file for the global metadata and another for the manifest. Most metadata updates\nonly touch a few of these files.  but some must write them all. If a node holds a large number of\nindices then it's possible its disks are not fast enough to process a complete metadata update before timing out. In severe cases affecting master-eligible nodes this can prevent an election\nfrom succeeding.\n\nThis commit uses Lucene as a metadata storage for the cluster state.  and is a squashed version\nof the following PRs that were targeting a feature branch:\n\n\n* Introduce Lucene-based metadata persistence (#48733)\n\nThis commit introduces `LucenePersistedState` which master-eligible nodes\ncan use to persist the cluster metadata in a Lucene index rather than in\nmany separate files.\n\nRelates #48701\n\n* Remove per-index metadata without assigned shards (#49234)\n\nToday on master-eligible nodes we maintain per-index metadata files for every\nindex. However.  we also keep this metadata in the `LucenePersistedState`.  and\nonly use the per-index metadata files for importing dangling indices. However\nthere is no point in importing a dangling index without any shard data.  so we\ndo not need to maintain these extra files any more.\n\nThis commit removes per-index metadata files from nodes which do not hold any\nshards of those indices.\n\nRelates #48701\n\n* Use Lucene exclusively for metadata storage (#50144)\n\nThis moves metadata persistence to Lucene for all node types. It also reenables BWC and adds\nan interoperability layer for upgrades from prior versions.\n\nThis commit disables a number of tests related to dangling indices and command-line tools.\nThose will be addressed in follow-ups.\n\nRelates #48701\n\n* Add command-line tool support for Lucene-based metadata storage (#50179)\n\nAdds command-line tool support (unsafe-bootstrap.  detach-cluster.  repurpose.  & shard\ncommands) for the Lucene-based metadata storage.\n\nRelates #48701\n\n* Use single directory for metadata (#50639)\n\nEarlier PRs for #48701 introduced a separate directory for the cluster state. This is not needed\nthough.  and introduces an additional unnecessary cognitive burden to the users.\n\nCo-Authored-By: David Turner <david.turner@elastic.co>\n\n* Add async dangling indices support (#50642)\n\nAdds support for writing out dangling indices in an asynchronous way. Also provides an option to\navoid writing out dangling indices at all.\n\nRelates #48701\n\n* Fold node metadata into new node storage (#50741)\n\nMoves node metadata to uses the new storage mechanism (see #48701) as the authoritative source.\n\n* Write CS asynchronously on data-only nodes (#50782)\n\nWrites cluster states out asynchronously on data-only nodes. The main reason for writing out\nthe cluster state at all is so that the data-only nodes can snap into a cluster.  that they can do a\nbit of bootstrap validation and so that the shard recovery tools work.\nCluster states that are written asynchronously have their voting configuration adapted to a non\nexisting configuration so that these nodes cannot mistakenly become master even if their node\nrole is changed back and forth.\n\nRelates #48701\n\n* Remove persistent cluster settings tool (#50694)\n\nAdds the elasticsearch-node remove-settings tool to remove persistent settings from the on\ndisk cluster state in case where it contains incompatible settings that prevent the cluster from\nforming.\n\nRelates #48701\n\n* Make cluster state writer resilient to disk issues (#50805)\n\nAdds handling to make the cluster state writer resilient to disk issues. Relates to #48701\n\n* Omit writing global metadata if no change (#50901)\n\nUses the same optimization for the new cluster state storage layer as the old one.  writing global\nmetadata only when changed. Avoids writing out the global metadata if none of the persistent\nfields changed. Speeds up server:integTest by ~10%.\n\nRelates #48701\n\n* DanglingIndicesIT should ensure node removed first (#50896)\n\nThese tests occasionally failed because the deletion was submitted before the\nrestarting node was removed from the cluster.  causing the deletion not to be\nfully acked. This commit fixes this by checking the restarting node has been\nremoved from the cluster.\n\nCo-authored-by: David Turner <david.turner@elastic.co>\n","date":"2020-01-13 21:10:02","modifiedFileCount":"46","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":5,"curCode":"    public void testGetEngineFactory() throws IOException {\n        final IndicesService indicesService = getIndicesService();\n\n        final Boolean[] values = new Boolean[] { true, false, null };\n        for (final Boolean value : values) {\n            final String indexName = \"foo-\" + value;\n            final Index index = new Index(indexName, UUIDs.randomBase64UUID());\n            final Settings.Builder builder = Settings.builder()\n                    .put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT)\n                    .put(IndexMetadata.SETTING_INDEX_UUID, index.getUUID());\n            if (value != null) {\n                builder.put(FooEnginePlugin.FOO_INDEX_SETTING.getKey(), value);\n            }\n\n            final IndexMetadata indexMetadata = new IndexMetadata.Builder(index.getName())\n                    .settings(builder.build())\n                    .numberOfShards(1)\n                    .numberOfReplicas(0)\n                    .build();\n            final IndexService indexService = indicesService.createIndex(indexMetadata, Collections.emptyList(), false);\n            if (value != null && value) {\n                assertThat(indexService.getEngineFactory(), instanceOf(FooEnginePlugin.FooEngineFactory.class));\n            } else {\n                assertThat(indexService.getEngineFactory(), instanceOf(InternalEngineFactory.class));\n            }\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":564,"groupId":"103808","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetEngineFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ba/a5f576f307eae142f8336befb39f20e11940a8.src","preCode":"    public void testGetEngineFactory() throws IOException {\n        final IndicesService indicesService = getIndicesService();\n\n        final Boolean[] values = new Boolean[] { true, false, null };\n        for (final Boolean value : values) {\n            final String indexName = \"foo-\" + value;\n            final Index index = new Index(indexName, UUIDs.randomBase64UUID());\n            final Settings.Builder builder = Settings.builder()\n                    .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)\n                    .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID());\n            if (value != null) {\n                builder.put(FooEnginePlugin.FOO_INDEX_SETTING.getKey(), value);\n            }\n\n            final IndexMetaData indexMetaData = new IndexMetaData.Builder(index.getName())\n                    .settings(builder.build())\n                    .numberOfShards(1)\n                    .numberOfReplicas(0)\n                    .build();\n            final IndexService indexService = indicesService.createIndex(indexMetaData, Collections.emptyList(), false);\n            if (value != null && value) {\n                assertThat(indexService.getEngineFactory(), instanceOf(FooEnginePlugin.FooEngineFactory.class));\n            } else {\n                assertThat(indexService.getEngineFactory(), instanceOf(InternalEngineFactory.class));\n            }\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":538,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":5,"curCode":"    public void testGetEngineFactory() throws IOException {\n        final Boolean[] values = new Boolean[] { true, false, null };\n        for (final Boolean value : values) {\n            final String indexName = \"following-\" + value;\n            final Index index = new Index(indexName, UUIDs.randomBase64UUID());\n            final Settings.Builder builder = Settings.builder()\n                    .put(IndexMetadata.SETTING_VERSION_CREATED, Version.CURRENT)\n                    .put(IndexMetadata.SETTING_INDEX_UUID, index.getUUID());\n            if (value != null) {\n                builder.put(CcrSettings.CCR_FOLLOWING_INDEX_SETTING.getKey(), value);\n            }\n\n            final IndexMetadata indexMetadata = new IndexMetadata.Builder(index.getName())\n                    .settings(builder.build())\n                    .numberOfShards(1)\n                    .numberOfReplicas(0)\n                    .build();\n            final Ccr ccr = new Ccr(Settings.EMPTY, new CcrLicenseChecker(() -> true, () -> false));\n            final Optional<EngineFactory> engineFactory = ccr.getEngineFactory(new IndexSettings(indexMetadata, Settings.EMPTY));\n            if (value != null && value) {\n                assertTrue(engineFactory.isPresent());\n                assertThat(engineFactory.get(), instanceOf(FollowingEngineFactory.class));\n            } else {\n                assertFalse(engineFactory.isPresent());\n            }\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":53,"groupId":"103808","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetEngineFactory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/d5fc279c6e44e585f39e96f6b841cfe35a77b2.src","preCode":"    public void testGetEngineFactory() throws IOException {\n        final Boolean[] values = new Boolean[] { true, false, null };\n        for (final Boolean value : values) {\n            final String indexName = \"following-\" + value;\n            final Index index = new Index(indexName, UUIDs.randomBase64UUID());\n            final Settings.Builder builder = Settings.builder()\n                    .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)\n                    .put(IndexMetaData.SETTING_INDEX_UUID, index.getUUID());\n            if (value != null) {\n                builder.put(CcrSettings.CCR_FOLLOWING_INDEX_SETTING.getKey(), value);\n            }\n\n            final IndexMetaData indexMetaData = new IndexMetaData.Builder(index.getName())\n                    .settings(builder.build())\n                    .numberOfShards(1)\n                    .numberOfReplicas(0)\n                    .build();\n            final Ccr ccr = new Ccr(Settings.EMPTY, new CcrLicenseChecker(() -> true, () -> false));\n            final Optional<EngineFactory> engineFactory = ccr.getEngineFactory(new IndexSettings(indexMetaData, Settings.EMPTY));\n            if (value != null && value) {\n                assertTrue(engineFactory.isPresent());\n                assertThat(engineFactory.get(), instanceOf(FollowingEngineFactory.class));\n            } else {\n                assertFalse(engineFactory.isPresent());\n            }\n        }\n    }\n","realPath":"x-pack/plugin/ccr/src/test/java/org/elasticsearch/xpack/ccr/CcrTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":27,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"}]
