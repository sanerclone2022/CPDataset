[{"authorTime":"2020-04-17 00:18:09","codes":[{"authorDate":"2019-07-31 10:52:59","commitOrder":2,"curCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"coerce\", \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        boolean coerce = ((ShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"coerce\", \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        coerce = ((ShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","date":"2019-07-31 10:52:59","endLine":134,"groupId":"65134","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d1/ca1a035a9bbf07a236fc9401a4ea70925e485a.src","preCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"coerce\", \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        boolean coerce = ((ShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"coerce\", \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        coerce = ((ShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/ShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"NB"},{"authorDate":"2020-04-17 00:18:09","commitOrder":2,"curCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeWithDocValuesFieldMapper.class));\n\n        boolean coerce = ((GeoShapeWithDocValuesFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeWithDocValuesFieldMapper.class));\n\n        coerce = ((GeoShapeWithDocValuesFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","date":"2020-04-17 00:18:09","endLine":182,"groupId":"65134","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1b/734e3dbba3ed674decfad8d723d0ecc5c51d83.src","preCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeWithDocValuesFieldMapper.class));\n\n        boolean coerce = ((GeoShapeWithDocValuesFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeWithDocValuesFieldMapper.class));\n\n        coerce = ((GeoShapeWithDocValuesFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/GeoShapeWithDocValuesFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"}],"commitId":"b78dfb07ae1f79300cfb9a99a740bf5cdd0e2f9b","commitMessage":"@@@Add geo_shape mapper supporting doc-values in Spatial Plugin (#55037)\n\nAfter #53562.  the `geo_shape` field mapper is registered within\na module. This opens the door for introducing a new `geo_shape`\nfield mapper into the Spatial Plugin that has doc-values support.\n\nThis is very much an extension of server's GeoShapeFieldMapper. \nbut with the addition of the doc values implementation.","date":"2020-04-17 00:18:09","modifiedFileCount":"11","status":"M","submitter":"Tal Levy"},{"authorTime":"2020-11-06 23:20:25","codes":[{"authorDate":"2020-11-06 23:20:25","commitOrder":3,"curCode":"    public void testCoerceParsing() throws IOException {\n\n        DocumentMapper defaultMapper = createDocumentMapper(fieldMapping(b -> {\n            b.field(\"type\", \"shape\");\n            b.field(\"coerce\", true);\n        }));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(FIELD_NAME);\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        boolean coerce = ((ShapeFieldMapper)fieldMapper).coerce();\n        assertThat(coerce, equalTo(true));\n\n        defaultMapper = createDocumentMapper(fieldMapping(b -> {\n            b.field(\"type\", \"shape\");\n            b.field(\"coerce\", false);\n        }));\n        fieldMapper = defaultMapper.mappers().getMapper(FIELD_NAME);\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        coerce = ((ShapeFieldMapper)fieldMapper).coerce();\n        assertThat(coerce, equalTo(false));\n\n    }\n","date":"2020-11-06 23:20:25","endLine":120,"groupId":"103011","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/51/a90405b731793e07e0539c143ab7a4e693405c.src","preCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"coerce\", \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        boolean coerce = ((ShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"shape\")\n            .field(\"coerce\", \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(ShapeFieldMapper.class));\n\n        coerce = ((ShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/ShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-11-06 23:20:25","commitOrder":3,"curCode":"    public void testCoerceParsing() throws IOException {\n\n        DocumentMapper defaultMapper = createDocumentMapper(fieldMapping(b -> {\n            b.field(\"type\", \"geo_shape\");\n            b.field(\"coerce\", true);\n        }));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeWithDocValuesFieldMapper.class));\n\n        boolean coerce = ((GeoShapeWithDocValuesFieldMapper)fieldMapper).coerce();\n        assertThat(coerce, equalTo(true));\n\n        defaultMapper = createDocumentMapper(fieldMapping(b -> {\n            b.field(\"type\", \"geo_shape\");\n            b.field(\"coerce\", false);\n        }));\n        fieldMapper = defaultMapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeWithDocValuesFieldMapper.class));\n\n        coerce = ((GeoShapeWithDocValuesFieldMapper)fieldMapper).coerce();\n        assertThat(coerce, equalTo(false));\n\n    }\n","date":"2020-11-06 23:20:25","endLine":172,"groupId":"103011","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/92/e7d0659f7b61103e260fdbf9d45d62ac7b437a.src","preCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeWithDocValuesFieldMapper.class));\n\n        boolean coerce = ((GeoShapeWithDocValuesFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(\"coerce\", \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeWithDocValuesFieldMapper.class));\n\n        coerce = ((GeoShapeWithDocValuesFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/mapper/GeoShapeWithDocValuesFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"038fc354abe932c3fc7615beb4e3b991f1219533","commitMessage":"@@@Use MapperTestCase for cartesian mappers tests (#64705)\n\nThis commit changes the cartesian mapper tests (point and shape fields) so that they use MapperTestCase. ","date":"2020-11-06 23:20:25","modifiedFileCount":"0","status":"M","submitter":"Ignacio Vera"}]
