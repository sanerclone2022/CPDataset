[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testExpandedTerms() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        \r\n        Query query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"aBc\")), query);\n        query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery expected = new FuzzyQuery(new Term(STRING_FIELD_NAME, \"aBc\"), 1);\n        assertEquals(expected, query);\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        expected = new FuzzyQuery(new Term(STRING_FIELD_NAME, \"abc\"), 1);\n        assertEquals(expected, query);\n    }\n","date":"2018-04-26 03:22:53","endLine":456,"groupId":"5192","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpandedTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7f/f2b7ec12285f87fca47f39377f9738f00fba9c.src","preCode":"    public void testExpandedTerms() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        \r\n        Query query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"aBc\")), query);\n        query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery expected = new FuzzyQuery(new Term(STRING_FIELD_NAME, \"aBc\"), 1);\n        assertEquals(expected, query);\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        expected = new FuzzyQuery(new Term(STRING_FIELD_NAME, \"abc\"), 1);\n        assertEquals(expected, query);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testExpandedTerms() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        \r\n        Query query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"aBc\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME, \"aBc*D\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME, \"abc*d\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(STRING_FIELD_NAME, \"aBc\"), fuzzyQuery.getTerm());\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(STRING_FIELD_NAME, \"abc\"), fuzzyQuery.getTerm());\n\n        \r\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(STRING_FIELD_NAME, new BytesRef(\"aBc\"), new BytesRef(\"BcD\"), true, true), query);\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(STRING_FIELD_NAME, new BytesRef(\"abc\"), new BytesRef(\"bcd\"), true, true), query);\n    }\n","date":"2018-04-26 03:22:53","endLine":1152,"groupId":"5192","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandedTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/fc66b3985e19e663446f001ab216edcf8db93e.src","preCode":"    public void testExpandedTerms() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        \r\n        Query query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"aBc\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME, \"aBc*D\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME, \"abc*d\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(STRING_FIELD_NAME, \"aBc\"), fuzzyQuery.getTerm());\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(STRING_FIELD_NAME, \"abc\"), fuzzyQuery.getTerm());\n\n        \r\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(STRING_FIELD_NAME, new BytesRef(\"aBc\"), new BytesRef(\"BcD\"), true, true), query);\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(STRING_FIELD_NAME, new BytesRef(\"abc\"), new BytesRef(\"bcd\"), true, true), query);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1101,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-07-27 17:51:09","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":2,"curCode":"    public void testExpandedTerms() throws Exception {\n        \r\n        Query query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"aBc\")), query);\n        query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery expected = new FuzzyQuery(new Term(STRING_FIELD_NAME, \"aBc\"), 1);\n        assertEquals(expected, query);\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        expected = new FuzzyQuery(new Term(STRING_FIELD_NAME, \"abc\"), 1);\n        assertEquals(expected, query);\n    }\n","date":"2018-07-27 17:51:09","endLine":448,"groupId":"5192","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpandedTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/d6e3ab361b755a02b8edda861c1b0ce76e7279.src","preCode":"    public void testExpandedTerms() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        \r\n        Query query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"aBc\")), query);\n        query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery expected = new FuzzyQuery(new Term(STRING_FIELD_NAME, \"aBc\"), 1);\n        assertEquals(expected, query);\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        expected = new FuzzyQuery(new Term(STRING_FIELD_NAME, \"abc\"), 1);\n        assertEquals(expected, query);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"},{"authorDate":"2018-07-27 17:51:09","commitOrder":2,"curCode":"    public void testExpandedTerms() throws Exception {\n        \r\n        Query query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"aBc\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME, \"aBc*D\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME, \"abc*d\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(STRING_FIELD_NAME, \"aBc\"), fuzzyQuery.getTerm());\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(STRING_FIELD_NAME, \"abc\"), fuzzyQuery.getTerm());\n\n        \r\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(STRING_FIELD_NAME, new BytesRef(\"aBc\"), new BytesRef(\"BcD\"), true, true), query);\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(STRING_FIELD_NAME, new BytesRef(\"abc\"), new BytesRef(\"bcd\"), true, true), query);\n    }\n","date":"2018-07-27 17:51:09","endLine":1123,"groupId":"5192","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandedTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/87/197b662d142956ef2108dfad7672add3fb9657.src","preCode":"    public void testExpandedTerms() throws Exception {\n        assumeTrue(\"test runs only when at least a type is registered\", getCurrentTypes().length > 0);\n        \r\n        Query query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"aBc\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME, \"aBc*D\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME, \"abc*d\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(STRING_FIELD_NAME, \"aBc\"), fuzzyQuery.getTerm());\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(STRING_FIELD_NAME, \"abc\"), fuzzyQuery.getTerm());\n\n        \r\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(STRING_FIELD_NAME, new BytesRef(\"aBc\"), new BytesRef(\"BcD\"), true, true), query);\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(STRING_FIELD_NAME, new BytesRef(\"abc\"), new BytesRef(\"bcd\"), true, true), query);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1073,"status":"M"}],"commitId":"dfb277cfb7969ad543a31dea234579d0e886a73a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-27 17:51:09","modifiedFileCount":"105","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2020-04-03 22:00:46","codes":[{"authorDate":"2020-04-03 22:00:46","commitOrder":3,"curCode":"    public void testExpandedTerms() throws Exception {\n        \r\n        Query query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME, \"aBc\")), query);\n        query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery expected = new FuzzyQuery(new Term(TEXT_FIELD_NAME, \"aBc\"), 1);\n        assertEquals(expected, query);\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        expected = new FuzzyQuery(new Term(TEXT_FIELD_NAME, \"abc\"), 1);\n        assertEquals(expected, query);\n    }\n","date":"2020-04-03 22:00:46","endLine":440,"groupId":"5192","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpandedTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c0/24a79cf526a32058b972c3f07aea4d4785190f.src","preCode":"    public void testExpandedTerms() throws Exception {\n        \r\n        Query query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"aBc\")), query);\n        query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery expected = new FuzzyQuery(new Term(STRING_FIELD_NAME, \"aBc\"), 1);\n        assertEquals(expected, query);\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        expected = new FuzzyQuery(new Term(STRING_FIELD_NAME, \"abc\"), 1);\n        assertEquals(expected, query);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"M"},{"authorDate":"2020-04-03 22:00:46","commitOrder":3,"curCode":"    public void testExpandedTerms() throws Exception {\n        \r\n        Query query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME, \"aBc\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(TEXT_FIELD_NAME, \"aBc*D\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(TEXT_FIELD_NAME, \"abc*d\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(TEXT_FIELD_NAME, \"aBc\"), fuzzyQuery.getTerm());\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(TEXT_FIELD_NAME, \"abc\"), fuzzyQuery.getTerm());\n\n        \r\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(TEXT_FIELD_NAME, new BytesRef(\"aBc\"), new BytesRef(\"BcD\"), true, true), query);\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(TEXT_FIELD_NAME, new BytesRef(\"abc\"), new BytesRef(\"bcd\"), true, true), query);\n    }\n","date":"2020-04-03 22:00:46","endLine":1134,"groupId":"5192","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandedTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a2/7bce5edab3d92a09f5d9650631122009f57a11.src","preCode":"    public void testExpandedTerms() throws Exception {\n        \r\n        Query query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"aBc\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(STRING_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME, \"aBc*D\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(STRING_FIELD_NAME, \"abc*d\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(STRING_FIELD_NAME, \"aBc\"), fuzzyQuery.getTerm());\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(STRING_FIELD_NAME, \"abc\"), fuzzyQuery.getTerm());\n\n        \r\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(STRING_FIELD_NAME, new BytesRef(\"aBc\"), new BytesRef(\"BcD\"), true, true), query);\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(STRING_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(STRING_FIELD_NAME, new BytesRef(\"abc\"), new BytesRef(\"bcd\"), true, true), query);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1084,"status":"M"}],"commitId":"f5759bb2092f1a957e79626c872c3f5707c1ee04","commitMessage":"@@@Rename field name constants in AbstractBuilderTestCase (#53234)\n\nSome field name constants were not updaten when we moved from \"string\" to \"text\"\nand \"keyword\" fields. Renaming them makes it easier and faster to know which\nfield type is used in test subclassing this base test case.","date":"2020-04-03 22:00:46","modifiedFileCount":"34","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    public void testExpandedTerms() throws Exception {\n        \r\n        Query query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createSearchExecutionContext());\n        assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME, \"aBc\")), query);\n        query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createSearchExecutionContext());\n        assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createSearchExecutionContext());\n        FuzzyQuery expected = new FuzzyQuery(new Term(TEXT_FIELD_NAME, \"aBc\"), 1);\n        assertEquals(expected, query);\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createSearchExecutionContext());\n        expected = new FuzzyQuery(new Term(TEXT_FIELD_NAME, \"abc\"), 1);\n        assertEquals(expected, query);\n    }\n","date":"2021-01-15 01:11:59","endLine":440,"groupId":"103307","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpandedTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f6/a18686011df0b5c9401cd81a33ca2570763708.src","preCode":"    public void testExpandedTerms() throws Exception {\n        \r\n        Query query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME, \"aBc\")), query);\n        query = new SimpleQueryStringBuilder(\"aBc*\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery expected = new FuzzyQuery(new Term(TEXT_FIELD_NAME, \"aBc\"), 1);\n        assertEquals(expected, query);\n        query = new SimpleQueryStringBuilder(\"aBc~1\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        expected = new FuzzyQuery(new Term(TEXT_FIELD_NAME, \"abc\"), 1);\n        assertEquals(expected, query);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    public void testExpandedTerms() throws Exception {\n        \r\n        Query query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createSearchExecutionContext());\n        assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME, \"aBc\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createSearchExecutionContext());\n        assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createSearchExecutionContext());\n        assertEquals(new WildcardQuery(new Term(TEXT_FIELD_NAME, \"aBc*D\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createSearchExecutionContext());\n        assertEquals(new WildcardQuery(new Term(TEXT_FIELD_NAME, \"abc*d\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createSearchExecutionContext());\n        FuzzyQuery fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(TEXT_FIELD_NAME, \"aBc\"), fuzzyQuery.getTerm());\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createSearchExecutionContext());\n        fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(TEXT_FIELD_NAME, \"abc\"), fuzzyQuery.getTerm());\n\n        \r\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createSearchExecutionContext());\n        assertEquals(new TermRangeQuery(TEXT_FIELD_NAME, new BytesRef(\"aBc\"), new BytesRef(\"BcD\"), true, true), query);\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createSearchExecutionContext());\n        assertEquals(new TermRangeQuery(TEXT_FIELD_NAME, new BytesRef(\"abc\"), new BytesRef(\"bcd\"), true, true), query);\n    }\n","date":"2021-01-15 01:11:59","endLine":1178,"groupId":"103307","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandedTerms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c3/f2b7c45a7bb331c91e314966d9eec736b3e669.src","preCode":"    public void testExpandedTerms() throws Exception {\n        \r\n        Query query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME, \"aBc\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new PrefixQuery(new Term(TEXT_FIELD_NAME, \"abc\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(TEXT_FIELD_NAME, \"aBc*D\")), query);\n        query = new QueryStringQueryBuilder(\"aBc*D\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new WildcardQuery(new Term(TEXT_FIELD_NAME, \"abc*d\")), query);\n\n        \r\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        FuzzyQuery fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(TEXT_FIELD_NAME, \"aBc\"), fuzzyQuery.getTerm());\n        query = new QueryStringQueryBuilder(\"aBc~1\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        fuzzyQuery = (FuzzyQuery) query;\n        assertEquals(new Term(TEXT_FIELD_NAME, \"abc\"), fuzzyQuery.getTerm());\n\n        \r\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"whitespace\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(TEXT_FIELD_NAME, new BytesRef(\"aBc\"), new BytesRef(\"BcD\"), true, true), query);\n        query = new QueryStringQueryBuilder(\"[aBc TO BcD]\")\n                .field(TEXT_FIELD_NAME)\n                .analyzer(\"standard\")\n                .toQuery(createShardContext());\n        assertEquals(new TermRangeQuery(TEXT_FIELD_NAME, new BytesRef(\"abc\"), new BytesRef(\"bcd\"), true, true), query);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1128,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"}]
