[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    protected void doAssertLuceneQuery(SimpleQueryStringBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (queryBuilder.value().isEmpty()) {\n            assertThat(query, instanceOf(MatchNoDocsQuery.class));\n        } else if (queryBuilder.fields().size() > 1) {\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            DisjunctionMaxQuery maxQuery = (DisjunctionMaxQuery) query;\n            for (Query disjunct : maxQuery.getDisjuncts()) {\n                assertThat(disjunct, either(instanceOf(TermQuery.class))\n                    .or(instanceOf(BoostQuery.class))\n                    .or(instanceOf(MatchNoDocsQuery.class)));\n                Query termQuery = disjunct;\n                if (disjunct instanceof BoostQuery) {\n                    termQuery = ((BoostQuery) disjunct).getQuery();\n                }\n                if (termQuery instanceof TermQuery) {\n                    TermQuery inner = (TermQuery) termQuery;\n                    assertThat(inner.getTerm().bytes().toString(), is(inner.getTerm().bytes().toString().toLowerCase(Locale.ROOT)));\n                } else {\n                    assertThat(termQuery, instanceOf(MatchNoDocsQuery.class));\n                }\n            }\n        } else if (queryBuilder.fields().size() == 1) {\n            Map.Entry<String, Float> field = queryBuilder.fields().entrySet().iterator().next();\n            if (query instanceof MatchNoDocsQuery == false) {\n                assertTermOrBoostQuery(query, field.getKey(), queryBuilder.value(), field.getValue());\n            }\n        } else if (queryBuilder.fields().size() == 0) {\n            assertThat(query, either(instanceOf(DisjunctionMaxQuery.class))\n                .or(instanceOf(MatchNoDocsQuery.class)).or(instanceOf(TermQuery.class)));\n            if (query instanceof DisjunctionMaxQuery) {\n                for (Query disjunct : (DisjunctionMaxQuery) query) {\n                    assertThat(disjunct, either(instanceOf(TermQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n                }\n            }\n        } else {\n            fail(\"Encountered lucene query type we do not have a validation implementation for in our \"\n                    + SimpleQueryStringBuilderTests.class.getSimpleName());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":305,"groupId":"45740","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(SimpleQueryStringBuilderqueryBuilder@Queryquery@SearchContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7f/f2b7ec12285f87fca47f39377f9738f00fba9c.src","preCode":"    protected void doAssertLuceneQuery(SimpleQueryStringBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (queryBuilder.value().isEmpty()) {\n            assertThat(query, instanceOf(MatchNoDocsQuery.class));\n        } else if (queryBuilder.fields().size() > 1) {\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            DisjunctionMaxQuery maxQuery = (DisjunctionMaxQuery) query;\n            for (Query disjunct : maxQuery.getDisjuncts()) {\n                assertThat(disjunct, either(instanceOf(TermQuery.class))\n                    .or(instanceOf(BoostQuery.class))\n                    .or(instanceOf(MatchNoDocsQuery.class)));\n                Query termQuery = disjunct;\n                if (disjunct instanceof BoostQuery) {\n                    termQuery = ((BoostQuery) disjunct).getQuery();\n                }\n                if (termQuery instanceof TermQuery) {\n                    TermQuery inner = (TermQuery) termQuery;\n                    assertThat(inner.getTerm().bytes().toString(), is(inner.getTerm().bytes().toString().toLowerCase(Locale.ROOT)));\n                } else {\n                    assertThat(termQuery, instanceOf(MatchNoDocsQuery.class));\n                }\n            }\n        } else if (queryBuilder.fields().size() == 1) {\n            Map.Entry<String, Float> field = queryBuilder.fields().entrySet().iterator().next();\n            if (query instanceof MatchNoDocsQuery == false) {\n                assertTermOrBoostQuery(query, field.getKey(), queryBuilder.value(), field.getValue());\n            }\n        } else if (queryBuilder.fields().size() == 0) {\n            assertThat(query, either(instanceOf(DisjunctionMaxQuery.class))\n                .or(instanceOf(MatchNoDocsQuery.class)).or(instanceOf(TermQuery.class)));\n            if (query instanceof DisjunctionMaxQuery) {\n                for (Query disjunct : (DisjunctionMaxQuery) query) {\n                    assertThat(disjunct, either(instanceOf(TermQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n                }\n            }\n        } else {\n            fail(\"Encountered lucene query type we do not have a validation implementation for in our \"\n                    + SimpleQueryStringBuilderTests.class.getSimpleName());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2018-04-26 03:22:53","endLine":108,"groupId":"430","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(MatchPhraseQueryBuilderqueryBuilder@Queryquery@SearchContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/c53992ebe8caa6c5ecfed729723054e1c40b0e.src","preCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhraseQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-09-24 01:37:15","codes":[{"authorDate":"2019-09-24 01:37:15","commitOrder":2,"curCode":"    protected void doAssertLuceneQuery(SimpleQueryStringBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (queryBuilder.value().isEmpty()) {\n            assertThat(query, instanceOf(MatchNoDocsQuery.class));\n        } else if (queryBuilder.fields().size() > 1) {\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            DisjunctionMaxQuery maxQuery = (DisjunctionMaxQuery) query;\n            for (Query disjunct : maxQuery.getDisjuncts()) {\n                assertThat(disjunct, either(instanceOf(TermQuery.class))\n                    .or(instanceOf(BoostQuery.class))\n                    .or(instanceOf(MatchNoDocsQuery.class)));\n                Query termQuery = disjunct;\n                if (disjunct instanceof BoostQuery) {\n                    termQuery = ((BoostQuery) disjunct).getQuery();\n                }\n                if (termQuery instanceof TermQuery) {\n                    TermQuery inner = (TermQuery) termQuery;\n                    assertThat(inner.getTerm().bytes().toString(), is(inner.getTerm().bytes().toString().toLowerCase(Locale.ROOT)));\n                } else {\n                    assertThat(termQuery, instanceOf(MatchNoDocsQuery.class));\n                }\n            }\n        } else if (queryBuilder.fields().size() == 1) {\n            Map.Entry<String, Float> field = queryBuilder.fields().entrySet().iterator().next();\n            if (query instanceof MatchNoDocsQuery == false) {\n                assertTermOrBoostQuery(query, field.getKey(), queryBuilder.value(), field.getValue());\n            }\n        } else if (queryBuilder.fields().size() == 0) {\n            assertThat(query, either(instanceOf(DisjunctionMaxQuery.class))\n                .or(instanceOf(MatchNoDocsQuery.class)).or(instanceOf(TermQuery.class)));\n            if (query instanceof DisjunctionMaxQuery) {\n                for (Query disjunct : (DisjunctionMaxQuery) query) {\n                    assertThat(disjunct, either(instanceOf(TermQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n                }\n            }\n        } else {\n            fail(\"Encountered lucene query type we do not have a validation implementation for in our \"\n                    + SimpleQueryStringBuilderTests.class.getSimpleName());\n        }\n    }\n","date":"2019-09-24 01:37:15","endLine":303,"groupId":"45740","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(SimpleQueryStringBuilderqueryBuilder@Queryquery@QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/31d149e98e9bb8dbe921b81d4b576447d768de.src","preCode":"    protected void doAssertLuceneQuery(SimpleQueryStringBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (queryBuilder.value().isEmpty()) {\n            assertThat(query, instanceOf(MatchNoDocsQuery.class));\n        } else if (queryBuilder.fields().size() > 1) {\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            DisjunctionMaxQuery maxQuery = (DisjunctionMaxQuery) query;\n            for (Query disjunct : maxQuery.getDisjuncts()) {\n                assertThat(disjunct, either(instanceOf(TermQuery.class))\n                    .or(instanceOf(BoostQuery.class))\n                    .or(instanceOf(MatchNoDocsQuery.class)));\n                Query termQuery = disjunct;\n                if (disjunct instanceof BoostQuery) {\n                    termQuery = ((BoostQuery) disjunct).getQuery();\n                }\n                if (termQuery instanceof TermQuery) {\n                    TermQuery inner = (TermQuery) termQuery;\n                    assertThat(inner.getTerm().bytes().toString(), is(inner.getTerm().bytes().toString().toLowerCase(Locale.ROOT)));\n                } else {\n                    assertThat(termQuery, instanceOf(MatchNoDocsQuery.class));\n                }\n            }\n        } else if (queryBuilder.fields().size() == 1) {\n            Map.Entry<String, Float> field = queryBuilder.fields().entrySet().iterator().next();\n            if (query instanceof MatchNoDocsQuery == false) {\n                assertTermOrBoostQuery(query, field.getKey(), queryBuilder.value(), field.getValue());\n            }\n        } else if (queryBuilder.fields().size() == 0) {\n            assertThat(query, either(instanceOf(DisjunctionMaxQuery.class))\n                .or(instanceOf(MatchNoDocsQuery.class)).or(instanceOf(TermQuery.class)));\n            if (query instanceof DisjunctionMaxQuery) {\n                for (Query disjunct : (DisjunctionMaxQuery) query) {\n                    assertThat(disjunct, either(instanceOf(TermQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n                }\n            }\n        } else {\n            fail(\"Encountered lucene query type we do not have a validation implementation for in our \"\n                    + SimpleQueryStringBuilderTests.class.getSimpleName());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"},{"authorDate":"2019-09-24 01:37:15","commitOrder":2,"curCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2019-09-24 01:37:15","endLine":104,"groupId":"430","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(MatchPhraseQueryBuilderqueryBuilder@Queryquery@QueryShardContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/8acf497bbcb10fcd8223a7c4e003be2e31f379.src","preCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query, SearchContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhraseQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"4414fccb2765dd24895216636e68aabea2d156ca","commitMessage":"@@@Replace SearchContext with QueryShardContext in query builder tests (#46978)\n\nThis commit replaces the SearchContext used in AbstractQueryTestCase with\na QueryShardContext in order to reduce the visibility of search contexts.\n\nRelates #46523","date":"2019-09-24 01:37:15","modifiedFileCount":"57","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":3,"curCode":"    protected void doAssertLuceneQuery(SimpleQueryStringBuilder queryBuilder, Query query, SearchExecutionContext context) {\n        assertThat(query, notNullValue());\n\n        if (queryBuilder.value().isEmpty()) {\n            assertThat(query, instanceOf(MatchNoDocsQuery.class));\n        } else if (queryBuilder.fields().size() > 1) {\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            DisjunctionMaxQuery maxQuery = (DisjunctionMaxQuery) query;\n            for (Query disjunct : maxQuery.getDisjuncts()) {\n                assertThat(disjunct, either(instanceOf(TermQuery.class))\n                    .or(instanceOf(BoostQuery.class))\n                    .or(instanceOf(MatchNoDocsQuery.class)));\n                Query termQuery = disjunct;\n                if (disjunct instanceof BoostQuery) {\n                    termQuery = ((BoostQuery) disjunct).getQuery();\n                }\n                if (termQuery instanceof TermQuery) {\n                    TermQuery inner = (TermQuery) termQuery;\n                    assertThat(inner.getTerm().bytes().toString(), is(inner.getTerm().bytes().toString().toLowerCase(Locale.ROOT)));\n                } else {\n                    assertThat(termQuery, instanceOf(MatchNoDocsQuery.class));\n                }\n            }\n        } else if (queryBuilder.fields().size() == 1) {\n            Map.Entry<String, Float> field = queryBuilder.fields().entrySet().iterator().next();\n            if (query instanceof MatchNoDocsQuery == false) {\n                assertTermOrBoostQuery(query, field.getKey(), queryBuilder.value(), field.getValue());\n            }\n        } else if (queryBuilder.fields().size() == 0) {\n            assertThat(query, either(instanceOf(DisjunctionMaxQuery.class))\n                .or(instanceOf(MatchNoDocsQuery.class)).or(instanceOf(TermQuery.class)));\n            if (query instanceof DisjunctionMaxQuery) {\n                for (Query disjunct : (DisjunctionMaxQuery) query) {\n                    assertThat(disjunct, either(instanceOf(TermQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n                }\n            }\n        } else {\n            fail(\"Encountered lucene query type we do not have a validation implementation for in our \"\n                    + SimpleQueryStringBuilderTests.class.getSimpleName());\n        }\n    }\n","date":"2021-01-15 01:11:59","endLine":303,"groupId":"45740","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(SimpleQueryStringBuilderqueryBuilder@Queryquery@SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f6/a18686011df0b5c9401cd81a33ca2570763708.src","preCode":"    protected void doAssertLuceneQuery(SimpleQueryStringBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (queryBuilder.value().isEmpty()) {\n            assertThat(query, instanceOf(MatchNoDocsQuery.class));\n        } else if (queryBuilder.fields().size() > 1) {\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            DisjunctionMaxQuery maxQuery = (DisjunctionMaxQuery) query;\n            for (Query disjunct : maxQuery.getDisjuncts()) {\n                assertThat(disjunct, either(instanceOf(TermQuery.class))\n                    .or(instanceOf(BoostQuery.class))\n                    .or(instanceOf(MatchNoDocsQuery.class)));\n                Query termQuery = disjunct;\n                if (disjunct instanceof BoostQuery) {\n                    termQuery = ((BoostQuery) disjunct).getQuery();\n                }\n                if (termQuery instanceof TermQuery) {\n                    TermQuery inner = (TermQuery) termQuery;\n                    assertThat(inner.getTerm().bytes().toString(), is(inner.getTerm().bytes().toString().toLowerCase(Locale.ROOT)));\n                } else {\n                    assertThat(termQuery, instanceOf(MatchNoDocsQuery.class));\n                }\n            }\n        } else if (queryBuilder.fields().size() == 1) {\n            Map.Entry<String, Float> field = queryBuilder.fields().entrySet().iterator().next();\n            if (query instanceof MatchNoDocsQuery == false) {\n                assertTermOrBoostQuery(query, field.getKey(), queryBuilder.value(), field.getValue());\n            }\n        } else if (queryBuilder.fields().size() == 0) {\n            assertThat(query, either(instanceOf(DisjunctionMaxQuery.class))\n                .or(instanceOf(MatchNoDocsQuery.class)).or(instanceOf(TermQuery.class)));\n            if (query instanceof DisjunctionMaxQuery) {\n                for (Query disjunct : (DisjunctionMaxQuery) query) {\n                    assertThat(disjunct, either(instanceOf(TermQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n                }\n            }\n        } else {\n            fail(\"Encountered lucene query type we do not have a validation implementation for in our \"\n                    + SimpleQueryStringBuilderTests.class.getSimpleName());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":3,"curCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query,\n                                       SearchExecutionContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2021-01-15 01:11:59","endLine":105,"groupId":"430","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(MatchPhraseQueryBuilderqueryBuilder@Queryquery@SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cd/d865747fb7280295a47d9bec201f383b50119f.src","preCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhraseQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-04-21 21:28:12","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    protected void doAssertLuceneQuery(SimpleQueryStringBuilder queryBuilder, Query query, SearchExecutionContext context) {\n        assertThat(query, notNullValue());\n\n        if (queryBuilder.value().isEmpty()) {\n            assertThat(query, instanceOf(MatchNoDocsQuery.class));\n        } else if (queryBuilder.fields().size() > 1) {\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            DisjunctionMaxQuery maxQuery = (DisjunctionMaxQuery) query;\n            for (Query disjunct : maxQuery.getDisjuncts()) {\n                assertThat(disjunct, either(instanceOf(TermQuery.class))\n                    .or(instanceOf(BoostQuery.class))\n                    .or(instanceOf(MatchNoDocsQuery.class)));\n                Query termQuery = disjunct;\n                if (disjunct instanceof BoostQuery) {\n                    termQuery = ((BoostQuery) disjunct).getQuery();\n                }\n                if (termQuery instanceof TermQuery) {\n                    TermQuery inner = (TermQuery) termQuery;\n                    assertThat(inner.getTerm().bytes().toString(), is(inner.getTerm().bytes().toString().toLowerCase(Locale.ROOT)));\n                } else {\n                    assertThat(termQuery, instanceOf(MatchNoDocsQuery.class));\n                }\n            }\n        } else if (queryBuilder.fields().size() == 1) {\n            Map.Entry<String, Float> field = queryBuilder.fields().entrySet().iterator().next();\n            if (query instanceof MatchNoDocsQuery == false) {\n                assertTermOrBoostQuery(query, field.getKey(), queryBuilder.value(), field.getValue());\n            }\n        } else if (queryBuilder.fields().size() == 0) {\n            assertThat(query, either(instanceOf(DisjunctionMaxQuery.class))\n                .or(instanceOf(MatchNoDocsQuery.class)).or(instanceOf(TermQuery.class)));\n            if (query instanceof DisjunctionMaxQuery) {\n                for (Query disjunct : (DisjunctionMaxQuery) query) {\n                    assertThat(disjunct, either(instanceOf(TermQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n                }\n            }\n        } else {\n            fail(\"Encountered lucene query type we do not have a validation implementation for in our \"\n                    + SimpleQueryStringBuilderTests.class.getSimpleName());\n        }\n    }\n","date":"2021-01-15 01:11:59","endLine":303,"groupId":"103341","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doAssertLuceneQuery","params":"(SimpleQueryStringBuilderqueryBuilder@Queryquery@SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f6/a18686011df0b5c9401cd81a33ca2570763708.src","preCode":"    protected void doAssertLuceneQuery(SimpleQueryStringBuilder queryBuilder, Query query, SearchExecutionContext context) {\n        assertThat(query, notNullValue());\n\n        if (queryBuilder.value().isEmpty()) {\n            assertThat(query, instanceOf(MatchNoDocsQuery.class));\n        } else if (queryBuilder.fields().size() > 1) {\n            assertThat(query, instanceOf(DisjunctionMaxQuery.class));\n            DisjunctionMaxQuery maxQuery = (DisjunctionMaxQuery) query;\n            for (Query disjunct : maxQuery.getDisjuncts()) {\n                assertThat(disjunct, either(instanceOf(TermQuery.class))\n                    .or(instanceOf(BoostQuery.class))\n                    .or(instanceOf(MatchNoDocsQuery.class)));\n                Query termQuery = disjunct;\n                if (disjunct instanceof BoostQuery) {\n                    termQuery = ((BoostQuery) disjunct).getQuery();\n                }\n                if (termQuery instanceof TermQuery) {\n                    TermQuery inner = (TermQuery) termQuery;\n                    assertThat(inner.getTerm().bytes().toString(), is(inner.getTerm().bytes().toString().toLowerCase(Locale.ROOT)));\n                } else {\n                    assertThat(termQuery, instanceOf(MatchNoDocsQuery.class));\n                }\n            }\n        } else if (queryBuilder.fields().size() == 1) {\n            Map.Entry<String, Float> field = queryBuilder.fields().entrySet().iterator().next();\n            if (query instanceof MatchNoDocsQuery == false) {\n                assertTermOrBoostQuery(query, field.getKey(), queryBuilder.value(), field.getValue());\n            }\n        } else if (queryBuilder.fields().size() == 0) {\n            assertThat(query, either(instanceOf(DisjunctionMaxQuery.class))\n                .or(instanceOf(MatchNoDocsQuery.class)).or(instanceOf(TermQuery.class)));\n            if (query instanceof DisjunctionMaxQuery) {\n                for (Query disjunct : (DisjunctionMaxQuery) query) {\n                    assertThat(disjunct, either(instanceOf(TermQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n                }\n            }\n        } else {\n            fail(\"Encountered lucene query type we do not have a validation implementation for in our \"\n                    + SimpleQueryStringBuilderTests.class.getSimpleName());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"N"},{"authorDate":"2021-04-21 21:28:12","commitOrder":4,"curCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query,\n                                       SearchExecutionContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQueryOption.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","date":"2021-04-21 21:28:12","endLine":93,"groupId":"103341","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"doAssertLuceneQuery","params":"(MatchPhraseQueryBuilderqueryBuilder@Queryquery@SearchExecutionContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3e/83472f8d9158378d50af02ed048f9705f440d1.src","preCode":"    protected void doAssertLuceneQuery(MatchPhraseQueryBuilder queryBuilder, Query query,\n                                       SearchExecutionContext context) throws IOException {\n        assertThat(query, notNullValue());\n\n        if (query instanceof MatchAllDocsQuery) {\n            assertThat(queryBuilder.zeroTermsQuery(), equalTo(ZeroTermsQuery.ALL));\n            return;\n        }\n\n        assertThat(query, either(instanceOf(BooleanQuery.class)).or(instanceOf(PhraseQuery.class))\n                .or(instanceOf(TermQuery.class)).or(instanceOf(PointRangeQuery.class))\n                .or(instanceOf(IndexOrDocValuesQuery.class)).or(instanceOf(MatchNoDocsQuery.class)));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/MatchPhraseQueryBuilderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"9a86dde3572a6f3999eea75bc3ce30b965837ba3","commitMessage":"@@@Merge branch 'master' into feature/vector-tiles\n","date":"2021-04-21 21:28:12","modifiedFileCount":"1285","status":"M","submitter":"iverase"}]
