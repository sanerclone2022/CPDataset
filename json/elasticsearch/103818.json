[{"authorTime":"2019-03-04 15:43:17","codes":[{"authorDate":"2019-03-04 15:43:17","commitOrder":2,"curCode":"    public void testCloseWhileOngoingRequest() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0)));\n        node.client().prepareIndex(\"test\", \"_doc\", \"1\").setSource(Collections.emptyMap()).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.reader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n    }\n","date":"2019-03-04 15:43:17","endLine":159,"groupId":"68929","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloseWhileOngoingRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/15/b45330530d38e5398bd1e65b3a31dc83386d8e.src","preCode":"    public void testCloseWhileOngoingRequest() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0)));\n        node.client().prepareIndex(\"test\", \"_doc\", \"1\").setSource(Collections.emptyMap()).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.reader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"MB"},{"authorDate":"2019-03-04 15:43:17","commitOrder":2,"curCode":"    public void testCloseWhileOngoingRequestUsesRequestCache() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1)\n                        .put(SETTING_NUMBER_OF_REPLICAS, 0)\n                        .put(IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.getKey(), true)));\n        node.client().prepareIndex(\"test\", \"_doc\", \"1\").setSource(Collections.singletonMap(\"foo\", 3L)).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndicesRequestCache cache = indicesService.indicesRequestCache;\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.reader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertEquals(0L, cache.count());\n        IndicesRequestCache.CacheEntity cacheEntity = new IndicesRequestCache.CacheEntity() {\n            @Override\n            public long ramBytesUsed() {\n                return 42;\n            }\n\n            @Override\n            public void onCached(Key key, BytesReference value) {}\n\n            @Override\n            public boolean isOpen() {\n                return true;\n            }\n\n            @Override\n            public Object getCacheIdentity() {\n                return this;\n            }\n\n            @Override\n            public void onHit() {}\n\n            @Override\n            public void onMiss() {}\n\n            @Override\n            public void onRemoval(RemovalNotification<Key, BytesReference> notification) {}\n        };\n        cache.getOrCompute(cacheEntity, () -> new BytesArray(\"bar\"), searcher.getDirectoryReader(), new BytesArray(\"foo\"), () -> \"foo\");\n        assertEquals(1L, cache.count());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n        assertEquals(0L, cache.count());\n    }\n","date":"2019-03-04 15:43:17","endLine":289,"groupId":"69521","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseWhileOngoingRequestUsesRequestCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/15/b45330530d38e5398bd1e65b3a31dc83386d8e.src","preCode":"    public void testCloseWhileOngoingRequestUsesRequestCache() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1)\n                        .put(SETTING_NUMBER_OF_REPLICAS, 0)\n                        .put(IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.getKey(), true)));\n        node.client().prepareIndex(\"test\", \"_doc\", \"1\").setSource(Collections.singletonMap(\"foo\", 3L)).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndicesRequestCache cache = indicesService.indicesRequestCache;\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.reader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertEquals(0L, cache.count());\n        IndicesRequestCache.CacheEntity cacheEntity = new IndicesRequestCache.CacheEntity() {\n            @Override\n            public long ramBytesUsed() {\n                return 42;\n            }\n\n            @Override\n            public void onCached(Key key, BytesReference value) {}\n\n            @Override\n            public boolean isOpen() {\n                return true;\n            }\n\n            @Override\n            public Object getCacheIdentity() {\n                return this;\n            }\n\n            @Override\n            public void onHit() {}\n\n            @Override\n            public void onMiss() {}\n\n            @Override\n            public void onRemoval(RemovalNotification<Key, BytesReference> notification) {}\n        };\n        cache.getOrCompute(cacheEntity, () -> new BytesArray(\"bar\"), searcher.getDirectoryReader(), new BytesArray(\"foo\"), () -> \"foo\");\n        assertEquals(1L, cache.count());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n        assertEquals(0L, cache.count());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"}],"commitId":"c24e4ae8e1246416e1477f2f6ffafabf20c71eca","commitMessage":"@@@Enhancements to IndicesQueryCache. (#39099)\n\nThis commit adds the following:\n - more tests to IndicesServiceCloseTests.  one of them found a bug in the order\n   in which `IndicesQueryCache#onClose` and\n   `IndicesService.indicesRefCount#decRef` are called.\n - made `IndicesQueryCache.stats2` a synchronized map. All writes to it are\n   already protected by the lock of the Lucene cache.  but the final read from\n   an assertion in `IndicesQueryCache#close()` was not so this change should\n   avoid any potential visibility issues.\n - human-readable `toString`s to make debugging easier.\n\nRelates #37117","date":"2019-03-04 15:43:17","modifiedFileCount":"3","status":"M","submitter":"Adrien Grand"},{"authorTime":"2019-07-05 04:48:48","codes":[{"authorDate":"2019-07-05 04:48:48","commitOrder":3,"curCode":"    public void testCloseWhileOngoingRequest() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0)));\n        node.client().prepareIndex(\"test\", \"_doc\", \"1\").setSource(Collections.emptyMap()).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n    }\n","date":"2019-07-05 04:48:48","endLine":167,"groupId":"68929","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloseWhileOngoingRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f5/97d2adc80425ac975705ac526380f72e2f47ce.src","preCode":"    public void testCloseWhileOngoingRequest() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0)));\n        node.client().prepareIndex(\"test\", \"_doc\", \"1\").setSource(Collections.emptyMap()).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.reader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2019-07-05 04:48:48","commitOrder":3,"curCode":"    public void testCloseWhileOngoingRequestUsesRequestCache() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1)\n                        .put(SETTING_NUMBER_OF_REPLICAS, 0)\n                        .put(IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.getKey(), true)));\n        node.client().prepareIndex(\"test\", \"_doc\", \"1\").setSource(Collections.singletonMap(\"foo\", 3L)).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndicesRequestCache cache = indicesService.indicesRequestCache;\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertEquals(0L, cache.count());\n        IndicesRequestCache.CacheEntity cacheEntity = new IndicesRequestCache.CacheEntity() {\n            @Override\n            public long ramBytesUsed() {\n                return 42;\n            }\n\n            @Override\n            public void onCached(Key key, BytesReference value) {}\n\n            @Override\n            public boolean isOpen() {\n                return true;\n            }\n\n            @Override\n            public Object getCacheIdentity() {\n                return this;\n            }\n\n            @Override\n            public void onHit() {}\n\n            @Override\n            public void onMiss() {}\n\n            @Override\n            public void onRemoval(RemovalNotification<Key, BytesReference> notification) {}\n        };\n        cache.getOrCompute(cacheEntity, () -> new BytesArray(\"bar\"), searcher.getDirectoryReader(), new BytesArray(\"foo\"), () -> \"foo\");\n        assertEquals(1L, cache.count());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n        assertEquals(0L, cache.count());\n    }\n","date":"2019-07-05 04:48:48","endLine":297,"groupId":"20960","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseWhileOngoingRequestUsesRequestCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f5/97d2adc80425ac975705ac526380f72e2f47ce.src","preCode":"    public void testCloseWhileOngoingRequestUsesRequestCache() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1)\n                        .put(SETTING_NUMBER_OF_REPLICAS, 0)\n                        .put(IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.getKey(), true)));\n        node.client().prepareIndex(\"test\", \"_doc\", \"1\").setSource(Collections.singletonMap(\"foo\", 3L)).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndicesRequestCache cache = indicesService.indicesRequestCache;\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.reader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertEquals(0L, cache.count());\n        IndicesRequestCache.CacheEntity cacheEntity = new IndicesRequestCache.CacheEntity() {\n            @Override\n            public long ramBytesUsed() {\n                return 42;\n            }\n\n            @Override\n            public void onCached(Key key, BytesReference value) {}\n\n            @Override\n            public boolean isOpen() {\n                return true;\n            }\n\n            @Override\n            public Object getCacheIdentity() {\n                return this;\n            }\n\n            @Override\n            public void onHit() {}\n\n            @Override\n            public void onMiss() {}\n\n            @Override\n            public void onRemoval(RemovalNotification<Key, BytesReference> notification) {}\n        };\n        cache.getOrCompute(cacheEntity, () -> new BytesArray(\"bar\"), searcher.getDirectoryReader(), new BytesArray(\"foo\"), () -> \"foo\");\n        assertEquals(1L, cache.count());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n        assertEquals(0L, cache.count());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"}],"commitId":"399d53e5c03ae4157d9ba107d01fbecfed758972","commitMessage":"@@@Refactor index engines to manage readers instead of searchers (#43860)\n\nThis commit changes the way we manage refreshes in the index engines.\nInstead of relying on a SearcherManager.  this change uses a ReaderManager that\ncreates ElasticsearchDirectoryReader when needed. Searchers are now created on-demand\n(when acquireSearcher is called) from the current ElasticsearchDirectoryReader.\nIt also slightly changes the Engine.Searcher to extend IndexSearcher in order\nto simplify the usage in the consumer.\n","date":"2019-07-05 04:48:48","modifiedFileCount":"33","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2019-10-25 18:09:52","codes":[{"authorDate":"2019-10-25 18:09:52","commitOrder":4,"curCode":"    public void testCloseWhileOngoingRequest() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0)));\n        node.client().prepareIndex(\"test\").setId(\"1\").setSource(Collections.emptyMap()).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n    }\n","date":"2019-10-25 18:09:52","endLine":167,"groupId":"68929","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloseWhileOngoingRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/96/bb4c13cb8aa8c9853ed0bd6bf7e17a8ef23523.src","preCode":"    public void testCloseWhileOngoingRequest() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0)));\n        node.client().prepareIndex(\"test\", \"_doc\", \"1\").setSource(Collections.emptyMap()).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2019-10-25 18:09:52","commitOrder":4,"curCode":"    public void testCloseWhileOngoingRequestUsesRequestCache() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1)\n                        .put(SETTING_NUMBER_OF_REPLICAS, 0)\n                        .put(IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.getKey(), true)));\n        node.client().prepareIndex(\"test\").setId(\"1\").setSource(Collections.singletonMap(\"foo\", 3L)).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndicesRequestCache cache = indicesService.indicesRequestCache;\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertEquals(0L, cache.count());\n        IndicesRequestCache.CacheEntity cacheEntity = new IndicesRequestCache.CacheEntity() {\n            @Override\n            public long ramBytesUsed() {\n                return 42;\n            }\n\n            @Override\n            public void onCached(Key key, BytesReference value) {}\n\n            @Override\n            public boolean isOpen() {\n                return true;\n            }\n\n            @Override\n            public Object getCacheIdentity() {\n                return this;\n            }\n\n            @Override\n            public void onHit() {}\n\n            @Override\n            public void onMiss() {}\n\n            @Override\n            public void onRemoval(RemovalNotification<Key, BytesReference> notification) {}\n        };\n        cache.getOrCompute(cacheEntity, () -> new BytesArray(\"bar\"), searcher.getDirectoryReader(), new BytesArray(\"foo\"), () -> \"foo\");\n        assertEquals(1L, cache.count());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n        assertEquals(0L, cache.count());\n    }\n","date":"2019-10-25 18:09:52","endLine":297,"groupId":"20960","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseWhileOngoingRequestUsesRequestCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/96/bb4c13cb8aa8c9853ed0bd6bf7e17a8ef23523.src","preCode":"    public void testCloseWhileOngoingRequestUsesRequestCache() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1)\n                        .put(SETTING_NUMBER_OF_REPLICAS, 0)\n                        .put(IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.getKey(), true)));\n        node.client().prepareIndex(\"test\", \"_doc\", \"1\").setSource(Collections.singletonMap(\"foo\", 3L)).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndicesRequestCache cache = indicesService.indicesRequestCache;\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertEquals(0L, cache.count());\n        IndicesRequestCache.CacheEntity cacheEntity = new IndicesRequestCache.CacheEntity() {\n            @Override\n            public long ramBytesUsed() {\n                return 42;\n            }\n\n            @Override\n            public void onCached(Key key, BytesReference value) {}\n\n            @Override\n            public boolean isOpen() {\n                return true;\n            }\n\n            @Override\n            public Object getCacheIdentity() {\n                return this;\n            }\n\n            @Override\n            public void onHit() {}\n\n            @Override\n            public void onMiss() {}\n\n            @Override\n            public void onRemoval(RemovalNotification<Key, BytesReference> notification) {}\n        };\n        cache.getOrCompute(cacheEntity, () -> new BytesArray(\"bar\"), searcher.getDirectoryReader(), new BytesArray(\"foo\"), () -> \"foo\");\n        assertEquals(1L, cache.count());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n        assertEquals(0L, cache.count());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"}],"commitId":"750c6d8bb1c751774f01fd12778f8bcc0a6f4d57","commitMessage":"@@@Remove Client.prepareIndex(index.  type.  id) method (#48443)\n\nAs types are no longer used in index requests.  we can remove the type parameter\nfrom `prepareIndex` methods in the `Client` interface. However.  just changing the signature\nof `prepareIndex(index.  type.  id)` to `prepareIndex(index.  id)` risks confusion when\nupgrading with the previous (now removed) `prepareIndex(index.  type)` method -\njust changing the dependency version of java code would end up silently changing the\nsemantics of the method call. Instead we should just remove this method entirely.  and\nreplace it by calling `prepareIndex(index).setId(id)`","date":"2019-10-25 18:09:52","modifiedFileCount":"267","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-09-18 22:53:37","codes":[{"authorDate":"2019-10-25 18:09:52","commitOrder":5,"curCode":"    public void testCloseWhileOngoingRequest() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0)));\n        node.client().prepareIndex(\"test\").setId(\"1\").setSource(Collections.emptyMap()).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n    }\n","date":"2019-10-25 18:09:52","endLine":167,"groupId":"68929","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloseWhileOngoingRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/96/bb4c13cb8aa8c9853ed0bd6bf7e17a8ef23523.src","preCode":"    public void testCloseWhileOngoingRequest() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0)));\n        node.client().prepareIndex(\"test\").setId(\"1\").setSource(Collections.emptyMap()).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"},{"authorDate":"2020-09-18 22:53:37","commitOrder":5,"curCode":"    public void testCloseWhileOngoingRequestUsesRequestCache() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1)\n                        .put(SETTING_NUMBER_OF_REPLICAS, 0)\n                        .put(IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.getKey(), true)));\n        node.client().prepareIndex(\"test\").setId(\"1\").setSource(Collections.singletonMap(\"foo\", 3L)).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndicesRequestCache cache = indicesService.indicesRequestCache;\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertEquals(0L, cache.count());\n        IndicesRequestCache.CacheEntity cacheEntity = new IndicesRequestCache.CacheEntity() {\n            @Override\n            public long ramBytesUsed() {\n                return 42;\n            }\n\n            @Override\n            public void onCached(Key key, BytesReference value) {}\n\n            @Override\n            public boolean isOpen() {\n                return true;\n            }\n\n            @Override\n            public Object getCacheIdentity() {\n                return this;\n            }\n\n            @Override\n            public void onHit() {}\n\n            @Override\n            public void onMiss() {}\n\n            @Override\n            public void onRemoval(RemovalNotification<Key, BytesReference> notification) {}\n        };\n        cache.getOrCompute(cacheEntity, () -> new BytesArray(\"bar\"), searcher.getDirectoryReader(), new BytesArray(\"foo\"));\n        assertEquals(1L, cache.count());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n        assertEquals(0L, cache.count());\n    }\n","date":"2020-09-18 22:53:37","endLine":296,"groupId":"20960","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseWhileOngoingRequestUsesRequestCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ad/8b3b0d549849a4acbd7095fb478e40d6cf496d.src","preCode":"    public void testCloseWhileOngoingRequestUsesRequestCache() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1)\n                        .put(SETTING_NUMBER_OF_REPLICAS, 0)\n                        .put(IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.getKey(), true)));\n        node.client().prepareIndex(\"test\").setId(\"1\").setSource(Collections.singletonMap(\"foo\", 3L)).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndicesRequestCache cache = indicesService.indicesRequestCache;\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertEquals(0L, cache.count());\n        IndicesRequestCache.CacheEntity cacheEntity = new IndicesRequestCache.CacheEntity() {\n            @Override\n            public long ramBytesUsed() {\n                return 42;\n            }\n\n            @Override\n            public void onCached(Key key, BytesReference value) {}\n\n            @Override\n            public boolean isOpen() {\n                return true;\n            }\n\n            @Override\n            public Object getCacheIdentity() {\n                return this;\n            }\n\n            @Override\n            public void onHit() {}\n\n            @Override\n            public void onMiss() {}\n\n            @Override\n            public void onRemoval(RemovalNotification<Key, BytesReference> notification) {}\n        };\n        cache.getOrCompute(cacheEntity, () -> new BytesArray(\"bar\"), searcher.getDirectoryReader(), new BytesArray(\"foo\"), () -> \"foo\");\n        assertEquals(1L, cache.count());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n        assertEquals(0L, cache.count());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"8935fffe5ee9128ebdc15dfa4d20ad0dd3021ba0","commitMessage":"@@@Remove cache key renderer argument from IndicesRequestCache (#62534)\n\nIn the context of of a recurring test failure tracked by #32827.  we added trace logging and an extra cache key renderer argument to IndicesRequestCache#getOrCompute (see #39475 and #34180).\n\nWe addressed the issue with #54071.  but the extra argument was left behind.  with a NORELEASE comment saying it should be removed.\n\nWith this commit.  we remove the extra cache key rendered argument and the corresponding log lines which are not so useful without it.\n\nCloses #55837","date":"2020-09-18 22:53:37","modifiedFileCount":"5","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-12-24 02:19:02","codes":[{"authorDate":"2019-10-25 18:09:52","commitOrder":6,"curCode":"    public void testCloseWhileOngoingRequest() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0)));\n        node.client().prepareIndex(\"test\").setId(\"1\").setSource(Collections.emptyMap()).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n    }\n","date":"2019-10-25 18:09:52","endLine":167,"groupId":"103818","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloseWhileOngoingRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/96/bb4c13cb8aa8c9853ed0bd6bf7e17a8ef23523.src","preCode":"    public void testCloseWhileOngoingRequest() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).put(SETTING_NUMBER_OF_REPLICAS, 0)));\n        node.client().prepareIndex(\"test\").setId(\"1\").setSource(Collections.emptyMap()).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"},{"authorDate":"2020-12-24 02:19:02","commitOrder":6,"curCode":"    public void testCloseWhileOngoingRequestUsesRequestCache() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1)\n                        .put(SETTING_NUMBER_OF_REPLICAS, 0)\n                        .put(IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.getKey(), true)));\n        node.client().prepareIndex(\"test\").setId(\"1\").setSource(Collections.singletonMap(\"foo\", 3L)).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndicesRequestCache cache = indicesService.indicesRequestCache;\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertEquals(0L, cache.count());\n        IndicesRequestCache.CacheEntity cacheEntity = new IndicesRequestCache.CacheEntity() {\n            @Override\n            public long ramBytesUsed() {\n                return 42;\n            }\n\n            @Override\n            public void onCached(Key key, BytesReference value) {}\n\n            @Override\n            public boolean isOpen() {\n                return true;\n            }\n\n            @Override\n            public Object getCacheIdentity() {\n                return this;\n            }\n\n            @Override\n            public void onHit() {}\n\n            @Override\n            public void onMiss() {}\n\n            @Override\n            public void onRemoval(RemovalNotification<Key, BytesReference> notification) {}\n        };\n        MappingLookup.CacheKey mappingCacheKey = indexService.mapperService().mappingLookup().cacheKey();\n        cache.getOrCompute(cacheEntity, () -> new BytesArray(\"bar\"), mappingCacheKey, searcher.getDirectoryReader(), new BytesArray(\"foo\"));\n        assertEquals(1L, cache.count());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n        assertEquals(0L, cache.count());\n    }\n","date":"2020-12-24 02:19:02","endLine":298,"groupId":"103818","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseWhileOngoingRequestUsesRequestCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/23/736d3c36c8493800973a4040c352ce83e63bd3.src","preCode":"    public void testCloseWhileOngoingRequestUsesRequestCache() throws Exception {\n        Node node = startNode();\n        IndicesService indicesService = node.injector().getInstance(IndicesService.class);\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertAcked(node.client().admin().indices().prepareCreate(\"test\")\n                .setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1)\n                        .put(SETTING_NUMBER_OF_REPLICAS, 0)\n                        .put(IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.getKey(), true)));\n        node.client().prepareIndex(\"test\").setId(\"1\").setSource(Collections.singletonMap(\"foo\", 3L)).get();\n        ElasticsearchAssertions.assertAllSuccessful(node.client().admin().indices().prepareRefresh(\"test\").get());\n\n        assertEquals(2, indicesService.indicesRefCount.refCount());\n\n        IndicesRequestCache cache = indicesService.indicesRequestCache;\n\n        IndexService indexService = indicesService.iterator().next();\n        IndexShard shard = indexService.getShard(0);\n        Engine.Searcher searcher = shard.acquireSearcher(\"test\");\n        assertEquals(1, searcher.getIndexReader().maxDoc());\n\n        node.close();\n        assertEquals(1, indicesService.indicesRefCount.refCount());\n\n        assertEquals(0L, cache.count());\n        IndicesRequestCache.CacheEntity cacheEntity = new IndicesRequestCache.CacheEntity() {\n            @Override\n            public long ramBytesUsed() {\n                return 42;\n            }\n\n            @Override\n            public void onCached(Key key, BytesReference value) {}\n\n            @Override\n            public boolean isOpen() {\n                return true;\n            }\n\n            @Override\n            public Object getCacheIdentity() {\n                return this;\n            }\n\n            @Override\n            public void onHit() {}\n\n            @Override\n            public void onMiss() {}\n\n            @Override\n            public void onRemoval(RemovalNotification<Key, BytesReference> notification) {}\n        };\n        cache.getOrCompute(cacheEntity, () -> new BytesArray(\"bar\"), searcher.getDirectoryReader(), new BytesArray(\"foo\"));\n        assertEquals(1L, cache.count());\n\n        searcher.close();\n        assertEquals(0, indicesService.indicesRefCount.refCount());\n        assertEquals(0L, cache.count());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/IndicesServiceCloseTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"}],"commitId":"3e3152406a4fda2cebeceac3d7fdae4071ce7ea6","commitMessage":"@@@Bust the request cache when the mapping changes (#66295)\n\nThis makes sure that we only serve a hit from the request cache if it\nwas build using the same mapping and that the same mapping is used for\nthe entire \"query phase\" of the search.\n\nCloses #62033","date":"2020-12-24 02:19:02","modifiedFileCount":"41","status":"M","submitter":"Nik Everett"}]
