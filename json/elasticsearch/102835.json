[{"authorTime":"2020-12-08 22:29:24","codes":[{"authorDate":"2020-12-08 22:29:24","commitOrder":1,"curCode":"    public void testDynamicRuntimeStringArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"test1\").value(\"test2\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().root.getRuntimeFieldType(\"foo\");\n        assertEquals(\"string\", foo.typeName());\n    }\n","date":"2020-12-08 22:29:24","endLine":797,"groupId":"69537","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDynamicRuntimeStringArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/2ca564c27e3d82cfae02ee0c6add24a6d170ba.src","preCode":"    public void testDynamicRuntimeStringArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"test1\").value(\"test2\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().root.getRuntimeFieldType(\"foo\");\n        assertEquals(\"string\", foo.typeName());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":791,"status":"B"},{"authorDate":"2020-12-08 22:29:24","commitOrder":1,"curCode":"    public void testDynamicRuntimeDateArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"2020-12-15\").value(\"2020-12-09\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().root.getRuntimeFieldType(\"foo\");\n        assertEquals(\"date\", foo.typeName());\n    }\n","date":"2020-12-08 22:29:24","endLine":813,"groupId":"67291","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDynamicRuntimeDateArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/2ca564c27e3d82cfae02ee0c6add24a6d170ba.src","preCode":"    public void testDynamicRuntimeDateArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"2020-12-15\").value(\"2020-12-09\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().root.getRuntimeFieldType(\"foo\");\n        assertEquals(\"date\", foo.typeName());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":807,"status":"B"}],"commitId":"e144471b3e607cc8b6b3c7a0e7f4706a4bdb9381","commitMessage":"@@@Introduce dynamic runtime setting (#65489)\n\nThe dynamic:runtime setting is similar to dynamic:true in that it dynamically defines fields based on values parsed from incoming documents. Though instead of defining leaf fields under properties.  it defines them as runtime fields under the runtime section. This is useful in scenarios where search speed can be traded for storage costs.  given that runtime fields are loaded at runtime rather than indexed.\n","date":"2020-12-08 22:29:24","modifiedFileCount":"31","status":"B","submitter":"Luca Cavanna"},{"authorTime":"2020-12-08 22:29:24","codes":[{"authorDate":"2020-12-10 18:33:12","commitOrder":2,"curCode":"    public void testDynamicRuntimeStringArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"test1\").value(\"test2\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().root.getRuntimeFieldType(\"foo\");\n        assertEquals(\"keyword\", foo.typeName());\n    }\n","date":"2020-12-10 18:33:12","endLine":797,"groupId":"69537","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDynamicRuntimeStringArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/73/1f342449aa4f2069395b2afddc4eb9575e8318.src","preCode":"    public void testDynamicRuntimeStringArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"test1\").value(\"test2\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().root.getRuntimeFieldType(\"foo\");\n        assertEquals(\"string\", foo.typeName());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":791,"status":"M"},{"authorDate":"2020-12-08 22:29:24","commitOrder":2,"curCode":"    public void testDynamicRuntimeDateArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"2020-12-15\").value(\"2020-12-09\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().root.getRuntimeFieldType(\"foo\");\n        assertEquals(\"date\", foo.typeName());\n    }\n","date":"2020-12-08 22:29:24","endLine":813,"groupId":"67291","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDynamicRuntimeDateArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/2ca564c27e3d82cfae02ee0c6add24a6d170ba.src","preCode":"    public void testDynamicRuntimeDateArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"2020-12-15\").value(\"2020-12-09\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().root.getRuntimeFieldType(\"foo\");\n        assertEquals(\"date\", foo.typeName());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":807,"status":"N"}],"commitId":"616098e4417c220e5c3fb44d8cf71c76a49d2361","commitMessage":"@@@Extend dynamic templates to make them define runtime fields (#66112)\n\nRuntime fields are defined as part of the runtime section in the mappings. Dynamic templates allow to specify mappings for fields that are getting automatically created. With this change.  we allow users to create dynamic under the runtime section.  and optionally define their mappings.\n\nThe following is an example of dynamic template that matches any incoming long field as runtime field.  meaning they will all be evaluated at runtime. When a script is not specified.  runtime fields are loaded from a field with the same name in _source.\n\n```\n{\n  \"mappings\": {\n    \"dynamic_templates\": [\n      {\n        \"long_as_runtime\": {\n          \"match_mapping_type\": \"long\". \n          \"runtime\": {\n\n          }\n        }\n      }\n    ]\n  }\n}\n```","date":"2020-12-10 18:33:12","modifiedFileCount":"10","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-03-02 22:26:50","codes":[{"authorDate":"2021-03-02 22:26:50","commitOrder":3,"curCode":"    public void testDynamicRuntimeStringArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"test1\").value(\"test2\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().getRoot().getRuntimeFieldType(\"foo\");\n        assertEquals(\"keyword\", foo.typeName());\n    }\n","date":"2021-03-02 22:26:50","endLine":824,"groupId":"69537","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDynamicRuntimeStringArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b2/9c7b31dfc8c00166510b35f9ad1aab14d36016.src","preCode":"    public void testDynamicRuntimeStringArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"test1\").value(\"test2\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().root.getRuntimeFieldType(\"foo\");\n        assertEquals(\"keyword\", foo.typeName());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":818,"status":"M"},{"authorDate":"2021-03-02 22:26:50","commitOrder":3,"curCode":"    public void testDynamicRuntimeDateArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"2020-12-15\").value(\"2020-12-09\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().getRoot().getRuntimeFieldType(\"foo\");\n        assertEquals(\"date\", foo.typeName());\n    }\n","date":"2021-03-02 22:26:50","endLine":840,"groupId":"67291","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDynamicRuntimeDateArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b2/9c7b31dfc8c00166510b35f9ad1aab14d36016.src","preCode":"    public void testDynamicRuntimeDateArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"2020-12-15\").value(\"2020-12-09\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().root.getRuntimeFieldType(\"foo\");\n        assertEquals(\"date\", foo.typeName());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":834,"status":"M"}],"commitId":"8ac243666af4854ea67f416522babc69401379ad","commitMessage":"@@@Remove redundant methods from DocumentMapper (#69803)\n\nDocumentMapper exposes root() and meta() methods.  which can be accessed through the mapping() method which exposes the entire Mapping instance.\n\nThis commit removes such redundant methods in favour of accessing mapping and retrieving root and meta from them. Additionally.  access to Mapping's members is made consistent through getters rather than package private fields in some cases and getters is some other case.","date":"2021-03-02 22:26:50","modifiedFileCount":"15","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-03-23 19:24:33","codes":[{"authorDate":"2021-03-23 19:24:33","commitOrder":4,"curCode":"    public void testDynamicRuntimeStringArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"test1\").value(\"test2\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeField foo = doc.dynamicMappingsUpdate().getRoot().getRuntimeField(\"foo\");\n        assertEquals(\"keyword\", foo.typeName());\n    }\n","date":"2021-03-23 19:24:33","endLine":824,"groupId":"69537","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDynamicRuntimeStringArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fb/d9448aa2d5f2efd49df4c8306dcc5932a67a5a.src","preCode":"    public void testDynamicRuntimeStringArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"test1\").value(\"test2\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().getRoot().getRuntimeFieldType(\"foo\");\n        assertEquals(\"keyword\", foo.typeName());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":818,"status":"M"},{"authorDate":"2021-03-23 19:24:33","commitOrder":4,"curCode":"    public void testDynamicRuntimeDateArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"2020-12-15\").value(\"2020-12-09\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeField foo = doc.dynamicMappingsUpdate().getRoot().getRuntimeField(\"foo\");\n        assertEquals(\"date\", foo.typeName());\n    }\n","date":"2021-03-23 19:24:33","endLine":840,"groupId":"67291","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDynamicRuntimeDateArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fb/d9448aa2d5f2efd49df4c8306dcc5932a67a5a.src","preCode":"    public void testDynamicRuntimeDateArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"2020-12-15\").value(\"2020-12-09\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeFieldType foo = doc.dynamicMappingsUpdate().getRoot().getRuntimeFieldType(\"foo\");\n        assertEquals(\"date\", foo.typeName());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":834,"status":"M"}],"commitId":"3e81651a8cdbc2813466c0b2ec57f716e7356405","commitMessage":"@@@Rename RuntimeFieldType to RuntimeField (#70719)\n\nRuntimeFieldType was recently made an interface.  hence it no longer extends MappedFieldType. It makes sense then to rename it to RuntimeField.\n","date":"2021-03-23 19:24:33","modifiedFileCount":"34","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-07-07 17:18:27","codes":[{"authorDate":"2021-07-07 17:18:27","commitOrder":5,"curCode":"    public void testDynamicRuntimeStringArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"test1\").value(\"test2\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeField foo = doc.dynamicMappingsUpdate().getRoot().getRuntimeField(\"foo\");\n        assertEquals(\"{\\\"foo\\\":{\\\"type\\\":\\\"keyword\\\"}}\", Strings.toString(foo));\n    }\n","date":"2021-07-07 17:18:27","endLine":824,"groupId":"102835","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDynamicRuntimeStringArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9c/d5770c9330f48f745b439dff8d9b9feff9ac46.src","preCode":"    public void testDynamicRuntimeStringArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"test1\").value(\"test2\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeField foo = doc.dynamicMappingsUpdate().getRoot().getRuntimeField(\"foo\");\n        assertEquals(\"keyword\", foo.typeName());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":818,"status":"M"},{"authorDate":"2021-07-07 17:18:27","commitOrder":5,"curCode":"    public void testDynamicRuntimeDateArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"2020-12-15\").value(\"2020-12-09\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeField foo = doc.dynamicMappingsUpdate().getRoot().getRuntimeField(\"foo\");\n        assertEquals(\"{\\\"foo\\\":{\\\"type\\\":\\\"date\\\"}}\", Strings.toString(foo));\n    }\n","date":"2021-07-07 17:18:27","endLine":840,"groupId":"102835","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDynamicRuntimeDateArray","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9c/d5770c9330f48f745b439dff8d9b9feff9ac46.src","preCode":"    public void testDynamicRuntimeDateArray() throws Exception {\n        DocumentMapper mapper = createDocumentMapper(topMapping(b -> b.field(\"dynamic\", \"runtime\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.startArray(\"foo\").value(\"2020-12-15\").value(\"2020-12-09\").endArray()));\n        assertEquals(0, doc.rootDoc().getFields(\"foo\").length);\n        RuntimeField foo = doc.dynamicMappingsUpdate().getRoot().getRuntimeField(\"foo\");\n        assertEquals(\"date\", foo.typeName());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":834,"status":"M"}],"commitId":"353f189d1cce9ce088dae14eea5227c7afbea706","commitMessage":"@@@Simplify RuntimeField creation (#75009)\n\n* Simplify RuntimeField creation\n\nNow that AbstractScriptFieldType and LeafRuntimeField are separate.  we can further simplify the creation of runtime fields. Their builder always creates a new instance of the same class (LeafRuntimeField).  which can be shared throughout all the builders. The only bit that changes is the MappedFieldType instance.  which becomes the only required abstract method in the base builder.\n\nAlso.  the dynamically created runtime field variant that parses its values from source can be created through a builder which makes sure that we reuse as much code as possible.\n\n* checkstyle\n\n* restore MappedFieldType","date":"2021-07-07 17:18:27","modifiedFileCount":"13","status":"M","submitter":"Luca Cavanna"}]
