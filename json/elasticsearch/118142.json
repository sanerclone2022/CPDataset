[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes) throws IOException {\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.streamInput(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            final XContentType contentType = XContentFactory.xContentType(compressedInput);\n            return XContentFactory.xContent(contentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            return XContentFactory.xContent(xContentType(bytes)).createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":61,"groupId":"39590","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createParser","params":"(NamedXContentRegistryxContentRegistry@DeprecationHandlerdeprecationHandler@BytesReferencebytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9c/01c094b7a0d981d468363c0482f73d1733f8f2.src","preCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes) throws IOException {\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.streamInput(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            final XContentType contentType = XContentFactory.xContentType(compressedInput);\n            return XContentFactory.xContent(contentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            return XContentFactory.xContent(xContentType(bytes)).createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes, XContentType xContentType) throws IOException {\n        Objects.requireNonNull(xContentType);\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.streamInput(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            return XContentFactory.xContent(xContentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            return xContentType.xContent().createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":79,"groupId":"18841","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createParser","params":"(NamedXContentRegistryxContentRegistry@DeprecationHandlerdeprecationHandler@BytesReferencebytes@XContentTypexContentType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9c/01c094b7a0d981d468363c0482f73d1733f8f2.src","preCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes, XContentType xContentType) throws IOException {\n        Objects.requireNonNull(xContentType);\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.streamInput(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            return XContentFactory.xContent(xContentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            return xContentType.xContent().createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2020-08-25 01:10:47","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":2,"curCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes) throws IOException {\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.threadLocalStreamInput(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            final XContentType contentType = XContentFactory.xContentType(compressedInput);\n            return XContentFactory.xContent(contentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            return XContentFactory.xContent(xContentType(bytes)).createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","date":"2020-08-25 01:10:47","endLine":63,"groupId":"39590","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createParser","params":"(NamedXContentRegistryxContentRegistry@DeprecationHandlerdeprecationHandler@BytesReferencebytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5f/43e0fdea8204be123f99bd5fab0c55c0bc00ea.src","preCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes) throws IOException {\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.streamInput(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            final XContentType contentType = XContentFactory.xContentType(compressedInput);\n            return XContentFactory.xContent(contentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            return XContentFactory.xContent(xContentType(bytes)).createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2020-08-25 01:10:47","commitOrder":2,"curCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes, XContentType xContentType) throws IOException {\n        Objects.requireNonNull(xContentType);\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.threadLocalStreamInput(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            return XContentFactory.xContent(xContentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            if (bytes instanceof BytesArray) {\n                final BytesArray array = (BytesArray) bytes;\n                return xContentType.xContent().createParser(\n                        xContentRegistry, deprecationHandler, array.array(), array.offset(), array.length());\n            }\n            return xContentType.xContent().createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","date":"2020-08-25 01:10:47","endLine":86,"groupId":"18841","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createParser","params":"(NamedXContentRegistryxContentRegistry@DeprecationHandlerdeprecationHandler@BytesReferencebytes@XContentTypexContentType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5f/43e0fdea8204be123f99bd5fab0c55c0bc00ea.src","preCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes, XContentType xContentType) throws IOException {\n        Objects.requireNonNull(xContentType);\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.streamInput(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            return XContentFactory.xContent(xContentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            return xContentType.xContent().createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"e2dd0bde26e6c1f9f1a5137a5bf432d348e4205e","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-25 01:10:47","modifiedFileCount":"48","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-09-09 04:13:53","codes":[{"authorDate":"2020-09-09 04:13:53","commitOrder":3,"curCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes) throws IOException {\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.threadLocalInputStream(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            final XContentType contentType = XContentFactory.xContentType(compressedInput);\n            return XContentFactory.xContent(contentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            return XContentFactory.xContent(xContentType(bytes)).createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","date":"2020-09-09 04:13:53","endLine":63,"groupId":"39590","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createParser","params":"(NamedXContentRegistryxContentRegistry@DeprecationHandlerdeprecationHandler@BytesReferencebytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/828e06f10094f879ff72f3f8621f7bec23cc10.src","preCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes) throws IOException {\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.threadLocalStreamInput(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            final XContentType contentType = XContentFactory.xContentType(compressedInput);\n            return XContentFactory.xContent(contentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            return XContentFactory.xContent(xContentType(bytes)).createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2020-09-09 04:13:53","commitOrder":3,"curCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes, XContentType xContentType) throws IOException {\n        Objects.requireNonNull(xContentType);\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.threadLocalInputStream(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            return XContentFactory.xContent(xContentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            if (bytes instanceof BytesArray) {\n                final BytesArray array = (BytesArray) bytes;\n                return xContentType.xContent().createParser(\n                        xContentRegistry, deprecationHandler, array.array(), array.offset(), array.length());\n            }\n            return xContentType.xContent().createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","date":"2020-09-09 04:13:53","endLine":86,"groupId":"18841","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createParser","params":"(NamedXContentRegistryxContentRegistry@DeprecationHandlerdeprecationHandler@BytesReferencebytes@XContentTypexContentType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/828e06f10094f879ff72f3f8621f7bec23cc10.src","preCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes, XContentType xContentType) throws IOException {\n        Objects.requireNonNull(xContentType);\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.threadLocalStreamInput(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            return XContentFactory.xContent(xContentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            if (bytes instanceof BytesArray) {\n                final BytesArray array = (BytesArray) bytes;\n                return xContentType.xContent().createParser(\n                        xContentRegistry, deprecationHandler, array.array(), array.offset(), array.length());\n            }\n            return xContentType.xContent().createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"0684ebc42528c60747e551d1822e337a42c52ccd","commitMessage":"@@@Remove Redundant Stream Wrapping from Compression (#62017)\n\nIn many cases we don't need a `StreamInput` or `StreamOutput`\nwrapper around these streams so I this commit adjusts the API\nto just normal streams and adds the wrapping where necessary.","date":"2020-09-09 04:13:53","modifiedFileCount":"15","status":"M","submitter":"Armin Braun"},{"authorTime":"2021-03-06 21:10:41","codes":[{"authorDate":"2020-09-09 04:13:53","commitOrder":4,"curCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes) throws IOException {\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.threadLocalInputStream(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            final XContentType contentType = XContentFactory.xContentType(compressedInput);\n            return XContentFactory.xContent(contentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            return XContentFactory.xContent(xContentType(bytes)).createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","date":"2020-09-09 04:13:53","endLine":63,"groupId":"118142","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createParser","params":"(NamedXContentRegistryxContentRegistry@DeprecationHandlerdeprecationHandler@BytesReferencebytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/828e06f10094f879ff72f3f8621f7bec23cc10.src","preCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes) throws IOException {\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.threadLocalInputStream(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            final XContentType contentType = XContentFactory.xContentType(compressedInput);\n            return XContentFactory.xContent(contentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            return XContentFactory.xContent(xContentType(bytes)).createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2021-03-06 21:10:41","commitOrder":4,"curCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes, XContentType xContentType) throws IOException {\n        Objects.requireNonNull(xContentType);\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.threadLocalInputStream(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            return XContentFactory.xContent(xContentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            if (bytes.hasArray()) {\n                return xContentType.xContent().createParser(\n                        xContentRegistry, deprecationHandler, bytes.array(), bytes.arrayOffset(), bytes.length());\n            }\n            return xContentType.xContent().createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","date":"2021-03-06 21:10:41","endLine":76,"groupId":"118142","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createParser","params":"(NamedXContentRegistryxContentRegistry@DeprecationHandlerdeprecationHandler@BytesReferencebytes@XContentTypexContentType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a9/4ac3aff8d6e376da365e978bff825de928d2ca.src","preCode":"    public static XContentParser createParser(NamedXContentRegistry xContentRegistry, DeprecationHandler deprecationHandler,\n                                              BytesReference bytes, XContentType xContentType) throws IOException {\n        Objects.requireNonNull(xContentType);\n        Compressor compressor = CompressorFactory.compressor(bytes);\n        if (compressor != null) {\n            InputStream compressedInput = compressor.threadLocalInputStream(bytes.streamInput());\n            if (compressedInput.markSupported() == false) {\n                compressedInput = new BufferedInputStream(compressedInput);\n            }\n            return XContentFactory.xContent(xContentType).createParser(xContentRegistry, deprecationHandler, compressedInput);\n        } else {\n            if (bytes instanceof BytesArray) {\n                final BytesArray array = (BytesArray) bytes;\n                return xContentType.xContent().createParser(\n                        xContentRegistry, deprecationHandler, array.array(), array.offset(), array.length());\n            }\n            return xContentType.xContent().createParser(xContentRegistry, deprecationHandler, bytes.streamInput());\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/xcontent/XContentHelper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"b1446fd8d2e5d419d39a96e02a873505777f35f8","commitMessage":"@@@Expose Backing Byte Array for ReleasableBytesReference (#69660)\n\nUnwrapping the `byte[]` in a `BytesArray` can be generalized\nso that releasable bytes references can make use of the optimizations\nthat use the bytes directly as well.\n\nRelates #67502 but already saves a few cycles here and there around\n`BytesRequest` (publish and recovery actions)","date":"2021-03-06 21:10:41","modifiedFileCount":"7","status":"M","submitter":"Armin Braun"}]
