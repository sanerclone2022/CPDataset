[{"authorTime":"2018-05-16 13:41:23","codes":[{"authorDate":"2018-05-30 03:29:53","commitOrder":3,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2018-05-30 03:29:53","endLine":292,"groupId":"65384","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/22409b92da0cc9bc2d0fd1e605a3a399813530.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"MB"},{"authorDate":"2018-05-16 13:41:23","commitOrder":3,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport =\n                 new NioHttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                assertThat(\n                    new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                    containsString(\"you sent a bad request and you should feel bad\"));\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2018-05-16 13:41:23","endLine":269,"groupId":"65384","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/41bd69a527ab681c4eeff0fa5ce9c23c99da07.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport =\n                 new NioHttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                assertThat(\n                    new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                    containsString(\"you sent a bad request and you should feel bad\"));\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"NB"}],"commitId":"bdf70e4f2fdbfe73c7fd7eb7a8b8aaf87e3eb80b","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-30 03:29:53","modifiedFileCount":"70","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-06-19 01:06:47","codes":[{"authorDate":"2018-05-30 03:29:53","commitOrder":4,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2018-05-30 03:29:53","endLine":292,"groupId":"65384","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/22409b92da0cc9bc2d0fd1e605a3a399813530.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"N"},{"authorDate":"2018-06-19 01:06:47","commitOrder":4,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                assertThat(\n                    new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                    containsString(\"you sent a bad request and you should feel bad\"));\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2018-06-19 01:06:47","endLine":283,"groupId":"9922","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a0/cb74f7cd205fa4c23202f31ac47b3988336673.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport =\n                 new NioHttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                assertThat(\n                    new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                    containsString(\"you sent a bad request and you should feel bad\"));\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"5d52f297cc570a2432b038832133f9ffb56d3bab","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-19 01:06:47","modifiedFileCount":"129","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-08-02 01:15:18","codes":[{"authorDate":"2018-08-02 01:15:18","commitOrder":5,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2018-08-02 01:15:18","endLine":305,"groupId":"65384","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/3c71d710d17245625650a938883e0a675200d9.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"},{"authorDate":"2018-08-02 01:15:18","commitOrder":5,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2018-08-02 01:15:18","endLine":296,"groupId":"9922","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c7/e92358531f90dbaaf88ea3627ebc7d8612f807.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                assertThat(\n                    new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                    containsString(\"you sent a bad request and you should feel bad\"));\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"ea1e26ca2716210395390170c982ba05d8425a37","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-02 01:15:18","modifiedFileCount":"69","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-08-08 22:21:01","codes":[{"authorDate":"2018-08-02 01:15:18","commitOrder":6,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2018-08-02 01:15:18","endLine":305,"groupId":"65384","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/3c71d710d17245625650a938883e0a675200d9.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"N"},{"authorDate":"2018-08-08 22:21:01","commitOrder":6,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2018-08-08 22:21:01","endLine":296,"groupId":"9922","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/cec830f11b92b6669130e38cd4f38466005c4c.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"2d925c9a9a3b05faa988335aa230b3071fca7718","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-08 22:21:01","modifiedFileCount":"96","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-01-22 04:50:56","codes":[{"authorDate":"2018-08-02 01:15:18","commitOrder":7,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2018-08-02 01:15:18","endLine":305,"groupId":"65384","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/3c71d710d17245625650a938883e0a675200d9.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"N"},{"authorDate":"2019-01-22 04:50:56","commitOrder":7,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2019-01-22 04:50:56","endLine":310,"groupId":"42060","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/fd5a64147cc35fcbebb57dc574437939fa304e.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"}],"commitId":"f516d68fb28ef56271f2784715a68908570d9b87","commitMessage":"@@@Share `NioGroup` between http and transport impls (#37396)\n\nCurrently we create dedicated network threads for both the http and\ntransport implementations. Since these these threads should never\nperform blocking operations.  these threads could be shared. This commit\nmodifies the nio-transport to have 0 http workers be default. If the\ndefault configs are used.  this will cause the http transport to be run\non the transport worker threads. The http worker setting will still exist\nin case the user would like to configure dedicated workers. Additionally. \nthis commmit deletes dedicated acceptor threads. We have never had these\nfor the netty transport and they can be added back if a need is\ndetermined in the future.","date":"2019-01-22 04:50:56","modifiedFileCount":"19","status":"M","submitter":"Tim Brooks"},{"authorTime":"2019-07-17 09:27:29","codes":[{"authorDate":"2018-08-02 01:15:18","commitOrder":8,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2018-08-02 01:15:18","endLine":305,"groupId":"65384","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1c/3c71d710d17245625650a938883e0a675200d9.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"N"},{"authorDate":"2019-07-17 09:27:29","commitOrder":8,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2019-07-17 09:27:29","endLine":320,"groupId":"42060","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0c/16cd01aaa90ca4c49f46bb77aa547c3a2df18f.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"c9607061ae2adf27d951c75c69d40ccb769f5362","commitMessage":"@@@Add Cors integration tests (#44361)\n\nThis commit adds integration tests to ensure that the basic cors\nfunctionality works for the netty and nio transports.","date":"2019-07-17 09:27:29","modifiedFileCount":"4","status":"M","submitter":"Tim Brooks"},{"authorTime":"2019-08-02 02:19:25","codes":[{"authorDate":"2019-08-02 02:19:25","commitOrder":9,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2019-08-02 02:19:25","endLine":261,"groupId":"65384","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/71/7e14ebc89c3233f8247fe9c59abffccd440d27.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2019-08-02 02:19:25","commitOrder":9,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2019-08-02 02:19:25","endLine":316,"groupId":"42060","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3a/747bf12e3523a7710fc5e959f4cc7314c07f82.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestRequest request,\n                                           final RestChannel channel,\n                                           final ThreadContext threadContext,\n                                           final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"570e406e91742cf385c37688a4996825e5ab5083","commitMessage":"@@@Stop Passing Around REST Request in Multiple Spots (#44949)\n\n* Stop Passing Around REST Request in Multiple Spots\n\n* Motivated by #44564\n  * We are currently passing the REST request object around to a large number of places. This works fine since we simply copy the full request content before we handle the rest itself which is needlessly hard on GC and heap.\n  * This PR removes a number of spots where the request is passed around needlessly. There are many more spots to optimize in follow-ups to this.  but this one would already enable bypassing the request copying for some error paths in a follow up.\n","date":"2019-08-02 02:19:25","modifiedFileCount":"10","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-02-07 03:05:03","codes":[{"authorDate":"2020-02-07 03:05:03","commitOrder":10,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(\n            settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher, clusterSettings)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2020-02-07 03:05:03","endLine":274,"groupId":"65384","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c5/ff905b1446507936f0558c1f5e4333910b2149.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport =\n                     new Netty4HttpServerTransport(settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"},{"authorDate":"2020-02-07 03:05:03","commitOrder":10,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2020-02-07 03:05:03","endLine":329,"groupId":"42060","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ea/3d44f60d180cdcb2f81128de09ca8ab56520b2.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"}],"commitId":"26b9cf787dfcfb2340fd2dbc98e4c42faf868e40","commitMessage":"@@@Add Trace Logging of REST Requests (#51684)\n\nBeing able to trace log all REST requests to a node would make debugging\na number of issues a lot easier.\n","date":"2020-02-07 03:05:03","modifiedFileCount":"27","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-02-07 03:05:03","codes":[{"authorDate":"2020-05-12 04:49:40","commitOrder":11,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(\n            settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher, clusterSettings,\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2020-05-12 04:49:40","endLine":276,"groupId":"65384","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/71/ed191322b72c16a983440c2f76cd164b372022.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(\n            settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher, clusterSettings)) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2020-02-07 03:05:03","commitOrder":11,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2020-02-07 03:05:03","endLine":329,"groupId":"42060","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ea/3d44f60d180cdcb2f81128de09ca8ab56520b2.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"N"}],"commitId":"0bf4be7dd7f1f2393d65ddd01f2f052ed6f270d5","commitMessage":"@@@Share netty event loops between transports (#46346)\n\nCurrently Elasticsearch creates independent event loop groups for each\ntransport (http and internal) transport type. This is unnecessary and\ncan lead to contention when different threads access shared resources\n(ex: allocators). This commit moves to a model where.  by default.  the\nevent loops are shared between the transports. The previous behavior can\nbe attained by specifically setting the http worker count.","date":"2020-05-12 04:49:40","modifiedFileCount":"15","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":12,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(\n            settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher, clusterSettings,\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2020-06-26 22:33:37","endLine":281,"groupId":"65384","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6f/b2ad01f1519e39e9200ab3a50b2fa76ca53e54.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(\n            settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher, clusterSettings,\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"},{"authorDate":"2020-06-26 22:33:37","commitOrder":12,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2020-06-26 22:33:37","endLine":337,"groupId":"42060","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8f/8d0179b3581c16a99d952f4e467267cddbf380.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-07-06 16:42:47","codes":[{"authorDate":"2020-07-06 16:42:47","commitOrder":13,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = createSettings();\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = createBuilderWithPort().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(\n            settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher, clusterSettings,\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2020-07-06 16:42:47","endLine":283,"groupId":"15407","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8a/4b5b9337b893264951f5ba3e1603d19d78ba8a.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(\n            settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher, clusterSettings,\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2020-07-06 16:42:47","commitOrder":13,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = createSettings();\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = createBuilderWithPort().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2020-07-06 16:42:47","endLine":340,"groupId":"62181","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/b0cd7f0ed423884d36927b5750c9782380f294.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = Settings.EMPTY;\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = Settings.builder().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"}],"commitId":"2ba8e2e98bf4b7c54929c0a19046deba61951817","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-06 16:42:47","modifiedFileCount":"330","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-07-06 16:42:47","codes":[{"authorDate":"2020-09-25 04:20:12","commitOrder":14,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = createSettings();\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = createBuilderWithPort().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(\n            settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher, clusterSettings,\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2020-09-25 04:20:12","endLine":287,"groupId":"15407","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/ce3a687884980ba6358bfddc515c940d6b0cc4.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = createSettings();\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = createBuilderWithPort().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(\n            settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher, clusterSettings,\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.post(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"},{"authorDate":"2020-07-06 16:42:47","commitOrder":14,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = createSettings();\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = createBuilderWithPort().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2020-07-06 16:42:47","endLine":340,"groupId":"62181","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/b0cd7f0ed423884d36927b5750c9782380f294.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = createSettings();\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = createBuilderWithPort().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"N"}],"commitId":"19c19f28cb7b82f0c9b480e7f07289ab6bfeeb60","commitMessage":"@@@Split up large HTTP responses in outbound pipeline (#62666)\n\nCurrently Netty will batch compression an entire HTTP response\nregardless of its content size. It allocates a byte array at least of\nthe same size as the uncompressed content. This causes issues with our\nattempts to remove humungous G1GC allocations. This commit resolves the\nissue by split responses into 128KB chunks.\n\nThis has the side-effect of making large outbound HTTP responses that\nare compressed be send as chunked transfer-encoding.","date":"2020-09-25 04:20:12","modifiedFileCount":"9","status":"M","submitter":"Tim Brooks"},{"authorTime":"2021-08-10 18:39:12","codes":[{"authorDate":"2020-09-25 04:20:12","commitOrder":15,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = createSettings();\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = createBuilderWithPort().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(\n            settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher, clusterSettings,\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2020-09-25 04:20:12","endLine":287,"groupId":"10643","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/ce3a687884980ba6358bfddc515c940d6b0cc4.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = createSettings();\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = createBuilderWithPort().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (Netty4HttpServerTransport transport = new Netty4HttpServerTransport(\n            settings, networkService, bigArrays, threadPool, xContentRegistry(), dispatcher, clusterSettings,\n            new SharedGroupFactory(settings))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (Netty4HttpClient client = new Netty4HttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/Netty4HttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"},{"authorDate":"2021-08-10 18:39:12","commitOrder":15,"curCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = createSettings();\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = createBuilderWithPort().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            randomClusterSettings())) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","date":"2021-08-10 18:39:12","endLine":373,"groupId":"10643","id":26,"instanceNumber":2,"isCurCommit":1,"methodName":"testBadRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/769272582ab0d57084431f1119660b84530a9c.src","preCode":"    public void testBadRequest() throws InterruptedException {\n        final AtomicReference<Throwable> causeReference = new AtomicReference<>();\n        final HttpServerTransport.Dispatcher dispatcher = new HttpServerTransport.Dispatcher() {\n\n            @Override\n            public void dispatchRequest(final RestRequest request, final RestChannel channel, final ThreadContext threadContext) {\n                logger.error(\"--> Unexpected successful request [{}]\", FakeRestRequest.requestToString(request));\n                throw new AssertionError();\n            }\n\n            @Override\n            public void dispatchBadRequest(final RestChannel channel, final ThreadContext threadContext, final Throwable cause) {\n                causeReference.set(cause);\n                try {\n                    final ElasticsearchException e = new ElasticsearchException(\"you sent a bad request and you should feel bad\");\n                    channel.sendResponse(new BytesRestResponse(channel, BAD_REQUEST, e));\n                } catch (final IOException e) {\n                    throw new AssertionError(e);\n                }\n            }\n\n        };\n\n        final Settings settings;\n        final int maxInitialLineLength;\n        final Setting<ByteSizeValue> httpMaxInitialLineLengthSetting = HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH;\n        if (randomBoolean()) {\n            maxInitialLineLength = httpMaxInitialLineLengthSetting.getDefault(Settings.EMPTY).bytesAsInt();\n            settings = createSettings();\n        } else {\n            maxInitialLineLength = randomIntBetween(1, 8192);\n            settings = createBuilderWithPort().put(httpMaxInitialLineLengthSetting.getKey(), maxInitialLineLength + \"b\").build();\n        }\n\n        try (NioHttpServerTransport transport = new NioHttpServerTransport(settings, networkService, bigArrays, pageRecycler,\n            threadPool, xContentRegistry(), dispatcher, new NioGroupFactory(settings, logger),\n            new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS))) {\n            transport.start();\n            final TransportAddress remoteAddress = randomFrom(transport.boundAddress().boundAddresses());\n\n            try (NioHttpClient client = new NioHttpClient()) {\n                final String url = \"/\" + new String(new byte[maxInitialLineLength], Charset.forName(\"UTF-8\"));\n                final FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, url);\n\n                final FullHttpResponse response = client.send(remoteAddress.address(), request);\n                try {\n                    assertThat(response.status(), equalTo(HttpResponseStatus.BAD_REQUEST));\n                    assertThat(\n                        new String(response.content().array(), Charset.forName(\"UTF-8\")),\n                        containsString(\"you sent a bad request and you should feel bad\"));\n                } finally {\n                    response.release();\n                }\n            }\n        }\n\n        assertNotNull(causeReference.get());\n        assertThat(causeReference.get(), instanceOf(TooLongFrameException.class));\n    }\n","realPath":"plugins/transport-nio/src/test/java/org/elasticsearch/http/nio/NioHttpServerTransportTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"}],"commitId":"873fbf7b650e9b78a8537d8759dee37b1470864f","commitMessage":"@@@Fix Leaking Http Channel Objects when Http Client Stats are Disabled (#76257)\n\nWe have to remove the channel from the internal collection of channels when stats are disabled.\n\nCloses #76183\n","date":"2021-08-10 18:39:12","modifiedFileCount":"5","status":"M","submitter":"Armin Braun"}]
