[{"authorTime":"2018-12-18 04:38:14","codes":[{"authorDate":"2018-07-19 02:10:12","commitOrder":3,"curCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","date":"2018-07-19 02:10:12","endLine":180,"groupId":"49805","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreZValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/947a44a0a1258afb556249eb52aa9d7d73daed.src","preCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser().parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"NB"},{"authorDate":"2018-12-18 04:38:14","commitOrder":3,"curCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"tree\", \"quadtree\")\n                .field(\"coerce\", \"true\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        boolean coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"tree\", \"quadtree\")\n                .field(\"coerce\", \"false\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","date":"2018-12-18 04:38:14","endLine":162,"groupId":"10930","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/d8c72531db20d582f355aeece9105b3db672b6.src","preCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"tree\", \"quadtree\")\n                .field(\"coerce\", \"true\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        boolean coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"tree\", \"quadtree\")\n                .field(\"coerce\", \"false\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"}],"commitId":"5bc7822562a6eefa4a64743233160cdc9f431adf","commitMessage":"@@@[Geo] Integrate Lucene's LatLonShape (BKD Backed GeoShapes) as default `geo_shape` indexing approach (#35320)\n\nThis commit  exposes lucene's LatLonShape field as the\ndefault type in GeoShapeFieldMapper. To use the new \nindexing approach.  simply set \"type\" : \"geo_shape\" in \nthe mappings without setting any of the strategy.  precision.  \ntree_levels.  or distance_error_pct parameters. Note the \nfollowing when using the new indexing approach:\n\n* geo_shape query does not support querying by \nMULTIPOINT.\n* LINESTRING and MULTILINESTRING queries do not \nyet support WITHIN relation.\n* CONTAINS relation is not yet supported.\nThe tree.  precision.  tree_levels.  distance_error_pct.  \nand points_only parameters are deprecated.\n","date":"2018-12-18 04:38:14","modifiedFileCount":"22","status":"M","submitter":"Nick Knize"},{"authorTime":"2020-08-25 01:10:47","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":4,"curCode":"    public void testIgnoreZValue() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"ignore_z_value\", true)));\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"ignore_z_value\", false)));\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","date":"2020-08-25 01:10:47","endLine":147,"groupId":"66433","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreZValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/79/72c5250d4325af263d43b2cb48ccc974e5c03c.src","preCode":"    public void testIgnoreZValue() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"true\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n            .startObject(\"properties\").startObject(\"location\")\n            .field(\"type\", \"geo_shape\")\n            .field(IGNORE_Z_VALUE.getPreferredName(), \"false\")\n            .endObject().endObject()\n            .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2020-08-25 01:10:47","commitOrder":4,"curCode":"    public void testCoerceParsing() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"coerce\", true))\n        );\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        boolean coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"coerce\", false))\n        );\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\", \"strategy\");\n    }\n","date":"2020-08-25 01:10:47","endLine":184,"groupId":"66433","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/73/82d4645d25bf6f8fa9932342b46e3e7b3008b6.src","preCode":"    public void testCoerceParsing() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"tree\", \"quadtree\")\n                .field(\"coerce\", \"true\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        boolean coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                .field(\"type\", \"geo_shape\")\n                .field(\"tree\", \"quadtree\")\n                .field(\"coerce\", \"false\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        defaultMapper = createIndex(\"test2\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"e2dd0bde26e6c1f9f1a5137a5bf432d348e4205e","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-25 01:10:47","modifiedFileCount":"48","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-10-22 16:11:41","codes":[{"authorDate":"2020-10-22 16:11:41","commitOrder":5,"curCode":"    public void testIgnoreZValue() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"ignore_z_value\", true)));\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"ignore_z_value\", false)));\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","date":"2020-10-22 16:11:41","endLine":145,"groupId":"102988","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIgnoreZValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/1f1ebad3dd8ddb0a3a377034bf3095fbd9cba6.src","preCode":"    public void testIgnoreZValue() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"ignore_z_value\", true)));\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        boolean ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(true));\n\n        \r\n        mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"ignore_z_value\", false)));\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(GeoShapeFieldMapper.class));\n\n        ignoreZValue = ((GeoShapeFieldMapper)fieldMapper).ignoreZValue().value();\n        assertThat(ignoreZValue, equalTo(false));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/GeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2020-10-22 16:11:41","commitOrder":5,"curCode":"    public void testCoerceParsing() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"coerce\", true))\n        );\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        boolean coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"coerce\", false))\n        );\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\", \"strategy\");\n    }\n","date":"2020-10-22 16:11:41","endLine":177,"groupId":"102988","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCoerceParsing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/83/3c914b8fefc7ad211dff322891b4c8510e37dc.src","preCode":"    public void testCoerceParsing() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"coerce\", true))\n        );\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        boolean coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(true));\n\n        \r\n        mapper = createDocumentMapper(\n            fieldMapping(b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"quadtree\").field(\"coerce\", false))\n        );\n        fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n        coerce = ((LegacyGeoShapeFieldMapper)fieldMapper).coerce().value();\n        assertThat(coerce, equalTo(false));\n        assertFieldWarnings(\"tree\", \"strategy\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"bfaf3040c6e5245b6d3367483ba86c676dd09bd2","commitMessage":"@@@Convert geo field mappers to Parametrized form (#63836)\n\nRelates to #62988","date":"2020-10-22 16:11:41","modifiedFileCount":"42","status":"M","submitter":"Alan Woodward"}]
