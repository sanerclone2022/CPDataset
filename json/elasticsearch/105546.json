[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-10-26 01:00:36","commitOrder":2,"curCode":"    protected InternalDerivative mutateInstance(InternalDerivative instance) {\n        String name = instance.getName();\n        double value = instance.getValue();\n        double normalizationFactor = instance.getNormalizationFactor();\n        DocValueFormat formatter = instance.formatter();\n        List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators();\n        Map<String, Object> metaData = instance.getMetaData();\n        switch (between(0, 2)) {\n        case 0:\n            name += randomAlphaOfLength(5);\n            break;\n        case 1:\n            if (Double.isFinite(value)) {\n                value += between(1, 100);\n            } else {\n                value = randomDoubleBetween(0, 100000, true);\n            }\n            break;\n        case 2:\n            normalizationFactor += between(1, 100);\n            break;\n        case 3:\n            if (metaData == null) {\n                metaData = new HashMap<>(1);\n            } else {\n                metaData = new HashMap<>(instance.getMetaData());\n            }\n            metaData.put(randomAlphaOfLength(15), randomInt());\n            break;\n        default:\n            throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new InternalDerivative(name, value, normalizationFactor, formatter, pipelineAggregators, metaData);\n    }\n","date":"2018-10-26 01:00:36","endLine":110,"groupId":"225","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mutateInstance","params":"(InternalDerivativeinstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/65/22e7591e5032955fa7716cf4dd30e671ca678f.src","preCode":"    protected InternalDerivative mutateInstance(InternalDerivative instance) {\n        String name = instance.getName();\n        double value = instance.getValue();\n        double normalizationFactor = instance.getNormalizationFactor();\n        DocValueFormat formatter = instance.formatter();\n        List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators();\n        Map<String, Object> metaData = instance.getMetaData();\n        switch (between(0, 2)) {\n        case 0:\n            name += randomAlphaOfLength(5);\n            break;\n        case 1:\n            if (Double.isFinite(value)) {\n                value += between(1, 100);\n            } else {\n                value = randomDoubleBetween(0, 100000, true);\n            }\n            break;\n        case 2:\n            normalizationFactor += between(1, 100);\n            break;\n        case 3:\n            if (metaData == null) {\n                metaData = new HashMap<>(1);\n            } else {\n                metaData = new HashMap<>(instance.getMetaData());\n            }\n            metaData.put(randomAlphaOfLength(15), randomInt());\n            break;\n        default:\n            throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new InternalDerivative(name, value, normalizationFactor, formatter, pipelineAggregators, metaData);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/pipeline/InternalDerivativeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    protected InternalSimpleValue mutateInstance(InternalSimpleValue instance) {\n        String name = instance.getName();\n        double value = instance.getValue();\n        DocValueFormat formatter = instance.formatter();\n        List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators();\n        Map<String, Object> metaData = instance.getMetaData();\n        switch (between(0, 2)) {\n        case 0:\n            name += randomAlphaOfLength(5);\n            break;\n        case 1:\n            if (Double.isFinite(value)) {\n                value += between(1, 100);\n            } else {\n                value = randomDoubleBetween(0, 100000, true);\n            }\n            break;\n        case 2:\n            if (metaData == null) {\n                metaData = new HashMap<>(1);\n            } else {\n                metaData = new HashMap<>(instance.getMetaData());\n            }\n            metaData.put(randomAlphaOfLength(15), randomInt());\n            break;\n        default:\n            throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new InternalSimpleValue(name, value, formatter, pipelineAggregators, metaData);\n    }\n","date":"2018-04-26 03:22:53","endLine":102,"groupId":"225","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"mutateInstance","params":"(InternalSimpleValueinstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/c7869cb3ab20f4f399efedb0e2394bd032d73f.src","preCode":"    protected InternalSimpleValue mutateInstance(InternalSimpleValue instance) {\n        String name = instance.getName();\n        double value = instance.getValue();\n        DocValueFormat formatter = instance.formatter();\n        List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators();\n        Map<String, Object> metaData = instance.getMetaData();\n        switch (between(0, 2)) {\n        case 0:\n            name += randomAlphaOfLength(5);\n            break;\n        case 1:\n            if (Double.isFinite(value)) {\n                value += between(1, 100);\n            } else {\n                value = randomDoubleBetween(0, 100000, true);\n            }\n            break;\n        case 2:\n            if (metaData == null) {\n                metaData = new HashMap<>(1);\n            } else {\n                metaData = new HashMap<>(instance.getMetaData());\n            }\n            metaData.put(randomAlphaOfLength(15), randomInt());\n            break;\n        default:\n            throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new InternalSimpleValue(name, value, formatter, pipelineAggregators, metaData);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/pipeline/InternalSimpleValueTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"NB"}],"commitId":"3e7042832acfffad4de4214ad6491b147f5157b0","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-10-26 01:00:36","modifiedFileCount":"350","status":"M","submitter":"Lee Hinman"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    protected InternalDerivative mutateInstance(InternalDerivative instance) {\n        String name = instance.getName();\n        double value = instance.getValue();\n        double normalizationFactor = instance.getNormalizationFactor();\n        DocValueFormat formatter = instance.formatter();\n        List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators();\n        Map<String, Object> metadata = instance.getMetadata();\n        switch (between(0, 2)) {\n        case 0:\n            name += randomAlphaOfLength(5);\n            break;\n        case 1:\n            if (Double.isFinite(value)) {\n                value += between(1, 100);\n            } else {\n                value = randomDoubleBetween(0, 100000, true);\n            }\n            break;\n        case 2:\n            normalizationFactor += between(1, 100);\n            break;\n        case 3:\n            if (metadata == null) {\n                metadata = new HashMap<>(1);\n            } else {\n                metadata = new HashMap<>(instance.getMetadata());\n            }\n            metadata.put(randomAlphaOfLength(15), randomInt());\n            break;\n        default:\n            throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new InternalDerivative(name, value, normalizationFactor, formatter, pipelineAggregators, metadata);\n    }\n","date":"2020-04-01 03:52:01","endLine":110,"groupId":"225","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mutateInstance","params":"(InternalDerivativeinstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0a/d8a51e4d07241d57d2beb678dc274a71c38f6f.src","preCode":"    protected InternalDerivative mutateInstance(InternalDerivative instance) {\n        String name = instance.getName();\n        double value = instance.getValue();\n        double normalizationFactor = instance.getNormalizationFactor();\n        DocValueFormat formatter = instance.formatter();\n        List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators();\n        Map<String, Object> metaData = instance.getMetaData();\n        switch (between(0, 2)) {\n        case 0:\n            name += randomAlphaOfLength(5);\n            break;\n        case 1:\n            if (Double.isFinite(value)) {\n                value += between(1, 100);\n            } else {\n                value = randomDoubleBetween(0, 100000, true);\n            }\n            break;\n        case 2:\n            normalizationFactor += between(1, 100);\n            break;\n        case 3:\n            if (metaData == null) {\n                metaData = new HashMap<>(1);\n            } else {\n                metaData = new HashMap<>(instance.getMetaData());\n            }\n            metaData.put(randomAlphaOfLength(15), randomInt());\n            break;\n        default:\n            throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new InternalDerivative(name, value, normalizationFactor, formatter, pipelineAggregators, metaData);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/pipeline/InternalDerivativeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    protected InternalSimpleValue mutateInstance(InternalSimpleValue instance) {\n        String name = instance.getName();\n        double value = instance.getValue();\n        DocValueFormat formatter = instance.formatter();\n        List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators();\n        Map<String, Object> metadata = instance.getMetadata();\n        switch (between(0, 2)) {\n        case 0:\n            name += randomAlphaOfLength(5);\n            break;\n        case 1:\n            if (Double.isFinite(value)) {\n                value += between(1, 100);\n            } else {\n                value = randomDoubleBetween(0, 100000, true);\n            }\n            break;\n        case 2:\n            if (metadata == null) {\n                metadata = new HashMap<>(1);\n            } else {\n                metadata = new HashMap<>(instance.getMetadata());\n            }\n            metadata.put(randomAlphaOfLength(15), randomInt());\n            break;\n        default:\n            throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new InternalSimpleValue(name, value, formatter, pipelineAggregators, metadata);\n    }\n","date":"2020-04-01 03:52:01","endLine":102,"groupId":"225","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"mutateInstance","params":"(InternalSimpleValueinstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/21/c3a8c5ef21c780cc49c98a8c2133bf47b0bfbd.src","preCode":"    protected InternalSimpleValue mutateInstance(InternalSimpleValue instance) {\n        String name = instance.getName();\n        double value = instance.getValue();\n        DocValueFormat formatter = instance.formatter();\n        List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators();\n        Map<String, Object> metaData = instance.getMetaData();\n        switch (between(0, 2)) {\n        case 0:\n            name += randomAlphaOfLength(5);\n            break;\n        case 1:\n            if (Double.isFinite(value)) {\n                value += between(1, 100);\n            } else {\n                value = randomDoubleBetween(0, 100000, true);\n            }\n            break;\n        case 2:\n            if (metaData == null) {\n                metaData = new HashMap<>(1);\n            } else {\n                metaData = new HashMap<>(instance.getMetaData());\n            }\n            metaData.put(randomAlphaOfLength(15), randomInt());\n            break;\n        default:\n            throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new InternalSimpleValue(name, value, formatter, pipelineAggregators, metaData);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/pipeline/InternalSimpleValueTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-04-02 22:39:30","codes":[{"authorDate":"2020-04-02 22:39:30","commitOrder":4,"curCode":"    protected InternalDerivative mutateInstance(InternalDerivative instance) {\n        String name = instance.getName();\n        double value = instance.getValue();\n        double normalizationFactor = instance.getNormalizationFactor();\n        DocValueFormat formatter = instance.formatter();\n        Map<String, Object> metadata = instance.getMetadata();\n        switch (between(0, 2)) {\n        case 0:\n            name += randomAlphaOfLength(5);\n            break;\n        case 1:\n            if (Double.isFinite(value)) {\n                value += between(1, 100);\n            } else {\n                value = randomDoubleBetween(0, 100000, true);\n            }\n            break;\n        case 2:\n            normalizationFactor += between(1, 100);\n            break;\n        case 3:\n            if (metadata == null) {\n                metadata = new HashMap<>(1);\n            } else {\n                metadata = new HashMap<>(instance.getMetadata());\n            }\n            metadata.put(randomAlphaOfLength(15), randomInt());\n            break;\n        default:\n            throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new InternalDerivative(name, value, normalizationFactor, formatter, metadata);\n    }\n","date":"2020-04-02 22:39:30","endLine":103,"groupId":"105546","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"mutateInstance","params":"(InternalDerivativeinstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/20/8dfcbaed8583c5f37aa58a2c19915f998a3443.src","preCode":"    protected InternalDerivative mutateInstance(InternalDerivative instance) {\n        String name = instance.getName();\n        double value = instance.getValue();\n        double normalizationFactor = instance.getNormalizationFactor();\n        DocValueFormat formatter = instance.formatter();\n        List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators();\n        Map<String, Object> metadata = instance.getMetadata();\n        switch (between(0, 2)) {\n        case 0:\n            name += randomAlphaOfLength(5);\n            break;\n        case 1:\n            if (Double.isFinite(value)) {\n                value += between(1, 100);\n            } else {\n                value = randomDoubleBetween(0, 100000, true);\n            }\n            break;\n        case 2:\n            normalizationFactor += between(1, 100);\n            break;\n        case 3:\n            if (metadata == null) {\n                metadata = new HashMap<>(1);\n            } else {\n                metadata = new HashMap<>(instance.getMetadata());\n            }\n            metadata.put(randomAlphaOfLength(15), randomInt());\n            break;\n        default:\n            throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new InternalDerivative(name, value, normalizationFactor, formatter, pipelineAggregators, metadata);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/pipeline/InternalDerivativeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-04-02 22:39:30","commitOrder":4,"curCode":"    protected InternalSimpleValue mutateInstance(InternalSimpleValue instance) {\n        String name = instance.getName();\n        double value = instance.getValue();\n        DocValueFormat formatter = instance.formatter();\n        Map<String, Object> metadata = instance.getMetadata();\n        switch (between(0, 2)) {\n        case 0:\n            name += randomAlphaOfLength(5);\n            break;\n        case 1:\n            if (Double.isFinite(value)) {\n                value += between(1, 100);\n            } else {\n                value = randomDoubleBetween(0, 100000, true);\n            }\n            break;\n        case 2:\n            if (metadata == null) {\n                metadata = new HashMap<>(1);\n            } else {\n                metadata = new HashMap<>(instance.getMetadata());\n            }\n            metadata.put(randomAlphaOfLength(15), randomInt());\n            break;\n        default:\n            throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new InternalSimpleValue(name, value, formatter, metadata);\n    }\n","date":"2020-04-02 22:39:30","endLine":98,"groupId":"105546","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"mutateInstance","params":"(InternalSimpleValueinstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/8351c91ba40c1c5421ac1e4b9c9beb70a78211.src","preCode":"    protected InternalSimpleValue mutateInstance(InternalSimpleValue instance) {\n        String name = instance.getName();\n        double value = instance.getValue();\n        DocValueFormat formatter = instance.formatter();\n        List<PipelineAggregator> pipelineAggregators = instance.pipelineAggregators();\n        Map<String, Object> metadata = instance.getMetadata();\n        switch (between(0, 2)) {\n        case 0:\n            name += randomAlphaOfLength(5);\n            break;\n        case 1:\n            if (Double.isFinite(value)) {\n                value += between(1, 100);\n            } else {\n                value = randomDoubleBetween(0, 100000, true);\n            }\n            break;\n        case 2:\n            if (metadata == null) {\n                metadata = new HashMap<>(1);\n            } else {\n                metadata = new HashMap<>(instance.getMetadata());\n            }\n            metadata.put(randomAlphaOfLength(15), randomInt());\n            break;\n        default:\n            throw new AssertionError(\"Illegal randomisation branch\");\n        }\n        return new InternalSimpleValue(name, value, formatter, pipelineAggregators, metadata);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/pipeline/InternalSimpleValueTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"dbe9b48b830c4aea5c59abac322e77ca5f98a8af","commitMessage":"@@@Begin to drop pipeline aggs from the result tree (#54311)\n\nRemoves pipeline aggregations from the aggregation result tree as they\nare no longer used. This stops us from building the pipeline aggregators\nat all on data nodes except for backwards compatibility serialization.\nThis will save a tiny bit of space in the aggregation tree which is\nlovely.  but the biggest benefit is that it is a step towards simplifying\npipeline aggregators.\n\nThis only does about half of the work to remove the pipeline aggs from\nthe tree. Removing all of it would.  well.  double the size of the change\nand make it harder to review.\n","date":"2020-04-02 22:39:30","modifiedFileCount":"158","status":"M","submitter":"Nik Everett"}]
