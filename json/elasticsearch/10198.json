[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2018-04-26 03:22:53","endLine":116,"groupId":"59745","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bf/fb1737eeb9305bc02982d8cf0068c8c2cd0ed9.src","preCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2018-04-26 03:22:53","endLine":356,"groupId":"37772","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormalizer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bf/fb1737eeb9305bc02982d8cf0068c8c2cd0ed9.src","preCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-12-25 03:06:50","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2018-12-25 03:06:50","endLine":139,"groupId":"59745","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/f8d48fc5cf399c096f6dd44eb7b90b2d4879f3.src","preCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2018-12-25 03:06:50","endLine":387,"groupId":"37772","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormalizer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d7/f8d48fc5cf399c096f6dd44eb7b90b2d4879f3.src","preCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"M"}],"commitId":"7580d9d925d864b25466d693637b3bd3092d44cf","commitMessage":"@@@Make SourceToParse immutable (#36971)\n\nToday the routing of a SourceToParse is assigned in a separate step\nafter the object is created. We can easily forget to set the routing.\nWith this commit.  the routing must be provided in the constructor of\nSourceToParse.\n\nRelates #36921","date":"2018-12-25 03:06:50","modifiedFileCount":"66","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2019-10-15 16:05:29","endLine":130,"groupId":"59745","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/da/d4b72cdf380546661ade4fa9c791444f8a0c0a.src","preCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2019-10-15 16:05:29","endLine":378,"groupId":"37772","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormalizer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/da/d4b72cdf380546661ade4fa9c791444f8a0c0a.src","preCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-14 23:15:19","codes":[{"authorDate":"2020-01-14 23:15:19","commitOrder":4,"curCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2020-01-14 23:15:19","endLine":131,"groupId":"59745","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/063d1478a9bbaa5b8e57cc4d4272956a6310af.src","preCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-01-14 23:15:19","commitOrder":4,"curCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2020-01-14 23:15:19","endLine":379,"groupId":"37772","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormalizer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/063d1478a9bbaa5b8e57cc4d4272956a6310af.src","preCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"M"}],"commitId":"774bfb5e22389a923678ed8013e8cd284703d5dd","commitMessage":"@@@Don't use user-supplied type when building DocumentMapper (#50960)\n\nThis commit begins the process of removing types from the document parsing\ninfrastructure. Initially.  we just ignore the user-supplied type after it has been\nremoved from the mapping json structure.  and always supply _doc as the name\nof the root parser.\n\nThe production code change is very small here.  and most of the changeset\nconsists of alterations to Mapper test code that was passing in non-standard\ntype names and checking serialization.\n\nRelates to #41059","date":"2020-01-14 23:15:19","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-20 19:14:49","codes":[{"authorDate":"2020-01-20 19:14:49","commitOrder":5,"curCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2020-01-20 19:14:49","endLine":131,"groupId":"59745","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fd/821f1170ce81fb91de0dcb3d5c6e230eb24cd1.src","preCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-01-20 19:14:49","commitOrder":5,"curCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2020-01-20 19:14:49","endLine":379,"groupId":"37772","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormalizer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fd/821f1170ce81fb91de0dcb3d5c6e230eb24cd1.src","preCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"M"}],"commitId":"3d796248437e06dc90c15077702b67851bcb63a8","commitMessage":"@@@Revert \"Don't use user-supplied type when building DocumentMapper (#50960)\" (#51214)\n\nReverts #50960\n\nThis commit has been causing test failures during upgrade tests: specifically.  an upgraded\nnode becomes master and sends a cluster state update to a 7.x node; this node sees that the\nmapping version of its .tasks index is the same as the master.  so asserts that the serialized\nmappings are the same; however.  because the master has rewritten the mapping to use\n_docinstead oftasks`.  we get an assertion failure. The logical fix is for the master to\nincrement its mapping version when it rewrites the mapping.  but there isn't a simple way to\ndo that currently.\n\nThis reverts commit 774bfb5e22389a923678ed8013e8cd284703d5dd.","date":"2020-01-20 19:14:49","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-20 19:14:49","codes":[{"authorDate":"2020-03-13 23:17:30","commitOrder":6,"curCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n\n        \r\n        assertArrayEquals(new String[] { \"1234\" }, TermVectorsService.getValues(doc.rootDoc().getFields(\"field\")));\n    }\n","date":"2020-03-13 23:17:30","endLine":135,"groupId":"59745","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d5/f0414708d642919ef89be083337bbf20bab87a.src","preCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2020-01-20 19:14:49","commitOrder":6,"curCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2020-01-20 19:14:49","endLine":379,"groupId":"37772","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormalizer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fd/821f1170ce81fb91de0dcb3d5c6e230eb24cd1.src","preCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"N"}],"commitId":"1fc3fe3d32f41eab2101c0536751b7c47e63cc48","commitMessage":"@@@Fix Term Vectors with artificial docs and keyword fields (#53504)\n\nPreviously.  Term Vectors API was returning empty results for\nartificial documents with keyword fields. Checking only for `string()`\non `IndexableField` is not enough.  since for `KeywordFieldType`\n`binaryValue()` must be used instead.\n\nFixes #53494\n","date":"2020-03-13 23:17:30","modifiedFileCount":"8","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2020-01-20 19:14:49","codes":[{"authorDate":"2020-07-29 01:14:40","commitOrder":7,"curCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n\n        \r\n        assertArrayEquals(new String[] { \"1234\" }, TermVectorsService.getValues(doc.rootDoc().getFields(\"field\")));\n\n        FieldMapper fieldMapper = (FieldMapper) mapper.mappers().getMapper(\"field\");\n        assertEquals(\"1234\", fieldMapper.parseSourceValue(\"1234\", null));\n    }\n","date":"2020-07-29 01:42:59","endLine":175,"groupId":"59745","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ec/c3e507af7d3fe47a5a08da231ff92f239b50a5.src","preCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n\n        \r\n        assertArrayEquals(new String[] { \"1234\" }, TermVectorsService.getValues(doc.rootDoc().getFields(\"field\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2020-01-20 19:14:49","commitOrder":7,"curCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2020-01-20 19:14:49","endLine":379,"groupId":"37772","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormalizer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fd/821f1170ce81fb91de0dcb3d5c6e230eb24cd1.src","preCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"N"}],"commitId":"e3bbb3bed4ed9430ab43eb4a3e8276ae503c13ab","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-29 01:42:59","modifiedFileCount":"261","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-08-24 20:15:41","codes":[{"authorDate":"2020-08-24 20:15:41","commitOrder":8,"curCode":"    public void testDefaults() throws Exception {\n        XContentBuilder mapping = fieldMapping(this::minimalMapping);\n        DocumentMapper mapper = createDocumentMapper(mapping);\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(\n            new SourceToParse(\n                \"test\",\n                \"1\",\n                BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\", \"1234\").endObject()),\n                XContentType.JSON\n            )\n        );\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n\n        \r\n        assertArrayEquals(new String[] { \"1234\" }, TermVectorsService.getValues(doc.rootDoc().getFields(\"field\")));\n    }\n","date":"2020-08-24 20:15:41","endLine":173,"groupId":"59745","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/c22674a41d64d2b3a6c1510e30f3f6ea35d09f.src","preCode":"    public void testDefaults() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"keyword\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n\n        \r\n        assertArrayEquals(new String[] { \"1234\" }, TermVectorsService.getValues(doc.rootDoc().getFields(\"field\")));\n\n        FieldMapper fieldMapper = (FieldMapper) mapper.mappers().getMapper(\"field\");\n        assertEquals(\"1234\", fieldMapper.parseSourceValue(\"1234\", null));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2020-08-24 20:15:41","commitOrder":8,"curCode":"    public void testNormalizer() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"keyword\").field(\"normalizer\", \"lowercase\")));\n        ParsedDocument doc = mapper.parse(\n            new SourceToParse(\n                \"test\",\n                \"1\",\n                BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\", \"AbC\").endObject()),\n                XContentType.JSON\n            )\n        );\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2020-08-24 20:15:41","endLine":368,"groupId":"37772","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormalizer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/c22674a41d64d2b3a6c1510e30f3f6ea35d09f.src","preCode":"    public void testNormalizer() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                .field(\"type\", \"keyword\").field(\"normalizer\", \"my_lowercase\").endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"AbC\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"M"}],"commitId":"6a9dde599f5fc11205e3f71f339a37bac9a259dc","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-24 20:15:41","modifiedFileCount":"171","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-08-25 01:10:47","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":9,"curCode":"    public void testDefaults() throws Exception {\n        XContentBuilder mapping = fieldMapping(this::minimalMapping);\n        DocumentMapper mapper = createDocumentMapper(mapping);\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"1234\")));\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n\n        \r\n        assertArrayEquals(new String[] { \"1234\" }, TermVectorsService.getValues(doc.rootDoc().getFields(\"field\")));\n    }\n","date":"2020-08-25 01:10:47","endLine":162,"groupId":"10198","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a5/424e11efd1ca3848ef04bce59f560f33bc1b32.src","preCode":"    public void testDefaults() throws Exception {\n        XContentBuilder mapping = fieldMapping(this::minimalMapping);\n        DocumentMapper mapper = createDocumentMapper(mapping);\n        assertEquals(Strings.toString(mapping), mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(\n            new SourceToParse(\n                \"test\",\n                \"1\",\n                BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\", \"1234\").endObject()),\n                XContentType.JSON\n            )\n        );\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"1234\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"1234\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n\n        \r\n        assertArrayEquals(new String[] { \"1234\" }, TermVectorsService.getValues(doc.rootDoc().getFields(\"field\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2020-08-25 01:10:47","commitOrder":9,"curCode":"    public void testNormalizer() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"keyword\").field(\"normalizer\", \"lowercase\")));\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"AbC\")));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","date":"2020-08-25 01:10:47","endLine":276,"groupId":"10198","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testNormalizer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a5/424e11efd1ca3848ef04bce59f560f33bc1b32.src","preCode":"    public void testNormalizer() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"keyword\").field(\"normalizer\", \"lowercase\")));\n        ParsedDocument doc = mapper.parse(\n            new SourceToParse(\n                \"test\",\n                \"1\",\n                BytesReference.bytes(XContentFactory.jsonBuilder().startObject().field(\"field\", \"AbC\").endObject()),\n                XContentType.JSON\n            )\n        );\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n\n        assertEquals(new BytesRef(\"abc\"), fields[0].binaryValue());\n        IndexableFieldType fieldType = fields[0].fieldType();\n        assertThat(fieldType.omitNorms(), equalTo(true));\n        assertFalse(fieldType.tokenized());\n        assertFalse(fieldType.stored());\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.DOCS));\n        assertThat(fieldType.storeTermVectors(), equalTo(false));\n        assertThat(fieldType.storeTermVectorOffsets(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPositions(), equalTo(false));\n        assertThat(fieldType.storeTermVectorPayloads(), equalTo(false));\n        assertEquals(DocValuesType.NONE, fieldType.docValuesType());\n\n        assertEquals(new BytesRef(\"abc\"), fields[1].binaryValue());\n        fieldType = fields[1].fieldType();\n        assertThat(fieldType.indexOptions(), equalTo(IndexOptions.NONE));\n        assertEquals(DocValuesType.SORTED_SET, fieldType.docValuesType());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/KeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"}],"commitId":"e2dd0bde26e6c1f9f1a5137a5bf432d348e4205e","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-25 01:10:47","modifiedFileCount":"48","status":"M","submitter":"Nik Everett"}]
