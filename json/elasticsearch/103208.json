[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testLimitNestedDocs() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = SourceToParse.source(\"test1\", \"type\", \"1\", BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = SourceToParse.source(\"test1\", \"type\", \"2\", BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n            + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n            + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","date":"2018-04-26 03:22:53","endLine":577,"groupId":"24017","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLimitNestedDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/6a9d093d12a90c8f66d4034ecb84944811a013.src","preCode":"    public void testLimitNestedDocs() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = SourceToParse.source(\"test1\", \"type\", \"1\", BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = SourceToParse.source(\"test1\", \"type\", \"2\", BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n            + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n            + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testLimitNestedDocsMultipleNestedFields() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .startObject(\"nested2\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder.endArray();\n            docBuilder.startArray(\"nested2\");\n            {\n                docBuilder.startObject().field(\"field1\", \"21\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = SourceToParse.source(\"test1\", \"type\", \"1\", BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder2.endArray();\n            docBuilder2.startArray(\"nested2\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = SourceToParse.source(\"test1\", \"type\", \"2\", BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n                + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n                + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","date":"2018-04-26 03:22:53","endLine":636,"groupId":"35134","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimitNestedDocsMultipleNestedFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/91/6a9d093d12a90c8f66d4034ecb84944811a013.src","preCode":"    public void testLimitNestedDocsMultipleNestedFields() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .startObject(\"nested2\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder.endArray();\n            docBuilder.startArray(\"nested2\");\n            {\n                docBuilder.startObject().field(\"field1\", \"21\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = SourceToParse.source(\"test1\", \"type\", \"1\", BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder2.endArray();\n            docBuilder2.startArray(\"nested2\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = SourceToParse.source(\"test1\", \"type\", \"2\", BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n                + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n                + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-12-25 03:06:50","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testLimitNestedDocs() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"type\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"type\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n            + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n            + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","date":"2018-12-25 03:06:50","endLine":631,"groupId":"24017","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLimitNestedDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/f41589fb1fd31145149d4dad6ac70e5ed84248.src","preCode":"    public void testLimitNestedDocs() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = SourceToParse.source(\"test1\", \"type\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = SourceToParse.source(\"test1\", \"type\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n            + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n            + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":582,"status":"M"},{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testLimitNestedDocsMultipleNestedFields() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .startObject(\"nested2\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder.endArray();\n            docBuilder.startArray(\"nested2\");\n            {\n                docBuilder.startObject().field(\"field1\", \"21\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"type\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder2.endArray();\n            docBuilder2.startArray(\"nested2\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"type\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n                + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n                + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","date":"2018-12-25 03:06:50","endLine":692,"groupId":"35134","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimitNestedDocsMultipleNestedFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d3/f41589fb1fd31145149d4dad6ac70e5ed84248.src","preCode":"    public void testLimitNestedDocsMultipleNestedFields() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .startObject(\"nested2\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder.endArray();\n            docBuilder.startArray(\"nested2\");\n            {\n                docBuilder.startObject().field(\"field1\", \"21\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = SourceToParse.source(\"test1\", \"type\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder2.endArray();\n            docBuilder2.startArray(\"nested2\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = SourceToParse.source(\"test1\", \"type\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n                + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n                + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":633,"status":"M"}],"commitId":"7580d9d925d864b25466d693637b3bd3092d44cf","commitMessage":"@@@Make SourceToParse immutable (#36971)\n\nToday the routing of a SourceToParse is assigned in a separate step\nafter the object is created. We can easily forget to set the routing.\nWith this commit.  the routing must be provided in the constructor of\nSourceToParse.\n\nRelates #36921","date":"2018-12-25 03:06:50","modifiedFileCount":"66","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testLimitNestedDocs() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n            + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n            + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","date":"2019-10-15 16:05:29","endLine":630,"groupId":"2351","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLimitNestedDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/dee44f2fa7bc9d632c7889796a49c55a73a4ef.src","preCode":"    public void testLimitNestedDocs() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"type\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"type\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n            + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n            + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":581,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testLimitNestedDocsMultipleNestedFields() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .startObject(\"nested2\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder.endArray();\n            docBuilder.startArray(\"nested2\");\n            {\n                docBuilder.startObject().field(\"field1\", \"21\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder2.endArray();\n            docBuilder2.startArray(\"nested2\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n                + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n                + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","date":"2019-10-15 16:05:29","endLine":691,"groupId":"48345","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimitNestedDocsMultipleNestedFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/dee44f2fa7bc9d632c7889796a49c55a73a4ef.src","preCode":"    public void testLimitNestedDocsMultipleNestedFields() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .startObject(\"nested2\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder.endArray();\n            docBuilder.startArray(\"nested2\");\n            {\n                docBuilder.startObject().field(\"field1\", \"21\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"type\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder2.endArray();\n            docBuilder2.startArray(\"nested2\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"type\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n                + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n                + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":632,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-10-21 02:11:29","codes":[{"authorDate":"2020-10-21 02:11:29","commitOrder":4,"curCode":"    public void testLimitNestedDocs() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n            + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n            + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","date":"2020-10-21 02:11:29","endLine":692,"groupId":"2351","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testLimitNestedDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/62/bc263d0886a14ab1cdb90ddce21f744a428faf.src","preCode":"    public void testLimitNestedDocs() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n            + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n            + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":643,"status":"M"},{"authorDate":"2020-10-21 02:11:29","commitOrder":4,"curCode":"    public void testLimitNestedDocsMultipleNestedFields() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .startObject(\"nested2\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder.endArray();\n            docBuilder.startArray(\"nested2\");\n            {\n                docBuilder.startObject().field(\"field1\", \"21\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder2.endArray();\n            docBuilder2.startArray(\"nested2\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n                + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n                + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","date":"2020-10-21 02:11:29","endLine":753,"groupId":"48345","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimitNestedDocsMultipleNestedFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/62/bc263d0886a14ab1cdb90ddce21f744a428faf.src","preCode":"    public void testLimitNestedDocsMultipleNestedFields() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .startObject(\"nested2\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder.endArray();\n            docBuilder.startArray(\"nested2\");\n            {\n                docBuilder.startObject().field(\"field1\", \"21\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder2.endArray();\n            docBuilder2.startArray(\"nested2\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n                + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n                + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"M"}],"commitId":"b96f26eba2049ffafb3197fbbb1942b3cdf8733a","commitMessage":"@@@Remove documentMapperParser method from MapperService (#63938)\n\nMapperService allows to retrieve its internal DocumentMapperParser instance. Such method is only used in tests.  and always to parse mappings which is already exposed by MapperService through a specific parse method.\n\nThis commit removes the getter for DocumentMapperParser from MapperService in favour of calling MapperService#parse","date":"2020-10-21 02:11:29","modifiedFileCount":"27","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-11-05 01:48:32","codes":[{"authorDate":"2020-11-05 01:48:32","commitOrder":5,"curCode":"    public void testLimitNestedDocs() throws Exception {\n        \r\n        long maxNoNestedDocs = 2L;\n        Settings settings = Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs)\n            .build();\n        DocumentMapper docMapper\n            = createMapperService(settings, mapping(b -> b.startObject(\"nested1\").field(\"type\", \"nested\").endObject())).documentMapper();\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n                + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n                + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","date":"2020-11-05 01:48:32","endLine":715,"groupId":"103208","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testLimitNestedDocs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/12854ac2f3c60c3eb17d8e7a1c23d5361d3ca3.src","preCode":"    public void testLimitNestedDocs() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n            + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n            + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":667,"status":"M"},{"authorDate":"2020-11-05 01:48:32","commitOrder":5,"curCode":"    public void testLimitNestedDocsMultipleNestedFields() throws Exception {\n        \r\n        long maxNoNestedDocs = 2L;\n        Settings settings = Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build();\n        DocumentMapper docMapper = createMapperService(settings, mapping(b -> {\n            b.startObject(\"nested1\").field(\"type\", \"nested\").endObject();\n            b.startObject(\"nested2\").field(\"type\", \"nested\").endObject();\n        })).documentMapper();\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder.endArray();\n            docBuilder.startArray(\"nested2\");\n            {\n                docBuilder.startObject().field(\"field1\", \"21\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder2.endArray();\n            docBuilder2.startArray(\"nested2\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n                + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n                + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","date":"2020-11-05 01:48:32","endLine":775,"groupId":"103208","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testLimitNestedDocsMultipleNestedFields","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/12854ac2f3c60c3eb17d8e7a1c23d5361d3ca3.src","preCode":"    public void testLimitNestedDocsMultipleNestedFields() throws Exception{\n        \r\n        long maxNoNestedDocs = 2L;\n        MapperService mapperService = createIndex(\"test1\", Settings.builder()\n            .put(MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey(), maxNoNestedDocs).build()).mapperService();\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\").startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\").endObject()\n            .startObject(\"nested2\").field(\"type\", \"nested\").endObject()\n            .endObject().endObject().endObject());\n        DocumentMapper docMapper = mapperService.parse(\"type\", new CompressedXContent(mapping));\n\n        \r\n        XContentBuilder docBuilder = XContentFactory.jsonBuilder();\n        docBuilder.startObject();\n        {\n            docBuilder.startArray(\"nested1\");\n            {\n                docBuilder.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder.endArray();\n            docBuilder.startArray(\"nested2\");\n            {\n                docBuilder.startObject().field(\"field1\", \"21\").field(\"field2\", \"22\").endObject();\n            }\n            docBuilder.endArray();\n        }\n        docBuilder.endObject();\n        SourceToParse source1 = new SourceToParse(\"test1\", \"1\",\n            BytesReference.bytes(docBuilder), XContentType.JSON);\n        ParsedDocument doc = docMapper.parse(source1);\n        assertThat(doc.docs().size(), equalTo(3));\n\n        \r\n        XContentBuilder docBuilder2 = XContentFactory.jsonBuilder();\n        docBuilder2.startObject();\n        {\n            docBuilder2.startArray(\"nested1\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"11\").field(\"field2\", \"21\").endObject();\n            }\n            docBuilder2.endArray();\n            docBuilder2.startArray(\"nested2\");\n            {\n                docBuilder2.startObject().field(\"field1\", \"12\").field(\"field2\", \"22\").endObject();\n                docBuilder2.startObject().field(\"field1\", \"13\").field(\"field2\", \"23\").endObject();\n            }\n            docBuilder2.endArray();\n\n        }\n        docBuilder2.endObject();\n        SourceToParse source2 = new SourceToParse(\"test1\", \"2\",\n            BytesReference.bytes(docBuilder2), XContentType.JSON);\n        MapperParsingException e = expectThrows(MapperParsingException.class, () -> docMapper.parse(source2));\n        assertEquals(\n            \"The number of nested documents has exceeded the allowed limit of [\" + maxNoNestedDocs\n                + \"]. This limit can be set by changing the [\" + MapperService.INDEX_MAPPING_NESTED_DOCS_LIMIT_SETTING.getKey()\n                + \"] index level setting.\",\n            e.getMessage()\n        );\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":717,"status":"M"}],"commitId":"63b96c0d7ce90d78eace02e507ca8b52321acb68","commitMessage":"@@@Convert some object mapper testcases to use MapperServiceTestCase (#64543)\n\n","date":"2020-11-05 01:48:32","modifiedFileCount":"3","status":"M","submitter":"Alan Woodward"}]
