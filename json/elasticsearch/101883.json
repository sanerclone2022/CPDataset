[{"authorTime":"2020-03-19 02:31:30","codes":[{"authorDate":"2020-03-19 02:31:30","commitOrder":1,"curCode":"    public void testCacheHolderContextConstructor() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        boolean compilationLimitsEnabled = true;\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .build();\n        Set<String> contexts = Set.of(\"foo\", \"bar\", \"baz\");\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(contexts, holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n                     holder.contextCache.get(\"baz\").get().rate);\n\n        Tuple<Integer, TimeValue> zero = new Tuple<>(0, TimeValue.ZERO);\n        compilationLimitsEnabled = false;\n        holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(zero, holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"baz\").get().rate);\n    }\n","date":"2020-03-19 02:31:30","endLine":451,"groupId":"29044","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheHolderContextConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/ce3fe127c7fc99d35339db7752236e81cadef8.src","preCode":"    public void testCacheHolderContextConstructor() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        boolean compilationLimitsEnabled = true;\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .build();\n        Set<String> contexts = Set.of(\"foo\", \"bar\", \"baz\");\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(contexts, holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n                     holder.contextCache.get(\"baz\").get().rate);\n\n        Tuple<Integer, TimeValue> zero = new Tuple<>(0, TimeValue.ZERO);\n        compilationLimitsEnabled = false;\n        holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(zero, holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"baz\").get().rate);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/script/ScriptServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"B"},{"authorDate":"2020-03-19 02:31:30","commitOrder":1,"curCode":"    public void testCacheHolderChangeSettings() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        String compilationRate = \"77/5m\";\n        Tuple<Integer, TimeValue> generalRate = MAX_COMPILATION_RATE_FUNCTION.apply(compilationRate);\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), compilationRate)\n            .build();\n        Set<String> contexts = Set.of(\"foo\", \"bar\", \"baz\");\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, true);\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .build()\n        );\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(contexts, holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n            holder.contextCache.get(\"baz\").get().rate);\n\n        holder.updateContextSettings(Settings.builder()\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), fooCompilationRate).build(),\n                \"bar\"\n        );\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n\n        holder = holder.withUpdatedCacheSettings(s);\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.general.rate);\n\n        ScriptService.CacheHolder update = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n        assertSame(holder, update);\n    }\n","date":"2020-03-19 02:31:30","endLine":509,"groupId":"29046","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheHolderChangeSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/ce3fe127c7fc99d35339db7752236e81cadef8.src","preCode":"    public void testCacheHolderChangeSettings() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        String compilationRate = \"77/5m\";\n        Tuple<Integer, TimeValue> generalRate = MAX_COMPILATION_RATE_FUNCTION.apply(compilationRate);\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), compilationRate)\n            .build();\n        Set<String> contexts = Set.of(\"foo\", \"bar\", \"baz\");\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, true);\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .build()\n        );\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(contexts, holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n            holder.contextCache.get(\"baz\").get().rate);\n\n        holder.updateContextSettings(Settings.builder()\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), fooCompilationRate).build(),\n                \"bar\"\n        );\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n\n        holder = holder.withUpdatedCacheSettings(s);\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.general.rate);\n\n        ScriptService.CacheHolder update = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n        assertSame(holder, update);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/script/ScriptServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"B"}],"commitId":"070ea7eff1d67a054bc23a6557ea081ebdff57d4","commitMessage":"@@@Scripting: Per-context script cache.  default off (#52855)\n\n* Adds per context settings:\n  `script.context.${CONTEXT}.cache_max_size` ~\n  `script.cache.max_size`\n\n  `script.context.${CONTEXT}.cache_expire` ~\n  `script.cache.expire`\n\n  `script.context.${CONTEXT}.max_compilations_rate` ~\n  `script.max_compilations_rate`\n\n* Context cache is used if:\n  `script.max_compilations_rate=use-context`.  This\n  value is dynamically updatable.  so users can\n  switch back to the general cache if desired.\n\n* Settings for context caches take the first value \n  that applies:\n  1) Context specific settings if set.  eg\n     `script.context.ingest.cache_max_size`\n  2) Correlated general setting is set to the non-default \n     value.  eg `script.cache.max_size`\n  3) Context default\n\nThe reason for 2's inclusion is to allow an easy\ntransition for users who've customized their general\ncache settings.\n\nUsing the general cache settings for the context caches\nresults in higher effective settings.  since they are \nmultiplied across the number of contexts.  So a general\ncache max size of 200 will become 200 * # of contexts.\nHowever.  this behavior it will avoid users snapping to a\nvalue that is too low for them.\n\n\nRefs: #50152\n","date":"2020-03-19 02:31:30","modifiedFileCount":"12","status":"B","submitter":"Stuart Tettemer"},{"authorTime":"2020-03-21 03:29:34","codes":[{"authorDate":"2020-03-19 02:31:30","commitOrder":2,"curCode":"    public void testCacheHolderContextConstructor() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        boolean compilationLimitsEnabled = true;\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .build();\n        Set<String> contexts = Set.of(\"foo\", \"bar\", \"baz\");\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(contexts, holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n                     holder.contextCache.get(\"baz\").get().rate);\n\n        Tuple<Integer, TimeValue> zero = new Tuple<>(0, TimeValue.ZERO);\n        compilationLimitsEnabled = false;\n        holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(zero, holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"baz\").get().rate);\n    }\n","date":"2020-03-19 02:31:30","endLine":451,"groupId":"29044","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheHolderContextConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/77/ce3fe127c7fc99d35339db7752236e81cadef8.src","preCode":"    public void testCacheHolderContextConstructor() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        boolean compilationLimitsEnabled = true;\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .build();\n        Set<String> contexts = Set.of(\"foo\", \"bar\", \"baz\");\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(contexts, holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n                     holder.contextCache.get(\"baz\").get().rate);\n\n        Tuple<Integer, TimeValue> zero = new Tuple<>(0, TimeValue.ZERO);\n        compilationLimitsEnabled = false;\n        holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(zero, holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"baz\").get().rate);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/script/ScriptServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"N"},{"authorDate":"2020-03-21 03:29:34","commitOrder":2,"curCode":"    public void testCacheHolderChangeSettings() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        String compilationRate = \"77/5m\";\n        Tuple<Integer, TimeValue> generalRate = MAX_COMPILATION_RATE_FUNCTION.apply(compilationRate);\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), compilationRate)\n            .build();\n        Set<String> contexts = Set.of(\"foo\", \"bar\", \"baz\", \"qux\");\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, true);\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"qux\").getKey(),\n                 ScriptService.UNLIMITED_COMPILATION_RATE_KEY)\n            .build()\n        );\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(4, holder.contextCache.size());\n        assertEquals(contexts, holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptCache.UNLIMITED_COMPILATION_RATE, holder.contextCache.get(\"qux\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n            holder.contextCache.get(\"baz\").get().rate);\n\n        holder.updateContextSettings(Settings.builder()\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), fooCompilationRate).build(),\n                \"bar\"\n        );\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n\n        holder = holder.withUpdatedCacheSettings(s);\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.general.rate);\n\n        ScriptService.CacheHolder update = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n        assertSame(holder, update);\n    }\n","date":"2020-03-21 03:29:34","endLine":530,"groupId":"29046","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheHolderChangeSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/41/30c723dbe33e510129816e23fa94af17c107d7.src","preCode":"    public void testCacheHolderChangeSettings() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        String compilationRate = \"77/5m\";\n        Tuple<Integer, TimeValue> generalRate = MAX_COMPILATION_RATE_FUNCTION.apply(compilationRate);\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), compilationRate)\n            .build();\n        Set<String> contexts = Set.of(\"foo\", \"bar\", \"baz\");\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, true);\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .build()\n        );\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(contexts, holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n            holder.contextCache.get(\"baz\").get().rate);\n\n        holder.updateContextSettings(Settings.builder()\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), fooCompilationRate).build(),\n                \"bar\"\n        );\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n\n        holder = holder.withUpdatedCacheSettings(s);\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.general.rate);\n\n        ScriptService.CacheHolder update = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n        assertSame(holder, update);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/script/ScriptServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":471,"status":"M"}],"commitId":"f8d4b0c1d5dab78921ef0b219b815489d82e9d3d","commitMessage":"@@@Scripting: Context script cache unlimited compile (#53769)\n\n* Adds \"unlimited\" compilation rate for context script caches\n* `script.context.${CONTEXT}.max_compilations_rate` = `unlimited`\n  disables compilation rate limiting for `${CONTEXT}`'s script\n  cache\n\nRefs: #50152","date":"2020-03-21 03:29:34","modifiedFileCount":"4","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2020-03-21 05:15:19","codes":[{"authorDate":"2020-03-21 05:15:19","commitOrder":3,"curCode":"    public void testCacheHolderContextConstructor() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        boolean compilationLimitsEnabled = true;\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .build();\n        Collection<ScriptContext<?>> contexts = Set.of(newContext(\"foo\"), newContext(\"bar\"), newContext(\"baz\"));\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(contexts.stream().map(c -> c.name).collect(Collectors.toSet()), holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n                     holder.contextCache.get(\"baz\").get().rate);\n\n        Tuple<Integer, TimeValue> zero = new Tuple<>(0, TimeValue.ZERO);\n        compilationLimitsEnabled = false;\n        holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(zero, holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"baz\").get().rate);\n    }\n","date":"2020-03-21 05:15:19","endLine":459,"groupId":"63188","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheHolderContextConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0c/c8b9c78fe5593c6a29ca63b257231f8bf13a7b.src","preCode":"    public void testCacheHolderContextConstructor() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        boolean compilationLimitsEnabled = true;\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .build();\n        Set<String> contexts = Set.of(\"foo\", \"bar\", \"baz\");\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(contexts, holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n                     holder.contextCache.get(\"baz\").get().rate);\n\n        Tuple<Integer, TimeValue> zero = new Tuple<>(0, TimeValue.ZERO);\n        compilationLimitsEnabled = false;\n        holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(zero, holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"baz\").get().rate);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/script/ScriptServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"M"},{"authorDate":"2020-03-21 05:15:19","commitOrder":3,"curCode":"    public void testCacheHolderChangeSettings() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        String compilationRate = \"77/5m\";\n        Tuple<Integer, TimeValue> generalRate = MAX_COMPILATION_RATE_FUNCTION.apply(compilationRate);\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), compilationRate)\n            .build();\n        Collection<ScriptContext<?>> contexts = Set.of(newContext(\"foo\"), newContext(\"bar\"), newContext(\"baz\"),\n                                                       newContext(\"qux\"));\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, true);\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"qux\").getKey(),\n                 ScriptService.UNLIMITED_COMPILATION_RATE_KEY)\n            .build()\n        );\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(4, holder.contextCache.size());\n        assertEquals(contexts.stream().map(c -> c.name).collect(Collectors.toSet()), holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptCache.UNLIMITED_COMPILATION_RATE, holder.contextCache.get(\"qux\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n            holder.contextCache.get(\"baz\").get().rate);\n\n        holder.updateContextSettings(Settings.builder()\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), fooCompilationRate).build(),\n                newContext(\"bar\")\n        );\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n\n        holder = holder.withUpdatedCacheSettings(s);\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.general.rate);\n\n        ScriptService.CacheHolder update = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n        assertSame(holder, update);\n    }\n","date":"2020-03-21 05:15:19","endLine":539,"groupId":"63186","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheHolderChangeSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0c/c8b9c78fe5593c6a29ca63b257231f8bf13a7b.src","preCode":"    public void testCacheHolderChangeSettings() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        String compilationRate = \"77/5m\";\n        Tuple<Integer, TimeValue> generalRate = MAX_COMPILATION_RATE_FUNCTION.apply(compilationRate);\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), compilationRate)\n            .build();\n        Set<String> contexts = Set.of(\"foo\", \"bar\", \"baz\", \"qux\");\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, true);\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"qux\").getKey(),\n                 ScriptService.UNLIMITED_COMPILATION_RATE_KEY)\n            .build()\n        );\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(4, holder.contextCache.size());\n        assertEquals(contexts, holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptCache.UNLIMITED_COMPILATION_RATE, holder.contextCache.get(\"qux\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n            holder.contextCache.get(\"baz\").get().rate);\n\n        holder.updateContextSettings(Settings.builder()\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), fooCompilationRate).build(),\n                \"bar\"\n        );\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n\n        holder = holder.withUpdatedCacheSettings(s);\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.general.rate);\n\n        ScriptService.CacheHolder update = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n        assertSame(holder, update);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/script/ScriptServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":479,"status":"M"}],"commitId":"1b37d4bfc9616f39aa3a7d3d0dc63dc132e909a8","commitMessage":"@@@Scripting: Increase ingest script cache defaults (#53765)\n\n* Adds ability for contexts to specify their own defaults.\n* Context defaults are applied if no context-specific or\n  general setting exists.\n* See 070ea7e for settings keys.\n\n* Increases the per-context default for the `ingest` context.\n  * Cache size is doubled.  200 compared to default of 100\n  * Cache expiration is unchanged at no expiration\n  * Cache max compilation is quintupled.  375/5m instead of 75/5m\n\nRefs: #50152\n","date":"2020-03-21 05:15:19","modifiedFileCount":"5","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2020-04-23 02:33:33","codes":[{"authorDate":"2020-04-23 02:33:33","commitOrder":4,"curCode":"    public void testCacheHolderContextConstructor() throws IOException {\n        String a = randomFrom(contexts.keySet());\n        String b = randomValueOtherThan(a, () -> randomFrom(contexts.keySet()));\n        String c = randomValueOtherThanMany(Set.of(a, b)::contains, () -> randomFrom(contexts.keySet()));\n        String aCompilationRate = \"77/5m\";\n        String bCompilationRate = \"78/6m\";\n\n        buildScriptService(Settings.builder()\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(a).getKey(), aCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(b).getKey(), bCompilationRate)\n            .build());\n\n        assertNull(scriptService.cacheHolder.get().general);\n        assertNotNull(scriptService.cacheHolder.get().contextCache);\n        assertEquals(contexts.keySet(), scriptService.cacheHolder.get().contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(aCompilationRate),\n                     scriptService.cacheHolder.get().contextCache.get(a).get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(bCompilationRate),\n                     scriptService.cacheHolder.get().contextCache.get(b).get().rate);\n    }\n","date":"2020-04-23 02:33:33","endLine":479,"groupId":"48420","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheHolderContextConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/9f6cea6755f3dac9dfc1021c6be3befd123ede.src","preCode":"    public void testCacheHolderContextConstructor() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        boolean compilationLimitsEnabled = true;\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .build();\n        Collection<ScriptContext<?>> contexts = Set.of(newContext(\"foo\"), newContext(\"bar\"), newContext(\"baz\"));\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(contexts.stream().map(c -> c.name).collect(Collectors.toSet()), holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n                     holder.contextCache.get(\"baz\").get().rate);\n\n        Tuple<Integer, TimeValue> zero = new Tuple<>(0, TimeValue.ZERO);\n        compilationLimitsEnabled = false;\n        holder = new ScriptService.CacheHolder(s, contexts, compilationLimitsEnabled);\n\n        assertNotNull(holder.contextCache);\n        assertEquals(3, holder.contextCache.size());\n        assertEquals(zero, holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(zero, holder.contextCache.get(\"baz\").get().rate);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/script/ScriptServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"M"},{"authorDate":"2020-04-23 02:33:33","commitOrder":4,"curCode":"    public void testCacheHolderChangeSettings() throws IOException {\n        Set<String> contextNames = contexts.keySet();\n        String a = randomFrom(contextNames);\n        String aRate = \"77/5m\";\n        String b = randomValueOtherThan(a, () -> randomFrom(contextNames));\n        String bRate = \"78/6m\";\n        String c = randomValueOtherThanMany(s -> a.equals(s) || b.equals(s), () -> randomFrom(contextNames));\n        String compilationRate = \"77/5m\";\n        Tuple<Integer, TimeValue> generalRate = MAX_COMPILATION_RATE_FUNCTION.apply(compilationRate);\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), compilationRate)\n            .build();\n\n        buildScriptService(s);\n\n        assertNotNull(scriptService.cacheHolder.get().general);\n        \r\n        scriptService.cacheHolder.get().set(c, scriptService.contextCache(s, contexts.get(c)));\n        assertNull(scriptService.cacheHolder.get().contextCache);\n        assertEquals(generalRate, scriptService.cacheHolder.get().general.rate);\n\n        scriptService.setCacheHolder(Settings.builder()\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(a).getKey(), aRate)\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(b).getKey(), bRate)\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(c).getKey(),\n                     ScriptService.UNLIMITED_COMPILATION_RATE_KEY)\n                .build()\n        );\n\n        assertNull(scriptService.cacheHolder.get().general);\n        assertNotNull(scriptService.cacheHolder.get().contextCache);\n        \r\n        assertNull(scriptService.cacheHolder.get().get(\n            randomValueOtherThanMany(contexts.keySet()::contains, () -> randomAlphaOfLength(8)))\n        );\n        assertEquals(contexts.keySet(), scriptService.cacheHolder.get().contextCache.keySet());\n\n        String d = randomValueOtherThanMany(Set.of(a, b, c)::contains, () -> randomFrom(contextNames));\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(aRate),\n                     scriptService.cacheHolder.get().contextCache.get(a).get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(bRate),\n                     scriptService.cacheHolder.get().contextCache.get(b).get().rate);\n        assertEquals(ScriptCache.UNLIMITED_COMPILATION_RATE,\n                     scriptService.cacheHolder.get().contextCache.get(c).get().rate);\n\n        scriptService.cacheHolder.get().set(b, scriptService.contextCache(Settings.builder()\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(b).getKey(), aRate).build(),\n            contexts.get(b)));\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(aRate),\n                     scriptService.cacheHolder.get().contextCache.get(b).get().rate);\n\n        scriptService.setCacheHolder(s);\n        assertNotNull(scriptService.cacheHolder.get().general);\n        assertNull(scriptService.cacheHolder.get().contextCache);\n        assertEquals(generalRate, scriptService.cacheHolder.get().general.rate);\n\n        scriptService.setCacheHolder(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), bRate).build()\n        );\n\n        assertNotNull(scriptService.cacheHolder.get().general);\n        assertNull(scriptService.cacheHolder.get().contextCache);\n        assertEquals(MAX_COMPILATION_RATE_FUNCTION.apply(bRate), scriptService.cacheHolder.get().general.rate);\n\n        CacheHolder holder = scriptService.cacheHolder.get();\n        scriptService.setCacheHolder(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), bRate).build()\n        );\n        assertEquals(holder, scriptService.cacheHolder.get());\n\n        assertSettingDeprecationsAndWarnings(new Setting<?>[]{SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING});\n    }\n","date":"2020-04-23 02:33:33","endLine":602,"groupId":"48418","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheHolderChangeSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b5/9f6cea6755f3dac9dfc1021c6be3befd123ede.src","preCode":"    public void testCacheHolderChangeSettings() {\n        String fooCompilationRate = \"77/5m\";\n        String barCompilationRate = \"78/6m\";\n        String compilationRate = \"77/5m\";\n        Tuple<Integer, TimeValue> generalRate = MAX_COMPILATION_RATE_FUNCTION.apply(compilationRate);\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), compilationRate)\n            .build();\n        Collection<ScriptContext<?>> contexts = Set.of(newContext(\"foo\"), newContext(\"bar\"), newContext(\"baz\"),\n                                                       newContext(\"qux\"));\n        ScriptService.CacheHolder holder = new ScriptService.CacheHolder(s, contexts, true);\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), ScriptService.USE_CONTEXT_RATE_KEY)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"foo\").getKey(), fooCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), barCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"qux\").getKey(),\n                 ScriptService.UNLIMITED_COMPILATION_RATE_KEY)\n            .build()\n        );\n\n        assertNull(holder.general);\n        assertNotNull(holder.contextCache);\n        assertEquals(4, holder.contextCache.size());\n        assertEquals(contexts.stream().map(c -> c.name).collect(Collectors.toSet()), holder.contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"foo\").get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n        assertEquals(ScriptCache.UNLIMITED_COMPILATION_RATE, holder.contextCache.get(\"qux\").get().rate);\n        assertEquals(ScriptService.SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getDefault(Settings.EMPTY),\n            holder.contextCache.get(\"baz\").get().rate);\n\n        holder.updateContextSettings(Settings.builder()\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(\"bar\").getKey(), fooCompilationRate).build(),\n                newContext(\"bar\")\n        );\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(fooCompilationRate), holder.contextCache.get(\"bar\").get().rate);\n\n        holder = holder.withUpdatedCacheSettings(s);\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(generalRate, holder.general.rate);\n\n        holder = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n\n        assertNotNull(holder.general);\n        assertNull(holder.contextCache);\n        assertEquals(MAX_COMPILATION_RATE_FUNCTION.apply(barCompilationRate), holder.general.rate);\n\n        ScriptService.CacheHolder update = holder.withUpdatedCacheSettings(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), barCompilationRate).build()\n        );\n        assertSame(holder, update);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/script/ScriptServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"M"}],"commitId":"bd64da096088af2a52cea7b9e48252a27294d27b","commitMessage":"@@@Scripting: Deprecate general cache settings (#55038)\n\n* Scripting: Deprecate general cache settings\n\n* Add script.disable_max_compilations_rate setting\n\n* Move construction to ScriptCache\n\n* Use ScriptService to do updates of CacheHolder\n\n* Remove fallbacks\n\n* Add SCRIPT_DISABLE_MAX_COMPILATIONS_RATE_SETTING to ClusterSettings\n\n* Node scope\n\n* Use back compat\n\n* 8.0 for bwc\n\n* script.max_compilations_rate=2048/1m -> script.disable_max_compilations_rate=true in docker compose\n\n* do not guard in esnode\n\n* Doc update\n\n* isSnapshotBuild() -> systemProperty 'es.script.disable_max_compilations_rate'.  'true'\n\n* Do not use snapshot in gradle to set max_compilations_rate\n\n* Expose cacheHolder as package private\n\n* monospace 75/5m in cbreaker docs.  single space in using\n\n* More detail in general compilation rate error\n\n* Test: don't modify defaultConfig on upgrade","date":"2020-04-23 02:33:33","modifiedFileCount":"7","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2020-07-10 21:44:56","codes":[{"authorDate":"2020-07-10 21:44:56","commitOrder":5,"curCode":"    public void testCacheHolderContextConstructor() throws IOException {\n        String a = randomFrom(contexts.keySet());\n        String b = randomValueOtherThan(a, () -> randomFrom(contexts.keySet()));\n        String aCompilationRate = \"77/5m\";\n        String bCompilationRate = \"78/6m\";\n\n        buildScriptService(Settings.builder()\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(a).getKey(), aCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(b).getKey(), bCompilationRate)\n            .build());\n\n        assertNotNull(scriptService.cacheHolder.get().contextCache);\n        assertEquals(contexts.keySet(), scriptService.cacheHolder.get().contextCache.keySet());\n\n        assertEquals(new ScriptCache.CompilationRate(aCompilationRate),\n                     scriptService.cacheHolder.get().contextCache.get(a).get().rate);\n        assertEquals(new ScriptCache.CompilationRate(bCompilationRate),\n                     scriptService.cacheHolder.get().contextCache.get(b).get().rate);\n    }\n","date":"2020-07-10 21:44:56","endLine":398,"groupId":"101883","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheHolderContextConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/c5d7105a01f827a276fbb1c4300127964299fc.src","preCode":"    public void testCacheHolderContextConstructor() throws IOException {\n        String a = randomFrom(contexts.keySet());\n        String b = randomValueOtherThan(a, () -> randomFrom(contexts.keySet()));\n        String c = randomValueOtherThanMany(Set.of(a, b)::contains, () -> randomFrom(contexts.keySet()));\n        String aCompilationRate = \"77/5m\";\n        String bCompilationRate = \"78/6m\";\n\n        buildScriptService(Settings.builder()\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(a).getKey(), aCompilationRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(b).getKey(), bCompilationRate)\n            .build());\n\n        assertNull(scriptService.cacheHolder.get().general);\n        assertNotNull(scriptService.cacheHolder.get().contextCache);\n        assertEquals(contexts.keySet(), scriptService.cacheHolder.get().contextCache.keySet());\n\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(aCompilationRate),\n                     scriptService.cacheHolder.get().contextCache.get(a).get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(bCompilationRate),\n                     scriptService.cacheHolder.get().contextCache.get(b).get().rate);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/script/ScriptServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"},{"authorDate":"2020-07-10 21:44:56","commitOrder":5,"curCode":"    public void testCacheHolderChangeSettings() throws IOException {\n        Set<String> contextNames = contexts.keySet();\n        String a = randomFrom(contextNames);\n        String aRate = \"77/5m\";\n        String b = randomValueOtherThan(a, () -> randomFrom(contextNames));\n        String bRate = \"78/6m\";\n        String c = randomValueOtherThanMany(s -> a.equals(s) || b.equals(s), () -> randomFrom(contextNames));\n\n        buildScriptService(Settings.EMPTY);\n\n        Settings settings = Settings.builder()\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(a).getKey(), aRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(b).getKey(), bRate)\n            .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(c).getKey(),\n                ScriptService.UNLIMITED_COMPILATION_RATE_KEY)\n            .build();\n\n        assertNotNull(scriptService.cacheHolder.get().contextCache);\n        scriptService.cacheHolder.get().set(a, scriptService.contextCache(settings, contexts.get(a)));\n        scriptService.cacheHolder.get().set(b, scriptService.contextCache(settings, contexts.get(b)));\n        scriptService.cacheHolder.get().set(c, scriptService.contextCache(settings, contexts.get(c)));\n        \r\n        assertNull(scriptService.cacheHolder.get().get(\n            randomValueOtherThanMany(contexts.keySet()::contains, () -> randomAlphaOfLength(8)))\n        );\n        assertEquals(contexts.keySet(), scriptService.cacheHolder.get().contextCache.keySet());\n\n        assertEquals(new ScriptCache.CompilationRate(aRate),\n                     scriptService.cacheHolder.get().contextCache.get(a).get().rate);\n        assertEquals(new ScriptCache.CompilationRate(bRate),\n                     scriptService.cacheHolder.get().contextCache.get(b).get().rate);\n        assertEquals(ScriptCache.UNLIMITED_COMPILATION_RATE,\n                     scriptService.cacheHolder.get().contextCache.get(c).get().rate);\n\n        scriptService.cacheHolder.get().set(b, scriptService.contextCache(Settings.builder()\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(b).getKey(), aRate).build(),\n            contexts.get(b)));\n        assertEquals(new ScriptCache.CompilationRate(aRate),\n                     scriptService.cacheHolder.get().contextCache.get(b).get().rate);\n    }\n","date":"2020-07-10 21:44:56","endLine":457,"groupId":"101883","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheHolderChangeSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/c5d7105a01f827a276fbb1c4300127964299fc.src","preCode":"    public void testCacheHolderChangeSettings() throws IOException {\n        Set<String> contextNames = contexts.keySet();\n        String a = randomFrom(contextNames);\n        String aRate = \"77/5m\";\n        String b = randomValueOtherThan(a, () -> randomFrom(contextNames));\n        String bRate = \"78/6m\";\n        String c = randomValueOtherThanMany(s -> a.equals(s) || b.equals(s), () -> randomFrom(contextNames));\n        String compilationRate = \"77/5m\";\n        Tuple<Integer, TimeValue> generalRate = MAX_COMPILATION_RATE_FUNCTION.apply(compilationRate);\n\n        Settings s = Settings.builder()\n            .put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), compilationRate)\n            .build();\n\n        buildScriptService(s);\n\n        assertNotNull(scriptService.cacheHolder.get().general);\n        \r\n        scriptService.cacheHolder.get().set(c, scriptService.contextCache(s, contexts.get(c)));\n        assertNull(scriptService.cacheHolder.get().contextCache);\n        assertEquals(generalRate, scriptService.cacheHolder.get().general.rate);\n\n        scriptService.setCacheHolder(Settings.builder()\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(a).getKey(), aRate)\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(b).getKey(), bRate)\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(c).getKey(),\n                     ScriptService.UNLIMITED_COMPILATION_RATE_KEY)\n                .build()\n        );\n\n        assertNull(scriptService.cacheHolder.get().general);\n        assertNotNull(scriptService.cacheHolder.get().contextCache);\n        \r\n        assertNull(scriptService.cacheHolder.get().get(\n            randomValueOtherThanMany(contexts.keySet()::contains, () -> randomAlphaOfLength(8)))\n        );\n        assertEquals(contexts.keySet(), scriptService.cacheHolder.get().contextCache.keySet());\n\n        String d = randomValueOtherThanMany(Set.of(a, b, c)::contains, () -> randomFrom(contextNames));\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(aRate),\n                     scriptService.cacheHolder.get().contextCache.get(a).get().rate);\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(bRate),\n                     scriptService.cacheHolder.get().contextCache.get(b).get().rate);\n        assertEquals(ScriptCache.UNLIMITED_COMPILATION_RATE,\n                     scriptService.cacheHolder.get().contextCache.get(c).get().rate);\n\n        scriptService.cacheHolder.get().set(b, scriptService.contextCache(Settings.builder()\n                .put(SCRIPT_MAX_COMPILATIONS_RATE_SETTING.getConcreteSettingForNamespace(b).getKey(), aRate).build(),\n            contexts.get(b)));\n        assertEquals(ScriptService.MAX_COMPILATION_RATE_FUNCTION.apply(aRate),\n                     scriptService.cacheHolder.get().contextCache.get(b).get().rate);\n\n        scriptService.setCacheHolder(s);\n        assertNotNull(scriptService.cacheHolder.get().general);\n        assertNull(scriptService.cacheHolder.get().contextCache);\n        assertEquals(generalRate, scriptService.cacheHolder.get().general.rate);\n\n        scriptService.setCacheHolder(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), bRate).build()\n        );\n\n        assertNotNull(scriptService.cacheHolder.get().general);\n        assertNull(scriptService.cacheHolder.get().contextCache);\n        assertEquals(MAX_COMPILATION_RATE_FUNCTION.apply(bRate), scriptService.cacheHolder.get().general.rate);\n\n        CacheHolder holder = scriptService.cacheHolder.get();\n        scriptService.setCacheHolder(\n            Settings.builder().put(SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING.getKey(), bRate).build()\n        );\n        assertEquals(holder, scriptService.cacheHolder.get());\n\n        assertSettingDeprecationsAndWarnings(new Setting<?>[]{SCRIPT_GENERAL_MAX_COMPILATIONS_RATE_SETTING});\n    }\n","realPath":"server/src/test/java/org/elasticsearch/script/ScriptServiceTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"}],"commitId":"366ca378a8644d6654417988820c67f4feb714fe","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-10 21:44:56","modifiedFileCount":"565","status":"M","submitter":"Luca Cavanna"}]
