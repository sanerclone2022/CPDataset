[{"authorTime":"2019-08-27 02:21:42","codes":[{"authorDate":"2019-08-27 02:21:42","commitOrder":1,"curCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"_name\", null).field(fieldName);\n        testCase(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, card -> {\n            assertEquals(3.0, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","date":"2019-08-27 02:21:42","endLine":77,"groupId":"34307","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeFieldValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/53/a01d08bdcf28c40385e7026f6acbc254c390dd.src","preCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"_name\", null).field(fieldName);\n        testCase(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, card -> {\n            assertEquals(3.0, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2019-08-27 02:21:42","commitOrder":1,"curCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"_name\", null).field(fieldName);\n        testCase(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, count -> {\n            assertEquals(4.0, count.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(count));\n        }, fieldType);\n    }\n","date":"2019-08-27 02:21:42","endLine":186,"groupId":"34307","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeFieldValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e3/060d4c78ef0bc383d81a45777486e11575a8e1.src","preCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"_name\", null).field(fieldName);\n        testCase(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, count -> {\n            assertEquals(4.0, count.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(count));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"B"}],"commitId":"1a0dddf4ad24b3f2c751a1fe0e024fdbf8754f94","commitMessage":"@@@Range Field support for Histogram and Date Histogram aggregations(#45395)\n\n * Add support for a Range field ValuesSource.  including decode logic for range doc values and exposing RangeType as a first class enum\n * Provide hooks in ValuesSourceConfig for aggregations to control ValuesSource class selection on missing & script values\n * Branch aggregator creation in Histogram and DateHistogram based on ValuesSource class.  to enable specialization based on type.  This is similar to how Terms aggregator works.\n * Prioritize field type when available for selecting the ValuesSource class type to use for an aggregation\n\n","date":"2019-08-27 02:21:42","modifiedFileCount":"44","status":"B","submitter":"Mark Tozzi"},{"authorTime":"2020-03-27 03:01:07","codes":[{"authorDate":"2020-03-27 03:01:07","commitOrder":2,"curCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"_name\").field(fieldName);\n        testCase(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, card -> {\n            assertEquals(3.0, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","date":"2020-03-27 03:01:07","endLine":77,"groupId":"28745","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeFieldValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/48/315fec2c51f614bd38bf5e0d3f22da3e5910c1.src","preCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"_name\", null).field(fieldName);\n        testCase(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, card -> {\n            assertEquals(3.0, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-03-27 03:01:07","commitOrder":2,"curCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"_name\").field(fieldName);\n        testCase(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, count -> {\n            assertEquals(4.0, count.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(count));\n        }, fieldType);\n    }\n","date":"2020-03-27 03:01:07","endLine":237,"groupId":"28745","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeFieldValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/09/4a4b093cf343d0c55549e45682d43045a790c8.src","preCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"_name\", null).field(fieldName);\n        testCase(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, count -> {\n            assertEquals(4.0, count.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(count));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"}],"commitId":"a90c1de8745681356a6516f4f22a8c40f71f6b12","commitMessage":"@@@Add ValuesSource Registry and associated logic (#54281)\n\n* Remove ValuesSourceType argument to ValuesSourceAggregationBuilder (#48638)\n\n* ValuesSourceRegistry Prototype (#48758)\n\n* Remove generics from ValuesSource related classes (#49606)\n\n* fix percentile aggregation tests (#50712)\n\n* Basic thread safety for ValuesSourceRegistry (#50340)\n\n* Remove target value type from ValuesSourceAggregationBuilder (#49943)\n\n* Cleanup default values source type (#50992)\n\n* CoreValuesSourceType no longer implements Writable (#51276)\n\n* Remove genereics & hard coded ValuesSource references from Matrix Stats (#51131)\n\n* Put values source types on fields (#51503)\n\n* Remove VST Any (#51539)\n\n* Rewire terms agg to use new VS registry (#51182)\n\nAlso adds some basic AggTestCases for untested code\npaths (and boilerplate for future tests once the IT are\nconverted over)\n\n* Wire Cardinality aggregation to work with the ValuesSourceRegistry (#51337)\n\n* Wire Percentiles aggregator into new VS framework (#51639)\n\nThis required a bit of a refactor to percentiles itself.  Before. \nthe Builder would switch on the chosen algo to generate an\nalgo-specific factory.  This doesn't work (or at least.  would be\ndifficult) in the new VS framework.\n\nThis refactor consolidates both factories together and introduces\na PercentilesConfig object to act as a standardized way to pass\nalgo-specific parameters through the factory.  This object\nis then used when deciding which kind of aggregator to create\n\nNote: CoreValuesSourceType.HISTOGRAM still lives in core.  and will\nbe moved in a subsequent PR.\n\n* Remove generics and target value type from MultiVSAB (#51647)\n\n* fix checkstyle after merge (#52008)\n\n* Plumb ValuesSourceRegistry through to QuerySearchContext (#51710)\n\n* Convert RareTerms to new VS registry (#52166)\n\n* Wire up Value Count (#52225)\n\n* Wire up Max & Min aggregations (#52219)\n\n* ValuesSource refactoring: Wire up Sum aggregation (#52571)\n\n* ValuesSource refactoring: Wire up SigTerms aggregation (#52590)\n\n* Soft immutability for VSConfig (#52729)\n\n* Unmute testSupportedFieldTypes.  fix Percentiles/Ranks/Terms tests (#52734)\n\nAlso fixes Percentiles which was incorrectly specified to only accept\nnumeric.  but in fact also accepts Boolean and Date (because those are\nnumeric on master - thanks `testSupportedFieldTypes` for catching it!)\n\n* VS refactoring: Wire up stats aggregation (#52891)\n\n* ValuesSource refactoring: Wire up string_stats aggregation (#52875)\n\n* VS refactoring: Wire up median (MAD) aggregation (#52945)\n\n* fix valuesourcetype issue with constant_keyword field (#53041)\n\nthis commit implements `getValuesSourceType` for\nthe ConstantKeyword field type.\n\nmaster was merged into feature/extensible-values-source\nintroducing a new field type that was not implementing\n`getValuesSourceType`.\n\n* ValuesSource refactoring: Wire up Avg aggregation (#52752)\n\n* Wire PercentileRanks aggregator into new VS framework  (#51693)\n\n* Add a VSConfig resolver for aggregations not using the registry (#53038)\n\n* Vs refactor wire up ranges and date ranges (#52918)\n\n* Wire up geo_bounds aggregation to ValuesSourceRegistry (#53034)\n\nThis commit updates the geo_bounds aggregation to depend\non registering itself in the ValuesSourceRegistry\n\nrelates #42949.\n\n* VS refactoring: convert Boxplot to new registry (#53132)\n\n* Wire-up geotile_grid and geohash_grid to ValuesSourceRegistry (#53037)\n\nThis commit updates the geo*_grid aggregations to depend\non registering itself in the ValuesSourceRegistry\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Wire-up geo_centroid agg to ValuesSourceRegistry (#53040)\n\nThis commit updates the geo_centroid aggregation to depend\non registering itself in the ValuesSourceRegistry.\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Fix type tests for Missing aggregation (#53501)\n\n* ValuesSource Refactor: move histo VSType into XPack module (#53298)\n\n- Introduces a new API (`getBareAggregatorRegistrar()`) which allows plugins to register aggregations against existing agg definitions defined in Core.\n- This moves the histogram VSType over to XPack where it belongs. `getHistogramValues()` still remains as a Core concept\n- Moves the histo-specific bits over to xpack (e.g. the actual aggregator logic). This requires extra boilerplate since we need to create a new \"Analytics\" Percentile/Rank aggregators to deal with the histo field. Doubly-so since percentiles/ranks are extra boiler-plate'y... should be much lighter for other aggs\n\n* Wire up DateHistogram to the ValuesSourceRegistry (#53484)\n\n* Vs refactor parser cleanup (#53198)\n\nCo-authored-by: Zachary Tong <polyfractal@elastic.co>\nCo-authored-by: Zachary Tong <zach@elastic.co>\nCo-authored-by: Christos Soulios <1561376+csoulios@users.noreply.github.com>\nCo-authored-by: Tal Levy <JubBoy333@gmail.com>","date":"2020-03-27 03:01:07","modifiedFileCount":"214","status":"M","submitter":"Mark Tozzi"},{"authorTime":"2020-04-29 21:24:07","codes":[{"authorDate":"2020-04-29 21:24:07","commitOrder":3,"curCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"_name\").field(fieldName);\n        testAggregation(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, card -> {\n            assertEquals(3.0, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","date":"2020-04-29 21:24:07","endLine":75,"groupId":"46822","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeFieldValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f8/d302754197fe3810533ab2f1dff32e137026a6.src","preCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"_name\").field(fieldName);\n        testCase(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, card -> {\n            assertEquals(3.0, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2020-04-29 21:24:07","commitOrder":3,"curCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"_name\").field(fieldName);\n        testAggregation(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, count -> {\n            assertEquals(4.0, count.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(count));\n        }, fieldType);\n    }\n","date":"2020-04-29 21:24:07","endLine":268,"groupId":"46822","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeFieldValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/c8678317bf7e9b5f3f84cb74a73dbbedf2b62f.src","preCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"_name\").field(fieldName);\n        testCase(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, count -> {\n            assertEquals(4.0, count.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(count));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"}],"commitId":"ceb6e6227fb48cf6986f1124014df4cbc6f82a40","commitMessage":"@@@Modified searchAndReduce() to return empty agg when no docs exist  (#55826)\n\nModified AggregatorTestCase.searchAndReduce() method so that it returns an empty aggregation result when no documents have been inserted.\n\nAlso refactored several aggregation tests so they do not re-implement method AggregatorTestCase.testCase()\n\nFixes #55824","date":"2020-04-29 21:24:07","modifiedFileCount":"12","status":"M","submitter":"Christos Soulios"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.RangeFieldType(fieldName, rangeType);\n        final CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"_name\").field(fieldName);\n        testAggregation(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, card -> {\n            assertEquals(3.0, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","date":"2020-06-16 00:47:15","endLine":74,"groupId":"105378","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRangeFieldValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/8c9f868d773bfdcfa12b9694f72a3a9c15ee46.src","preCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final CardinalityAggregationBuilder aggregationBuilder = new CardinalityAggregationBuilder(\"_name\").field(fieldName);\n        testAggregation(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, card -> {\n            assertEquals(3.0, card.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(card));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.RangeFieldType(fieldName, rangeType);\n        final ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"_name\").field(fieldName);\n        testAggregation(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, count -> {\n            assertEquals(4.0, count.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(count));\n        }, fieldType);\n    }\n","date":"2020-06-16 00:47:15","endLine":270,"groupId":"105378","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRangeFieldValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/60/782469d8486129d453e17c937627d1f8bd6f20.src","preCode":"    public void testRangeFieldValues() throws IOException {\n        RangeType rangeType = RangeType.DOUBLE;\n        final RangeFieldMapper.Range range1 = new RangeFieldMapper.Range(rangeType, 1.0D, 5.0D, true, true);\n        final RangeFieldMapper.Range range2 = new RangeFieldMapper.Range(rangeType, 6.0D, 10.0D, true, true);\n        final String fieldName = \"rangeField\";\n        MappedFieldType fieldType = new RangeFieldMapper.Builder(fieldName, rangeType).fieldType();\n        fieldType.setName(fieldName);\n        final ValueCountAggregationBuilder aggregationBuilder = new ValueCountAggregationBuilder(\"_name\").field(fieldName);\n        testAggregation(aggregationBuilder,  new MatchAllDocsQuery(), iw -> {\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range1)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(singleton(range2)))));\n            iw.addDocument(singleton(new BinaryDocValuesField(fieldName, rangeType.encodeRanges(Set.of(range1, range2)))));\n        }, count -> {\n            assertEquals(4.0, count.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(count));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"}]
