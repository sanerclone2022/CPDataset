[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void doXContent(XContentBuilder builder, Params params) throws IOException {\n        builder.startObject(NAME);\n        builder.field(QUERY_FIELD.getPreferredName(), value);\n        builder.startArray(FIELDS_FIELD.getPreferredName());\n        for (Map.Entry<String, Float> fieldEntry : this.fieldsBoosts.entrySet()) {\n            builder.value(fieldEntry.getKey() + \"^\" + fieldEntry.getValue());\n        }\n        builder.endArray();\n        builder.field(TYPE_FIELD.getPreferredName(), type.toString().toLowerCase(Locale.ENGLISH));\n        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());\n        if (analyzer != null) {\n            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);\n        }\n        builder.field(SLOP_FIELD.getPreferredName(), slop);\n        if (fuzziness != null) {\n            fuzziness.toXContent(builder, params);\n        }\n        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);\n        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);\n        if (minimumShouldMatch != null) {\n            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);\n        }\n        if (fuzzyRewrite != null) {\n            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);\n        }\n        if (useDisMax != null) {\n            builder.field(USE_DIS_MAX_FIELD.getPreferredName(), useDisMax);\n        }\n        if (tieBreaker != null) {\n            builder.field(TIE_BREAKER_FIELD.getPreferredName(), tieBreaker);\n        }\n        if (lenient != null) {\n            builder.field(LENIENT_FIELD.getPreferredName(), lenient);\n        }\n        if (cutoffFrequency != null) {\n            builder.field(CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency);\n        }\n        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());\n        builder.field(GENERATE_SYNONYMS_PHRASE_QUERY.getPreferredName(), autoGenerateSynonymsPhraseQuery);\n        builder.field(FUZZY_TRANSPOSITIONS_FIELD.getPreferredName(), fuzzyTranspositions);\n        printBoostAndQueryName(builder);\n        builder.endObject();\n    }\n","date":"2018-04-26 03:22:53","endLine":614,"groupId":"29728","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doXContent","params":"(XContentBuilderbuilder@Paramsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/15/6e6cca48f28801764c1882070e49764dac6a49.src","preCode":"    public void doXContent(XContentBuilder builder, Params params) throws IOException {\n        builder.startObject(NAME);\n        builder.field(QUERY_FIELD.getPreferredName(), value);\n        builder.startArray(FIELDS_FIELD.getPreferredName());\n        for (Map.Entry<String, Float> fieldEntry : this.fieldsBoosts.entrySet()) {\n            builder.value(fieldEntry.getKey() + \"^\" + fieldEntry.getValue());\n        }\n        builder.endArray();\n        builder.field(TYPE_FIELD.getPreferredName(), type.toString().toLowerCase(Locale.ENGLISH));\n        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());\n        if (analyzer != null) {\n            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);\n        }\n        builder.field(SLOP_FIELD.getPreferredName(), slop);\n        if (fuzziness != null) {\n            fuzziness.toXContent(builder, params);\n        }\n        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);\n        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);\n        if (minimumShouldMatch != null) {\n            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);\n        }\n        if (fuzzyRewrite != null) {\n            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);\n        }\n        if (useDisMax != null) {\n            builder.field(USE_DIS_MAX_FIELD.getPreferredName(), useDisMax);\n        }\n        if (tieBreaker != null) {\n            builder.field(TIE_BREAKER_FIELD.getPreferredName(), tieBreaker);\n        }\n        if (lenient != null) {\n            builder.field(LENIENT_FIELD.getPreferredName(), lenient);\n        }\n        if (cutoffFrequency != null) {\n            builder.field(CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency);\n        }\n        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());\n        builder.field(GENERATE_SYNONYMS_PHRASE_QUERY.getPreferredName(), autoGenerateSynonymsPhraseQuery);\n        builder.field(FUZZY_TRANSPOSITIONS_FIELD.getPreferredName(), fuzzyTranspositions);\n        printBoostAndQueryName(builder);\n        builder.endObject();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void doXContent(XContentBuilder builder, Params params) throws IOException {\n        builder.startObject(NAME);\n        builder.startObject(fieldName);\n\n        builder.field(QUERY_FIELD.getPreferredName(), value);\n        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());\n        if (analyzer != null) {\n            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);\n        }\n        if (fuzziness != null) {\n            fuzziness.toXContent(builder, params);\n        }\n        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);\n        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);\n        if (minimumShouldMatch != null) {\n            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);\n        }\n        if (fuzzyRewrite != null) {\n            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);\n        }\n        \r\n        builder.field(FUZZY_TRANSPOSITIONS_FIELD.getPreferredName(), fuzzyTranspositions);\n        builder.field(LENIENT_FIELD.getPreferredName(), lenient);\n        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());\n        if (cutoffFrequency != null) {\n            builder.field(CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency);\n        }\n        builder.field(GENERATE_SYNONYMS_PHRASE_QUERY.getPreferredName(), autoGenerateSynonymsPhraseQuery);\n        printBoostAndQueryName(builder);\n        builder.endObject();\n        builder.endObject();\n    }\n","date":"2018-04-26 03:22:53","endLine":398,"groupId":"46879","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doXContent","params":"(XContentBuilderbuilder@Paramsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/74/ccf423ffbfb280f525037412cfd86c35bd62b5.src","preCode":"    public void doXContent(XContentBuilder builder, Params params) throws IOException {\n        builder.startObject(NAME);\n        builder.startObject(fieldName);\n\n        builder.field(QUERY_FIELD.getPreferredName(), value);\n        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());\n        if (analyzer != null) {\n            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);\n        }\n        if (fuzziness != null) {\n            fuzziness.toXContent(builder, params);\n        }\n        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);\n        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);\n        if (minimumShouldMatch != null) {\n            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);\n        }\n        if (fuzzyRewrite != null) {\n            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);\n        }\n        \r\n        builder.field(FUZZY_TRANSPOSITIONS_FIELD.getPreferredName(), fuzzyTranspositions);\n        builder.field(LENIENT_FIELD.getPreferredName(), lenient);\n        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());\n        if (cutoffFrequency != null) {\n            builder.field(CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency);\n        }\n        builder.field(GENERATE_SYNONYMS_PHRASE_QUERY.getPreferredName(), autoGenerateSynonymsPhraseQuery);\n        printBoostAndQueryName(builder);\n        builder.endObject();\n        builder.endObject();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":367,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-12-14 03:13:16","commitOrder":2,"curCode":"    public void doXContent(XContentBuilder builder, Params params) throws IOException {\n        builder.startObject(NAME);\n        builder.field(QUERY_FIELD.getPreferredName(), value);\n        builder.startArray(FIELDS_FIELD.getPreferredName());\n        for (Map.Entry<String, Float> fieldEntry : this.fieldsBoosts.entrySet()) {\n            builder.value(fieldEntry.getKey() + \"^\" + fieldEntry.getValue());\n        }\n        builder.endArray();\n        builder.field(TYPE_FIELD.getPreferredName(), type.toString().toLowerCase(Locale.ENGLISH));\n        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());\n        if (analyzer != null) {\n            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);\n        }\n        builder.field(SLOP_FIELD.getPreferredName(), slop);\n        if (fuzziness != null) {\n            fuzziness.toXContent(builder, params);\n        }\n        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);\n        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);\n        if (minimumShouldMatch != null) {\n            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);\n        }\n        if (fuzzyRewrite != null) {\n            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);\n        }\n        if (tieBreaker != null) {\n            builder.field(TIE_BREAKER_FIELD.getPreferredName(), tieBreaker);\n        }\n        if (lenient != null) {\n            builder.field(LENIENT_FIELD.getPreferredName(), lenient);\n        }\n        if (cutoffFrequency != null) {\n            builder.field(CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency);\n        }\n        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());\n        builder.field(GENERATE_SYNONYMS_PHRASE_QUERY.getPreferredName(), autoGenerateSynonymsPhraseQuery);\n        builder.field(FUZZY_TRANSPOSITIONS_FIELD.getPreferredName(), fuzzyTranspositions);\n        printBoostAndQueryName(builder);\n        builder.endObject();\n    }\n","date":"2018-12-14 03:13:16","endLine":598,"groupId":"29728","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doXContent","params":"(XContentBuilderbuilder@Paramsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d8/476d791d7ec43034847cef2a65ee1163346f41.src","preCode":"    public void doXContent(XContentBuilder builder, Params params) throws IOException {\n        builder.startObject(NAME);\n        builder.field(QUERY_FIELD.getPreferredName(), value);\n        builder.startArray(FIELDS_FIELD.getPreferredName());\n        for (Map.Entry<String, Float> fieldEntry : this.fieldsBoosts.entrySet()) {\n            builder.value(fieldEntry.getKey() + \"^\" + fieldEntry.getValue());\n        }\n        builder.endArray();\n        builder.field(TYPE_FIELD.getPreferredName(), type.toString().toLowerCase(Locale.ENGLISH));\n        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());\n        if (analyzer != null) {\n            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);\n        }\n        builder.field(SLOP_FIELD.getPreferredName(), slop);\n        if (fuzziness != null) {\n            fuzziness.toXContent(builder, params);\n        }\n        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);\n        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);\n        if (minimumShouldMatch != null) {\n            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);\n        }\n        if (fuzzyRewrite != null) {\n            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);\n        }\n        if (useDisMax != null) {\n            builder.field(USE_DIS_MAX_FIELD.getPreferredName(), useDisMax);\n        }\n        if (tieBreaker != null) {\n            builder.field(TIE_BREAKER_FIELD.getPreferredName(), tieBreaker);\n        }\n        if (lenient != null) {\n            builder.field(LENIENT_FIELD.getPreferredName(), lenient);\n        }\n        if (cutoffFrequency != null) {\n            builder.field(CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency);\n        }\n        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());\n        builder.field(GENERATE_SYNONYMS_PHRASE_QUERY.getPreferredName(), autoGenerateSynonymsPhraseQuery);\n        builder.field(FUZZY_TRANSPOSITIONS_FIELD.getPreferredName(), fuzzyTranspositions);\n        printBoostAndQueryName(builder);\n        builder.endObject();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void doXContent(XContentBuilder builder, Params params) throws IOException {\n        builder.startObject(NAME);\n        builder.startObject(fieldName);\n\n        builder.field(QUERY_FIELD.getPreferredName(), value);\n        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());\n        if (analyzer != null) {\n            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);\n        }\n        if (fuzziness != null) {\n            fuzziness.toXContent(builder, params);\n        }\n        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);\n        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);\n        if (minimumShouldMatch != null) {\n            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);\n        }\n        if (fuzzyRewrite != null) {\n            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);\n        }\n        \r\n        builder.field(FUZZY_TRANSPOSITIONS_FIELD.getPreferredName(), fuzzyTranspositions);\n        builder.field(LENIENT_FIELD.getPreferredName(), lenient);\n        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());\n        if (cutoffFrequency != null) {\n            builder.field(CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency);\n        }\n        builder.field(GENERATE_SYNONYMS_PHRASE_QUERY.getPreferredName(), autoGenerateSynonymsPhraseQuery);\n        printBoostAndQueryName(builder);\n        builder.endObject();\n        builder.endObject();\n    }\n","date":"2018-04-26 03:22:53","endLine":398,"groupId":"46879","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doXContent","params":"(XContentBuilderbuilder@Paramsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/74/ccf423ffbfb280f525037412cfd86c35bd62b5.src","preCode":"    public void doXContent(XContentBuilder builder, Params params) throws IOException {\n        builder.startObject(NAME);\n        builder.startObject(fieldName);\n\n        builder.field(QUERY_FIELD.getPreferredName(), value);\n        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());\n        if (analyzer != null) {\n            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);\n        }\n        if (fuzziness != null) {\n            fuzziness.toXContent(builder, params);\n        }\n        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);\n        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);\n        if (minimumShouldMatch != null) {\n            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);\n        }\n        if (fuzzyRewrite != null) {\n            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);\n        }\n        \r\n        builder.field(FUZZY_TRANSPOSITIONS_FIELD.getPreferredName(), fuzzyTranspositions);\n        builder.field(LENIENT_FIELD.getPreferredName(), lenient);\n        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());\n        if (cutoffFrequency != null) {\n            builder.field(CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency);\n        }\n        builder.field(GENERATE_SYNONYMS_PHRASE_QUERY.getPreferredName(), autoGenerateSynonymsPhraseQuery);\n        printBoostAndQueryName(builder);\n        builder.endObject();\n        builder.endObject();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":367,"status":"N"}],"commitId":"b33ff16d62e57843c407271d3aadeb6328567441","commitMessage":"@@@Remove deprecated `useDisMax` from MultiMatchQuery (#36488)\n\nThe getters and setters for useDisMax() have been deprecated since at least 6.0. \nalso there hasn't been any reference to the query parameter in the\ndocumentation. Removing it from the builder and tests and replacing it with\n`tieBreaker(1.0f)` where necessary.","date":"2018-12-14 03:13:16","modifiedFileCount":"6","status":"M","submitter":"Christoph B?scher"},{"authorTime":"2019-05-31 23:06:06","codes":[{"authorDate":"2019-05-31 23:06:06","commitOrder":3,"curCode":"    public void doXContent(XContentBuilder builder, Params params) throws IOException {\n        builder.startObject(NAME);\n        builder.field(QUERY_FIELD.getPreferredName(), value);\n        builder.startArray(FIELDS_FIELD.getPreferredName());\n        for (Map.Entry<String, Float> fieldEntry : this.fieldsBoosts.entrySet()) {\n            builder.value(fieldEntry.getKey() + \"^\" + fieldEntry.getValue());\n        }\n        builder.endArray();\n        builder.field(TYPE_FIELD.getPreferredName(), type.toString().toLowerCase(Locale.ENGLISH));\n        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());\n        if (analyzer != null) {\n            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);\n        }\n        builder.field(SLOP_FIELD.getPreferredName(), slop);\n        if (fuzziness != null) {\n            fuzziness.toXContent(builder, params);\n        }\n        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);\n        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);\n        if (minimumShouldMatch != null) {\n            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);\n        }\n        if (fuzzyRewrite != null) {\n            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);\n        }\n        if (tieBreaker != null) {\n            builder.field(TIE_BREAKER_FIELD.getPreferredName(), tieBreaker);\n        }\n        if (lenient != null) {\n            builder.field(LENIENT_FIELD.getPreferredName(), lenient);\n        }\n        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());\n        builder.field(GENERATE_SYNONYMS_PHRASE_QUERY.getPreferredName(), autoGenerateSynonymsPhraseQuery);\n        builder.field(FUZZY_TRANSPOSITIONS_FIELD.getPreferredName(), fuzzyTranspositions);\n        printBoostAndQueryName(builder);\n        builder.endObject();\n    }\n","date":"2019-05-31 23:06:06","endLine":565,"groupId":"107867","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doXContent","params":"(XContentBuilderbuilder@Paramsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/07/f7ae4b7939830c0ab99fbb8b9e94e672a46a08.src","preCode":"    public void doXContent(XContentBuilder builder, Params params) throws IOException {\n        builder.startObject(NAME);\n        builder.field(QUERY_FIELD.getPreferredName(), value);\n        builder.startArray(FIELDS_FIELD.getPreferredName());\n        for (Map.Entry<String, Float> fieldEntry : this.fieldsBoosts.entrySet()) {\n            builder.value(fieldEntry.getKey() + \"^\" + fieldEntry.getValue());\n        }\n        builder.endArray();\n        builder.field(TYPE_FIELD.getPreferredName(), type.toString().toLowerCase(Locale.ENGLISH));\n        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());\n        if (analyzer != null) {\n            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);\n        }\n        builder.field(SLOP_FIELD.getPreferredName(), slop);\n        if (fuzziness != null) {\n            fuzziness.toXContent(builder, params);\n        }\n        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);\n        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);\n        if (minimumShouldMatch != null) {\n            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);\n        }\n        if (fuzzyRewrite != null) {\n            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);\n        }\n        if (tieBreaker != null) {\n            builder.field(TIE_BREAKER_FIELD.getPreferredName(), tieBreaker);\n        }\n        if (lenient != null) {\n            builder.field(LENIENT_FIELD.getPreferredName(), lenient);\n        }\n        if (cutoffFrequency != null) {\n            builder.field(CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency);\n        }\n        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());\n        builder.field(GENERATE_SYNONYMS_PHRASE_QUERY.getPreferredName(), autoGenerateSynonymsPhraseQuery);\n        builder.field(FUZZY_TRANSPOSITIONS_FIELD.getPreferredName(), fuzzyTranspositions);\n        printBoostAndQueryName(builder);\n        builder.endObject();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MultiMatchQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":529,"status":"M"},{"authorDate":"2019-05-31 23:06:06","commitOrder":3,"curCode":"    public void doXContent(XContentBuilder builder, Params params) throws IOException {\n        builder.startObject(NAME);\n        builder.startObject(fieldName);\n\n        builder.field(QUERY_FIELD.getPreferredName(), value);\n        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());\n        if (analyzer != null) {\n            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);\n        }\n        if (fuzziness != null) {\n            fuzziness.toXContent(builder, params);\n        }\n        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);\n        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);\n        if (minimumShouldMatch != null) {\n            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);\n        }\n        if (fuzzyRewrite != null) {\n            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);\n        }\n        \r\n        builder.field(FUZZY_TRANSPOSITIONS_FIELD.getPreferredName(), fuzzyTranspositions);\n        builder.field(LENIENT_FIELD.getPreferredName(), lenient);\n        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());\n        builder.field(GENERATE_SYNONYMS_PHRASE_QUERY.getPreferredName(), autoGenerateSynonymsPhraseQuery);\n        printBoostAndQueryName(builder);\n        builder.endObject();\n        builder.endObject();\n    }\n","date":"2019-05-31 23:06:06","endLine":359,"groupId":"107867","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doXContent","params":"(XContentBuilderbuilder@Paramsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8d/5b6e71927e22f41344df4b4085889d1381cba1.src","preCode":"    public void doXContent(XContentBuilder builder, Params params) throws IOException {\n        builder.startObject(NAME);\n        builder.startObject(fieldName);\n\n        builder.field(QUERY_FIELD.getPreferredName(), value);\n        builder.field(OPERATOR_FIELD.getPreferredName(), operator.toString());\n        if (analyzer != null) {\n            builder.field(ANALYZER_FIELD.getPreferredName(), analyzer);\n        }\n        if (fuzziness != null) {\n            fuzziness.toXContent(builder, params);\n        }\n        builder.field(PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength);\n        builder.field(MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions);\n        if (minimumShouldMatch != null) {\n            builder.field(MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch);\n        }\n        if (fuzzyRewrite != null) {\n            builder.field(FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite);\n        }\n        \r\n        builder.field(FUZZY_TRANSPOSITIONS_FIELD.getPreferredName(), fuzzyTranspositions);\n        builder.field(LENIENT_FIELD.getPreferredName(), lenient);\n        builder.field(ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString());\n        if (cutoffFrequency != null) {\n            builder.field(CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency);\n        }\n        builder.field(GENERATE_SYNONYMS_PHRASE_QUERY.getPreferredName(), autoGenerateSynonymsPhraseQuery);\n        printBoostAndQueryName(builder);\n        builder.endObject();\n        builder.endObject();\n    }\n","realPath":"server/src/main/java/org/elasticsearch/index/query/MatchQueryBuilder.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"}],"commitId":"6dd4d2b7a6bd17232c0a93a5a48a4e23327dea81","commitMessage":"@@@ Remove CommonTermsQuery and cutoff_frequency param  (#42654)\n\nRemove `common` query and `cutoff_frequency` parameter of\n`match` and `multi_match` queries. Both have already been\ndeprecated for the next 7.x version.\n\nCloses: #37096\n","date":"2019-05-31 23:06:06","modifiedFileCount":"24","status":"M","submitter":"Marios Trivyzas"}]
