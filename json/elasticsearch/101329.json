[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 52, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(587);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(538);\n        match(CAST);\n        setState(539);\n        match(T__0);\n        setState(540);\n        expression();\n        setState(541);\n        match(AS);\n        setState(542);\n        dataType();\n        setState(543);\n        match(T__1);\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(545);\n        match(EXTRACT);\n        setState(546);\n        match(T__0);\n        setState(547);\n        ((ExtractContext)_localctx).field = identifier();\n        setState(548);\n        match(FROM);\n        setState(549);\n        valueExpression(0);\n        setState(550);\n        match(T__1);\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(552);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(553);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(557);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(554);\n          qualifiedName();\n          setState(555);\n          match(DOT);\n          }\n        }\n\n        setState(559);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionCallContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(560);\n        identifier();\n        setState(561);\n        match(T__0);\n        setState(573);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(563);\n          _la = _input.LA(1);\n          if (_la==ALL || _la==DISTINCT) {\n            {\n            setState(562);\n            setQuantifier();\n            }\n          }\n\n          setState(565);\n          expression();\n          setState(570);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(566);\n            match(T__2);\n            setState(567);\n            expression();\n            }\n            }\n            setState(572);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(575);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(577);\n        match(T__0);\n        setState(578);\n        query();\n        setState(579);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new ColumnReferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(581);\n        identifier();\n        }\n        break;\n      case 9:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(582);\n        qualifiedName();\n        }\n        break;\n      case 10:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 10);\n        {\n        setState(583);\n        match(T__0);\n        setState(584);\n        expression();\n        setState(585);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-04-26 03:22:53","endLine":3953,"groupId":"36498","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e9/d7ff2639954dabb3b71908130b41d6a2f70236.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 52, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(587);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(538);\n        match(CAST);\n        setState(539);\n        match(T__0);\n        setState(540);\n        expression();\n        setState(541);\n        match(AS);\n        setState(542);\n        dataType();\n        setState(543);\n        match(T__1);\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(545);\n        match(EXTRACT);\n        setState(546);\n        match(T__0);\n        setState(547);\n        ((ExtractContext)_localctx).field = identifier();\n        setState(548);\n        match(FROM);\n        setState(549);\n        valueExpression(0);\n        setState(550);\n        match(T__1);\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(552);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(553);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(557);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(554);\n          qualifiedName();\n          setState(555);\n          match(DOT);\n          }\n        }\n\n        setState(559);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionCallContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(560);\n        identifier();\n        setState(561);\n        match(T__0);\n        setState(573);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(563);\n          _la = _input.LA(1);\n          if (_la==ALL || _la==DISTINCT) {\n            {\n            setState(562);\n            setQuantifier();\n            }\n          }\n\n          setState(565);\n          expression();\n          setState(570);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(566);\n            match(T__2);\n            setState(567);\n            expression();\n            }\n            }\n            setState(572);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(575);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(577);\n        match(T__0);\n        setState(578);\n        query();\n        setState(579);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new ColumnReferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(581);\n        identifier();\n        }\n        break;\n      case 9:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(582);\n        qualifiedName();\n        }\n        break;\n      case 10:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 10);\n        {\n        setState(583);\n        match(T__0);\n        setState(584);\n        expression();\n        setState(585);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":3777,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(649);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-04-26 03:22:53","endLine":4944,"groupId":"47134","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e9/d7ff2639954dabb3b71908130b41d6a2f70236.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(649);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4919,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-07-12 15:57:39","codes":[{"authorDate":"2018-07-12 15:57:39","commitOrder":2,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 56, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(588);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(567);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(568);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(569);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(570);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(574);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(571);\n          qualifiedName();\n          setState(572);\n          match(DOT);\n          }\n        }\n\n        setState(576);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(577);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(578);\n        match(T__0);\n        setState(579);\n        query();\n        setState(580);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new ColumnReferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(582);\n        identifier();\n        }\n        break;\n      case 9:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(583);\n        qualifiedName();\n        }\n        break;\n      case 10:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 10);\n        {\n        setState(584);\n        match(T__0);\n        setState(585);\n        expression();\n        setState(586);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-07-12 15:57:39","endLine":4017,"groupId":"36498","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/a1b062feebf630d4b59bd1ded5dec79c7798c1.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 52, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(587);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(538);\n        match(CAST);\n        setState(539);\n        match(T__0);\n        setState(540);\n        expression();\n        setState(541);\n        match(AS);\n        setState(542);\n        dataType();\n        setState(543);\n        match(T__1);\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(545);\n        match(EXTRACT);\n        setState(546);\n        match(T__0);\n        setState(547);\n        ((ExtractContext)_localctx).field = identifier();\n        setState(548);\n        match(FROM);\n        setState(549);\n        valueExpression(0);\n        setState(550);\n        match(T__1);\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(552);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(553);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(557);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(554);\n          qualifiedName();\n          setState(555);\n          match(DOT);\n          }\n        }\n\n        setState(559);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionCallContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(560);\n        identifier();\n        setState(561);\n        match(T__0);\n        setState(573);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ALL) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << DISTINCT) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << MATCH) | (1L << NOT) | (1L << NULL) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TRUE - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (ASTERISK - 64)) | (1L << (PARAM - 64)) | (1L << (STRING - 64)) | (1L << (INTEGER_VALUE - 64)) | (1L << (DECIMAL_VALUE - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(563);\n          _la = _input.LA(1);\n          if (_la==ALL || _la==DISTINCT) {\n            {\n            setState(562);\n            setQuantifier();\n            }\n          }\n\n          setState(565);\n          expression();\n          setState(570);\n          _errHandler.sync(this);\n          _la = _input.LA(1);\n          while (_la==T__2) {\n            {\n            {\n            setState(566);\n            match(T__2);\n            setState(567);\n            expression();\n            }\n            }\n            setState(572);\n            _errHandler.sync(this);\n            _la = _input.LA(1);\n          }\n          }\n        }\n\n        setState(575);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(577);\n        match(T__0);\n        setState(578);\n        query();\n        setState(579);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new ColumnReferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(581);\n        identifier();\n        }\n        break;\n      case 9:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(582);\n        qualifiedName();\n        }\n        break;\n      case 10:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 10);\n        {\n        setState(583);\n        match(T__0);\n        setState(584);\n        expression();\n        setState(585);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":3899,"status":"M"},{"authorDate":"2018-07-12 15:57:39","commitOrder":2,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 92, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(718);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-07-12 15:57:39","endLine":5570,"groupId":"47134","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/a1b062feebf630d4b59bd1ded5dec79c7798c1.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 76, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(649);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5545,"status":"M"}],"commitId":"4192f387b41fd02114bae3dba743f701e8bf61e2","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-12 15:57:39","modifiedFileCount":"60","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-07-18 18:41:23","codes":[{"authorDate":"2018-07-18 18:41:23","commitOrder":3,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 56, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(590);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(569);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(570);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(571);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(572);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(576);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(573);\n          qualifiedName();\n          setState(574);\n          match(DOT);\n          }\n        }\n\n        setState(578);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(579);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(580);\n        match(T__0);\n        setState(581);\n        query();\n        setState(582);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new ColumnReferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(584);\n        identifier();\n        }\n        break;\n      case 9:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(585);\n        qualifiedName();\n        }\n        break;\n      case 10:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 10);\n        {\n        setState(586);\n        match(T__0);\n        setState(587);\n        expression();\n        setState(588);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-07-18 18:41:23","endLine":4020,"groupId":"36498","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/1758dadbc3a2ce81a4fd8df65e14e6c51442db.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 56, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(588);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(567);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(568);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(569);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(570);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(574);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(571);\n          qualifiedName();\n          setState(572);\n          match(DOT);\n          }\n        }\n\n        setState(576);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(577);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(578);\n        match(T__0);\n        setState(579);\n        query();\n        setState(580);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new ColumnReferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(582);\n        identifier();\n        }\n        break;\n      case 9:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(583);\n        qualifiedName();\n        }\n        break;\n      case 10:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 10);\n        {\n        setState(584);\n        match(T__0);\n        setState(585);\n        expression();\n        setState(586);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":3902,"status":"M"},{"authorDate":"2018-07-18 18:41:23","commitOrder":3,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 94, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(725);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-07-18 18:41:23","endLine":5670,"groupId":"47134","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c9/1758dadbc3a2ce81a4fd8df65e14e6c51442db.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 92, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(718);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5645,"status":"M"}],"commitId":"6c77449a87764147099b1e35c0ec191de3202d7a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-18 18:41:23","modifiedFileCount":"222","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-05 16:48:48","codes":[{"authorDate":"2018-09-05 16:48:48","commitOrder":4,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 58, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(586);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(565);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(566);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(567);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(568);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(572);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(569);\n          qualifiedName();\n          setState(570);\n          match(DOT);\n          }\n        }\n\n        setState(574);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(575);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(576);\n        match(T__0);\n        setState(577);\n        query();\n        setState(578);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new ColumnReferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(580);\n        identifier();\n        }\n        break;\n      case 9:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(581);\n        qualifiedName();\n        }\n        break;\n      case 10:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 10);\n        {\n        setState(582);\n        match(T__0);\n        setState(583);\n        expression();\n        setState(584);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-05 16:48:48","endLine":4196,"groupId":"36498","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/f5b0cb09d760d20697333cd3f1abbb49f48511.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 56, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(590);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(569);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(570);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(571);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(572);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(576);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(573);\n          qualifiedName();\n          setState(574);\n          match(DOT);\n          }\n        }\n\n        setState(578);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(579);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(580);\n        match(T__0);\n        setState(581);\n        query();\n        setState(582);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new ColumnReferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(584);\n        identifier();\n        }\n        break;\n      case 9:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(585);\n        qualifiedName();\n        }\n        break;\n      case 10:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 10);\n        {\n        setState(586);\n        match(T__0);\n        setState(587);\n        expression();\n        setState(588);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4078,"status":"M"},{"authorDate":"2018-09-05 16:48:48","commitOrder":4,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 96, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(721);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-05 16:48:48","endLine":5846,"groupId":"47134","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/f5b0cb09d760d20697333cd3f1abbb49f48511.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 94, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(725);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5821,"status":"M"}],"commitId":"f00a28a909be71e17f0d1bc4c4a6ee15c5fdd0cb","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-05 16:48:48","modifiedFileCount":"122","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-19 03:57:41","codes":[{"authorDate":"2018-09-05 16:48:48","commitOrder":5,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 58, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(586);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(565);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(566);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(567);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(568);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(572);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(569);\n          qualifiedName();\n          setState(570);\n          match(DOT);\n          }\n        }\n\n        setState(574);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(575);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(576);\n        match(T__0);\n        setState(577);\n        query();\n        setState(578);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new ColumnReferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(580);\n        identifier();\n        }\n        break;\n      case 9:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(581);\n        qualifiedName();\n        }\n        break;\n      case 10:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 10);\n        {\n        setState(582);\n        match(T__0);\n        setState(583);\n        expression();\n        setState(584);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-05 16:48:48","endLine":4196,"groupId":"36498","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/f5b0cb09d760d20697333cd3f1abbb49f48511.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 58, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(586);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(565);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(566);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(567);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(568);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(572);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(569);\n          qualifiedName();\n          setState(570);\n          match(DOT);\n          }\n        }\n\n        setState(574);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(575);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(576);\n        match(T__0);\n        setState(577);\n        query();\n        setState(578);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new ColumnReferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(580);\n        identifier();\n        }\n        break;\n      case 9:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(581);\n        qualifiedName();\n        }\n        break;\n      case 10:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 10);\n        {\n        setState(582);\n        match(T__0);\n        setState(583);\n        expression();\n        setState(584);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4078,"status":"N"},{"authorDate":"2018-09-19 03:57:41","commitOrder":5,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 96, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(727);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-19 03:57:41","endLine":5832,"groupId":"47134","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/4eacd402bf7f40f9ccc47a158e50f5ca28906f.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 96, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(721);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5807,"status":"M"}],"commitId":"c87cff22b4b41925053cf05e0f0dd171959e3d7e","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-19 03:57:41","modifiedFileCount":"73","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-09-19 23:43:26","codes":[{"authorDate":"2018-09-19 23:43:26","commitOrder":6,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(577);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(556);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(557);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(558);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(559);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(563);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(560);\n          qualifiedName();\n          setState(561);\n          match(DOT);\n          }\n        }\n\n        setState(565);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(566);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(567);\n        match(T__0);\n        setState(568);\n        query();\n        setState(569);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new ColumnReferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(571);\n        identifier();\n        }\n        break;\n      case 9:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(572);\n        qualifiedName();\n        }\n        break;\n      case 10:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 10);\n        {\n        setState(573);\n        match(T__0);\n        setState(574);\n        expression();\n        setState(575);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-19 23:43:26","endLine":4167,"groupId":"36498","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/24/6de0cf1a9fe535e4d80fdb9250c32e969c7db3.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 58, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(586);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(565);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(566);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(567);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(568);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(572);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(569);\n          qualifiedName();\n          setState(570);\n          match(DOT);\n          }\n        }\n\n        setState(574);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(575);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(576);\n        match(T__0);\n        setState(577);\n        query();\n        setState(578);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new ColumnReferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(580);\n        identifier();\n        }\n        break;\n      case 9:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(581);\n        qualifiedName();\n        }\n        break;\n      case 10:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 10);\n        {\n        setState(582);\n        match(T__0);\n        setState(583);\n        expression();\n        setState(584);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4049,"status":"M"},{"authorDate":"2018-09-19 23:43:26","commitOrder":6,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(718);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-19 23:43:26","endLine":5851,"groupId":"47134","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/24/6de0cf1a9fe535e4d80fdb9250c32e969c7db3.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 96, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(727);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5826,"status":"M"}],"commitId":"81e9150c7a60ca6efac26c57cd5aaa60b04641a4","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-19 23:43:26","modifiedFileCount":"75","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-09-25 00:33:51","codes":[{"authorDate":"2018-09-25 00:33:51","commitOrder":7,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(575);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(556);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(557);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(558);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(562);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(559);\n          qualifiedName();\n          setState(560);\n          match(DOT);\n          }\n        }\n\n        setState(564);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(565);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(566);\n        match(T__0);\n        setState(567);\n        query();\n        setState(568);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(570);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(571);\n        match(T__0);\n        setState(572);\n        expression();\n        setState(573);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-25 00:33:51","endLine":4132,"groupId":"47618","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/22/1344588212b883233fdfd29dd4153e31d1fd12.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(577);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(556);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(557);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(558);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(559);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(563);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(560);\n          qualifiedName();\n          setState(561);\n          match(DOT);\n          }\n        }\n\n        setState(565);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(566);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(567);\n        match(T__0);\n        setState(568);\n        query();\n        setState(569);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new ColumnReferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(571);\n        identifier();\n        }\n        break;\n      case 9:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(572);\n        qualifiedName();\n        }\n        break;\n      case 10:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 10);\n        {\n        setState(573);\n        match(T__0);\n        setState(574);\n        expression();\n        setState(575);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4030,"status":"M"},{"authorDate":"2018-09-25 00:33:51","commitOrder":7,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(716);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-25 00:33:51","endLine":5816,"groupId":"47134","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/22/1344588212b883233fdfd29dd4153e31d1fd12.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(718);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5791,"status":"M"}],"commitId":"243e863f6e862074b564f909e90a8fd83ae8ad01","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-25 00:33:51","modifiedFileCount":"253","status":"M","submitter":"Lee Hinman"},{"authorTime":"2018-10-03 03:43:46","codes":[{"authorDate":"2018-09-25 00:33:51","commitOrder":8,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(575);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(556);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(557);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(558);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(562);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(559);\n          qualifiedName();\n          setState(560);\n          match(DOT);\n          }\n        }\n\n        setState(564);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(565);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(566);\n        match(T__0);\n        setState(567);\n        query();\n        setState(568);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(570);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(571);\n        match(T__0);\n        setState(572);\n        expression();\n        setState(573);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-09-25 00:33:51","endLine":4132,"groupId":"47618","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/22/1344588212b883233fdfd29dd4153e31d1fd12.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(575);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(556);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(557);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(558);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(562);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(559);\n          qualifiedName();\n          setState(560);\n          match(DOT);\n          }\n        }\n\n        setState(564);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(565);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(566);\n        match(T__0);\n        setState(567);\n        query();\n        setState(568);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(570);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(571);\n        match(T__0);\n        setState(572);\n        expression();\n        setState(573);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4030,"status":"N"},{"authorDate":"2018-10-03 03:43:46","commitOrder":8,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(710);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-10-03 03:43:46","endLine":5830,"groupId":"47134","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9e/7848e8e6ef26a891528f50d182416e1eacabc1.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(716);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5805,"status":"M"}],"commitId":"fb907706ecea4c8894075295f0aa148efe01adbf","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-10-03 03:43:46","modifiedFileCount":"70","status":"M","submitter":"Gordon Brown"},{"authorTime":"2018-10-23 04:09:37","codes":[{"authorDate":"2018-10-23 04:09:37","commitOrder":9,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(579);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(560);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(561);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(562);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(566);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(563);\n          qualifiedName();\n          setState(564);\n          match(DOT);\n          }\n        }\n\n        setState(568);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(569);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(570);\n        match(T__0);\n        setState(571);\n        query();\n        setState(572);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(574);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(575);\n        match(T__0);\n        setState(576);\n        expression();\n        setState(577);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-10-23 04:09:37","endLine":4202,"groupId":"47618","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/1cd058c08a66d5196a56ed82ba152caf75ecfc.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(575);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(556);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(557);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(558);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(562);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW) | (1L << SYS) | (1L << TABLES))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(559);\n          qualifiedName();\n          setState(560);\n          match(DOT);\n          }\n        }\n\n        setState(564);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(565);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(566);\n        match(T__0);\n        setState(567);\n        query();\n        setState(568);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(570);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(571);\n        match(T__0);\n        setState(572);\n        expression();\n        setState(573);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4100,"status":"M"},{"authorDate":"2018-10-23 04:09:37","commitOrder":9,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(714);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-10-23 04:09:37","endLine":5852,"groupId":"47618","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/1cd058c08a66d5196a56ed82ba152caf75ecfc.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(710);\n      _la = _input.LA(1);\n      if ( !(((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (ANALYZE - 6)) | (1L << (ANALYZED - 6)) | (1L << (CATALOGS - 6)) | (1L << (COLUMNS - 6)) | (1L << (DEBUG - 6)) | (1L << (EXECUTABLE - 6)) | (1L << (EXPLAIN - 6)) | (1L << (FORMAT - 6)) | (1L << (FUNCTIONS - 6)) | (1L << (GRAPHVIZ - 6)) | (1L << (MAPPED - 6)) | (1L << (OPTIMIZED - 6)) | (1L << (PARSED - 6)) | (1L << (PHYSICAL - 6)) | (1L << (PLAN - 6)) | (1L << (RLIKE - 6)) | (1L << (QUERY - 6)) | (1L << (SCHEMAS - 6)) | (1L << (SHOW - 6)) | (1L << (SYS - 6)) | (1L << (TABLES - 6)) | (1L << (TEXT - 6)) | (1L << (TYPE - 6)) | (1L << (TYPES - 6)) | (1L << (VERIFY - 6)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5827,"status":"M"}],"commitId":"67bfdb16ad0a1039686d3a74b1705c613e96e231","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-10-23 04:09:37","modifiedFileCount":"190","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-10-24 00:43:46","codes":[{"authorDate":"2018-10-24 00:43:46","commitOrder":10,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(581);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(562);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(563);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(564);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(568);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(565);\n          qualifiedName();\n          setState(566);\n          match(DOT);\n          }\n        }\n\n        setState(570);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(571);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(572);\n        match(T__0);\n        setState(573);\n        query();\n        setState(574);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(576);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(577);\n        match(T__0);\n        setState(578);\n        expression();\n        setState(579);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-10-24 00:43:46","endLine":4204,"groupId":"47618","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/25bd18dc90f87f9d9ba5f32b511de90a1d6f35.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(579);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(560);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(561);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(562);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(566);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(563);\n          qualifiedName();\n          setState(564);\n          match(DOT);\n          }\n        }\n\n        setState(568);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(569);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(570);\n        match(T__0);\n        setState(571);\n        query();\n        setState(572);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(574);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(575);\n        match(T__0);\n        setState(576);\n        expression();\n        setState(577);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4102,"status":"M"},{"authorDate":"2018-10-24 00:43:46","commitOrder":10,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 100, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(728);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-10-24 00:43:46","endLine":5932,"groupId":"47618","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4e/25bd18dc90f87f9d9ba5f32b511de90a1d6f35.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 98, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(714);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS) | (1L << SHOW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":5907,"status":"M"}],"commitId":"62ac2fa5ec57a4701323d1c2a0077e2179a7d422","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-10-24 00:43:46","modifiedFileCount":"121","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-11-21 21:45:59","codes":[{"authorDate":"2018-11-21 21:45:59","commitOrder":11,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(587);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(568);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(569);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(570);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(574);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n          {\n          setState(571);\n          qualifiedName();\n          setState(572);\n          match(DOT);\n          }\n        }\n\n        setState(576);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(577);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(578);\n        match(T__0);\n        setState(579);\n        query();\n        setState(580);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(582);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(583);\n        match(T__0);\n        setState(584);\n        expression();\n        setState(585);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-21 21:45:59","endLine":4267,"groupId":"69837","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/baeceb633f830ab04d05d594b0362242263de3.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(581);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(562);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(563);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(564);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(568);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(565);\n          qualifiedName();\n          setState(566);\n          match(DOT);\n          }\n        }\n\n        setState(570);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(571);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(572);\n        match(T__0);\n        setState(573);\n        query();\n        setState(574);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(576);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(577);\n        match(T__0);\n        setState(578);\n        expression();\n        setState(579);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4165,"status":"M"},{"authorDate":"2018-11-21 21:45:59","commitOrder":11,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(754);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-21 21:45:59","endLine":6305,"groupId":"69837","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/baeceb633f830ab04d05d594b0362242263de3.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 100, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(728);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << MAPPED) | (1L << OPTIMIZED) | (1L << PARSED) | (1L << PHYSICAL) | (1L << PLAN) | (1L << RLIKE) | (1L << QUERY) | (1L << SCHEMAS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6280,"status":"M"}],"commitId":"f0a3d326022b92ead0a2b2bf9c5155a77d8ad8c8","commitMessage":"@@@SQL: Introduce INTERVAL support (#35521)\n\nIntroduce INTERVAL as a DataType\nAdd INTERVAL to the grammar which supports the standard SQL declaration\n (without precision):\n > INTERVAL '1 23:45:01.123456789' DAY TO SECOND\n but also number for single unit intervals:\n > INTERVAL 1 YEAR\n as well as the plurals of the units:\n > INTERVAL 2 YEARS\nInterval are internally supported as just another Literal being backed\n by java.time.Period and java.time.Duration\nMove JDBC away from JDBCType enum to SQLType interface\nRefactor DataType by moving it into server core and adding dedicated (and\n much simpler) JDBC driver type\nImprove internal JDBC conversion by normalizing on the DataType\nRename JDBC columnInfo to JdbcColumnInfo to differentiate between it and\n the SQL ColumnInfo\n\nFix #29990","date":"2018-11-21 21:45:59","modifiedFileCount":"74","status":"M","submitter":"Costin Leau"},{"authorTime":"2018-11-23 23:14:52","codes":[{"authorDate":"2018-11-23 23:14:52","commitOrder":12,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(585);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(566);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(567);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(568);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(572);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n          {\n          setState(569);\n          qualifiedName();\n          setState(570);\n          match(DOT);\n          }\n        }\n\n        setState(574);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(575);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(576);\n        match(T__0);\n        setState(577);\n        query();\n        setState(578);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(580);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(581);\n        match(T__0);\n        setState(582);\n        expression();\n        setState(583);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-23 23:14:52","endLine":4266,"groupId":"69837","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/d33d9ca80301231b12903937c0cc10dea96c75.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(587);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(568);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(569);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(570);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(574);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n          {\n          setState(571);\n          qualifiedName();\n          setState(572);\n          match(DOT);\n          }\n        }\n\n        setState(576);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(577);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(578);\n        match(T__0);\n        setState(579);\n        query();\n        setState(580);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(582);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(583);\n        match(T__0);\n        setState(584);\n        expression();\n        setState(585);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4164,"status":"M"},{"authorDate":"2018-11-23 23:14:52","commitOrder":12,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 104, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(748);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-23 23:14:52","endLine":6241,"groupId":"69837","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/d33d9ca80301231b12903937c0cc10dea96c75.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(754);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6216,"status":"M"}],"commitId":"e22a83554eb0bba81e3f7e1b3f353a243fac0c7b","commitMessage":"@@@SQL: Polish grammar for intervals (#35853)\n\n","date":"2018-11-23 23:14:52","modifiedFileCount":"6","status":"M","submitter":"Costin Leau"},{"authorTime":"2018-11-26 17:26:24","codes":[{"authorDate":"2018-11-26 17:26:24","commitOrder":13,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(591);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(572);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(573);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(574);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(578);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n          {\n          setState(575);\n          qualifiedName();\n          setState(576);\n          match(DOT);\n          }\n        }\n\n        setState(580);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(581);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(582);\n        match(T__0);\n        setState(583);\n        query();\n        setState(584);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(586);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(587);\n        match(T__0);\n        setState(588);\n        expression();\n        setState(589);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-26 17:26:24","endLine":4295,"groupId":"69837","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/35baffc7bc4a4f227b022f7316a182f23afc47.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(585);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(566);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(567);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(568);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(572);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n          {\n          setState(569);\n          qualifiedName();\n          setState(570);\n          match(DOT);\n          }\n        }\n\n        setState(574);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(575);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(576);\n        match(T__0);\n        setState(577);\n        query();\n        setState(578);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(580);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(581);\n        match(T__0);\n        setState(582);\n        expression();\n        setState(583);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4193,"status":"M"},{"authorDate":"2018-11-26 17:26:24","commitOrder":13,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 104, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(754);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-11-26 17:26:24","endLine":6270,"groupId":"69837","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/16/35baffc7bc4a4f227b022f7316a182f23afc47.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 104, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(748);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6245,"status":"M"}],"commitId":"971299baf4b258dc19c45354417a140a6e9f7586","commitMessage":"@@@SQL: Add filtering to SYS TYPES (#35852)\n\nFix #35342","date":"2018-11-26 17:26:24","modifiedFileCount":"5","status":"M","submitter":"Costin Leau"},{"authorTime":"2018-12-14 21:42:36","codes":[{"authorDate":"2018-12-14 21:42:36","commitOrder":14,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(594);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(574);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(575);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(576);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(577);\n        constant();\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(581);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(578);\n          qualifiedName();\n          setState(579);\n          match(DOT);\n          }\n        }\n\n        setState(583);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(584);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(585);\n        match(T__0);\n        setState(586);\n        query();\n        setState(587);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(589);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(590);\n        match(T__0);\n        setState(591);\n        expression();\n        setState(592);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-12-14 21:42:36","endLine":4330,"groupId":"69837","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/56/996e4c4c2e4590c7368c0669388649d3700d05.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(591);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(572);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(573);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(574);\n        constant();\n        }\n        break;\n      case 4:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(578);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)) | (1L << (QUOTED_IDENTIFIER - 65)) | (1L << (BACKQUOTED_IDENTIFIER - 65)))) != 0)) {\n          {\n          setState(575);\n          qualifiedName();\n          setState(576);\n          match(DOT);\n          }\n        }\n\n        setState(580);\n        match(ASTERISK);\n        }\n        break;\n      case 5:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(581);\n        functionExpression();\n        }\n        break;\n      case 6:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(582);\n        match(T__0);\n        setState(583);\n        query();\n        setState(584);\n        match(T__1);\n        }\n        break;\n      case 7:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(586);\n        qualifiedName();\n        }\n        break;\n      case 8:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(587);\n        match(T__0);\n        setState(588);\n        expression();\n        setState(589);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4220,"status":"M"},{"authorDate":"2018-12-14 21:42:36","commitOrder":14,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(765);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2018-12-14 21:42:36","endLine":6378,"groupId":"69837","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/56/996e4c4c2e4590c7368c0669388649d3700d05.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 104, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(754);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6353,"status":"M"}],"commitId":"f502ca53d4ff1b330697b01b6d9d5dec063f8581","commitMessage":"@@@SQL: Introduce NOW/CURRENT_TIMESTAMP function (#36562)\n\nAdd CURRENT_TIMESTAMP as keyword as well function alongside NOW() \n These return the current date/time for the  given query.  computed when\n the statement reaches the server. For completeness.  CURRENT_TIMESTAMP\n also accepts precision as an optional parameter.\n\nFix #36534","date":"2018-12-14 21:42:36","modifiedFileCount":"34","status":"M","submitter":"Costin Leau"},{"authorTime":"2019-01-12 05:08:00","codes":[{"authorDate":"2019-01-12 05:08:00","commitOrder":15,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(594);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(574);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(575);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(576);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(577);\n        constant();\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(581);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(578);\n          qualifiedName();\n          setState(579);\n          match(DOT);\n          }\n        }\n\n        setState(583);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(584);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(585);\n        match(T__0);\n        setState(586);\n        query();\n        setState(587);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(589);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(590);\n        match(T__0);\n        setState(591);\n        expression();\n        setState(592);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-01-12 05:08:00","endLine":4329,"groupId":"69837","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/a886404536bfeb61e1a9ada009b71635628cd8.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(594);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(574);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(575);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(576);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(577);\n        constant();\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(581);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(578);\n          qualifiedName();\n          setState(579);\n          match(DOT);\n          }\n        }\n\n        setState(583);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(584);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(585);\n        match(T__0);\n        setState(586);\n        query();\n        setState(587);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(589);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(590);\n        match(T__0);\n        setState(591);\n        expression();\n        setState(592);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4219,"status":"M"},{"authorDate":"2019-01-12 05:08:00","commitOrder":15,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(765);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-01-12 05:08:00","endLine":6382,"groupId":"69837","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/a886404536bfeb61e1a9ada009b71635628cd8.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(765);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6357,"status":"M"}],"commitId":"359222c55c50bf9c15062ca16c71420c41d60100","commitMessage":"@@@SQL: Make `FULL` non-reserved keyword in the grammar (#37377)\n\nSince `full` can be common as a field name or part of a field name\n(e.g.: `full.name` or `name.full`).  it's nice if it's not a reserved\nkeyword of the grammar so a user can use it without resorting to quotes.\n\nFixes: #37376","date":"2019-01-12 05:08:00","modifiedFileCount":"2","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-01-16 18:36:35","codes":[{"authorDate":"2019-01-16 18:36:35","commitOrder":16,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(589);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(569);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(570);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(571);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(572);\n        constant();\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(576);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(573);\n          qualifiedName();\n          setState(574);\n          match(DOT);\n          }\n        }\n\n        setState(578);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(579);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(580);\n        match(T__0);\n        setState(581);\n        query();\n        setState(582);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(584);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(585);\n        match(T__0);\n        setState(586);\n        expression();\n        setState(587);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-01-16 18:36:35","endLine":4270,"groupId":"69837","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/49bfab8320a88af1649b6f413f945e534384b6.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(594);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(574);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(575);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(576);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(577);\n        constant();\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(581);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(578);\n          qualifiedName();\n          setState(579);\n          match(DOT);\n          }\n        }\n\n        setState(583);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(584);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(585);\n        match(T__0);\n        setState(586);\n        query();\n        setState(587);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(589);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(590);\n        match(T__0);\n        setState(591);\n        expression();\n        setState(592);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4160,"status":"M"},{"authorDate":"2019-01-16 18:36:35","commitOrder":16,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(760);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-01-16 18:36:35","endLine":6323,"groupId":"69837","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/75/49bfab8320a88af1649b6f413f945e534384b6.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(765);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6298,"status":"M"}],"commitId":"023bb2f1e473f4ad009e22c1947faf844d39dbad","commitMessage":"@@@SQL: Remove slightly used meta commands (#37506)\n\nRemove SYS CATALOGS and SYS TABLE TYPES as they are a subset of SYS\nTABLES (and thus somewhat redundant) and used only by JDBC.\n\nClose #37409","date":"2019-01-16 18:36:35","modifiedFileCount":"10","status":"M","submitter":"Costin Leau"},{"authorTime":"2019-02-06 00:15:26","codes":[{"authorDate":"2019-02-06 00:15:26","commitOrder":17,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(589);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(569);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(570);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(571);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(572);\n        constant();\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(576);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(573);\n          qualifiedName();\n          setState(574);\n          match(DOT);\n          }\n        }\n\n        setState(578);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(579);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(580);\n        match(T__0);\n        setState(581);\n        query();\n        setState(582);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(584);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(585);\n        match(T__0);\n        setState(586);\n        expression();\n        setState(587);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-06 00:15:26","endLine":4266,"groupId":"69837","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/90169409e81595f22037ef440790e20712cae1.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(589);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(569);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(570);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(571);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(572);\n        constant();\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(576);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(573);\n          qualifiedName();\n          setState(574);\n          match(DOT);\n          }\n        }\n\n        setState(578);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(579);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(580);\n        match(T__0);\n        setState(581);\n        query();\n        setState(582);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(584);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(585);\n        match(T__0);\n        setState(586);\n        expression();\n        setState(587);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4156,"status":"M"},{"authorDate":"2019-02-06 00:15:26","commitOrder":17,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(767);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-06 00:15:26","endLine":6341,"groupId":"69837","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/90169409e81595f22037ef440790e20712cae1.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(760);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6316,"status":"M"}],"commitId":"c9701be1e836d154a0758e609d2d0735b03a5231","commitMessage":"@@@SQL: Implement CURRENT_DATE (#38175)\n\nSince DATE data type is now available.  this implements the\n`CURRENT_DATE/CURRENT_DATE()/TODAY()` similar to `CURRENT_TIMESTAMP`.\n\nCloses: #38160\n\n","date":"2019-02-06 00:15:26","modifiedFileCount":"10","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-02-12 22:50:21","codes":[{"authorDate":"2019-02-12 22:50:21","commitOrder":18,"curCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(592);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(572);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(573);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(574);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(575);\n        constant();\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(579);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(576);\n          qualifiedName();\n          setState(577);\n          match(DOT);\n          }\n        }\n\n        setState(581);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(582);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(583);\n        match(T__0);\n        setState(584);\n        query();\n        setState(585);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(587);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(588);\n        match(T__0);\n        setState(589);\n        expression();\n        setState(590);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-12 22:50:21","endLine":4301,"groupId":"69837","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/af98c1afcdf7b984f2ec491ae60de3b228b7f7.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(589);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(569);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(570);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(571);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(572);\n        constant();\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(576);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(573);\n          qualifiedName();\n          setState(574);\n          match(DOT);\n          }\n        }\n\n        setState(578);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(579);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(580);\n        match(T__0);\n        setState(581);\n        query();\n        setState(582);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(584);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(585);\n        match(T__0);\n        setState(586);\n        expression();\n        setState(587);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4191,"status":"M"},{"authorDate":"2019-02-12 22:50:21","commitOrder":18,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(770);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-02-12 22:50:21","endLine":6376,"groupId":"69837","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/34/af98c1afcdf7b984f2ec491ae60de3b228b7f7.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(767);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6351,"status":"M"}],"commitId":"526bb65195eacdd4a8fa5bf128a8838a86851bf6","commitMessage":"@@@SQL: Implement `::` cast operator (#38774)\n\n`<expression>::<dataType>` is a simplified altenative syntax to\n`CAST(<expression> AS <dataType> which exists in PostgreSQL and\nprovides an improved user experience and possibly more compact\nSQL queries.\n\nFixes: #38717\n\n","date":"2019-02-12 22:50:21","modifiedFileCount":"8","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-03-30 19:51:13","codes":[{"authorDate":"2019-03-30 19:51:13","commitOrder":19,"curCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 60;\n    enterRecursionRule(_localctx, 60, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(590);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(570);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(571);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(572);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(573);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(577);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(574);\n          qualifiedName();\n          setState(575);\n          match(DOT);\n          }\n        }\n\n        setState(579);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(580);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(581);\n        match(T__0);\n        setState(582);\n        query();\n        setState(583);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(585);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(586);\n        match(T__0);\n        setState(587);\n        expression();\n        setState(588);\n        match(T__1);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(597);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,80,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(592);\n          if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, \"precpred(_ctx, 9)\");\n          setState(593);\n          match(CAST_OP);\n          setState(594);\n          dataType();\n          }\n          } \n        }\n        setState(599);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,80,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","date":"2019-03-30 19:51:13","endLine":4336,"groupId":"69837","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"(int_p)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/94d8d191a98a189dd24f7d1ad00d04354dfe0d.src","preCode":"  public final PrimaryExpressionContext primaryExpression() throws RecognitionException {\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, getState());\n    enterRule(_localctx, 60, RULE_primaryExpression);\n    int _la;\n    try {\n      setState(592);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        _localctx = new CastContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n        {\n        setState(572);\n        castExpression();\n        }\n        break;\n      case 2:\n        _localctx = new ExtractContext(_localctx);\n        enterOuterAlt(_localctx, 2);\n        {\n        setState(573);\n        extractExpression();\n        }\n        break;\n      case 3:\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        enterOuterAlt(_localctx, 3);\n        {\n        setState(574);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        _localctx = new ConstantDefaultContext(_localctx);\n        enterOuterAlt(_localctx, 4);\n        {\n        setState(575);\n        constant();\n        }\n        break;\n      case 5:\n        _localctx = new StarContext(_localctx);\n        enterOuterAlt(_localctx, 5);\n        {\n        setState(579);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(576);\n          qualifiedName();\n          setState(577);\n          match(DOT);\n          }\n        }\n\n        setState(581);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        _localctx = new FunctionContext(_localctx);\n        enterOuterAlt(_localctx, 6);\n        {\n        setState(582);\n        functionExpression();\n        }\n        break;\n      case 7:\n        _localctx = new SubqueryExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 7);\n        {\n        setState(583);\n        match(T__0);\n        setState(584);\n        query();\n        setState(585);\n        match(T__1);\n        }\n        break;\n      case 8:\n        _localctx = new DereferenceContext(_localctx);\n        enterOuterAlt(_localctx, 8);\n        {\n        setState(587);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        enterOuterAlt(_localctx, 9);\n        {\n        setState(588);\n        match(T__0);\n        setState(589);\n        expression();\n        setState(590);\n        match(T__1);\n        }\n        break;\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4183,"status":"M"},{"authorDate":"2019-03-30 19:51:13","commitOrder":19,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(776);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-03-30 19:51:13","endLine":6411,"groupId":"69837","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4f/94d8d191a98a189dd24f7d1ad00d04354dfe0d.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(770);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6386,"status":"M"}],"commitId":"e34cc2f38b1477e78788ee377938f42cc47187c7","commitMessage":"@@@SQL: Fix precedence of `::` psql like CAST operator (#40665)\n\nPreviously.  an expression like `10 + 2::long` would be interpreted\nas `CAST(10 + 2 AS LONG)` instead of `10 + CAST(2 AS LONG)`.\n\n","date":"2019-03-30 19:51:13","modifiedFileCount":"7","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-04-04 01:35:37","codes":[{"authorDate":"2019-04-04 01:35:37","commitOrder":20,"curCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 60;\n    enterRecursionRule(_localctx, 60, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(590);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(570);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(571);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(572);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(573);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(577);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(574);\n          qualifiedName();\n          setState(575);\n          match(DOT);\n          }\n        }\n\n        setState(579);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(580);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(581);\n        match(T__0);\n        setState(582);\n        query();\n        setState(583);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(585);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(586);\n        match(T__0);\n        setState(587);\n        expression();\n        setState(588);\n        match(T__1);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(597);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,80,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(592);\n          if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, \"precpred(_ctx, 9)\");\n          setState(593);\n          match(CAST_OP);\n          setState(594);\n          dataType();\n          }\n          } \n        }\n        setState(599);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,80,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","date":"2019-04-04 01:35:37","endLine":4338,"groupId":"69837","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"(int_p)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/ad02b1392ddc5dbbf5dbc4e8aa9ac85464411a.src","preCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 60;\n    enterRecursionRule(_localctx, 60, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(590);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(570);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(571);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(572);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(573);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(577);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(574);\n          qualifiedName();\n          setState(575);\n          match(DOT);\n          }\n        }\n\n        setState(579);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(580);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(581);\n        match(T__0);\n        setState(582);\n        query();\n        setState(583);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(585);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(586);\n        match(T__0);\n        setState(587);\n        expression();\n        setState(588);\n        match(T__1);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(597);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,80,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(592);\n          if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, \"precpred(_ctx, 9)\");\n          setState(593);\n          match(CAST_OP);\n          setState(594);\n          dataType();\n          }\n          } \n        }\n        setState(599);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,80,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4185,"status":"M"},{"authorDate":"2019-04-04 01:35:37","commitOrder":20,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(784);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-04-04 01:35:37","endLine":6442,"groupId":"69837","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5b/ad02b1392ddc5dbbf5dbc4e8aa9ac85464411a.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(776);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH) | (1L << OPTIMIZED))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6417,"status":"M"}],"commitId":"9feede781409d0e264ce45951a25b28ff129b187","commitMessage":"@@@SQL: Implement CURRENT_TIME/CURTIME functions (#40662)\n\nAfter `TIME` SQL data type is introduced.  implement\n`CURRENT_TIME/CURTIME` functions similarly to CURRENT_TIMESTAMP\nthat return the system's current time (only.  without the date part).\n\nCloses: #40468\n","date":"2019-04-04 01:35:37","modifiedFileCount":"10","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-04-17 15:12:11","codes":[{"authorDate":"2019-04-17 15:12:11","commitOrder":21,"curCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 60;\n    enterRecursionRule(_localctx, 60, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(590);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(570);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(571);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(572);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(573);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(577);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(574);\n          qualifiedName();\n          setState(575);\n          match(DOT);\n          }\n        }\n\n        setState(579);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(580);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(581);\n        match(T__0);\n        setState(582);\n        query();\n        setState(583);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(585);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(586);\n        match(T__0);\n        setState(587);\n        expression();\n        setState(588);\n        match(T__1);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(597);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,80,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(592);\n          if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, \"precpred(_ctx, 9)\");\n          setState(593);\n          match(CAST_OP);\n          setState(594);\n          dataType();\n          }\n          } \n        }\n        setState(599);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,80,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","date":"2019-04-17 15:12:11","endLine":4364,"groupId":"69837","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"(int_p)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/67/69cc88695d6ed79e17b369ca6ac12c8cc8af1b.src","preCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 60;\n    enterRecursionRule(_localctx, 60, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(590);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(570);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(571);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(572);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(573);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(577);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(574);\n          qualifiedName();\n          setState(575);\n          match(DOT);\n          }\n        }\n\n        setState(579);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(580);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(581);\n        match(T__0);\n        setState(582);\n        query();\n        setState(583);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(585);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(586);\n        match(T__0);\n        setState(587);\n        expression();\n        setState(588);\n        match(T__1);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(597);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,80,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(592);\n          if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, \"precpred(_ctx, 9)\");\n          setState(593);\n          match(CAST_OP);\n          setState(594);\n          dataType();\n          }\n          } \n        }\n        setState(599);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,80,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4211,"status":"M"},{"authorDate":"2019-04-17 15:12:11","commitOrder":21,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(766);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-04-17 15:12:11","endLine":6426,"groupId":"69837","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/67/69cc88695d6ed79e17b369ca6ac12c8cc8af1b.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(784);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6401,"status":"M"}],"commitId":"bfbc9f140144b5a35aa29008b58bf58074419853","commitMessage":"@@@SQL: Allow current_date/time/timestamp to be also used as a function escape pattern (#41254)\n\nCURRENT_DATE/CURRENT_TIME/CURRENT_TIMESTAMP can be used as SQL keywords\n(without parentheses) and therefore there is a special rule in the\ngrammar to accommodate this.\n\nPreviously.  this rule was also catching the parenthesised version of those functions too. \nnot allowing the {fn <functionName>()} to be used. E.g.:\n{fn current_time(2)} or {fn current_timestamp()}\n\nNow.  the grammar rule catches only the keyword versions and all the parenthesised\nversions go through the normal function resolution. As a consequence the validation\nof the precision is moved from the parser lever (ExpressionBuilder) to the function\nimplementations.\n\nFixes: #41240\n","date":"2019-04-17 15:12:11","modifiedFileCount":"9","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-04-23 00:26:15","codes":[{"authorDate":"2019-04-23 00:26:15","commitOrder":22,"curCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 60;\n    enterRecursionRule(_localctx, 60, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(607);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(572);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(573);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(574);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(575);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(579);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OPTIMIZED - 67)) | (1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(576);\n          qualifiedName();\n          setState(577);\n          match(DOT);\n          }\n        }\n\n        setState(581);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(582);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(583);\n        match(T__0);\n        setState(584);\n        query();\n        setState(585);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(587);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(588);\n        match(T__0);\n        setState(589);\n        expression();\n        setState(590);\n        match(T__1);\n        }\n        break;\n      case 10:\n        {\n        _localctx = new CaseContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(592);\n        match(CASE);\n        setState(594);\n        _la = _input.LA(1);\n        if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (ANALYZE - 1)) | (1L << (ANALYZED - 1)) | (1L << (CASE - 1)) | (1L << (CAST - 1)) | (1L << (CATALOGS - 1)) | (1L << (COLUMNS - 1)) | (1L << (CONVERT - 1)) | (1L << (CURRENT_DATE - 1)) | (1L << (CURRENT_TIME - 1)) | (1L << (CURRENT_TIMESTAMP - 1)) | (1L << (DAY - 1)) | (1L << (DEBUG - 1)) | (1L << (EXECUTABLE - 1)) | (1L << (EXISTS - 1)) | (1L << (EXPLAIN - 1)) | (1L << (EXTRACT - 1)) | (1L << (FALSE - 1)) | (1L << (FIRST - 1)) | (1L << (FORMAT - 1)) | (1L << (FULL - 1)) | (1L << (FUNCTIONS - 1)) | (1L << (GRAPHVIZ - 1)) | (1L << (HOUR - 1)) | (1L << (INTERVAL - 1)) | (1L << (LAST - 1)) | (1L << (LEFT - 1)) | (1L << (LIMIT - 1)) | (1L << (MAPPED - 1)) | (1L << (MATCH - 1)) | (1L << (MINUTE - 1)) | (1L << (MONTH - 1)) | (1L << (NOT - 1)) | (1L << (NULL - 1)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OPTIMIZED - 67)) | (1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(593);\n          ((CaseContext)_localctx).operand = booleanExpression(0);\n          }\n        }\n\n        setState(597); \n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        do {\n          {\n          {\n          setState(596);\n          whenClause();\n          }\n          }\n          setState(599); \n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        } while ( _la==WHEN );\n        setState(603);\n        _la = _input.LA(1);\n        if (_la==ELSE) {\n          {\n          setState(601);\n          match(ELSE);\n          setState(602);\n          ((CaseContext)_localctx).elseClause = booleanExpression(0);\n          }\n        }\n\n        setState(605);\n        match(END);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(614);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,83,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(609);\n          if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, \"precpred(_ctx, 10)\");\n          setState(610);\n          match(CAST_OP);\n          setState(611);\n          dataType();\n          }\n          } \n        }\n        setState(616);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,83,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","date":"2019-04-23 00:26:15","endLine":4445,"groupId":"72790","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"(int_p)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/e317552268e323e06d0197df942f4599120f4a.src","preCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 60;\n    enterRecursionRule(_localctx, 60, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(590);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(570);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(571);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(572);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(573);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(577);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (DIGIT_IDENTIFIER - 64)) | (1L << (QUOTED_IDENTIFIER - 64)) | (1L << (BACKQUOTED_IDENTIFIER - 64)))) != 0)) {\n          {\n          setState(574);\n          qualifiedName();\n          setState(575);\n          match(DOT);\n          }\n        }\n\n        setState(579);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(580);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(581);\n        match(T__0);\n        setState(582);\n        query();\n        setState(583);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(585);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(586);\n        match(T__0);\n        setState(587);\n        expression();\n        setState(588);\n        match(T__1);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(597);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,80,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(592);\n          if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, \"precpred(_ctx, 9)\");\n          setState(593);\n          match(CAST_OP);\n          setState(594);\n          dataType();\n          }\n          } \n        }\n        setState(599);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,80,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4247,"status":"M"},{"authorDate":"2019-04-23 00:26:15","commitOrder":22,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 108, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(788);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OPTIMIZED - 67)) | (1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-04-23 00:26:15","endLine":6564,"groupId":"69837","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/e317552268e323e06d0197df942f4599120f4a.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 106, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(766);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OPTIMIZED - 64)) | (1L << (PARSED - 64)) | (1L << (PHYSICAL - 64)) | (1L << (PLAN - 64)) | (1L << (RLIKE - 64)) | (1L << (QUERY - 64)) | (1L << (SCHEMAS - 64)) | (1L << (SECOND - 64)) | (1L << (SHOW - 64)) | (1L << (SYS - 64)) | (1L << (TABLES - 64)) | (1L << (TEXT - 64)) | (1L << (TYPE - 64)) | (1L << (TYPES - 64)) | (1L << (VERIFY - 64)) | (1L << (YEAR - 64)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6539,"status":"M"}],"commitId":"8b2577406f47ae60d15803058921d128390af0b6","commitMessage":"@@@SQL: Implement CASE... WHEN... THEN... ELSE... END (#41349)\n\nImplement the ANSI SQL CASE expression which provides the if/else\nfunctionality common to most programming languages.\n\nThe CASE expression can have multiple WHEN branches and becomes a\npowerful tool for SQL queries as it can be used in SELECT.  WHERE. \nGROUP BY.  HAVING and ORDER BY clauses.\n\nCloses: #36200\n","date":"2019-04-23 00:26:15","modifiedFileCount":"17","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2019-05-10 05:26:56","codes":[{"authorDate":"2019-05-10 05:26:56","commitOrder":23,"curCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 60;\n    enterRecursionRule(_localctx, 60, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(622);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(587);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(588);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(589);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(590);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(594);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OPTIMIZED - 69)) | (1L << (PARSED - 69)) | (1L << (PHYSICAL - 69)) | (1L << (PLAN - 69)) | (1L << (RLIKE - 69)) | (1L << (QUERY - 69)) | (1L << (SCHEMAS - 69)) | (1L << (SECOND - 69)) | (1L << (SHOW - 69)) | (1L << (SYS - 69)) | (1L << (TABLES - 69)) | (1L << (TEXT - 69)) | (1L << (TYPE - 69)) | (1L << (TYPES - 69)) | (1L << (VERIFY - 69)) | (1L << (YEAR - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (DIGIT_IDENTIFIER - 69)) | (1L << (QUOTED_IDENTIFIER - 69)) | (1L << (BACKQUOTED_IDENTIFIER - 69)))) != 0)) {\n          {\n          setState(591);\n          qualifiedName();\n          setState(592);\n          match(DOT);\n          }\n        }\n\n        setState(596);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(597);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(598);\n        match(T__0);\n        setState(599);\n        query();\n        setState(600);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(602);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(603);\n        match(T__0);\n        setState(604);\n        expression();\n        setState(605);\n        match(T__1);\n        }\n        break;\n      case 10:\n        {\n        _localctx = new CaseContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(607);\n        match(CASE);\n        setState(609);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NOT - 65)) | (1L << (NULL - 65)) | (1L << (OPTIMIZED - 65)) | (1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)))) != 0) || _la==QUOTED_IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {\n          {\n          setState(608);\n          ((CaseContext)_localctx).operand = booleanExpression(0);\n          }\n        }\n\n        setState(612); \n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        do {\n          {\n          {\n          setState(611);\n          whenClause();\n          }\n          }\n          setState(614); \n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        } while ( _la==WHEN );\n        setState(618);\n        _la = _input.LA(1);\n        if (_la==ELSE) {\n          {\n          setState(616);\n          match(ELSE);\n          setState(617);\n          ((CaseContext)_localctx).elseClause = booleanExpression(0);\n          }\n        }\n\n        setState(620);\n        match(END);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(629);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,87,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(624);\n          if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, \"precpred(_ctx, 10)\");\n          setState(625);\n          match(CAST_OP);\n          setState(626);\n          dataType();\n          }\n          } \n        }\n        setState(631);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,87,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","date":"2019-05-10 05:26:56","endLine":4479,"groupId":"69837","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"(int_p)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/e0f4654df6d1a60b39e9842d7970072ae782a5.src","preCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 60;\n    enterRecursionRule(_localctx, 60, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(607);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(572);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(573);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(574);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(575);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(579);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OPTIMIZED - 67)) | (1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(576);\n          qualifiedName();\n          setState(577);\n          match(DOT);\n          }\n        }\n\n        setState(581);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(582);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(583);\n        match(T__0);\n        setState(584);\n        query();\n        setState(585);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(587);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(588);\n        match(T__0);\n        setState(589);\n        expression();\n        setState(590);\n        match(T__1);\n        }\n        break;\n      case 10:\n        {\n        _localctx = new CaseContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(592);\n        match(CASE);\n        setState(594);\n        _la = _input.LA(1);\n        if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (ANALYZE - 1)) | (1L << (ANALYZED - 1)) | (1L << (CASE - 1)) | (1L << (CAST - 1)) | (1L << (CATALOGS - 1)) | (1L << (COLUMNS - 1)) | (1L << (CONVERT - 1)) | (1L << (CURRENT_DATE - 1)) | (1L << (CURRENT_TIME - 1)) | (1L << (CURRENT_TIMESTAMP - 1)) | (1L << (DAY - 1)) | (1L << (DEBUG - 1)) | (1L << (EXECUTABLE - 1)) | (1L << (EXISTS - 1)) | (1L << (EXPLAIN - 1)) | (1L << (EXTRACT - 1)) | (1L << (FALSE - 1)) | (1L << (FIRST - 1)) | (1L << (FORMAT - 1)) | (1L << (FULL - 1)) | (1L << (FUNCTIONS - 1)) | (1L << (GRAPHVIZ - 1)) | (1L << (HOUR - 1)) | (1L << (INTERVAL - 1)) | (1L << (LAST - 1)) | (1L << (LEFT - 1)) | (1L << (LIMIT - 1)) | (1L << (MAPPED - 1)) | (1L << (MATCH - 1)) | (1L << (MINUTE - 1)) | (1L << (MONTH - 1)) | (1L << (NOT - 1)) | (1L << (NULL - 1)))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OPTIMIZED - 67)) | (1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RIGHT - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TRUE - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)) | (1L << (FUNCTION_ESC - 67)) | (1L << (DATE_ESC - 67)) | (1L << (TIME_ESC - 67)) | (1L << (TIMESTAMP_ESC - 67)) | (1L << (GUID_ESC - 67)) | (1L << (PLUS - 67)) | (1L << (MINUS - 67)) | (1L << (ASTERISK - 67)) | (1L << (PARAM - 67)) | (1L << (STRING - 67)) | (1L << (INTEGER_VALUE - 67)) | (1L << (DECIMAL_VALUE - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (DIGIT_IDENTIFIER - 67)) | (1L << (QUOTED_IDENTIFIER - 67)) | (1L << (BACKQUOTED_IDENTIFIER - 67)))) != 0)) {\n          {\n          setState(593);\n          ((CaseContext)_localctx).operand = booleanExpression(0);\n          }\n        }\n\n        setState(597); \n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        do {\n          {\n          {\n          setState(596);\n          whenClause();\n          }\n          }\n          setState(599); \n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        } while ( _la==WHEN );\n        setState(603);\n        _la = _input.LA(1);\n        if (_la==ELSE) {\n          {\n          setState(601);\n          match(ELSE);\n          setState(602);\n          ((CaseContext)_localctx).elseClause = booleanExpression(0);\n          }\n        }\n\n        setState(605);\n        match(END);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(614);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,83,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(609);\n          if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, \"precpred(_ctx, 10)\");\n          setState(610);\n          match(CAST_OP);\n          setState(611);\n          dataType();\n          }\n          } \n        }\n        setState(616);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,83,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4281,"status":"M"},{"authorDate":"2019-05-10 05:26:56","commitOrder":23,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 108, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(803);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OPTIMIZED - 69)) | (1L << (PARSED - 69)) | (1L << (PHYSICAL - 69)) | (1L << (PLAN - 69)) | (1L << (RLIKE - 69)) | (1L << (QUERY - 69)) | (1L << (SCHEMAS - 69)) | (1L << (SECOND - 69)) | (1L << (SHOW - 69)) | (1L << (SYS - 69)) | (1L << (TABLES - 69)) | (1L << (TEXT - 69)) | (1L << (TYPE - 69)) | (1L << (TYPES - 69)) | (1L << (VERIFY - 69)) | (1L << (YEAR - 69)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-05-10 05:26:56","endLine":6598,"groupId":"69837","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/e0f4654df6d1a60b39e9842d7970072ae782a5.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 108, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(788);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OPTIMIZED - 67)) | (1L << (PARSED - 67)) | (1L << (PHYSICAL - 67)) | (1L << (PLAN - 67)) | (1L << (RLIKE - 67)) | (1L << (QUERY - 67)) | (1L << (SCHEMAS - 67)) | (1L << (SECOND - 67)) | (1L << (SHOW - 67)) | (1L << (SYS - 67)) | (1L << (TABLES - 67)) | (1L << (TEXT - 67)) | (1L << (TYPE - 67)) | (1L << (TYPES - 67)) | (1L << (VERIFY - 67)) | (1L << (YEAR - 67)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6573,"status":"M"}],"commitId":"2445a933915f420c7f51e8505afa0a7978ce6b0f","commitMessage":"@@@SQL: Add support for FROZEN indices (#41558)\n\nAllow querying of FROZEN indices both through dedicated SQL grammar\nextension:\n> SELECT field FROM FROZEN index\nand also through driver configuration parameter.  namely:\n> index.include.frozen: true/false\n\nFix #39390\nFix #39377","date":"2019-05-10 05:26:56","modifiedFileCount":"50","status":"M","submitter":"Costin Leau"},{"authorTime":"2019-09-23 23:59:46","codes":[{"authorDate":"2019-09-23 23:59:46","commitOrder":24,"curCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 68;\n    enterRecursionRule(_localctx, 68, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(660);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(625);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(626);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(627);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(628);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(632);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)) | (1L << (BACKQUOTED_IDENTIFIER - 70)))) != 0)) {\n          {\n          setState(629);\n          qualifiedName();\n          setState(630);\n          match(DOT);\n          }\n        }\n\n        setState(634);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(635);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(636);\n        match(T__0);\n        setState(637);\n        query();\n        setState(638);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(640);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(641);\n        match(T__0);\n        setState(642);\n        expression();\n        setState(643);\n        match(T__1);\n        }\n        break;\n      case 10:\n        {\n        _localctx = new CaseContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(645);\n        match(CASE);\n        setState(647);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)) | (1L << (IDENTIFIER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(646);\n          ((CaseContext)_localctx).operand = booleanExpression(0);\n          }\n        }\n\n        setState(650); \n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        do {\n          {\n          {\n          setState(649);\n          whenClause();\n          }\n          }\n          setState(652); \n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        } while ( _la==WHEN );\n        setState(656);\n        _la = _input.LA(1);\n        if (_la==ELSE) {\n          {\n          setState(654);\n          match(ELSE);\n          setState(655);\n          ((CaseContext)_localctx).elseClause = booleanExpression(0);\n          }\n        }\n\n        setState(658);\n        match(END);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(667);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,91,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(662);\n          if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, \"precpred(_ctx, 10)\");\n          setState(663);\n          match(CAST_OP);\n          setState(664);\n          dataType();\n          }\n          } \n        }\n        setState(669);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,91,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","date":"2019-09-23 23:59:46","endLine":4749,"groupId":"69837","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"(int_p)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/cc1bd7a3f5722321e9b9519d858e3c262dd9c3.src","preCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 60;\n    enterRecursionRule(_localctx, 60, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(622);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(587);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(588);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(589);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(590);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(594);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OPTIMIZED - 69)) | (1L << (PARSED - 69)) | (1L << (PHYSICAL - 69)) | (1L << (PLAN - 69)) | (1L << (RLIKE - 69)) | (1L << (QUERY - 69)) | (1L << (SCHEMAS - 69)) | (1L << (SECOND - 69)) | (1L << (SHOW - 69)) | (1L << (SYS - 69)) | (1L << (TABLES - 69)) | (1L << (TEXT - 69)) | (1L << (TYPE - 69)) | (1L << (TYPES - 69)) | (1L << (VERIFY - 69)) | (1L << (YEAR - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (DIGIT_IDENTIFIER - 69)) | (1L << (QUOTED_IDENTIFIER - 69)) | (1L << (BACKQUOTED_IDENTIFIER - 69)))) != 0)) {\n          {\n          setState(591);\n          qualifiedName();\n          setState(592);\n          match(DOT);\n          }\n        }\n\n        setState(596);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(597);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(598);\n        match(T__0);\n        setState(599);\n        query();\n        setState(600);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(602);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(603);\n        match(T__0);\n        setState(604);\n        expression();\n        setState(605);\n        match(T__1);\n        }\n        break;\n      case 10:\n        {\n        _localctx = new CaseContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(607);\n        match(CASE);\n        setState(609);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NOT - 65)) | (1L << (NULL - 65)) | (1L << (OPTIMIZED - 65)) | (1L << (PARSED - 65)) | (1L << (PHYSICAL - 65)) | (1L << (PLAN - 65)) | (1L << (RIGHT - 65)) | (1L << (RLIKE - 65)) | (1L << (QUERY - 65)) | (1L << (SCHEMAS - 65)) | (1L << (SECOND - 65)) | (1L << (SHOW - 65)) | (1L << (SYS - 65)) | (1L << (TABLES - 65)) | (1L << (TEXT - 65)) | (1L << (TRUE - 65)) | (1L << (TYPE - 65)) | (1L << (TYPES - 65)) | (1L << (VERIFY - 65)) | (1L << (YEAR - 65)) | (1L << (FUNCTION_ESC - 65)) | (1L << (DATE_ESC - 65)) | (1L << (TIME_ESC - 65)) | (1L << (TIMESTAMP_ESC - 65)) | (1L << (GUID_ESC - 65)) | (1L << (PLUS - 65)) | (1L << (MINUS - 65)) | (1L << (ASTERISK - 65)) | (1L << (PARAM - 65)) | (1L << (STRING - 65)) | (1L << (INTEGER_VALUE - 65)) | (1L << (DECIMAL_VALUE - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (DIGIT_IDENTIFIER - 65)))) != 0) || _la==QUOTED_IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {\n          {\n          setState(608);\n          ((CaseContext)_localctx).operand = booleanExpression(0);\n          }\n        }\n\n        setState(612); \n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        do {\n          {\n          {\n          setState(611);\n          whenClause();\n          }\n          }\n          setState(614); \n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        } while ( _la==WHEN );\n        setState(618);\n        _la = _input.LA(1);\n        if (_la==ELSE) {\n          {\n          setState(616);\n          match(ELSE);\n          setState(617);\n          ((CaseContext)_localctx).elseClause = booleanExpression(0);\n          }\n        }\n\n        setState(620);\n        match(END);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(629);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,87,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(624);\n          if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, \"precpred(_ctx, 10)\");\n          setState(625);\n          match(CAST_OP);\n          setState(626);\n          dataType();\n          }\n          } \n        }\n        setState(631);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,87,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4551,"status":"M"},{"authorDate":"2019-09-23 23:59:46","commitOrder":24,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 116, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(841);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-09-23 23:59:46","endLine":6873,"groupId":"69837","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/cc1bd7a3f5722321e9b9519d858e3c262dd9c3.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 108, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(803);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OPTIMIZED - 69)) | (1L << (PARSED - 69)) | (1L << (PHYSICAL - 69)) | (1L << (PLAN - 69)) | (1L << (RLIKE - 69)) | (1L << (QUERY - 69)) | (1L << (SCHEMAS - 69)) | (1L << (SECOND - 69)) | (1L << (SHOW - 69)) | (1L << (SYS - 69)) | (1L << (TABLES - 69)) | (1L << (TEXT - 69)) | (1L << (TYPE - 69)) | (1L << (TYPES - 69)) | (1L << (VERIFY - 69)) | (1L << (YEAR - 69)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6848,"status":"M"}],"commitId":"d91263746a222915c570d4a662ec48c1d6b4f583","commitMessage":"@@@SQL: Add PIVOT support (#46489)\n\nAdd initial PIVOT support for transforming a regular table into a\nstatistics table around an arbitrary pivoting column:\n\nSELECT * FROM\n (SELECT languages.  country.  salary.  FROM mp)\n PIVOT (AVG(salary) FOR countries IN ('NL'.  'DE'.  'ES'.  'RO'.  'US'))\n\nIn the current implementation PIVOT allows only one aggregation however\nthis restriction is likely to be lifted in the future.\nAlso not all aggregations are working.  in particular MatrixStats are not yet supported.","date":"2019-09-23 23:59:46","modifiedFileCount":"39","status":"M","submitter":"Costin Leau"},{"authorTime":"2019-09-23 23:59:46","codes":[{"authorDate":"2019-10-07 20:37:20","commitOrder":25,"curCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 68;\n    enterRecursionRule(_localctx, 68, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(660);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(625);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(626);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(627);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(628);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(632);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)))) != 0) || _la==BACKQUOTED_IDENTIFIER) {\n          {\n          setState(629);\n          qualifiedName();\n          setState(630);\n          match(DOT);\n          }\n        }\n\n        setState(634);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(635);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(636);\n        match(T__0);\n        setState(637);\n        query();\n        setState(638);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(640);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(641);\n        match(T__0);\n        setState(642);\n        expression();\n        setState(643);\n        match(T__1);\n        }\n        break;\n      case 10:\n        {\n        _localctx = new CaseContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(645);\n        match(CASE);\n        setState(647);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(646);\n          ((CaseContext)_localctx).operand = booleanExpression(0);\n          }\n        }\n\n        setState(650); \n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        do {\n          {\n          {\n          setState(649);\n          whenClause();\n          }\n          }\n          setState(652); \n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        } while ( _la==WHEN );\n        setState(656);\n        _la = _input.LA(1);\n        if (_la==ELSE) {\n          {\n          setState(654);\n          match(ELSE);\n          setState(655);\n          ((CaseContext)_localctx).elseClause = booleanExpression(0);\n          }\n        }\n\n        setState(658);\n        match(END);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(667);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,91,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(662);\n          if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, \"precpred(_ctx, 10)\");\n          setState(663);\n          match(CAST_OP);\n          setState(664);\n          dataType();\n          }\n          } \n        }\n        setState(669);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,91,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","date":"2019-10-07 20:37:20","endLine":4751,"groupId":"69837","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"(int_p)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6d/0c4a69f3240451d7d1ad7fd46250e3f74a66d6.src","preCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 68;\n    enterRecursionRule(_localctx, 68, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(660);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(625);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(626);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(627);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(628);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(632);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)) | (1L << (BACKQUOTED_IDENTIFIER - 70)))) != 0)) {\n          {\n          setState(629);\n          qualifiedName();\n          setState(630);\n          match(DOT);\n          }\n        }\n\n        setState(634);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(635);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(636);\n        match(T__0);\n        setState(637);\n        query();\n        setState(638);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(640);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(641);\n        match(T__0);\n        setState(642);\n        expression();\n        setState(643);\n        match(T__1);\n        }\n        break;\n      case 10:\n        {\n        _localctx = new CaseContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(645);\n        match(CASE);\n        setState(647);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)) | (1L << (IDENTIFIER - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(646);\n          ((CaseContext)_localctx).operand = booleanExpression(0);\n          }\n        }\n\n        setState(650); \n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        do {\n          {\n          {\n          setState(649);\n          whenClause();\n          }\n          }\n          setState(652); \n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        } while ( _la==WHEN );\n        setState(656);\n        _la = _input.LA(1);\n        if (_la==ELSE) {\n          {\n          setState(654);\n          match(ELSE);\n          setState(655);\n          ((CaseContext)_localctx).elseClause = booleanExpression(0);\n          }\n        }\n\n        setState(658);\n        match(END);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(667);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,91,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(662);\n          if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, \"precpred(_ctx, 10)\");\n          setState(663);\n          match(CAST_OP);\n          setState(664);\n          dataType();\n          }\n          } \n        }\n        setState(669);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,91,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4553,"status":"M"},{"authorDate":"2019-09-23 23:59:46","commitOrder":25,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 116, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(841);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2019-09-23 23:59:46","endLine":6873,"groupId":"69837","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/cc1bd7a3f5722321e9b9519d858e3c262dd9c3.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 116, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(841);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6848,"status":"N"}],"commitId":"08a22d0b393f4a76c52dabc5e7b9cafcc19c30ca","commitMessage":"@@@SQL: Allow whitespaces in escape patterns (#47577)\n\n* SQL: Allow whitespaces in escape patterns\n\nPreviously.  we supported only the format `{fn <FUNCTION_NAME>()}`\nbut other DBs like MSSQL.  DB2.  MariaDB/MySQL alos allow whitespaces\nbetween `{` and `fn`. Furhermore.  also some applications - like PowerBI -\ngenerate escape sequences with spaces: `select { fn name(params) } etc.`\n\nAdd support for white spaces between `{` and the escape pattern definition\nlike `fn`.  `ts`.  `d`.  `guid` etc.\n\nCloses: #47401\n\n* Fix imports\n","date":"2019-10-07 20:37:20","modifiedFileCount":"3","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2020-06-02 15:56:20","codes":[{"authorDate":"2020-06-02 15:56:20","commitOrder":26,"curCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 70;\n    enterRecursionRule(_localctx, 70, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(668);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(633);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(634);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(635);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(636);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(640);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)))) != 0) || _la==QUOTED_IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {\n          {\n          setState(637);\n          qualifiedName();\n          setState(638);\n          match(DOT);\n          }\n        }\n\n        setState(642);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(643);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(644);\n        match(T__0);\n        setState(645);\n        query();\n        setState(646);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(648);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(649);\n        match(T__0);\n        setState(650);\n        expression();\n        setState(651);\n        match(T__1);\n        }\n        break;\n      case 10:\n        {\n        _localctx = new CaseContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(653);\n        match(CASE);\n        setState(655);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DECIMAL_VALUE - 130)) | (1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(654);\n          ((CaseContext)_localctx).operand = booleanExpression(0);\n          }\n        }\n\n        setState(658); \n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        do {\n          {\n          {\n          setState(657);\n          whenClause();\n          }\n          }\n          setState(660); \n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        } while ( _la==WHEN );\n        setState(664);\n        _la = _input.LA(1);\n        if (_la==ELSE) {\n          {\n          setState(662);\n          match(ELSE);\n          setState(663);\n          ((CaseContext)_localctx).elseClause = booleanExpression(0);\n          }\n        }\n\n        setState(666);\n        match(END);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(675);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,92,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(670);\n          if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, \"precpred(_ctx, 10)\");\n          setState(671);\n          match(CAST_OP);\n          setState(672);\n          dataType();\n          }\n          } \n        }\n        setState(677);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,92,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","date":"2020-06-02 15:56:20","endLine":4815,"groupId":"69837","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"(int_p)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/bef684c7e18aeed8d71039cd471287039ab143.src","preCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 68;\n    enterRecursionRule(_localctx, 68, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(660);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(625);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(626);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(627);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(628);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(632);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)))) != 0) || _la==BACKQUOTED_IDENTIFIER) {\n          {\n          setState(629);\n          qualifiedName();\n          setState(630);\n          match(DOT);\n          }\n        }\n\n        setState(634);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(635);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(636);\n        match(T__0);\n        setState(637);\n        query();\n        setState(638);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(640);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(641);\n        match(T__0);\n        setState(642);\n        expression();\n        setState(643);\n        match(T__1);\n        }\n        break;\n      case 10:\n        {\n        _localctx = new CaseContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(645);\n        match(CASE);\n        setState(647);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(646);\n          ((CaseContext)_localctx).operand = booleanExpression(0);\n          }\n        }\n\n        setState(650); \n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        do {\n          {\n          {\n          setState(649);\n          whenClause();\n          }\n          }\n          setState(652); \n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        } while ( _la==WHEN );\n        setState(656);\n        _la = _input.LA(1);\n        if (_la==ELSE) {\n          {\n          setState(654);\n          match(ELSE);\n          setState(655);\n          ((CaseContext)_localctx).elseClause = booleanExpression(0);\n          }\n        }\n\n        setState(658);\n        match(END);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(667);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,91,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(662);\n          if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, \"precpred(_ctx, 10)\");\n          setState(663);\n          match(CAST_OP);\n          setState(664);\n          dataType();\n          }\n          } \n        }\n        setState(669);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,91,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4617,"status":"M"},{"authorDate":"2020-06-02 15:56:20","commitOrder":26,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 118, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(849);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-06-02 15:56:20","endLine":6945,"groupId":"69837","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/bef684c7e18aeed8d71039cd471287039ab143.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 116, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(841);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6920,"status":"M"}],"commitId":"2f5ab81b9ad884434d1faa60f4391f966ede73e8","commitMessage":"@@@SQL: Implement TOP as an alternative to LIMIT (#57428)\n\nAdd basic support for `TOP X` as a synonym to LIMIT X which is used\nby [MS-SQL server](https://docs.microsoft.com/en-us/sql/t-sql/queries/top-transact-sql?view=sql-server-ver15). \ne.g.:\n\n```\nSELECT TOP 5 a.  b.  c FROM test\n```\n\nTOP in SQL server also supports the `PERCENTAGE` and `WITH TIES`\nkeywords which this implementation doesn't.\n\nDon't allow usage of both TOP and LIMIT in the same query.\n\nRefers to #41195\n","date":"2020-06-02 15:56:20","modifiedFileCount":"8","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2020-06-02 15:56:20","codes":[{"authorDate":"2020-11-24 04:47:51","commitOrder":27,"curCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 70;\n    enterRecursionRule(_localctx, 70, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(668);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(633);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(634);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(635);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(636);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(640);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)))) != 0) || _la==BACKQUOTED_IDENTIFIER) {\n          {\n          setState(637);\n          qualifiedName();\n          setState(638);\n          match(DOT);\n          }\n        }\n\n        setState(642);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(643);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(644);\n        match(T__0);\n        setState(645);\n        query();\n        setState(646);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(648);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(649);\n        match(T__0);\n        setState(650);\n        expression();\n        setState(651);\n        match(T__1);\n        }\n        break;\n      case 10:\n        {\n        _localctx = new CaseContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(653);\n        match(CASE);\n        setState(655);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(654);\n          ((CaseContext)_localctx).operand = booleanExpression(0);\n          }\n        }\n\n        setState(658); \n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        do {\n          {\n          {\n          setState(657);\n          whenClause();\n          }\n          }\n          setState(660); \n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        } while ( _la==WHEN );\n        setState(664);\n        _la = _input.LA(1);\n        if (_la==ELSE) {\n          {\n          setState(662);\n          match(ELSE);\n          setState(663);\n          ((CaseContext)_localctx).elseClause = booleanExpression(0);\n          }\n        }\n\n        setState(666);\n        match(END);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(675);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,92,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(670);\n          if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, \"precpred(_ctx, 10)\");\n          setState(671);\n          match(CAST_OP);\n          setState(672);\n          dataType();\n          }\n          } \n        }\n        setState(677);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,92,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","date":"2020-11-24 04:47:51","endLine":4814,"groupId":"69837","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"primaryExpression","params":"(int_p)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/18/e3528b71f5a0945a1b151f3ff26e3d424f0d72.src","preCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 70;\n    enterRecursionRule(_localctx, 70, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(668);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(633);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(634);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(635);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(636);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(640);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)))) != 0) || _la==QUOTED_IDENTIFIER || _la==BACKQUOTED_IDENTIFIER) {\n          {\n          setState(637);\n          qualifiedName();\n          setState(638);\n          match(DOT);\n          }\n        }\n\n        setState(642);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(643);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(644);\n        match(T__0);\n        setState(645);\n        query();\n        setState(646);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(648);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(649);\n        match(T__0);\n        setState(650);\n        expression();\n        setState(651);\n        match(T__1);\n        }\n        break;\n      case 10:\n        {\n        _localctx = new CaseContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(653);\n        match(CASE);\n        setState(655);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DECIMAL_VALUE - 130)) | (1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(654);\n          ((CaseContext)_localctx).operand = booleanExpression(0);\n          }\n        }\n\n        setState(658); \n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        do {\n          {\n          {\n          setState(657);\n          whenClause();\n          }\n          }\n          setState(660); \n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        } while ( _la==WHEN );\n        setState(664);\n        _la = _input.LA(1);\n        if (_la==ELSE) {\n          {\n          setState(662);\n          match(ELSE);\n          setState(663);\n          ((CaseContext)_localctx).elseClause = booleanExpression(0);\n          }\n        }\n\n        setState(666);\n        match(END);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(675);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,92,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(670);\n          if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, \"precpred(_ctx, 10)\");\n          setState(671);\n          match(CAST_OP);\n          setState(672);\n          dataType();\n          }\n          } \n        }\n        setState(677);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,92,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4616,"status":"M"},{"authorDate":"2020-06-02 15:56:20","commitOrder":27,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 118, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(849);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2020-06-02 15:56:20","endLine":6945,"groupId":"69837","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/bef684c7e18aeed8d71039cd471287039ab143.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 118, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(849);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":6920,"status":"N"}],"commitId":"afb9d48a2159b7ff7de6b74001a76e3a62b70876","commitMessage":"@@@SQL: Remove the unused CONCAT token (#65272)\n\nThe `||` token is a leftover from the original grammar definition.\nWe don't have a `||` operator.  the token is unused in our grammar.\nString concatenation is implemented via the `CONCAT` function instead.","date":"2020-11-24 04:47:51","modifiedFileCount":"2","status":"M","submitter":"Andras Palinkas"},{"authorTime":"2021-08-26 20:41:57","codes":[{"authorDate":"2021-08-26 20:41:57","commitOrder":28,"curCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 70;\n    enterRecursionRule(_localctx, 70, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(668);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(633);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(634);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(635);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(636);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(640);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)))) != 0) || _la==BACKQUOTED_IDENTIFIER) {\n          {\n          setState(637);\n          qualifiedName();\n          setState(638);\n          match(DOT);\n          }\n        }\n\n        setState(642);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(643);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(644);\n        match(T__0);\n        setState(645);\n        query();\n        setState(646);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(648);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(649);\n        match(T__0);\n        setState(650);\n        expression();\n        setState(651);\n        match(T__1);\n        }\n        break;\n      case 10:\n        {\n        _localctx = new CaseContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(653);\n        match(CASE);\n        setState(655);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(654);\n          ((CaseContext)_localctx).operand = booleanExpression(0);\n          }\n        }\n\n        setState(658); \n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        do {\n          {\n          {\n          setState(657);\n          whenClause();\n          }\n          }\n          setState(660); \n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        } while ( _la==WHEN );\n        setState(664);\n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        if (_la==ELSE) {\n          {\n          setState(662);\n          match(ELSE);\n          setState(663);\n          ((CaseContext)_localctx).elseClause = booleanExpression(0);\n          }\n        }\n\n        setState(666);\n        match(END);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(675);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,92,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(670);\n          if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, \"precpred(_ctx, 10)\");\n          setState(671);\n          match(CAST_OP);\n          setState(672);\n          dataType();\n          }\n          } \n        }\n        setState(677);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,92,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","date":"2021-08-26 20:41:57","endLine":4927,"groupId":"101329","id":55,"instanceNumber":1,"isCurCommit":1,"methodName":"primaryExpression","params":"(int_p)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/d494e5390668eab2b6833facff621cc7a73b1e.src","preCode":"  private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {\n    ParserRuleContext _parentctx = _ctx;\n    int _parentState = getState();\n    PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);\n    PrimaryExpressionContext _prevctx = _localctx;\n    int _startState = 70;\n    enterRecursionRule(_localctx, 70, RULE_primaryExpression, _p);\n    int _la;\n    try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(668);\n      _errHandler.sync(this);\n      switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {\n      case 1:\n        {\n        _localctx = new CastContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n\n        setState(633);\n        castExpression();\n        }\n        break;\n      case 2:\n        {\n        _localctx = new ExtractContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(634);\n        extractExpression();\n        }\n        break;\n      case 3:\n        {\n        _localctx = new CurrentDateTimeFunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(635);\n        builtinDateTimeFunction();\n        }\n        break;\n      case 4:\n        {\n        _localctx = new ConstantDefaultContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(636);\n        constant();\n        }\n        break;\n      case 5:\n        {\n        _localctx = new StarContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(640);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)) | (1L << (IDENTIFIER - 70)) | (1L << (DIGIT_IDENTIFIER - 70)) | (1L << (QUOTED_IDENTIFIER - 70)))) != 0) || _la==BACKQUOTED_IDENTIFIER) {\n          {\n          setState(637);\n          qualifiedName();\n          setState(638);\n          match(DOT);\n          }\n        }\n\n        setState(642);\n        match(ASTERISK);\n        }\n        break;\n      case 6:\n        {\n        _localctx = new FunctionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(643);\n        functionExpression();\n        }\n        break;\n      case 7:\n        {\n        _localctx = new SubqueryExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(644);\n        match(T__0);\n        setState(645);\n        query();\n        setState(646);\n        match(T__1);\n        }\n        break;\n      case 8:\n        {\n        _localctx = new DereferenceContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(648);\n        qualifiedName();\n        }\n        break;\n      case 9:\n        {\n        _localctx = new ParenthesizedExpressionContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(649);\n        match(T__0);\n        setState(650);\n        expression();\n        setState(651);\n        match(T__1);\n        }\n        break;\n      case 10:\n        {\n        _localctx = new CaseContext(_localctx);\n        _ctx = _localctx;\n        _prevctx = _localctx;\n        setState(653);\n        match(CASE);\n        setState(655);\n        _la = _input.LA(1);\n        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << ANALYZE) | (1L << ANALYZED) | (1L << CASE) | (1L << CAST) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CONVERT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXISTS) | (1L << EXPLAIN) | (1L << EXTRACT) | (1L << FALSE) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LEFT) | (1L << LIMIT) | (1L << MAPPED) | (1L << MATCH) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OPTIMIZED - 66)) | (1L << (PARSED - 66)) | (1L << (PHYSICAL - 66)) | (1L << (PIVOT - 66)) | (1L << (PLAN - 66)) | (1L << (RIGHT - 66)) | (1L << (RLIKE - 66)) | (1L << (QUERY - 66)) | (1L << (SCHEMAS - 66)) | (1L << (SECOND - 66)) | (1L << (SHOW - 66)) | (1L << (SYS - 66)) | (1L << (TABLES - 66)) | (1L << (TEXT - 66)) | (1L << (TRUE - 66)) | (1L << (TOP - 66)) | (1L << (TYPE - 66)) | (1L << (TYPES - 66)) | (1L << (VERIFY - 66)) | (1L << (YEAR - 66)) | (1L << (FUNCTION_ESC - 66)) | (1L << (DATE_ESC - 66)) | (1L << (TIME_ESC - 66)) | (1L << (TIMESTAMP_ESC - 66)) | (1L << (GUID_ESC - 66)) | (1L << (PLUS - 66)) | (1L << (MINUS - 66)) | (1L << (ASTERISK - 66)) | (1L << (PARAM - 66)) | (1L << (STRING - 66)) | (1L << (INTEGER_VALUE - 66)) | (1L << (DECIMAL_VALUE - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (IDENTIFIER - 130)) | (1L << (DIGIT_IDENTIFIER - 130)) | (1L << (QUOTED_IDENTIFIER - 130)) | (1L << (BACKQUOTED_IDENTIFIER - 130)))) != 0)) {\n          {\n          setState(654);\n          ((CaseContext)_localctx).operand = booleanExpression(0);\n          }\n        }\n\n        setState(658); \n        _errHandler.sync(this);\n        _la = _input.LA(1);\n        do {\n          {\n          {\n          setState(657);\n          whenClause();\n          }\n          }\n          setState(660); \n          _errHandler.sync(this);\n          _la = _input.LA(1);\n        } while ( _la==WHEN );\n        setState(664);\n        _la = _input.LA(1);\n        if (_la==ELSE) {\n          {\n          setState(662);\n          match(ELSE);\n          setState(663);\n          ((CaseContext)_localctx).elseClause = booleanExpression(0);\n          }\n        }\n\n        setState(666);\n        match(END);\n        }\n        break;\n      }\n      _ctx.stop = _input.LT(-1);\n      setState(675);\n      _errHandler.sync(this);\n      _alt = getInterpreter().adaptivePredict(_input,92,_ctx);\n      while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\n        if ( _alt==1 ) {\n          if ( _parseListeners!=null ) triggerExitRuleEvent();\n          _prevctx = _localctx;\n          {\n          {\n          _localctx = new CastOperatorExpressionContext(new PrimaryExpressionContext(_parentctx, _parentState));\n          pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);\n          setState(670);\n          if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, \"precpred(_ctx, 10)\");\n          setState(671);\n          match(CAST_OP);\n          setState(672);\n          dataType();\n          }\n          } \n        }\n        setState(677);\n        _errHandler.sync(this);\n        _alt = getInterpreter().adaptivePredict(_input,92,_ctx);\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      unrollRecursionContexts(_parentctx);\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":4726,"status":"M"},{"authorDate":"2021-08-26 20:41:57","commitOrder":28,"curCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 118, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(849);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      }\n      else {\n        if ( _input.LA(1)==Token.EOF ) matchedEOF = true;\n        _errHandler.reportMatch(this);\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","date":"2021-08-26 20:41:57","endLine":7089,"groupId":"101329","id":56,"instanceNumber":2,"isCurCommit":1,"methodName":"nonReserved","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/d494e5390668eab2b6833facff621cc7a73b1e.src","preCode":"  public final NonReservedContext nonReserved() throws RecognitionException {\n    NonReservedContext _localctx = new NonReservedContext(_ctx, getState());\n    enterRule(_localctx, 118, RULE_nonReserved);\n    int _la;\n    try {\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(849);\n      _la = _input.LA(1);\n      if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANALYZE) | (1L << ANALYZED) | (1L << CATALOGS) | (1L << COLUMNS) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << DAY) | (1L << DEBUG) | (1L << EXECUTABLE) | (1L << EXPLAIN) | (1L << FIRST) | (1L << FORMAT) | (1L << FULL) | (1L << FUNCTIONS) | (1L << GRAPHVIZ) | (1L << HOUR) | (1L << INTERVAL) | (1L << LAST) | (1L << LIMIT) | (1L << MAPPED) | (1L << MINUTE) | (1L << MONTH))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OPTIMIZED - 70)) | (1L << (PARSED - 70)) | (1L << (PHYSICAL - 70)) | (1L << (PIVOT - 70)) | (1L << (PLAN - 70)) | (1L << (RLIKE - 70)) | (1L << (QUERY - 70)) | (1L << (SCHEMAS - 70)) | (1L << (SECOND - 70)) | (1L << (SHOW - 70)) | (1L << (SYS - 70)) | (1L << (TABLES - 70)) | (1L << (TEXT - 70)) | (1L << (TOP - 70)) | (1L << (TYPE - 70)) | (1L << (TYPES - 70)) | (1L << (VERIFY - 70)) | (1L << (YEAR - 70)))) != 0)) ) {\n      _errHandler.recoverInline(this);\n      } else {\n        consume();\n      }\n      }\n    }\n    catch (RecognitionException re) {\n      _localctx.exception = re;\n      _errHandler.reportError(this, re);\n      _errHandler.recover(this, re);\n    }\n    finally {\n      exitRule();\n    }\n    return _localctx;\n  }\n","realPath":"x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/parser/SqlBaseParser.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":7061,"status":"M"}],"commitId":"d349f252476a0f50dbc3fd23bc796d77ec6c97fa","commitMessage":"@@@QL: regenerate parser due to ANTLR upgrade (#76970)\n\n* QL: regenerate parser due to ANTLR upgrade\n\nTo avoid warnings and subtle change in behavior.  regenerate the parser\nclasses using the upgraded ANTLR (4.9.2 vs 4.5.3).\n\nFix #76969","date":"2021-08-26 20:41:57","modifiedFileCount":"6","status":"M","submitter":"Costin Leau"}]
