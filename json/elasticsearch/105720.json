[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testAutoCreationPatternEnabled() {\n        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), randomFrom(\"+index*\", \"index*\"))\n                .build();\n        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);\n        ClusterState clusterState = ClusterState.builder(new ClusterName(\"test\")).metaData(MetaData.builder()).build();\n        assertThat(autoCreateIndex.shouldAutoCreate(\"index\" + randomAlphaOfLengthBetween(1, 5), clusterState), equalTo(true));\n        expectNotMatch(clusterState, autoCreateIndex, \"does_not_match\" + randomAlphaOfLengthBetween(1, 5));\n    }\n","date":"2018-04-26 03:22:53","endLine":118,"groupId":"46414","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAutoCreationPatternEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d5/31e824eb29d9a8300293a188ced10e82ba72d1.src","preCode":"    public void testAutoCreationPatternEnabled() {\n        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), randomFrom(\"+index*\", \"index*\"))\n                .build();\n        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);\n        ClusterState clusterState = ClusterState.builder(new ClusterName(\"test\")).metaData(MetaData.builder()).build();\n        assertThat(autoCreateIndex.shouldAutoCreate(\"index\" + randomAlphaOfLengthBetween(1, 5), clusterState), equalTo(true));\n        expectNotMatch(clusterState, autoCreateIndex, \"does_not_match\" + randomAlphaOfLengthBetween(1, 5));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/AutoCreateIndexTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testAutoCreationMultiplePatternsWithWildcards() {\n        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(),\n                randomFrom(\"+test*,-index*\", \"test*,-index*\")).build();\n        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);\n        ClusterState clusterState = ClusterState.builder(new ClusterName(\"test\")).metaData(MetaData.builder()).build();\n        expectForbidden(clusterState, autoCreateIndex, \"index\" + randomAlphaOfLengthBetween(1, 5), \"-index*\");\n        assertThat(autoCreateIndex.shouldAutoCreate(\"test\" + randomAlphaOfLengthBetween(1, 5), clusterState), equalTo(true));\n        expectNotMatch(clusterState, autoCreateIndex, \"does_not_match\" + randomAlphaOfLengthBetween(1, 5));\n    }\n","date":"2018-04-26 03:22:53","endLine":138,"groupId":"46414","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoCreationMultiplePatternsWithWildcards","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d5/31e824eb29d9a8300293a188ced10e82ba72d1.src","preCode":"    public void testAutoCreationMultiplePatternsWithWildcards() {\n        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(),\n                randomFrom(\"+test*,-index*\", \"test*,-index*\")).build();\n        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);\n        ClusterState clusterState = ClusterState.builder(new ClusterName(\"test\")).metaData(MetaData.builder()).build();\n        expectForbidden(clusterState, autoCreateIndex, \"index\" + randomAlphaOfLengthBetween(1, 5), \"-index*\");\n        assertThat(autoCreateIndex.shouldAutoCreate(\"test\" + randomAlphaOfLengthBetween(1, 5), clusterState), equalTo(true));\n        expectNotMatch(clusterState, autoCreateIndex, \"does_not_match\" + randomAlphaOfLengthBetween(1, 5));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/AutoCreateIndexTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testAutoCreationPatternEnabled() {\n        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), randomFrom(\"+index*\", \"index*\"))\n                .build();\n        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);\n        ClusterState clusterState = ClusterState.builder(new ClusterName(\"test\")).metadata(Metadata.builder()).build();\n        assertThat(autoCreateIndex.shouldAutoCreate(\"index\" + randomAlphaOfLengthBetween(1, 5), clusterState), equalTo(true));\n        expectNotMatch(clusterState, autoCreateIndex, \"does_not_match\" + randomAlphaOfLengthBetween(1, 5));\n    }\n","date":"2020-04-01 03:52:01","endLine":118,"groupId":"105720","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAutoCreationPatternEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dd/b78cd46b64464b5c892f874e2b7e8b4f402ac5.src","preCode":"    public void testAutoCreationPatternEnabled() {\n        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(), randomFrom(\"+index*\", \"index*\"))\n                .build();\n        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);\n        ClusterState clusterState = ClusterState.builder(new ClusterName(\"test\")).metaData(MetaData.builder()).build();\n        assertThat(autoCreateIndex.shouldAutoCreate(\"index\" + randomAlphaOfLengthBetween(1, 5), clusterState), equalTo(true));\n        expectNotMatch(clusterState, autoCreateIndex, \"does_not_match\" + randomAlphaOfLengthBetween(1, 5));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/AutoCreateIndexTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testAutoCreationMultiplePatternsWithWildcards() {\n        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(),\n                randomFrom(\"+test*,-index*\", \"test*,-index*\")).build();\n        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);\n        ClusterState clusterState = ClusterState.builder(new ClusterName(\"test\")).metadata(Metadata.builder()).build();\n        expectForbidden(clusterState, autoCreateIndex, \"index\" + randomAlphaOfLengthBetween(1, 5), \"-index*\");\n        assertThat(autoCreateIndex.shouldAutoCreate(\"test\" + randomAlphaOfLengthBetween(1, 5), clusterState), equalTo(true));\n        expectNotMatch(clusterState, autoCreateIndex, \"does_not_match\" + randomAlphaOfLengthBetween(1, 5));\n    }\n","date":"2020-04-01 03:52:01","endLine":138,"groupId":"105720","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAutoCreationMultiplePatternsWithWildcards","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/dd/b78cd46b64464b5c892f874e2b7e8b4f402ac5.src","preCode":"    public void testAutoCreationMultiplePatternsWithWildcards() {\n        Settings settings = Settings.builder().put(AutoCreateIndex.AUTO_CREATE_INDEX_SETTING.getKey(),\n                randomFrom(\"+test*,-index*\", \"test*,-index*\")).build();\n        AutoCreateIndex autoCreateIndex = newAutoCreateIndex(settings);\n        ClusterState clusterState = ClusterState.builder(new ClusterName(\"test\")).metaData(MetaData.builder()).build();\n        expectForbidden(clusterState, autoCreateIndex, \"index\" + randomAlphaOfLengthBetween(1, 5), \"-index*\");\n        assertThat(autoCreateIndex.shouldAutoCreate(\"test\" + randomAlphaOfLengthBetween(1, 5), clusterState), equalTo(true));\n        expectNotMatch(clusterState, autoCreateIndex, \"does_not_match\" + randomAlphaOfLengthBetween(1, 5));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/support/AutoCreateIndexTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"}]
