[{"authorTime":"2020-07-10 21:44:56","codes":[{"authorDate":"2020-07-10 21:44:56","commitOrder":1,"curCode":"    public void testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver() throws Exception {\n        disableRepoConsistencyCheck(\"This test corrupts the repository on purpose\");\n\n        internalCluster().startMasterOnlyNodes(3);\n        internalCluster().startDataOnlyNode();\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"mock\", repoPath);\n        createIndexWithContent(\"index-one\");\n        createNSnapshots(repoName, randomIntBetween(2, 5));\n\n        final long generation = getRepositoryData(repoName).getGenId();\n        final String masterNode = internalCluster().getMasterName();\n        blockNodeOnAnyFiles(repoName, masterNode);\n        final ActionFuture<CreateSnapshotResponse> snapshotThree = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-three\");\n        waitForBlock(masterNode, repoName, TimeValue.timeValueSeconds(30L));\n\n        corruptIndexN(repoPath, generation);\n\n        final ActionFuture<CreateSnapshotResponse> snapshotFour = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-four\");\n        internalCluster().stopCurrentMasterNode();\n        ensureStableCluster(3);\n\n        awaitNoMoreRunningOperations();\n        expectThrows(ElasticsearchException.class, snapshotThree::actionGet);\n        expectThrows(ElasticsearchException.class, snapshotFour::actionGet);\n    }\n","date":"2020-07-10 21:44:56","endLine":720,"groupId":"23227","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/0c84f4732a9fbdea3d1f102ef66cf56607b9b8.src","preCode":"    public void testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver() throws Exception {\n        disableRepoConsistencyCheck(\"This test corrupts the repository on purpose\");\n\n        internalCluster().startMasterOnlyNodes(3);\n        internalCluster().startDataOnlyNode();\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"mock\", repoPath);\n        createIndexWithContent(\"index-one\");\n        createNSnapshots(repoName, randomIntBetween(2, 5));\n\n        final long generation = getRepositoryData(repoName).getGenId();\n        final String masterNode = internalCluster().getMasterName();\n        blockNodeOnAnyFiles(repoName, masterNode);\n        final ActionFuture<CreateSnapshotResponse> snapshotThree = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-three\");\n        waitForBlock(masterNode, repoName, TimeValue.timeValueSeconds(30L));\n\n        corruptIndexN(repoPath, generation);\n\n        final ActionFuture<CreateSnapshotResponse> snapshotFour = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-four\");\n        internalCluster().stopCurrentMasterNode();\n        ensureStableCluster(3);\n\n        awaitNoMoreRunningOperations();\n        expectThrows(ElasticsearchException.class, snapshotThree::actionGet);\n        expectThrows(ElasticsearchException.class, snapshotFour::actionGet);\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/ConcurrentSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"B"},{"authorDate":"2020-07-10 21:44:56","commitOrder":1,"curCode":"    public void testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver2() throws Exception {\n        disableRepoConsistencyCheck(\"This test corrupts the repository on purpose\");\n\n        internalCluster().startMasterOnlyNodes(3);\n        final String dataNode = internalCluster().startDataOnlyNode();\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"mock\", repoPath);\n        createIndexWithContent(\"index-one\");\n        createNSnapshots(repoName, randomIntBetween(2, 5));\n\n        final long generation = getRepositoryData(repoName).getGenId();\n        final String masterNode = internalCluster().getMasterName();\n        blockMasterFromFinalizingSnapshotOnIndexFile(repoName);\n        final ActionFuture<CreateSnapshotResponse> snapshotThree = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-three\");\n        waitForBlock(masterNode, repoName, TimeValue.timeValueSeconds(30L));\n\n        corruptIndexN(repoPath, generation);\n\n        final ActionFuture<CreateSnapshotResponse> snapshotFour = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-four\");\n        awaitNSnapshotsInProgress(2);\n\n        final NetworkDisruption networkDisruption = isolateMasterDisruption(NetworkDisruption.DISCONNECT);\n        internalCluster().setDisruptionScheme(networkDisruption);\n        networkDisruption.startDisrupting();\n        ensureStableCluster(3, dataNode);\n        unblockNode(repoName, masterNode);\n        networkDisruption.stopDisrupting();\n        awaitNoMoreRunningOperations();\n        expectThrows(ElasticsearchException.class, snapshotThree::actionGet);\n        expectThrows(ElasticsearchException.class, snapshotFour::actionGet);\n    }\n","date":"2020-07-10 21:44:56","endLine":753,"groupId":"14576","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/0c84f4732a9fbdea3d1f102ef66cf56607b9b8.src","preCode":"    public void testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver2() throws Exception {\n        disableRepoConsistencyCheck(\"This test corrupts the repository on purpose\");\n\n        internalCluster().startMasterOnlyNodes(3);\n        final String dataNode = internalCluster().startDataOnlyNode();\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"mock\", repoPath);\n        createIndexWithContent(\"index-one\");\n        createNSnapshots(repoName, randomIntBetween(2, 5));\n\n        final long generation = getRepositoryData(repoName).getGenId();\n        final String masterNode = internalCluster().getMasterName();\n        blockMasterFromFinalizingSnapshotOnIndexFile(repoName);\n        final ActionFuture<CreateSnapshotResponse> snapshotThree = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-three\");\n        waitForBlock(masterNode, repoName, TimeValue.timeValueSeconds(30L));\n\n        corruptIndexN(repoPath, generation);\n\n        final ActionFuture<CreateSnapshotResponse> snapshotFour = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-four\");\n        awaitNSnapshotsInProgress(2);\n\n        final NetworkDisruption networkDisruption = isolateMasterDisruption(NetworkDisruption.DISCONNECT);\n        internalCluster().setDisruptionScheme(networkDisruption);\n        networkDisruption.startDisrupting();\n        ensureStableCluster(3, dataNode);\n        unblockNode(repoName, masterNode);\n        networkDisruption.stopDisrupting();\n        awaitNoMoreRunningOperations();\n        expectThrows(ElasticsearchException.class, snapshotThree::actionGet);\n        expectThrows(ElasticsearchException.class, snapshotFour::actionGet);\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/ConcurrentSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"B"}],"commitId":"366ca378a8644d6654417988820c67f4feb714fe","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-10 21:44:56","modifiedFileCount":"565","status":"B","submitter":"Luca Cavanna"},{"authorTime":"2020-09-18 21:51:56","codes":[{"authorDate":"2020-07-10 21:44:56","commitOrder":2,"curCode":"    public void testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver() throws Exception {\n        disableRepoConsistencyCheck(\"This test corrupts the repository on purpose\");\n\n        internalCluster().startMasterOnlyNodes(3);\n        internalCluster().startDataOnlyNode();\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"mock\", repoPath);\n        createIndexWithContent(\"index-one\");\n        createNSnapshots(repoName, randomIntBetween(2, 5));\n\n        final long generation = getRepositoryData(repoName).getGenId();\n        final String masterNode = internalCluster().getMasterName();\n        blockNodeOnAnyFiles(repoName, masterNode);\n        final ActionFuture<CreateSnapshotResponse> snapshotThree = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-three\");\n        waitForBlock(masterNode, repoName, TimeValue.timeValueSeconds(30L));\n\n        corruptIndexN(repoPath, generation);\n\n        final ActionFuture<CreateSnapshotResponse> snapshotFour = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-four\");\n        internalCluster().stopCurrentMasterNode();\n        ensureStableCluster(3);\n\n        awaitNoMoreRunningOperations();\n        expectThrows(ElasticsearchException.class, snapshotThree::actionGet);\n        expectThrows(ElasticsearchException.class, snapshotFour::actionGet);\n    }\n","date":"2020-07-10 21:44:56","endLine":720,"groupId":"23227","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/0c84f4732a9fbdea3d1f102ef66cf56607b9b8.src","preCode":"    public void testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver() throws Exception {\n        disableRepoConsistencyCheck(\"This test corrupts the repository on purpose\");\n\n        internalCluster().startMasterOnlyNodes(3);\n        internalCluster().startDataOnlyNode();\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"mock\", repoPath);\n        createIndexWithContent(\"index-one\");\n        createNSnapshots(repoName, randomIntBetween(2, 5));\n\n        final long generation = getRepositoryData(repoName).getGenId();\n        final String masterNode = internalCluster().getMasterName();\n        blockNodeOnAnyFiles(repoName, masterNode);\n        final ActionFuture<CreateSnapshotResponse> snapshotThree = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-three\");\n        waitForBlock(masterNode, repoName, TimeValue.timeValueSeconds(30L));\n\n        corruptIndexN(repoPath, generation);\n\n        final ActionFuture<CreateSnapshotResponse> snapshotFour = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-four\");\n        internalCluster().stopCurrentMasterNode();\n        ensureStableCluster(3);\n\n        awaitNoMoreRunningOperations();\n        expectThrows(ElasticsearchException.class, snapshotThree::actionGet);\n        expectThrows(ElasticsearchException.class, snapshotFour::actionGet);\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/ConcurrentSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"N"},{"authorDate":"2020-09-18 21:51:56","commitOrder":2,"curCode":"    public void testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver2() throws Exception {\n        disableRepoConsistencyCheck(\"This test corrupts the repository on purpose\");\n\n        internalCluster().startMasterOnlyNodes(3);\n        final String dataNode = internalCluster().startDataOnlyNode();\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"mock\", repoPath);\n        createIndexWithContent(\"index-one\");\n        createNSnapshots(repoName, randomIntBetween(2, 5));\n\n        final long generation = getRepositoryData(repoName).getGenId();\n        final String masterNode = internalCluster().getMasterName();\n        blockMasterFromFinalizingSnapshotOnIndexFile(repoName);\n        final ActionFuture<CreateSnapshotResponse> snapshotThree = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-three\");\n        waitForBlock(masterNode, repoName, TimeValue.timeValueSeconds(30L));\n\n        corruptIndexN(repoPath, generation);\n\n        final ActionFuture<CreateSnapshotResponse> snapshotFour = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-four\");\n        awaitNumberOfSnapshotsInProgress(2);\n\n        final NetworkDisruption networkDisruption = isolateMasterDisruption(NetworkDisruption.DISCONNECT);\n        internalCluster().setDisruptionScheme(networkDisruption);\n        networkDisruption.startDisrupting();\n        ensureStableCluster(3, dataNode);\n        unblockNode(repoName, masterNode);\n        networkDisruption.stopDisrupting();\n        awaitNoMoreRunningOperations();\n        expectThrows(ElasticsearchException.class, snapshotThree::actionGet);\n        expectThrows(ElasticsearchException.class, snapshotFour::actionGet);\n    }\n","date":"2020-09-18 21:51:56","endLine":767,"groupId":"14576","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/39/7c9def6411e74384e8bbaf80b0663f73957168.src","preCode":"    public void testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver2() throws Exception {\n        disableRepoConsistencyCheck(\"This test corrupts the repository on purpose\");\n\n        internalCluster().startMasterOnlyNodes(3);\n        final String dataNode = internalCluster().startDataOnlyNode();\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"mock\", repoPath);\n        createIndexWithContent(\"index-one\");\n        createNSnapshots(repoName, randomIntBetween(2, 5));\n\n        final long generation = getRepositoryData(repoName).getGenId();\n        final String masterNode = internalCluster().getMasterName();\n        blockMasterFromFinalizingSnapshotOnIndexFile(repoName);\n        final ActionFuture<CreateSnapshotResponse> snapshotThree = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-three\");\n        waitForBlock(masterNode, repoName, TimeValue.timeValueSeconds(30L));\n\n        corruptIndexN(repoPath, generation);\n\n        final ActionFuture<CreateSnapshotResponse> snapshotFour = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-four\");\n        awaitNSnapshotsInProgress(2);\n\n        final NetworkDisruption networkDisruption = isolateMasterDisruption(NetworkDisruption.DISCONNECT);\n        internalCluster().setDisruptionScheme(networkDisruption);\n        networkDisruption.startDisrupting();\n        ensureStableCluster(3, dataNode);\n        unblockNode(repoName, masterNode);\n        networkDisruption.stopDisrupting();\n        awaitNoMoreRunningOperations();\n        expectThrows(ElasticsearchException.class, snapshotThree::actionGet);\n        expectThrows(ElasticsearchException.class, snapshotFour::actionGet);\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/ConcurrentSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":736,"status":"M"}],"commitId":"1b8547e5766f7acb1bbf1b255c1448e1bc85f43e","commitMessage":"@@@Dry up Snapshot IT Infrastructure (#62578)\n\nMainly just shortening the diff of #61839 here by moving test utilities\nto the abstract test case.\nAlso.  making use of the now available functionality to simplify existing tests\nand improve logging in them.\n","date":"2020-09-18 21:51:56","modifiedFileCount":"6","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-10-15 00:05:10","codes":[{"authorDate":"2020-10-15 00:05:10","commitOrder":3,"curCode":"    public void testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver() throws Exception {\n        disableRepoConsistencyCheck(\"This test corrupts the repository on purpose\");\n\n        internalCluster().startMasterOnlyNodes(3);\n        internalCluster().startDataOnlyNode();\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"mock\", repoPath);\n        createIndexWithContent(\"index-one\");\n        createNSnapshots(repoName, randomIntBetween(2, 5));\n\n        final long generation = getRepositoryData(repoName).getGenId();\n        final String masterNode = internalCluster().getMasterName();\n        blockNodeOnAnyFiles(repoName, masterNode);\n        final ActionFuture<CreateSnapshotResponse> snapshotThree = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-three\");\n        waitForBlock(masterNode, repoName);\n\n        corruptIndexN(repoPath, generation);\n\n        final ActionFuture<CreateSnapshotResponse> snapshotFour = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-four\");\n        internalCluster().stopCurrentMasterNode();\n        ensureStableCluster(3);\n\n        awaitNoMoreRunningOperations();\n        expectThrows(ElasticsearchException.class, snapshotThree::actionGet);\n        expectThrows(ElasticsearchException.class, snapshotFour::actionGet);\n    }\n","date":"2020-10-15 00:05:10","endLine":733,"groupId":"106264","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1e/c29efe77e41cc9fd48f56bf1126d2c1aa596c3.src","preCode":"    public void testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver() throws Exception {\n        disableRepoConsistencyCheck(\"This test corrupts the repository on purpose\");\n\n        internalCluster().startMasterOnlyNodes(3);\n        internalCluster().startDataOnlyNode();\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"mock\", repoPath);\n        createIndexWithContent(\"index-one\");\n        createNSnapshots(repoName, randomIntBetween(2, 5));\n\n        final long generation = getRepositoryData(repoName).getGenId();\n        final String masterNode = internalCluster().getMasterName();\n        blockNodeOnAnyFiles(repoName, masterNode);\n        final ActionFuture<CreateSnapshotResponse> snapshotThree = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-three\");\n        waitForBlock(masterNode, repoName, TimeValue.timeValueSeconds(30L));\n\n        corruptIndexN(repoPath, generation);\n\n        final ActionFuture<CreateSnapshotResponse> snapshotFour = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-four\");\n        internalCluster().stopCurrentMasterNode();\n        ensureStableCluster(3);\n\n        awaitNoMoreRunningOperations();\n        expectThrows(ElasticsearchException.class, snapshotThree::actionGet);\n        expectThrows(ElasticsearchException.class, snapshotFour::actionGet);\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/ConcurrentSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":707,"status":"M"},{"authorDate":"2020-10-15 00:05:10","commitOrder":3,"curCode":"    public void testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver2() throws Exception {\n        disableRepoConsistencyCheck(\"This test corrupts the repository on purpose\");\n\n        internalCluster().startMasterOnlyNodes(3);\n        final String dataNode = internalCluster().startDataOnlyNode();\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"mock\", repoPath);\n        createIndexWithContent(\"index-one\");\n        createNSnapshots(repoName, randomIntBetween(2, 5));\n\n        final long generation = getRepositoryData(repoName).getGenId();\n        final String masterNode = internalCluster().getMasterName();\n        blockMasterFromFinalizingSnapshotOnIndexFile(repoName);\n        final ActionFuture<CreateSnapshotResponse> snapshotThree = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-three\");\n        waitForBlock(masterNode, repoName);\n\n        corruptIndexN(repoPath, generation);\n\n        final ActionFuture<CreateSnapshotResponse> snapshotFour = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-four\");\n        awaitNumberOfSnapshotsInProgress(2);\n\n        final NetworkDisruption networkDisruption = isolateMasterDisruption(NetworkDisruption.DISCONNECT);\n        internalCluster().setDisruptionScheme(networkDisruption);\n        networkDisruption.startDisrupting();\n        ensureStableCluster(3, dataNode);\n        unblockNode(repoName, masterNode);\n        networkDisruption.stopDisrupting();\n        awaitNoMoreRunningOperations();\n        expectThrows(ElasticsearchException.class, snapshotThree::actionGet);\n        expectThrows(ElasticsearchException.class, snapshotFour::actionGet);\n    }\n","date":"2020-10-15 00:05:10","endLine":766,"groupId":"106264","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1e/c29efe77e41cc9fd48f56bf1126d2c1aa596c3.src","preCode":"    public void testQueuedSnapshotOperationsAndBrokenRepoOnMasterFailOver2() throws Exception {\n        disableRepoConsistencyCheck(\"This test corrupts the repository on purpose\");\n\n        internalCluster().startMasterOnlyNodes(3);\n        final String dataNode = internalCluster().startDataOnlyNode();\n        final String repoName = \"test-repo\";\n        final Path repoPath = randomRepoPath();\n        createRepository(repoName, \"mock\", repoPath);\n        createIndexWithContent(\"index-one\");\n        createNSnapshots(repoName, randomIntBetween(2, 5));\n\n        final long generation = getRepositoryData(repoName).getGenId();\n        final String masterNode = internalCluster().getMasterName();\n        blockMasterFromFinalizingSnapshotOnIndexFile(repoName);\n        final ActionFuture<CreateSnapshotResponse> snapshotThree = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-three\");\n        waitForBlock(masterNode, repoName, TimeValue.timeValueSeconds(30L));\n\n        corruptIndexN(repoPath, generation);\n\n        final ActionFuture<CreateSnapshotResponse> snapshotFour = startFullSnapshotFromNonMasterClient(repoName, \"snapshot-four\");\n        awaitNumberOfSnapshotsInProgress(2);\n\n        final NetworkDisruption networkDisruption = isolateMasterDisruption(NetworkDisruption.DISCONNECT);\n        internalCluster().setDisruptionScheme(networkDisruption);\n        networkDisruption.startDisrupting();\n        ensureStableCluster(3, dataNode);\n        unblockNode(repoName, masterNode);\n        networkDisruption.stopDisrupting();\n        awaitNoMoreRunningOperations();\n        expectThrows(ElasticsearchException.class, snapshotThree::actionGet);\n        expectThrows(ElasticsearchException.class, snapshotFour::actionGet);\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/snapshots/ConcurrentSnapshotsIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":735,"status":"M"}],"commitId":"a7a1c2445640bc40df463c96864c76f918a6fb35","commitMessage":"@@@Simplify Snapshot ITs Further (#63655)\n\n* Removing some more duplication and redundant logic.\n* Aligning all timeouts to 30s (60s or even 10 minute timeouts should be unnecessary.  if they aren't we should figure out why)\n* Remove some usage of `actionGet()` in tests (it's just evil to suppress the stack-trace)","date":"2020-10-15 00:05:10","modifiedFileCount":"17","status":"M","submitter":"Armin Braun"}]
