[{"authorTime":"2018-12-18 04:38:14","codes":[{"authorDate":"2018-12-18 04:38:14","commitOrder":1,"curCode":"    public void testGeohashConfiguration() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                    .field(\"type\", \"geo_shape\")\n                    .field(\"tree\", \"geohash\")\n                    .field(\"tree_levels\", \"4\")\n                    .field(\"distance_error_pct\", \"0.1\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        LegacyGeoShapeFieldMapper geoShapeFieldMapper = (LegacyGeoShapeFieldMapper) fieldMapper;\n        PrefixTreeStrategy strategy = geoShapeFieldMapper.fieldType().defaultPrefixTreeStrategy();\n\n        assertThat(strategy.getDistErrPct(), equalTo(0.1));\n        assertThat(strategy.getGrid(), instanceOf(GeohashPrefixTree.class));\n        assertThat(strategy.getGrid().getMaxLevels(), equalTo(4));\n        assertFieldWarnings(\"tree\", \"tree_levels\", \"distance_error_pct\");\n    }\n","date":"2018-12-18 04:38:14","endLine":266,"groupId":"40839","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGeohashConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/d8c72531db20d582f355aeece9105b3db672b6.src","preCode":"    public void testGeohashConfiguration() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                    .field(\"type\", \"geo_shape\")\n                    .field(\"tree\", \"geohash\")\n                    .field(\"tree_levels\", \"4\")\n                    .field(\"distance_error_pct\", \"0.1\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        LegacyGeoShapeFieldMapper geoShapeFieldMapper = (LegacyGeoShapeFieldMapper) fieldMapper;\n        PrefixTreeStrategy strategy = geoShapeFieldMapper.fieldType().defaultPrefixTreeStrategy();\n\n        assertThat(strategy.getDistErrPct(), equalTo(0.1));\n        assertThat(strategy.getGrid(), instanceOf(GeohashPrefixTree.class));\n        assertThat(strategy.getGrid().getMaxLevels(), equalTo(4));\n        assertFieldWarnings(\"tree\", \"tree_levels\", \"distance_error_pct\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"B"},{"authorDate":"2018-12-18 04:38:14","commitOrder":1,"curCode":"    public void testQuadtreeConfiguration() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                    .field(\"type\", \"geo_shape\")\n                    .field(\"tree\", \"quadtree\")\n                    .field(\"tree_levels\", \"6\")\n                    .field(\"distance_error_pct\", \"0.5\")\n                    .field(\"points_only\", true)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        LegacyGeoShapeFieldMapper geoShapeFieldMapper = (LegacyGeoShapeFieldMapper) fieldMapper;\n        PrefixTreeStrategy strategy = geoShapeFieldMapper.fieldType().defaultPrefixTreeStrategy();\n\n        assertThat(strategy.getDistErrPct(), equalTo(0.5));\n        assertThat(strategy.getGrid(), instanceOf(QuadPrefixTree.class));\n        assertThat(strategy.getGrid().getMaxLevels(), equalTo(6));\n        assertThat(strategy.isPointsOnly(), equalTo(true));\n        assertFieldWarnings(\"tree\", \"tree_levels\", \"distance_error_pct\", \"points_only\");\n    }\n","date":"2018-12-18 04:38:14","endLine":292,"groupId":"40839","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testQuadtreeConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/11/d8c72531db20d582f355aeece9105b3db672b6.src","preCode":"    public void testQuadtreeConfiguration() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                    .field(\"type\", \"geo_shape\")\n                    .field(\"tree\", \"quadtree\")\n                    .field(\"tree_levels\", \"6\")\n                    .field(\"distance_error_pct\", \"0.5\")\n                    .field(\"points_only\", true)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        LegacyGeoShapeFieldMapper geoShapeFieldMapper = (LegacyGeoShapeFieldMapper) fieldMapper;\n        PrefixTreeStrategy strategy = geoShapeFieldMapper.fieldType().defaultPrefixTreeStrategy();\n\n        assertThat(strategy.getDistErrPct(), equalTo(0.5));\n        assertThat(strategy.getGrid(), instanceOf(QuadPrefixTree.class));\n        assertThat(strategy.getGrid().getMaxLevels(), equalTo(6));\n        assertThat(strategy.isPointsOnly(), equalTo(true));\n        assertFieldWarnings(\"tree\", \"tree_levels\", \"distance_error_pct\", \"points_only\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"B"}],"commitId":"5bc7822562a6eefa4a64743233160cdc9f431adf","commitMessage":"@@@[Geo] Integrate Lucene's LatLonShape (BKD Backed GeoShapes) as default `geo_shape` indexing approach (#35320)\n\nThis commit  exposes lucene's LatLonShape field as the\ndefault type in GeoShapeFieldMapper. To use the new \nindexing approach.  simply set \"type\" : \"geo_shape\" in \nthe mappings without setting any of the strategy.  precision.  \ntree_levels.  or distance_error_pct parameters. Note the \nfollowing when using the new indexing approach:\n\n* geo_shape query does not support querying by \nMULTIPOINT.\n* LINESTRING and MULTILINESTRING queries do not \nyet support WITHIN relation.\n* CONTAINS relation is not yet supported.\nThe tree.  precision.  tree_levels.  distance_error_pct.  \nand points_only parameters are deprecated.\n","date":"2018-12-18 04:38:14","modifiedFileCount":"22","status":"B","submitter":"Nick Knize"},{"authorTime":"2020-08-25 01:10:47","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":2,"curCode":"    public void testGeohashConfiguration() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(\n            fieldMapping(\n                b -> b.field(\"type\", \"geo_shape\").field(\"tree\", \"geohash\").field(\"tree_levels\", \"4\").field(\"distance_error_pct\", \"0.1\")\n            )\n        );\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        LegacyGeoShapeFieldMapper geoShapeFieldMapper = (LegacyGeoShapeFieldMapper) fieldMapper;\n        PrefixTreeStrategy strategy = geoShapeFieldMapper.fieldType().defaultPrefixTreeStrategy();\n\n        assertThat(strategy.getDistErrPct(), equalTo(0.1));\n        assertThat(strategy.getGrid(), instanceOf(GeohashPrefixTree.class));\n        assertThat(strategy.getGrid().getMaxLevels(), equalTo(4));\n        assertFieldWarnings(\"tree\", \"tree_levels\", \"distance_error_pct\", \"strategy\");\n    }\n","date":"2020-08-25 01:10:47","endLine":250,"groupId":"103100","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGeohashConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/73/82d4645d25bf6f8fa9932342b46e3e7b3008b6.src","preCode":"    public void testGeohashConfiguration() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                    .field(\"type\", \"geo_shape\")\n                    .field(\"tree\", \"geohash\")\n                    .field(\"tree_levels\", \"4\")\n                    .field(\"distance_error_pct\", \"0.1\")\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        LegacyGeoShapeFieldMapper geoShapeFieldMapper = (LegacyGeoShapeFieldMapper) fieldMapper;\n        PrefixTreeStrategy strategy = geoShapeFieldMapper.fieldType().defaultPrefixTreeStrategy();\n\n        assertThat(strategy.getDistErrPct(), equalTo(0.1));\n        assertThat(strategy.getGrid(), instanceOf(GeohashPrefixTree.class));\n        assertThat(strategy.getGrid().getMaxLevels(), equalTo(4));\n        assertFieldWarnings(\"tree\", \"tree_levels\", \"distance_error_pct\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"},{"authorDate":"2020-08-25 01:10:47","commitOrder":2,"curCode":"    public void testQuadtreeConfiguration() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(\n            fieldMapping(\n                b -> b.field(\"type\", \"geo_shape\")\n                    .field(\"tree\", \"quadtree\")\n                    .field(\"tree_levels\", \"6\")\n                    .field(\"distance_error_pct\", \"0.5\")\n                    .field(\"points_only\", true)\n            )\n        );\n        Mapper fieldMapper = mapper.mappers().getMapper(\"field\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        LegacyGeoShapeFieldMapper geoShapeFieldMapper = (LegacyGeoShapeFieldMapper) fieldMapper;\n        PrefixTreeStrategy strategy = geoShapeFieldMapper.fieldType().defaultPrefixTreeStrategy();\n\n        assertThat(strategy.getDistErrPct(), equalTo(0.5));\n        assertThat(strategy.getGrid(), instanceOf(QuadPrefixTree.class));\n        assertThat(strategy.getGrid().getMaxLevels(), equalTo(6));\n        assertThat(strategy.isPointsOnly(), equalTo(true));\n        assertFieldWarnings(\"tree\", \"tree_levels\", \"distance_error_pct\", \"points_only\", \"strategy\");\n    }\n","date":"2020-08-25 01:10:47","endLine":273,"groupId":"103100","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testQuadtreeConfiguration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/73/82d4645d25bf6f8fa9932342b46e3e7b3008b6.src","preCode":"    public void testQuadtreeConfiguration() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type1\")\n                .startObject(\"properties\").startObject(\"location\")\n                    .field(\"type\", \"geo_shape\")\n                    .field(\"tree\", \"quadtree\")\n                    .field(\"tree_levels\", \"6\")\n                    .field(\"distance_error_pct\", \"0.5\")\n                    .field(\"points_only\", true)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type1\", new CompressedXContent(mapping));\n        Mapper fieldMapper = defaultMapper.mappers().getMapper(\"location\");\n        assertThat(fieldMapper, instanceOf(LegacyGeoShapeFieldMapper.class));\n\n        LegacyGeoShapeFieldMapper geoShapeFieldMapper = (LegacyGeoShapeFieldMapper) fieldMapper;\n        PrefixTreeStrategy strategy = geoShapeFieldMapper.fieldType().defaultPrefixTreeStrategy();\n\n        assertThat(strategy.getDistErrPct(), equalTo(0.5));\n        assertThat(strategy.getGrid(), instanceOf(QuadPrefixTree.class));\n        assertThat(strategy.getGrid().getMaxLevels(), equalTo(6));\n        assertThat(strategy.isPointsOnly(), equalTo(true));\n        assertFieldWarnings(\"tree\", \"tree_levels\", \"distance_error_pct\", \"points_only\");\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/LegacyGeoShapeFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"e2dd0bde26e6c1f9f1a5137a5bf432d348e4205e","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-25 01:10:47","modifiedFileCount":"48","status":"M","submitter":"Nik Everett"}]
