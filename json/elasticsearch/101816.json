[{"authorTime":"2019-08-10 01:22:00","codes":[{"authorDate":"2019-08-10 01:22:00","commitOrder":1,"curCode":"    private Line parseLine(StreamTokenizer stream) throws IOException, ParseException {\n        String token = nextEmptyOrOpen(stream);\n        if (token.equals(EMPTY)) {\n            return Line.EMPTY;\n        }\n        ArrayList<Double> lats = new ArrayList<>();\n        ArrayList<Double> lons = new ArrayList<>();\n        ArrayList<Double> alts = new ArrayList<>();\n        parseCoordinates(stream, lats, lons, alts);\n        if (alts.isEmpty()) {\n            return new Line(toArray(lons), toArray(lats));\n        } else {\n            return new Line(toArray(lons), toArray(lats), toArray(alts));\n        }\n    }\n","date":"2019-08-10 01:22:00","endLine":373,"groupId":"71171","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parseLine","params":"(StreamTokenizerstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a5/9820785e96881355480da6e0cc5f93f8fac7a4.src","preCode":"    private Line parseLine(StreamTokenizer stream) throws IOException, ParseException {\n        String token = nextEmptyOrOpen(stream);\n        if (token.equals(EMPTY)) {\n            return Line.EMPTY;\n        }\n        ArrayList<Double> lats = new ArrayList<>();\n        ArrayList<Double> lons = new ArrayList<>();\n        ArrayList<Double> alts = new ArrayList<>();\n        parseCoordinates(stream, lats, lons, alts);\n        if (alts.isEmpty()) {\n            return new Line(toArray(lons), toArray(lats));\n        } else {\n            return new Line(toArray(lons), toArray(lats), toArray(alts));\n        }\n    }\n","realPath":"libs/geo/src/main/java/org/elasticsearch/geometry/utils/WellKnownText.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"B"},{"authorDate":"2019-08-10 01:22:00","commitOrder":1,"curCode":"    private LinearRing parsePolygonHole(StreamTokenizer stream) throws IOException, ParseException {\n        nextOpener(stream);\n        ArrayList<Double> lats = new ArrayList<>();\n        ArrayList<Double> lons = new ArrayList<>();\n        ArrayList<Double> alts = new ArrayList<>();\n        parseCoordinates(stream, lats, lons, alts);\n        closeLinearRingIfCoerced(lats, lons, alts);\n        if (alts.isEmpty()) {\n            return new LinearRing(toArray(lons), toArray(lats));\n        } else {\n            return new LinearRing(toArray(lons), toArray(lats), toArray(alts));\n        }\n    }\n","date":"2019-08-10 01:22:00","endLine":400,"groupId":"71170","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"parsePolygonHole","params":"(StreamTokenizerstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a5/9820785e96881355480da6e0cc5f93f8fac7a4.src","preCode":"    private LinearRing parsePolygonHole(StreamTokenizer stream) throws IOException, ParseException {\n        nextOpener(stream);\n        ArrayList<Double> lats = new ArrayList<>();\n        ArrayList<Double> lons = new ArrayList<>();\n        ArrayList<Double> alts = new ArrayList<>();\n        parseCoordinates(stream, lats, lons, alts);\n        closeLinearRingIfCoerced(lats, lons, alts);\n        if (alts.isEmpty()) {\n            return new LinearRing(toArray(lons), toArray(lats));\n        } else {\n            return new LinearRing(toArray(lons), toArray(lats), toArray(alts));\n        }\n    }\n","realPath":"libs/geo/src/main/java/org/elasticsearch/geometry/utils/WellKnownText.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"B"}],"commitId":"13a8835e5a8615aeb8304b48fd9e543a83361e13","commitMessage":"@@@Geo: Change order of parameter in Geometries to lon.  lat (#45332)\n\nChanges the order of parameters in Geometries from lat.  lon to lon.  lat\nand moves all Geometry classes are moved to the\norg.elasticsearch.geomtery package.\n\nCloses #45048","date":"2019-08-10 01:22:00","modifiedFileCount":"65","status":"B","submitter":"Igor Motov"},{"authorTime":"2021-06-17 05:31:31","codes":[{"authorDate":"2021-06-17 05:31:31","commitOrder":2,"curCode":"    private static Line parseLine(StreamTokenizer stream) throws IOException, ParseException {\n        String token = nextEmptyOrOpen(stream);\n        if (token.equals(EMPTY)) {\n            return Line.EMPTY;\n        }\n        ArrayList<Double> lats = new ArrayList<>();\n        ArrayList<Double> lons = new ArrayList<>();\n        ArrayList<Double> alts = new ArrayList<>();\n        parseCoordinates(stream, lats, lons, alts);\n        if (alts.isEmpty()) {\n            return new Line(toArray(lons), toArray(lats));\n        } else {\n            return new Line(toArray(lons), toArray(lats), toArray(alts));\n        }\n    }\n","date":"2021-06-17 05:31:31","endLine":356,"groupId":"101816","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"parseLine","params":"(StreamTokenizerstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c7/b2f641a0c444376544de5f5e5d1516164e618f.src","preCode":"    private Line parseLine(StreamTokenizer stream) throws IOException, ParseException {\n        String token = nextEmptyOrOpen(stream);\n        if (token.equals(EMPTY)) {\n            return Line.EMPTY;\n        }\n        ArrayList<Double> lats = new ArrayList<>();\n        ArrayList<Double> lons = new ArrayList<>();\n        ArrayList<Double> alts = new ArrayList<>();\n        parseCoordinates(stream, lats, lons, alts);\n        if (alts.isEmpty()) {\n            return new Line(toArray(lons), toArray(lats));\n        } else {\n            return new Line(toArray(lons), toArray(lats), toArray(alts));\n        }\n    }\n","realPath":"libs/geo/src/main/java/org/elasticsearch/geometry/utils/WellKnownText.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2021-06-17 05:31:31","commitOrder":2,"curCode":"    private static LinearRing parsePolygonHole(StreamTokenizer stream, boolean coerce) throws IOException, ParseException {\n        nextOpener(stream);\n        ArrayList<Double> lats = new ArrayList<>();\n        ArrayList<Double> lons = new ArrayList<>();\n        ArrayList<Double> alts = new ArrayList<>();\n        parseCoordinates(stream, lats, lons, alts);\n        closeLinearRingIfCoerced(lats, lons, alts, coerce);\n        if (alts.isEmpty()) {\n            return new LinearRing(toArray(lons), toArray(lats));\n        } else {\n            return new LinearRing(toArray(lons), toArray(lats), toArray(alts));\n        }\n    }\n","date":"2021-06-17 05:31:31","endLine":383,"groupId":"101816","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"parsePolygonHole","params":"(StreamTokenizerstream@booleancoerce)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c7/b2f641a0c444376544de5f5e5d1516164e618f.src","preCode":"    private LinearRing parsePolygonHole(StreamTokenizer stream) throws IOException, ParseException {\n        nextOpener(stream);\n        ArrayList<Double> lats = new ArrayList<>();\n        ArrayList<Double> lons = new ArrayList<>();\n        ArrayList<Double> alts = new ArrayList<>();\n        parseCoordinates(stream, lats, lons, alts);\n        closeLinearRingIfCoerced(lats, lons, alts);\n        if (alts.isEmpty()) {\n            return new LinearRing(toArray(lons), toArray(lats));\n        } else {\n            return new LinearRing(toArray(lons), toArray(lats), toArray(alts));\n        }\n    }\n","realPath":"libs/geo/src/main/java/org/elasticsearch/geometry/utils/WellKnownText.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"M"}],"commitId":"6a8f8f3f718bd21bf14176049c9e1f1def13463b","commitMessage":"@@@Merge remote-tracking branch 'elastic/master' into feature/vector-tiles\n","date":"2021-06-17 05:31:31","modifiedFileCount":"4429","status":"M","submitter":"Igor Motov"}]
