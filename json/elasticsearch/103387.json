[{"authorTime":"2020-04-07 19:08:02","codes":[{"authorDate":"2020-03-19 00:03:52","commitOrder":2,"curCode":"    protected GeoShapeQueryBuilder doCreateTestQueryBuilder(boolean indexedShape) {\n        RandomShapeGenerator.ShapeType shapeType = randomFrom(\n            RandomShapeGenerator.ShapeType.POINT,\n            RandomShapeGenerator.ShapeType.MULTIPOINT,\n            RandomShapeGenerator.ShapeType.LINESTRING,\n            RandomShapeGenerator.ShapeType.MULTILINESTRING,\n            RandomShapeGenerator.ShapeType.POLYGON);\n        ShapeBuilder<?, ?, ?> shape = RandomShapeGenerator.createShapeWithin(random(), null, shapeType);\n        GeoShapeQueryBuilder builder;\n        clearShapeFields();\n        if (indexedShape == false) {\n            builder = new GeoShapeQueryBuilder(fieldName(), shape);\n        } else {\n            indexedShapeToReturn = shape;\n            indexedShapeId = randomAlphaOfLengthBetween(3, 20);\n            builder = new GeoShapeQueryBuilder(fieldName(), indexedShapeId);\n            if (randomBoolean()) {\n                indexedShapeIndex = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapeIndex(indexedShapeIndex);\n            }\n            if (randomBoolean()) {\n                indexedShapePath = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapePath(indexedShapePath);\n            }\n            if (randomBoolean()) {\n                indexedShapeRouting = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapeRouting(indexedShapeRouting);\n            }\n        }\n        if (randomBoolean()) {\n            QueryShardContext context = createShardContext();\n            if (context.indexVersionCreated().onOrAfter(Version.V_7_5_0)) { \r\n                if (shapeType == RandomShapeGenerator.ShapeType.LINESTRING || shapeType == RandomShapeGenerator.ShapeType.MULTILINESTRING) {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.CONTAINS));\n                } else {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS,\n                        ShapeRelation.WITHIN, ShapeRelation.CONTAINS));\n                }\n            } else {\n                if (shapeType == RandomShapeGenerator.ShapeType.LINESTRING || shapeType == RandomShapeGenerator.ShapeType.MULTILINESTRING) {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS));\n                } else {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.WITHIN));\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            builder.ignoreUnmapped(randomBoolean());\n        }\n        return builder;\n    }\n","date":"2020-03-19 00:03:52","endLine":83,"groupId":"7753","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doCreateTestQueryBuilder","params":"(booleanindexedShape)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/36/b438994c076b5a975826035a8e1808e8388ba2.src","preCode":"    protected GeoShapeQueryBuilder doCreateTestQueryBuilder(boolean indexedShape) {\n        RandomShapeGenerator.ShapeType shapeType = randomFrom(\n            RandomShapeGenerator.ShapeType.POINT,\n            RandomShapeGenerator.ShapeType.MULTIPOINT,\n            RandomShapeGenerator.ShapeType.LINESTRING,\n            RandomShapeGenerator.ShapeType.MULTILINESTRING,\n            RandomShapeGenerator.ShapeType.POLYGON);\n        ShapeBuilder<?, ?, ?> shape = RandomShapeGenerator.createShapeWithin(random(), null, shapeType);\n        GeoShapeQueryBuilder builder;\n        clearShapeFields();\n        if (indexedShape == false) {\n            builder = new GeoShapeQueryBuilder(fieldName(), shape);\n        } else {\n            indexedShapeToReturn = shape;\n            indexedShapeId = randomAlphaOfLengthBetween(3, 20);\n            builder = new GeoShapeQueryBuilder(fieldName(), indexedShapeId);\n            if (randomBoolean()) {\n                indexedShapeIndex = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapeIndex(indexedShapeIndex);\n            }\n            if (randomBoolean()) {\n                indexedShapePath = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapePath(indexedShapePath);\n            }\n            if (randomBoolean()) {\n                indexedShapeRouting = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapeRouting(indexedShapeRouting);\n            }\n        }\n        if (randomBoolean()) {\n            QueryShardContext context = createShardContext();\n            if (context.indexVersionCreated().onOrAfter(Version.V_7_5_0)) { \r\n                if (shapeType == RandomShapeGenerator.ShapeType.LINESTRING || shapeType == RandomShapeGenerator.ShapeType.MULTILINESTRING) {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.CONTAINS));\n                } else {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS,\n                        ShapeRelation.WITHIN, ShapeRelation.CONTAINS));\n                }\n            } else {\n                if (shapeType == RandomShapeGenerator.ShapeType.LINESTRING || shapeType == RandomShapeGenerator.ShapeType.MULTILINESTRING) {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS));\n                } else {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.WITHIN));\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            builder.ignoreUnmapped(randomBoolean());\n        }\n        return builder;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/GeoShapeQueryBuilderGeoShapeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"NB"},{"authorDate":"2020-04-07 19:08:02","commitOrder":2,"curCode":"    protected ShapeRelation getShapeRelation(ShapeType type) {\n        QueryShardContext context = createShardContext();\n        if (context.indexVersionCreated().onOrAfter(Version.V_7_5_0)) { \r\n            if (type == ShapeType.LINESTRING || type == ShapeType.MULTILINESTRING) {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.CONTAINS);\n            } else {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS,\n                    ShapeRelation.WITHIN, ShapeRelation.CONTAINS);\n            }\n        } else {\n            if (type == ShapeType.LINESTRING || type == ShapeType.MULTILINESTRING) {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS);\n            } else {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.WITHIN);\n            }\n        }\n    }\n","date":"2020-04-07 19:08:02","endLine":46,"groupId":"2484","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getShapeRelation","params":"(ShapeTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/e9244575c4366efcc746b72ce489e8ab550feb.src","preCode":"    protected ShapeRelation getShapeRelation(ShapeType type) {\n        QueryShardContext context = createShardContext();\n        if (context.indexVersionCreated().onOrAfter(Version.V_7_5_0)) { \r\n            if (type == ShapeType.LINESTRING || type == ShapeType.MULTILINESTRING) {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.CONTAINS);\n            } else {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS,\n                    ShapeRelation.WITHIN, ShapeRelation.CONTAINS);\n            }\n        } else {\n            if (type == ShapeType.LINESTRING || type == ShapeType.MULTILINESTRING) {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS);\n            } else {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.WITHIN);\n            }\n        }\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/query/ShapeQueryBuilderOverShapeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"B"}],"commitId":"6182db5b77b4f349cb7ec2d52a7e3a9a42dff47e","commitMessage":"@@@Add new point field. (#53804)\n\nThis commit adds a new point field that is able to index arbitrary pair of values (x/y)\n in the cartesian space. It only supports filtering using shape queries at the moment.","date":"2020-04-07 19:08:02","modifiedFileCount":"5","status":"M","submitter":"Ignacio Vera"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-01-15 01:11:59","commitOrder":3,"curCode":"    protected GeoShapeQueryBuilder doCreateTestQueryBuilder(boolean indexedShape) {\n        RandomShapeGenerator.ShapeType shapeType = randomFrom(\n            RandomShapeGenerator.ShapeType.POINT,\n            RandomShapeGenerator.ShapeType.MULTIPOINT,\n            RandomShapeGenerator.ShapeType.LINESTRING,\n            RandomShapeGenerator.ShapeType.MULTILINESTRING,\n            RandomShapeGenerator.ShapeType.POLYGON);\n        ShapeBuilder<?, ?, ?> shape = RandomShapeGenerator.createShapeWithin(random(), null, shapeType);\n        GeoShapeQueryBuilder builder;\n        clearShapeFields();\n        if (indexedShape == false) {\n            builder = new GeoShapeQueryBuilder(fieldName(), shape);\n        } else {\n            indexedShapeToReturn = shape;\n            indexedShapeId = randomAlphaOfLengthBetween(3, 20);\n            builder = new GeoShapeQueryBuilder(fieldName(), indexedShapeId);\n            if (randomBoolean()) {\n                indexedShapeIndex = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapeIndex(indexedShapeIndex);\n            }\n            if (randomBoolean()) {\n                indexedShapePath = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapePath(indexedShapePath);\n            }\n            if (randomBoolean()) {\n                indexedShapeRouting = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapeRouting(indexedShapeRouting);\n            }\n        }\n        if (randomBoolean()) {\n            SearchExecutionContext context = createSearchExecutionContext();\n            if (context.indexVersionCreated().onOrAfter(Version.V_7_5_0)) { \r\n                if (shapeType == RandomShapeGenerator.ShapeType.LINESTRING || shapeType == RandomShapeGenerator.ShapeType.MULTILINESTRING) {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.CONTAINS));\n                } else {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS,\n                        ShapeRelation.WITHIN, ShapeRelation.CONTAINS));\n                }\n            } else {\n                if (shapeType == RandomShapeGenerator.ShapeType.LINESTRING || shapeType == RandomShapeGenerator.ShapeType.MULTILINESTRING) {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS));\n                } else {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.WITHIN));\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            builder.ignoreUnmapped(randomBoolean());\n        }\n        return builder;\n    }\n","date":"2021-01-15 01:11:59","endLine":83,"groupId":"7753","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doCreateTestQueryBuilder","params":"(booleanindexedShape)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6f/66e11176dd01f2ba9f45fb9f0790f9dbf59b8e.src","preCode":"    protected GeoShapeQueryBuilder doCreateTestQueryBuilder(boolean indexedShape) {\n        RandomShapeGenerator.ShapeType shapeType = randomFrom(\n            RandomShapeGenerator.ShapeType.POINT,\n            RandomShapeGenerator.ShapeType.MULTIPOINT,\n            RandomShapeGenerator.ShapeType.LINESTRING,\n            RandomShapeGenerator.ShapeType.MULTILINESTRING,\n            RandomShapeGenerator.ShapeType.POLYGON);\n        ShapeBuilder<?, ?, ?> shape = RandomShapeGenerator.createShapeWithin(random(), null, shapeType);\n        GeoShapeQueryBuilder builder;\n        clearShapeFields();\n        if (indexedShape == false) {\n            builder = new GeoShapeQueryBuilder(fieldName(), shape);\n        } else {\n            indexedShapeToReturn = shape;\n            indexedShapeId = randomAlphaOfLengthBetween(3, 20);\n            builder = new GeoShapeQueryBuilder(fieldName(), indexedShapeId);\n            if (randomBoolean()) {\n                indexedShapeIndex = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapeIndex(indexedShapeIndex);\n            }\n            if (randomBoolean()) {\n                indexedShapePath = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapePath(indexedShapePath);\n            }\n            if (randomBoolean()) {\n                indexedShapeRouting = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapeRouting(indexedShapeRouting);\n            }\n        }\n        if (randomBoolean()) {\n            QueryShardContext context = createShardContext();\n            if (context.indexVersionCreated().onOrAfter(Version.V_7_5_0)) { \r\n                if (shapeType == RandomShapeGenerator.ShapeType.LINESTRING || shapeType == RandomShapeGenerator.ShapeType.MULTILINESTRING) {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.CONTAINS));\n                } else {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS,\n                        ShapeRelation.WITHIN, ShapeRelation.CONTAINS));\n                }\n            } else {\n                if (shapeType == RandomShapeGenerator.ShapeType.LINESTRING || shapeType == RandomShapeGenerator.ShapeType.MULTILINESTRING) {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS));\n                } else {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.WITHIN));\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            builder.ignoreUnmapped(randomBoolean());\n        }\n        return builder;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/GeoShapeQueryBuilderGeoShapeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":3,"curCode":"    protected ShapeRelation getShapeRelation(ShapeType type) {\n        SearchExecutionContext context = createSearchExecutionContext();\n        if (context.indexVersionCreated().onOrAfter(Version.V_7_5_0)) { \r\n            if (type == ShapeType.LINESTRING || type == ShapeType.MULTILINESTRING) {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.CONTAINS);\n            } else {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS,\n                    ShapeRelation.WITHIN, ShapeRelation.CONTAINS);\n            }\n        } else {\n            if (type == ShapeType.LINESTRING || type == ShapeType.MULTILINESTRING) {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS);\n            } else {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.WITHIN);\n            }\n        }\n    }\n","date":"2021-01-15 01:11:59","endLine":46,"groupId":"2484","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getShapeRelation","params":"(ShapeTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/4ce8293ef845712f5e8f51825dec8c6e49cb1c.src","preCode":"    protected ShapeRelation getShapeRelation(ShapeType type) {\n        QueryShardContext context = createShardContext();\n        if (context.indexVersionCreated().onOrAfter(Version.V_7_5_0)) { \r\n            if (type == ShapeType.LINESTRING || type == ShapeType.MULTILINESTRING) {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.CONTAINS);\n            } else {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS,\n                    ShapeRelation.WITHIN, ShapeRelation.CONTAINS);\n            }\n        } else {\n            if (type == ShapeType.LINESTRING || type == ShapeType.MULTILINESTRING) {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS);\n            } else {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.WITHIN);\n            }\n        }\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/query/ShapeQueryBuilderOverShapeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"M"}],"commitId":"5852fbedf52c77b0a76c2c731fdd4982fb65cd87","commitMessage":"@@@Rename QueryShardContext -> SearchExecutionContext. (#67490)\n\nWe decided to rename `QueryShardContext` to clarify that it supports all parts\nof search request execution. Before there was confusion over whether it should\nonly be used for building queries.  or maybe only used in the query phase. This\nPR also updates the javadocs.\n\nCloses #64740.","date":"2021-01-15 01:11:59","modifiedFileCount":"357","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2021-01-15 01:11:59","codes":[{"authorDate":"2021-07-05 13:31:55","commitOrder":4,"curCode":"    protected GeoShapeQueryBuilder doCreateTestQueryBuilder(boolean indexedShape) {\n        ShapeType shapeType = randomFrom(\n            ShapeType.POINT,\n            ShapeType.MULTIPOINT,\n            ShapeType.LINESTRING,\n            ShapeType.MULTILINESTRING,\n            ShapeType.POLYGON);\n        Geometry geometry = GeometryTestUtils.randomGeometry(shapeType, false);\n        GeoShapeQueryBuilder builder;\n        clearShapeFields();\n        if (indexedShape == false) {\n            builder = new GeoShapeQueryBuilder(fieldName(), geometry);\n        } else {\n            indexedShapeToReturn = geometry;\n            indexedShapeId = randomAlphaOfLengthBetween(3, 20);\n            builder = new GeoShapeQueryBuilder(fieldName(), indexedShapeId);\n            if (randomBoolean()) {\n                indexedShapeIndex = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapeIndex(indexedShapeIndex);\n            }\n            if (randomBoolean()) {\n                indexedShapePath = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapePath(indexedShapePath);\n            }\n            if (randomBoolean()) {\n                indexedShapeRouting = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapeRouting(indexedShapeRouting);\n            }\n        }\n        if (randomBoolean()) {\n            SearchExecutionContext context = createSearchExecutionContext();\n            if (context.indexVersionCreated().onOrAfter(Version.V_7_5_0)) { \r\n                if (shapeType == ShapeType.LINESTRING || shapeType == ShapeType.MULTILINESTRING) {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.CONTAINS));\n                } else {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS,\n                        ShapeRelation.WITHIN, ShapeRelation.CONTAINS));\n                }\n            } else {\n                if (shapeType == ShapeType.LINESTRING || shapeType == ShapeType.MULTILINESTRING) {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS));\n                } else {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.WITHIN));\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            builder.ignoreUnmapped(randomBoolean());\n        }\n        return builder;\n    }\n","date":"2021-07-05 13:31:55","endLine":73,"groupId":"103387","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"doCreateTestQueryBuilder","params":"(booleanindexedShape)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/3c52b95f444255f5c44736054e1f8b2cd8647c.src","preCode":"    protected GeoShapeQueryBuilder doCreateTestQueryBuilder(boolean indexedShape) {\n        RandomShapeGenerator.ShapeType shapeType = randomFrom(\n            RandomShapeGenerator.ShapeType.POINT,\n            RandomShapeGenerator.ShapeType.MULTIPOINT,\n            RandomShapeGenerator.ShapeType.LINESTRING,\n            RandomShapeGenerator.ShapeType.MULTILINESTRING,\n            RandomShapeGenerator.ShapeType.POLYGON);\n        ShapeBuilder<?, ?, ?> shape = RandomShapeGenerator.createShapeWithin(random(), null, shapeType);\n        GeoShapeQueryBuilder builder;\n        clearShapeFields();\n        if (indexedShape == false) {\n            builder = new GeoShapeQueryBuilder(fieldName(), shape);\n        } else {\n            indexedShapeToReturn = shape;\n            indexedShapeId = randomAlphaOfLengthBetween(3, 20);\n            builder = new GeoShapeQueryBuilder(fieldName(), indexedShapeId);\n            if (randomBoolean()) {\n                indexedShapeIndex = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapeIndex(indexedShapeIndex);\n            }\n            if (randomBoolean()) {\n                indexedShapePath = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapePath(indexedShapePath);\n            }\n            if (randomBoolean()) {\n                indexedShapeRouting = randomAlphaOfLengthBetween(3, 20);\n                builder.indexedShapeRouting(indexedShapeRouting);\n            }\n        }\n        if (randomBoolean()) {\n            SearchExecutionContext context = createSearchExecutionContext();\n            if (context.indexVersionCreated().onOrAfter(Version.V_7_5_0)) { \r\n                if (shapeType == RandomShapeGenerator.ShapeType.LINESTRING || shapeType == RandomShapeGenerator.ShapeType.MULTILINESTRING) {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.CONTAINS));\n                } else {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS,\n                        ShapeRelation.WITHIN, ShapeRelation.CONTAINS));\n                }\n            } else {\n                if (shapeType == RandomShapeGenerator.ShapeType.LINESTRING || shapeType == RandomShapeGenerator.ShapeType.MULTILINESTRING) {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS));\n                } else {\n                    builder.relation(randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.WITHIN));\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            builder.ignoreUnmapped(randomBoolean());\n        }\n        return builder;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/query/GeoShapeQueryBuilderGeoShapeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"M"},{"authorDate":"2021-01-15 01:11:59","commitOrder":4,"curCode":"    protected ShapeRelation getShapeRelation(ShapeType type) {\n        SearchExecutionContext context = createSearchExecutionContext();\n        if (context.indexVersionCreated().onOrAfter(Version.V_7_5_0)) { \r\n            if (type == ShapeType.LINESTRING || type == ShapeType.MULTILINESTRING) {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.CONTAINS);\n            } else {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS,\n                    ShapeRelation.WITHIN, ShapeRelation.CONTAINS);\n            }\n        } else {\n            if (type == ShapeType.LINESTRING || type == ShapeType.MULTILINESTRING) {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS);\n            } else {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.WITHIN);\n            }\n        }\n    }\n","date":"2021-01-15 01:11:59","endLine":46,"groupId":"103387","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getShapeRelation","params":"(ShapeTypetype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/4ce8293ef845712f5e8f51825dec8c6e49cb1c.src","preCode":"    protected ShapeRelation getShapeRelation(ShapeType type) {\n        SearchExecutionContext context = createSearchExecutionContext();\n        if (context.indexVersionCreated().onOrAfter(Version.V_7_5_0)) { \r\n            if (type == ShapeType.LINESTRING || type == ShapeType.MULTILINESTRING) {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.CONTAINS);\n            } else {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS,\n                    ShapeRelation.WITHIN, ShapeRelation.CONTAINS);\n            }\n        } else {\n            if (type == ShapeType.LINESTRING || type == ShapeType.MULTILINESTRING) {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS);\n            } else {\n                return randomFrom(ShapeRelation.DISJOINT, ShapeRelation.INTERSECTS, ShapeRelation.WITHIN);\n            }\n        }\n    }\n","realPath":"x-pack/plugin/spatial/src/test/java/org/elasticsearch/xpack/spatial/index/query/ShapeQueryBuilderOverShapeTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":30,"status":"N"}],"commitId":"0f30c79e4b54b1e0be818a4166f01ecb34c33b10","commitMessage":"@@@Remove legacy geo code from AbstractGeometryQueryBuilder classes (#74741)\n\nremoves references to Legacy ShapeParser and ShapeBuilder in AbstractGeometryQueryBuilder classes \nin favour to Geometry and GeometryParser.","date":"2021-07-05 13:31:55","modifiedFileCount":"16","status":"M","submitter":"Ignacio Vera"}]
