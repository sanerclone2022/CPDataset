[{"authorTime":"2018-06-15 06:32:41","codes":[{"authorDate":"2018-06-15 06:32:41","commitOrder":1,"curCode":"    public void testHeadersSet() {\n        Settings settings = Settings.builder().build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(DefaultRestChannel.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext());\n        TestRestResponse resp = new TestRestResponse();\n        final String customHeader = \"custom-header\";\n        final String customHeaderValue = \"xyz\";\n        resp.addHeader(customHeader, customHeaderValue);\n        channel.sendResponse(resp);\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse httpResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = httpResponse.headers;\n        assertNull(headers.get(\"non-existent-header\"));\n        assertEquals(customHeaderValue, headers.get(customHeader).get(0));\n        assertEquals(\"abc\", headers.get(DefaultRestChannel.X_OPAQUE_ID).get(0));\n        assertEquals(Integer.toString(resp.content().length()), headers.get(DefaultRestChannel.CONTENT_LENGTH).get(0));\n        assertEquals(resp.contentType(), headers.get(DefaultRestChannel.CONTENT_TYPE).get(0));\n    }\n","date":"2018-06-15 06:32:41","endLine":206,"groupId":"419","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHeadersSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bc/499ed8a420a9bd249c2ac1073b89d1c941bdd1.src","preCode":"    public void testHeadersSet() {\n        Settings settings = Settings.builder().build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(DefaultRestChannel.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext());\n        TestRestResponse resp = new TestRestResponse();\n        final String customHeader = \"custom-header\";\n        final String customHeaderValue = \"xyz\";\n        resp.addHeader(customHeader, customHeaderValue);\n        channel.sendResponse(resp);\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse httpResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = httpResponse.headers;\n        assertNull(headers.get(\"non-existent-header\"));\n        assertEquals(customHeaderValue, headers.get(customHeader).get(0));\n        assertEquals(\"abc\", headers.get(DefaultRestChannel.X_OPAQUE_ID).get(0));\n        assertEquals(Integer.toString(resp.content().length()), headers.get(DefaultRestChannel.CONTENT_LENGTH).get(0));\n        assertEquals(resp.contentType(), headers.get(DefaultRestChannel.CONTENT_TYPE).get(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"B"},{"authorDate":"2018-06-15 06:32:41","commitOrder":1,"curCode":"    public void testCookiesSet() {\n        Settings settings = Settings.builder().put(HttpTransportSettings.SETTING_HTTP_RESET_COOKIES.getKey(), true).build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(DefaultRestChannel.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext());\n        channel.sendResponse(new TestRestResponse());\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse nioResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = nioResponse.headers;\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie\"));\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie2\"));\n    }\n","date":"2018-06-15 06:32:41","endLine":227,"groupId":"43540","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCookiesSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bc/499ed8a420a9bd249c2ac1073b89d1c941bdd1.src","preCode":"    public void testCookiesSet() {\n        Settings settings = Settings.builder().put(HttpTransportSettings.SETTING_HTTP_RESET_COOKIES.getKey(), true).build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(DefaultRestChannel.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext());\n        channel.sendResponse(new TestRestResponse());\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse nioResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = nioResponse.headers;\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie\"));\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie2\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"B"}],"commitId":"2af05e5480ab63e5602ff92ded3ca5d4d127b08b","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-15 06:32:41","modifiedFileCount":"62","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-07-10 07:44:12","codes":[{"authorDate":"2018-07-10 07:44:12","commitOrder":2,"curCode":"    public void testHeadersSet() {\n        Settings settings = Settings.builder().build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(Task.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext());\n        TestRestResponse resp = new TestRestResponse();\n        final String customHeader = \"custom-header\";\n        final String customHeaderValue = \"xyz\";\n        resp.addHeader(customHeader, customHeaderValue);\n        channel.sendResponse(resp);\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse httpResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = httpResponse.headers;\n        assertNull(headers.get(\"non-existent-header\"));\n        assertEquals(customHeaderValue, headers.get(customHeader).get(0));\n        assertEquals(\"abc\", headers.get(Task.X_OPAQUE_ID).get(0));\n        assertEquals(Integer.toString(resp.content().length()), headers.get(DefaultRestChannel.CONTENT_LENGTH).get(0));\n        assertEquals(resp.contentType(), headers.get(DefaultRestChannel.CONTENT_TYPE).get(0));\n    }\n","date":"2018-07-10 07:44:12","endLine":207,"groupId":"419","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHeadersSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fd/683761098025454d505f4b9989c7161107edd6.src","preCode":"    public void testHeadersSet() {\n        Settings settings = Settings.builder().build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(DefaultRestChannel.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext());\n        TestRestResponse resp = new TestRestResponse();\n        final String customHeader = \"custom-header\";\n        final String customHeaderValue = \"xyz\";\n        resp.addHeader(customHeader, customHeaderValue);\n        channel.sendResponse(resp);\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse httpResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = httpResponse.headers;\n        assertNull(headers.get(\"non-existent-header\"));\n        assertEquals(customHeaderValue, headers.get(customHeader).get(0));\n        assertEquals(\"abc\", headers.get(DefaultRestChannel.X_OPAQUE_ID).get(0));\n        assertEquals(Integer.toString(resp.content().length()), headers.get(DefaultRestChannel.CONTENT_LENGTH).get(0));\n        assertEquals(resp.contentType(), headers.get(DefaultRestChannel.CONTENT_TYPE).get(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2018-07-10 07:44:12","commitOrder":2,"curCode":"    public void testCookiesSet() {\n        Settings settings = Settings.builder().put(HttpTransportSettings.SETTING_HTTP_RESET_COOKIES.getKey(), true).build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(Task.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext());\n        channel.sendResponse(new TestRestResponse());\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse nioResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = nioResponse.headers;\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie\"));\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie2\"));\n    }\n","date":"2018-07-10 07:44:12","endLine":228,"groupId":"43540","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCookiesSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fd/683761098025454d505f4b9989c7161107edd6.src","preCode":"    public void testCookiesSet() {\n        Settings settings = Settings.builder().put(HttpTransportSettings.SETTING_HTTP_RESET_COOKIES.getKey(), true).build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(DefaultRestChannel.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext());\n        channel.sendResponse(new TestRestResponse());\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse nioResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = nioResponse.headers;\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie\"));\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie2\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"e9cd0556c167b257bb588af5547923e5f13a99ca","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-10 07:44:12","modifiedFileCount":"627","status":"M","submitter":"Tal Levy"},{"authorTime":"2020-02-07 03:05:03","codes":[{"authorDate":"2020-02-07 03:05:03","commitOrder":3,"curCode":"    public void testHeadersSet() {\n        Settings settings = Settings.builder().build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(Task.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext(), null);\n        TestRestResponse resp = new TestRestResponse();\n        final String customHeader = \"custom-header\";\n        final String customHeaderValue = \"xyz\";\n        resp.addHeader(customHeader, customHeaderValue);\n        channel.sendResponse(resp);\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse httpResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = httpResponse.headers;\n        assertNull(headers.get(\"non-existent-header\"));\n        assertEquals(customHeaderValue, headers.get(customHeader).get(0));\n        assertEquals(\"abc\", headers.get(Task.X_OPAQUE_ID).get(0));\n        assertEquals(Integer.toString(resp.content().length()), headers.get(DefaultRestChannel.CONTENT_LENGTH).get(0));\n        assertEquals(resp.contentType(), headers.get(DefaultRestChannel.CONTENT_TYPE).get(0));\n    }\n","date":"2020-02-07 03:05:03","endLine":213,"groupId":"419","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testHeadersSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0f/82be7f23b02e39bf8edcbc8019b2c805567816.src","preCode":"    public void testHeadersSet() {\n        Settings settings = Settings.builder().build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(Task.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext());\n        TestRestResponse resp = new TestRestResponse();\n        final String customHeader = \"custom-header\";\n        final String customHeaderValue = \"xyz\";\n        resp.addHeader(customHeader, customHeaderValue);\n        channel.sendResponse(resp);\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse httpResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = httpResponse.headers;\n        assertNull(headers.get(\"non-existent-header\"));\n        assertEquals(customHeaderValue, headers.get(customHeader).get(0));\n        assertEquals(\"abc\", headers.get(Task.X_OPAQUE_ID).get(0));\n        assertEquals(Integer.toString(resp.content().length()), headers.get(DefaultRestChannel.CONTENT_LENGTH).get(0));\n        assertEquals(resp.contentType(), headers.get(DefaultRestChannel.CONTENT_TYPE).get(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"},{"authorDate":"2020-02-07 03:05:03","commitOrder":3,"curCode":"    public void testCookiesSet() {\n        Settings settings = Settings.builder().put(HttpTransportSettings.SETTING_HTTP_RESET_COOKIES.getKey(), true).build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(Task.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext(), null);\n        channel.sendResponse(new TestRestResponse());\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse nioResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = nioResponse.headers;\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie\"));\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie2\"));\n    }\n","date":"2020-02-07 03:05:03","endLine":234,"groupId":"43540","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCookiesSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0f/82be7f23b02e39bf8edcbc8019b2c805567816.src","preCode":"    public void testCookiesSet() {\n        Settings settings = Settings.builder().put(HttpTransportSettings.SETTING_HTTP_RESET_COOKIES.getKey(), true).build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(Task.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext());\n        channel.sendResponse(new TestRestResponse());\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse nioResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = nioResponse.headers;\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie\"));\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie2\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"26b9cf787dfcfb2340fd2dbc98e4c42faf868e40","commitMessage":"@@@Add Trace Logging of REST Requests (#51684)\n\nBeing able to trace log all REST requests to a node would make debugging\na number of issues a lot easier.\n","date":"2020-02-07 03:05:03","modifiedFileCount":"27","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-09-08 22:36:18","codes":[{"authorDate":"2020-09-08 22:36:18","commitOrder":4,"curCode":"    public void testHeadersSet() {\n        Settings settings = Settings.builder().build();\n        final TestHttpRequest httpRequest = new TestHttpRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(Task.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext(), CorsHandler.fromSettings(settings), null);\n        TestRestResponse resp = new TestRestResponse();\n        final String customHeader = \"custom-header\";\n        final String customHeaderValue = \"xyz\";\n        resp.addHeader(customHeader, customHeaderValue);\n        channel.sendResponse(resp);\n\n        \r\n        ArgumentCaptor<TestHttpResponse> responseCaptor = ArgumentCaptor.forClass(TestHttpResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestHttpResponse httpResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = httpResponse.headers();\n        assertNull(headers.get(\"non-existent-header\"));\n        assertEquals(customHeaderValue, headers.get(customHeader).get(0));\n        assertEquals(\"abc\", headers.get(Task.X_OPAQUE_ID).get(0));\n        assertEquals(Integer.toString(resp.content().length()), headers.get(DefaultRestChannel.CONTENT_LENGTH).get(0));\n        assertEquals(resp.contentType(), headers.get(DefaultRestChannel.CONTENT_TYPE).get(0));\n    }\n","date":"2020-09-08 22:36:18","endLine":173,"groupId":"104342","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testHeadersSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/33c2211b6e20b7c51335e8681253bee51de7a8.src","preCode":"    public void testHeadersSet() {\n        Settings settings = Settings.builder().build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(Task.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext(), null);\n        TestRestResponse resp = new TestRestResponse();\n        final String customHeader = \"custom-header\";\n        final String customHeaderValue = \"xyz\";\n        resp.addHeader(customHeader, customHeaderValue);\n        channel.sendResponse(resp);\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse httpResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = httpResponse.headers;\n        assertNull(headers.get(\"non-existent-header\"));\n        assertEquals(customHeaderValue, headers.get(customHeader).get(0));\n        assertEquals(\"abc\", headers.get(Task.X_OPAQUE_ID).get(0));\n        assertEquals(Integer.toString(resp.content().length()), headers.get(DefaultRestChannel.CONTENT_LENGTH).get(0));\n        assertEquals(resp.contentType(), headers.get(DefaultRestChannel.CONTENT_TYPE).get(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2020-09-08 22:36:18","commitOrder":4,"curCode":"    public void testCookiesSet() {\n        Settings settings = Settings.builder().put(HttpTransportSettings.SETTING_HTTP_RESET_COOKIES.getKey(), true).build();\n        final TestHttpRequest httpRequest = new TestHttpRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(Task.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext(), CorsHandler.fromSettings(settings), null);\n        channel.sendResponse(new TestRestResponse());\n\n        \r\n        ArgumentCaptor<TestHttpResponse> responseCaptor = ArgumentCaptor.forClass(TestHttpResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestHttpResponse nioResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = nioResponse.headers();\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie\"));\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie2\"));\n    }\n","date":"2020-09-08 22:36:18","endLine":194,"groupId":"104342","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCookiesSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/33c2211b6e20b7c51335e8681253bee51de7a8.src","preCode":"    public void testCookiesSet() {\n        Settings settings = Settings.builder().put(HttpTransportSettings.SETTING_HTTP_RESET_COOKIES.getKey(), true).build();\n        final TestRequest httpRequest = new TestRequest(HttpRequest.HttpVersion.HTTP_1_1, RestRequest.Method.GET, \"/\");\n        httpRequest.getHeaders().put(Task.X_OPAQUE_ID, Collections.singletonList(\"abc\"));\n        final RestRequest request = RestRequest.request(xContentRegistry(), httpRequest, httpChannel);\n        HttpHandlingSettings handlingSettings = HttpHandlingSettings.fromSettings(settings);\n\n        \r\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, httpRequest, request, bigArrays, handlingSettings,\n            threadPool.getThreadContext(), null);\n        channel.sendResponse(new TestRestResponse());\n\n        \r\n        ArgumentCaptor<TestResponse> responseCaptor = ArgumentCaptor.forClass(TestResponse.class);\n        verify(httpChannel).sendResponse(responseCaptor.capture(), any());\n        TestResponse nioResponse = responseCaptor.getValue();\n        Map<String, List<String>> headers = nioResponse.headers;\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie\"));\n        assertThat(headers.get(DefaultRestChannel.SET_COOKIE), hasItem(\"cookie2\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"d5f9e4ecb0c178f47b480973e203d48293e48b6b","commitMessage":"@@@Move CorsHandler to server (#62007)\n\nCurrently we duplicate our specialized cors logic in all transport\nplugins. This is unnecessary as it could be implemented in a single\nplace. This commit moves the logic to server. Additionally it fixes a\nbut where we are incorrectly closing http channels on early Cors\nresponses.","date":"2020-09-08 22:36:18","modifiedFileCount":"12","status":"M","submitter":"Tim Brooks"}]
