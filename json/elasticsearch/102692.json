[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDimensionCount());\n    }\n","date":"2018-04-26 03:22:53","endLine":132,"groupId":"67714","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9d/334cecb708fea1833c1f01d742a027d3aefa99.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDimensionCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n    }\n","date":"2018-04-26 03:22:53","endLine":134,"groupId":"67714","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/a3a2f16f28b4d2b5f962ff501001eabed19492.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-11-06 18:55:23","codes":[{"authorDate":"2018-11-06 18:55:23","commitOrder":2,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","date":"2018-11-06 18:55:23","endLine":132,"groupId":"67714","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/97/921f57ca592a8475f86045850123dc1960e837.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDimensionCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2018-11-06 18:55:23","commitOrder":2,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n    }\n","date":"2018-11-06 18:55:23","endLine":134,"groupId":"67714","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c5/eded8f5ab11e92dd1de0e79ff655412b987c84.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"a5e1f4d3a2b6f03f5b6268555ebb4271ea3c153b","commitMessage":"@@@Upgrade to lucene-8.0.0-snapshot-31d7dfe6b1 (#35224)\n\n\n","date":"2018-11-06 18:55:23","modifiedFileCount":"30","status":"M","submitter":"Nick Knize"},{"authorTime":"2018-12-25 03:06:50","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":3,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","date":"2018-12-25 03:06:50","endLine":131,"groupId":"67714","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/437d25a8495e5f06a28b785f7f2f9c8d50da85.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2018-12-25 03:06:50","commitOrder":3,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n    }\n","date":"2018-12-25 03:06:50","endLine":134,"groupId":"67714","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/96b3988bc7d79f13fcaeeae979c57047927477.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"7580d9d925d864b25466d693637b3bd3092d44cf","commitMessage":"@@@Make SourceToParse immutable (#36971)\n\nToday the routing of a SourceToParse is assigned in a separate step\nafter the object is created. We can easily forget to set the routing.\nWith this commit.  the routing must be provided in the constructor of\nSourceToParse.\n\nRelates #36921","date":"2018-12-25 03:06:50","modifiedFileCount":"66","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","date":"2019-10-15 16:05:29","endLine":133,"groupId":"67714","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/57/9cf297fedd47f3433aa3cbe837cc3061d3d9f1.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":4,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n    }\n","date":"2019-10-15 16:05:29","endLine":134,"groupId":"67714","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a3/4adaca2f144bd8eb8165215247bed536a8cd80.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-14 23:15:19","codes":[{"authorDate":"2020-01-14 23:15:19","commitOrder":5,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","date":"2020-01-14 23:15:19","endLine":135,"groupId":"67714","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/b2b90832ae6b922b241bb458ad91ddb45c2e71.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2020-01-14 23:15:19","commitOrder":5,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n    }\n","date":"2020-01-14 23:15:19","endLine":134,"groupId":"67714","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/dc12548c0905cdca861917c4dfd015183a25af.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"774bfb5e22389a923678ed8013e8cd284703d5dd","commitMessage":"@@@Don't use user-supplied type when building DocumentMapper (#50960)\n\nThis commit begins the process of removing types from the document parsing\ninfrastructure. Initially.  we just ignore the user-supplied type after it has been\nremoved from the mapping json structure.  and always supply _doc as the name\nof the root parser.\n\nThe production code change is very small here.  and most of the changeset\nconsists of alterations to Mapper test code that was passing in non-standard\ntype names and checking serialization.\n\nRelates to #41059","date":"2020-01-14 23:15:19","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-20 19:14:49","codes":[{"authorDate":"2020-01-20 19:14:49","commitOrder":6,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","date":"2020-01-20 19:14:49","endLine":135,"groupId":"67714","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/7cf7de8285c869c001a7062358a38971c6155b.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2020-01-20 19:14:49","commitOrder":6,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n    }\n","date":"2020-01-20 19:14:49","endLine":134,"groupId":"67714","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a3/4adaca2f144bd8eb8165215247bed536a8cd80.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"3d796248437e06dc90c15077702b67851bcb63a8","commitMessage":"@@@Revert \"Don't use user-supplied type when building DocumentMapper (#50960)\" (#51214)\n\nReverts #50960\n\nThis commit has been causing test failures during upgrade tests: specifically.  an upgraded\nnode becomes master and sends a cluster state update to a 7.x node; this node sees that the\nmapping version of its .tasks index is the same as the master.  so asserts that the serialized\nmappings are the same; however.  because the master has rewritten the mapping to use\n_docinstead oftasks`.  we get an assertion failure. The logical fix is for the master to\nincrement its mapping version when it rewrites the mapping.  but there isn't a simple way to\ndo that currently.\n\nThis reverts commit 774bfb5e22389a923678ed8013e8cd284703d5dd.","date":"2020-01-20 19:14:49","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-01-20 19:14:49","commitOrder":7,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","date":"2020-01-20 19:14:49","endLine":135,"groupId":"67714","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/47/7cf7de8285c869c001a7062358a38971c6155b.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"},{"authorDate":"2020-06-16 00:47:15","commitOrder":7,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n\n        fields = doc.rootDoc().getFields(FieldNamesFieldMapper.NAME);\n        assertEquals(1, fields.length);\n        assertEquals(\"field\", fields[0].stringValue());\n\n        FieldMapper m = (FieldMapper) mapper.mappers().getMapper(\"field\");\n        Query existsQuery = m.fieldType().existsQuery(null);\n        assertEquals(new TermQuery(new Term(FieldNamesFieldMapper.NAME, \"field\")), existsQuery);\n    }\n","date":"2020-06-16 00:47:15","endLine":154,"groupId":"67714","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/07/ed508a624a127742a6c65359c9920c880d184c.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-09-03 22:59:52","commitOrder":8,"curCode":"    public void testNoDocValues() throws Exception {\n\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b\n            .field(\"type\", \"date\")\n            .field(\"doc_values\", false)));\n\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"2016-03-11\")));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","date":"2020-09-03 22:59:52","endLine":94,"groupId":"25417","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/11e30d262f3dd0d21d7ae15c0d958a92151c5e.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"date\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"2016-03-11\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":8,"curCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n\n        fields = doc.rootDoc().getFields(FieldNamesFieldMapper.NAME);\n        assertEquals(1, fields.length);\n        assertEquals(\"field\", fields[0].stringValue());\n\n        FieldMapper m = (FieldMapper) mapper.mappers().getMapper(\"field\");\n        Query existsQuery = m.fieldType().existsQuery(null);\n        assertEquals(new TermQuery(new Term(FieldNamesFieldMapper.NAME, \"field\")), existsQuery);\n    }\n","date":"2020-06-16 00:47:15","endLine":154,"groupId":"67714","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/07/ed508a624a127742a6c65359c9920c880d184c.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n\n        fields = doc.rootDoc().getFields(FieldNamesFieldMapper.NAME);\n        assertEquals(1, fields.length);\n        assertEquals(\"field\", fields[0].stringValue());\n\n        FieldMapper m = (FieldMapper) mapper.mappers().getMapper(\"field\");\n        Query existsQuery = m.fieldType().existsQuery(null);\n        assertEquals(new TermQuery(new Term(FieldNamesFieldMapper.NAME, \"field\")), existsQuery);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"N"}],"commitId":"83ca21fb1a59624ab1069dedb1cf77e4b6912df9","commitMessage":"@@@Convert DateFieldMapperTests to MapperTestCase (#61920)\n\n","date":"2020-09-03 22:59:52","modifiedFileCount":"1","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-09-17 23:18:52","codes":[{"authorDate":"2020-09-03 22:59:52","commitOrder":9,"curCode":"    public void testNoDocValues() throws Exception {\n\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b\n            .field(\"type\", \"date\")\n            .field(\"doc_values\", false)));\n\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"2016-03-11\")));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","date":"2020-09-03 22:59:52","endLine":94,"groupId":"102692","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/11e30d262f3dd0d21d7ae15c0d958a92151c5e.src","preCode":"    public void testNoDocValues() throws Exception {\n\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b\n            .field(\"type\", \"date\")\n            .field(\"doc_values\", false)));\n\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"2016-03-11\")));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DateFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"N"},{"authorDate":"2020-09-17 23:18:52","commitOrder":9,"curCode":"    public void testNoDocValues() throws Exception {\n\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> {\n            b.field(\"type\", \"ip\");\n            b.field(\"doc_values\", false);\n        }));\n\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"::1\")));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n\n        fields = doc.rootDoc().getFields(FieldNamesFieldMapper.NAME);\n        assertEquals(1, fields.length);\n        assertEquals(\"field\", fields[0].stringValue());\n\n        FieldMapper m = (FieldMapper) mapper.mappers().getMapper(\"field\");\n        Query existsQuery = m.fieldType().existsQuery(null);\n        assertEquals(new TermQuery(new Term(FieldNamesFieldMapper.NAME, \"field\")), existsQuery);\n    }\n","date":"2020-09-17 23:18:52","endLine":104,"groupId":"102692","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoDocValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b8/ec6745101c46efa619a19568da8d373c6f5f90.src","preCode":"    public void testNoDocValues() throws Exception {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\").field(\"type\", \"ip\").field(\"doc_values\", false).endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"::1\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        IndexableField pointField = fields[0];\n        assertEquals(1, pointField.fieldType().pointIndexDimensionCount());\n        assertEquals(new BytesRef(InetAddressPoint.encode(InetAddresses.forString(\"::1\"))), pointField.binaryValue());\n\n        fields = doc.rootDoc().getFields(FieldNamesFieldMapper.NAME);\n        assertEquals(1, fields.length);\n        assertEquals(\"field\", fields[0].stringValue());\n\n        FieldMapper m = (FieldMapper) mapper.mappers().getMapper(\"field\");\n        Query existsQuery = m.fieldType().existsQuery(null);\n        assertEquals(new TermQuery(new Term(FieldNamesFieldMapper.NAME, \"field\")), existsQuery);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/IpFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"7b50618d5540150adae59eba0665fdcd58a6c9a2","commitMessage":"@@@Allow empty null values for date and IP field mappers (#62487)\n\nIn #57666 we changed when null_value was parsed for ip and date fields. Previously. \nthe null value was stored as a string.  and parsed into a date or InetAddress whenever\na document containing a null value was encountered. Now.  the values are parsed when\nthe mappings are built.  which means that bad values are detected up front; if you try and\nadd a mapping with a badly-parsed ip or date for a null_value.  the mapping will be\nrejected.\n\nThis causes problems for upgrades in the case when you have a badly-formed null_value\nin a pre-7.9 cluster. This commit fixes the upgrade case by changing the logic to only\nfail on indexes created in 8x and later. For earlier indexes.  we log a warning on the\nbadly formed value and ignore it.  replicating the earlier behaviour.\n\nFixes #62363","date":"2020-09-17 23:18:52","modifiedFileCount":"7","status":"M","submitter":"Alan Woodward"}]
