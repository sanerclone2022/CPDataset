[{"authorTime":"2020-01-16 19:04:14","codes":[{"authorDate":"2020-01-16 19:04:14","commitOrder":1,"curCode":"    public void testCachingWithElasticsearchVersion() throws IOException {\n        PreConfiguredTokenFilter pctf =\n            PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", randomBoolean(),\n                (tokenStream, esVersion) -> new TokenFilter(tokenStream) {\n                    @Override\n                    public boolean incrementToken() {\n                        return false;\n                    }\n                });\n\n        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n\n        Version version1 = VersionUtils.randomVersion(random());\n        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n                .build();\n        TokenFilterFactory tff_v1_1 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n        TokenFilterFactory tff_v1_2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n        assertSame(tff_v1_1, tff_v1_2);\n\n        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n                .build();\n\n        TokenFilterFactory tff_v2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings2);\n        assertNotSame(tff_v1_1, tff_v2);\n    }\n","date":"2020-01-16 19:04:14","endLine":98,"groupId":"69807","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCachingWithElasticsearchVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/4c62487c21c7bdc65425cd47cd827265b5a5e8.src","preCode":"    public void testCachingWithElasticsearchVersion() throws IOException {\n        PreConfiguredTokenFilter pctf =\n            PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", randomBoolean(),\n                (tokenStream, esVersion) -> new TokenFilter(tokenStream) {\n                    @Override\n                    public boolean incrementToken() {\n                        return false;\n                    }\n                });\n\n        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n\n        Version version1 = VersionUtils.randomVersion(random());\n        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n                .build();\n        TokenFilterFactory tff_v1_1 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n        TokenFilterFactory tff_v1_2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n        assertSame(tff_v1_1, tff_v1_2);\n\n        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n                .build();\n\n        TokenFilterFactory tff_v2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings2);\n        assertNotSame(tff_v1_1, tff_v2);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilterTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2020-01-16 19:04:14","commitOrder":1,"curCode":"    public void testCachingWithLuceneVersion() throws IOException {\n        PreConfiguredTokenFilter pctf =\n                PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", randomBoolean(),\n                        (tokenStream, luceneVersion) -> new TokenFilter(tokenStream) {\n                            @Override\n                            public boolean incrementToken() {\n                                return false;\n                            }\n                        });\n\n        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n\n        Version version1 = Version.CURRENT;\n        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n                .build();\n        TokenFilterFactory tff_v1_1 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n        TokenFilterFactory tff_v1_2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n        assertSame(tff_v1_1, tff_v1_2);\n\n        byte major = VersionUtils.getFirstVersion().major;\n        Version version2 = Version.fromString(major - 1 + \".0.0\");\n        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n                .build();\n\n        TokenFilterFactory tff_v2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings2);\n        assertNotSame(tff_v1_1, tff_v2);\n    }\n","date":"2020-01-16 19:04:14","endLine":129,"groupId":"69807","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCachingWithLuceneVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8c/4c62487c21c7bdc65425cd47cd827265b5a5e8.src","preCode":"    public void testCachingWithLuceneVersion() throws IOException {\n        PreConfiguredTokenFilter pctf =\n                PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", randomBoolean(),\n                        (tokenStream, luceneVersion) -> new TokenFilter(tokenStream) {\n                            @Override\n                            public boolean incrementToken() {\n                                return false;\n                            }\n                        });\n\n        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n\n        Version version1 = Version.CURRENT;\n        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n                .build();\n        TokenFilterFactory tff_v1_1 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n        TokenFilterFactory tff_v1_2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n        assertSame(tff_v1_1, tff_v1_2);\n\n        byte major = VersionUtils.getFirstVersion().major;\n        Version version2 = Version.fromString(major - 1 + \".0.0\");\n        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n                .build();\n\n        TokenFilterFactory tff_v2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings2);\n        assertNotSame(tff_v1_1, tff_v2);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilterTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"24e1858a70bd255ebc210415acaac1bfb40340d3","commitMessage":"@@@Fix caching for PreConfiguredTokenFilter (#50912)\n\nThe PreConfiguredTokenFilter#singletonWithVersion uses the version\ninternaly for the token filter factories but it registers only one\ninstance in the cahce and not one instance per version. This can lead\nto exceptions like the one described in #50734 since the singleton is\ncreated and cached using the version created of the first index\nthat is processed.\n\nRemove the singletonWithVersion() methods and use the\nelasticsearchVersion() methods instead.\n\nFixes: #50734","date":"2020-01-16 19:04:14","modifiedFileCount":"3","status":"B","submitter":"Marios Trivyzas"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testCachingWithElasticsearchVersion() throws IOException {\n        PreConfiguredTokenFilter pctf =\n            PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", randomBoolean(),\n                (tokenStream, esVersion) -> new TokenFilter(tokenStream) {\n                    @Override\n                    public boolean incrementToken() {\n                        return false;\n                    }\n                });\n\n        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n\n        Version version1 = VersionUtils.randomVersion(random());\n        Settings settings1 = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, version1)\n                .build();\n        TokenFilterFactory tff_v1_1 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n        TokenFilterFactory tff_v1_2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n        assertSame(tff_v1_1, tff_v1_2);\n\n        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n        Settings settings2 = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, version2)\n                .build();\n\n        TokenFilterFactory tff_v2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings2);\n        assertNotSame(tff_v1_1, tff_v2);\n    }\n","date":"2020-04-01 03:52:01","endLine":98,"groupId":"69807","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCachingWithElasticsearchVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/b83c109f31e0f3871a2762320c95a701d94783.src","preCode":"    public void testCachingWithElasticsearchVersion() throws IOException {\n        PreConfiguredTokenFilter pctf =\n            PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", randomBoolean(),\n                (tokenStream, esVersion) -> new TokenFilter(tokenStream) {\n                    @Override\n                    public boolean incrementToken() {\n                        return false;\n                    }\n                });\n\n        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n\n        Version version1 = VersionUtils.randomVersion(random());\n        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n                .build();\n        TokenFilterFactory tff_v1_1 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n        TokenFilterFactory tff_v1_2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n        assertSame(tff_v1_1, tff_v1_2);\n\n        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n                .build();\n\n        TokenFilterFactory tff_v2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings2);\n        assertNotSame(tff_v1_1, tff_v2);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilterTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testCachingWithLuceneVersion() throws IOException {\n        PreConfiguredTokenFilter pctf =\n                PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", randomBoolean(),\n                        (tokenStream, luceneVersion) -> new TokenFilter(tokenStream) {\n                            @Override\n                            public boolean incrementToken() {\n                                return false;\n                            }\n                        });\n\n        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n\n        Version version1 = Version.CURRENT;\n        Settings settings1 = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, version1)\n                .build();\n        TokenFilterFactory tff_v1_1 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n        TokenFilterFactory tff_v1_2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n        assertSame(tff_v1_1, tff_v1_2);\n\n        byte major = VersionUtils.getFirstVersion().major;\n        Version version2 = Version.fromString(major - 1 + \".0.0\");\n        Settings settings2 = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, version2)\n                .build();\n\n        TokenFilterFactory tff_v2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings2);\n        assertNotSame(tff_v1_1, tff_v2);\n    }\n","date":"2020-04-01 03:52:01","endLine":129,"groupId":"69807","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCachingWithLuceneVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3b/b83c109f31e0f3871a2762320c95a701d94783.src","preCode":"    public void testCachingWithLuceneVersion() throws IOException {\n        PreConfiguredTokenFilter pctf =\n                PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", randomBoolean(),\n                        (tokenStream, luceneVersion) -> new TokenFilter(tokenStream) {\n                            @Override\n                            public boolean incrementToken() {\n                                return false;\n                            }\n                        });\n\n        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n\n        Version version1 = Version.CURRENT;\n        Settings settings1 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version1)\n                .build();\n        TokenFilterFactory tff_v1_1 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n        TokenFilterFactory tff_v1_2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n        assertSame(tff_v1_1, tff_v1_2);\n\n        byte major = VersionUtils.getFirstVersion().major;\n        Version version2 = Version.fromString(major - 1 + \".0.0\");\n        Settings settings2 = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version2)\n                .build();\n\n        TokenFilterFactory tff_v2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings2);\n        assertNotSame(tff_v1_1, tff_v2);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilterTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-12-01 06:55:34","codes":[{"authorDate":"2020-12-01 06:55:34","commitOrder":3,"curCode":"    public void testCachingWithElasticsearchVersion() throws IOException {\n        PreConfiguredTokenFilter pctf =\n            PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", randomBoolean(),\n                (tokenStream, esVersion) -> new TokenFilter(tokenStream) {\n                    @Override\n                    public boolean incrementToken() {\n                        return false;\n                    }\n                });\n\n\n        Version version1 = VersionUtils.randomVersion(random());\n        IndexSettings indexSettings1 = IndexSettingsModule.newIndexSettings(\"test\", Settings.builder()\n            .put(IndexMetadata.SETTING_VERSION_CREATED, version1)\n            .build());\n        TokenFilterFactory tff_v1_1 =\n                pctf.get(indexSettings1, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", Settings.EMPTY);\n        TokenFilterFactory tff_v1_2 =\n                pctf.get(indexSettings1, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", Settings.EMPTY);\n        assertSame(tff_v1_1, tff_v1_2);\n\n        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n        IndexSettings indexSettings2 = IndexSettingsModule.newIndexSettings(\"test\", Settings.builder()\n            .put(IndexMetadata.SETTING_VERSION_CREATED, version2)\n            .build());\n        Settings settings2 = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, version2)\n                .build();\n\n        TokenFilterFactory tff_v2 =\n                pctf.get(indexSettings2, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings2);\n        assertNotSame(tff_v1_1, tff_v2);\n    }\n","date":"2020-12-01 06:55:34","endLine":101,"groupId":"102464","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCachingWithElasticsearchVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f1/ec26f91322237f3561296811b6fb8dc2d75aa2.src","preCode":"    public void testCachingWithElasticsearchVersion() throws IOException {\n        PreConfiguredTokenFilter pctf =\n            PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", randomBoolean(),\n                (tokenStream, esVersion) -> new TokenFilter(tokenStream) {\n                    @Override\n                    public boolean incrementToken() {\n                        return false;\n                    }\n                });\n\n        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n\n        Version version1 = VersionUtils.randomVersion(random());\n        Settings settings1 = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, version1)\n                .build();\n        TokenFilterFactory tff_v1_1 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n        TokenFilterFactory tff_v1_2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings1);\n        assertSame(tff_v1_1, tff_v1_2);\n\n        Version version2 = randomValueOtherThan(version1, () -> randomFrom(VersionUtils.allVersions()));\n        Settings settings2 = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, version2)\n                .build();\n\n        TokenFilterFactory tff_v2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"elasticsearch_version\", settings2);\n        assertNotSame(tff_v1_1, tff_v2);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilterTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-12-01 06:55:34","commitOrder":3,"curCode":"    public void testCachingWithLuceneVersion() throws IOException {\n        PreConfiguredTokenFilter pctf =\n                PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", randomBoolean(),\n                        (tokenStream, luceneVersion) -> new TokenFilter(tokenStream) {\n                            @Override\n                            public boolean incrementToken() {\n                                return false;\n                            }\n                        });\n\n        Version version1 = Version.CURRENT;\n        IndexSettings indexSettings1 = IndexSettingsModule.newIndexSettings(\"test\", Settings.builder()\n            .put(IndexMetadata.SETTING_VERSION_CREATED, version1)\n            .build());\n\n        TokenFilterFactory tff_v1_1 =\n                pctf.get(indexSettings1, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", Settings.EMPTY);\n        TokenFilterFactory tff_v1_2 =\n                pctf.get(indexSettings1, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", Settings.EMPTY);\n        assertSame(tff_v1_1, tff_v1_2);\n\n        byte major = VersionUtils.getFirstVersion().major;\n        Version version2 = Version.fromString(major - 1 + \".0.0\");\n        IndexSettings indexSettings2 = IndexSettingsModule.newIndexSettings(\"test\", Settings.builder()\n            .put(IndexMetadata.SETTING_VERSION_CREATED, version2)\n            .build());\n\n        TokenFilterFactory tff_v2 =\n                pctf.get(indexSettings2, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", Settings.EMPTY);\n        assertNotSame(tff_v1_1, tff_v2);\n    }\n","date":"2020-12-01 06:55:34","endLine":133,"groupId":"102464","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCachingWithLuceneVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f1/ec26f91322237f3561296811b6fb8dc2d75aa2.src","preCode":"    public void testCachingWithLuceneVersion() throws IOException {\n        PreConfiguredTokenFilter pctf =\n                PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", randomBoolean(),\n                        (tokenStream, luceneVersion) -> new TokenFilter(tokenStream) {\n                            @Override\n                            public boolean incrementToken() {\n                                return false;\n                            }\n                        });\n\n        IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(\"test\", Settings.EMPTY);\n\n        Version version1 = Version.CURRENT;\n        Settings settings1 = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, version1)\n                .build();\n        TokenFilterFactory tff_v1_1 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n        TokenFilterFactory tff_v1_2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings1);\n        assertSame(tff_v1_1, tff_v1_2);\n\n        byte major = VersionUtils.getFirstVersion().major;\n        Version version2 = Version.fromString(major - 1 + \".0.0\");\n        Settings settings2 = Settings.builder().put(IndexMetadata.SETTING_VERSION_CREATED, version2)\n                .build();\n\n        TokenFilterFactory tff_v2 =\n                pctf.get(indexSettings, TestEnvironment.newEnvironment(emptyNodeSettings), \"lucene_version\", settings2);\n        assertNotSame(tff_v1_1, tff_v2);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/analysis/PreConfiguredTokenFilterTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"b6d761ea74161a24f2b8fc1a79723602ea42dabc","commitMessage":"@@@Reduce ways of checking index version setting. (#65396)\n\nThis PR removes the public method `Version#indexCreated(Settings)`. Now.  the\nindex version is always checked through `IndexSettings#indexCreatedVersion`. \nexcept in rare lower-level cases where the setting is accessed directly.\n\nThis makes it easier to understand what logic depends on the index version.\nIt's a step towards the goal of streamlining how/ where index versions are\naccessed.","date":"2020-12-01 06:55:34","modifiedFileCount":"22","status":"M","submitter":"Julie Tibshirani"}]
