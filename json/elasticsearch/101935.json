[{"authorTime":"2020-03-04 07:30:22","codes":[{"authorDate":"2020-03-04 07:30:22","commitOrder":1,"curCode":"    public void testHiddenAliasAndHiddenIndexResolution() {\n        final String visibleIndex = \"visible_index\";\n        final String hiddenIndex = \"hidden_index\";\n        final String visibleAlias = \"visible_alias\";\n        final String hiddenAlias = \"hidden_alias\";\n        final String dottedHiddenAlias = \".hidden_alias\";\n        final String dottedHiddenIndex = \".hidden_index\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, false, true, false, false, false);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, true, true, false, false, false);\n\n        {\n            \r\n            MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetaData.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n        }\n\n        {\n            \r\n            MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetaData.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(visibleAlias)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n        }\n\n        {\n            \r\n            MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetaData.builder(hiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n        }\n\n        {\n            \r\n            MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(dottedHiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(dottedHiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(dottedHiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n            String[] indexNames;\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n        }\n    }\n","date":"2020-03-04 07:30:22","endLine":1024,"groupId":"53160","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHiddenAliasAndHiddenIndexResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/82fa0571e804b62b7680e3a0ff3ad222db097d.src","preCode":"    public void testHiddenAliasAndHiddenIndexResolution() {\n        final String visibleIndex = \"visible_index\";\n        final String hiddenIndex = \"hidden_index\";\n        final String visibleAlias = \"visible_alias\";\n        final String hiddenAlias = \"hidden_alias\";\n        final String dottedHiddenAlias = \".hidden_alias\";\n        final String dottedHiddenIndex = \".hidden_index\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, false, true, false, false, false);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, true, true, false, false, false);\n\n        {\n            \r\n            MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetaData.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n        }\n\n        {\n            \r\n            MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetaData.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(visibleAlias)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n        }\n\n        {\n            \r\n            MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetaData.builder(hiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n        }\n\n        {\n            \r\n            MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(dottedHiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(dottedHiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(dottedHiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n            String[] indexNames;\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":889,"status":"B"},{"authorDate":"2020-03-04 07:30:22","commitOrder":1,"curCode":"    public void testHiddenIndexWithVisibleAliasOverlappingNameResolution() {\n        final String hiddenIndex = \"my-hidden-index\";\n        final String hiddenAlias = \"my-hidden-alias\";\n        final String visibleAlias = \"my-visible-alias\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, false, true, false, false, false);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, true, true, false, false, false);\n\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                .state(State.OPEN)\n                .putAlias(AliasMetaData.builder(hiddenAlias).isHidden(true))\n                .putAlias(AliasMetaData.builder(visibleAlias).build()));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n        String[] indexNames;\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\");\n        assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-hidden*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\", \"-my-visible*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"my-hidden*\", \"-my-hidden-a*\");\n        assertThat(Arrays.asList(indexNames), empty());\n    }\n","date":"2020-03-04 07:30:22","endLine":1051,"groupId":"63292","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiddenIndexWithVisibleAliasOverlappingNameResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d2/82fa0571e804b62b7680e3a0ff3ad222db097d.src","preCode":"    public void testHiddenIndexWithVisibleAliasOverlappingNameResolution() {\n        final String hiddenIndex = \"my-hidden-index\";\n        final String hiddenAlias = \"my-hidden-alias\";\n        final String visibleAlias = \"my-visible-alias\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, false, true, false, false, false);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, true, true, false, false, false);\n\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                .state(State.OPEN)\n                .putAlias(AliasMetaData.builder(hiddenAlias).isHidden(true))\n                .putAlias(AliasMetaData.builder(visibleAlias).build()));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n        String[] indexNames;\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\");\n        assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-hidden*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\", \"-my-visible*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"my-hidden*\", \"-my-hidden-a*\");\n        assertThat(Arrays.asList(indexNames), empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1026,"status":"B"}],"commitId":"351c2f9d40951703951e19f95d3c11ac2d12d29c","commitMessage":"@@@Implement hidden aliases (#52547)\n\nThis commit introduces hidden aliases. These are similar to hidden\nindices.  in that they are not visible by default.  unless explicitly\nspecified by name or by indicating that hidden indices/aliases are\ndesired.\n\nThe new alias property.  `is_hidden` is implemented similarly to\n`is_write_index`.  except that it must be consistent across all indices\nwith a given alias - that is.  all indices with a given alias must\nspecify the alias as either hidden.  or all specify it as non-hidden. \neither explicitly or by omitting the `is_hidden` property.","date":"2020-03-04 07:30:22","modifiedFileCount":"19","status":"B","submitter":"Gordon Brown"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testHiddenAliasAndHiddenIndexResolution() {\n        final String visibleIndex = \"visible_index\";\n        final String hiddenIndex = \"hidden_index\";\n        final String visibleAlias = \"visible_alias\";\n        final String hiddenAlias = \"hidden_alias\";\n        final String dottedHiddenAlias = \".hidden_alias\";\n        final String dottedHiddenIndex = \".hidden_index\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, false, true, false, false, false);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, true, true, false, false, false);\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(visibleAlias)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(dottedHiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(dottedHiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(dottedHiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            String[] indexNames;\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":1024,"groupId":"53160","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHiddenAliasAndHiddenIndexResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/e0c2bf71209309a8f8fa82ff1ea045183631d8.src","preCode":"    public void testHiddenAliasAndHiddenIndexResolution() {\n        final String visibleIndex = \"visible_index\";\n        final String hiddenIndex = \"hidden_index\";\n        final String visibleAlias = \"visible_alias\";\n        final String hiddenAlias = \"hidden_alias\";\n        final String dottedHiddenAlias = \".hidden_alias\";\n        final String dottedHiddenIndex = \".hidden_index\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, false, true, false, false, false);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, true, true, false, false, false);\n\n        {\n            \r\n            MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetaData.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n        }\n\n        {\n            \r\n            MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetaData.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(visibleAlias)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n        }\n\n        {\n            \r\n            MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetaData.builder(hiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n        }\n\n        {\n            \r\n            MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(dottedHiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(dottedHiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetaData.builder(dottedHiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n            String[] indexNames;\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":889,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":2,"curCode":"    public void testHiddenIndexWithVisibleAliasOverlappingNameResolution() {\n        final String hiddenIndex = \"my-hidden-index\";\n        final String hiddenAlias = \"my-hidden-alias\";\n        final String visibleAlias = \"my-visible-alias\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, false, true, false, false, false);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, true, true, false, false, false);\n\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                .state(State.OPEN)\n                .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true))\n                .putAlias(AliasMetadata.builder(visibleAlias).build()));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        String[] indexNames;\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\");\n        assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-hidden*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\", \"-my-visible*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"my-hidden*\", \"-my-hidden-a*\");\n        assertThat(Arrays.asList(indexNames), empty());\n    }\n","date":"2020-04-01 03:52:01","endLine":1051,"groupId":"63292","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiddenIndexWithVisibleAliasOverlappingNameResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/e0c2bf71209309a8f8fa82ff1ea045183631d8.src","preCode":"    public void testHiddenIndexWithVisibleAliasOverlappingNameResolution() {\n        final String hiddenIndex = \"my-hidden-index\";\n        final String hiddenAlias = \"my-hidden-alias\";\n        final String visibleAlias = \"my-visible-alias\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, false, true, false, false, false);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, true, true, false, false, false);\n\n        MetaData.Builder mdBuilder = MetaData.builder()\n            .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                .state(State.OPEN)\n                .putAlias(AliasMetaData.builder(hiddenAlias).isHidden(true))\n                .putAlias(AliasMetaData.builder(visibleAlias).build()));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n        String[] indexNames;\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\");\n        assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-hidden*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\", \"-my-visible*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"my-hidden*\", \"-my-hidden-a*\");\n        assertThat(Arrays.asList(indexNames), empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1026,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-04-17 01:46:13","codes":[{"authorDate":"2020-04-17 01:46:13","commitOrder":3,"curCode":"    public void testHiddenAliasAndHiddenIndexResolution() {\n        final String visibleIndex = \"visible_index\";\n        final String hiddenIndex = \"hidden_index\";\n        final String visibleAlias = \"visible_alias\";\n        final String hiddenAlias = \"hidden_alias\";\n        final String dottedHiddenAlias = \".hidden_alias\";\n        final String dottedHiddenIndex = \".hidden_index\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, false, true, false, false, false, true);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, true, true, false, false, false, true);\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(visibleAlias)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(dottedHiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(dottedHiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(dottedHiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            String[] indexNames;\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n        }\n    }\n","date":"2020-04-17 01:46:13","endLine":1025,"groupId":"53160","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testHiddenAliasAndHiddenIndexResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5c/81ded01995fc9fd61e38d2ca251c23d6d4bbea.src","preCode":"    public void testHiddenAliasAndHiddenIndexResolution() {\n        final String visibleIndex = \"visible_index\";\n        final String hiddenIndex = \"hidden_index\";\n        final String visibleAlias = \"visible_alias\";\n        final String hiddenAlias = \"hidden_alias\";\n        final String dottedHiddenAlias = \".hidden_alias\";\n        final String dottedHiddenIndex = \".hidden_index\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, false, true, false, false, false);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, true, true, false, false, false);\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(visibleAlias)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(dottedHiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(dottedHiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(dottedHiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            String[] indexNames;\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":890,"status":"M"},{"authorDate":"2020-04-17 01:46:13","commitOrder":3,"curCode":"    public void testHiddenIndexWithVisibleAliasOverlappingNameResolution() {\n        final String hiddenIndex = \"my-hidden-index\";\n        final String hiddenAlias = \"my-hidden-alias\";\n        final String visibleAlias = \"my-visible-alias\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, false, true, false, false, false, true);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, true, true, false, false, false, true);\n\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                .state(State.OPEN)\n                .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true))\n                .putAlias(AliasMetadata.builder(visibleAlias).build()));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        String[] indexNames;\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\");\n        assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-hidden*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\", \"-my-visible*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"my-hidden*\", \"-my-hidden-a*\");\n        assertThat(Arrays.asList(indexNames), empty());\n    }\n","date":"2020-04-17 01:46:13","endLine":1052,"groupId":"63292","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiddenIndexWithVisibleAliasOverlappingNameResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5c/81ded01995fc9fd61e38d2ca251c23d6d4bbea.src","preCode":"    public void testHiddenIndexWithVisibleAliasOverlappingNameResolution() {\n        final String hiddenIndex = \"my-hidden-index\";\n        final String hiddenAlias = \"my-hidden-alias\";\n        final String visibleAlias = \"my-visible-alias\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, false, true, false, false, false);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, true, true, false, false, false);\n\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                .state(State.OPEN)\n                .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true))\n                .putAlias(AliasMetadata.builder(visibleAlias).build()));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        String[] indexNames;\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\");\n        assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-hidden*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\", \"-my-visible*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"my-hidden*\", \"-my-hidden-a*\");\n        assertThat(Arrays.asList(indexNames), empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1027,"status":"M"}],"commitId":"fada09a13266de9ed7c0fc9faedb4f3283b5f646","commitMessage":"@@@Make data streams in APIs resolvable. (#54726)\n\nThe INCLUDE_DATA_STREAMS indices option controls whether data streams can be resolved in an api for both concrete names and wildcard expressions. If data streams cannot be resolved then a 400 error is returned indicating that data streams cannot be used.\n\nIn this pr.  the INCLUDE_DATA_STREAMS indices option is enabled in the following APIs: search.  msearch.  refresh.  index (op_type create only) and bulk (index requests with op type create only). In a subsequent later change.  we will determine which other APIs need to be able to resolve data streams and enable the INCLUDE_DATA_STREAMS indices option for these APIs. \n\nWhether an api resolve all backing indices of a data stream or the latest index of a data stream (write index) depends on the IndexNameExpressionResolver.Context.isResolveToWriteIndex().\nIf isResolveToWriteIndex() returns true then data streams resolve to the latest index (for example: index api) and otherwise a data stream resolves to all backing indices of a data stream (for example: search api).\n\nRelates to #53100","date":"2020-04-17 01:46:13","modifiedFileCount":"30","status":"M","submitter":"Martijn van Groningen"},{"authorTime":"2020-05-05 03:03:52","codes":[{"authorDate":"2020-05-05 03:03:52","commitOrder":4,"curCode":"    public void testHiddenAliasAndHiddenIndexResolution() {\n        final String visibleIndex = \"visible_index\";\n        final String hiddenIndex = \"hidden_index\";\n        final String visibleAlias = \"visible_alias\";\n        final String hiddenAlias = \"hidden_alias\";\n        final String dottedHiddenAlias = \".hidden_alias\";\n        final String dottedHiddenIndex = \".hidden_index\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, false, true, false, false, false);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, true, true, false, false, false);\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(visibleAlias)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(dottedHiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(dottedHiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(dottedHiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            String[] indexNames;\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n        }\n    }\n","date":"2020-05-05 03:03:52","endLine":1025,"groupId":"101935","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testHiddenAliasAndHiddenIndexResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/b913d93ff46305a41eca10808ea04834fb76a0.src","preCode":"    public void testHiddenAliasAndHiddenIndexResolution() {\n        final String visibleIndex = \"visible_index\";\n        final String hiddenIndex = \"hidden_index\";\n        final String visibleAlias = \"visible_alias\";\n        final String hiddenAlias = \"hidden_alias\";\n        final String dottedHiddenAlias = \".hidden_alias\";\n        final String dottedHiddenIndex = \".hidden_index\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, false, true, false, false, false, true);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, false, true, false, true, true, false, false, false, true);\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"hidden*\", \"visible*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(visibleAlias)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(visibleAlias)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            \r\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, visibleAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(visibleIndex).state(State.OPEN).putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            String[] indexNames;\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, hiddenAlias);\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(visibleIndex, hiddenIndex));\n        }\n\n        {\n            \r\n            Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(dottedHiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(dottedHiddenAlias).isHidden(true)))\n                .put(indexBuilder(hiddenIndex, Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                    .state(State.OPEN)\n                    .putAlias(AliasMetadata.builder(dottedHiddenAlias).isHidden(true)));\n            ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n            String[] indexNames;\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \".hidden_a*\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n            \r\n            expectThrows(IndexNotFoundException.class,\n                () -> indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"*_alias\"));\n\n            \r\n            indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"*_alias\");\n            assertThat(Arrays.asList(indexNames), containsInAnyOrder(dottedHiddenIndex, hiddenIndex));\n\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":890,"status":"M"},{"authorDate":"2020-05-05 03:03:52","commitOrder":4,"curCode":"    public void testHiddenIndexWithVisibleAliasOverlappingNameResolution() {\n        final String hiddenIndex = \"my-hidden-index\";\n        final String hiddenAlias = \"my-hidden-alias\";\n        final String visibleAlias = \"my-visible-alias\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, false, true, false, false, false);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, true, true, false, false, false);\n\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                .state(State.OPEN)\n                .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true))\n                .putAlias(AliasMetadata.builder(visibleAlias).build()));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        String[] indexNames;\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\");\n        assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-hidden*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\", \"-my-visible*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"my-hidden*\", \"-my-hidden-a*\");\n        assertThat(Arrays.asList(indexNames), empty());\n    }\n","date":"2020-05-05 03:03:52","endLine":1052,"groupId":"101935","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiddenIndexWithVisibleAliasOverlappingNameResolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/eb/b913d93ff46305a41eca10808ea04834fb76a0.src","preCode":"    public void testHiddenIndexWithVisibleAliasOverlappingNameResolution() {\n        final String hiddenIndex = \"my-hidden-index\";\n        final String hiddenAlias = \"my-hidden-alias\";\n        final String visibleAlias = \"my-visible-alias\";\n\n        IndicesOptions excludeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, false, true, false, false, false, true);\n        IndicesOptions includeHiddenOptions = IndicesOptions.fromOptions(false, true, true, false, true, true, false, false, false, true);\n\n        Metadata.Builder mdBuilder = Metadata.builder()\n            .put(indexBuilder(hiddenIndex,  Settings.builder().put(INDEX_HIDDEN_SETTING.getKey(), true).build())\n                .state(State.OPEN)\n                .putAlias(AliasMetadata.builder(hiddenAlias).isHidden(true))\n                .putAlias(AliasMetadata.builder(visibleAlias).build()));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        String[] indexNames;\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\");\n        assertThat(Arrays.asList(indexNames), containsInAnyOrder(hiddenIndex));\n\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-hidden*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, excludeHiddenOptions, \"my-*\", \"-my-visible*\");\n        assertThat(Arrays.asList(indexNames), empty());\n        indexNames = indexNameExpressionResolver.concreteIndexNames(state, includeHiddenOptions, \"my-hidden*\", \"-my-hidden-a*\");\n        assertThat(Arrays.asList(indexNames), empty());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1027,"status":"M"}],"commitId":"378e36c26d1132ec1d1db680db0b683755659da5","commitMessage":"@@@Move includeDataStream flag from IndicesOptions to IndexNameExpressionResolver.Context (#56034)\n\nMove includeDataStream flag from an IndicesOptions to IndexNameExpressionResolver.Context\nas a dedicated field that callers to IndexNameExpressionResolver can set.\n\nAlso alter indices stats api to support data streams.\nThe rollover api uses this api and otherwise rolling over data stream does no longer work.\n\nRelates to #53100","date":"2020-05-05 03:03:52","modifiedFileCount":"28","status":"M","submitter":"Martijn van Groningen"}]
