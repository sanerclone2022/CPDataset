[{"authorTime":"2019-08-20 22:00:15","codes":[{"authorDate":"2019-08-20 22:00:15","commitOrder":1,"curCode":"    public void testMultiValuedFieldWithValueScript() throws IOException {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        MaxAggregationBuilder aggregationBuilder = new MaxAggregationBuilder(\"max\")\n            .field(\"values\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            final int numDocs = 10;\n            for (int i = 0; i < numDocs; i++) {\n                Document document = new Document();\n                document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n                document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n                iw.addDocument(document);\n            }\n        }, max -> {\n            assertEquals(12.0, max.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(max));\n        }, fieldType);\n    }\n","date":"2019-08-20 22:00:15","endLine":577,"groupId":"58174","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiValuedFieldWithValueScript","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b8/41fffd0ba36a7bb14f3bff512b91e614481ce9.src","preCode":"    public void testMultiValuedFieldWithValueScript() throws IOException {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        MaxAggregationBuilder aggregationBuilder = new MaxAggregationBuilder(\"max\")\n            .field(\"values\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            final int numDocs = 10;\n            for (int i = 0; i < numDocs; i++) {\n                Document document = new Document();\n                document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n                document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n                iw.addDocument(document);\n            }\n        }, max -> {\n            assertEquals(12.0, max.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(max));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":557,"status":"B"},{"authorDate":"2019-08-20 22:00:15","commitOrder":1,"curCode":"    public void testMultiValuedFieldWithValueScriptWithParams() throws IOException {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        Map<String, Object> params = Collections.singletonMap(\"inc\", 1);\n        MaxAggregationBuilder aggregationBuilder = new MaxAggregationBuilder(\"max\")\n            .field(\"values\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, params));\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            final int numDocs = 10;\n            for (int i = 0; i < numDocs; i++) {\n                Document document = new Document();\n                document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n                document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n                iw.addDocument(document);\n            }\n        }, max -> {\n            assertEquals(13.0, max.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(max));\n        }, fieldType);\n    }\n","date":"2019-08-20 22:00:15","endLine":600,"groupId":"58174","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiValuedFieldWithValueScriptWithParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b8/41fffd0ba36a7bb14f3bff512b91e614481ce9.src","preCode":"    public void testMultiValuedFieldWithValueScriptWithParams() throws IOException {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        Map<String, Object> params = Collections.singletonMap(\"inc\", 1);\n        MaxAggregationBuilder aggregationBuilder = new MaxAggregationBuilder(\"max\")\n            .field(\"values\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, params));\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            final int numDocs = 10;\n            for (int i = 0; i < numDocs; i++) {\n                Document document = new Document();\n                document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n                document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n                iw.addDocument(document);\n            }\n        }, max -> {\n            assertEquals(13.0, max.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(max));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"B"}],"commitId":"09d8384578fbb3f90042087dd776f67d623d3647","commitMessage":"@@@Migrate tests from MaxIT to MaxAggregatorTests (#45030)\n\nThis PR migrates tests from MaxIT integration test to MaxAggregatorTests.  as described in #42893","date":"2019-08-20 22:00:15","modifiedFileCount":"2","status":"B","submitter":"Christos Soulios"},{"authorTime":"2020-04-29 21:24:07","codes":[{"authorDate":"2020-04-29 21:24:07","commitOrder":2,"curCode":"    public void testMultiValuedFieldWithValueScript() throws IOException {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        MaxAggregationBuilder aggregationBuilder = new MaxAggregationBuilder(\"max\")\n            .field(\"values\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            final int numDocs = 10;\n            for (int i = 0; i < numDocs; i++) {\n                Document document = new Document();\n                document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n                document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n                iw.addDocument(document);\n            }\n        }, max -> {\n            assertEquals(12.0, max.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(max));\n        }, fieldType);\n    }\n","date":"2020-04-29 21:24:07","endLine":600,"groupId":"58174","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiValuedFieldWithValueScript","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8f/cd034ed7f9400863945758e5d51f394c9ed6be.src","preCode":"    public void testMultiValuedFieldWithValueScript() throws IOException {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        MaxAggregationBuilder aggregationBuilder = new MaxAggregationBuilder(\"max\")\n            .field(\"values\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            final int numDocs = 10;\n            for (int i = 0; i < numDocs; i++) {\n                Document document = new Document();\n                document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n                document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n                iw.addDocument(document);\n            }\n        }, max -> {\n            assertEquals(12.0, max.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(max));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"M"},{"authorDate":"2020-04-29 21:24:07","commitOrder":2,"curCode":"    public void testMultiValuedFieldWithValueScriptWithParams() throws IOException {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        Map<String, Object> params = Collections.singletonMap(\"inc\", 1);\n        MaxAggregationBuilder aggregationBuilder = new MaxAggregationBuilder(\"max\")\n            .field(\"values\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, params));\n\n        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            final int numDocs = 10;\n            for (int i = 0; i < numDocs; i++) {\n                Document document = new Document();\n                document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n                document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n                iw.addDocument(document);\n            }\n        }, max -> {\n            assertEquals(13.0, max.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(max));\n        }, fieldType);\n    }\n","date":"2020-04-29 21:24:07","endLine":623,"groupId":"58174","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiValuedFieldWithValueScriptWithParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8f/cd034ed7f9400863945758e5d51f394c9ed6be.src","preCode":"    public void testMultiValuedFieldWithValueScriptWithParams() throws IOException {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        Map<String, Object> params = Collections.singletonMap(\"inc\", 1);\n        MaxAggregationBuilder aggregationBuilder = new MaxAggregationBuilder(\"max\")\n            .field(\"values\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, params));\n\n        testCase(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            final int numDocs = 10;\n            for (int i = 0; i < numDocs; i++) {\n                Document document = new Document();\n                document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n                document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n                iw.addDocument(document);\n            }\n        }, max -> {\n            assertEquals(13.0, max.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(max));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":602,"status":"M"}],"commitId":"ceb6e6227fb48cf6986f1124014df4cbc6f82a40","commitMessage":"@@@Modified searchAndReduce() to return empty agg when no docs exist  (#55826)\n\nModified AggregatorTestCase.searchAndReduce() method so that it returns an empty aggregation result when no documents have been inserted.\n\nAlso refactored several aggregation tests so they do not re-implement method AggregatorTestCase.testCase()\n\nFixes #55824","date":"2020-04-29 21:24:07","modifiedFileCount":"12","status":"M","submitter":"Christos Soulios"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":3,"curCode":"    public void testMultiValuedFieldWithValueScript() throws IOException {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n\n        MaxAggregationBuilder aggregationBuilder = new MaxAggregationBuilder(\"max\")\n            .field(\"values\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            final int numDocs = 10;\n            for (int i = 0; i < numDocs; i++) {\n                Document document = new Document();\n                document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n                document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n                iw.addDocument(document);\n            }\n        }, max -> {\n            assertEquals(12.0, max.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(max));\n        }, fieldType);\n    }\n","date":"2020-06-16 00:47:15","endLine":591,"groupId":"105448","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiValuedFieldWithValueScript","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d4/bc4c4c179e0ebf09e99659dd378006c58e4b4a.src","preCode":"    public void testMultiValuedFieldWithValueScript() throws IOException {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        MaxAggregationBuilder aggregationBuilder = new MaxAggregationBuilder(\"max\")\n            .field(\"values\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            final int numDocs = 10;\n            for (int i = 0; i < numDocs; i++) {\n                Document document = new Document();\n                document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n                document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n                iw.addDocument(document);\n            }\n        }, max -> {\n            assertEquals(12.0, max.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(max));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":3,"curCode":"    public void testMultiValuedFieldWithValueScriptWithParams() throws IOException {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"values\", NumberFieldMapper.NumberType.INTEGER);\n\n        Map<String, Object> params = Collections.singletonMap(\"inc\", 1);\n        MaxAggregationBuilder aggregationBuilder = new MaxAggregationBuilder(\"max\")\n            .field(\"values\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, params));\n\n        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            final int numDocs = 10;\n            for (int i = 0; i < numDocs; i++) {\n                Document document = new Document();\n                document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n                document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n                iw.addDocument(document);\n            }\n        }, max -> {\n            assertEquals(13.0, max.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(max));\n        }, fieldType);\n    }\n","date":"2020-06-16 00:47:15","endLine":613,"groupId":"105448","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiValuedFieldWithValueScriptWithParams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d4/bc4c4c179e0ebf09e99659dd378006c58e4b4a.src","preCode":"    public void testMultiValuedFieldWithValueScriptWithParams() throws IOException {\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"values\");\n\n        Map<String, Object> params = Collections.singletonMap(\"inc\", 1);\n        MaxAggregationBuilder aggregationBuilder = new MaxAggregationBuilder(\"max\")\n            .field(\"values\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, params));\n\n        testAggregation(aggregationBuilder, new MatchAllDocsQuery(), iw -> {\n            final int numDocs = 10;\n            for (int i = 0; i < numDocs; i++) {\n                Document document = new Document();\n                document.add(new SortedNumericDocValuesField(\"values\", i + 2));\n                document.add(new SortedNumericDocValuesField(\"values\", i + 3));\n                iw.addDocument(document);\n            }\n        }, max -> {\n            assertEquals(13.0, max.getValue(), 0);\n            assertTrue(AggregationInspectionHelper.hasValue(max));\n        }, fieldType);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"}]
