[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testAsyncBlockOperationsOnFailure() throws InterruptedException {\n        final AtomicReference<Exception> reference = new AtomicReference<>();\n        final CountDownLatch onFailureLatch = new CountDownLatch(1);\n        permits.asyncBlockOperations(\n                10,\n                TimeUnit.MINUTES,\n                () -> {\n                    throw new RuntimeException(\"simulated\");\n                },\n                e -> {\n                    reference.set(e);\n                    onFailureLatch.countDown();\n                });\n        onFailureLatch.await();\n        assertThat(reference.get(), instanceOf(RuntimeException.class));\n        assertThat(reference.get(), hasToString(containsString(\"simulated\")));\n    }\n","date":"2018-04-26 03:22:53","endLine":543,"groupId":"17715","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAsyncBlockOperationsOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/27/d08b76c03104807701389fdef28733e6069fad.src","preCode":"    public void testAsyncBlockOperationsOnFailure() throws InterruptedException {\n        final AtomicReference<Exception> reference = new AtomicReference<>();\n        final CountDownLatch onFailureLatch = new CountDownLatch(1);\n        permits.asyncBlockOperations(\n                10,\n                TimeUnit.MINUTES,\n                () -> {\n                    throw new RuntimeException(\"simulated\");\n                },\n                e -> {\n                    reference.set(e);\n                    onFailureLatch.countDown();\n                });\n        onFailureLatch.await();\n        assertThat(reference.get(), instanceOf(RuntimeException.class));\n        assertThat(reference.get(), hasToString(containsString(\"simulated\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardOperationPermitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":527,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testTimeout() throws BrokenBarrierException, InterruptedException {\n        final CyclicBarrier barrier = new CyclicBarrier(2);\n        final CountDownLatch operationExecutingLatch = new CountDownLatch(1);\n        final CountDownLatch operationLatch = new CountDownLatch(1);\n        final CountDownLatch operationCompleteLatch = new CountDownLatch(1);\n\n        final Thread thread = new Thread(controlledAcquire(barrier, operationExecutingLatch, operationLatch, operationCompleteLatch));\n        thread.start();\n\n        barrier.await();\n\n        operationExecutingLatch.await();\n\n        {\n            final TimeoutException e =\n                    expectThrows(TimeoutException.class, () -> permits.blockOperations(1, TimeUnit.MILLISECONDS, () -> {}));\n            assertThat(e, hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        {\n            final AtomicReference<Exception> reference = new AtomicReference<>();\n            final CountDownLatch onFailureLatch = new CountDownLatch(1);\n            permits.asyncBlockOperations(\n                    1,\n                    TimeUnit.MILLISECONDS,\n                    () -> {},\n                    e -> {\n                        reference.set(e);\n                        onFailureLatch.countDown();\n                    });\n            onFailureLatch.await();\n            assertThat(reference.get(), hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        operationLatch.countDown();\n\n        operationCompleteLatch.await();\n\n        thread.join();\n    }\n","date":"2018-04-26 03:22:53","endLine":584,"groupId":"17717","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/27/d08b76c03104807701389fdef28733e6069fad.src","preCode":"    public void testTimeout() throws BrokenBarrierException, InterruptedException {\n        final CyclicBarrier barrier = new CyclicBarrier(2);\n        final CountDownLatch operationExecutingLatch = new CountDownLatch(1);\n        final CountDownLatch operationLatch = new CountDownLatch(1);\n        final CountDownLatch operationCompleteLatch = new CountDownLatch(1);\n\n        final Thread thread = new Thread(controlledAcquire(barrier, operationExecutingLatch, operationLatch, operationCompleteLatch));\n        thread.start();\n\n        barrier.await();\n\n        operationExecutingLatch.await();\n\n        {\n            final TimeoutException e =\n                    expectThrows(TimeoutException.class, () -> permits.blockOperations(1, TimeUnit.MILLISECONDS, () -> {}));\n            assertThat(e, hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        {\n            final AtomicReference<Exception> reference = new AtomicReference<>();\n            final CountDownLatch onFailureLatch = new CountDownLatch(1);\n            permits.asyncBlockOperations(\n                    1,\n                    TimeUnit.MILLISECONDS,\n                    () -> {},\n                    e -> {\n                        reference.set(e);\n                        onFailureLatch.countDown();\n                    });\n            onFailureLatch.await();\n            assertThat(reference.get(), hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        operationLatch.countDown();\n\n        operationCompleteLatch.await();\n\n        thread.join();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardOperationPermitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-11-08 16:23:33","codes":[{"authorDate":"2018-11-08 16:23:33","commitOrder":2,"curCode":"    public void testAsyncBlockOperationsOnFailure() throws InterruptedException {\n        final AtomicReference<Exception> reference = new AtomicReference<>();\n        final CountDownLatch onFailureLatch = new CountDownLatch(1);\n        permits.asyncBlockOperations(new ActionListener<Releasable>() {\n            @Override\n            public void onResponse(Releasable releasable) {\n                try (Releasable ignored = releasable) {\n                    throw new RuntimeException(\"simulated\");\n                }\n            }\n\n            @Override\n            public void onFailure(final Exception e) {\n                reference.set(e);\n                onFailureLatch.countDown();\n            }\n        }, 10, TimeUnit.MINUTES);\n        onFailureLatch.await();\n        assertThat(reference.get(), instanceOf(RuntimeException.class));\n        assertThat(reference.get(), hasToString(containsString(\"simulated\")));\n    }\n","date":"2018-11-08 16:23:33","endLine":558,"groupId":"72255","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAsyncBlockOperationsOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/85c2c4d8224f2d36fee3cb00c9ef50a85cf9f7.src","preCode":"    public void testAsyncBlockOperationsOnFailure() throws InterruptedException {\n        final AtomicReference<Exception> reference = new AtomicReference<>();\n        final CountDownLatch onFailureLatch = new CountDownLatch(1);\n        permits.asyncBlockOperations(\n                10,\n                TimeUnit.MINUTES,\n                () -> {\n                    throw new RuntimeException(\"simulated\");\n                },\n                e -> {\n                    reference.set(e);\n                    onFailureLatch.countDown();\n                });\n        onFailureLatch.await();\n        assertThat(reference.get(), instanceOf(RuntimeException.class));\n        assertThat(reference.get(), hasToString(containsString(\"simulated\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardOperationPermitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":538,"status":"M"},{"authorDate":"2018-11-08 16:23:33","commitOrder":2,"curCode":"    public void testTimeout() throws BrokenBarrierException, InterruptedException {\n        final CyclicBarrier barrier = new CyclicBarrier(2);\n        final CountDownLatch operationExecutingLatch = new CountDownLatch(1);\n        final CountDownLatch operationLatch = new CountDownLatch(1);\n        final CountDownLatch operationCompleteLatch = new CountDownLatch(1);\n\n        final Thread thread = new Thread(controlledAcquire(barrier, operationExecutingLatch, operationLatch, operationCompleteLatch));\n        thread.start();\n\n        barrier.await();\n\n        operationExecutingLatch.await();\n\n        {\n            final TimeoutException e =\n                    expectThrows(TimeoutException.class, () -> permits.blockOperations(1, TimeUnit.MILLISECONDS, () -> {}));\n            assertThat(e, hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        {\n            final AtomicReference<Exception> reference = new AtomicReference<>();\n            final CountDownLatch onFailureLatch = new CountDownLatch(1);\n            permits.asyncBlockOperations(new ActionListener<Releasable>() {\n                @Override\n                public void onResponse(Releasable releasable) {\n                    releasable.close();\n                }\n\n                @Override\n                public void onFailure(final Exception e) {\n                    reference.set(e);\n                    onFailureLatch.countDown();\n                }\n            }, 1, TimeUnit.MILLISECONDS);\n            onFailureLatch.await();\n            assertThat(reference.get(), hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        operationLatch.countDown();\n\n        operationCompleteLatch.await();\n\n        thread.join();\n    }\n","date":"2018-11-08 16:23:33","endLine":603,"groupId":"33545","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a7/85c2c4d8224f2d36fee3cb00c9ef50a85cf9f7.src","preCode":"    public void testTimeout() throws BrokenBarrierException, InterruptedException {\n        final CyclicBarrier barrier = new CyclicBarrier(2);\n        final CountDownLatch operationExecutingLatch = new CountDownLatch(1);\n        final CountDownLatch operationLatch = new CountDownLatch(1);\n        final CountDownLatch operationCompleteLatch = new CountDownLatch(1);\n\n        final Thread thread = new Thread(controlledAcquire(barrier, operationExecutingLatch, operationLatch, operationCompleteLatch));\n        thread.start();\n\n        barrier.await();\n\n        operationExecutingLatch.await();\n\n        {\n            final TimeoutException e =\n                    expectThrows(TimeoutException.class, () -> permits.blockOperations(1, TimeUnit.MILLISECONDS, () -> {}));\n            assertThat(e, hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        {\n            final AtomicReference<Exception> reference = new AtomicReference<>();\n            final CountDownLatch onFailureLatch = new CountDownLatch(1);\n            permits.asyncBlockOperations(\n                    1,\n                    TimeUnit.MILLISECONDS,\n                    () -> {},\n                    e -> {\n                        reference.set(e);\n                        onFailureLatch.countDown();\n                    });\n            onFailureLatch.await();\n            assertThat(reference.get(), hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        operationLatch.countDown();\n\n        operationCompleteLatch.await();\n\n        thread.join();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardOperationPermitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":560,"status":"M"}],"commitId":"1703a61fec098ce57749bf5ba932dbeb6560a387","commitMessage":"@@@[RCI] Add IndexShardOperationPermits.asyncBlockOperations(ActionListener<Releasable>) (#34902)\n\nThe current implementation of asyncBlockOperations() can be used to\nexecute some code once all indexing operations permits have been acquired. \n then releases all permits immediately after the code execution. This\n immediate release is not suitable for treatments that need to keep all\n permits over multiple execution steps.\n\nThis commit adds a new asyncBlockOperations() that exposes a Releasable. \n making it possible to acquire all permits and only release them all\n when needed by closing the Releasable. The existing blockOperations() \nmethod has been modified to delegate permit acquisition/releasing to this new\nmethod.\n\nRelates to #33888","date":"2018-11-08 16:23:33","modifiedFileCount":"3","status":"M","submitter":"Tanguy Leroux"},{"authorTime":"2020-11-23 22:28:19","codes":[{"authorDate":"2020-11-23 22:28:19","commitOrder":3,"curCode":"    public void testAsyncBlockOperationsOnFailure() throws InterruptedException {\n        final AtomicReference<Exception> reference = new AtomicReference<>();\n        final CountDownLatch onFailureLatch = new CountDownLatch(1);\n        permits.asyncBlockOperations(new ActionListener<Releasable>() {\n            @Override\n            public void onResponse(Releasable releasable) {\n                try (Releasable ignored = releasable) {\n                    throw new RuntimeException(\"simulated\");\n                }\n            }\n\n            @Override\n            public void onFailure(final Exception e) {\n                reference.set(e);\n                onFailureLatch.countDown();\n            }\n        }, 10, TimeUnit.MINUTES, ThreadPool.Names.GENERIC);\n        onFailureLatch.await();\n        assertThat(reference.get(), instanceOf(RuntimeException.class));\n        assertThat(reference.get(), hasToString(containsString(\"simulated\")));\n    }\n","date":"2020-11-23 22:28:19","endLine":559,"groupId":"72255","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAsyncBlockOperationsOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/91039a274e888f96c9d4e9d471b20f3790d453.src","preCode":"    public void testAsyncBlockOperationsOnFailure() throws InterruptedException {\n        final AtomicReference<Exception> reference = new AtomicReference<>();\n        final CountDownLatch onFailureLatch = new CountDownLatch(1);\n        permits.asyncBlockOperations(new ActionListener<Releasable>() {\n            @Override\n            public void onResponse(Releasable releasable) {\n                try (Releasable ignored = releasable) {\n                    throw new RuntimeException(\"simulated\");\n                }\n            }\n\n            @Override\n            public void onFailure(final Exception e) {\n                reference.set(e);\n                onFailureLatch.countDown();\n            }\n        }, 10, TimeUnit.MINUTES);\n        onFailureLatch.await();\n        assertThat(reference.get(), instanceOf(RuntimeException.class));\n        assertThat(reference.get(), hasToString(containsString(\"simulated\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardOperationPermitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"M"},{"authorDate":"2020-11-23 22:28:19","commitOrder":3,"curCode":"    public void testTimeout() throws BrokenBarrierException, InterruptedException {\n        final CyclicBarrier barrier = new CyclicBarrier(2);\n        final CountDownLatch operationExecutingLatch = new CountDownLatch(1);\n        final CountDownLatch operationLatch = new CountDownLatch(1);\n        final CountDownLatch operationCompleteLatch = new CountDownLatch(1);\n\n        final Thread thread = new Thread(controlledAcquire(barrier, operationExecutingLatch, operationLatch, operationCompleteLatch));\n        thread.start();\n\n        barrier.await();\n\n        operationExecutingLatch.await();\n\n        {\n            final TimeoutException e =\n                    expectThrows(TimeoutException.class, () -> permits.blockOperations(1, TimeUnit.MILLISECONDS, () -> {}));\n            assertThat(e, hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        {\n            final AtomicReference<Exception> reference = new AtomicReference<>();\n            final CountDownLatch onFailureLatch = new CountDownLatch(1);\n            permits.asyncBlockOperations(new ActionListener<Releasable>() {\n                @Override\n                public void onResponse(Releasable releasable) {\n                    releasable.close();\n                }\n\n                @Override\n                public void onFailure(final Exception e) {\n                    reference.set(e);\n                    onFailureLatch.countDown();\n                }\n            }, 1, TimeUnit.MILLISECONDS, ThreadPool.Names.GENERIC);\n            onFailureLatch.await();\n            assertThat(reference.get(), hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        operationLatch.countDown();\n\n        operationCompleteLatch.await();\n\n        thread.join();\n    }\n","date":"2020-11-23 22:28:19","endLine":604,"groupId":"33545","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/91039a274e888f96c9d4e9d471b20f3790d453.src","preCode":"    public void testTimeout() throws BrokenBarrierException, InterruptedException {\n        final CyclicBarrier barrier = new CyclicBarrier(2);\n        final CountDownLatch operationExecutingLatch = new CountDownLatch(1);\n        final CountDownLatch operationLatch = new CountDownLatch(1);\n        final CountDownLatch operationCompleteLatch = new CountDownLatch(1);\n\n        final Thread thread = new Thread(controlledAcquire(barrier, operationExecutingLatch, operationLatch, operationCompleteLatch));\n        thread.start();\n\n        barrier.await();\n\n        operationExecutingLatch.await();\n\n        {\n            final TimeoutException e =\n                    expectThrows(TimeoutException.class, () -> permits.blockOperations(1, TimeUnit.MILLISECONDS, () -> {}));\n            assertThat(e, hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        {\n            final AtomicReference<Exception> reference = new AtomicReference<>();\n            final CountDownLatch onFailureLatch = new CountDownLatch(1);\n            permits.asyncBlockOperations(new ActionListener<Releasable>() {\n                @Override\n                public void onResponse(Releasable releasable) {\n                    releasable.close();\n                }\n\n                @Override\n                public void onFailure(final Exception e) {\n                    reference.set(e);\n                    onFailureLatch.countDown();\n                }\n            }, 1, TimeUnit.MILLISECONDS);\n            onFailureLatch.await();\n            assertThat(reference.get(), hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        operationLatch.countDown();\n\n        operationCompleteLatch.await();\n\n        thread.join();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardOperationPermitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":561,"status":"M"}],"commitId":"7b8637e3a680af6a3930b2e2fc9f4f1f121bd797","commitMessage":"@@@Make Primary Relocation Not Blocking on Transport Request (#64098)\n\nResolving TODOs about primary relocation blocking on network IO.","date":"2020-11-23 22:28:19","modifiedFileCount":"12","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-11-24 16:48:49","codes":[{"authorDate":"2020-11-24 16:48:49","commitOrder":4,"curCode":"    public void testAsyncBlockOperationsOnFailure() throws InterruptedException {\n        final AtomicReference<Exception> reference = new AtomicReference<>();\n        final CountDownLatch onFailureLatch = new CountDownLatch(1);\n        permits.blockOperations(new ActionListener<Releasable>() {\n            @Override\n            public void onResponse(Releasable releasable) {\n                try (Releasable ignored = releasable) {\n                    throw new RuntimeException(\"simulated\");\n                }\n            }\n\n            @Override\n            public void onFailure(final Exception e) {\n                reference.set(e);\n                onFailureLatch.countDown();\n            }\n        }, 10, TimeUnit.MINUTES, ThreadPool.Names.GENERIC);\n        onFailureLatch.await();\n        assertThat(reference.get(), instanceOf(RuntimeException.class));\n        assertThat(reference.get(), hasToString(containsString(\"simulated\")));\n    }\n","date":"2020-11-24 16:48:49","endLine":557,"groupId":"102642","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAsyncBlockOperationsOnFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/8322475ea5a23c18683ea6c197caf4e5541f14.src","preCode":"    public void testAsyncBlockOperationsOnFailure() throws InterruptedException {\n        final AtomicReference<Exception> reference = new AtomicReference<>();\n        final CountDownLatch onFailureLatch = new CountDownLatch(1);\n        permits.asyncBlockOperations(new ActionListener<Releasable>() {\n            @Override\n            public void onResponse(Releasable releasable) {\n                try (Releasable ignored = releasable) {\n                    throw new RuntimeException(\"simulated\");\n                }\n            }\n\n            @Override\n            public void onFailure(final Exception e) {\n                reference.set(e);\n                onFailureLatch.countDown();\n            }\n        }, 10, TimeUnit.MINUTES, ThreadPool.Names.GENERIC);\n        onFailureLatch.await();\n        assertThat(reference.get(), instanceOf(RuntimeException.class));\n        assertThat(reference.get(), hasToString(containsString(\"simulated\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardOperationPermitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"M"},{"authorDate":"2020-11-24 16:48:49","commitOrder":4,"curCode":"    public void testTimeout() throws BrokenBarrierException, InterruptedException {\n        final CyclicBarrier barrier = new CyclicBarrier(2);\n        final CountDownLatch operationExecutingLatch = new CountDownLatch(1);\n        final CountDownLatch operationLatch = new CountDownLatch(1);\n        final CountDownLatch operationCompleteLatch = new CountDownLatch(1);\n\n        final Thread thread = new Thread(controlledAcquire(barrier, operationExecutingLatch, operationLatch, operationCompleteLatch));\n        thread.start();\n\n        barrier.await();\n\n        operationExecutingLatch.await();\n\n        final AtomicReference<Exception> reference = new AtomicReference<>();\n        final CountDownLatch onFailureLatch = new CountDownLatch(1);\n        permits.blockOperations(new ActionListener<Releasable>() {\n            @Override\n            public void onResponse(Releasable releasable) {\n                releasable.close();\n            }\n\n            @Override\n            public void onFailure(final Exception e) {\n                reference.set(e);\n                onFailureLatch.countDown();\n            }\n        }, 1, TimeUnit.MILLISECONDS, ThreadPool.Names.GENERIC);\n        onFailureLatch.await();\n        assertThat(reference.get(), hasToString(containsString(\"timeout while blocking operations\")));\n\n        operationLatch.countDown();\n\n        operationCompleteLatch.await();\n\n        thread.join();\n    }\n","date":"2020-11-24 16:48:49","endLine":594,"groupId":"102642","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/8322475ea5a23c18683ea6c197caf4e5541f14.src","preCode":"    public void testTimeout() throws BrokenBarrierException, InterruptedException {\n        final CyclicBarrier barrier = new CyclicBarrier(2);\n        final CountDownLatch operationExecutingLatch = new CountDownLatch(1);\n        final CountDownLatch operationLatch = new CountDownLatch(1);\n        final CountDownLatch operationCompleteLatch = new CountDownLatch(1);\n\n        final Thread thread = new Thread(controlledAcquire(barrier, operationExecutingLatch, operationLatch, operationCompleteLatch));\n        thread.start();\n\n        barrier.await();\n\n        operationExecutingLatch.await();\n\n        {\n            final TimeoutException e =\n                    expectThrows(TimeoutException.class, () -> permits.blockOperations(1, TimeUnit.MILLISECONDS, () -> {}));\n            assertThat(e, hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        {\n            final AtomicReference<Exception> reference = new AtomicReference<>();\n            final CountDownLatch onFailureLatch = new CountDownLatch(1);\n            permits.asyncBlockOperations(new ActionListener<Releasable>() {\n                @Override\n                public void onResponse(Releasable releasable) {\n                    releasable.close();\n                }\n\n                @Override\n                public void onFailure(final Exception e) {\n                    reference.set(e);\n                    onFailureLatch.countDown();\n                }\n            }, 1, TimeUnit.MILLISECONDS, ThreadPool.Names.GENERIC);\n            onFailureLatch.await();\n            assertThat(reference.get(), hasToString(containsString(\"timeout while blocking operations\")));\n        }\n\n        operationLatch.countDown();\n\n        operationCompleteLatch.await();\n\n        thread.join();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/IndexShardOperationPermitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"M"}],"commitId":"778e7d8b6518b7b81df7218669131bfe5691773c","commitMessage":"@@@Remove Unused IndexShardOperationPermits#blockOperations (#65376)\n\nFollow up to #64098.  this method was only used in tests now so this PR removes it.","date":"2020-11-24 16:48:49","modifiedFileCount":"3","status":"M","submitter":"Armin Braun"}]
