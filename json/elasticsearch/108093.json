[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    void setString(String setting, char[] value) {\n        assert isLoaded();\n        validateSettingName(setting);\n\n        ByteBuffer byteBuffer = StandardCharsets.UTF_8.encode(CharBuffer.wrap(value));\n        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());\n        Entry oldEntry = entries.get().put(setting, new Entry(EntryType.STRING, bytes));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":556,"groupId":"68167","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setString","params":"(Stringsetting@char[]value)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/994089be0c2de726dd5e17ed2881a09c1dd0c0.src","preCode":"    void setString(String setting, char[] value) {\n        assert isLoaded();\n        validateSettingName(setting);\n\n        ByteBuffer byteBuffer = StandardCharsets.UTF_8.encode(CharBuffer.wrap(value));\n        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());\n        Entry oldEntry = entries.get().put(setting, new Entry(EntryType.STRING, bytes));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":546,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    void setFile(String setting, byte[] bytes) {\n        assert isLoaded();\n        validateSettingName(setting);\n\n        Entry oldEntry = entries.get().put(setting, new Entry(EntryType.FILE, Arrays.copyOf(bytes, bytes.length)));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":567,"groupId":"63007","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setFile","params":"(Stringsetting@byte[]bytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/994089be0c2de726dd5e17ed2881a09c1dd0c0.src","preCode":"    void setFile(String setting, byte[] bytes) {\n        assert isLoaded();\n        validateSettingName(setting);\n\n        Entry oldEntry = entries.get().put(setting, new Entry(EntryType.FILE, Arrays.copyOf(bytes, bytes.length)));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-05-15 16:59:55","codes":[{"authorDate":"2018-05-15 16:59:55","commitOrder":2,"curCode":"    synchronized void setString(String setting, char[] value) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        ByteBuffer byteBuffer = StandardCharsets.UTF_8.encode(CharBuffer.wrap(value));\n        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());\n        Entry oldEntry = entries.get().put(setting, new Entry(EntryType.STRING, bytes));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","date":"2018-05-15 16:59:55","endLine":562,"groupId":"68167","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setString","params":"(Stringsetting@char[]value)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/7760491f8d5dd0025b5837eb979802ea751079.src","preCode":"    void setString(String setting, char[] value) {\n        assert isLoaded();\n        validateSettingName(setting);\n\n        ByteBuffer byteBuffer = StandardCharsets.UTF_8.encode(CharBuffer.wrap(value));\n        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());\n        Entry oldEntry = entries.get().put(setting, new Entry(EntryType.STRING, bytes));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"M"},{"authorDate":"2018-05-15 16:59:55","commitOrder":2,"curCode":"    synchronized void setFile(String setting, byte[] bytes) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        Entry oldEntry = entries.get().put(setting, new Entry(EntryType.FILE, Arrays.copyOf(bytes, bytes.length)));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","date":"2018-05-15 16:59:55","endLine":573,"groupId":"63007","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setFile","params":"(Stringsetting@byte[]bytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/7760491f8d5dd0025b5837eb979802ea751079.src","preCode":"    void setFile(String setting, byte[] bytes) {\n        assert isLoaded();\n        validateSettingName(setting);\n\n        Entry oldEntry = entries.get().put(setting, new Entry(EntryType.FILE, Arrays.copyOf(bytes, bytes.length)));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":565,"status":"M"}],"commitId":"8059aa7d55422dfc752b8af31146fbd7b9619214","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-15 16:59:55","modifiedFileCount":"98","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2019-05-01 18:46:31","codes":[{"authorDate":"2019-05-01 18:46:31","commitOrder":3,"curCode":"    synchronized void setString(String setting, char[] value) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        ByteBuffer byteBuffer = StandardCharsets.UTF_8.encode(CharBuffer.wrap(value));\n        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());\n        byte[] oldEntry = entries.get().put(setting, bytes);\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry, (byte)0);\n        }\n    }\n","date":"2019-05-01 18:46:31","endLine":560,"groupId":"55323","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setString","params":"(Stringsetting@char[]value)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2a/e90a868af1bc1684c69085c1bad65980f17ff1.src","preCode":"    synchronized void setString(String setting, char[] value) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        ByteBuffer byteBuffer = StandardCharsets.UTF_8.encode(CharBuffer.wrap(value));\n        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());\n        Entry oldEntry = entries.get().put(setting, new Entry(EntryType.STRING, bytes));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"M"},{"authorDate":"2019-05-01 18:46:31","commitOrder":3,"curCode":"    synchronized void setFile(String setting, byte[] bytes) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        byte[] oldEntry = entries.get().put(setting, Arrays.copyOf(bytes, bytes.length));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry, (byte)0);\n        }\n    }\n","date":"2019-05-01 18:46:31","endLine":571,"groupId":"55323","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setFile","params":"(Stringsetting@byte[]bytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2a/e90a868af1bc1684c69085c1bad65980f17ff1.src","preCode":"    synchronized void setFile(String setting, byte[] bytes) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        Entry oldEntry = entries.get().put(setting, new Entry(EntryType.FILE, Arrays.copyOf(bytes, bytes.length)));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":563,"status":"M"}],"commitId":"e0342defae2030d14de68177dffb2f72aed3d93c","commitMessage":"@@@Drop distinction in entries for keystore (#41701)\n\nToday we allow adding entries from a file or from a string.  yet we\ninternally maintain this distinction such that if you try to add a value\nfrom a file for a setting that expects a string or add a value from a\nstring for a setting that expects a file.  you will have a bad time. This\ncauses a pain for operators such that for each setting they need to know\nthis difference. Yet.  we do not need to maintain this distinction\ninternally as they are bytes after all. This commit removes that\ndistinction and includes logic to upgrade legacy keystores.","date":"2019-05-01 18:46:31","modifiedFileCount":"4","status":"M","submitter":"Jason Tedor"},{"authorTime":"2019-06-29 20:17:00","codes":[{"authorDate":"2019-06-29 20:17:00","commitOrder":4,"curCode":"    synchronized void setString(String setting, char[] value) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        ByteBuffer byteBuffer = StandardCharsets.UTF_8.encode(CharBuffer.wrap(value));\n        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());\n        Entry oldEntry = entries.get().put(setting, new Entry(bytes));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","date":"2019-06-29 20:17:00","endLine":583,"groupId":"68167","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setString","params":"(Stringsetting@char[]value)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7a/d69c1eebe0c20e3aa8260b4fa1c2c14eef305b.src","preCode":"    synchronized void setString(String setting, char[] value) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        ByteBuffer byteBuffer = StandardCharsets.UTF_8.encode(CharBuffer.wrap(value));\n        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());\n        byte[] oldEntry = entries.get().put(setting, bytes);\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry, (byte)0);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"M"},{"authorDate":"2019-06-29 20:17:00","commitOrder":4,"curCode":"    synchronized void setFile(String setting, byte[] bytes) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        Entry oldEntry = entries.get().put(setting, new Entry(Arrays.copyOf(bytes, bytes.length)));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","date":"2019-06-29 20:17:00","endLine":594,"groupId":"66283","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setFile","params":"(Stringsetting@byte[]bytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7a/d69c1eebe0c20e3aa8260b4fa1c2c14eef305b.src","preCode":"    synchronized void setFile(String setting, byte[] bytes) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        byte[] oldEntry = entries.get().put(setting, Arrays.copyOf(bytes, bytes.length));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry, (byte)0);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":586,"status":"M"}],"commitId":"cdfc98680f0e62aec2b558c883e092ee48140601","commitMessage":"@@@Consistent Secure Settings (#40416)\n\nIntroduces a new `ConsistentSecureSettingsValidatorService` service that exposes\na single public method.  namely `allSecureSettingsConsistent`. The method returns\n`true` if the local node's secure settings (inside the keystore) are equal to the\nmaster's.  and `false` otherwise. Technically.  the local node has to have exactly\nthe same secure settings - setting names should not be missing or in surplus\n- for all `SecureSetting` instances that are flagged with the newly introduced\n`Property.Consistent`. It is worth highlighting that the `allSecureSettingsConsistent`\nis not a consensus view across the cluster.  but rather the local node's perspective\nin relation to the master.","date":"2019-06-29 20:17:00","modifiedFileCount":"17","status":"M","submitter":"Albert Zaharovits"},{"authorTime":"2019-06-29 20:17:00","codes":[{"authorDate":"2021-07-21 12:45:39","commitOrder":5,"curCode":"    public synchronized void setString(String setting, char[] value) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        ByteBuffer byteBuffer = StandardCharsets.UTF_8.encode(CharBuffer.wrap(value));\n        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());\n        Entry oldEntry = entries.get().put(setting, new Entry(bytes));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","date":"2021-07-21 12:45:39","endLine":668,"groupId":"108093","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"setString","params":"(Stringsetting@char[]value)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/83/a959ce977339316d2b6551badf9dce88b9ecc9.src","preCode":"    synchronized void setString(String setting, char[] value) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        ByteBuffer byteBuffer = StandardCharsets.UTF_8.encode(CharBuffer.wrap(value));\n        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());\n        Entry oldEntry = entries.get().put(setting, new Entry(bytes));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":658,"status":"M"},{"authorDate":"2019-06-29 20:17:00","commitOrder":5,"curCode":"    synchronized void setFile(String setting, byte[] bytes) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        Entry oldEntry = entries.get().put(setting, new Entry(Arrays.copyOf(bytes, bytes.length)));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","date":"2019-06-29 20:17:00","endLine":594,"groupId":"108093","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setFile","params":"(Stringsetting@byte[]bytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7a/d69c1eebe0c20e3aa8260b4fa1c2c14eef305b.src","preCode":"    synchronized void setFile(String setting, byte[] bytes) {\n        ensureOpen();\n        validateSettingName(setting);\n\n        Entry oldEntry = entries.get().put(setting, new Entry(Arrays.copyOf(bytes, bytes.length)));\n        if (oldEntry != null) {\n            Arrays.fill(oldEntry.bytes, (byte)0);\n        }\n    }\n","realPath":"server/src/main/java/org/elasticsearch/common/settings/KeyStoreWrapper.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":586,"status":"N"}],"commitId":"b9bc7a6f3fcb76f01b54476e56a8308a4035e2a4","commitMessage":"@@@Configure security for the initial node cli (#74868)\n\nThis introduces a new cmd line tool that generates the security configuration\nfor a new node in a new cluster (as opposed to joining an existing cluster).\nThe security configuration consists of TLS key and certificates.  which\nare stored in a directory inside the config path.  as well as settings appended\nto the elasticsearch.yml referencing the aforementioned certs.","date":"2021-07-21 12:45:39","modifiedFileCount":"11","status":"M","submitter":"Albert Zaharovits"}]
