[{"authorTime":"2019-06-24 18:59:41","codes":[{"authorDate":"2019-06-24 18:59:41","commitOrder":1,"curCode":"    public void testUnsupportedHttpMethod() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public RestRequest.Method method() {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext());\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasablePagedBytesReference(byteArray, 0 , byteArray);\n        channel.sendResponse(new TestRestResponse(RestStatus.METHOD_NOT_ALLOWED, content));\n\n        Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>) (Class) ActionListener.class;\n        ArgumentCaptor<ActionListener<Void>> listenerCaptor = ArgumentCaptor.forClass(listenerClass);\n        verify(httpChannel).sendResponse(any(), listenerCaptor.capture());\n        ActionListener<Void> listener = listenerCaptor.getValue();\n        if (randomBoolean()) {\n            listener.onResponse(null);\n        } else {\n            listener.onFailure(new ClosedChannelException());\n        }\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","date":"2019-06-24 18:59:41","endLine":345,"groupId":"70281","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnsupportedHttpMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c5/8ec6a4becbb97f9bd5d6879cb277a8b4b88e50.src","preCode":"    public void testUnsupportedHttpMethod() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public RestRequest.Method method() {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext());\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasablePagedBytesReference(byteArray, 0 , byteArray);\n        channel.sendResponse(new TestRestResponse(RestStatus.METHOD_NOT_ALLOWED, content));\n\n        Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>) (Class) ActionListener.class;\n        ArgumentCaptor<ActionListener<Void>> listenerCaptor = ArgumentCaptor.forClass(listenerClass);\n        verify(httpChannel).sendResponse(any(), listenerCaptor.capture());\n        ActionListener<Void> listener = listenerCaptor.getValue();\n        if (randomBoolean()) {\n            listener.onResponse(null);\n        } else {\n            listener.onFailure(new ClosedChannelException());\n        }\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"B"},{"authorDate":"2019-06-24 18:59:41","commitOrder":1,"curCode":"    public void testCloseOnException() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public HttpResponse createResponse(RestStatus status, BytesReference content) {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext());\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasablePagedBytesReference(byteArray, 0 , byteArray);\n\n        expectThrows(IllegalArgumentException.class, () -> channel.sendResponse(new TestRestResponse(RestStatus.OK, content)));\n\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","date":"2019-06-24 18:59:41","endLine":374,"groupId":"21064","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseOnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c5/8ec6a4becbb97f9bd5d6879cb277a8b4b88e50.src","preCode":"    public void testCloseOnException() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public HttpResponse createResponse(RestStatus status, BytesReference content) {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext());\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasablePagedBytesReference(byteArray, 0 , byteArray);\n\n        expectThrows(IllegalArgumentException.class, () -> channel.sendResponse(new TestRestResponse(RestStatus.OK, content)));\n\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"B"}],"commitId":"45e8d542db7654673e9ffbb747d7a5ed2a2e28bf","commitMessage":"@@@Do not hang on unsupported HTTP methods (#43362)\n\nUnsupported HTTP methods are detected during requests dispatching \nwhich generates an appropriate error response. Sadly.  this error is \nnever sent back to the client because the method of the original \nrequest is checked again in DefaultRestChannel which throws again \nan IllegalArgumentException that is never handled.\n\nThis pull request changes the DefaultRestChannel so that the latest \nexception is swallowed.  allowing the error message to be sent back \nto the client. It also eagerly adds the objects to close to the toClose \nlist so that resources are more likely to be released if something\n goes wrong during the response creation and sending.","date":"2019-06-24 18:59:41","modifiedFileCount":"6","status":"B","submitter":"Tanguy Leroux"},{"authorTime":"2019-10-22 03:15:39","codes":[{"authorDate":"2019-10-22 03:15:39","commitOrder":2,"curCode":"    public void testUnsupportedHttpMethod() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public RestRequest.Method method() {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext());\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(new PagedBytesReference(byteArray, 0) , byteArray);\n        channel.sendResponse(new TestRestResponse(RestStatus.METHOD_NOT_ALLOWED, content));\n\n        Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>) (Class) ActionListener.class;\n        ArgumentCaptor<ActionListener<Void>> listenerCaptor = ArgumentCaptor.forClass(listenerClass);\n        verify(httpChannel).sendResponse(any(), listenerCaptor.capture());\n        ActionListener<Void> listener = listenerCaptor.getValue();\n        if (randomBoolean()) {\n            listener.onResponse(null);\n        } else {\n            listener.onFailure(new ClosedChannelException());\n        }\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","date":"2019-10-22 03:15:39","endLine":352,"groupId":"70281","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnsupportedHttpMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/85/670e893b97028fbac3d535cb41fff8db260087.src","preCode":"    public void testUnsupportedHttpMethod() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public RestRequest.Method method() {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext());\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasablePagedBytesReference(byteArray, 0 , byteArray);\n        channel.sendResponse(new TestRestResponse(RestStatus.METHOD_NOT_ALLOWED, content));\n\n        Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>) (Class) ActionListener.class;\n        ArgumentCaptor<ActionListener<Void>> listenerCaptor = ArgumentCaptor.forClass(listenerClass);\n        verify(httpChannel).sendResponse(any(), listenerCaptor.capture());\n        ActionListener<Void> listener = listenerCaptor.getValue();\n        if (randomBoolean()) {\n            listener.onResponse(null);\n        } else {\n            listener.onFailure(new ClosedChannelException());\n        }\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"},{"authorDate":"2019-10-22 03:15:39","commitOrder":2,"curCode":"    public void testCloseOnException() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public HttpResponse createResponse(RestStatus status, BytesReference content) {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext());\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(new PagedBytesReference(byteArray, 0) , byteArray);\n\n        expectThrows(IllegalArgumentException.class, () -> channel.sendResponse(new TestRestResponse(RestStatus.OK, content)));\n\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","date":"2019-10-22 03:15:39","endLine":381,"groupId":"21064","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseOnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/85/670e893b97028fbac3d535cb41fff8db260087.src","preCode":"    public void testCloseOnException() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public HttpResponse createResponse(RestStatus status, BytesReference content) {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext());\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasablePagedBytesReference(byteArray, 0 , byteArray);\n\n        expectThrows(IllegalArgumentException.class, () -> channel.sendResponse(new TestRestResponse(RestStatus.OK, content)));\n\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"}],"commitId":"458de912561dff153dbcf8d7a67b4f89e47773aa","commitMessage":"@@@Make BytesReference an interface (#48171)\n\nBytesReference is currently an abstract class which is extended by\nvarious implementations. This makes it very difficult to use the\ndelegation pattern. The implication of this is that our releasable\nBytesReference is a PagedBytesReference type and cannot be used as a\ngeneric releasable bytes reference that delegates to any reference type.\nThis commit makes BytesReference an interface and introduces an\nAbstractBytesReference for common functionality.","date":"2019-10-22 03:15:39","modifiedFileCount":"20","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-02-07 03:05:03","codes":[{"authorDate":"2020-02-07 03:05:03","commitOrder":3,"curCode":"    public void testUnsupportedHttpMethod() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public RestRequest.Method method() {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(new PagedBytesReference(byteArray, 0) , byteArray);\n        channel.sendResponse(new TestRestResponse(RestStatus.METHOD_NOT_ALLOWED, content));\n\n        Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>) (Class) ActionListener.class;\n        ArgumentCaptor<ActionListener<Void>> listenerCaptor = ArgumentCaptor.forClass(listenerClass);\n        verify(httpChannel).sendResponse(any(), listenerCaptor.capture());\n        ActionListener<Void> listener = listenerCaptor.getValue();\n        if (randomBoolean()) {\n            listener.onResponse(null);\n        } else {\n            listener.onFailure(new ClosedChannelException());\n        }\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","date":"2020-02-07 03:05:03","endLine":352,"groupId":"70281","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnsupportedHttpMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0f/82be7f23b02e39bf8edcbc8019b2c805567816.src","preCode":"    public void testUnsupportedHttpMethod() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public RestRequest.Method method() {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext());\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(new PagedBytesReference(byteArray, 0) , byteArray);\n        channel.sendResponse(new TestRestResponse(RestStatus.METHOD_NOT_ALLOWED, content));\n\n        Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>) (Class) ActionListener.class;\n        ArgumentCaptor<ActionListener<Void>> listenerCaptor = ArgumentCaptor.forClass(listenerClass);\n        verify(httpChannel).sendResponse(any(), listenerCaptor.capture());\n        ActionListener<Void> listener = listenerCaptor.getValue();\n        if (randomBoolean()) {\n            listener.onResponse(null);\n        } else {\n            listener.onFailure(new ClosedChannelException());\n        }\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"},{"authorDate":"2020-02-07 03:05:03","commitOrder":3,"curCode":"    public void testCloseOnException() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public HttpResponse createResponse(RestStatus status, BytesReference content) {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(new PagedBytesReference(byteArray, 0) , byteArray);\n\n        expectThrows(IllegalArgumentException.class, () -> channel.sendResponse(new TestRestResponse(RestStatus.OK, content)));\n\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","date":"2020-02-07 03:05:03","endLine":381,"groupId":"55486","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseOnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0f/82be7f23b02e39bf8edcbc8019b2c805567816.src","preCode":"    public void testCloseOnException() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public HttpResponse createResponse(RestStatus status, BytesReference content) {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext());\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(new PagedBytesReference(byteArray, 0) , byteArray);\n\n        expectThrows(IllegalArgumentException.class, () -> channel.sendResponse(new TestRestResponse(RestStatus.OK, content)));\n\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"}],"commitId":"26b9cf787dfcfb2340fd2dbc98e4c42faf868e40","commitMessage":"@@@Add Trace Logging of REST Requests (#51684)\n\nBeing able to trace log all REST requests to a node would make debugging\na number of issues a lot easier.\n","date":"2020-02-07 03:05:03","modifiedFileCount":"27","status":"M","submitter":"Armin Braun"},{"authorTime":"2020-08-27 20:29:24","codes":[{"authorDate":"2020-08-27 20:29:24","commitOrder":4,"curCode":"    public void testUnsupportedHttpMethod() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public RestRequest.Method method() {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(BytesReference.fromByteArray(byteArray, 0) , byteArray);\n        channel.sendResponse(new TestRestResponse(RestStatus.METHOD_NOT_ALLOWED, content));\n\n        Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>) (Class) ActionListener.class;\n        ArgumentCaptor<ActionListener<Void>> listenerCaptor = ArgumentCaptor.forClass(listenerClass);\n        verify(httpChannel).sendResponse(any(), listenerCaptor.capture());\n        ActionListener<Void> listener = listenerCaptor.getValue();\n        if (randomBoolean()) {\n            listener.onResponse(null);\n        } else {\n            listener.onFailure(new ClosedChannelException());\n        }\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","date":"2020-08-27 20:29:24","endLine":351,"groupId":"70281","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnsupportedHttpMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3c/0d0652f01bf7321c49705d6459c741ce3e8253.src","preCode":"    public void testUnsupportedHttpMethod() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public RestRequest.Method method() {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(new PagedBytesReference(byteArray, 0) , byteArray);\n        channel.sendResponse(new TestRestResponse(RestStatus.METHOD_NOT_ALLOWED, content));\n\n        Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>) (Class) ActionListener.class;\n        ArgumentCaptor<ActionListener<Void>> listenerCaptor = ArgumentCaptor.forClass(listenerClass);\n        verify(httpChannel).sendResponse(any(), listenerCaptor.capture());\n        ActionListener<Void> listener = listenerCaptor.getValue();\n        if (randomBoolean()) {\n            listener.onResponse(null);\n        } else {\n            listener.onFailure(new ClosedChannelException());\n        }\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"},{"authorDate":"2020-08-27 20:29:24","commitOrder":4,"curCode":"    public void testCloseOnException() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public HttpResponse createResponse(RestStatus status, BytesReference content) {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(BytesReference.fromByteArray(byteArray, 0) , byteArray);\n\n        expectThrows(IllegalArgumentException.class, () -> channel.sendResponse(new TestRestResponse(RestStatus.OK, content)));\n\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","date":"2020-08-27 20:29:24","endLine":380,"groupId":"55486","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseOnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3c/0d0652f01bf7321c49705d6459c741ce3e8253.src","preCode":"    public void testCloseOnException() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public HttpResponse createResponse(RestStatus status, BytesReference content) {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(new PagedBytesReference(byteArray, 0) , byteArray);\n\n        expectThrows(IllegalArgumentException.class, () -> channel.sendResponse(new TestRestResponse(RestStatus.OK, content)));\n\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"}],"commitId":"0a3d3919a141e6e3c9bbddc43d046a4c9211b6be","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-27 20:29:24","modifiedFileCount":"256","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-09-08 22:36:18","codes":[{"authorDate":"2020-09-08 22:36:18","commitOrder":5,"curCode":"    public void testUnsupportedHttpMethod() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestHttpRequest(httpVersion, null, \"/\") {\n            @Override\n            public RestRequest.Method method() {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), CorsHandler.fromSettings(Settings.EMPTY),\n            null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(BytesReference.fromByteArray(byteArray, 0) , byteArray);\n        channel.sendResponse(new TestRestResponse(RestStatus.METHOD_NOT_ALLOWED, content));\n\n        Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>) (Class) ActionListener.class;\n        ArgumentCaptor<ActionListener<Void>> listenerCaptor = ArgumentCaptor.forClass(listenerClass);\n        verify(httpChannel).sendResponse(any(), listenerCaptor.capture());\n        ActionListener<Void> listener = listenerCaptor.getValue();\n        if (randomBoolean()) {\n            listener.onResponse(null);\n        } else {\n            listener.onFailure(new ClosedChannelException());\n        }\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","date":"2020-09-08 22:36:18","endLine":313,"groupId":"70281","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testUnsupportedHttpMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/33c2211b6e20b7c51335e8681253bee51de7a8.src","preCode":"    public void testUnsupportedHttpMethod() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public RestRequest.Method method() {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(BytesReference.fromByteArray(byteArray, 0) , byteArray);\n        channel.sendResponse(new TestRestResponse(RestStatus.METHOD_NOT_ALLOWED, content));\n\n        Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>) (Class) ActionListener.class;\n        ArgumentCaptor<ActionListener<Void>> listenerCaptor = ArgumentCaptor.forClass(listenerClass);\n        verify(httpChannel).sendResponse(any(), listenerCaptor.capture());\n        ActionListener<Void> listener = listenerCaptor.getValue();\n        if (randomBoolean()) {\n            listener.onResponse(null);\n        } else {\n            listener.onFailure(new ClosedChannelException());\n        }\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"},{"authorDate":"2020-09-08 22:36:18","commitOrder":5,"curCode":"    public void testCloseOnException() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestHttpRequest(httpVersion, null, \"/\") {\n            @Override\n            public HttpResponse createResponse(RestStatus status, BytesReference content) {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), CorsHandler.fromSettings(Settings.EMPTY),\n            null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(BytesReference.fromByteArray(byteArray, 0) , byteArray);\n\n        expectThrows(IllegalArgumentException.class, () -> channel.sendResponse(new TestRestResponse(RestStatus.OK, content)));\n\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","date":"2020-09-08 22:36:18","endLine":343,"groupId":"21201","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseOnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/33c2211b6e20b7c51335e8681253bee51de7a8.src","preCode":"    public void testCloseOnException() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestRequest(httpVersion, null, \"/\") {\n            @Override\n            public HttpResponse createResponse(RestStatus status, BytesReference content) {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(BytesReference.fromByteArray(byteArray, 0) , byteArray);\n\n        expectThrows(IllegalArgumentException.class, () -> channel.sendResponse(new TestRestResponse(RestStatus.OK, content)));\n\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"}],"commitId":"d5f9e4ecb0c178f47b480973e203d48293e48b6b","commitMessage":"@@@Move CorsHandler to server (#62007)\n\nCurrently we duplicate our specialized cors logic in all transport\nplugins. This is unnecessary as it could be implemented in a single\nplace. This commit moves the logic to server. Additionally it fixes a\nbut where we are incorrectly closing http channels on early Cors\nresponses.","date":"2020-09-08 22:36:18","modifiedFileCount":"12","status":"M","submitter":"Tim Brooks"},{"authorTime":"2020-09-08 22:36:18","codes":[{"authorDate":"2021-08-11 23:15:30","commitOrder":6,"curCode":"    public void testUnsupportedHttpMethod() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestHttpRequest(httpVersion, null, \"/\") {\n            @Override\n            public RestRequest.Method method() {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), CorsHandler.fromSettings(Settings.EMPTY),\n            null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(BytesReference.fromByteArray(byteArray, 0) , byteArray);\n        channel.sendResponse(new TestRestResponse(RestStatus.METHOD_NOT_ALLOWED, content));\n\n        @SuppressWarnings(\"unchecked\")\n        Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>) (Class<?>) ActionListener.class;\n        ArgumentCaptor<ActionListener<Void>> listenerCaptor = ArgumentCaptor.forClass(listenerClass);\n        verify(httpChannel).sendResponse(any(), listenerCaptor.capture());\n        ActionListener<Void> listener = listenerCaptor.getValue();\n        if (randomBoolean()) {\n            listener.onResponse(null);\n        } else {\n            listener.onFailure(new ClosedChannelException());\n        }\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","date":"2021-08-11 23:15:30","endLine":303,"groupId":"104343","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testUnsupportedHttpMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/00/577bba2b0385a221ff35435273ca67d41767f7.src","preCode":"    public void testUnsupportedHttpMethod() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestHttpRequest(httpVersion, null, \"/\") {\n            @Override\n            public RestRequest.Method method() {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), CorsHandler.fromSettings(Settings.EMPTY),\n            null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(BytesReference.fromByteArray(byteArray, 0) , byteArray);\n        channel.sendResponse(new TestRestResponse(RestStatus.METHOD_NOT_ALLOWED, content));\n\n        Class<ActionListener<Void>> listenerClass = (Class<ActionListener<Void>>) (Class) ActionListener.class;\n        ArgumentCaptor<ActionListener<Void>> listenerCaptor = ArgumentCaptor.forClass(listenerClass);\n        verify(httpChannel).sendResponse(any(), listenerCaptor.capture());\n        ActionListener<Void> listener = listenerCaptor.getValue();\n        if (randomBoolean()) {\n            listener.onResponse(null);\n        } else {\n            listener.onFailure(new ClosedChannelException());\n        }\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2020-09-08 22:36:18","commitOrder":6,"curCode":"    public void testCloseOnException() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestHttpRequest(httpVersion, null, \"/\") {\n            @Override\n            public HttpResponse createResponse(RestStatus status, BytesReference content) {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), CorsHandler.fromSettings(Settings.EMPTY),\n            null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(BytesReference.fromByteArray(byteArray, 0) , byteArray);\n\n        expectThrows(IllegalArgumentException.class, () -> channel.sendResponse(new TestRestResponse(RestStatus.OK, content)));\n\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","date":"2020-09-08 22:36:18","endLine":343,"groupId":"104343","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseOnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/33c2211b6e20b7c51335e8681253bee51de7a8.src","preCode":"    public void testCloseOnException() {\n        final boolean close = randomBoolean();\n        final HttpRequest.HttpVersion httpVersion = close ? HttpRequest.HttpVersion.HTTP_1_0 : HttpRequest.HttpVersion.HTTP_1_1;\n        final String httpConnectionHeaderValue = close ? DefaultRestChannel.CLOSE : DefaultRestChannel.KEEP_ALIVE;\n        final RestRequest request = RestRequest.request(xContentRegistry(), new TestHttpRequest(httpVersion, null, \"/\") {\n            @Override\n            public HttpResponse createResponse(RestStatus status, BytesReference content) {\n                throw new IllegalArgumentException(\"test\");\n            }\n        }, httpChannel);\n        request.getHttpRequest().getHeaders().put(DefaultRestChannel.CONNECTION, Collections.singletonList(httpConnectionHeaderValue));\n\n        DefaultRestChannel channel = new DefaultRestChannel(httpChannel, request.getHttpRequest(), request, bigArrays,\n            HttpHandlingSettings.fromSettings(Settings.EMPTY), threadPool.getThreadContext(), CorsHandler.fromSettings(Settings.EMPTY),\n            null);\n\n        \r\n        final BigArrays bigArrays = new MockBigArrays(new MockPageCacheRecycler(Settings.EMPTY), new NoneCircuitBreakerService());\n        final ByteArray byteArray = bigArrays.newByteArray(0, false);\n        final BytesReference content = new ReleasableBytesReference(BytesReference.fromByteArray(byteArray, 0) , byteArray);\n\n        expectThrows(IllegalArgumentException.class, () -> channel.sendResponse(new TestRestResponse(RestStatus.OK, content)));\n\n        if (close) {\n            verify(httpChannel, times(1)).close();\n        } else {\n            verify(httpChannel, times(0)).close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/http/DefaultRestChannelTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"N"}],"commitId":"4137d110796f6308126ee2c573eebc5c3ebaa26a","commitMessage":"@@@Fix compiler warnings in :server - part 4 (#76302)\n\nCloses #40366.\n\nFix the last remaining javac issues when linting is enforced in `server/`.","date":"2021-08-11 23:15:30","modifiedFileCount":"81","status":"M","submitter":"Rory Hunter"}]
