[{"authorTime":"2020-07-10 21:44:56","codes":[{"authorDate":"2020-07-10 21:44:56","commitOrder":9,"curCode":"    public void testJoinDeduplication() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {},\n            () -> new StatusInfo(HEALTHY, \"info\"));\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(1));\n        CapturedRequest capturedRequest1 = capturedRequests1[0];\n        assertEquals(node1, capturedRequest1.node);\n\n        assertTrue(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2);\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(1));\n        CapturedRequest capturedRequest2 = capturedRequests2[0];\n        assertEquals(node2, capturedRequest2.node);\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        assertThat(capturingTransport.getCapturedRequestsAndClear().length, equalTo(0));\n\n        \r\n        if (randomBoolean()) {\n            capturingTransport.handleResponse(capturedRequest1.requestId, TransportResponse.Empty.INSTANCE);\n        } else {\n            capturingTransport.handleRemoteError(capturedRequest1.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        }\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n\n        \r\n        Optional<Join> optionalJoin2a = optionalJoin2.isPresent() && randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2a);\n        CapturedRequest[] capturedRequests2a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2a.length, equalTo(1));\n        CapturedRequest capturedRequest2a = capturedRequests2a[0];\n        assertEquals(node2, capturedRequest2a.node);\n\n        \r\n        assertTrue(joinHelper.isJoinPending());\n        capturingTransport.handleRemoteError(capturedRequest2.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest1a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest2a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        assertFalse(joinHelper.isJoinPending());\n    }\n","date":"2020-07-10 21:44:56","endLine":126,"groupId":"23875","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinDeduplication","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/af/f0e41ab8f118507dbb3352935c30dd305529df.src","preCode":"    public void testJoinDeduplication() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {},\n            () -> new StatusInfo(HEALTHY, \"info\"));\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(1));\n        CapturedRequest capturedRequest1 = capturedRequests1[0];\n        assertEquals(node1, capturedRequest1.node);\n\n        assertTrue(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2);\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(1));\n        CapturedRequest capturedRequest2 = capturedRequests2[0];\n        assertEquals(node2, capturedRequest2.node);\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        assertThat(capturingTransport.getCapturedRequestsAndClear().length, equalTo(0));\n\n        \r\n        if (randomBoolean()) {\n            capturingTransport.handleResponse(capturedRequest1.requestId, TransportResponse.Empty.INSTANCE);\n        } else {\n            capturingTransport.handleRemoteError(capturedRequest1.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        }\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n\n        \r\n        Optional<Join> optionalJoin2a = optionalJoin2.isPresent() && randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2a);\n        CapturedRequest[] capturedRequests2a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2a.length, equalTo(1));\n        CapturedRequest capturedRequest2a = capturedRequests2a[0];\n        assertEquals(node2, capturedRequest2a.node);\n\n        \r\n        assertTrue(joinHelper.isJoinPending());\n        capturingTransport.handleRemoteError(capturedRequest2.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest1a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest2a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        assertFalse(joinHelper.isJoinPending());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/JoinHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"MB"},{"authorDate":"2020-07-10 21:44:56","commitOrder":9,"curCode":"    public void testJoinFailureOnUnhealthyNodes() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        AtomicReference<StatusInfo> nodeHealthServiceStatus = new AtomicReference<>\n            (new StatusInfo(UNHEALTHY, \"unhealthy-info\"));\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {}, () -> nodeHealthServiceStatus.get());\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, randomNonNegativeLong(), optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n\n        transportService.start();\n        joinHelper.sendJoinRequest(node2, randomNonNegativeLong(), optionalJoin2);\n\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        nodeHealthServiceStatus.getAndSet(new StatusInfo(HEALTHY, \"healthy-info\"));\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n    }\n","date":"2020-07-10 21:44:56","endLine":230,"groupId":"70450","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinFailureOnUnhealthyNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/af/f0e41ab8f118507dbb3352935c30dd305529df.src","preCode":"    public void testJoinFailureOnUnhealthyNodes() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        AtomicReference<StatusInfo> nodeHealthServiceStatus = new AtomicReference<>\n            (new StatusInfo(UNHEALTHY, \"unhealthy-info\"));\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {}, () -> nodeHealthServiceStatus.get());\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, randomNonNegativeLong(), optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n\n        transportService.start();\n        joinHelper.sendJoinRequest(node2, randomNonNegativeLong(), optionalJoin2);\n\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        nodeHealthServiceStatus.getAndSet(new StatusInfo(HEALTHY, \"healthy-info\"));\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/JoinHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"B"}],"commitId":"366ca378a8644d6654417988820c67f4feb714fe","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-10 21:44:56","modifiedFileCount":"565","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-08-11 22:44:55","codes":[{"authorDate":"2020-08-11 22:44:55","commitOrder":10,"curCode":"    public void testJoinDeduplication() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        JoinHelper joinHelper = new JoinHelper(null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {},\n            () -> new StatusInfo(HEALTHY, \"info\"));\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(1));\n        CapturedRequest capturedRequest1 = capturedRequests1[0];\n        assertEquals(node1, capturedRequest1.node);\n\n        assertTrue(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2);\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(1));\n        CapturedRequest capturedRequest2 = capturedRequests2[0];\n        assertEquals(node2, capturedRequest2.node);\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        assertThat(capturingTransport.getCapturedRequestsAndClear().length, equalTo(0));\n\n        \r\n        if (randomBoolean()) {\n            capturingTransport.handleResponse(capturedRequest1.requestId, TransportResponse.Empty.INSTANCE);\n        } else {\n            capturingTransport.handleRemoteError(capturedRequest1.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        }\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n\n        \r\n        Optional<Join> optionalJoin2a = optionalJoin2.isPresent() && randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2a);\n        CapturedRequest[] capturedRequests2a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2a.length, equalTo(1));\n        CapturedRequest capturedRequest2a = capturedRequests2a[0];\n        assertEquals(node2, capturedRequest2a.node);\n\n        \r\n        assertTrue(joinHelper.isJoinPending());\n        capturingTransport.handleRemoteError(capturedRequest2.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest1a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest2a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        assertFalse(joinHelper.isJoinPending());\n    }\n","date":"2020-08-11 22:44:55","endLine":126,"groupId":"23875","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinDeduplication","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/2dba6b1a5f99cd91df23614c388ece17dcb5c2.src","preCode":"    public void testJoinDeduplication() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {},\n            () -> new StatusInfo(HEALTHY, \"info\"));\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(1));\n        CapturedRequest capturedRequest1 = capturedRequests1[0];\n        assertEquals(node1, capturedRequest1.node);\n\n        assertTrue(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2);\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(1));\n        CapturedRequest capturedRequest2 = capturedRequests2[0];\n        assertEquals(node2, capturedRequest2.node);\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        assertThat(capturingTransport.getCapturedRequestsAndClear().length, equalTo(0));\n\n        \r\n        if (randomBoolean()) {\n            capturingTransport.handleResponse(capturedRequest1.requestId, TransportResponse.Empty.INSTANCE);\n        } else {\n            capturingTransport.handleRemoteError(capturedRequest1.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        }\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n\n        \r\n        Optional<Join> optionalJoin2a = optionalJoin2.isPresent() && randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2a);\n        CapturedRequest[] capturedRequests2a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2a.length, equalTo(1));\n        CapturedRequest capturedRequest2a = capturedRequests2a[0];\n        assertEquals(node2, capturedRequest2a.node);\n\n        \r\n        assertTrue(joinHelper.isJoinPending());\n        capturingTransport.handleRemoteError(capturedRequest2.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest1a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest2a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        assertFalse(joinHelper.isJoinPending());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/JoinHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-08-11 22:44:55","commitOrder":10,"curCode":"    public void testJoinFailureOnUnhealthyNodes() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        AtomicReference<StatusInfo> nodeHealthServiceStatus = new AtomicReference<>\n            (new StatusInfo(UNHEALTHY, \"unhealthy-info\"));\n        JoinHelper joinHelper = new JoinHelper(null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {}, nodeHealthServiceStatus::get);\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, randomNonNegativeLong(), optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n\n        transportService.start();\n        joinHelper.sendJoinRequest(node2, randomNonNegativeLong(), optionalJoin2);\n\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        nodeHealthServiceStatus.getAndSet(new StatusInfo(HEALTHY, \"healthy-info\"));\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n    }\n","date":"2020-08-11 22:44:55","endLine":230,"groupId":"70450","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinFailureOnUnhealthyNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/2dba6b1a5f99cd91df23614c388ece17dcb5c2.src","preCode":"    public void testJoinFailureOnUnhealthyNodes() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        AtomicReference<StatusInfo> nodeHealthServiceStatus = new AtomicReference<>\n            (new StatusInfo(UNHEALTHY, \"unhealthy-info\"));\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {}, () -> nodeHealthServiceStatus.get());\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, randomNonNegativeLong(), optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n\n        transportService.start();\n        joinHelper.sendJoinRequest(node2, randomNonNegativeLong(), optionalJoin2);\n\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        nodeHealthServiceStatus.getAndSet(new StatusInfo(HEALTHY, \"healthy-info\"));\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/JoinHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"}],"commitId":"fd8b557935c58913805044a03de3453e45ab0318","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-11 22:44:55","modifiedFileCount":"130","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-01-04 21:42:48","codes":[{"authorDate":"2021-01-04 21:42:48","commitOrder":11,"curCode":"    public void testJoinDeduplication() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {},\n            () -> new StatusInfo(HEALTHY, \"info\"));\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(1));\n        CapturedRequest capturedRequest1 = capturedRequests1[0];\n        assertEquals(node1, capturedRequest1.node);\n\n        assertTrue(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2);\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(1));\n        CapturedRequest capturedRequest2 = capturedRequests2[0];\n        assertEquals(node2, capturedRequest2.node);\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        assertThat(capturingTransport.getCapturedRequestsAndClear().length, equalTo(0));\n\n        \r\n        if (randomBoolean()) {\n            capturingTransport.handleResponse(capturedRequest1.requestId, TransportResponse.Empty.INSTANCE);\n        } else {\n            capturingTransport.handleRemoteError(capturedRequest1.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        }\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n\n        \r\n        Optional<Join> optionalJoin2a = optionalJoin2.isPresent() && randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2a);\n        CapturedRequest[] capturedRequests2a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2a.length, equalTo(1));\n        CapturedRequest capturedRequest2a = capturedRequests2a[0];\n        assertEquals(node2, capturedRequest2a.node);\n\n        \r\n        assertTrue(joinHelper.isJoinPending());\n        capturingTransport.handleRemoteError(capturedRequest2.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest1a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest2a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        assertFalse(joinHelper.isJoinPending());\n    }\n","date":"2021-01-04 21:42:48","endLine":128,"groupId":"23875","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinDeduplication","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/42/4a29dd74cfd8c0f58196f7f6b88d5aee79ba70.src","preCode":"    public void testJoinDeduplication() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        JoinHelper joinHelper = new JoinHelper(null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {},\n            () -> new StatusInfo(HEALTHY, \"info\"));\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(1));\n        CapturedRequest capturedRequest1 = capturedRequests1[0];\n        assertEquals(node1, capturedRequest1.node);\n\n        assertTrue(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2);\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(1));\n        CapturedRequest capturedRequest2 = capturedRequests2[0];\n        assertEquals(node2, capturedRequest2.node);\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        assertThat(capturingTransport.getCapturedRequestsAndClear().length, equalTo(0));\n\n        \r\n        if (randomBoolean()) {\n            capturingTransport.handleResponse(capturedRequest1.requestId, TransportResponse.Empty.INSTANCE);\n        } else {\n            capturingTransport.handleRemoteError(capturedRequest1.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        }\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n\n        \r\n        Optional<Join> optionalJoin2a = optionalJoin2.isPresent() && randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2a);\n        CapturedRequest[] capturedRequests2a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2a.length, equalTo(1));\n        CapturedRequest capturedRequest2a = capturedRequests2a[0];\n        assertEquals(node2, capturedRequest2a.node);\n\n        \r\n        assertTrue(joinHelper.isJoinPending());\n        capturingTransport.handleRemoteError(capturedRequest2.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest1a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest2a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        assertFalse(joinHelper.isJoinPending());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/JoinHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2021-01-04 21:42:48","commitOrder":11,"curCode":"    public void testJoinFailureOnUnhealthyNodes() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        AtomicReference<StatusInfo> nodeHealthServiceStatus = new AtomicReference<>\n            (new StatusInfo(UNHEALTHY, \"unhealthy-info\"));\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {}, nodeHealthServiceStatus::get);\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, randomNonNegativeLong(), optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n\n        transportService.start();\n        joinHelper.sendJoinRequest(node2, randomNonNegativeLong(), optionalJoin2);\n\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        nodeHealthServiceStatus.getAndSet(new StatusInfo(HEALTHY, \"healthy-info\"));\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n    }\n","date":"2021-01-04 21:42:48","endLine":236,"groupId":"70450","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinFailureOnUnhealthyNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/42/4a29dd74cfd8c0f58196f7f6b88d5aee79ba70.src","preCode":"    public void testJoinFailureOnUnhealthyNodes() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        AtomicReference<StatusInfo> nodeHealthServiceStatus = new AtomicReference<>\n            (new StatusInfo(UNHEALTHY, \"unhealthy-info\"));\n        JoinHelper joinHelper = new JoinHelper(null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {}, nodeHealthServiceStatus::get);\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, randomNonNegativeLong(), optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n\n        transportService.start();\n        joinHelper.sendJoinRequest(node2, randomNonNegativeLong(), optionalJoin2);\n\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        nodeHealthServiceStatus.getAndSet(new StatusInfo(HEALTHY, \"healthy-info\"));\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/JoinHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"acfffc63ca4166e099aa2c01bdfab3e75957df35","commitMessage":"@@@Clarify message emitted on cluster UUID mismatch (#66915)\n\nToday we report a join failure due to a cluster UUID mismatch with the\nfollowing (accurate.  but mystifying) message:\n\n    join validation on cluster state with a different cluster uuid [...] than local cluster uuid [...].  rejecting\n\nThis tends to occur mostly when setting up a cluster for the first time\nand gives users no clue what they've actually done wrong or what they\nshould do to fix it.\n\nThis commit adjusts this message to indicate that the problem is likely\ndiscovery or cluster bootstrapping configuration and indicates that the\ncluster UUID persists across restarts and suggests the usual fix of\nwiping the node's data path to get out of the mess.","date":"2021-01-04 21:42:48","modifiedFileCount":"3","status":"M","submitter":"David Turner"},{"authorTime":"2021-07-05 19:33:02","codes":[{"authorDate":"2021-07-05 19:33:02","commitOrder":12,"curCode":"    public void testJoinDeduplication() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue();\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {},\n            () -> new StatusInfo(HEALTHY, \"info\"));\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(1));\n        CapturedRequest capturedRequest1 = capturedRequests1[0];\n        assertEquals(node1, capturedRequest1.node);\n\n        assertTrue(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2);\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(1));\n        CapturedRequest capturedRequest2 = capturedRequests2[0];\n        assertEquals(node2, capturedRequest2.node);\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        assertThat(capturingTransport.getCapturedRequestsAndClear().length, equalTo(0));\n\n        \r\n        if (randomBoolean()) {\n            capturingTransport.handleResponse(capturedRequest1.requestId, TransportResponse.Empty.INSTANCE);\n        } else {\n            capturingTransport.handleRemoteError(capturedRequest1.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        }\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n\n        \r\n        Optional<Join> optionalJoin2a = optionalJoin2.isPresent() && randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2a);\n        CapturedRequest[] capturedRequests2a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2a.length, equalTo(1));\n        CapturedRequest capturedRequest2a = capturedRequests2a[0];\n        assertEquals(node2, capturedRequest2a.node);\n\n        \r\n        assertTrue(joinHelper.isJoinPending());\n        capturingTransport.handleRemoteError(capturedRequest2.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest1a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest2a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        assertFalse(joinHelper.isJoinPending());\n    }\n","date":"2021-07-05 19:33:02","endLine":116,"groupId":"23875","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinDeduplication","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fe/935182067453c4dc9ee78e5856227e795ed9ca.src","preCode":"    public void testJoinDeduplication() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {},\n            () -> new StatusInfo(HEALTHY, \"info\"));\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(1));\n        CapturedRequest capturedRequest1 = capturedRequests1[0];\n        assertEquals(node1, capturedRequest1.node);\n\n        assertTrue(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2);\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(1));\n        CapturedRequest capturedRequest2 = capturedRequests2[0];\n        assertEquals(node2, capturedRequest2.node);\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        assertThat(capturingTransport.getCapturedRequestsAndClear().length, equalTo(0));\n\n        \r\n        if (randomBoolean()) {\n            capturingTransport.handleResponse(capturedRequest1.requestId, TransportResponse.Empty.INSTANCE);\n        } else {\n            capturingTransport.handleRemoteError(capturedRequest1.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        }\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n\n        \r\n        Optional<Join> optionalJoin2a = optionalJoin2.isPresent() && randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2a);\n        CapturedRequest[] capturedRequests2a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2a.length, equalTo(1));\n        CapturedRequest capturedRequest2a = capturedRequests2a[0];\n        assertEquals(node2, capturedRequest2a.node);\n\n        \r\n        assertTrue(joinHelper.isJoinPending());\n        capturingTransport.handleRemoteError(capturedRequest2.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest1a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest2a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        assertFalse(joinHelper.isJoinPending());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/JoinHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2021-07-05 19:33:02","commitOrder":12,"curCode":"    public void testJoinFailureOnUnhealthyNodes() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue();\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        AtomicReference<StatusInfo> nodeHealthServiceStatus = new AtomicReference<>\n            (new StatusInfo(UNHEALTHY, \"unhealthy-info\"));\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {}, nodeHealthServiceStatus::get);\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, randomNonNegativeLong(), optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n\n        transportService.start();\n        joinHelper.sendJoinRequest(node2, randomNonNegativeLong(), optionalJoin2);\n\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        nodeHealthServiceStatus.getAndSet(new StatusInfo(HEALTHY, \"healthy-info\"));\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n    }\n","date":"2021-07-05 19:33:02","endLine":222,"groupId":"70450","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinFailureOnUnhealthyNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fe/935182067453c4dc9ee78e5856227e795ed9ca.src","preCode":"    public void testJoinFailureOnUnhealthyNodes() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue(\n            Settings.builder().put(NODE_NAME_SETTING.getKey(), \"node0\").build(), random());\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        AtomicReference<StatusInfo> nodeHealthServiceStatus = new AtomicReference<>\n            (new StatusInfo(UNHEALTHY, \"unhealthy-info\"));\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {}, nodeHealthServiceStatus::get);\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, randomNonNegativeLong(), optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n\n        transportService.start();\n        joinHelper.sendJoinRequest(node2, randomNonNegativeLong(), optionalJoin2);\n\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        nodeHealthServiceStatus.getAndSet(new StatusInfo(HEALTHY, \"healthy-info\"));\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/JoinHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"588fe5c5f152e25bbfd9ad76e5f755107fe505ea","commitMessage":"@@@Move DeterministicTaskQueue to appropriate package (#74901)\n\n`o.e.c.coordination.DeterministicTaskQueue` is today used in various\nplaces.  not just for tests of the cluster coordination subsystem. It's\nalso a bit of a pain to construct.  requiring a nonempty `Settings` and a\n`Random` even though essentially everyone passes in the same values.\nThis commit moves this class to the more generic `o.e.c.util.concurrent`\npackage.  adds some Javadoc.  and makes it easier to construct.","date":"2021-07-05 19:33:02","modifiedFileCount":"30","status":"M","submitter":"David Turner"},{"authorTime":"2021-09-14 13:35:14","codes":[{"authorDate":"2021-09-14 13:35:14","commitOrder":13,"curCode":"    public void testJoinDeduplication() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue();\n        CapturingTransport capturingTransport = new HandshakingCapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = new TransportService(\n            Settings.EMPTY,\n            capturingTransport,\n            deterministicTaskQueue.getThreadPool(),\n            TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode,\n            null,\n            Collections.emptySet(),\n            new ClusterConnectionManager(Settings.EMPTY, capturingTransport)\n        );\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {},\n            () -> new StatusInfo(HEALTHY, \"info\"));\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n        final boolean mightSucceed = randomBoolean();\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(1));\n        CapturedRequest capturedRequest1 = capturedRequests1[0];\n        assertEquals(node1, capturedRequest1.node);\n\n        assertTrue(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2);\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(1));\n        CapturedRequest capturedRequest2 = capturedRequests2[0];\n        assertEquals(node2, capturedRequest2.node);\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        assertThat(capturingTransport.getCapturedRequestsAndClear().length, equalTo(0));\n\n        \r\n        completeJoinRequest(capturingTransport, capturedRequest1, mightSucceed);\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n\n        \r\n        Optional<Join> optionalJoin2a = optionalJoin2.isPresent() && randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2a);\n        CapturedRequest[] capturedRequests2a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2a.length, equalTo(1));\n        CapturedRequest capturedRequest2a = capturedRequests2a[0];\n        assertEquals(node2, capturedRequest2a.node);\n\n        \r\n        assertTrue(joinHelper.isJoinPending());\n        assertTrue(transportService.nodeConnected(node1));\n        assertTrue(transportService.nodeConnected(node2));\n\n        completeJoinRequest(capturingTransport, capturedRequest2, mightSucceed);\n        completeJoinRequest(capturingTransport, capturedRequest1a, mightSucceed);\n        completeJoinRequest(capturingTransport, capturedRequest2a, mightSucceed);\n        assertFalse(joinHelper.isJoinPending());\n\n        if (mightSucceed) {\n            \r\n            joinHelper.onClusterStateApplied();\n        }\n        assertFalse(transportService.nodeConnected(node1));\n        assertFalse(transportService.nodeConnected(node2));\n    }\n","date":"2021-09-14 13:35:14","endLine":134,"groupId":"102361","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testJoinDeduplication","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c7/752cfe7376b41e2634690cd96be89a85dcda38.src","preCode":"    public void testJoinDeduplication() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue();\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {},\n            () -> new StatusInfo(HEALTHY, \"info\"));\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(1));\n        CapturedRequest capturedRequest1 = capturedRequests1[0];\n        assertEquals(node1, capturedRequest1.node);\n\n        assertTrue(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2);\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(1));\n        CapturedRequest capturedRequest2 = capturedRequests2[0];\n        assertEquals(node2, capturedRequest2.node);\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        assertThat(capturingTransport.getCapturedRequestsAndClear().length, equalTo(0));\n\n        \r\n        if (randomBoolean()) {\n            capturingTransport.handleResponse(capturedRequest1.requestId, TransportResponse.Empty.INSTANCE);\n        } else {\n            capturingTransport.handleRemoteError(capturedRequest1.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        }\n\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n\n        \r\n        Optional<Join> optionalJoin2a = optionalJoin2.isPresent() && randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node2, 0L, optionalJoin2a);\n        CapturedRequest[] capturedRequests2a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2a.length, equalTo(1));\n        CapturedRequest capturedRequest2a = capturedRequests2a[0];\n        assertEquals(node2, capturedRequest2a.node);\n\n        \r\n        assertTrue(joinHelper.isJoinPending());\n        capturingTransport.handleRemoteError(capturedRequest2.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest1a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        capturingTransport.handleRemoteError(capturedRequest2a.requestId, new CoordinationStateRejectedException(\"dummy\"));\n        assertFalse(joinHelper.isJoinPending());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/JoinHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2021-09-14 13:35:14","commitOrder":13,"curCode":"    public void testJoinFailureOnUnhealthyNodes() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue();\n        CapturingTransport capturingTransport = new HandshakingCapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        AtomicReference<StatusInfo> nodeHealthServiceStatus = new AtomicReference<>\n            (new StatusInfo(UNHEALTHY, \"unhealthy-info\"));\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {}, nodeHealthServiceStatus::get);\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, randomNonNegativeLong(), optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n\n        transportService.start();\n        joinHelper.sendJoinRequest(node2, randomNonNegativeLong(), optionalJoin2);\n\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        nodeHealthServiceStatus.getAndSet(new StatusInfo(HEALTHY, \"healthy-info\"));\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n    }\n","date":"2021-09-14 13:35:14","endLine":248,"groupId":"102361","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testJoinFailureOnUnhealthyNodes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c7/752cfe7376b41e2634690cd96be89a85dcda38.src","preCode":"    public void testJoinFailureOnUnhealthyNodes() {\n        DeterministicTaskQueue deterministicTaskQueue = new DeterministicTaskQueue();\n        CapturingTransport capturingTransport = new CapturingTransport();\n        DiscoveryNode localNode = new DiscoveryNode(\"node0\", buildNewFakeTransportAddress(), Version.CURRENT);\n        TransportService transportService = capturingTransport.createTransportService(Settings.EMPTY,\n            deterministicTaskQueue.getThreadPool(), TransportService.NOOP_TRANSPORT_INTERCEPTOR,\n            x -> localNode, null, Collections.emptySet());\n        AtomicReference<StatusInfo> nodeHealthServiceStatus = new AtomicReference<>\n            (new StatusInfo(UNHEALTHY, \"unhealthy-info\"));\n        JoinHelper joinHelper = new JoinHelper(Settings.EMPTY, null, null, transportService, () -> 0L, () -> null,\n            (joinRequest, joinCallback) -> { throw new AssertionError(); }, startJoinRequest -> { throw new AssertionError(); },\n            Collections.emptyList(), (s, p, r) -> {}, nodeHealthServiceStatus::get);\n        transportService.start();\n\n        DiscoveryNode node1 = new DiscoveryNode(\"node1\", buildNewFakeTransportAddress(), Version.CURRENT);\n        DiscoveryNode node2 = new DiscoveryNode(\"node2\", buildNewFakeTransportAddress(), Version.CURRENT);\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin1 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node1, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n        joinHelper.sendJoinRequest(node1, randomNonNegativeLong(), optionalJoin1);\n        CapturedRequest[] capturedRequests1 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        \r\n        Optional<Join> optionalJoin2 = randomBoolean() ? Optional.empty() :\n            Optional.of(new Join(localNode, node2, randomNonNegativeLong(), randomNonNegativeLong(), randomNonNegativeLong()));\n\n        transportService.start();\n        joinHelper.sendJoinRequest(node2, randomNonNegativeLong(), optionalJoin2);\n\n        CapturedRequest[] capturedRequests2 = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests2.length, equalTo(0));\n\n        assertFalse(joinHelper.isJoinPending());\n\n        nodeHealthServiceStatus.getAndSet(new StatusInfo(HEALTHY, \"healthy-info\"));\n        \r\n        joinHelper.sendJoinRequest(node1, 0L, optionalJoin1);\n        CapturedRequest[] capturedRequests1a = capturingTransport.getCapturedRequestsAndClear();\n        assertThat(capturedRequests1a.length, equalTo(1));\n        CapturedRequest capturedRequest1a = capturedRequests1a[0];\n        assertEquals(node1, capturedRequest1a.node);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/coordination/JoinHelperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"}],"commitId":"a67e07ec72a7a2b2e261330cb0753d33d5fc2690","commitMessage":"@@@Improve control of outgoing connection lifecycles (#77295)\n\nToday we open connections to other nodes in various places and largely\nassume that they remain open as needed.  only closing them when applying\na cluster state that removes the remote node from the cluster. This\nisn't ideal: we might preserve unnecessary connections to remote nodes\nthat aren't in the cluster if they never manage to join the cluster.  and\nwe might also disconnect from a node that left the cluster while it's in\nthe process of re-joining too (see #67873).\n\nWith this commit we move to a model in which each user of a connection\nto a remote node acquires a reference to the connection that must be\nreleased once it's no longer needed. Connections remain open while there\nare any live references.  but are now actively closed when all references\nare released.\n\nFixes #67873","date":"2021-09-14 13:35:14","modifiedFileCount":"44","status":"M","submitter":"David Turner"}]
