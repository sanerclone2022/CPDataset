[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testAddIndexOperationListener() throws IOException {\n        IndexModule module = new IndexModule(IndexSettingsModule.newIndexSettings(index, settings), emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        IndexingOperationListener listener = new IndexingOperationListener() {\n            @Override\n            public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {\n                executed.set(true);\n                return operation;\n            }\n        };\n        module.addIndexOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getIndexOperationListeners().size());\n        assertEquals(IndexingSlowLog.class, indexService.getIndexOperationListeners().get(0).getClass());\n        assertSame(listener, indexService.getIndexOperationListeners().get(1));\n\n        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n        Engine.Index index = new Engine.Index(new Term(\"_id\",  Uid.encodeId(doc.id())), randomNonNegativeLong(), doc);\n        ShardId shardId = new ShardId(new Index(\"foo\", \"bar\"), 0);\n        for (IndexingOperationListener l : indexService.getIndexOperationListeners()) {\n            l.preIndex(shardId, index);\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","date":"2018-04-26 03:22:53","endLine":252,"groupId":"58371","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddIndexOperationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/00/8b05f6a1e958db82a077cf4a3a1999e957b64d.src","preCode":"    public void testAddIndexOperationListener() throws IOException {\n        IndexModule module = new IndexModule(IndexSettingsModule.newIndexSettings(index, settings), emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        IndexingOperationListener listener = new IndexingOperationListener() {\n            @Override\n            public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {\n                executed.set(true);\n                return operation;\n            }\n        };\n        module.addIndexOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getIndexOperationListeners().size());\n        assertEquals(IndexingSlowLog.class, indexService.getIndexOperationListeners().get(0).getClass());\n        assertSame(listener, indexService.getIndexOperationListeners().get(1));\n\n        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n        Engine.Index index = new Engine.Index(new Term(\"_id\",  Uid.encodeId(doc.id())), randomNonNegativeLong(), doc);\n        ShardId shardId = new ShardId(new Index(\"foo\", \"bar\"), 0);\n        for (IndexingOperationListener l : indexService.getIndexOperationListeners()) {\n            l.preIndex(shardId, index);\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testAddSearchOperationListener() throws IOException {\n        IndexModule module = new IndexModule(IndexSettingsModule.newIndexSettings(index, settings), emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        SearchOperationListener listener = new SearchOperationListener() {\n\n            @Override\n            public void onNewContext(SearchContext context) {\n                executed.set(true);\n            }\n        };\n        module.addSearchOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getSearchOperationListener().size());\n        assertEquals(SearchSlowLog.class, indexService.getSearchOperationListener().get(0).getClass());\n        assertSame(listener, indexService.getSearchOperationListener().get(1));\n\n        for (SearchOperationListener l : indexService.getSearchOperationListener()) {\n            l.onNewContext(new TestSearchContext(null));\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","date":"2018-04-26 03:22:53","endLine":279,"groupId":"36112","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddSearchOperationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/00/8b05f6a1e958db82a077cf4a3a1999e957b64d.src","preCode":"    public void testAddSearchOperationListener() throws IOException {\n        IndexModule module = new IndexModule(IndexSettingsModule.newIndexSettings(index, settings), emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        SearchOperationListener listener = new SearchOperationListener() {\n\n            @Override\n            public void onNewContext(SearchContext context) {\n                executed.set(true);\n            }\n        };\n        module.addSearchOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getSearchOperationListener().size());\n        assertEquals(SearchSlowLog.class, indexService.getSearchOperationListener().get(0).getClass());\n        assertSame(listener, indexService.getSearchOperationListener().get(1));\n\n        for (SearchOperationListener l : indexService.getSearchOperationListener()) {\n            l.onNewContext(new TestSearchContext(null));\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-06-11 16:47:26","codes":[{"authorDate":"2018-06-11 16:47:26","commitOrder":2,"curCode":"    public void testAddIndexOperationListener() throws IOException {\n        IndexModule module =\n                new IndexModule(IndexSettingsModule.newIndexSettings(index, settings), emptyAnalysisRegistry, new InternalEngineFactory());\n        AtomicBoolean executed = new AtomicBoolean(false);\n        IndexingOperationListener listener = new IndexingOperationListener() {\n            @Override\n            public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {\n                executed.set(true);\n                return operation;\n            }\n        };\n        module.addIndexOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getIndexOperationListeners().size());\n        assertEquals(IndexingSlowLog.class, indexService.getIndexOperationListeners().get(0).getClass());\n        assertSame(listener, indexService.getIndexOperationListeners().get(1));\n\n        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n        Engine.Index index = new Engine.Index(new Term(\"_id\",  Uid.encodeId(doc.id())), randomNonNegativeLong(), doc);\n        ShardId shardId = new ShardId(new Index(\"foo\", \"bar\"), 0);\n        for (IndexingOperationListener l : indexService.getIndexOperationListeners()) {\n            l.preIndex(shardId, index);\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","date":"2018-06-11 16:47:26","endLine":254,"groupId":"58371","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddIndexOperationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/531bdeb902f73404f7c1c753ba25c8b6869ca5.src","preCode":"    public void testAddIndexOperationListener() throws IOException {\n        IndexModule module = new IndexModule(IndexSettingsModule.newIndexSettings(index, settings), emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        IndexingOperationListener listener = new IndexingOperationListener() {\n            @Override\n            public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {\n                executed.set(true);\n                return operation;\n            }\n        };\n        module.addIndexOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getIndexOperationListeners().size());\n        assertEquals(IndexingSlowLog.class, indexService.getIndexOperationListeners().get(0).getClass());\n        assertSame(listener, indexService.getIndexOperationListeners().get(1));\n\n        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n        Engine.Index index = new Engine.Index(new Term(\"_id\",  Uid.encodeId(doc.id())), randomNonNegativeLong(), doc);\n        ShardId shardId = new ShardId(new Index(\"foo\", \"bar\"), 0);\n        for (IndexingOperationListener l : indexService.getIndexOperationListeners()) {\n            l.preIndex(shardId, index);\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2018-06-11 16:47:26","commitOrder":2,"curCode":"    public void testAddSearchOperationListener() throws IOException {\n        IndexModule module =\n                new IndexModule(IndexSettingsModule.newIndexSettings(index, settings), emptyAnalysisRegistry, new InternalEngineFactory());\n        AtomicBoolean executed = new AtomicBoolean(false);\n        SearchOperationListener listener = new SearchOperationListener() {\n\n            @Override\n            public void onNewContext(SearchContext context) {\n                executed.set(true);\n            }\n        };\n        module.addSearchOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getSearchOperationListener().size());\n        assertEquals(SearchSlowLog.class, indexService.getSearchOperationListener().get(0).getClass());\n        assertSame(listener, indexService.getSearchOperationListener().get(1));\n\n        for (SearchOperationListener l : indexService.getSearchOperationListener()) {\n            l.onNewContext(new TestSearchContext(null));\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","date":"2018-06-11 16:47:26","endLine":282,"groupId":"36112","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddSearchOperationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1d/531bdeb902f73404f7c1c753ba25c8b6869ca5.src","preCode":"    public void testAddSearchOperationListener() throws IOException {\n        IndexModule module = new IndexModule(IndexSettingsModule.newIndexSettings(index, settings), emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        SearchOperationListener listener = new SearchOperationListener() {\n\n            @Override\n            public void onNewContext(SearchContext context) {\n                executed.set(true);\n            }\n        };\n        module.addSearchOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getSearchOperationListener().size());\n        assertEquals(SearchSlowLog.class, indexService.getSearchOperationListener().get(0).getClass());\n        assertSame(listener, indexService.getSearchOperationListener().get(1));\n\n        for (SearchOperationListener l : indexService.getSearchOperationListener()) {\n            l.onNewContext(new TestSearchContext(null));\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"}],"commitId":"9ee492a3f0768a3790671bfe46223e700082730a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-06-11 16:47:26","modifiedFileCount":"192","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-07-27 17:51:09","codes":[{"authorDate":"2018-07-27 17:51:09","commitOrder":3,"curCode":"    public void testAddIndexOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap());\n        AtomicBoolean executed = new AtomicBoolean(false);\n        IndexingOperationListener listener = new IndexingOperationListener() {\n            @Override\n            public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {\n                executed.set(true);\n                return operation;\n            }\n        };\n        module.addIndexOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getIndexOperationListeners().size());\n        assertEquals(IndexingSlowLog.class, indexService.getIndexOperationListeners().get(0).getClass());\n        assertSame(listener, indexService.getIndexOperationListeners().get(1));\n\n        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n        Engine.Index index = new Engine.Index(new Term(\"_id\",  Uid.encodeId(doc.id())), randomNonNegativeLong(), doc);\n        ShardId shardId = new ShardId(new Index(\"foo\", \"bar\"), 0);\n        for (IndexingOperationListener l : indexService.getIndexOperationListeners()) {\n            l.preIndex(shardId, index);\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","date":"2018-07-27 17:51:09","endLine":252,"groupId":"58371","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddIndexOperationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a8/2b932e2b570eb6f0e5fcf6332c33b06e6da71c.src","preCode":"    public void testAddIndexOperationListener() throws IOException {\n        IndexModule module =\n                new IndexModule(IndexSettingsModule.newIndexSettings(index, settings), emptyAnalysisRegistry, new InternalEngineFactory());\n        AtomicBoolean executed = new AtomicBoolean(false);\n        IndexingOperationListener listener = new IndexingOperationListener() {\n            @Override\n            public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {\n                executed.set(true);\n                return operation;\n            }\n        };\n        module.addIndexOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getIndexOperationListeners().size());\n        assertEquals(IndexingSlowLog.class, indexService.getIndexOperationListeners().get(0).getClass());\n        assertSame(listener, indexService.getIndexOperationListeners().get(1));\n\n        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n        Engine.Index index = new Engine.Index(new Term(\"_id\",  Uid.encodeId(doc.id())), randomNonNegativeLong(), doc);\n        ShardId shardId = new ShardId(new Index(\"foo\", \"bar\"), 0);\n        for (IndexingOperationListener l : indexService.getIndexOperationListeners()) {\n            l.preIndex(shardId, index);\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"},{"authorDate":"2018-07-27 17:51:09","commitOrder":3,"curCode":"    public void testAddSearchOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap());\n        AtomicBoolean executed = new AtomicBoolean(false);\n        SearchOperationListener listener = new SearchOperationListener() {\n\n            @Override\n            public void onNewContext(SearchContext context) {\n                executed.set(true);\n            }\n        };\n        module.addSearchOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getSearchOperationListener().size());\n        assertEquals(SearchSlowLog.class, indexService.getSearchOperationListener().get(0).getClass());\n        assertSame(listener, indexService.getSearchOperationListener().get(1));\n\n        for (SearchOperationListener l : indexService.getSearchOperationListener()) {\n            l.onNewContext(new TestSearchContext(null));\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","date":"2018-07-27 17:51:09","endLine":280,"groupId":"36112","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddSearchOperationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a8/2b932e2b570eb6f0e5fcf6332c33b06e6da71c.src","preCode":"    public void testAddSearchOperationListener() throws IOException {\n        IndexModule module =\n                new IndexModule(IndexSettingsModule.newIndexSettings(index, settings), emptyAnalysisRegistry, new InternalEngineFactory());\n        AtomicBoolean executed = new AtomicBoolean(false);\n        SearchOperationListener listener = new SearchOperationListener() {\n\n            @Override\n            public void onNewContext(SearchContext context) {\n                executed.set(true);\n            }\n        };\n        module.addSearchOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getSearchOperationListener().size());\n        assertEquals(SearchSlowLog.class, indexService.getSearchOperationListener().get(0).getClass());\n        assertSame(listener, indexService.getSearchOperationListener().get(1));\n\n        for (SearchOperationListener l : indexService.getSearchOperationListener()) {\n            l.onNewContext(new TestSearchContext(null));\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"}],"commitId":"dfb277cfb7969ad543a31dea234579d0e886a73a","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-27 17:51:09","modifiedFileCount":"105","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2020-02-13 01:06:04","codes":[{"authorDate":"2020-02-13 01:06:04","commitOrder":4,"curCode":"    public void testAddIndexOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        IndexingOperationListener listener = new IndexingOperationListener() {\n            @Override\n            public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {\n                executed.set(true);\n                return operation;\n            }\n        };\n        module.addIndexOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getIndexOperationListeners().size());\n        assertEquals(IndexingSlowLog.class, indexService.getIndexOperationListeners().get(0).getClass());\n        assertSame(listener, indexService.getIndexOperationListeners().get(1));\n\n        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n        Engine.Index index = new Engine.Index(new Term(\"_id\",  Uid.encodeId(doc.id())), randomNonNegativeLong(), doc);\n        ShardId shardId = new ShardId(new Index(\"foo\", \"bar\"), 0);\n        for (IndexingOperationListener l : indexService.getIndexOperationListeners()) {\n            l.preIndex(shardId, index);\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","date":"2020-02-13 01:06:04","endLine":270,"groupId":"58371","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddIndexOperationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/07f58c7fd6eda41019fbca7a498868a0e2d09c.src","preCode":"    public void testAddIndexOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap());\n        AtomicBoolean executed = new AtomicBoolean(false);\n        IndexingOperationListener listener = new IndexingOperationListener() {\n            @Override\n            public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {\n                executed.set(true);\n                return operation;\n            }\n        };\n        module.addIndexOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getIndexOperationListeners().size());\n        assertEquals(IndexingSlowLog.class, indexService.getIndexOperationListeners().get(0).getClass());\n        assertSame(listener, indexService.getIndexOperationListeners().get(1));\n\n        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n        Engine.Index index = new Engine.Index(new Term(\"_id\",  Uid.encodeId(doc.id())), randomNonNegativeLong(), doc);\n        ShardId shardId = new ShardId(new Index(\"foo\", \"bar\"), 0);\n        for (IndexingOperationListener l : indexService.getIndexOperationListeners()) {\n            l.preIndex(shardId, index);\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2020-02-13 01:06:04","commitOrder":4,"curCode":"    public void testAddSearchOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        SearchOperationListener listener = new SearchOperationListener() {\n\n            @Override\n            public void onNewContext(SearchContext context) {\n                executed.set(true);\n            }\n        };\n        module.addSearchOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getSearchOperationListener().size());\n        assertEquals(SearchSlowLog.class, indexService.getSearchOperationListener().get(0).getClass());\n        assertSame(listener, indexService.getSearchOperationListener().get(1));\n\n        for (SearchOperationListener l : indexService.getSearchOperationListener()) {\n            l.onNewContext(new TestSearchContext(null));\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","date":"2020-02-13 01:06:04","endLine":298,"groupId":"36112","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddSearchOperationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/07f58c7fd6eda41019fbca7a498868a0e2d09c.src","preCode":"    public void testAddSearchOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = new IndexModule(indexSettings, emptyAnalysisRegistry, new InternalEngineFactory(), Collections.emptyMap());\n        AtomicBoolean executed = new AtomicBoolean(false);\n        SearchOperationListener listener = new SearchOperationListener() {\n\n            @Override\n            public void onNewContext(SearchContext context) {\n                executed.set(true);\n            }\n        };\n        module.addSearchOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getSearchOperationListener().size());\n        assertEquals(SearchSlowLog.class, indexService.getSearchOperationListener().get(0).getClass());\n        assertSame(listener, indexService.getSearchOperationListener().get(1));\n\n        for (SearchOperationListener l : indexService.getSearchOperationListener()) {\n            l.onNewContext(new TestSearchContext(null));\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"}],"commitId":"a8b39ed842c7770bd9275958c9f747502fd9a3ea","commitMessage":"@@@Add a cluster setting to disallow expensive queries (#51385)\n\nAdd a new cluster setting `search.allow_expensive_queries` which by\ndefault is `true`. If set to `false`.  certain queries that have \nusually slow performance cannot be executed and an error message\nis returned.\n\n- Queries that need to do linear scans to identify matches:\n  - Script queries\n- Queries that have a high up-front cost:\n  - Fuzzy queries\n  - Regexp queries\n  - Prefix queries (without index_prefixes enabled\n  - Wildcard queries\n  - Range queries on text and keyword fields\n- Joining queries\n  - HasParent queries\n  - HasChild queries\n  - ParentId queries\n  - Nested queries\n- Queries on deprecated 6.x geo shapes (using PrefixTree implementation)\n- Queries that may have a high per-document cost:\n  - Script score queries\n  - Percolate queries\n\nCloses: #29050","date":"2020-02-13 01:06:04","modifiedFileCount":"66","status":"M","submitter":"Marios Trivyzas"},{"authorTime":"2020-08-27 20:29:24","codes":[{"authorDate":"2020-02-13 01:06:04","commitOrder":5,"curCode":"    public void testAddIndexOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        IndexingOperationListener listener = new IndexingOperationListener() {\n            @Override\n            public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {\n                executed.set(true);\n                return operation;\n            }\n        };\n        module.addIndexOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getIndexOperationListeners().size());\n        assertEquals(IndexingSlowLog.class, indexService.getIndexOperationListeners().get(0).getClass());\n        assertSame(listener, indexService.getIndexOperationListeners().get(1));\n\n        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n        Engine.Index index = new Engine.Index(new Term(\"_id\",  Uid.encodeId(doc.id())), randomNonNegativeLong(), doc);\n        ShardId shardId = new ShardId(new Index(\"foo\", \"bar\"), 0);\n        for (IndexingOperationListener l : indexService.getIndexOperationListeners()) {\n            l.preIndex(shardId, index);\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","date":"2020-02-13 01:06:04","endLine":270,"groupId":"58371","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddIndexOperationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/78/07f58c7fd6eda41019fbca7a498868a0e2d09c.src","preCode":"    public void testAddIndexOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        IndexingOperationListener listener = new IndexingOperationListener() {\n            @Override\n            public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {\n                executed.set(true);\n                return operation;\n            }\n        };\n        module.addIndexOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getIndexOperationListeners().size());\n        assertEquals(IndexingSlowLog.class, indexService.getIndexOperationListeners().get(0).getClass());\n        assertSame(listener, indexService.getIndexOperationListeners().get(1));\n\n        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n        Engine.Index index = new Engine.Index(new Term(\"_id\",  Uid.encodeId(doc.id())), randomNonNegativeLong(), doc);\n        ShardId shardId = new ShardId(new Index(\"foo\", \"bar\"), 0);\n        for (IndexingOperationListener l : indexService.getIndexOperationListeners()) {\n            l.preIndex(shardId, index);\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"N"},{"authorDate":"2020-08-27 20:29:24","commitOrder":5,"curCode":"    public void testAddSearchOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        SearchOperationListener listener = new SearchOperationListener() {\n            @Override\n            public void onNewReaderContext(ReaderContext readerContext) {\n                executed.set(true);\n            }\n        };\n        module.addSearchOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getSearchOperationListener().size());\n        assertEquals(SearchSlowLog.class, indexService.getSearchOperationListener().get(0).getClass());\n        assertSame(listener, indexService.getSearchOperationListener().get(1));\n        for (SearchOperationListener l : indexService.getSearchOperationListener()) {\n            l.onNewReaderContext(mock(ReaderContext.class));\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","date":"2020-08-27 20:29:24","endLine":309,"groupId":"36112","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddSearchOperationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/a8425134cf36a9041d18292a2c74b90fb1b8ca.src","preCode":"    public void testAddSearchOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        SearchOperationListener listener = new SearchOperationListener() {\n\n            @Override\n            public void onNewContext(SearchContext context) {\n                executed.set(true);\n            }\n        };\n        module.addSearchOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getSearchOperationListener().size());\n        assertEquals(SearchSlowLog.class, indexService.getSearchOperationListener().get(0).getClass());\n        assertSame(listener, indexService.getSearchOperationListener().get(1));\n\n        for (SearchOperationListener l : indexService.getSearchOperationListener()) {\n            l.onNewContext(new TestSearchContext(null));\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"0a3d3919a141e6e3c9bbddc43d046a4c9211b6be","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-27 20:29:24","modifiedFileCount":"256","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2021-03-02 01:38:53","codes":[{"authorDate":"2021-03-02 01:38:53","commitOrder":6,"curCode":"    public void testAddIndexOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry, indexNameExpressionResolver);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        IndexingOperationListener listener = new IndexingOperationListener() {\n            @Override\n            public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {\n                executed.set(true);\n                return operation;\n            }\n        };\n        module.addIndexOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getIndexOperationListeners().size());\n        assertEquals(IndexingSlowLog.class, indexService.getIndexOperationListeners().get(0).getClass());\n        assertSame(listener, indexService.getIndexOperationListeners().get(1));\n\n        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n        Engine.Index index = new Engine.Index(new Term(\"_id\",  Uid.encodeId(doc.id())), randomNonNegativeLong(), doc);\n        ShardId shardId = new ShardId(new Index(\"foo\", \"bar\"), 0);\n        for (IndexingOperationListener l : indexService.getIndexOperationListeners()) {\n            l.preIndex(shardId, index);\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","date":"2021-03-02 01:38:53","endLine":287,"groupId":"102516","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddIndexOperationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/76dfc86552592c6680d662434b5065868c0709.src","preCode":"    public void testAddIndexOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        IndexingOperationListener listener = new IndexingOperationListener() {\n            @Override\n            public Engine.Index preIndex(ShardId shardId, Engine.Index operation) {\n                executed.set(true);\n                return operation;\n            }\n        };\n        module.addIndexOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addIndexOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getIndexOperationListeners().size());\n        assertEquals(IndexingSlowLog.class, indexService.getIndexOperationListeners().get(0).getClass());\n        assertSame(listener, indexService.getIndexOperationListeners().get(1));\n\n        ParsedDocument doc = InternalEngineTests.createParsedDoc(\"1\", null);\n        Engine.Index index = new Engine.Index(new Term(\"_id\",  Uid.encodeId(doc.id())), randomNonNegativeLong(), doc);\n        ShardId shardId = new ShardId(new Index(\"foo\", \"bar\"), 0);\n        for (IndexingOperationListener l : indexService.getIndexOperationListeners()) {\n            l.preIndex(shardId, index);\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"},{"authorDate":"2021-03-02 01:38:53","commitOrder":6,"curCode":"    public void testAddSearchOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry, indexNameExpressionResolver);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        SearchOperationListener listener = new SearchOperationListener() {\n            @Override\n            public void onNewReaderContext(ReaderContext readerContext) {\n                executed.set(true);\n            }\n        };\n        module.addSearchOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getSearchOperationListener().size());\n        assertEquals(SearchSlowLog.class, indexService.getSearchOperationListener().get(0).getClass());\n        assertSame(listener, indexService.getSearchOperationListener().get(1));\n        for (SearchOperationListener l : indexService.getSearchOperationListener()) {\n            l.onNewReaderContext(mock(ReaderContext.class));\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","date":"2021-03-02 01:38:53","endLine":313,"groupId":"102516","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddSearchOperationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/76dfc86552592c6680d662434b5065868c0709.src","preCode":"    public void testAddSearchOperationListener() throws IOException {\n        final IndexSettings indexSettings = IndexSettingsModule.newIndexSettings(index, settings);\n        IndexModule module = createIndexModule(indexSettings, emptyAnalysisRegistry);\n        AtomicBoolean executed = new AtomicBoolean(false);\n        SearchOperationListener listener = new SearchOperationListener() {\n            @Override\n            public void onNewReaderContext(ReaderContext readerContext) {\n                executed.set(true);\n            }\n        };\n        module.addSearchOperationListener(listener);\n\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(listener));\n        expectThrows(IllegalArgumentException.class, () -> module.addSearchOperationListener(null));\n\n        IndexService indexService = newIndexService(module);\n        assertEquals(2, indexService.getSearchOperationListener().size());\n        assertEquals(SearchSlowLog.class, indexService.getSearchOperationListener().get(0).getClass());\n        assertSame(listener, indexService.getSearchOperationListener().get(1));\n        for (SearchOperationListener l : indexService.getSearchOperationListener()) {\n            l.onNewReaderContext(mock(ReaderContext.class));\n        }\n        assertTrue(executed.get());\n        indexService.close(\"simon says\", false);\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/IndexModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"1487a5a991e78dc17eebb349b105409b51b63b36","commitMessage":"@@@Introduce system index types including external (#68919)\n\nThis commit introduces system index types that will be used to\ndifferentiate behavior. Previously system indices were all treated the\nsame regardless of whether they belonged to Elasticsearch.  a stack\ncomponent.  or one of our solutions. Upon further discussion and\nanalysis this decision was not in the best interest of the various\nteams and instead a new type of system index was needed. These system\nindices will be referred to as external system indices. Within external\nsystem indices.  an option exists for these indices to be managed by\nElasticsearch or to be managed by the external product.\n\nIn order to represent this within Elasticsearch.  each system index will\nhave a type and this type will be used to control behavior.\n\nCloses #67383","date":"2021-03-02 01:38:53","modifiedFileCount":"87","status":"M","submitter":"Jay Modi"}]
