[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testRebalanceOnlyAfterAllShardsAreActive() {\n        final long[] sizes = new long[5];\n        for (int i =0; i < sizes.length; i++) {\n            sizes[i] = randomIntBetween(0, Integer.MAX_VALUE);\n        }\n\n        AllocationService strategy = createAllocationService(Settings.builder()\n                        .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                        .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                        .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                        .build(),\n            () -> new ClusterInfo() {\n                @Override\n                public Long getShardSize(ShardRouting shardRouting) {\n                    if (shardRouting.getIndexName().equals(\"test\")) {\n                        return sizes[shardRouting.getId()];\n                    }\n                    return null;\n                }\n            });\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).currentNodeId(), nullValue());\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).currentNodeId(), nullValue());\n        }\n\n        logger.info(\"start two nodes and fully start the shards\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards, replicas will start initializing\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n            assertEquals(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).getExpectedShardSize(), sizes[i]);\n        }\n\n        logger.info(\"now, start 8 more nodes, and check that no rebalancing/relocation have happened\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")).add(newNode(\"node4\")).add(newNode(\"node5\")).add(newNode(\"node6\")).add(newNode(\"node7\")).add(newNode(\"node8\")).add(newNode(\"node9\")).add(newNode(\"node10\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n            assertEquals(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).getExpectedShardSize(), sizes[i]);\n\n        }\n\n        logger.info(\"start the replica shards, rebalancing should start\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(5));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            int num = 0;\n            for (ShardRouting routing : clusterState.routingTable().index(\"test\").shard(i).shards()) {\n                if (routing.state() == RELOCATING || routing.state() == INITIALIZING) {\n                    assertEquals(routing.getExpectedShardSize(), sizes[i]);\n                    num++;\n                }\n            }\n            assertTrue(num > 0);\n        }\n\n        logger.info(\"complete relocation, other half of relocation should happen\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            for (ShardRouting routing : clusterState.routingTable().index(\"test\").shard(i).shards()) {\n                if (routing.state() == RELOCATING || routing.state() == INITIALIZING) {\n                    assertEquals(routing.getExpectedShardSize(), sizes[i]);\n                }\n            }\n        }\n\n\n        logger.info(\"complete relocation, that's it!\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(10));\n        \r\n        for (RoutingNode routingNode : routingNodes) {\n            assertThat(routingNode.size(), equalTo(1));\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":172,"groupId":"28571","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRebalanceOnlyAfterAllShardsAreActive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/14/06e4d6d6121b52610b67903fcc9790d1a37cb9.src","preCode":"    public void testRebalanceOnlyAfterAllShardsAreActive() {\n        final long[] sizes = new long[5];\n        for (int i =0; i < sizes.length; i++) {\n            sizes[i] = randomIntBetween(0, Integer.MAX_VALUE);\n        }\n\n        AllocationService strategy = createAllocationService(Settings.builder()\n                        .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                        .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                        .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                        .build(),\n            () -> new ClusterInfo() {\n                @Override\n                public Long getShardSize(ShardRouting shardRouting) {\n                    if (shardRouting.getIndexName().equals(\"test\")) {\n                        return sizes[shardRouting.getId()];\n                    }\n                    return null;\n                }\n            });\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).currentNodeId(), nullValue());\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).currentNodeId(), nullValue());\n        }\n\n        logger.info(\"start two nodes and fully start the shards\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards, replicas will start initializing\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n            assertEquals(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).getExpectedShardSize(), sizes[i]);\n        }\n\n        logger.info(\"now, start 8 more nodes, and check that no rebalancing/relocation have happened\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")).add(newNode(\"node4\")).add(newNode(\"node5\")).add(newNode(\"node6\")).add(newNode(\"node7\")).add(newNode(\"node8\")).add(newNode(\"node9\")).add(newNode(\"node10\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n            assertEquals(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).getExpectedShardSize(), sizes[i]);\n\n        }\n\n        logger.info(\"start the replica shards, rebalancing should start\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(5));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            int num = 0;\n            for (ShardRouting routing : clusterState.routingTable().index(\"test\").shard(i).shards()) {\n                if (routing.state() == RELOCATING || routing.state() == INITIALIZING) {\n                    assertEquals(routing.getExpectedShardSize(), sizes[i]);\n                    num++;\n                }\n            }\n            assertTrue(num > 0);\n        }\n\n        logger.info(\"complete relocation, other half of relocation should happen\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            for (ShardRouting routing : clusterState.routingTable().index(\"test\").shard(i).shards()) {\n                if (routing.state() == RELOCATING || routing.state() == INITIALIZING) {\n                    assertEquals(routing.getExpectedShardSize(), sizes[i]);\n                }\n            }\n        }\n\n\n        logger.info(\"complete relocation, that's it!\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(10));\n        \r\n        for (RoutingNode routingNode : routingNodes) {\n            assertThat(routingNode.size(), equalTo(1));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/RebalanceAfterActiveTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testClusterConcurrentRebalance() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", 3)\n                .build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).currentNodeId(), nullValue());\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).currentNodeId(), nullValue());\n        }\n\n        logger.info(\"start two nodes and fully start the shards\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards, replicas will start initializing\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"now, start 8 more nodes, and check that no rebalancing/relocation have happened\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")).add(newNode(\"node4\")).add(newNode(\"node5\")).add(newNode(\"node6\")).add(newNode(\"node7\")).add(newNode(\"node8\")).add(newNode(\"node9\")).add(newNode(\"node10\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"start the replica shards, rebalancing should start, but, only 3 should be rebalancing\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n\n        logger.info(\"finalize this session relocation, 3 more should relocate now\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n\n        logger.info(\"finalize this session relocation, 2 more should relocate now\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(8));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(2));\n\n        logger.info(\"finalize this session relocation, no more relocation\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(10));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(0));\n    }\n","date":"2018-04-26 03:22:53","endLine":134,"groupId":"28571","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterConcurrentRebalance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/aa/7be906a63dcfd74fbb7d11545e416a8b931e73.src","preCode":"    public void testClusterConcurrentRebalance() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", 3)\n                .build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).currentNodeId(), nullValue());\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).currentNodeId(), nullValue());\n        }\n\n        logger.info(\"start two nodes and fully start the shards\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards, replicas will start initializing\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"now, start 8 more nodes, and check that no rebalancing/relocation have happened\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")).add(newNode(\"node4\")).add(newNode(\"node5\")).add(newNode(\"node6\")).add(newNode(\"node7\")).add(newNode(\"node8\")).add(newNode(\"node9\")).add(newNode(\"node10\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"start the replica shards, rebalancing should start, but, only 3 should be rebalancing\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n\n        logger.info(\"finalize this session relocation, 3 more should relocate now\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n\n        logger.info(\"finalize this session relocation, 2 more should relocate now\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(8));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(2));\n\n        logger.info(\"finalize this session relocation, no more relocation\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(10));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/ConcurrentRebalanceRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-07-18 13:39:24","codes":[{"authorDate":"2019-07-18 13:39:24","commitOrder":2,"curCode":"    public void testRebalanceOnlyAfterAllShardsAreActive() {\n        final long[] sizes = new long[5];\n        for (int i =0; i < sizes.length; i++) {\n            sizes[i] = randomIntBetween(0, Integer.MAX_VALUE);\n        }\n\n        AllocationService strategy = createAllocationService(Settings.builder()\n                        .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                        .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                        .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                        .build(),\n            () -> new ClusterInfo() {\n                @Override\n                public Long getShardSize(ShardRouting shardRouting) {\n                    if (shardRouting.getIndexName().equals(\"test\")) {\n                        return sizes[shardRouting.getId()];\n                    }\n                    return null;\n                }\n            });\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).currentNodeId(), nullValue());\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).currentNodeId(), nullValue());\n        }\n\n        logger.info(\"start two nodes and fully start the shards\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n            .add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n            assertEquals(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).getExpectedShardSize(), sizes[i]);\n        }\n\n        logger.info(\"now, start 8 more nodes, and check that no rebalancing/relocation have happened\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")).add(newNode(\"node4\")).add(newNode(\"node5\")).add(newNode(\"node6\"))\n                .add(newNode(\"node7\")).add(newNode(\"node8\")).add(newNode(\"node9\")).add(newNode(\"node10\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n            assertEquals(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).getExpectedShardSize(), sizes[i]);\n\n        }\n\n        logger.info(\"start the replica shards, rebalancing should start\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(5));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            int num = 0;\n            for (ShardRouting routing : clusterState.routingTable().index(\"test\").shard(i).shards()) {\n                if (routing.state() == RELOCATING || routing.state() == INITIALIZING) {\n                    assertEquals(routing.getExpectedShardSize(), sizes[i]);\n                    num++;\n                }\n            }\n            assertTrue(num > 0);\n        }\n\n        logger.info(\"complete relocation, other half of relocation should happen\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            for (ShardRouting routing : clusterState.routingTable().index(\"test\").shard(i).shards()) {\n                if (routing.state() == RELOCATING || routing.state() == INITIALIZING) {\n                    assertEquals(routing.getExpectedShardSize(), sizes[i]);\n                }\n            }\n        }\n\n\n        logger.info(\"complete relocation, that's it!\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(10));\n        \r\n        for (RoutingNode routingNode : routingNodes) {\n            assertThat(routingNode.size(), equalTo(1));\n        }\n    }\n","date":"2019-07-18 13:39:24","endLine":167,"groupId":"28571","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRebalanceOnlyAfterAllShardsAreActive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/33/c7b9afce6eae0275cfc8278e6c7aafda0afc3a.src","preCode":"    public void testRebalanceOnlyAfterAllShardsAreActive() {\n        final long[] sizes = new long[5];\n        for (int i =0; i < sizes.length; i++) {\n            sizes[i] = randomIntBetween(0, Integer.MAX_VALUE);\n        }\n\n        AllocationService strategy = createAllocationService(Settings.builder()\n                        .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                        .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                        .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                        .build(),\n            () -> new ClusterInfo() {\n                @Override\n                public Long getShardSize(ShardRouting shardRouting) {\n                    if (shardRouting.getIndexName().equals(\"test\")) {\n                        return sizes[shardRouting.getId()];\n                    }\n                    return null;\n                }\n            });\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).currentNodeId(), nullValue());\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).currentNodeId(), nullValue());\n        }\n\n        logger.info(\"start two nodes and fully start the shards\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n            .add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards, replicas will start initializing\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n            assertEquals(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).getExpectedShardSize(), sizes[i]);\n        }\n\n        logger.info(\"now, start 8 more nodes, and check that no rebalancing/relocation have happened\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")).add(newNode(\"node4\")).add(newNode(\"node5\")).add(newNode(\"node6\"))\n                .add(newNode(\"node7\")).add(newNode(\"node8\")).add(newNode(\"node9\")).add(newNode(\"node10\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        routingNodes = clusterState.getRoutingNodes();\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n            assertEquals(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).getExpectedShardSize(), sizes[i]);\n\n        }\n\n        logger.info(\"start the replica shards, rebalancing should start\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(5));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            int num = 0;\n            for (ShardRouting routing : clusterState.routingTable().index(\"test\").shard(i).shards()) {\n                if (routing.state() == RELOCATING || routing.state() == INITIALIZING) {\n                    assertEquals(routing.getExpectedShardSize(), sizes[i]);\n                    num++;\n                }\n            }\n            assertTrue(num > 0);\n        }\n\n        logger.info(\"complete relocation, other half of relocation should happen\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            for (ShardRouting routing : clusterState.routingTable().index(\"test\").shard(i).shards()) {\n                if (routing.state() == RELOCATING || routing.state() == INITIALIZING) {\n                    assertEquals(routing.getExpectedShardSize(), sizes[i]);\n                }\n            }\n        }\n\n\n        logger.info(\"complete relocation, that's it!\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n        routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(10));\n        \r\n        for (RoutingNode routingNode : routingNodes) {\n            assertThat(routingNode.size(), equalTo(1));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/RebalanceAfterActiveTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-07-18 13:39:24","commitOrder":2,"curCode":"    public void testClusterConcurrentRebalance() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", 3)\n                .build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).currentNodeId(), nullValue());\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).currentNodeId(), nullValue());\n        }\n\n        logger.info(\"start two nodes and fully start the shards\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n            .add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"now, start 8 more nodes, and check that no rebalancing/relocation have happened\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")).add(newNode(\"node4\")).add(newNode(\"node5\"))\n            .add(newNode(\"node6\")).add(newNode(\"node7\")).add(newNode(\"node8\"))\n            .add(newNode(\"node9\")).add(newNode(\"node10\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"start the replica shards, rebalancing should start, but, only 3 should be rebalancing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n\n        logger.info(\"finalize this session relocation, 3 more should relocate now\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n\n        logger.info(\"finalize this session relocation, 2 more should relocate now\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(8));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(2));\n\n        logger.info(\"finalize this session relocation, no more relocation\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(10));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(0));\n    }\n","date":"2019-07-18 13:39:24","endLine":132,"groupId":"28571","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterConcurrentRebalance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/22/ef1d03d7190fc1cace914ffe4f0942c5e4d97f.src","preCode":"    public void testClusterConcurrentRebalance() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", 3)\n                .build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).currentNodeId(), nullValue());\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).currentNodeId(), nullValue());\n        }\n\n        logger.info(\"start two nodes and fully start the shards\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n            .add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards, replicas will start initializing\");\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"now, start 8 more nodes, and check that no rebalancing/relocation have happened\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")).add(newNode(\"node4\")).add(newNode(\"node5\"))\n            .add(newNode(\"node6\")).add(newNode(\"node7\")).add(newNode(\"node8\"))\n            .add(newNode(\"node9\")).add(newNode(\"node10\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"start the replica shards, rebalancing should start, but, only 3 should be rebalancing\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n\n        logger.info(\"finalize this session relocation, 3 more should relocate now\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n\n        logger.info(\"finalize this session relocation, 2 more should relocate now\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(8));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(2));\n\n        logger.info(\"finalize this session relocation, no more relocation\");\n        routingNodes = clusterState.getRoutingNodes();\n        clusterState = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING));\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(10));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/ConcurrentRebalanceRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"51fb95ef83f7a1aa6cbc5207e504b03ccee724ee","commitMessage":"@@@Defer reroute when starting shards (#44433)\n\n* Defer reroute when starting shards\n\nToday we reroute the cluster as part of the process of starting a shard.  which\nruns at `URGENT` priority. In large clusters.  rerouting may take some time to\ncomplete.  and this means that a mere trickle of shard-started events can cause\nstarvation for other.  lower-priority.  tasks that are pending on the master.\n\nHowever.  it isn't really necessary to perform a reroute when starting a shard. \nas long as one occurs eventually. This commit removes the inline reroute from\nthe process of starting a shard and replaces it with a deferred one that runs\nat `NORMAL` priority.  avoiding starvation of higher-priority tasks.\n\nThis may improve some of the situations related to #42738 and #42105.\n\n* Specific test case for followup priority setting\n\nWe cannot set the priority in all InternalTestClusters because the deprecation\nwarning makes some tests unhappy. This commit adds a specific test instead.\n\n* Checkstyle\n\n* Cluster state always changed here\n\n* Assert consistency of routing nodes\n\n* Restrict setting only to reasonable priorities\n","date":"2019-07-18 13:39:24","modifiedFileCount":"60","status":"M","submitter":"David Turner"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testRebalanceOnlyAfterAllShardsAreActive() {\n        final long[] sizes = new long[5];\n        for (int i =0; i < sizes.length; i++) {\n            sizes[i] = randomIntBetween(0, Integer.MAX_VALUE);\n        }\n\n        AllocationService strategy = createAllocationService(Settings.builder()\n                        .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                        .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                        .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                        .build(),\n            () -> new ClusterInfo() {\n                @Override\n                public Long getShardSize(ShardRouting shardRouting) {\n                    if (shardRouting.getIndexName().equals(\"test\")) {\n                        return sizes[shardRouting.getId()];\n                    }\n                    return null;\n                }\n            });\n        logger.info(\"Building initial routing table\");\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metadata(metadata).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).currentNodeId(), nullValue());\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).currentNodeId(), nullValue());\n        }\n\n        logger.info(\"start two nodes and fully start the shards\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n            .add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n            assertEquals(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).getExpectedShardSize(), sizes[i]);\n        }\n\n        logger.info(\"now, start 8 more nodes, and check that no rebalancing/relocation have happened\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")).add(newNode(\"node4\")).add(newNode(\"node5\")).add(newNode(\"node6\"))\n                .add(newNode(\"node7\")).add(newNode(\"node8\")).add(newNode(\"node9\")).add(newNode(\"node10\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n            assertEquals(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).getExpectedShardSize(), sizes[i]);\n\n        }\n\n        logger.info(\"start the replica shards, rebalancing should start\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(5));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            int num = 0;\n            for (ShardRouting routing : clusterState.routingTable().index(\"test\").shard(i).shards()) {\n                if (routing.state() == RELOCATING || routing.state() == INITIALIZING) {\n                    assertEquals(routing.getExpectedShardSize(), sizes[i]);\n                    num++;\n                }\n            }\n            assertTrue(num > 0);\n        }\n\n        logger.info(\"complete relocation, other half of relocation should happen\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            for (ShardRouting routing : clusterState.routingTable().index(\"test\").shard(i).shards()) {\n                if (routing.state() == RELOCATING || routing.state() == INITIALIZING) {\n                    assertEquals(routing.getExpectedShardSize(), sizes[i]);\n                }\n            }\n        }\n\n\n        logger.info(\"complete relocation, that's it!\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(10));\n        \r\n        for (RoutingNode routingNode : routingNodes) {\n            assertThat(routingNode.size(), equalTo(1));\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":167,"groupId":"102216","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRebalanceOnlyAfterAllShardsAreActive","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9f/c80df7416020edf1f63b034b6695e415319778.src","preCode":"    public void testRebalanceOnlyAfterAllShardsAreActive() {\n        final long[] sizes = new long[5];\n        for (int i =0; i < sizes.length; i++) {\n            sizes[i] = randomIntBetween(0, Integer.MAX_VALUE);\n        }\n\n        AllocationService strategy = createAllocationService(Settings.builder()\n                        .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                        .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                        .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                        .build(),\n            () -> new ClusterInfo() {\n                @Override\n                public Long getShardSize(ShardRouting shardRouting) {\n                    if (shardRouting.getIndexName().equals(\"test\")) {\n                        return sizes[shardRouting.getId()];\n                    }\n                    return null;\n                }\n            });\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).currentNodeId(), nullValue());\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).currentNodeId(), nullValue());\n        }\n\n        logger.info(\"start two nodes and fully start the shards\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n            .add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n            assertEquals(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).getExpectedShardSize(), sizes[i]);\n        }\n\n        logger.info(\"now, start 8 more nodes, and check that no rebalancing/relocation have happened\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")).add(newNode(\"node4\")).add(newNode(\"node5\")).add(newNode(\"node6\"))\n                .add(newNode(\"node7\")).add(newNode(\"node8\")).add(newNode(\"node9\")).add(newNode(\"node10\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n            assertEquals(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).getExpectedShardSize(), sizes[i]);\n\n        }\n\n        logger.info(\"start the replica shards, rebalancing should start\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(5));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            int num = 0;\n            for (ShardRouting routing : clusterState.routingTable().index(\"test\").shard(i).shards()) {\n                if (routing.state() == RELOCATING || routing.state() == INITIALIZING) {\n                    assertEquals(routing.getExpectedShardSize(), sizes[i]);\n                    num++;\n                }\n            }\n            assertTrue(num > 0);\n        }\n\n        logger.info(\"complete relocation, other half of relocation should happen\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            for (ShardRouting routing : clusterState.routingTable().index(\"test\").shard(i).shards()) {\n                if (routing.state() == RELOCATING || routing.state() == INITIALIZING) {\n                    assertEquals(routing.getExpectedShardSize(), sizes[i]);\n                }\n            }\n        }\n\n\n        logger.info(\"complete relocation, that's it!\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n        RoutingNodes routingNodes = clusterState.getRoutingNodes();\n\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(10));\n        \r\n        for (RoutingNode routingNode : routingNodes) {\n            assertThat(routingNode.size(), equalTo(1));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/RebalanceAfterActiveTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testClusterConcurrentRebalance() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", 3)\n                .build());\n\n        logger.info(\"Building initial routing table\");\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metadata(metadata).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).currentNodeId(), nullValue());\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).currentNodeId(), nullValue());\n        }\n\n        logger.info(\"start two nodes and fully start the shards\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n            .add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"now, start 8 more nodes, and check that no rebalancing/relocation have happened\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")).add(newNode(\"node4\")).add(newNode(\"node5\"))\n            .add(newNode(\"node6\")).add(newNode(\"node7\")).add(newNode(\"node8\"))\n            .add(newNode(\"node9\")).add(newNode(\"node10\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"start the replica shards, rebalancing should start, but, only 3 should be rebalancing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n\n        logger.info(\"finalize this session relocation, 3 more should relocate now\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n\n        logger.info(\"finalize this session relocation, 2 more should relocate now\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(8));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(2));\n\n        logger.info(\"finalize this session relocation, no more relocation\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(10));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(0));\n    }\n","date":"2020-04-01 03:52:01","endLine":132,"groupId":"102216","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testClusterConcurrentRebalance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e6/4af70d41a2a0b157949655b189078e735870eb.src","preCode":"    public void testClusterConcurrentRebalance() {\n        AllocationService strategy = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", 3)\n                .build());\n\n        logger.info(\"Building initial routing table\");\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();\n\n        assertThat(clusterState.routingTable().index(\"test\").shards().size(), equalTo(5));\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).state(), equalTo(UNASSIGNED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(0).currentNodeId(), nullValue());\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().get(1).currentNodeId(), nullValue());\n        }\n\n        logger.info(\"start two nodes and fully start the shards\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n            .add(newNode(\"node1\")).add(newNode(\"node2\"))).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(INITIALIZING));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(UNASSIGNED));\n        }\n\n        logger.info(\"start all the primary shards, replicas will start initializing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"now, start 8 more nodes, and check that no rebalancing/relocation have happened\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\")).add(newNode(\"node4\")).add(newNode(\"node5\"))\n            .add(newNode(\"node6\")).add(newNode(\"node7\")).add(newNode(\"node8\"))\n            .add(newNode(\"node9\")).add(newNode(\"node10\")))\n                .build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        for (int i = 0; i < clusterState.routingTable().index(\"test\").shards().size(); i++) {\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).shards().size(), equalTo(2));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).primaryShard().state(), equalTo(STARTED));\n            assertThat(clusterState.routingTable().index(\"test\").shard(i).replicaShards().get(0).state(), equalTo(INITIALIZING));\n        }\n\n        logger.info(\"start the replica shards, rebalancing should start, but, only 3 should be rebalancing\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n\n        logger.info(\"finalize this session relocation, 3 more should relocate now\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(7));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(3));\n\n        logger.info(\"finalize this session relocation, 2 more should relocate now\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(8));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(2));\n\n        logger.info(\"finalize this session relocation, no more relocation\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        \r\n        assertThat(clusterState.routingTable().shardsWithState(STARTED).size(), equalTo(10));\n        assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(), equalTo(0));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/ConcurrentRebalanceRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"}]
