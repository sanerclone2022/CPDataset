[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(\"foo\");\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.fieldDataField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","date":"2018-04-26 03:22:53","endLine":166,"groupId":"45116","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/ef28480fa7925fa89df1578590bfbabd6ae2f4.src","preCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(\"foo\");\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.fieldDataField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            builder.trackTotalHits(randomBoolean());\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","date":"2018-04-26 03:22:53","endLine":357,"groupId":"45116","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"randomSearchSourceBuilder","params":"(Supplier<HighlightBuilder>randomHighlightBuilder@Supplier<SuggestBuilder>randomSuggestBuilder@Supplier<RescorerBuilder<?>>randomRescoreBuilder@Supplier<List<SearchExtBuilder>>randomExtBuilders@Supplier<CollapseBuilder>randomCollapseBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/851e9c6d802ebdbec27d58c34f8a4f4780cb3f.src","preCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            builder.trackTotalHits(randomBoolean());\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/search/RandomSearchRequestGenerator.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-05-24 01:29:52","commitOrder":2,"curCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(\"foo\");\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","date":"2018-05-24 01:29:52","endLine":166,"groupId":"45116","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/2331b86f2ef8f1b6c41847a3339066ad6a5bd4.src","preCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(\"foo\");\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.fieldDataField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            builder.trackTotalHits(randomBoolean());\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","date":"2018-04-26 03:22:53","endLine":357,"groupId":"45116","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"randomSearchSourceBuilder","params":"(Supplier<HighlightBuilder>randomHighlightBuilder@Supplier<SuggestBuilder>randomSuggestBuilder@Supplier<RescorerBuilder<?>>randomRescoreBuilder@Supplier<List<SearchExtBuilder>>randomExtBuilders@Supplier<CollapseBuilder>randomCollapseBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/851e9c6d802ebdbec27d58c34f8a4f4780cb3f.src","preCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            builder.trackTotalHits(randomBoolean());\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/search/RandomSearchRequestGenerator.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"}],"commitId":"d1479dbaedeb6dd049c7a9b0fe58223cef32d0f1","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-24 01:29:52","modifiedFileCount":"119","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-09-29 05:40:12","commitOrder":3,"curCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","date":"2018-09-29 05:40:12","endLine":165,"groupId":"45116","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ca/f1d4ef4ee47858687c72a2130bb844760f460c.src","preCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(\"foo\");\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2018-04-26 03:22:53","commitOrder":3,"curCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            builder.trackTotalHits(randomBoolean());\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","date":"2018-04-26 03:22:53","endLine":357,"groupId":"45116","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"randomSearchSourceBuilder","params":"(Supplier<HighlightBuilder>randomHighlightBuilder@Supplier<SuggestBuilder>randomSuggestBuilder@Supplier<RescorerBuilder<?>>randomRescoreBuilder@Supplier<List<SearchExtBuilder>>randomExtBuilders@Supplier<CollapseBuilder>randomCollapseBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/851e9c6d802ebdbec27d58c34f8a4f4780cb3f.src","preCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            builder.trackTotalHits(randomBoolean());\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/search/RandomSearchRequestGenerator.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"}],"commitId":"6ea396a476ada0c6d5ff0f27a3e5526b42ff1502","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-29 05:40:12","modifiedFileCount":"333","status":"M","submitter":"Lee Hinman"},{"authorTime":"2019-01-05 03:36:49","codes":[{"authorDate":"2018-09-29 05:40:12","commitOrder":4,"curCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","date":"2018-09-29 05:40:12","endLine":165,"groupId":"45116","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ca/f1d4ef4ee47858687c72a2130bb844760f460c.src","preCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2019-01-05 03:36:49","commitOrder":4,"curCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","date":"2019-01-05 03:36:49","endLine":374,"groupId":"45116","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"randomSearchSourceBuilder","params":"(Supplier<HighlightBuilder>randomHighlightBuilder@Supplier<SuggestBuilder>randomSuggestBuilder@Supplier<RescorerBuilder<?>>randomRescoreBuilder@Supplier<List<SearchExtBuilder>>randomExtBuilders@Supplier<CollapseBuilder>randomCollapseBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5d/96cd37b054df21632c2a94a38f346834171aa0.src","preCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            builder.trackTotalHits(randomBoolean());\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/search/RandomSearchRequestGenerator.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"e38cf1d0dca1776d9659b4c0f3c010ba444642ca","commitMessage":"@@@Add the ability to set the number of hits to track accurately (#36357)\n\nIn Lucene 8 searches can skip non-competitive hits if the total hit count is not requested.\nIt is also possible to track the number of hits up to a certain threshold. This is a trade off to speed up searches while still being able to know a lower bound of the total hit count. This change adds the ability to set this threshold directly in the track_total_hits search option. A boolean value (true.  false) indicates whether the total hit count should be tracked in the response. When set as an integer this option allows to compute a lower bound of the total hits while preserving the ability to skip non-competitive hits when enough matches have been collected.\n\nRelates #33028","date":"2019-01-05 03:36:49","modifiedFileCount":"31","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2019-01-23 16:01:58","codes":[{"authorDate":"2019-01-23 16:01:58","commitOrder":5,"curCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","date":"2019-01-23 16:01:58","endLine":168,"groupId":"45116","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/c1ea1cad301c413bc0c02f0b590d8872d8e670.src","preCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2019-01-23 16:01:58","commitOrder":5,"curCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","date":"2019-01-23 16:01:58","endLine":377,"groupId":"45116","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"randomSearchSourceBuilder","params":"(Supplier<HighlightBuilder>randomHighlightBuilder@Supplier<SuggestBuilder>randomSuggestBuilder@Supplier<RescorerBuilder<?>>randomRescoreBuilder@Supplier<List<SearchExtBuilder>>randomExtBuilders@Supplier<CollapseBuilder>randomCollapseBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/c2732aaf91524ada4fe1056e5c2addf22c01f1.src","preCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/search/RandomSearchRequestGenerator.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"52ba407931093ba86538596639eaf35b2a858d01","commitMessage":"@@@Expose sequence number and primary terms in search responses (#37639)\n\nUsers may require the sequence number and primary terms to perform optimistic concurrency control operations. Currently.  you can get the sequence number via the `docvalues_fields` API but the primary term is not accessible because it is maintained by the `SeqNoFieldMapper` and the infrastructure can't find it. \n\nThis commit adds a dedicated sub fetch phase to return both numbers that is connected to a new `seq_no_primary_term` parameter.","date":"2019-01-23 16:01:58","modifiedFileCount":"26","status":"M","submitter":"Boaz Leskes"},{"authorTime":"2019-01-25 20:45:39","codes":[{"authorDate":"2019-01-23 16:01:58","commitOrder":6,"curCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","date":"2019-01-23 16:01:58","endLine":168,"groupId":"45116","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/c1ea1cad301c413bc0c02f0b590d8872d8e670.src","preCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2019-01-25 20:45:39","commitOrder":6,"curCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","date":"2019-01-25 20:45:39","endLine":377,"groupId":"45116","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"randomSearchSourceBuilder","params":"(Supplier<HighlightBuilder>randomHighlightBuilder@Supplier<SuggestBuilder>randomSuggestBuilder@Supplier<RescorerBuilder<?>>randomRescoreBuilder@Supplier<List<SearchExtBuilder>>randomExtBuilders@Supplier<CollapseBuilder>randomCollapseBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/58/dbe869b5c719c3f93c753b1cb76a115ae2d5e2.src","preCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.DEFAULT_TRACK_TOTAL_HITS_UP_TO)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/search/RandomSearchRequestGenerator.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"787acb14b91b7065c4ed80167fb4bdb6cc444c86","commitMessage":"@@@Track total hits up to 10. 000 by default (#37466)\n\nThis commit changes the default for the `track_total_hits` option of the search request\nto `10. 000`. This means that by default search requests will accurately track the total hit count\nup to `10. 000` documents.  requests that match more than this value will set the `\"total.relation\"`\nto `\"gte\"` (e.g. greater than or equals) and the `\"total.value\"` to `10. 000` in the search response.\nScroll queries are not impacted.  they will continue to count the total hits accurately.\nThe default is set back to `true` (accurate hit count) if `rest_total_hits_as_int` is set in the search request.\nI choose `10. 000` as the default because that's also the number we use to limit pagination. This means that users will be able to know how far they can jump (up to 10. 000) even if the total number of hits is not accurate.\n\nCloses #33028","date":"2019-01-25 20:45:39","modifiedFileCount":"18","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2020-04-24 02:26:38","codes":[{"authorDate":"2019-01-23 16:01:58","commitOrder":7,"curCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","date":"2019-01-23 16:01:58","endLine":168,"groupId":"45116","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/c1ea1cad301c413bc0c02f0b590d8872d8e670.src","preCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2020-04-24 02:26:38","commitOrder":7,"curCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)).field(\"foo\"));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","date":"2020-04-24 02:26:38","endLine":367,"groupId":"45116","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"randomSearchSourceBuilder","params":"(Supplier<HighlightBuilder>randomHighlightBuilder@Supplier<SuggestBuilder>randomSuggestBuilder@Supplier<RescorerBuilder<?>>randomRescoreBuilder@Supplier<List<SearchExtBuilder>>randomExtBuilders@Supplier<CollapseBuilder>randomCollapseBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/43/e282af5f227af795fa366395121d9f2bad86d5.src","preCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/search/RandomSearchRequestGenerator.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"9f165bd44ee77a188b3c4dee833e624d906d5911","commitMessage":"@@@Aggs must specify a `field` or `script` (or both) (#52226)\n\n* Aggs must specify a `field` or `script` (or both)\n\nThis adds a validation to VSParserHelper to ensure that a field or\nscript or both are specified by the user.  This is technically\nrequired today already.  but throws an exception much deeper\nin the agg framework and has a very unintuitive error for the user\n(as well as eating more resources instead of failing early)\n\n* Fix StringStats test\n\n* Add yaml test\n\n* Skip test on older versions\n\nCo-authored-by: Elastic Machine <elasticmachine@users.noreply.github.com>","date":"2020-04-24 02:26:38","modifiedFileCount":"6","status":"M","submitter":"Zachary Tong"},{"authorTime":"2020-08-24 20:15:41","codes":[{"authorDate":"2019-01-23 16:01:58","commitOrder":8,"curCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","date":"2019-01-23 16:01:58","endLine":168,"groupId":"45116","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/c1ea1cad301c413bc0c02f0b590d8872d8e670.src","preCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2020-08-24 20:15:41","commitOrder":8,"curCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int numFields = randomInt(5);\n            for (int i = 0; i < numFields; i++) {\n                builder.fetchField(randomAlphaOfLengthBetween(5, 10));\n            }\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)).field(\"foo\"));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","date":"2020-08-24 20:15:41","endLine":374,"groupId":"45116","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"randomSearchSourceBuilder","params":"(Supplier<HighlightBuilder>randomHighlightBuilder@Supplier<SuggestBuilder>randomSuggestBuilder@Supplier<RescorerBuilder<?>>randomRescoreBuilder@Supplier<List<SearchExtBuilder>>randomExtBuilders@Supplier<CollapseBuilder>randomCollapseBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/09/fe84be50b825764018968f8b3692b65dee00b8.src","preCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)).field(\"foo\"));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/search/RandomSearchRequestGenerator.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"6a9dde599f5fc11205e3f71f339a37bac9a259dc","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-24 20:15:41","modifiedFileCount":"171","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-09-08 19:40:29","codes":[{"authorDate":"2019-01-23 16:01:58","commitOrder":9,"curCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","date":"2019-01-23 16:01:58","endLine":168,"groupId":"45116","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/c1ea1cad301c413bc0c02f0b590d8872d8e670.src","preCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2020-09-08 19:40:29","commitOrder":9,"curCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int numFields = randomInt(5);\n            for (int i = 0; i < numFields; i++) {\n                builder.fetchField(randomAlphaOfLengthBetween(5, 10));\n            }\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)).field(\"foo\"));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(randomAlphaOfLengthBetween(3, 10),\n                TimeValue.timeValueMinutes(randomIntBetween(1, 60))));\n        }\n        return builder;\n    }\n","date":"2020-09-08 19:40:29","endLine":378,"groupId":"45116","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"randomSearchSourceBuilder","params":"(Supplier<HighlightBuilder>randomHighlightBuilder@Supplier<SuggestBuilder>randomSuggestBuilder@Supplier<RescorerBuilder<?>>randomRescoreBuilder@Supplier<List<SearchExtBuilder>>randomExtBuilders@Supplier<CollapseBuilder>randomCollapseBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d6/d3ec51c0ed0506597ccd7e6d488aec1005f9dc.src","preCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int numFields = randomInt(5);\n            for (int i = 0; i < numFields; i++) {\n                builder.fetchField(randomAlphaOfLengthBetween(5, 10));\n            }\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)).field(\"foo\"));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        return builder;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/search/RandomSearchRequestGenerator.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"28b89b4265ee7473e44ed97a660ca1d548317e36","commitMessage":"@@@Fix point in time toXContent impl (#62080)\n\nPointInTimeBuilder is a ToXContentObject yet it does not print out a whole object (it is rather a fragment). Also.  when it is printed out as part of SearchSourceBuilder.  an error is thrown because pit should be wrapped into its own object.\n\nThis commit fixes this and adds tests for it.","date":"2020-09-08 19:40:29","modifiedFileCount":"4","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-09-10 08:07:27","codes":[{"authorDate":"2019-01-23 16:01:58","commitOrder":10,"curCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","date":"2019-01-23 16:01:58","endLine":168,"groupId":"45116","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6e/c1ea1cad301c413bc0c02f0b590d8872d8e670.src","preCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2020-09-10 08:07:27","commitOrder":10,"curCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int numFields = randomInt(5);\n            for (int i = 0; i < numFields; i++) {\n                builder.fetchField(randomAlphaOfLengthBetween(5, 10));\n            }\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)).field(\"foo\"));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        if (randomBoolean()) {\n            TimeValue keepAlive = randomBoolean() ? TimeValue.timeValueMinutes(randomIntBetween(1, 60)) : null;\n            builder.pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(randomAlphaOfLengthBetween(3, 10), keepAlive));\n        }\n        return builder;\n    }\n","date":"2020-09-10 08:07:27","endLine":378,"groupId":"45116","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"randomSearchSourceBuilder","params":"(Supplier<HighlightBuilder>randomHighlightBuilder@Supplier<SuggestBuilder>randomSuggestBuilder@Supplier<RescorerBuilder<?>>randomRescoreBuilder@Supplier<List<SearchExtBuilder>>randomExtBuilders@Supplier<CollapseBuilder>randomCollapseBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5d/5b2bbaca32a1a860a9fb0d194bec9cc70b0a84.src","preCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int numFields = randomInt(5);\n            for (int i = 0; i < numFields; i++) {\n                builder.fetchField(randomAlphaOfLengthBetween(5, 10));\n            }\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)).field(\"foo\"));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(randomAlphaOfLengthBetween(3, 10),\n                TimeValue.timeValueMinutes(randomIntBetween(1, 60))));\n        }\n        return builder;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/search/RandomSearchRequestGenerator.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"8a95e3c598f17f023d46e09d2b8a630f53494c8a","commitMessage":"@@@Make keep alive of point in time optional in search (#62184)\n\nA search request should not be required to extend the keep_alive of a point in time. \nThis change makes that parameter optional.","date":"2020-09-10 08:07:27","modifiedFileCount":"5","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2020-09-10 08:07:27","codes":[{"authorDate":"2020-09-15 01:08:58","commitOrder":11,"curCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int fetchFieldsSize = randomInt(25);\n            for (int i = 0; i < fetchFieldsSize; i++) {\n                factory.fetchField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","date":"2020-09-15 01:08:58","endLine":174,"groupId":"45116","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5d/352e2187d95bc1d257f73d3b05f14f5cacd5b1.src","preCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2020-09-10 08:07:27","commitOrder":11,"curCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int numFields = randomInt(5);\n            for (int i = 0; i < numFields; i++) {\n                builder.fetchField(randomAlphaOfLengthBetween(5, 10));\n            }\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)).field(\"foo\"));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        if (randomBoolean()) {\n            TimeValue keepAlive = randomBoolean() ? TimeValue.timeValueMinutes(randomIntBetween(1, 60)) : null;\n            builder.pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(randomAlphaOfLengthBetween(3, 10), keepAlive));\n        }\n        return builder;\n    }\n","date":"2020-09-10 08:07:27","endLine":378,"groupId":"45116","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"randomSearchSourceBuilder","params":"(Supplier<HighlightBuilder>randomHighlightBuilder@Supplier<SuggestBuilder>randomSuggestBuilder@Supplier<RescorerBuilder<?>>randomRescoreBuilder@Supplier<List<SearchExtBuilder>>randomExtBuilders@Supplier<CollapseBuilder>randomCollapseBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5d/5b2bbaca32a1a860a9fb0d194bec9cc70b0a84.src","preCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int numFields = randomInt(5);\n            for (int i = 0; i < numFields; i++) {\n                builder.fetchField(randomAlphaOfLengthBetween(5, 10));\n            }\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)).field(\"foo\"));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        if (randomBoolean()) {\n            TimeValue keepAlive = randomBoolean() ? TimeValue.timeValueMinutes(randomIntBetween(1, 60)) : null;\n            builder.pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(randomAlphaOfLengthBetween(3, 10), keepAlive));\n        }\n        return builder;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/search/RandomSearchRequestGenerator.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"}],"commitId":"f29c743a4789d3aa82cf0a677defeefd5bea6dfd","commitMessage":"@@@Support the 'fields' option in inner_hits and top_hits. (#62259)\n\nThis PR adds support for the 'fields' option in the following places:\n* Anytime `inner_hits` is used.  for both fetching nested/ child docs and field collapsing\n* The `top_hits` aggregation\n\nAddresses #61949. ","date":"2020-09-15 01:08:58","modifiedFileCount":"11","status":"M","submitter":"Julie Tibshirani"},{"authorTime":"2020-09-23 06:51:24","codes":[{"authorDate":"2020-09-15 01:08:58","commitOrder":12,"curCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int fetchFieldsSize = randomInt(25);\n            for (int i = 0; i < fetchFieldsSize; i++) {\n                factory.fetchField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","date":"2020-09-15 01:08:58","endLine":174,"groupId":"45116","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5d/352e2187d95bc1d257f73d3b05f14f5cacd5b1.src","preCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int fetchFieldsSize = randomInt(25);\n            for (int i = 0; i < fetchFieldsSize; i++) {\n                factory.fetchField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2020-09-23 06:51:24","commitOrder":12,"curCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int numFields = randomInt(5);\n            for (int i = 0; i < numFields; i++) {\n                builder.fetchField(randomAlphaOfLengthBetween(5, 10));\n            }\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)).field(\"foo\"));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        if (randomBoolean()) {\n            PointInTimeBuilder pit = new PointInTimeBuilder(randomAlphaOfLengthBetween(3, 10));\n            if (randomBoolean()) {\n                pit.setKeepAlive(TimeValue.timeValueMinutes(randomIntBetween(1, 60)));\n            }\n            builder.pointInTimeBuilder(pit);\n        }\n        return builder;\n    }\n","date":"2020-09-23 06:51:24","endLine":382,"groupId":"45116","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"randomSearchSourceBuilder","params":"(Supplier<HighlightBuilder>randomHighlightBuilder@Supplier<SuggestBuilder>randomSuggestBuilder@Supplier<RescorerBuilder<?>>randomRescoreBuilder@Supplier<List<SearchExtBuilder>>randomExtBuilders@Supplier<CollapseBuilder>randomCollapseBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ed/95561aa9100524a12924dcccb4d3cf24a8f7a9.src","preCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int numFields = randomInt(5);\n            for (int i = 0; i < numFields; i++) {\n                builder.fetchField(randomAlphaOfLengthBetween(5, 10));\n            }\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)).field(\"foo\"));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        if (randomBoolean()) {\n            TimeValue keepAlive = randomBoolean() ? TimeValue.timeValueMinutes(randomIntBetween(1, 60)) : null;\n            builder.pointInTimeBuilder(new SearchSourceBuilder.PointInTimeBuilder(randomAlphaOfLengthBetween(3, 10), keepAlive));\n        }\n        return builder;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/search/RandomSearchRequestGenerator.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"f120064734d5fa34b1020566793f51ac0e9b729e","commitMessage":"@@@Make keep alive optional in PointInTimeBuilder (#62720)\n\nRemove the keepAlive parameter from the constructor of PointInTimeBuilder\nas it's optional.","date":"2020-09-23 06:51:24","modifiedFileCount":"13","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2020-11-11 01:38:59","codes":[{"authorDate":"2020-09-15 01:08:58","commitOrder":13,"curCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int fetchFieldsSize = randomInt(25);\n            for (int i = 0; i < fetchFieldsSize; i++) {\n                factory.fetchField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","date":"2020-09-15 01:08:58","endLine":174,"groupId":"105284","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"createTestAggregatorBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5d/352e2187d95bc1d257f73d3b05f14f5cacd5b1.src","preCode":"    protected final TopHitsAggregationBuilder createTestAggregatorBuilder() {\n        TopHitsAggregationBuilder factory = new TopHitsAggregationBuilder(randomAlphaOfLengthBetween(3, 10));\n        if (randomBoolean()) {\n            factory.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            factory.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            factory.trackScores(randomBoolean());\n        }\n        switch (randomInt(3)) {\n            case 0:\n                break;\n            case 1:\n                factory.storedField(\"_none_\");\n                break;\n            case 2:\n                factory.storedFields(Collections.emptyList());\n                break;\n            case 3:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                factory.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n        if (randomBoolean()) {\n            int fieldDataFieldsSize = randomInt(25);\n            for (int i = 0; i < fieldDataFieldsSize; i++) {\n                factory.docValueField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int fetchFieldsSize = randomInt(25);\n            for (int i = 0; i < fetchFieldsSize; i++) {\n                factory.fetchField(randomAlphaOfLengthBetween(5, 50));\n            }\n        }\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    factory.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            factory.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                case 0:\n                    factory.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                    break;\n                case 1:\n                    factory.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20), AbstractQueryTestCase.randomGeohash(1, 12))\n                            .order(randomFrom(SortOrder.values())));\n                    break;\n                case 2:\n                    factory.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                    break;\n                case 3:\n                    factory.sort(SortBuilders.scriptSort(mockScript(\"foo\"), ScriptSortType.NUMBER).order(randomFrom(SortOrder.values())));\n                    break;\n                case 4:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20));\n                    break;\n                case 5:\n                    factory.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                    break;\n                }\n            }\n        }\n        if (randomBoolean()) {\n            \r\n            factory.highlighter(\n                    HighlightBuilderTests.randomHighlighterBuilder().useExplicitFieldOrder(true));\n        }\n        return factory;\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/TopHitsTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2020-11-11 01:38:59","commitOrder":13,"curCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder,\n            Supplier<Map<String, Object>> randomRuntimeMappings) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int numFields = randomInt(5);\n            for (int i = 0; i < numFields; i++) {\n                builder.fetchField(randomAlphaOfLengthBetween(5, 10));\n            }\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)).field(\"foo\"));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        if (randomBoolean()) {\n            PointInTimeBuilder pit = new PointInTimeBuilder(randomAlphaOfLengthBetween(3, 10));\n            if (randomBoolean()) {\n                pit.setKeepAlive(TimeValue.timeValueMinutes(randomIntBetween(1, 60)));\n            }\n            builder.pointInTimeBuilder(pit);\n        }\n        if (randomBoolean()) {\n            builder.runtimeMappings(randomRuntimeMappings.get());\n        }\n        return builder;\n    }\n","date":"2020-11-11 01:38:59","endLine":387,"groupId":"105284","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"randomSearchSourceBuilder","params":"(Supplier<HighlightBuilder>randomHighlightBuilder@Supplier<SuggestBuilder>randomSuggestBuilder@Supplier<RescorerBuilder<?>>randomRescoreBuilder@Supplier<List<SearchExtBuilder>>randomExtBuilders@Supplier<CollapseBuilder>randomCollapseBuilder@Supplier<Map<String@Object>>randomRuntimeMappings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/67/aaedf7d818f38fe90dc440dc44283e651084e0.src","preCode":"    public static SearchSourceBuilder randomSearchSourceBuilder(\n            Supplier<HighlightBuilder> randomHighlightBuilder,\n            Supplier<SuggestBuilder> randomSuggestBuilder,\n            Supplier<RescorerBuilder<?>> randomRescoreBuilder,\n            Supplier<List<SearchExtBuilder>> randomExtBuilders,\n            Supplier<CollapseBuilder> randomCollapseBuilder) {\n        SearchSourceBuilder builder = new SearchSourceBuilder();\n        if (randomBoolean()) {\n            builder.from(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.size(randomIntBetween(0, 10000));\n        }\n        if (randomBoolean()) {\n            builder.explain(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.version(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.seqNoAndPrimaryTerm(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.trackScores(randomBoolean());\n        }\n        if (randomBoolean()) {\n            builder.minScore(randomFloat() * 1000);\n        }\n        if (randomBoolean()) {\n            builder.timeout(TimeValue.parseTimeValue(randomTimeValue(), null, \"timeout\"));\n        }\n        if (randomBoolean()) {\n            builder.terminateAfter(randomIntBetween(1, 100000));\n        }\n        if (randomBoolean()) {\n            if (randomBoolean()) {\n                builder.trackTotalHits(randomBoolean());\n            } else {\n                builder.trackTotalHitsUpTo(\n                    randomIntBetween(SearchContext.TRACK_TOTAL_HITS_DISABLED, SearchContext.TRACK_TOTAL_HITS_ACCURATE)\n                );\n            }\n        }\n\n        switch(randomInt(2)) {\n            case 0:\n                builder.storedFields();\n                break;\n            case 1:\n                builder.storedField(\"_none_\");\n                break;\n            case 2:\n                int fieldsSize = randomInt(25);\n                List<String> fields = new ArrayList<>(fieldsSize);\n                for (int i = 0; i < fieldsSize; i++) {\n                    fields.add(randomAlphaOfLengthBetween(5, 50));\n                }\n                builder.storedFields(fields);\n                break;\n            default:\n                throw new IllegalStateException();\n        }\n\n        if (randomBoolean()) {\n            int numFields = randomInt(5);\n            for (int i = 0; i < numFields; i++) {\n                builder.fetchField(randomAlphaOfLengthBetween(5, 10));\n            }\n        }\n\n        if (randomBoolean()) {\n            int scriptFieldsSize = randomInt(25);\n            for (int i = 0; i < scriptFieldsSize; i++) {\n                if (randomBoolean()) {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"), randomBoolean());\n                } else {\n                    builder.scriptField(randomAlphaOfLengthBetween(5, 50), mockScript(\"foo\"));\n                }\n            }\n        }\n        if (randomBoolean()) {\n            FetchSourceContext fetchSourceContext;\n            int branch = randomInt(5);\n            String[] includes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < includes.length; i++) {\n                includes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            String[] excludes = new String[randomIntBetween(0, 20)];\n            for (int i = 0; i < excludes.length; i++) {\n                excludes[i] = randomAlphaOfLengthBetween(5, 20);\n            }\n            switch (branch) {\n                case 0:\n                    fetchSourceContext = new FetchSourceContext(randomBoolean());\n                    break;\n                case 1:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 2:\n                    fetchSourceContext = new FetchSourceContext(true, new String[]{randomAlphaOfLengthBetween(5, 20)},\n                        new String[]{randomAlphaOfLengthBetween(5, 20)});\n                    break;\n                case 3:\n                    fetchSourceContext = new FetchSourceContext(true, includes, excludes);\n                    break;\n                case 4:\n                    fetchSourceContext = new FetchSourceContext(true, includes, null);\n                    break;\n                case 5:\n                    fetchSourceContext = new FetchSourceContext(true, new String[] {randomAlphaOfLengthBetween(5, 20)}, null);\n                    break;\n                default:\n                    throw new IllegalStateException();\n            }\n            builder.fetchSource(fetchSourceContext);\n        }\n        if (randomBoolean()) {\n            int size = randomIntBetween(0, 20);\n            List<String> statsGroups = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                statsGroups.add(randomAlphaOfLengthBetween(5, 20));\n            }\n            builder.stats(statsGroups);\n        }\n        if (randomBoolean()) {\n            int indexBoostSize = randomIntBetween(1, 10);\n            for (int i = 0; i < indexBoostSize; i++) {\n                builder.indexBoost(randomAlphaOfLengthBetween(5, 20), randomFloat() * 10);\n            }\n        }\n        if (randomBoolean()) {\n            builder.query(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            builder.postFilter(QueryBuilders.termQuery(randomAlphaOfLengthBetween(5, 20), randomAlphaOfLengthBetween(5, 20)));\n        }\n        if (randomBoolean()) {\n            int numSorts = randomIntBetween(1, 5);\n            for (int i = 0; i < numSorts; i++) {\n                int branch = randomInt(5);\n                switch (branch) {\n                    case 0:\n                        builder.sort(SortBuilders.fieldSort(randomAlphaOfLengthBetween(5, 20)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 1:\n                        builder.sort(SortBuilders.geoDistanceSort(randomAlphaOfLengthBetween(5, 20),\n                                AbstractQueryTestCase.randomGeohash(1, 12)).order(randomFrom(SortOrder.values())));\n                        break;\n                    case 2:\n                        builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));\n                        break;\n                    case 3:\n                        builder.sort(SortBuilders\n                                .scriptSort(\n                                        new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, \"foo\", emptyMap()),\n                                        ScriptSortBuilder.ScriptSortType.NUMBER)\n                                .order(randomFrom(SortOrder.values())));\n                        break;\n                    case 4:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20));\n                        break;\n                    case 5:\n                        builder.sort(randomAlphaOfLengthBetween(5, 20), randomFrom(SortOrder.values()));\n                        break;\n                }\n            }\n        }\n\n        if (randomBoolean()) {\n            int numSearchFrom = randomIntBetween(1, 5);\n            try {\n                \r\n                \r\n                \r\n                \r\n                XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();\n                jsonBuilder.startObject();\n                jsonBuilder.startArray(\"search_from\");\n                for (int i = 0; i < numSearchFrom; i++) {\n                    int branch = randomInt(8);\n                    switch (branch) {\n                        case 0:\n                            jsonBuilder.value(randomInt());\n                            break;\n                        case 1:\n                            jsonBuilder.value(randomFloat());\n                            break;\n                        case 2:\n                            jsonBuilder.value(randomLong());\n                            break;\n                        case 3:\n                            jsonBuilder.value(randomDouble());\n                            break;\n                        case 4:\n                            jsonBuilder.value(randomAlphaOfLengthBetween(5, 20));\n                            break;\n                        case 5:\n                            jsonBuilder.value(randomBoolean());\n                            break;\n                        case 6:\n                            jsonBuilder.value(randomByte());\n                            break;\n                        case 7:\n                            jsonBuilder.value(randomShort());\n                            break;\n                        case 8:\n                            jsonBuilder.value(new Text(randomAlphaOfLengthBetween(5, 20)));\n                            break;\n                    }\n                }\n                jsonBuilder.endArray();\n                jsonBuilder.endObject();\n                XContentParser parser = XContentFactory.xContent(XContentType.JSON)\n                    .createParser(NamedXContentRegistry.EMPTY, DeprecationHandler.THROW_UNSUPPORTED_OPERATION,\n                        BytesReference.bytes(jsonBuilder).streamInput());\n                parser.nextToken();\n                parser.nextToken();\n                parser.nextToken();\n                builder.searchAfter(SearchAfterBuilder.fromXContent(parser).getSortValues());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error building search_from\", e);\n            }\n        }\n        if (randomBoolean()) {\n            builder.highlighter(randomHighlightBuilder.get());\n        }\n        if (randomBoolean()) {\n            builder.suggest(randomSuggestBuilder.get());\n        }\n        if (randomBoolean()) {\n            int numRescores = randomIntBetween(1, 5);\n            for (int i = 0; i < numRescores; i++) {\n                builder.addRescorer(randomRescoreBuilder.get());\n            }\n        }\n        if (randomBoolean()) {\n            builder.aggregation(AggregationBuilders.avg(randomAlphaOfLengthBetween(5, 20)).field(\"foo\"));\n        }\n        if (randomBoolean()) {\n            builder.ext(randomExtBuilders.get());\n        }\n        if (randomBoolean()) {\n            String field = randomBoolean() ? null : randomAlphaOfLengthBetween(5, 20);\n            int max = between(2, 1000);\n            int id = randomInt(max-1);\n            if (field == null) {\n                builder.slice(new SliceBuilder(id, max));\n            } else {\n                builder.slice(new SliceBuilder(field, id, max));\n            }\n        }\n        if (randomBoolean()) {\n            builder.collapse(randomCollapseBuilder.get());\n        }\n        if (randomBoolean()) {\n            PointInTimeBuilder pit = new PointInTimeBuilder(randomAlphaOfLengthBetween(3, 10));\n            if (randomBoolean()) {\n                pit.setKeepAlive(TimeValue.timeValueMinutes(randomIntBetween(1, 60)));\n            }\n            builder.pointInTimeBuilder(pit);\n        }\n        return builder;\n    }\n","realPath":"test/framework/src/main/java/org/elasticsearch/search/RandomSearchRequestGenerator.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"a08b52f3bd736fd741a38f3a4493a183c2ad8a69","commitMessage":"@@@Add `runtime_mappings` to search request (#64374)\n\nThis adds a way to specify the `runtime_mappings` on a search request\nwhich are always \"runtime\" fields. It looks like:\n```\ncurl -XDELETE -uelastic:password -HContent-Type:application/json localhost:9200/test\ncurl -XPOST -uelastic:password -HContent-Type:application/json 'localhost:9200/test/_bulk?pretty&refresh' -d'\n{\"index\": {}}\n{\"animal\": \"cat\".  \"sound\": \"meow\"}\n{\"index\": {}}\n{\"animal\": \"dog\".  \"sound\": \"woof\"}\n{\"index\": {}}\n{\"animal\": \"snake\".  \"sound\": \"hisssssssssssssssss\"}\n'\n\ncurl -XPOST -uelastic:password -HContent-Type:application/json localhost:9200/test/_search?pretty -d'\n{\n  \"runtime_mappings\": {\n    \"animal.upper\": {\n      \"type\": \"keyword\". \n      \"script\": \"for (String s : doc[\\\"animal.keyword\\\"]) {emit(s.toUpperCase())}\"\n    }\n  }. \n  \"query\": {\n    \"match\": {\n      \"animal.upper\": \"DOG\"\n    }\n  }\n}'\n```\n\nNOTE:\nIf we have to send a search request with runtime mappings to a node that\ndoesn't support runtime mappings at all then we'll fail the search\nrequest entirely. The alternative would be to not send those runtime\nmappings and let the node fail the search request with an \"unknown field\"\nerror. I believe this is would be hard to surprising because you defined\nthe field in the search request.\n\nNOTE:\nIt isn't obvious but you can also use `runtime_mappings` to override fields\ninside objects by naming the runtime fields with `.` in them. Like this:\n```\ncurl -XDELETE -uelastic:password -HContent-Type:application/json localhost:9200/test\ncurl -uelastic:password -XPOST -HContent-Type:application/json localhost:9200/test/_bulk?refresh -d'\n{\"index\":{}}\n{\"name\": {\"first\": \"Andrew\".  \"last\": \"Wiggin\"}}\n{\"index\":{}}\n{\"name\": {\"first\": \"Julian\".  \"last\": \"Delphiki\".  \"suffix\": \"II\"}}\n'\n\ncurl -uelastic:password -XPOST -HContent-Type:application/json localhost:9200/test/_search?pretty -d'{\n  \"runtime_mappings\": {\n    \"name.first\": {\n      \"type\": \"keyword\". \n      \"script\": \"if (\\\"Wiggin\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Ender\\\");} else if (\\\"Delphiki\\\".equals(doc[\\\"name.last.keyword\\\"].value)) {emit(\\\"Bean\\\");}\"\n    }\n  }. \n  \"query\": {\n    \"match\": {\n      \"name.first\": \"Bean\"\n    }\n  }\n}'\n```\n\nRelates to #59332","date":"2020-11-11 01:38:59","modifiedFileCount":"30","status":"M","submitter":"Nik Everett"}]
