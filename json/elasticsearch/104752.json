[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher.reader(), () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.reader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":55,"groupId":"47167","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ae/65bc9f32c9a789620b3422d42e8290df1fa530.src","preCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher.reader(), () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.reader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher.reader(), () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.reader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null);\n            valuesSource = config.toValuesSource(context);\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":83,"groupId":"23330","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ae/65bc9f32c9a789620b3422d42e8290df1fa530.src","preCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher.reader(), () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.reader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null);\n            valuesSource = config.toValuesSource(context);\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-07-05 04:48:48","codes":[{"authorDate":"2019-07-05 04:48:48","commitOrder":2,"curCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher.getIndexReader(), () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2019-07-05 04:48:48","endLine":56,"groupId":"47167","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/af6178dfb7ad0e6d34f2ced84b600afd642c62.src","preCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher.reader(), () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.reader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2019-07-05 04:48:48","commitOrder":2,"curCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher.getIndexReader(), () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null);\n            valuesSource = config.toValuesSource(context);\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2019-07-05 04:48:48","endLine":84,"groupId":"23330","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/32/af6178dfb7ad0e6d34f2ced84b600afd642c62.src","preCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher.reader(), () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.reader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null);\n            valuesSource = config.toValuesSource(context);\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"399d53e5c03ae4157d9ba107d01fbecfed758972","commitMessage":"@@@Refactor index engines to manage readers instead of searchers (#43860)\n\nThis commit changes the way we manage refreshes in the index engines.\nInstead of relying on a SearcherManager.  this change uses a ReaderManager that\ncreates ElasticsearchDirectoryReader when needed. Searchers are now created on-demand\n(when acquireSearcher is called) from the current ElasticsearchDirectoryReader.\nIt also slightly changes the Engine.Searcher to extend IndexSearcher in order\nto simplify the usage in the consumer.\n","date":"2019-07-05 04:48:48","modifiedFileCount":"33","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2019-09-11 17:55:41","codes":[{"authorDate":"2019-09-11 17:55:41","commitOrder":3,"curCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2019-09-11 17:55:41","endLine":56,"groupId":"47167","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/31aad4da25f8a69ba7995f35c45119a8e7e7ea.src","preCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher.getIndexReader(), () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2019-09-11 17:55:41","commitOrder":3,"curCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null);\n            valuesSource = config.toValuesSource(context);\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2019-09-11 17:55:41","endLine":84,"groupId":"23330","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/31aad4da25f8a69ba7995f35c45119a8e7e7ea.src","preCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher.getIndexReader(), () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null);\n            valuesSource = config.toValuesSource(context);\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"ee7985951fe8d674e9d765de7487af27e9ab1684","commitMessage":"@@@Add more context to QueryShardContext (#46584)\n\nThis change adds an IndexSearcher and the node's BigArrays in the QueryShardContext.\nIt's a spin off of #46527 as this change is required to allow aggregation builder to solely use the\nquery shard context.\n\nRelates #46523","date":"2019-09-11 17:55:41","modifiedFileCount":"32","status":"M","submitter":"Jim Ferenczi"},{"authorTime":"2019-10-25 18:09:52","codes":[{"authorDate":"2019-10-25 18:09:52","commitOrder":4,"curCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2019-10-25 18:09:52","endLine":56,"groupId":"47167","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/db/208044df1a4e31971808fae6fc41dbefa0a793.src","preCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2019-10-25 18:09:52","commitOrder":4,"curCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null);\n            valuesSource = config.toValuesSource(context);\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2019-10-25 18:09:52","endLine":84,"groupId":"23330","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/db/208044df1a4e31971808fae6fc41dbefa0a793.src","preCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\", \"type\", \"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null);\n            valuesSource = config.toValuesSource(context);\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"750c6d8bb1c751774f01fd12778f8bcc0a6f4d57","commitMessage":"@@@Remove Client.prepareIndex(index.  type.  id) method (#48443)\n\nAs types are no longer used in index requests.  we can remove the type parameter\nfrom `prepareIndex` methods in the `Client` interface. However.  just changing the signature\nof `prepareIndex(index.  type.  id)` to `prepareIndex(index.  id)` risks confusion when\nupgrading with the previous (now removed) `prepareIndex(index.  type)` method -\njust changing the dependency version of java code would end up silently changing the\nsemantics of the method call. Instead we should just remove this method entirely.  and\nreplace it by calling `prepareIndex(index).setId(id)`","date":"2019-10-25 18:09:52","modifiedFileCount":"267","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-03-27 03:01:07","codes":[{"authorDate":"2020-03-27 03:01:07","commitOrder":5,"curCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null, CoreValuesSourceType.BYTES, null);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.toValuesSource();\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2020-03-27 03:01:07","endLine":57,"groupId":"47167","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/a71bd2ed39e6296eec48e6f9d089e66d56c2ef.src","preCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2020-03-27 03:01:07","commitOrder":5,"curCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null, CoreValuesSourceType.BYTES, null);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.toValuesSource();\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null, CoreValuesSourceType.BYTES, null);\n            valuesSource = (ValuesSource.Bytes) config.toValuesSource();\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2020-03-27 03:01:07","endLine":85,"groupId":"72524","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/25/a71bd2ed39e6296eec48e6f9d089e66d56c2ef.src","preCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig<ValuesSource.Bytes> config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null);\n            ValuesSource.Bytes valuesSource = config.toValuesSource(context);\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null);\n            valuesSource = config.toValuesSource(context);\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"a90c1de8745681356a6516f4f22a8c40f71f6b12","commitMessage":"@@@Add ValuesSource Registry and associated logic (#54281)\n\n* Remove ValuesSourceType argument to ValuesSourceAggregationBuilder (#48638)\n\n* ValuesSourceRegistry Prototype (#48758)\n\n* Remove generics from ValuesSource related classes (#49606)\n\n* fix percentile aggregation tests (#50712)\n\n* Basic thread safety for ValuesSourceRegistry (#50340)\n\n* Remove target value type from ValuesSourceAggregationBuilder (#49943)\n\n* Cleanup default values source type (#50992)\n\n* CoreValuesSourceType no longer implements Writable (#51276)\n\n* Remove genereics & hard coded ValuesSource references from Matrix Stats (#51131)\n\n* Put values source types on fields (#51503)\n\n* Remove VST Any (#51539)\n\n* Rewire terms agg to use new VS registry (#51182)\n\nAlso adds some basic AggTestCases for untested code\npaths (and boilerplate for future tests once the IT are\nconverted over)\n\n* Wire Cardinality aggregation to work with the ValuesSourceRegistry (#51337)\n\n* Wire Percentiles aggregator into new VS framework (#51639)\n\nThis required a bit of a refactor to percentiles itself.  Before. \nthe Builder would switch on the chosen algo to generate an\nalgo-specific factory.  This doesn't work (or at least.  would be\ndifficult) in the new VS framework.\n\nThis refactor consolidates both factories together and introduces\na PercentilesConfig object to act as a standardized way to pass\nalgo-specific parameters through the factory.  This object\nis then used when deciding which kind of aggregator to create\n\nNote: CoreValuesSourceType.HISTOGRAM still lives in core.  and will\nbe moved in a subsequent PR.\n\n* Remove generics and target value type from MultiVSAB (#51647)\n\n* fix checkstyle after merge (#52008)\n\n* Plumb ValuesSourceRegistry through to QuerySearchContext (#51710)\n\n* Convert RareTerms to new VS registry (#52166)\n\n* Wire up Value Count (#52225)\n\n* Wire up Max & Min aggregations (#52219)\n\n* ValuesSource refactoring: Wire up Sum aggregation (#52571)\n\n* ValuesSource refactoring: Wire up SigTerms aggregation (#52590)\n\n* Soft immutability for VSConfig (#52729)\n\n* Unmute testSupportedFieldTypes.  fix Percentiles/Ranks/Terms tests (#52734)\n\nAlso fixes Percentiles which was incorrectly specified to only accept\nnumeric.  but in fact also accepts Boolean and Date (because those are\nnumeric on master - thanks `testSupportedFieldTypes` for catching it!)\n\n* VS refactoring: Wire up stats aggregation (#52891)\n\n* ValuesSource refactoring: Wire up string_stats aggregation (#52875)\n\n* VS refactoring: Wire up median (MAD) aggregation (#52945)\n\n* fix valuesourcetype issue with constant_keyword field (#53041)\n\nthis commit implements `getValuesSourceType` for\nthe ConstantKeyword field type.\n\nmaster was merged into feature/extensible-values-source\nintroducing a new field type that was not implementing\n`getValuesSourceType`.\n\n* ValuesSource refactoring: Wire up Avg aggregation (#52752)\n\n* Wire PercentileRanks aggregator into new VS framework  (#51693)\n\n* Add a VSConfig resolver for aggregations not using the registry (#53038)\n\n* Vs refactor wire up ranges and date ranges (#52918)\n\n* Wire up geo_bounds aggregation to ValuesSourceRegistry (#53034)\n\nThis commit updates the geo_bounds aggregation to depend\non registering itself in the ValuesSourceRegistry\n\nrelates #42949.\n\n* VS refactoring: convert Boxplot to new registry (#53132)\n\n* Wire-up geotile_grid and geohash_grid to ValuesSourceRegistry (#53037)\n\nThis commit updates the geo*_grid aggregations to depend\non registering itself in the ValuesSourceRegistry\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Wire-up geo_centroid agg to ValuesSourceRegistry (#53040)\n\nThis commit updates the geo_centroid aggregation to depend\non registering itself in the ValuesSourceRegistry.\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Fix type tests for Missing aggregation (#53501)\n\n* ValuesSource Refactor: move histo VSType into XPack module (#53298)\n\n- Introduces a new API (`getBareAggregatorRegistrar()`) which allows plugins to register aggregations against existing agg definitions defined in Core.\n- This moves the histogram VSType over to XPack where it belongs. `getHistogramValues()` still remains as a Core concept\n- Moves the histo-specific bits over to xpack (e.g. the actual aggregator logic). This requires extra boilerplate since we need to create a new \"Analytics\" Percentile/Rank aggregators to deal with the histo field. Doubly-so since percentiles/ranks are extra boiler-plate'y... should be much lighter for other aggs\n\n* Wire up DateHistogram to the ValuesSourceRegistry (#53484)\n\n* Vs refactor parser cleanup (#53198)\n\nCo-authored-by: Zachary Tong <polyfractal@elastic.co>\nCo-authored-by: Zachary Tong <zach@elastic.co>\nCo-authored-by: Christos Soulios <1561376+csoulios@users.noreply.github.com>\nCo-authored-by: Tal Levy <JubBoy333@gmail.com>","date":"2020-03-27 03:01:07","modifiedFileCount":"214","status":"M","submitter":"Mark Tozzi"},{"authorTime":"2020-06-12 04:17:56","codes":[{"authorDate":"2020-06-12 04:17:56","commitOrder":6,"curCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null, CoreValuesSourceType.BYTES, null);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2020-06-12 04:17:56","endLine":57,"groupId":"47167","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/21/7ab667e26d4b393fa810bc5a346249737ad9e1.src","preCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null, CoreValuesSourceType.BYTES, null);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.toValuesSource();\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2020-06-12 04:17:56","commitOrder":6,"curCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null, CoreValuesSourceType.BYTES, null);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null, CoreValuesSourceType.BYTES, null);\n            valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2020-06-12 04:17:56","endLine":85,"groupId":"72524","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/21/7ab667e26d4b393fa810bc5a346249737ad9e1.src","preCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null, CoreValuesSourceType.BYTES, null);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.toValuesSource();\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null, CoreValuesSourceType.BYTES, null);\n            valuesSource = (ValuesSource.Bytes) config.toValuesSource();\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"9cbeb8ec91d567648b365ca2745e75722ee0d0ec","commitMessage":"@@@Make ValuesSourceConfig behave like a config object (#57762)\n\n","date":"2020-06-12 04:17:56","modifiedFileCount":"82","status":"M","submitter":"Mark Tozzi"},{"authorTime":"2020-06-26 22:33:37","codes":[{"authorDate":"2020-06-26 22:33:37","commitOrder":7,"curCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null, CoreValuesSourceType.BYTES);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2020-06-26 22:33:37","endLine":57,"groupId":"47167","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/69/9ab62fdecb4d5173d0ef40a21916721501775f.src","preCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null, CoreValuesSourceType.BYTES, null);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2020-06-26 22:33:37","commitOrder":7,"curCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null, CoreValuesSourceType.BYTES);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null, CoreValuesSourceType.BYTES);\n            valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","date":"2020-06-26 22:33:37","endLine":85,"groupId":"72524","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/69/9ab62fdecb4d5173d0ef40a21916721501775f.src","preCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null, CoreValuesSourceType.BYTES, null);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null, CoreValuesSourceType.BYTES, null);\n            valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"cac5f29cee7572a3695e2b8d17d0a0cb7ac473dd","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-06-26 22:33:37","modifiedFileCount":"731","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-10-13 01:11:44","codes":[{"authorDate":"2020-10-13 01:11:44","commitOrder":8,"curCode":"    public void testKeyword() throws Exception {\n        MapperService mapperService = createMapperService(fieldMapping(b -> b.field(\"type\", \"keyword\")));\n        withAggregationContext(mapperService, List.of(source(b -> b.field(\"field\", \"abc\"))), context -> {\n            ValuesSourceConfig config;\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, null, null, null, CoreValuesSourceType.BYTES);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = context.searcher().getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        });\n    }\n","date":"2020-10-13 01:11:44","endLine":47,"groupId":"7187","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3a/c362764ecec15b9661ad5f0b3ea3e70aa86e6d.src","preCode":"    public void testKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource(\"bytes\", \"abc\")\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null, CoreValuesSourceType.BYTES);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2020-10-13 01:11:44","commitOrder":8,"curCode":"    public void testEmptyKeyword() throws Exception {\n        MapperService mapperService = createMapperService(fieldMapping(b -> b.field(\"type\", \"keyword\")));\n        withAggregationContext(mapperService, List.of(source(b -> {})), context -> {\n            ValuesSourceConfig config;\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, null, null, null, CoreValuesSourceType.BYTES);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = context.searcher().getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, \"abc\", null, null, CoreValuesSourceType.BYTES);\n            valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        });\n    }\n","date":"2020-10-13 01:11:44","endLine":65,"groupId":"7188","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3a/c362764ecec15b9661ad5f0b3ea3e70aa86e6d.src","preCode":"    public void testEmptyKeyword() throws Exception {\n        IndexService indexService = createIndex(\"index\", Settings.EMPTY, \"type\",\n                \"bytes\", \"type=keyword\");\n        client().prepareIndex(\"index\").setId(\"1\")\n                .setSource()\n                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE)\n                .get();\n\n        try (Engine.Searcher searcher = indexService.getShard(0).acquireSearcher(\"test\")) {\n            QueryShardContext context = indexService.newQueryShardContext(0, searcher, () -> 42L, null);\n\n            ValuesSourceConfig config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, null, null, null, CoreValuesSourceType.BYTES);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = searcher.getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n\n            config = ValuesSourceConfig.resolve(\n                    context, null, \"bytes\", null, \"abc\", null, null, CoreValuesSourceType.BYTES);\n            valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"4aaffc6a3deef28e8dedd3d9211951e3db0e2d8e","commitMessage":"@@@Consider query when optimizing date rounding (#63403)\n\nBefore this change we inspected the index when optimizing\n`date_histogram` aggregations.  precalculating the divisions for the\nbuckets for the entire range of dates on the index so long as there\naren't a ton of these buckets. This works very well when you query all\nof the dates in the index which is quite common - after all.  folks\nfrequently want to query a week of data and have daily indices.\n\nBut it doesn't work as well when the index is much larger than the\nquery. This is quite common when dumping data into ES just to\ninvestigate it but less common in the traditional time series use case.\nBut even there it still happens.  it is just less impactful. Consider\nthe default query produced by Kibana's Discover app: a range of 15\nminutes and a interval of 30 seconds. This optimization saves something\nlike 3 to 12 nanoseconds per document.  so that 15 minutes would have to\nhave hundreds of millions of documents for it to be impactful.\n\nAnyway.  this commit takes the query into account when precalculating the\nbuckets. Mostly this is good when you have \"dirty data\". Immagine\nloading 80 billion docs in an index to investigate them. Most of them\nhave dates around 2015 and 2016 but some have dates in 1970 and\nothers have dates in 2030. These outlier dates are \"dirty\" \"garbage\".\nWell.  without this change a `date_histogram` across many of these docs\nis significantly slowed down because we don't precalculate the range due\nto the outliers. That's just rude! So this change takes the query into\naccount.\n\nThe bulk of the code change here is plumbing the query into place. It\nturns out that its a *ton* of plumbing.  so instead of just adding a\n`Query` member in hundreds of args replace `QueryShardContext` with a\nnew `AggregationContext` which does two things:\n1. Has the top level `Query`.\n2. Exposes just the parts of `QueryShardContext` that we actually need\n   to run aggregation. This lets us simplify a few tests now and will\n   let us simplify many.  many tests later.\n","date":"2020-10-13 01:11:44","modifiedFileCount":"156","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-11-10 03:20:25","codes":[{"authorDate":"2020-10-13 01:11:44","commitOrder":9,"curCode":"    public void testKeyword() throws Exception {\n        MapperService mapperService = createMapperService(fieldMapping(b -> b.field(\"type\", \"keyword\")));\n        withAggregationContext(mapperService, List.of(source(b -> b.field(\"field\", \"abc\"))), context -> {\n            ValuesSourceConfig config;\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, null, null, null, CoreValuesSourceType.BYTES);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = context.searcher().getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        });\n    }\n","date":"2020-10-13 01:11:44","endLine":47,"groupId":"7187","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3a/c362764ecec15b9661ad5f0b3ea3e70aa86e6d.src","preCode":"    public void testKeyword() throws Exception {\n        MapperService mapperService = createMapperService(fieldMapping(b -> b.field(\"type\", \"keyword\")));\n        withAggregationContext(mapperService, List.of(source(b -> b.field(\"field\", \"abc\"))), context -> {\n            ValuesSourceConfig config;\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, null, null, null, CoreValuesSourceType.BYTES);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = context.searcher().getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"N"},{"authorDate":"2020-11-10 03:20:25","commitOrder":9,"curCode":"    public void testEmptyKeyword() throws Exception {\n        MapperService mapperService = createMapperService(fieldMapping(b -> b.field(\"type\", \"keyword\")));\n        withAggregationContext(mapperService, List.of(source(b -> {})), context -> {\n            ValuesSourceConfig config;\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, null, null, null, CoreValuesSourceType.BYTES);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = context.searcher().getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n            assertTrue(config.alignesWithSearchIndex());\n\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, \"abc\", null, null, CoreValuesSourceType.BYTES);\n            valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n            assertFalse(config.alignesWithSearchIndex());\n        });\n    }\n","date":"2020-11-10 03:20:25","endLine":68,"groupId":"7188","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/d1/caaacafe077cfd1af03734e46d413d2a86faa3.src","preCode":"    public void testEmptyKeyword() throws Exception {\n        MapperService mapperService = createMapperService(fieldMapping(b -> b.field(\"type\", \"keyword\")));\n        withAggregationContext(mapperService, List.of(source(b -> {})), context -> {\n            ValuesSourceConfig config;\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, null, null, null, CoreValuesSourceType.BYTES);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = context.searcher().getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, \"abc\", null, null, CoreValuesSourceType.BYTES);\n            valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"7ceed1369dcec5eacd4f023e3b917dea5084b3dc","commitMessage":"@@@Speed up date_histogram without children (#63643)\n\nThis speeds up `date_histogram` aggregations without a parent or\nchildren. This is quite common - it's the aggregation that Kibana's Discover\nuses all over the place. Also.  we hope to be able to use the same\nmechanism to speed aggs with children one day.  but that day isn't today.\n\nThe kind of speedup we're seeing is fairly substantial in many cases:\n```\n|                              |                                            |  before |   after |    |\n| 90th percentile service time |           date_histogram_calendar_interval | 9266.07 | 1376.13 | ms |\n| 90th percentile service time |   date_histogram_calendar_interval_with_tz | 9217.21 | 1372.67 | ms |\n| 90th percentile service time |              date_histogram_fixed_interval | 8817.36 | 1312.67 | ms |\n| 90th percentile service time |      date_histogram_fixed_interval_with_tz | 8801.71 | 1311.69 | ms | <-- discover's agg\n| 90th percentile service time | date_histogram_fixed_interval_with_metrics | 44660.2 | 43789.5 | ms |\n```\n\nThis uses the work we did in #61467 to precompute the rounding points for\na `date_histogram`. Now.  when we know the rounding points we execute the\n`date_histogram` as a `range` aggregation. This is nice for two reasons:\n1. We can further rewrite the `range` aggregation (see below)\n2. We don't need to allocate a hash to convert rounding points\n   to ordinals.\n3. We can send precise cardinality estimates to sub-aggs.\n\nPoints 2 and 3 above are nice.  but most of the speed difference comes from\npoint 1. Specifically.  we now look into executing `range` aggregations as\na `filters` aggregation. Normally the `filters` aggregation is quite slow\nbut when it doesn't have a parent or any children then we can execute it\n\"filter by filter\" which is significantly faster. So fast.  in fact.  that\nit is faster than the original `date_histogram`.\n\nThe `range` aggregation is *fairly* careful in how it rewrites.  giving up\non the `filters` aggregation if it won't collect \"filter by filter\" and\nfalling back to its original execution mechanism.\n\n\nSo an aggregation like this:\n\n```\nPOST _search\n{\n  \"size\": 0. \n  \"query\": {\n    \"range\": {\n      \"dropoff_datetime\": {\n        \"gte\": \"2015-01-01 00:00:00\". \n        \"lt\": \"2016-01-01 00:00:00\"\n      }\n    }\n  }. \n  \"aggs\": {\n    \"dropoffs_over_time\": {\n      \"date_histogram\": {\n        \"field\": \"dropoff_datetime\". \n        \"fixed_interval\": \"60d\". \n        \"time_zone\": \"America/New_York\"\n      }\n    }\n  }\n}\n```\n\nis executed like:\n\n```\nPOST _search\n{\n  \"size\": 0. \n  \"query\": {\n    \"range\": {\n      \"dropoff_datetime\": {\n        \"gte\": \"2015-01-01 00:00:00\". \n        \"lt\": \"2016-01-01 00:00:00\"\n      }\n    }\n  }. \n  \"aggs\": {\n    \"dropoffs_over_time\": {\n      \"range\": {\n        \"field\": \"dropoff_datetime\". \n        \"ranges\": [\n          {\"from\": 1415250000000.  \"to\": 1420434000000}. \n          {\"from\": 1420434000000.  \"to\": 1425618000000}. \n          {\"from\": 1425618000000.  \"to\": 1430798400000}. \n          {\"from\": 1430798400000.  \"to\": 1435982400000}. \n          {\"from\": 1435982400000.  \"to\": 1441166400000}. \n          {\"from\": 1441166400000.  \"to\": 1446350400000}. \n          {\"from\": 1446350400000.  \"to\": 1451538000000}. \n          {\"from\": 1451538000000}\n        ]\n      }\n    }\n  }\n}\n```\n\nWhich in turn is executed like this:\n\n```\nPOST _search\n{\n  \"size\": 0. \n  \"query\": {\n    \"range\": {\n      \"dropoff_datetime\": {\n        \"gte\": \"2015-01-01 00:00:00\". \n        \"lt\": \"2016-01-01 00:00:00\"\n      }\n    }\n  }. \n  \"aggs\": {\n    \"dropoffs_over_time\": {\n      \"filters\": {\n        \"filters\": {\n          \"1\": {\"range\": {\"dropoff_datetime\": {\"gte\": \"2014-12-30 00:00:00\".  \"lt\": \"2015-01-05 05:00:00\"}}}. \n          \"2\": {\"range\": {\"dropoff_datetime\": {\"gte\": \"2015-01-05 05:00:00\".  \"lt\": \"2015-03-06 05:00:00\"}}}. \n          \"3\": {\"range\": {\"dropoff_datetime\": {\"gte\": \"2015-03-06 00:00:00\".  \"lt\": \"2015-05-05 00:00:00\"}}}. \n          \"4\": {\"range\": {\"dropoff_datetime\": {\"gte\": \"2015-05-05 00:00:00\".  \"lt\": \"2015-07-04 00:00:00\"}}}. \n          \"5\": {\"range\": {\"dropoff_datetime\": {\"gte\": \"2015-07-04 00:00:00\".  \"lt\": \"2015-09-02 00:00:00\"}}}. \n          \"6\": {\"range\": {\"dropoff_datetime\": {\"gte\": \"2015-09-02 00:00:00\".  \"lt\": \"2015-11-01 00:00:00\"}}}. \n          \"7\": {\"range\": {\"dropoff_datetime\": {\"gte\": \"2015-11-01 00:00:00\".  \"lt\": \"2015-12-31 00:00:00\"}}}. \n          \"8\": {\"range\": {\"dropoff_datetime\": {\"gte\": \"2015-12-31 00:00:00\"}}}\n        }\n      }\n    }\n  }\n}\n```\n\nAnd *that* is faster because we can execute it \"filter by filter\".\n\nFinally.  notice the `range` query filtering the data. That is required for\nthe data set that I'm using for testing. The \"filter by filter\" collection\nmechanism for the `filters` agg needs special case handling when the query\nis a `range` query and the filter is a `range` query and they are both on\nthe same field. That special case handling \"merges\" the range query.\nWithout it \"filter by filter\" collection is substantially slower. Its still\nquite a bit quicker than the standard `filter` collection.  but not nearly\nas fast as it could be.\n","date":"2020-11-10 03:20:25","modifiedFileCount":"31","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-12-31 01:39:17","codes":[{"authorDate":"2020-12-31 01:39:17","commitOrder":10,"curCode":"    public void testKeyword() throws Exception {\n        MapperService mapperService = createMapperService(fieldMapping(b -> b.field(\"type\", \"keyword\")));\n        withAggregationContext(mapperService, List.of(source(b -> b.field(\"field\", \"abc\"))), context -> {\n            ValuesSourceConfig config;\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, null, null, null, CoreValuesSourceType.KEYWORD);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = context.searcher().getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        });\n    }\n","date":"2020-12-31 01:39:17","endLine":47,"groupId":"104752","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a0/bf43d84a30f919890348355426373160cd00ae.src","preCode":"    public void testKeyword() throws Exception {\n        MapperService mapperService = createMapperService(fieldMapping(b -> b.field(\"type\", \"keyword\")));\n        withAggregationContext(mapperService, List.of(source(b -> b.field(\"field\", \"abc\"))), context -> {\n            ValuesSourceConfig config;\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, null, null, null, CoreValuesSourceType.BYTES);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = context.searcher().getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"},{"authorDate":"2020-12-31 01:39:17","commitOrder":10,"curCode":"    public void testEmptyKeyword() throws Exception {\n        MapperService mapperService = createMapperService(fieldMapping(b -> b.field(\"type\", \"keyword\")));\n        withAggregationContext(mapperService, List.of(source(b -> {})), context -> {\n            ValuesSourceConfig config;\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, null, null, null, CoreValuesSourceType.KEYWORD);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = context.searcher().getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n            assertTrue(config.alignesWithSearchIndex());\n\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, \"abc\", null, null, CoreValuesSourceType.KEYWORD);\n            valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n            assertFalse(config.alignesWithSearchIndex());\n        });\n    }\n","date":"2020-12-31 01:39:17","endLine":68,"groupId":"104752","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyKeyword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a0/bf43d84a30f919890348355426373160cd00ae.src","preCode":"    public void testEmptyKeyword() throws Exception {\n        MapperService mapperService = createMapperService(fieldMapping(b -> b.field(\"type\", \"keyword\")));\n        withAggregationContext(mapperService, List.of(source(b -> {})), context -> {\n            ValuesSourceConfig config;\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, null, null, null, CoreValuesSourceType.BYTES);\n            ValuesSource.Bytes valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            LeafReaderContext ctx = context.searcher().getIndexReader().leaves().get(0);\n            SortedBinaryDocValues values = valuesSource.bytesValues(ctx);\n            assertFalse(values.advanceExact(0));\n            assertTrue(config.alignesWithSearchIndex());\n\n            config = ValuesSourceConfig.resolve(context, null, \"field\", null, \"abc\", null, null, CoreValuesSourceType.BYTES);\n            valuesSource = (ValuesSource.Bytes) config.getValuesSource();\n            values = valuesSource.bytesValues(ctx);\n            assertTrue(values.advanceExact(0));\n            assertEquals(1, values.docValueCount());\n            assertEquals(new BytesRef(\"abc\"), values.nextValue());\n            assertFalse(config.alignesWithSearchIndex());\n        });\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/support/ValuesSourceConfigTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"e26c9bbd52960809545495a58a4c16d0d7c02925","commitMessage":"@@@Rename BYTES ValuesSourceType to reflect intended usage (#66762)\n\n","date":"2020-12-31 01:39:17","modifiedFileCount":"56","status":"M","submitter":"Mark Tozzi"}]
