[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testNullPipelineId() {\n        Map<String, Object> requestContent = new HashMap<>();\n        List<Map<String, Object>> docs = new ArrayList<>();\n        requestContent.put(Fields.DOCS, docs);\n        Exception e = expectThrows(IllegalArgumentException.class,\n            () -> SimulatePipelineRequest.parseWithPipelineId(null, requestContent, false, store));\n        assertThat(e.getMessage(), equalTo(\"param [pipeline] is null\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":213,"groupId":"18786","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullPipelineId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/c6d717bb38e180ddea6f29503ff70b815feb54.src","preCode":"    public void testNullPipelineId() {\n        Map<String, Object> requestContent = new HashMap<>();\n        List<Map<String, Object>> docs = new ArrayList<>();\n        requestContent.put(Fields.DOCS, docs);\n        Exception e = expectThrows(IllegalArgumentException.class,\n            () -> SimulatePipelineRequest.parseWithPipelineId(null, requestContent, false, store));\n        assertThat(e.getMessage(), equalTo(\"param [pipeline] is null\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulatePipelineRequestParsingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testNonExistentPipelineId() {\n        String pipelineId = randomAlphaOfLengthBetween(1, 10);\n        Map<String, Object> requestContent = new HashMap<>();\n        List<Map<String, Object>> docs = new ArrayList<>();\n        requestContent.put(Fields.DOCS, docs);\n        Exception e = expectThrows(IllegalArgumentException.class,\n            () -> SimulatePipelineRequest.parseWithPipelineId(pipelineId, requestContent, false, store));\n        assertThat(e.getMessage(), equalTo(\"pipeline [\" + pipelineId + \"] does not exist\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":223,"groupId":"68563","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonExistentPipelineId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/c6d717bb38e180ddea6f29503ff70b815feb54.src","preCode":"    public void testNonExistentPipelineId() {\n        String pipelineId = randomAlphaOfLengthBetween(1, 10);\n        Map<String, Object> requestContent = new HashMap<>();\n        List<Map<String, Object>> docs = new ArrayList<>();\n        requestContent.put(Fields.DOCS, docs);\n        Exception e = expectThrows(IllegalArgumentException.class,\n            () -> SimulatePipelineRequest.parseWithPipelineId(pipelineId, requestContent, false, store));\n        assertThat(e.getMessage(), equalTo(\"pipeline [\" + pipelineId + \"] does not exist\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulatePipelineRequestParsingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-08-21 18:54:06","codes":[{"authorDate":"2018-08-21 18:54:06","commitOrder":2,"curCode":"    public void testNullPipelineId() {\n        Map<String, Object> requestContent = new HashMap<>();\n        List<Map<String, Object>> docs = new ArrayList<>();\n        requestContent.put(Fields.DOCS, docs);\n        Exception e = expectThrows(IllegalArgumentException.class,\n            () -> SimulatePipelineRequest.parseWithPipelineId(null, requestContent, false, ingestService));\n        assertThat(e.getMessage(), equalTo(\"param [pipeline] is null\"));\n    }\n","date":"2018-08-21 18:54:06","endLine":214,"groupId":"18786","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullPipelineId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/17/11d16891083260791870a7d53bbfce8942c69b.src","preCode":"    public void testNullPipelineId() {\n        Map<String, Object> requestContent = new HashMap<>();\n        List<Map<String, Object>> docs = new ArrayList<>();\n        requestContent.put(Fields.DOCS, docs);\n        Exception e = expectThrows(IllegalArgumentException.class,\n            () -> SimulatePipelineRequest.parseWithPipelineId(null, requestContent, false, store));\n        assertThat(e.getMessage(), equalTo(\"param [pipeline] is null\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulatePipelineRequestParsingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2018-08-21 18:54:06","commitOrder":2,"curCode":"    public void testNonExistentPipelineId() {\n        String pipelineId = randomAlphaOfLengthBetween(1, 10);\n        Map<String, Object> requestContent = new HashMap<>();\n        List<Map<String, Object>> docs = new ArrayList<>();\n        requestContent.put(Fields.DOCS, docs);\n        Exception e = expectThrows(IllegalArgumentException.class,\n            () -> SimulatePipelineRequest.parseWithPipelineId(pipelineId, requestContent, false, ingestService));\n        assertThat(e.getMessage(), equalTo(\"pipeline [\" + pipelineId + \"] does not exist\"));\n    }\n","date":"2018-08-21 18:54:06","endLine":224,"groupId":"68563","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonExistentPipelineId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/17/11d16891083260791870a7d53bbfce8942c69b.src","preCode":"    public void testNonExistentPipelineId() {\n        String pipelineId = randomAlphaOfLengthBetween(1, 10);\n        Map<String, Object> requestContent = new HashMap<>();\n        List<Map<String, Object>> docs = new ArrayList<>();\n        requestContent.put(Fields.DOCS, docs);\n        Exception e = expectThrows(IllegalArgumentException.class,\n            () -> SimulatePipelineRequest.parseWithPipelineId(pipelineId, requestContent, false, store));\n        assertThat(e.getMessage(), equalTo(\"pipeline [\" + pipelineId + \"] does not exist\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulatePipelineRequestParsingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"}],"commitId":"10c60fae93fc82469d3dcc9f330035e2a5818bb7","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-21 18:54:06","modifiedFileCount":"60","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2021-06-21 22:03:19","codes":[{"authorDate":"2021-06-21 22:03:19","commitOrder":3,"curCode":"    public void testNullPipelineId() {\n        Map<String, Object> requestContent = new HashMap<>();\n        List<Map<String, Object>> docs = new ArrayList<>();\n        requestContent.put(Fields.DOCS, docs);\n        Exception e = expectThrows(IllegalArgumentException.class,\n            () -> SimulatePipelineRequest.parseWithPipelineId(null, requestContent, false, ingestService, RestApiVersion.current()));\n        assertThat(e.getMessage(), equalTo(\"param [pipeline] is null\"));\n    }\n","date":"2021-06-21 22:03:19","endLine":214,"groupId":"105777","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullPipelineId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/72787405dee43f6c19f2cbcb0bb45885af6c0b.src","preCode":"    public void testNullPipelineId() {\n        Map<String, Object> requestContent = new HashMap<>();\n        List<Map<String, Object>> docs = new ArrayList<>();\n        requestContent.put(Fields.DOCS, docs);\n        Exception e = expectThrows(IllegalArgumentException.class,\n            () -> SimulatePipelineRequest.parseWithPipelineId(null, requestContent, false, ingestService));\n        assertThat(e.getMessage(), equalTo(\"param [pipeline] is null\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulatePipelineRequestParsingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2021-06-21 22:03:19","commitOrder":3,"curCode":"    public void testNonExistentPipelineId() {\n        String pipelineId = randomAlphaOfLengthBetween(1, 10);\n        Map<String, Object> requestContent = new HashMap<>();\n        List<Map<String, Object>> docs = new ArrayList<>();\n        requestContent.put(Fields.DOCS, docs);\n        Exception e = expectThrows(IllegalArgumentException.class,\n            () -> SimulatePipelineRequest.parseWithPipelineId(pipelineId, requestContent, false, ingestService, RestApiVersion.current()));\n        assertThat(e.getMessage(), equalTo(\"pipeline [\" + pipelineId + \"] does not exist\"));\n    }\n","date":"2021-06-21 22:03:19","endLine":224,"groupId":"105777","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonExistentPipelineId","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c2/72787405dee43f6c19f2cbcb0bb45885af6c0b.src","preCode":"    public void testNonExistentPipelineId() {\n        String pipelineId = randomAlphaOfLengthBetween(1, 10);\n        Map<String, Object> requestContent = new HashMap<>();\n        List<Map<String, Object>> docs = new ArrayList<>();\n        requestContent.put(Fields.DOCS, docs);\n        Exception e = expectThrows(IllegalArgumentException.class,\n            () -> SimulatePipelineRequest.parseWithPipelineId(pipelineId, requestContent, false, ingestService));\n        assertThat(e.getMessage(), equalTo(\"pipeline [\" + pipelineId + \"] does not exist\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/action/ingest/SimulatePipelineRequestParsingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"}],"commitId":"073f0805ec7f24225c9d8f437db533be72106216","commitMessage":"@@@[Rest Api Compatibility] Type metadata for docs used in simulate request (#74222)\n\nThis commit allows to provide _type field on document ingested in\nsimulate pipeline requests.\n\nrelates main meta issue #51816\nrelates types removal issue #54160","date":"2021-06-21 22:03:19","modifiedFileCount":"5","status":"M","submitter":"Przemyslaw Gomulka"}]
