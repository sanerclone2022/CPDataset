[{"authorTime":"2020-03-27 03:01:07","codes":[{"authorDate":"2020-03-27 03:01:07","commitOrder":1,"curCode":"    public void testBadIncludeExclude() throws IOException {\n        IncludeExclude includeExclude = new IncludeExclude(new RegExp(\"foo\"), null);\n\n        \r\n        AggregationExecutionException e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), null \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n\n        e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), ValueType.STRING \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n\n        e = expectThrows(AggregationExecutionException.class, () -> testBothCases(new MatchNoDocsQuery(), dataset,\n            aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude),\n            agg -> fail(\"test should have failed with exception\"), ValueType.NUMERIC \r\n        ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n    }\n","date":"2020-03-27 03:01:07","endLine":111,"groupId":"39583","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadIncludeExclude","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/31/859a7a4fa04d2c6641647e1cf86252ba9fce12.src","preCode":"    public void testBadIncludeExclude() throws IOException {\n        IncludeExclude includeExclude = new IncludeExclude(new RegExp(\"foo\"), null);\n\n        \r\n        AggregationExecutionException e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), null \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n\n        e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), ValueType.STRING \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n\n        e = expectThrows(AggregationExecutionException.class, () -> testBothCases(new MatchNoDocsQuery(), dataset,\n            aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude),\n            agg -> fail(\"test should have failed with exception\"), ValueType.NUMERIC \r\n        ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/BinaryTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2020-03-27 03:01:07","commitOrder":1,"curCode":"    public void testBadIncludeExclude() throws IOException {\n        IncludeExclude includeExclude = new IncludeExclude(new RegExp(\"foo\"), null);\n\n        \r\n\n        AggregationExecutionException e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(LONG_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), null\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style \" +\n            \"include/exclude settings as they can only be applied to string fields. Use an array of numeric \" +\n            \"values for include/exclude clauses used to filter numeric fields\"));\n\n        e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(LONG_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), ValueType.NUMERIC \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style \" +\n            \"include/exclude settings as they can only be applied to string fields. Use an array of numeric \" +\n            \"values for include/exclude clauses used to filter numeric fields\"));\n\n    }\n","date":"2020-03-27 03:01:07","endLine":124,"groupId":"39583","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadIncludeExclude","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/790b9fa04138fc448c6dc33861078bd074c898.src","preCode":"    public void testBadIncludeExclude() throws IOException {\n        IncludeExclude includeExclude = new IncludeExclude(new RegExp(\"foo\"), null);\n\n        \r\n\n        AggregationExecutionException e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(LONG_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), null\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style \" +\n            \"include/exclude settings as they can only be applied to string fields. Use an array of numeric \" +\n            \"values for include/exclude clauses used to filter numeric fields\"));\n\n        e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(LONG_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), ValueType.NUMERIC \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style \" +\n            \"include/exclude settings as they can only be applied to string fields. Use an array of numeric \" +\n            \"values for include/exclude clauses used to filter numeric fields\"));\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/NumericTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"}],"commitId":"a90c1de8745681356a6516f4f22a8c40f71f6b12","commitMessage":"@@@Add ValuesSource Registry and associated logic (#54281)\n\n* Remove ValuesSourceType argument to ValuesSourceAggregationBuilder (#48638)\n\n* ValuesSourceRegistry Prototype (#48758)\n\n* Remove generics from ValuesSource related classes (#49606)\n\n* fix percentile aggregation tests (#50712)\n\n* Basic thread safety for ValuesSourceRegistry (#50340)\n\n* Remove target value type from ValuesSourceAggregationBuilder (#49943)\n\n* Cleanup default values source type (#50992)\n\n* CoreValuesSourceType no longer implements Writable (#51276)\n\n* Remove genereics & hard coded ValuesSource references from Matrix Stats (#51131)\n\n* Put values source types on fields (#51503)\n\n* Remove VST Any (#51539)\n\n* Rewire terms agg to use new VS registry (#51182)\n\nAlso adds some basic AggTestCases for untested code\npaths (and boilerplate for future tests once the IT are\nconverted over)\n\n* Wire Cardinality aggregation to work with the ValuesSourceRegistry (#51337)\n\n* Wire Percentiles aggregator into new VS framework (#51639)\n\nThis required a bit of a refactor to percentiles itself.  Before. \nthe Builder would switch on the chosen algo to generate an\nalgo-specific factory.  This doesn't work (or at least.  would be\ndifficult) in the new VS framework.\n\nThis refactor consolidates both factories together and introduces\na PercentilesConfig object to act as a standardized way to pass\nalgo-specific parameters through the factory.  This object\nis then used when deciding which kind of aggregator to create\n\nNote: CoreValuesSourceType.HISTOGRAM still lives in core.  and will\nbe moved in a subsequent PR.\n\n* Remove generics and target value type from MultiVSAB (#51647)\n\n* fix checkstyle after merge (#52008)\n\n* Plumb ValuesSourceRegistry through to QuerySearchContext (#51710)\n\n* Convert RareTerms to new VS registry (#52166)\n\n* Wire up Value Count (#52225)\n\n* Wire up Max & Min aggregations (#52219)\n\n* ValuesSource refactoring: Wire up Sum aggregation (#52571)\n\n* ValuesSource refactoring: Wire up SigTerms aggregation (#52590)\n\n* Soft immutability for VSConfig (#52729)\n\n* Unmute testSupportedFieldTypes.  fix Percentiles/Ranks/Terms tests (#52734)\n\nAlso fixes Percentiles which was incorrectly specified to only accept\nnumeric.  but in fact also accepts Boolean and Date (because those are\nnumeric on master - thanks `testSupportedFieldTypes` for catching it!)\n\n* VS refactoring: Wire up stats aggregation (#52891)\n\n* ValuesSource refactoring: Wire up string_stats aggregation (#52875)\n\n* VS refactoring: Wire up median (MAD) aggregation (#52945)\n\n* fix valuesourcetype issue with constant_keyword field (#53041)\n\nthis commit implements `getValuesSourceType` for\nthe ConstantKeyword field type.\n\nmaster was merged into feature/extensible-values-source\nintroducing a new field type that was not implementing\n`getValuesSourceType`.\n\n* ValuesSource refactoring: Wire up Avg aggregation (#52752)\n\n* Wire PercentileRanks aggregator into new VS framework  (#51693)\n\n* Add a VSConfig resolver for aggregations not using the registry (#53038)\n\n* Vs refactor wire up ranges and date ranges (#52918)\n\n* Wire up geo_bounds aggregation to ValuesSourceRegistry (#53034)\n\nThis commit updates the geo_bounds aggregation to depend\non registering itself in the ValuesSourceRegistry\n\nrelates #42949.\n\n* VS refactoring: convert Boxplot to new registry (#53132)\n\n* Wire-up geotile_grid and geohash_grid to ValuesSourceRegistry (#53037)\n\nThis commit updates the geo*_grid aggregations to depend\non registering itself in the ValuesSourceRegistry\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Wire-up geo_centroid agg to ValuesSourceRegistry (#53040)\n\nThis commit updates the geo_centroid aggregation to depend\non registering itself in the ValuesSourceRegistry.\n\nrelates to the values-source refactoring meta issue #42949.\n\n* Fix type tests for Missing aggregation (#53501)\n\n* ValuesSource Refactor: move histo VSType into XPack module (#53298)\n\n- Introduces a new API (`getBareAggregatorRegistrar()`) which allows plugins to register aggregations against existing agg definitions defined in Core.\n- This moves the histogram VSType over to XPack where it belongs. `getHistogramValues()` still remains as a Core concept\n- Moves the histo-specific bits over to xpack (e.g. the actual aggregator logic). This requires extra boilerplate since we need to create a new \"Analytics\" Percentile/Rank aggregators to deal with the histo field. Doubly-so since percentiles/ranks are extra boiler-plate'y... should be much lighter for other aggs\n\n* Wire up DateHistogram to the ValuesSourceRegistry (#53484)\n\n* Vs refactor parser cleanup (#53198)\n\nCo-authored-by: Zachary Tong <polyfractal@elastic.co>\nCo-authored-by: Zachary Tong <zach@elastic.co>\nCo-authored-by: Christos Soulios <1561376+csoulios@users.noreply.github.com>\nCo-authored-by: Tal Levy <JubBoy333@gmail.com>","date":"2020-03-27 03:01:07","modifiedFileCount":"214","status":"B","submitter":"Mark Tozzi"},{"authorTime":"2020-03-27 03:01:07","codes":[{"authorDate":"2020-04-25 02:45:15","commitOrder":2,"curCode":"    public void testBadIncludeExclude() throws IOException {\n        IncludeExclude includeExclude = new IncludeExclude(new RegExp(\"foo\"), null);\n\n        \r\n        AggregationExecutionException e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), null \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n\n        e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), ValueType.STRING \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n    }\n","date":"2020-04-25 02:45:15","endLine":104,"groupId":"39583","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadIncludeExclude","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6b/971164aa8b0a055b2efebdb1c37f0b32cff957.src","preCode":"    public void testBadIncludeExclude() throws IOException {\n        IncludeExclude includeExclude = new IncludeExclude(new RegExp(\"foo\"), null);\n\n        \r\n        AggregationExecutionException e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), null \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n\n        e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), ValueType.STRING \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n\n        e = expectThrows(AggregationExecutionException.class, () -> testBothCases(new MatchNoDocsQuery(), dataset,\n            aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude),\n            agg -> fail(\"test should have failed with exception\"), ValueType.NUMERIC \r\n        ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/BinaryTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-03-27 03:01:07","commitOrder":2,"curCode":"    public void testBadIncludeExclude() throws IOException {\n        IncludeExclude includeExclude = new IncludeExclude(new RegExp(\"foo\"), null);\n\n        \r\n\n        AggregationExecutionException e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(LONG_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), null\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style \" +\n            \"include/exclude settings as they can only be applied to string fields. Use an array of numeric \" +\n            \"values for include/exclude clauses used to filter numeric fields\"));\n\n        e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(LONG_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), ValueType.NUMERIC \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style \" +\n            \"include/exclude settings as they can only be applied to string fields. Use an array of numeric \" +\n            \"values for include/exclude clauses used to filter numeric fields\"));\n\n    }\n","date":"2020-03-27 03:01:07","endLine":124,"groupId":"39583","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadIncludeExclude","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b0/790b9fa04138fc448c6dc33861078bd074c898.src","preCode":"    public void testBadIncludeExclude() throws IOException {\n        IncludeExclude includeExclude = new IncludeExclude(new RegExp(\"foo\"), null);\n\n        \r\n\n        AggregationExecutionException e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(LONG_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), null\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style \" +\n            \"include/exclude settings as they can only be applied to string fields. Use an array of numeric \" +\n            \"values for include/exclude clauses used to filter numeric fields\"));\n\n        e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(LONG_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), ValueType.NUMERIC \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style \" +\n            \"include/exclude settings as they can only be applied to string fields. Use an array of numeric \" +\n            \"values for include/exclude clauses used to filter numeric fields\"));\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/NumericTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"N"}],"commitId":"754e3ca3d6cd5aeea3ce3b1a644bfc5904f320a8","commitMessage":"@@@Aggregation support for Value Scripts that change types (#54830)\n\n","date":"2020-04-25 02:45:15","modifiedFileCount":"7","status":"M","submitter":"Mark Tozzi"},{"authorTime":"2020-08-07 05:14:20","codes":[{"authorDate":"2020-08-07 05:14:20","commitOrder":3,"curCode":"    public void testBadIncludeExclude() throws IOException {\n        IncludeExclude includeExclude = new IncludeExclude(new RegExp(\"foo\"), null);\n\n        \r\n        AggregationExecutionException e = expectThrows(AggregationExecutionException.class,\n            () -> testSearchCase(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), null \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n\n        e = expectThrows(AggregationExecutionException.class,\n            () -> testSearchCase(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), ValueType.STRING \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n    }\n","date":"2020-08-07 05:14:20","endLine":104,"groupId":"105188","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadIncludeExclude","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9f/39e0e896d3a760a194c99a0dbfa17206a35b9c.src","preCode":"    public void testBadIncludeExclude() throws IOException {\n        IncludeExclude includeExclude = new IncludeExclude(new RegExp(\"foo\"), null);\n\n        \r\n        AggregationExecutionException e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), null \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n\n        e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(BINARY_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), ValueType.STRING \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style include/exclude settings as \" +\n            \"they can only be applied to string fields. Use an array of values for include/exclude clauses\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/BinaryTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2020-08-07 05:14:20","commitOrder":3,"curCode":"    public void testBadIncludeExclude() throws IOException {\n        IncludeExclude includeExclude = new IncludeExclude(new RegExp(\"foo\"), null);\n\n        \r\n\n        AggregationExecutionException e = expectThrows(AggregationExecutionException.class,\n            () -> testSearchCase(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(LONG_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), null\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style \" +\n            \"include/exclude settings as they can only be applied to string fields. Use an array of numeric \" +\n            \"values for include/exclude clauses used to filter numeric fields\"));\n\n        e = expectThrows(AggregationExecutionException.class,\n            () -> testSearchCase(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(LONG_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), ValueType.NUMERIC \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style \" +\n            \"include/exclude settings as they can only be applied to string fields. Use an array of numeric \" +\n            \"values for include/exclude clauses used to filter numeric fields\"));\n\n    }\n","date":"2020-08-07 05:14:20","endLine":124,"groupId":"105188","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadIncludeExclude","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/17/4a8a1aed6e8927b5fe1f78ddcd301252d63675.src","preCode":"    public void testBadIncludeExclude() throws IOException {\n        IncludeExclude includeExclude = new IncludeExclude(new RegExp(\"foo\"), null);\n\n        \r\n\n        AggregationExecutionException e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(LONG_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), null\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style \" +\n            \"include/exclude settings as they can only be applied to string fields. Use an array of numeric \" +\n            \"values for include/exclude clauses used to filter numeric fields\"));\n\n        e = expectThrows(AggregationExecutionException.class,\n            () -> testBothCases(new MatchNoDocsQuery(), dataset,\n                aggregation -> aggregation.field(LONG_FIELD).includeExclude(includeExclude).format(\"yyyy-MM-dd\"),\n                agg -> fail(\"test should have failed with exception\"), ValueType.NUMERIC \r\n            ));\n        assertThat(e.getMessage(), equalTo(\"Aggregation [_name] cannot support regular expression style \" +\n            \"include/exclude settings as they can only be applied to string fields. Use an array of numeric \" +\n            \"values for include/exclude clauses used to filter numeric fields\"));\n\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/bucket/terms/NumericTermsAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"5e3ea6eb11c68bdcc9adda51715a6e1fea9186d6","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-07 05:14:20","modifiedFileCount":"73","status":"M","submitter":"Nik Everett"}]
