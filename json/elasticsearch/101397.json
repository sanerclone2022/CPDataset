[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        AtomicGeoPointFieldData leafData = (AtomicGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int doc) throws IOException {\n                if (values.advanceExact(doc)) {\n                    return values.nextValue().getLon();\n                } else {\n                    return 0.0;\n                }\n            }\n        };\n    }\n","date":"2018-04-26 03:22:53","endLine":59,"groupId":"67784","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextleaf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fd/05d92d62350831d968a4debf554802632c11b7.src","preCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        AtomicGeoPointFieldData leafData = (AtomicGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int doc) throws IOException {\n                if (values.advanceExact(doc)) {\n                    return values.nextValue().getLon();\n                } else {\n                    return 0.0;\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/GeoLongitudeValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        AtomicGeoPointFieldData leafData = (AtomicGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int doc) throws IOException {\n                if (values.advanceExact(doc)) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","date":"2018-04-26 03:22:53","endLine":59,"groupId":"67784","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextleaf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0b/16aaf9dcde02af81ddc8991b6098e85f131b0d.src","preCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        AtomicGeoPointFieldData leafData = (AtomicGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int doc) throws IOException {\n                if (values.advanceExact(doc)) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/GeoEmptyValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2020-03-17 20:25:51","codes":[{"authorDate":"2020-03-17 20:25:51","commitOrder":2,"curCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        LeafGeoPointFieldData leafData = (LeafGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int doc) throws IOException {\n                if (values.advanceExact(doc)) {\n                    return values.nextValue().getLon();\n                } else {\n                    return 0.0;\n                }\n            }\n        };\n    }\n","date":"2020-03-17 20:25:51","endLine":59,"groupId":"67784","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextleaf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/8b/2c5d83c02570da070da0b2dd1b5b234c34a388.src","preCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        AtomicGeoPointFieldData leafData = (AtomicGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int doc) throws IOException {\n                if (values.advanceExact(doc)) {\n                    return values.nextValue().getLon();\n                } else {\n                    return 0.0;\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/GeoLongitudeValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2020-03-17 20:25:51","commitOrder":2,"curCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        LeafGeoPointFieldData leafData = (LeafGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int doc) throws IOException {\n                if (values.advanceExact(doc)) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","date":"2020-03-17 20:25:51","endLine":59,"groupId":"67784","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextleaf)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/29/49e1dd9287a69df4cd18bbb11cc2b2145e5a27.src","preCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        AtomicGeoPointFieldData leafData = (AtomicGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int doc) throws IOException {\n                if (values.advanceExact(doc)) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/GeoEmptyValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"3e607d9e93c6319fcd606714aabca4af91f133d3","commitMessage":"@@@Rename AtomicFieldData to LeafFieldData (#53554)\n\nThis conforms with lucene's LeafReader naming convention.  and\nmatches other per-segment structures in elasticsearch.","date":"2020-03-17 20:25:51","modifiedFileCount":"59","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-03-23 22:47:42","codes":[{"authorDate":"2020-03-23 22:47:42","commitOrder":3,"curCode":"    public DoubleValues getValues(LeafReaderContext leaf, DoubleValues scores) {\n        LeafGeoPointFieldData leafData = (LeafGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return DoubleValues.withDefault(new DoubleValues() {\n            @Override\n            public double doubleValue() throws IOException {\n                return values.nextValue().getLon();\n            }\n\n            @Override\n            public boolean advanceExact(int doc) throws IOException {\n                return values.advanceExact(doc);\n            }\n        }, 0.0);\n    }\n","date":"2020-03-23 22:47:42","endLine":54,"groupId":"67144","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(LeafReaderContextleaf@DoubleValuesscores)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9b/d285f8da871bdc556ce15d48815afae869bedd.src","preCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        LeafGeoPointFieldData leafData = (LeafGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int doc) throws IOException {\n                if (values.advanceExact(doc)) {\n                    return values.nextValue().getLon();\n                } else {\n                    return 0.0;\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/GeoLongitudeValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2020-03-23 22:47:42","commitOrder":3,"curCode":"    public DoubleValues getValues(LeafReaderContext leaf, DoubleValues scores) {\n        LeafGeoPointFieldData leafData = (LeafGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return DoubleValues.withDefault(new DoubleValues() {\n            @Override\n            public double doubleValue() {\n                return 1;\n            }\n\n            @Override\n            public boolean advanceExact(int doc) throws IOException {\n                return values.advanceExact(doc);\n            }\n        }, 0);\n    }\n","date":"2020-03-23 22:47:42","endLine":54,"groupId":"18309","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(LeafReaderContextleaf@DoubleValuesscores)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5e/3a20f532e7f649bf2472344fe39bfd821535fd.src","preCode":"    public FunctionValues getValues(Map context, LeafReaderContext leaf) throws IOException {\n        LeafGeoPointFieldData leafData = (LeafGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return new DoubleDocValues(this) {\n            @Override\n            public double doubleVal(int doc) throws IOException {\n                if (values.advanceExact(doc)) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            }\n        };\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/GeoEmptyValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"b2a6bd80bcb5533fbf6a605e7294f36b8aca7518","commitMessage":"@@@lang-expressions should use DoubleValuesSource.  not ValueSource (#53661)\n\nDoubleValuesSource is the type-safe replacement for ValueSource in the lucene\ncore. Most of elasticsearch has moved to use these.  but lang-expressions is still\nusing the old version. This commit migrates lang-expressions as well.","date":"2020-03-23 22:47:42","modifiedFileCount":"15","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-03-31 17:49:26","codes":[{"authorDate":"2020-03-31 17:49:26","commitOrder":4,"curCode":"    public DoubleValues getValues(LeafReaderContext leaf, DoubleValues scores) {\n        LeafGeoPointFieldData leafData = (LeafGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return new DoubleValues() {\n            @Override\n            public double doubleValue() throws IOException {\n                return values.nextValue().getLon();\n            }\n\n            @Override\n            public boolean advanceExact(int doc) throws IOException {\n                return values.advanceExact(doc);\n            }\n        };\n    }\n","date":"2020-03-31 17:49:26","endLine":54,"groupId":"101397","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(LeafReaderContextleaf@DoubleValuesscores)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/85/bb6d4a31134f669a8dfefe60b086c2c27336d0.src","preCode":"    public DoubleValues getValues(LeafReaderContext leaf, DoubleValues scores) {\n        LeafGeoPointFieldData leafData = (LeafGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return DoubleValues.withDefault(new DoubleValues() {\n            @Override\n            public double doubleValue() throws IOException {\n                return values.nextValue().getLon();\n            }\n\n            @Override\n            public boolean advanceExact(int doc) throws IOException {\n                return values.advanceExact(doc);\n            }\n        }, 0.0);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/GeoLongitudeValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2020-03-31 17:49:26","commitOrder":4,"curCode":"    public DoubleValues getValues(LeafReaderContext leaf, DoubleValues scores) {\n        LeafGeoPointFieldData leafData = (LeafGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return new DoubleValues() {\n            @Override\n            public double doubleValue() {\n                return 1;\n            }\n\n            @Override\n            public boolean advanceExact(int doc) throws IOException {\n                return values.advanceExact(doc);\n            }\n        };\n    }\n","date":"2020-03-31 17:49:26","endLine":54,"groupId":"101397","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(LeafReaderContextleaf@DoubleValuesscores)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/89/60fe1f82cb9e7f917e51e773bf02e94782776b.src","preCode":"    public DoubleValues getValues(LeafReaderContext leaf, DoubleValues scores) {\n        LeafGeoPointFieldData leafData = (LeafGeoPointFieldData) fieldData.load(leaf);\n        final MultiGeoPointValues values = leafData.getGeoPointValues();\n        return DoubleValues.withDefault(new DoubleValues() {\n            @Override\n            public double doubleValue() {\n                return 1;\n            }\n\n            @Override\n            public boolean advanceExact(int doc) throws IOException {\n                return values.advanceExact(doc);\n            }\n        }, 0);\n    }\n","realPath":"modules/lang-expression/src/main/java/org/elasticsearch/script/expression/GeoEmptyValueSource.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"eeab09891e91f215157649a43effdca6fb380313","commitMessage":"@@@Don't double-wrap values (#54432)\n\nAfter commit #53661 converted the lang-expressions module to using\nDoubleValuesSource.  we've seen a performance regression for expressions\nthat use geopoints. Some investigation suggests that this may be due to\nGeoLatitudeValueSource and GeoLongitudeValueSource wrapping their\nper-document values in a DoubleValues.withDefault() class. Values exposed\nvia expressions already have a '0' default value.  so this extra wrapping is\nunnecessary.  and is directly on the hot path. This commit removes the extra\nwrapping.","date":"2020-03-31 17:49:26","modifiedFileCount":"5","status":"M","submitter":"Alan Woodward"}]
