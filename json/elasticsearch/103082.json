[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testDynamicTrue() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"true\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), equalTo(\"value2\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":81,"groupId":"39116","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDynamicTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/923b5a6559b3c04973d69991a6df48107bd5e3.src","preCode":"    public void testDynamicTrue() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"true\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), equalTo(\"value2\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testDynamicFalse() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"false\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), nullValue());\n    }\n","date":"2018-04-26 03:22:53","endLine":103,"groupId":"39116","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDynamicFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/923b5a6559b3c04973d69991a6df48107bd5e3.src","preCode":"    public void testDynamicFalse() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"false\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser().parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-12-25 03:06:50","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testDynamicTrue() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"true\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), equalTo(\"value2\"));\n    }\n","date":"2018-12-25 03:06:50","endLine":83,"groupId":"16372","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDynamicTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/56/e6f5e4c6b04c431ec6406ba1e2b1d33672b8b2.src","preCode":"    public void testDynamicTrue() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"true\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), equalTo(\"value2\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testDynamicFalse() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"false\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), nullValue());\n    }\n","date":"2018-12-25 03:06:50","endLine":106,"groupId":"16372","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDynamicFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/56/e6f5e4c6b04c431ec6406ba1e2b1d33672b8b2.src","preCode":"    public void testDynamicFalse() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"false\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"7580d9d925d864b25466d693637b3bd3092d44cf","commitMessage":"@@@Make SourceToParse immutable (#36971)\n\nToday the routing of a SourceToParse is assigned in a separate step\nafter the object is created. We can easily forget to set the routing.\nWith this commit.  the routing must be provided in the constructor of\nSourceToParse.\n\nRelates #36921","date":"2018-12-25 03:06:50","modifiedFileCount":"66","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testDynamicTrue() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"true\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), equalTo(\"value2\"));\n    }\n","date":"2019-10-15 16:05:29","endLine":84,"groupId":"50014","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDynamicTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f5/1f2be635808f44100e5d3c31c35a0e42e68dc7.src","preCode":"    public void testDynamicTrue() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"true\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), equalTo(\"value2\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testDynamicFalse() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"false\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), nullValue());\n    }\n","date":"2019-10-15 16:05:29","endLine":107,"groupId":"50014","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDynamicFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f5/1f2be635808f44100e5d3c31c35a0e42e68dc7.src","preCode":"    public void testDynamicFalse() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"false\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-09-14 22:32:35","codes":[{"authorDate":"2020-09-14 22:32:35","commitOrder":4,"curCode":"    public void testDynamicTrue() throws IOException {\n        DocumentMapper defaultMapper = createDocumentMapper(dynamicMapping(\"true\",\n            b -> b.startObject(\"field1\").field(\"type\", \"text\").endObject()));\n\n        ParsedDocument doc = defaultMapper.parse(source(b -> {\n            b.field(\"field1\", \"value1\");\n            b.field(\"field2\", \"value2\");\n        }));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), equalTo(\"value2\"));\n    }\n","date":"2020-09-14 22:32:35","endLine":59,"groupId":"50064","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDynamicTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/de/8bb034b500089a09b97bf03fc2360a32029655.src","preCode":"    public void testDynamicTrue() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"true\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), equalTo(\"value2\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-09-14 22:32:35","commitOrder":4,"curCode":"    public void testDynamicFalse() throws IOException {\n\n        DocumentMapper defaultMapper = createDocumentMapper(dynamicMapping(\"false\",\n            b -> b.startObject(\"field1\").field(\"type\", \"text\").endObject()));\n\n        ParsedDocument doc = defaultMapper.parse(source(b -> {\n            b.field(\"field1\", \"value1\");\n            b.field(\"field2\", \"value2\");\n        }));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), nullValue());\n    }\n","date":"2020-09-14 22:32:35","endLine":73,"groupId":"50064","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDynamicFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/de/8bb034b500089a09b97bf03fc2360a32029655.src","preCode":"    public void testDynamicFalse() throws IOException {\n        String mapping = Strings.toString(jsonBuilder().startObject().startObject(\"type\")\n                .field(\"dynamic\", \"false\")\n                .startObject(\"properties\")\n                .startObject(\"field1\").field(\"type\", \"text\").endObject()\n                .endObject()\n                .endObject().endObject());\n\n        DocumentMapper defaultMapper = createIndex(\"test\").mapperService().documentMapperParser()\n            .parse(\"type\", new CompressedXContent(mapping));\n\n        ParsedDocument doc = defaultMapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(jsonBuilder()\n                        .startObject()\n                        .field(\"field1\", \"value1\")\n                        .field(\"field2\", \"value2\")\n                        .endObject()),\n                XContentType.JSON));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"8447b7a0e6cc47ff065846279ebe6ee4228e2da0","commitMessage":"@@@Cut over more mapping tests to MapperServiceTestCase (#62312)\n\nShaves a few more seconds off the build.","date":"2020-09-14 22:32:35","modifiedFileCount":"6","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-12-08 22:29:24","codes":[{"authorDate":"2020-12-08 22:29:24","commitOrder":5,"curCode":"    public void testDynamicTrue() throws IOException {\n        DocumentMapper defaultMapper = createDocumentMapper(dynamicMapping(\"true\",\n            b -> b.startObject(\"field1\").field(\"type\", \"text\").endObject()));\n\n        ParsedDocument doc = defaultMapper.parse(source(b -> {\n            b.field(\"field1\", \"value1\");\n            b.field(\"field2\", \"value2\");\n        }));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), equalTo(\"value2\"));\n\n        assertEquals(\"{\\\"_doc\\\":{\\\"dynamic\\\":\\\"true\\\",\\\"\" +\n                \"properties\\\":{\\\"field2\\\":{\\\"type\\\":\\\"text\\\",\\\"fields\\\":{\\\"keyword\\\":{\\\"type\\\":\\\"keyword\\\",\\\"ignore_above\\\":256}}}}}}\",\n            Strings.toString(doc.dynamicMappingsUpdate()));\n    }\n","date":"2020-12-08 22:29:24","endLine":71,"groupId":"103082","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDynamicTrue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/df8776294cee309c2032783198d02cce53c4da.src","preCode":"    public void testDynamicTrue() throws IOException {\n        DocumentMapper defaultMapper = createDocumentMapper(dynamicMapping(\"true\",\n            b -> b.startObject(\"field1\").field(\"type\", \"text\").endObject()));\n\n        ParsedDocument doc = defaultMapper.parse(source(b -> {\n            b.field(\"field1\", \"value1\");\n            b.field(\"field2\", \"value2\");\n        }));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), equalTo(\"value2\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2020-12-08 22:29:24","commitOrder":5,"curCode":"    public void testDynamicFalse() throws IOException {\n        DocumentMapper defaultMapper = createDocumentMapper(dynamicMapping(\"false\",\n            b -> b.startObject(\"field1\").field(\"type\", \"text\").endObject()));\n\n        ParsedDocument doc = defaultMapper.parse(source(b -> {\n            b.field(\"field1\", \"value1\");\n            b.field(\"field2\", \"value2\");\n        }));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), nullValue());\n\n        assertNull(doc.dynamicMappingsUpdate());\n    }\n","date":"2020-12-08 22:29:24","endLine":103,"groupId":"103082","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDynamicFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/13/df8776294cee309c2032783198d02cce53c4da.src","preCode":"    public void testDynamicFalse() throws IOException {\n\n        DocumentMapper defaultMapper = createDocumentMapper(dynamicMapping(\"false\",\n            b -> b.startObject(\"field1\").field(\"type\", \"text\").endObject()));\n\n        ParsedDocument doc = defaultMapper.parse(source(b -> {\n            b.field(\"field1\", \"value1\");\n            b.field(\"field2\", \"value2\");\n        }));\n\n        assertThat(doc.rootDoc().get(\"field1\"), equalTo(\"value1\"));\n        assertThat(doc.rootDoc().get(\"field2\"), nullValue());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/DynamicMappingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"e144471b3e607cc8b6b3c7a0e7f4706a4bdb9381","commitMessage":"@@@Introduce dynamic runtime setting (#65489)\n\nThe dynamic:runtime setting is similar to dynamic:true in that it dynamically defines fields based on values parsed from incoming documents. Though instead of defining leaf fields under properties.  it defines them as runtime fields under the runtime section. This is useful in scenarios where search speed can be traded for storage costs.  given that runtime fields are loaded at runtime rather than indexed.\n","date":"2020-12-08 22:29:24","modifiedFileCount":"31","status":"M","submitter":"Luca Cavanna"}]
