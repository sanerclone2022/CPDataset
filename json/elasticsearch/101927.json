[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testIndexOptionsStrict() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetaData.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetaData.builder(\"barbaz\")));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(4, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":137,"groupId":"53150","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexOptionsStrict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/30bd617af631ed9d1d8e707dae59c4b00577ec.src","preCode":"    public void testIndexOptionsStrict() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetaData.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetaData.builder(\"barbaz\")));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(4, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testIndexOptionsLenient() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetaData.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetaData.builder(\"barbaz\")));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n        IndicesOptions lenientExpand = IndicesOptions.fromOptions(true, true, true, true);\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.lenientExpandOpen(), lenientExpand};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"bar\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(2, results.length);\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, lenientExpand);\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(Arrays.toString(results), 4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context,  \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, lenientExpand);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":204,"groupId":"22367","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexOptionsLenient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/30bd617af631ed9d1d8e707dae59c4b00577ec.src","preCode":"    public void testIndexOptionsLenient() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetaData.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetaData.builder(\"barbaz\")));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n        IndicesOptions lenientExpand = IndicesOptions.fromOptions(true, true, true, true);\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.lenientExpandOpen(), lenientExpand};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"bar\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(2, results.length);\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, lenientExpand);\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(Arrays.toString(results), 4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context,  \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, lenientExpand);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-03-01 01:35:33","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testIndexOptionsStrict() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetaData.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetaData.builder(\"barbaz\")));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(4, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","date":"2018-04-26 03:22:53","endLine":137,"groupId":"53150","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexOptionsStrict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/05/30bd617af631ed9d1d8e707dae59c4b00577ec.src","preCode":"    public void testIndexOptionsStrict() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetaData.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetaData.builder(\"barbaz\")));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(4, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2019-03-01 01:35:33","commitOrder":2,"curCode":"    public void testIndexOptionsLenient() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetaData.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetaData.builder(\"barbaz\")));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{IndicesOptions.lenientExpandOpen(), IndicesOptions.lenientExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"bar\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(2, results.length);\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(Arrays.toString(results), 4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context,  \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","date":"2019-03-01 01:35:33","endLine":214,"groupId":"22367","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexOptionsLenient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/57/1843126f98c2747f4e817b88ea04bcd915959a.src","preCode":"    public void testIndexOptionsLenient() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetaData.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetaData.builder(\"barbaz\")));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n        IndicesOptions lenientExpand = IndicesOptions.fromOptions(true, true, true, true);\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.lenientExpandOpen(), lenientExpand};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"bar\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(2, results.length);\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, lenientExpand);\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(Arrays.toString(results), 4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context,  \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, lenientExpand);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"309a3e4ccbcdfcd830621a92d6e67af929123605","commitMessage":"@@@Add support for replicating closed indices (#39499)\n\nBefore this change.  closed indexes were simply not replicated. It was therefore \npossible to close an index and then decommission a data node without knowing \nthat this data node contained shards of the closed index.  potentially leading to \ndata loss. Shards of closed indices were not completely taken into account when \nbalancing the shards within the cluster.  or automatically replicated through shard \ncopies.  and they were not easily movable from node A to node B using APIs like \nCluster Reroute without being fully reopened and closed again.\n\nThis commit changes the logic executed when closing an index.  so that its shards \nare not just removed and forgotten but are instead reinitialized and reallocated on \ndata nodes using an engine implementation which does not allow searching or\n indexing.  which has a low memory overhead (compared with searchable/indexable \nopened shards) and which allows shards to be recovered from peer or promoted \nas primaries when needed.\n\nThis new closing logic is built on top of the new Close Index API introduced in \n6.7.0 (#37359). Some pre-closing sanity checks are executed on the shards before \nclosing them.  and closing an index on a 8.0 cluster will reinitialize the index shards \nand therefore impact the cluster health.\n\nSome APIs have been adapted to make them work with closed indices:\n- Cluster Health API\n- Cluster Reroute API\n- Cluster Allocation Explain API\n- Recovery API\n- Cat Indices\n- Cat Shards\n- Cat Health\n- Cat Recovery\n\nThis commit contains all the following changes (most recent first):\n* c6c42a1 Adapt NoOpEngineTests after #39006\n* 3f9993d Wait for shards to be active after closing indices (#38854)\n* 5e7a428 Adapt the Cluster Health API to closed indices (#39364)\n* 3e61939 Adapt CloseFollowerIndexIT for replicated closed indices (#38767)\n* 71f5c34 Recover closed indices after a full cluster restart (#39249)\n* 4db7fd9 Adapt the Recovery API for closed indices (#38421)\n* 4fd1bb2 Adapt more tests suites to closed indices (#39186)\n* 0519016 Add replica to primary promotion test for closed indices (#39110)\n* b756f6c Test the Cluster Shard Allocation Explain API with closed indices (#38631)\n* c484c66 Remove index routing table of closed indices in mixed versions clusters (#38955)\n* 00f1828 Mute CloseFollowerIndexIT.testCloseAndReopenFollowerIndex()\n* e845b0a Do not schedule Refresh/Translog/GlobalCheckpoint tasks for closed indices (#38329)\n* cf9a015 Adapt testIndexCanChangeCustomDataPath for replicated closed indices (#38327)\n* b9becdd Adapt testPendingTasks() for replicated closed indices (#38326)\n* 02cc730 Allow shards of closed indices to be replicated as regular shards (#38024)\n* e53a9be Fix compilation error in IndexShardIT after merge with master\n* cae4155 Relax NoOpEngine constraints (#37413)\n* 54d110b [RCI] Adapt NoOpEngine to latest FrozenEngine changes\n* c63fd69 [RCI] Add NoOpEngine for closed indices (#33903)\n\nRelates to #33888","date":"2019-03-01 01:35:33","modifiedFileCount":"57","status":"M","submitter":"Tanguy Leroux"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testIndexOptionsStrict() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(4, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":162,"groupId":"53150","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexOptionsStrict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/e0c2bf71209309a8f8fa82ff1ea045183631d8.src","preCode":"    public void testIndexOptionsStrict() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetaData.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetaData.builder(\"barbaz\")));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(4, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testIndexOptionsLenient() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{IndicesOptions.lenientExpandOpen(), IndicesOptions.lenientExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"bar\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(2, results.length);\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(Arrays.toString(results), 4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context,  \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","date":"2020-04-01 03:52:01","endLine":228,"groupId":"22367","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexOptionsLenient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/bb/e0c2bf71209309a8f8fa82ff1ea045183631d8.src","preCode":"    public void testIndexOptionsLenient() {\n        MetaData.Builder mdBuilder = MetaData.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetaData.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetaData.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetaData.builder(\"barbaz\")));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metaData(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{IndicesOptions.lenientExpandOpen(), IndicesOptions.lenientExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"bar\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(2, results.length);\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(Arrays.toString(results), 4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context,  \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-10-07 01:13:48","codes":[{"authorDate":"2020-10-07 01:13:48","commitOrder":4,"curCode":"    public void testIndexOptionsStrict() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options, false);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context =\n            new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen(), false);\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand(), false);\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(4, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen(), false);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand(), false);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","date":"2020-10-07 01:13:48","endLine":175,"groupId":"38746","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexOptionsStrict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ad/e851cf15f9d774c9a6b6cc8eff4505feab4ca7.src","preCode":"    public void testIndexOptionsStrict() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(4, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2020-10-07 01:13:48","commitOrder":4,"curCode":"    public void testIndexOptionsLenient() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{IndicesOptions.lenientExpandOpen(), IndicesOptions.lenientExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options, false);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"bar\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(2, results.length);\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context =\n            new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen(), false);\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand(), false);\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(Arrays.toString(results), 4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen(), false);\n        results = indexNameExpressionResolver.concreteIndexNames(context,  \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand(), false);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","date":"2020-10-07 01:13:48","endLine":242,"groupId":"45654","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexOptionsLenient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ad/e851cf15f9d774c9a6b6cc8eff4505feab4ca7.src","preCode":"    public void testIndexOptionsLenient() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{IndicesOptions.lenientExpandOpen(), IndicesOptions.lenientExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"bar\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(2, results.length);\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(Arrays.toString(results), 4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen());\n        results = indexNameExpressionResolver.concreteIndexNames(context,  \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand());\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"}],"commitId":"91f4b58bf71249cf81562bd6069c64aafa46591b","commitMessage":"@@@Deprecate REST access to System Indices (#60945)\n\nThis PR adds deprecation warnings when accessing System Indices via the REST layer. At this time.  these warnings are only enabled for Snapshot builds by default.  to allow projects external to Elasticsearch additional time to adjust their access patterns.\n\nDeprecation warnings will be triggered by all REST requests which access registered System Indices.  except for purpose-specific APIs which access System Indices as an implementation detail a few specific APIs which will continue to allow access to system indices by default:\n\n- `GET _cluster/health`\n- `GET {index}/_recovery`\n- `GET _cluster/allocation/explain`\n- `GET _cluster/state`\n- `POST _cluster/reroute`\n- `GET {index}/_stats`\n- `GET {index}/_segments`\n- `GET {index}/_shard_stores`\n- `GET _cat/[indices. aliases. health. recovery. shards. segments]`\n\nDeprecation warnings for accessing system indices take the form:\n```\nthis request accesses system indices: [.some_system_index].  but in a future major version.  direct access to system indices will be prevented by default\n```","date":"2020-10-07 01:13:48","modifiedFileCount":"132","status":"M","submitter":"Gordon Brown"},{"authorTime":"2021-03-02 01:38:53","codes":[{"authorDate":"2021-03-02 01:38:53","commitOrder":5,"curCode":"    public void testIndexOptionsStrict() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options, NONE);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context =\n            new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen(), NONE);\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand(), NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(4, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen(), NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand(), NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","date":"2021-03-02 01:38:53","endLine":175,"groupId":"38746","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexOptionsStrict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/27ae7a39ac0b0bfc35eba14cfc4bd7eb2cde12.src","preCode":"    public void testIndexOptionsStrict() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options, false);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context =\n            new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen(), false);\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand(), false);\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(4, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen(), false);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand(), false);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2021-03-02 01:38:53","commitOrder":5,"curCode":"    public void testIndexOptionsLenient() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{IndicesOptions.lenientExpandOpen(), IndicesOptions.lenientExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options, NONE);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"bar\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(2, results.length);\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context =\n            new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen(), NONE);\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand(), NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(Arrays.toString(results), 4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen(), NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context,  \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand(), NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","date":"2021-03-02 01:38:53","endLine":242,"groupId":"34299","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexOptionsLenient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/27ae7a39ac0b0bfc35eba14cfc4bd7eb2cde12.src","preCode":"    public void testIndexOptionsLenient() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{IndicesOptions.lenientExpandOpen(), IndicesOptions.lenientExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options, false);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"bar\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(2, results.length);\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context =\n            new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen(), false);\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand(), false);\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(Arrays.toString(results), 4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen(), false);\n        results = indexNameExpressionResolver.concreteIndexNames(context,  \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand(), false);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"}],"commitId":"1487a5a991e78dc17eebb349b105409b51b63b36","commitMessage":"@@@Introduce system index types including external (#68919)\n\nThis commit introduces system index types that will be used to\ndifferentiate behavior. Previously system indices were all treated the\nsame regardless of whether they belonged to Elasticsearch.  a stack\ncomponent.  or one of our solutions. Upon further discussion and\nanalysis this decision was not in the best interest of the various\nteams and instead a new type of system index was needed. These system\nindices will be referred to as external system indices. Within external\nsystem indices.  an option exists for these indices to be managed by\nElasticsearch or to be managed by the external product.\n\nIn order to represent this within Elasticsearch.  each system index will\nhave a type and this type will be used to control behavior.\n\nCloses #67383","date":"2021-03-02 01:38:53","modifiedFileCount":"87","status":"M","submitter":"Jay Modi"},{"authorTime":"2021-06-25 02:13:57","codes":[{"authorDate":"2021-06-25 02:13:57","commitOrder":6,"curCode":"    public void testIndexOptionsStrict() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context =\n                new IndexNameExpressionResolver.Context(state, options, SystemIndexAccessLevel.NONE);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context =\n            new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen(), SystemIndexAccessLevel.NONE);\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand(), SystemIndexAccessLevel.NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(4, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen(), SystemIndexAccessLevel.NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand(), SystemIndexAccessLevel.NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","date":"2021-06-25 02:13:57","endLine":181,"groupId":"101927","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexOptionsStrict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c1/c9332a0ec071e8eb49201a8b9c88d0a8881bff.src","preCode":"    public void testIndexOptionsStrict() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{ IndicesOptions.strictExpandOpen(), IndicesOptions.strictExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options, NONE);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            {\n                IndexNotFoundException infe = expectThrows(IndexNotFoundException.class,\n                        () -> indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\"));\n                assertThat(infe.getIndex().getName(), equalTo(\"bar\"));\n            }\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context =\n            new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen(), NONE);\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand(), NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(4, results.length);\n\n        results = indexNameExpressionResolver.concreteIndexNames(context, (String[])null);\n        assertEquals(4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpandOpen(), NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.strictExpand(), NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2021-06-25 02:13:57","commitOrder":6,"curCode":"    public void testIndexOptionsLenient() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{IndicesOptions.lenientExpandOpen(), IndicesOptions.lenientExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context =\n                new IndexNameExpressionResolver.Context(state, options, SystemIndexAccessLevel.NONE);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"bar\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(2, results.length);\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context =\n            new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen(), SystemIndexAccessLevel.NONE);\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand(), SystemIndexAccessLevel.NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(Arrays.toString(results), 4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen(), SystemIndexAccessLevel.NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context,  \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand(), SystemIndexAccessLevel.NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","date":"2021-06-25 02:13:57","endLine":249,"groupId":"101927","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexOptionsLenient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c1/c9332a0ec071e8eb49201a8b9c88d0a8881bff.src","preCode":"    public void testIndexOptionsLenient() {\n        Metadata.Builder mdBuilder = Metadata.builder()\n                .put(indexBuilder(\"foo\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foobar\").putAlias(AliasMetadata.builder(\"foofoobar\")))\n                .put(indexBuilder(\"foofoo-closed\").state(IndexMetadata.State.CLOSE))\n                .put(indexBuilder(\"foofoo\").putAlias(AliasMetadata.builder(\"barbaz\")));\n        ClusterState state = ClusterState.builder(new ClusterName(\"_name\")).metadata(mdBuilder).build();\n\n        IndicesOptions[] indicesOptions = new IndicesOptions[]{IndicesOptions.lenientExpandOpen(), IndicesOptions.lenientExpand()};\n        for (IndicesOptions options : indicesOptions) {\n            IndexNameExpressionResolver.Context context = new IndexNameExpressionResolver.Context(state, options, NONE);\n            String[] results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"bar\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoobar\");\n            assertEquals(2, results.length);\n            assertEquals(new HashSet<>(Arrays.asList(\"foo\", \"foobar\")),\n                         new HashSet<>(Arrays.asList(results)));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"foobar\");\n            assertEquals(2, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\", \"foobar\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"barbaz\", \"bar\");\n            assertEquals(1, results.length);\n            assertThat(results, arrayContainingInAnyOrder(\"foofoo\"));\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"baz*\");\n            assertThat(results, emptyArray());\n\n            results = indexNameExpressionResolver.concreteIndexNames(context, \"foo\", \"baz*\");\n            assertEquals(1, results.length);\n            assertEquals(\"foo\", results[0]);\n        }\n\n        IndexNameExpressionResolver.Context context =\n            new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen(), NONE);\n        String[] results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(3, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand(), NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, Strings.EMPTY_ARRAY);\n        assertEquals(Arrays.toString(results), 4, results.length);\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpandOpen(), NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context,  \"foofoo*\");\n        assertEquals(3, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\"));\n\n        context = new IndexNameExpressionResolver.Context(state, IndicesOptions.lenientExpand(), NONE);\n        results = indexNameExpressionResolver.concreteIndexNames(context, \"foofoo*\");\n        assertEquals(4, results.length);\n        assertThat(results, arrayContainingInAnyOrder(\"foo\", \"foobar\", \"foofoo\", \"foofoo-closed\"));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/metadata/IndexNameExpressionResolverTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"d4afd6a216ff786da2887afe388d9638816927ed","commitMessage":"@@@Protect newly introduced system indices fully (#74186)\n\nThis change updates the way we handle net new system indices.  which are\nthose that have been newly introduced and do not require any BWC\nguarantees around non-system access. These indices will not be included\nin wildcard expansions for user searches and operations. Direct access\nto these indices will also not be allowed for user searches.\n\nThe first index of this type is the GeoIp index.  which this change sets\nthe new flag on.\n\nCloses #72572","date":"2021-06-25 02:13:57","modifiedFileCount":"17","status":"M","submitter":"Jay Modi"}]
