[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testDisableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                    .field(\"type\", \"text\")\n                    .field(\"norms\", false)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","date":"2018-04-26 03:22:53","endLine":180,"groupId":"67714","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/45/9fcb1d3773139d00256a94035ee5a2d46ce235.src","preCode":"    public void testDisableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                    .field(\"type\", \"text\")\n                    .field(\"norms\", false)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testEnableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"norms\", true).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","date":"2018-04-26 03:22:53","endLine":385,"groupId":"2948","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ff/f255970113d6352cfe7599e720d79e009e2553.src","preCode":"    public void testEnableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"norms\", true).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-12-25 03:06:50","codes":[{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testDisableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                    .field(\"type\", \"text\")\n                    .field(\"norms\", false)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","date":"2018-12-25 03:06:50","endLine":192,"groupId":"67714","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ac/d6c9ee6f80b0cfabd08dd1fe7a1f39aef35268.src","preCode":"    public void testDisableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                    .field(\"type\", \"text\")\n                    .field(\"norms\", false)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"},{"authorDate":"2018-12-25 03:06:50","commitOrder":2,"curCode":"    public void testEnableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"norms\", true).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","date":"2018-12-25 03:06:50","endLine":339,"groupId":"2948","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/10/3098d5a462055c81252cbf2867d55f131907a8.src","preCode":"    public void testEnableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"norms\", true).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(SourceToParse.source(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"7580d9d925d864b25466d693637b3bd3092d44cf","commitMessage":"@@@Make SourceToParse immutable (#36971)\n\nToday the routing of a SourceToParse is assigned in a separate step\nafter the object is created. We can easily forget to set the routing.\nWith this commit.  the routing must be provided in the constructor of\nSourceToParse.\n\nRelates #36921","date":"2018-12-25 03:06:50","modifiedFileCount":"66","status":"M","submitter":"Nhat Nguyen"},{"authorTime":"2019-10-15 16:05:29","codes":[{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testDisableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                    .field(\"type\", \"text\")\n                    .field(\"norms\", false)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","date":"2019-10-15 16:05:29","endLine":203,"groupId":"67714","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/9ae02f8fcb9673ac3cccacd30e5e01ad3378ad.src","preCode":"    public void testDisableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                    .field(\"type\", \"text\")\n                    .field(\"norms\", false)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2019-10-15 16:05:29","commitOrder":3,"curCode":"    public void testEnableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"norms\", true).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","date":"2019-10-15 16:05:29","endLine":339,"groupId":"2948","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/db71bc07bb7375e415806b9bc91d4ca652c687.src","preCode":"    public void testEnableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"norms\", true).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"type\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"6531369f11d159896957b75a7eae0b7da214d01a","commitMessage":"@@@Don't persist type information to translog (#47229)\n\nWe no longer need to store type information in the translog.  given that an index\ncan only have a single type.\n\nRelates to #41059","date":"2019-10-15 16:05:29","modifiedFileCount":"100","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-14 23:15:19","codes":[{"authorDate":"2020-01-14 23:15:19","commitOrder":4,"curCode":"    public void testDisableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\")\n                    .field(\"type\", \"text\")\n                    .field(\"norms\", false)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","date":"2020-01-14 23:15:19","endLine":203,"groupId":"67714","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6d/73ed8cfb1bcf66419d4bfa75625590eaa56b4a.src","preCode":"    public void testDisableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                    .field(\"type\", \"text\")\n                    .field(\"norms\", false)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2020-01-14 23:15:19","commitOrder":4,"curCode":"    public void testEnableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"norms\", true).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","date":"2020-01-14 23:15:19","endLine":339,"groupId":"2948","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/63/0113daf621f26206e00138b0b0a00c4a227d3f.src","preCode":"    public void testEnableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"norms\", true).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"774bfb5e22389a923678ed8013e8cd284703d5dd","commitMessage":"@@@Don't use user-supplied type when building DocumentMapper (#50960)\n\nThis commit begins the process of removing types from the document parsing\ninfrastructure. Initially.  we just ignore the user-supplied type after it has been\nremoved from the mapping json structure.  and always supply _doc as the name\nof the root parser.\n\nThe production code change is very small here.  and most of the changeset\nconsists of alterations to Mapper test code that was passing in non-standard\ntype names and checking serialization.\n\nRelates to #41059","date":"2020-01-14 23:15:19","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-20 19:14:49","codes":[{"authorDate":"2020-01-20 19:14:49","commitOrder":5,"curCode":"    public void testDisableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                    .field(\"type\", \"text\")\n                    .field(\"norms\", false)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","date":"2020-01-20 19:14:49","endLine":203,"groupId":"67714","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/53/9d8bbdeaf593e9f04e7599c6eb1c3bddd79f95.src","preCode":"    public void testDisableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n                .startObject(\"properties\").startObject(\"field\")\n                    .field(\"type\", \"text\")\n                    .field(\"norms\", false)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2020-01-20 19:14:49","commitOrder":5,"curCode":"    public void testEnableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"norms\", true).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","date":"2020-01-20 19:14:49","endLine":339,"groupId":"2948","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/db71bc07bb7375e415806b9bc91d4ca652c687.src","preCode":"    public void testEnableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"_doc\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"norms\", true).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"_doc\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"3d796248437e06dc90c15077702b67851bcb63a8","commitMessage":"@@@Revert \"Don't use user-supplied type when building DocumentMapper (#50960)\" (#51214)\n\nReverts #50960\n\nThis commit has been causing test failures during upgrade tests: specifically.  an upgraded\nnode becomes master and sends a cluster state update to a 7.x node; this node sees that the\nmapping version of its .tasks index is the same as the master.  so asserts that the serialized\nmappings are the same; however.  because the master has rewritten the mapping to use\n_docinstead oftasks`.  we get an assertion failure. The logical fix is for the master to\nincrement its mapping version when it rewrites the mapping.  but there isn't a simple way to\ndo that currently.\n\nThis reverts commit 774bfb5e22389a923678ed8013e8cd284703d5dd.","date":"2020-01-20 19:14:49","modifiedFileCount":"28","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-01-20 19:14:49","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":6,"curCode":"    public void testDisableNorms() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"text\").field(\"norms\", false)));\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"1234\")));\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","date":"2020-08-25 01:10:47","endLine":225,"groupId":"50434","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b6/a10f07abbb5d1a0dc0e779f044553d6df1cf82.src","preCode":"    public void testDisableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n                .startObject(\"properties\").startObject(\"field\")\n                    .field(\"type\", \"text\")\n                    .field(\"norms\", false)\n                .endObject().endObject()\n                .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n                XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2020-01-20 19:14:49","commitOrder":6,"curCode":"    public void testEnableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"norms\", true).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","date":"2020-01-20 19:14:49","endLine":339,"groupId":"2948","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e4/db71bc07bb7375e415806b9bc91d4ca652c687.src","preCode":"    public void testEnableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"norms\", true).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"N"}],"commitId":"e2dd0bde26e6c1f9f1a5137a5bf432d348e4205e","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-25 01:10:47","modifiedFileCount":"48","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-08-27 20:29:24","codes":[{"authorDate":"2020-08-25 01:10:47","commitOrder":7,"curCode":"    public void testDisableNorms() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"text\").field(\"norms\", false)));\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"1234\")));\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","date":"2020-08-25 01:10:47","endLine":225,"groupId":"103138","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b6/a10f07abbb5d1a0dc0e779f044553d6df1cf82.src","preCode":"    public void testDisableNorms() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", \"text\").field(\"norms\", false)));\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"1234\")));\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(1, fields.length);\n        assertTrue(fields[0].fieldType().omitNorms());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"N"},{"authorDate":"2020-08-27 20:29:24","commitOrder":7,"curCode":"    public void testEnableNorms() throws IOException {\n        DocumentMapper mapper = createDocumentMapper(fieldMapping(b -> b.field(\"type\", FIELD_TYPE).field(\"norms\", true)));\n        ParsedDocument doc = mapper.parse(source(b -> b.field(\"field\", \"1234\")));\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","date":"2020-08-27 20:29:24","endLine":255,"groupId":"103138","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testEnableNorms","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/39/66dc5dc72793b041e384e1137c823172e8f252.src","preCode":"    public void testEnableNorms() throws IOException {\n        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject(\"type\")\n            .startObject(\"properties\").startObject(\"field\").field(\"type\", FIELD_TYPE)\n            .field(\"norms\", true).endObject().endObject()\n            .endObject().endObject());\n\n        DocumentMapper mapper = parser.parse(\"type\", new CompressedXContent(mapping));\n\n        assertEquals(mapping, mapper.mappingSource().toString());\n\n        ParsedDocument doc = mapper.parse(new SourceToParse(\"test\", \"1\", BytesReference\n                .bytes(XContentFactory.jsonBuilder()\n                        .startObject()\n                        .field(\"field\", \"1234\")\n                        .endObject()),\n            XContentType.JSON));\n\n        IndexableField[] fields = doc.rootDoc().getFields(\"field\");\n        assertEquals(2, fields.length);\n        assertFalse(fields[0].fieldType().omitNorms());\n    }\n","realPath":"plugins/analysis-icu/src/test/java/org/elasticsearch/index/mapper/ICUCollationKeywordFieldMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"}],"commitId":"0a3d3919a141e6e3c9bbddc43d046a4c9211b6be","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-08-27 20:29:24","modifiedFileCount":"256","status":"M","submitter":"Luca Cavanna"}]
