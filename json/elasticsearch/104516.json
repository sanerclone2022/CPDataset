[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testSearch() throws Exception {\n        final int numDocs = randomIntBetween(100, 200);\n        final Directory dir = newDirectory();\n        final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n        int max = randomIntBetween(2, 10);\n        int[] sliceCounters1 = new int[max];\n        int[] sliceCounters2 = new int[max];\n        Set<String> keys = new HashSet<>();\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            String uuid = UUIDs.base64UUID();\n            int intValue = randomInt();\n            long doubleValue = NumericUtils.doubleToSortableLong(randomDouble());\n            doc.add(new StringField(\"uuid\", uuid, Field.Store.YES));\n            doc.add(new SortedNumericDocValuesField(\"intField\", intValue));\n            doc.add(new SortedNumericDocValuesField(\"doubleField\",  doubleValue));\n            w.addDocument(doc);\n            sliceCounters1[Math.floorMod(BitMixer.mix((long) intValue), max)] ++;\n            sliceCounters2[Math.floorMod(BitMixer.mix(doubleValue), max)] ++;\n            keys.add(uuid);\n        }\n        final IndexReader reader = w.getReader();\n        final IndexSearcher searcher = newSearcher(reader);\n\n        for (int id = 0; id < max; id++) {\n            DocValuesSliceQuery query1 =\n                new DocValuesSliceQuery(\"intField\", id, max);\n            assertThat(searcher.count(query1), equalTo(sliceCounters1[id]));\n\n            DocValuesSliceQuery query2 =\n                new DocValuesSliceQuery(\"doubleField\", id, max);\n            assertThat(searcher.count(query2), equalTo(sliceCounters2[id]));\n            searcher.search(query1, new Collector() {\n                @Override\n                public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n                    return new LeafCollector() {\n                        @Override\n                        public void setScorer(Scorer scorer) throws IOException {\n                        }\n\n                        @Override\n                        public void collect(int doc) throws IOException {\n                            Document d = context.reader().document(doc, Collections.singleton(\"uuid\"));\n                            String uuid = d.get(\"uuid\");\n                            assertThat(keys.contains(uuid), equalTo(true));\n                            keys.remove(uuid);\n                        }\n                    };\n                }\n\n                @Override\n                public boolean needsScores() {\n                    return false;\n                }\n            });\n        }\n        assertThat(keys.size(), equalTo(0));\n        w.close();\n        reader.close();\n        dir.close();\n    }\n","date":"2018-04-26 03:22:53","endLine":124,"groupId":"13967","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/84/6c411881f4f4bbda3d7a369b30c5fef03e0b54.src","preCode":"    public void testSearch() throws Exception {\n        final int numDocs = randomIntBetween(100, 200);\n        final Directory dir = newDirectory();\n        final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n        int max = randomIntBetween(2, 10);\n        int[] sliceCounters1 = new int[max];\n        int[] sliceCounters2 = new int[max];\n        Set<String> keys = new HashSet<>();\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            String uuid = UUIDs.base64UUID();\n            int intValue = randomInt();\n            long doubleValue = NumericUtils.doubleToSortableLong(randomDouble());\n            doc.add(new StringField(\"uuid\", uuid, Field.Store.YES));\n            doc.add(new SortedNumericDocValuesField(\"intField\", intValue));\n            doc.add(new SortedNumericDocValuesField(\"doubleField\",  doubleValue));\n            w.addDocument(doc);\n            sliceCounters1[Math.floorMod(BitMixer.mix((long) intValue), max)] ++;\n            sliceCounters2[Math.floorMod(BitMixer.mix(doubleValue), max)] ++;\n            keys.add(uuid);\n        }\n        final IndexReader reader = w.getReader();\n        final IndexSearcher searcher = newSearcher(reader);\n\n        for (int id = 0; id < max; id++) {\n            DocValuesSliceQuery query1 =\n                new DocValuesSliceQuery(\"intField\", id, max);\n            assertThat(searcher.count(query1), equalTo(sliceCounters1[id]));\n\n            DocValuesSliceQuery query2 =\n                new DocValuesSliceQuery(\"doubleField\", id, max);\n            assertThat(searcher.count(query2), equalTo(sliceCounters2[id]));\n            searcher.search(query1, new Collector() {\n                @Override\n                public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n                    return new LeafCollector() {\n                        @Override\n                        public void setScorer(Scorer scorer) throws IOException {\n                        }\n\n                        @Override\n                        public void collect(int doc) throws IOException {\n                            Document d = context.reader().document(doc, Collections.singleton(\"uuid\"));\n                            String uuid = d.get(\"uuid\");\n                            assertThat(keys.contains(uuid), equalTo(true));\n                            keys.remove(uuid);\n                        }\n                    };\n                }\n\n                @Override\n                public boolean needsScores() {\n                    return false;\n                }\n            });\n        }\n        assertThat(keys.size(), equalTo(0));\n        w.close();\n        reader.close();\n        dir.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/slice/DocValuesSliceQueryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testSearch() throws Exception {\n        final int numDocs = randomIntBetween(100, 200);\n        final Directory dir = newDirectory();\n        final RandomIndexWriter w = new RandomIndexWriter(random(), dir, new KeywordAnalyzer());\n        int max = randomIntBetween(2, 10);\n        int[] sliceCounters = new int[max];\n        Set<String> keys = new HashSet<>();\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            String uuid = UUIDs.base64UUID();\n            BytesRef br = new BytesRef(uuid);\n            int hashCode = StringHelper.murmurhash3_x86_32(br, TermsSliceQuery.SEED);\n            int id = Math.floorMod(hashCode, max);\n            sliceCounters[id] ++;\n            doc.add(new StringField(\"uuid\", uuid, Field.Store.YES));\n            w.addDocument(doc);\n            keys.add(uuid);\n        }\n        final IndexReader reader = w.getReader();\n        final IndexSearcher searcher = newSearcher(reader);\n\n        for (int id = 0; id < max; id++) {\n            TermsSliceQuery query1 =\n                new TermsSliceQuery(\"uuid\", id, max);\n            assertThat(searcher.count(query1), equalTo(sliceCounters[id]));\n            searcher.search(query1, new Collector() {\n                @Override\n                public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n                    return new LeafCollector() {\n                        @Override\n                        public void setScorer(Scorer scorer) throws IOException {\n                        }\n\n                        @Override\n                        public void collect(int doc) throws IOException {\n                            Document d = context.reader().document(doc, Collections.singleton(\"uuid\"));\n                            String uuid = d.get(\"uuid\");\n                            assertThat(keys.contains(uuid), equalTo(true));\n                            keys.remove(uuid);\n                        }\n                    };\n                }\n\n                @Override\n                public boolean needsScores() {\n                    return false;\n                }\n            });\n        }\n        assertThat(keys.size(), equalTo(0));\n        w.close();\n        reader.close();\n        dir.close();\n    }\n","date":"2018-04-26 03:22:53","endLine":118,"groupId":"31318","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/a4ce410529aa25f34ad1c0f3ab8f4312bc5829.src","preCode":"    public void testSearch() throws Exception {\n        final int numDocs = randomIntBetween(100, 200);\n        final Directory dir = newDirectory();\n        final RandomIndexWriter w = new RandomIndexWriter(random(), dir, new KeywordAnalyzer());\n        int max = randomIntBetween(2, 10);\n        int[] sliceCounters = new int[max];\n        Set<String> keys = new HashSet<>();\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            String uuid = UUIDs.base64UUID();\n            BytesRef br = new BytesRef(uuid);\n            int hashCode = StringHelper.murmurhash3_x86_32(br, TermsSliceQuery.SEED);\n            int id = Math.floorMod(hashCode, max);\n            sliceCounters[id] ++;\n            doc.add(new StringField(\"uuid\", uuid, Field.Store.YES));\n            w.addDocument(doc);\n            keys.add(uuid);\n        }\n        final IndexReader reader = w.getReader();\n        final IndexSearcher searcher = newSearcher(reader);\n\n        for (int id = 0; id < max; id++) {\n            TermsSliceQuery query1 =\n                new TermsSliceQuery(\"uuid\", id, max);\n            assertThat(searcher.count(query1), equalTo(sliceCounters[id]));\n            searcher.search(query1, new Collector() {\n                @Override\n                public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n                    return new LeafCollector() {\n                        @Override\n                        public void setScorer(Scorer scorer) throws IOException {\n                        }\n\n                        @Override\n                        public void collect(int doc) throws IOException {\n                            Document d = context.reader().document(doc, Collections.singleton(\"uuid\"));\n                            String uuid = d.get(\"uuid\");\n                            assertThat(keys.contains(uuid), equalTo(true));\n                            keys.remove(uuid);\n                        }\n                    };\n                }\n\n                @Override\n                public boolean needsScores() {\n                    return false;\n                }\n            });\n        }\n        assertThat(keys.size(), equalTo(0));\n        w.close();\n        reader.close();\n        dir.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/slice/TermsSliceQueryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-09-07 17:59:10","codes":[{"authorDate":"2018-09-07 17:59:10","commitOrder":2,"curCode":"    public void testSearch() throws Exception {\n        final int numDocs = randomIntBetween(100, 200);\n        final Directory dir = newDirectory();\n        final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n        int max = randomIntBetween(2, 10);\n        int[] sliceCounters1 = new int[max];\n        int[] sliceCounters2 = new int[max];\n        Set<String> keys = new HashSet<>();\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            String uuid = UUIDs.base64UUID();\n            int intValue = randomInt();\n            long doubleValue = NumericUtils.doubleToSortableLong(randomDouble());\n            doc.add(new StringField(\"uuid\", uuid, Field.Store.YES));\n            doc.add(new SortedNumericDocValuesField(\"intField\", intValue));\n            doc.add(new SortedNumericDocValuesField(\"doubleField\",  doubleValue));\n            w.addDocument(doc);\n            sliceCounters1[Math.floorMod(BitMixer.mix((long) intValue), max)] ++;\n            sliceCounters2[Math.floorMod(BitMixer.mix(doubleValue), max)] ++;\n            keys.add(uuid);\n        }\n        final IndexReader reader = w.getReader();\n        final IndexSearcher searcher = newSearcher(reader);\n\n        for (int id = 0; id < max; id++) {\n            DocValuesSliceQuery query1 =\n                new DocValuesSliceQuery(\"intField\", id, max);\n            assertThat(searcher.count(query1), equalTo(sliceCounters1[id]));\n\n            DocValuesSliceQuery query2 =\n                new DocValuesSliceQuery(\"doubleField\", id, max);\n            assertThat(searcher.count(query2), equalTo(sliceCounters2[id]));\n            searcher.search(query1, new Collector() {\n                @Override\n                public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n                    return new LeafCollector() {\n                        @Override\n                        public void setScorer(Scorer scorer) throws IOException {\n                        }\n\n                        @Override\n                        public void collect(int doc) throws IOException {\n                            Document d = context.reader().document(doc, Collections.singleton(\"uuid\"));\n                            String uuid = d.get(\"uuid\");\n                            assertThat(keys.contains(uuid), equalTo(true));\n                            keys.remove(uuid);\n                        }\n                    };\n                }\n\n                @Override\n                public ScoreMode scoreMode() {\n                    return ScoreMode.COMPLETE_NO_SCORES;\n                }\n            });\n        }\n        assertThat(keys.size(), equalTo(0));\n        w.close();\n        reader.close();\n        dir.close();\n    }\n","date":"2018-09-07 17:59:10","endLine":125,"groupId":"13967","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/70/eb0266eea38a17706458f56220928768570b19.src","preCode":"    public void testSearch() throws Exception {\n        final int numDocs = randomIntBetween(100, 200);\n        final Directory dir = newDirectory();\n        final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n        int max = randomIntBetween(2, 10);\n        int[] sliceCounters1 = new int[max];\n        int[] sliceCounters2 = new int[max];\n        Set<String> keys = new HashSet<>();\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            String uuid = UUIDs.base64UUID();\n            int intValue = randomInt();\n            long doubleValue = NumericUtils.doubleToSortableLong(randomDouble());\n            doc.add(new StringField(\"uuid\", uuid, Field.Store.YES));\n            doc.add(new SortedNumericDocValuesField(\"intField\", intValue));\n            doc.add(new SortedNumericDocValuesField(\"doubleField\",  doubleValue));\n            w.addDocument(doc);\n            sliceCounters1[Math.floorMod(BitMixer.mix((long) intValue), max)] ++;\n            sliceCounters2[Math.floorMod(BitMixer.mix(doubleValue), max)] ++;\n            keys.add(uuid);\n        }\n        final IndexReader reader = w.getReader();\n        final IndexSearcher searcher = newSearcher(reader);\n\n        for (int id = 0; id < max; id++) {\n            DocValuesSliceQuery query1 =\n                new DocValuesSliceQuery(\"intField\", id, max);\n            assertThat(searcher.count(query1), equalTo(sliceCounters1[id]));\n\n            DocValuesSliceQuery query2 =\n                new DocValuesSliceQuery(\"doubleField\", id, max);\n            assertThat(searcher.count(query2), equalTo(sliceCounters2[id]));\n            searcher.search(query1, new Collector() {\n                @Override\n                public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n                    return new LeafCollector() {\n                        @Override\n                        public void setScorer(Scorer scorer) throws IOException {\n                        }\n\n                        @Override\n                        public void collect(int doc) throws IOException {\n                            Document d = context.reader().document(doc, Collections.singleton(\"uuid\"));\n                            String uuid = d.get(\"uuid\");\n                            assertThat(keys.contains(uuid), equalTo(true));\n                            keys.remove(uuid);\n                        }\n                    };\n                }\n\n                @Override\n                public boolean needsScores() {\n                    return false;\n                }\n            });\n        }\n        assertThat(keys.size(), equalTo(0));\n        w.close();\n        reader.close();\n        dir.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/slice/DocValuesSliceQueryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2018-09-07 17:59:10","commitOrder":2,"curCode":"    public void testSearch() throws Exception {\n        final int numDocs = randomIntBetween(100, 200);\n        final Directory dir = newDirectory();\n        final RandomIndexWriter w = new RandomIndexWriter(random(), dir, new KeywordAnalyzer());\n        int max = randomIntBetween(2, 10);\n        int[] sliceCounters = new int[max];\n        Set<String> keys = new HashSet<>();\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            String uuid = UUIDs.base64UUID();\n            BytesRef br = new BytesRef(uuid);\n            int hashCode = StringHelper.murmurhash3_x86_32(br, TermsSliceQuery.SEED);\n            int id = Math.floorMod(hashCode, max);\n            sliceCounters[id] ++;\n            doc.add(new StringField(\"uuid\", uuid, Field.Store.YES));\n            w.addDocument(doc);\n            keys.add(uuid);\n        }\n        final IndexReader reader = w.getReader();\n        final IndexSearcher searcher = newSearcher(reader);\n\n        for (int id = 0; id < max; id++) {\n            TermsSliceQuery query1 =\n                new TermsSliceQuery(\"uuid\", id, max);\n            assertThat(searcher.count(query1), equalTo(sliceCounters[id]));\n            searcher.search(query1, new Collector() {\n                @Override\n                public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n                    return new LeafCollector() {\n                        @Override\n                        public void setScorer(Scorer scorer) throws IOException {\n                        }\n\n                        @Override\n                        public void collect(int doc) throws IOException {\n                            Document d = context.reader().document(doc, Collections.singleton(\"uuid\"));\n                            String uuid = d.get(\"uuid\");\n                            assertThat(keys.contains(uuid), equalTo(true));\n                            keys.remove(uuid);\n                        }\n                    };\n                }\n\n                @Override\n                public ScoreMode scoreMode() {\n                    return ScoreMode.COMPLETE_NO_SCORES;\n                }\n            });\n        }\n        assertThat(keys.size(), equalTo(0));\n        w.close();\n        reader.close();\n        dir.close();\n    }\n","date":"2018-09-07 17:59:10","endLine":118,"groupId":"31318","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/9a/e4b9bc7daf5dc7b0f3549205afae82438149cc.src","preCode":"    public void testSearch() throws Exception {\n        final int numDocs = randomIntBetween(100, 200);\n        final Directory dir = newDirectory();\n        final RandomIndexWriter w = new RandomIndexWriter(random(), dir, new KeywordAnalyzer());\n        int max = randomIntBetween(2, 10);\n        int[] sliceCounters = new int[max];\n        Set<String> keys = new HashSet<>();\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            String uuid = UUIDs.base64UUID();\n            BytesRef br = new BytesRef(uuid);\n            int hashCode = StringHelper.murmurhash3_x86_32(br, TermsSliceQuery.SEED);\n            int id = Math.floorMod(hashCode, max);\n            sliceCounters[id] ++;\n            doc.add(new StringField(\"uuid\", uuid, Field.Store.YES));\n            w.addDocument(doc);\n            keys.add(uuid);\n        }\n        final IndexReader reader = w.getReader();\n        final IndexSearcher searcher = newSearcher(reader);\n\n        for (int id = 0; id < max; id++) {\n            TermsSliceQuery query1 =\n                new TermsSliceQuery(\"uuid\", id, max);\n            assertThat(searcher.count(query1), equalTo(sliceCounters[id]));\n            searcher.search(query1, new Collector() {\n                @Override\n                public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n                    return new LeafCollector() {\n                        @Override\n                        public void setScorer(Scorer scorer) throws IOException {\n                        }\n\n                        @Override\n                        public void collect(int doc) throws IOException {\n                            Document d = context.reader().document(doc, Collections.singleton(\"uuid\"));\n                            String uuid = d.get(\"uuid\");\n                            assertThat(keys.contains(uuid), equalTo(true));\n                            keys.remove(uuid);\n                        }\n                    };\n                }\n\n                @Override\n                public boolean needsScores() {\n                    return false;\n                }\n            });\n        }\n        assertThat(keys.size(), equalTo(0));\n        w.close();\n        reader.close();\n        dir.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/slice/TermsSliceQueryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"017ffe5d127ce0fb33feb8fc4e5fededb8cbfda1","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-07 17:59:10","modifiedFileCount":"370","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2018-09-11 04:30:44","codes":[{"authorDate":"2018-09-11 04:30:44","commitOrder":3,"curCode":"    public void testSearch() throws Exception {\n        final int numDocs = randomIntBetween(100, 200);\n        final Directory dir = newDirectory();\n        final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n        int max = randomIntBetween(2, 10);\n        int[] sliceCounters1 = new int[max];\n        int[] sliceCounters2 = new int[max];\n        Set<String> keys = new HashSet<>();\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            String uuid = UUIDs.base64UUID();\n            int intValue = randomInt();\n            long doubleValue = NumericUtils.doubleToSortableLong(randomDouble());\n            doc.add(new StringField(\"uuid\", uuid, Field.Store.YES));\n            doc.add(new SortedNumericDocValuesField(\"intField\", intValue));\n            doc.add(new SortedNumericDocValuesField(\"doubleField\",  doubleValue));\n            w.addDocument(doc);\n            sliceCounters1[Math.floorMod(BitMixer.mix((long) intValue), max)] ++;\n            sliceCounters2[Math.floorMod(BitMixer.mix(doubleValue), max)] ++;\n            keys.add(uuid);\n        }\n        final IndexReader reader = w.getReader();\n        final IndexSearcher searcher = newSearcher(reader);\n\n        for (int id = 0; id < max; id++) {\n            DocValuesSliceQuery query1 =\n                new DocValuesSliceQuery(\"intField\", id, max);\n            assertThat(searcher.count(query1), equalTo(sliceCounters1[id]));\n\n            DocValuesSliceQuery query2 =\n                new DocValuesSliceQuery(\"doubleField\", id, max);\n            assertThat(searcher.count(query2), equalTo(sliceCounters2[id]));\n            searcher.search(query1, new Collector() {\n                @Override\n                public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n                    return new LeafCollector() {\n                        @Override\n                        public void setScorer(Scorable scorer) throws IOException {\n                        }\n\n                        @Override\n                        public void collect(int doc) throws IOException {\n                            Document d = context.reader().document(doc, Collections.singleton(\"uuid\"));\n                            String uuid = d.get(\"uuid\");\n                            assertThat(keys.contains(uuid), equalTo(true));\n                            keys.remove(uuid);\n                        }\n                    };\n                }\n\n                @Override\n                public ScoreMode scoreMode() {\n                    return ScoreMode.COMPLETE_NO_SCORES;\n                }\n            });\n        }\n        assertThat(keys.size(), equalTo(0));\n        w.close();\n        reader.close();\n        dir.close();\n    }\n","date":"2018-09-11 04:30:44","endLine":125,"groupId":"104516","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/76/807f4722afcd2a9b75f6215f09aeaddcd7bf8b.src","preCode":"    public void testSearch() throws Exception {\n        final int numDocs = randomIntBetween(100, 200);\n        final Directory dir = newDirectory();\n        final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n        int max = randomIntBetween(2, 10);\n        int[] sliceCounters1 = new int[max];\n        int[] sliceCounters2 = new int[max];\n        Set<String> keys = new HashSet<>();\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            String uuid = UUIDs.base64UUID();\n            int intValue = randomInt();\n            long doubleValue = NumericUtils.doubleToSortableLong(randomDouble());\n            doc.add(new StringField(\"uuid\", uuid, Field.Store.YES));\n            doc.add(new SortedNumericDocValuesField(\"intField\", intValue));\n            doc.add(new SortedNumericDocValuesField(\"doubleField\",  doubleValue));\n            w.addDocument(doc);\n            sliceCounters1[Math.floorMod(BitMixer.mix((long) intValue), max)] ++;\n            sliceCounters2[Math.floorMod(BitMixer.mix(doubleValue), max)] ++;\n            keys.add(uuid);\n        }\n        final IndexReader reader = w.getReader();\n        final IndexSearcher searcher = newSearcher(reader);\n\n        for (int id = 0; id < max; id++) {\n            DocValuesSliceQuery query1 =\n                new DocValuesSliceQuery(\"intField\", id, max);\n            assertThat(searcher.count(query1), equalTo(sliceCounters1[id]));\n\n            DocValuesSliceQuery query2 =\n                new DocValuesSliceQuery(\"doubleField\", id, max);\n            assertThat(searcher.count(query2), equalTo(sliceCounters2[id]));\n            searcher.search(query1, new Collector() {\n                @Override\n                public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n                    return new LeafCollector() {\n                        @Override\n                        public void setScorer(Scorer scorer) throws IOException {\n                        }\n\n                        @Override\n                        public void collect(int doc) throws IOException {\n                            Document d = context.reader().document(doc, Collections.singleton(\"uuid\"));\n                            String uuid = d.get(\"uuid\");\n                            assertThat(keys.contains(uuid), equalTo(true));\n                            keys.remove(uuid);\n                        }\n                    };\n                }\n\n                @Override\n                public ScoreMode scoreMode() {\n                    return ScoreMode.COMPLETE_NO_SCORES;\n                }\n            });\n        }\n        assertThat(keys.size(), equalTo(0));\n        w.close();\n        reader.close();\n        dir.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/slice/DocValuesSliceQueryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2018-09-11 04:30:44","commitOrder":3,"curCode":"    public void testSearch() throws Exception {\n        final int numDocs = randomIntBetween(100, 200);\n        final Directory dir = newDirectory();\n        final RandomIndexWriter w = new RandomIndexWriter(random(), dir, new KeywordAnalyzer());\n        int max = randomIntBetween(2, 10);\n        int[] sliceCounters = new int[max];\n        Set<String> keys = new HashSet<>();\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            String uuid = UUIDs.base64UUID();\n            BytesRef br = new BytesRef(uuid);\n            int hashCode = StringHelper.murmurhash3_x86_32(br, TermsSliceQuery.SEED);\n            int id = Math.floorMod(hashCode, max);\n            sliceCounters[id] ++;\n            doc.add(new StringField(\"uuid\", uuid, Field.Store.YES));\n            w.addDocument(doc);\n            keys.add(uuid);\n        }\n        final IndexReader reader = w.getReader();\n        final IndexSearcher searcher = newSearcher(reader);\n\n        for (int id = 0; id < max; id++) {\n            TermsSliceQuery query1 =\n                new TermsSliceQuery(\"uuid\", id, max);\n            assertThat(searcher.count(query1), equalTo(sliceCounters[id]));\n            searcher.search(query1, new Collector() {\n                @Override\n                public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n                    return new LeafCollector() {\n                        @Override\n                        public void setScorer(Scorable scorer) throws IOException {\n                        }\n\n                        @Override\n                        public void collect(int doc) throws IOException {\n                            Document d = context.reader().document(doc, Collections.singleton(\"uuid\"));\n                            String uuid = d.get(\"uuid\");\n                            assertThat(keys.contains(uuid), equalTo(true));\n                            keys.remove(uuid);\n                        }\n                    };\n                }\n\n                @Override\n                public ScoreMode scoreMode() {\n                    return ScoreMode.COMPLETE_NO_SCORES;\n                }\n            });\n        }\n        assertThat(keys.size(), equalTo(0));\n        w.close();\n        reader.close();\n        dir.close();\n    }\n","date":"2018-09-11 04:30:44","endLine":118,"groupId":"104516","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/88/1dc6f9587af2dedec3849f7e4cfafb8bef8ecf.src","preCode":"    public void testSearch() throws Exception {\n        final int numDocs = randomIntBetween(100, 200);\n        final Directory dir = newDirectory();\n        final RandomIndexWriter w = new RandomIndexWriter(random(), dir, new KeywordAnalyzer());\n        int max = randomIntBetween(2, 10);\n        int[] sliceCounters = new int[max];\n        Set<String> keys = new HashSet<>();\n        for (int i = 0; i < numDocs; ++i) {\n            Document doc = new Document();\n            String uuid = UUIDs.base64UUID();\n            BytesRef br = new BytesRef(uuid);\n            int hashCode = StringHelper.murmurhash3_x86_32(br, TermsSliceQuery.SEED);\n            int id = Math.floorMod(hashCode, max);\n            sliceCounters[id] ++;\n            doc.add(new StringField(\"uuid\", uuid, Field.Store.YES));\n            w.addDocument(doc);\n            keys.add(uuid);\n        }\n        final IndexReader reader = w.getReader();\n        final IndexSearcher searcher = newSearcher(reader);\n\n        for (int id = 0; id < max; id++) {\n            TermsSliceQuery query1 =\n                new TermsSliceQuery(\"uuid\", id, max);\n            assertThat(searcher.count(query1), equalTo(sliceCounters[id]));\n            searcher.search(query1, new Collector() {\n                @Override\n                public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n                    return new LeafCollector() {\n                        @Override\n                        public void setScorer(Scorer scorer) throws IOException {\n                        }\n\n                        @Override\n                        public void collect(int doc) throws IOException {\n                            Document d = context.reader().document(doc, Collections.singleton(\"uuid\"));\n                            String uuid = d.get(\"uuid\");\n                            assertThat(keys.contains(uuid), equalTo(true));\n                            keys.remove(uuid);\n                        }\n                    };\n                }\n\n                @Override\n                public ScoreMode scoreMode() {\n                    return ScoreMode.COMPLETE_NO_SCORES;\n                }\n            });\n        }\n        assertThat(keys.size(), equalTo(0));\n        w.close();\n        reader.close();\n        dir.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/slice/TermsSliceQueryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"cdc4f57a773b588fe872f247ee62c3d5539e2faa","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-11 04:30:44","modifiedFileCount":"186","status":"M","submitter":"Colin Goodheart-Smithe"}]
