[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testFailedShardPrimaryRelocatingToAndFrom() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                        .add(newNode(\"node1\"))\n                        .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                        .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                        new MoveAllocationCommand(\"test\", 0, clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node3 being initialized\");\n        clusterState = allocation.applyFailedShard(clusterState, clusterState.getRoutingNodes().node(\"node3\").iterator().next(), randomBoolean());\n\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        logger.info(\"--> moving primary shard to node3\");\n        commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                        new MoveAllocationCommand(\"test\", 0, clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node1 being relocated\");\n        clusterState = allocation.applyFailedShard(clusterState, clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next(), randomBoolean());\n\n        \r\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), equalTo(origReplicaNodeId));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId(), anyOf(equalTo(origPrimaryNodeId), equalTo(\"node3\")));\n    }\n","date":"2018-04-26 03:22:53","endLine":141,"groupId":"30405","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedShardPrimaryRelocatingToAndFrom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/a1ff3a154af15bd90af7e3396ccc2c5d1ed362.src","preCode":"    public void testFailedShardPrimaryRelocatingToAndFrom() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                        .add(newNode(\"node1\"))\n                        .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                        .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                        new MoveAllocationCommand(\"test\", 0, clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node3 being initialized\");\n        clusterState = allocation.applyFailedShard(clusterState, clusterState.getRoutingNodes().node(\"node3\").iterator().next(), randomBoolean());\n\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        logger.info(\"--> moving primary shard to node3\");\n        commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                        new MoveAllocationCommand(\"test\", 0, clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node1 being relocated\");\n        clusterState = allocation.applyFailedShard(clusterState, clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next(), randomBoolean());\n\n        \r\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), equalTo(origReplicaNodeId));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId(), anyOf(equalTo(origPrimaryNodeId), equalTo(\"node3\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/FailedShardsRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testDeadNodeWhileRelocatingOnFromNode() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                new MoveAllocationCommand(\"test\",0 , clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on 'origPrimaryNodeId' being relocated\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node3\"))\n                .add(newNode(origReplicaNodeId))\n        ).build();\n        clusterState = allocation.deassociateDeadNodes(clusterState, true, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n    }\n","date":"2018-04-26 03:22:53","endLine":228,"groupId":"30405","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeadNodeWhileRelocatingOnFromNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/81/c6685ca149d374a7d4445fdff493f3e1db0b50.src","preCode":"    public void testDeadNodeWhileRelocatingOnFromNode() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                new MoveAllocationCommand(\"test\",0 , clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on 'origPrimaryNodeId' being relocated\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node3\"))\n                .add(newNode(origReplicaNodeId))\n        ).build();\n        clusterState = allocation.deassociateDeadNodes(clusterState, true, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/DeadNodesAllocationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2019-01-24 00:06:25","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    public void testFailedShardPrimaryRelocatingToAndFrom() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                        .add(newNode(\"node1\"))\n                        .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                        .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                        new MoveAllocationCommand(\"test\", 0, clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node3 being initialized\");\n        clusterState = allocation.applyFailedShard(clusterState, clusterState.getRoutingNodes().node(\"node3\").iterator().next(), randomBoolean());\n\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        logger.info(\"--> moving primary shard to node3\");\n        commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                        new MoveAllocationCommand(\"test\", 0, clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node1 being relocated\");\n        clusterState = allocation.applyFailedShard(clusterState, clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next(), randomBoolean());\n\n        \r\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), equalTo(origReplicaNodeId));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId(), anyOf(equalTo(origPrimaryNodeId), equalTo(\"node3\")));\n    }\n","date":"2018-04-26 03:22:53","endLine":141,"groupId":"30405","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedShardPrimaryRelocatingToAndFrom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1f/a1ff3a154af15bd90af7e3396ccc2c5d1ed362.src","preCode":"    public void testFailedShardPrimaryRelocatingToAndFrom() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                        .add(newNode(\"node1\"))\n                        .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                        .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                        new MoveAllocationCommand(\"test\", 0, clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node3 being initialized\");\n        clusterState = allocation.applyFailedShard(clusterState, clusterState.getRoutingNodes().node(\"node3\").iterator().next(), randomBoolean());\n\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        logger.info(\"--> moving primary shard to node3\");\n        commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                        new MoveAllocationCommand(\"test\", 0, clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node1 being relocated\");\n        clusterState = allocation.applyFailedShard(clusterState, clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next(), randomBoolean());\n\n        \r\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), equalTo(origReplicaNodeId));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId(), anyOf(equalTo(origPrimaryNodeId), equalTo(\"node3\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/FailedShardsRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2019-01-24 00:06:25","commitOrder":2,"curCode":"    public void testDeadNodeWhileRelocatingOnFromNode() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                new MoveAllocationCommand(\"test\",0 , clusterState.routingTable().index(\"test\")\n                    .shard(0).primaryShard().currentNodeId(), \"node3\")), false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on 'origPrimaryNodeId' being relocated\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node3\"))\n                .add(newNode(origReplicaNodeId))\n        ).build();\n        clusterState = allocation.disassociateDeadNodes(clusterState, true, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n    }\n","date":"2019-01-24 00:06:25","endLine":231,"groupId":"30405","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeadNodeWhileRelocatingOnFromNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f9/dee9807b400d95d652ec2a715cfa7a76707558.src","preCode":"    public void testDeadNodeWhileRelocatingOnFromNode() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                new MoveAllocationCommand(\"test\",0 , clusterState.routingTable().index(\"test\")\n                    .shard(0).primaryShard().currentNodeId(), \"node3\")), false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on 'origPrimaryNodeId' being relocated\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node3\"))\n                .add(newNode(origReplicaNodeId))\n        ).build();\n        clusterState = allocation.deassociateDeadNodes(clusterState, true, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/DeadNodesAllocationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"d193ca8aaecbba7ae2ee7c62855d0e062742cc58","commitMessage":"@@@Use disassociate in preference to deassociate (#37704)\n\n","date":"2019-01-24 00:06:25","modifiedFileCount":"25","status":"M","submitter":"David Kyle"},{"authorTime":"2019-07-18 13:39:24","codes":[{"authorDate":"2019-07-18 13:39:24","commitOrder":3,"curCode":"    public void testFailedShardPrimaryRelocatingToAndFrom() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY))\n            .metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                        .add(newNode(\"node1\"))\n                        .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = startInitializingShardsAndReroute(allocation, clusterState);\n        \r\n        clusterState = startInitializingShardsAndReroute(allocation, clusterState);\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                        .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(new MoveAllocationCommand(\n            \"test\", 0, clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")), false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node3 being initialized\");\n        clusterState = allocation.applyFailedShard(clusterState,\n            clusterState.getRoutingNodes().node(\"node3\").iterator().next(), randomBoolean());\n\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        logger.info(\"--> moving primary shard to node3\");\n        commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                        new MoveAllocationCommand(\"test\", 0,\n                            clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node1 being relocated\");\n        clusterState = allocation.applyFailedShard(clusterState,\n            clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next(), randomBoolean());\n\n        \r\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), equalTo(origReplicaNodeId));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId(),\n            anyOf(equalTo(origPrimaryNodeId), equalTo(\"node3\")));\n    }\n","date":"2019-07-18 13:39:24","endLine":144,"groupId":"30405","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedShardPrimaryRelocatingToAndFrom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6c/353aa8c85e971695787b4c83b42160416883a5.src","preCode":"    public void testFailedShardPrimaryRelocatingToAndFrom() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY))\n            .metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                        .add(newNode(\"node1\"))\n                        .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                        .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(new MoveAllocationCommand(\n            \"test\", 0, clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")), false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node3 being initialized\");\n        clusterState = allocation.applyFailedShard(clusterState,\n            clusterState.getRoutingNodes().node(\"node3\").iterator().next(), randomBoolean());\n\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        logger.info(\"--> moving primary shard to node3\");\n        commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                        new MoveAllocationCommand(\"test\", 0,\n                            clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node1 being relocated\");\n        clusterState = allocation.applyFailedShard(clusterState,\n            clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next(), randomBoolean());\n\n        \r\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), equalTo(origReplicaNodeId));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId(),\n            anyOf(equalTo(origPrimaryNodeId), equalTo(\"node3\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/FailedShardsRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2019-07-18 13:39:24","commitOrder":3,"curCode":"    public void testDeadNodeWhileRelocatingOnFromNode() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = startInitializingShardsAndReroute(allocation, clusterState);\n        \r\n        clusterState = startInitializingShardsAndReroute(allocation, clusterState);\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                new MoveAllocationCommand(\"test\",0 , clusterState.routingTable().index(\"test\")\n                    .shard(0).primaryShard().currentNodeId(), \"node3\")), false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on 'origPrimaryNodeId' being relocated\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node3\"))\n                .add(newNode(origReplicaNodeId))\n        ).build();\n        clusterState = allocation.disassociateDeadNodes(clusterState, true, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n    }\n","date":"2019-07-18 13:39:24","endLine":231,"groupId":"30405","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeadNodeWhileRelocatingOnFromNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/9aeeb60611111a39912a4572e54a3baec30219.src","preCode":"    public void testDeadNodeWhileRelocatingOnFromNode() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n        \r\n        clusterState = allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                new MoveAllocationCommand(\"test\",0 , clusterState.routingTable().index(\"test\")\n                    .shard(0).primaryShard().currentNodeId(), \"node3\")), false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on 'origPrimaryNodeId' being relocated\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node3\"))\n                .add(newNode(origReplicaNodeId))\n        ).build();\n        clusterState = allocation.disassociateDeadNodes(clusterState, true, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/DeadNodesAllocationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"51fb95ef83f7a1aa6cbc5207e504b03ccee724ee","commitMessage":"@@@Defer reroute when starting shards (#44433)\n\n* Defer reroute when starting shards\n\nToday we reroute the cluster as part of the process of starting a shard.  which\nruns at `URGENT` priority. In large clusters.  rerouting may take some time to\ncomplete.  and this means that a mere trickle of shard-started events can cause\nstarvation for other.  lower-priority.  tasks that are pending on the master.\n\nHowever.  it isn't really necessary to perform a reroute when starting a shard. \nas long as one occurs eventually. This commit removes the inline reroute from\nthe process of starting a shard and replaces it with a deferred one that runs\nat `NORMAL` priority.  avoiding starvation of higher-priority tasks.\n\nThis may improve some of the situations related to #42738 and #42105.\n\n* Specific test case for followup priority setting\n\nWe cannot set the priority in all InternalTestClusters because the deprecation\nwarning makes some tests unhappy. This commit adds a specific test instead.\n\n* Checkstyle\n\n* Cluster state always changed here\n\n* Assert consistency of routing nodes\n\n* Restrict setting only to reasonable priorities\n","date":"2019-07-18 13:39:24","modifiedFileCount":"60","status":"M","submitter":"David Turner"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void testFailedShardPrimaryRelocatingToAndFrom() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY))\n            .metadata(metadata).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                        .add(newNode(\"node1\"))\n                        .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = startInitializingShardsAndReroute(allocation, clusterState);\n        \r\n        clusterState = startInitializingShardsAndReroute(allocation, clusterState);\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                        .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(new MoveAllocationCommand(\n            \"test\", 0, clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")), false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node3 being initialized\");\n        clusterState = allocation.applyFailedShard(clusterState,\n            clusterState.getRoutingNodes().node(\"node3\").iterator().next(), randomBoolean());\n\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        logger.info(\"--> moving primary shard to node3\");\n        commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                        new MoveAllocationCommand(\"test\", 0,\n                            clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node1 being relocated\");\n        clusterState = allocation.applyFailedShard(clusterState,\n            clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next(), randomBoolean());\n\n        \r\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), equalTo(origReplicaNodeId));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId(),\n            anyOf(equalTo(origPrimaryNodeId), equalTo(\"node3\")));\n    }\n","date":"2020-04-01 03:52:01","endLine":144,"groupId":"102188","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFailedShardPrimaryRelocatingToAndFrom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0c/70f0ae69123c47f4c898c58762478d91f359a9.src","preCode":"    public void testFailedShardPrimaryRelocatingToAndFrom() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY))\n            .metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                        .add(newNode(\"node1\"))\n                        .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = startInitializingShardsAndReroute(allocation, clusterState);\n        \r\n        clusterState = startInitializingShardsAndReroute(allocation, clusterState);\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                        .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(new MoveAllocationCommand(\n            \"test\", 0, clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")), false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node3 being initialized\");\n        clusterState = allocation.applyFailedShard(clusterState,\n            clusterState.getRoutingNodes().node(\"node3\").iterator().next(), randomBoolean());\n\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        logger.info(\"--> moving primary shard to node3\");\n        commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                        new MoveAllocationCommand(\"test\", 0,\n                            clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), \"node3\")),\n            false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on node1 being relocated\");\n        clusterState = allocation.applyFailedShard(clusterState,\n            clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next(), randomBoolean());\n\n        \r\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId(), equalTo(origReplicaNodeId));\n        assertThat(clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId(),\n            anyOf(equalTo(origPrimaryNodeId), equalTo(\"node3\")));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/FailedShardsRoutingTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void testDeadNodeWhileRelocatingOnFromNode() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metadata(metadata).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = startInitializingShardsAndReroute(allocation, clusterState);\n        \r\n        clusterState = startInitializingShardsAndReroute(allocation, clusterState);\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                new MoveAllocationCommand(\"test\",0 , clusterState.routingTable().index(\"test\")\n                    .shard(0).primaryShard().currentNodeId(), \"node3\")), false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on 'origPrimaryNodeId' being relocated\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node3\"))\n                .add(newNode(origReplicaNodeId))\n        ).build();\n        clusterState = allocation.disassociateDeadNodes(clusterState, true, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n    }\n","date":"2020-04-01 03:52:01","endLine":231,"groupId":"102188","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeadNodeWhileRelocatingOnFromNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/c6/6789007c8c95db42c246e98c312071588ec4c4.src","preCode":"    public void testDeadNodeWhileRelocatingOnFromNode() {\n        AllocationService allocation = createAllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .build());\n\n        logger.info(\"--> building initial routing table\");\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n        RoutingTable routingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n        ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n            .getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();\n\n        logger.info(\"--> adding 2 nodes on same rack and do rerouting\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        \r\n        clusterState = startInitializingShardsAndReroute(allocation, clusterState);\n        \r\n        clusterState = startInitializingShardsAndReroute(allocation, clusterState);\n\n        logger.info(\"--> verifying all is allocated\");\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n\n        logger.info(\"--> adding additional node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = allocation.reroute(clusterState, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(0));\n\n        String origPrimaryNodeId = clusterState.routingTable().index(\"test\").shard(0).primaryShard().currentNodeId();\n        String origReplicaNodeId = clusterState.routingTable().index(\"test\").shard(0).replicaShards().get(0).currentNodeId();\n\n        logger.info(\"--> moving primary shard to node3\");\n        AllocationService.CommandsResult commandsResult = allocation.reroute(clusterState, new AllocationCommands(\n                new MoveAllocationCommand(\"test\",0 , clusterState.routingTable().index(\"test\")\n                    .shard(0).primaryShard().currentNodeId(), \"node3\")), false, false);\n        assertThat(commandsResult.getClusterState(), not(equalTo(clusterState)));\n        clusterState = commandsResult.getClusterState();\n        assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(), equalTo(RELOCATING));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n\n        logger.info(\"--> fail primary shard recovering instance on 'origPrimaryNodeId' being relocated\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node3\"))\n                .add(newNode(origReplicaNodeId))\n        ).build();\n        clusterState = allocation.disassociateDeadNodes(clusterState, true, \"reroute\");\n\n        assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(), equalTo(STARTED));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").iterator().next().state(), equalTo(INITIALIZING));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/DeadNodesAllocationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"}]
