[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testUncaughtError() throws InterruptedException {\n        final Error error = randomFrom(\n            new InternalError(),\n            new OutOfMemoryError(),\n            new StackOverflowError(),\n            new UnknownError(),\n            new IOError(new IOException(\"fatal\")),\n            new Error() {});\n        final Thread thread = new Thread(() -> { throw error; });\n        final String name = randomAlphaOfLength(10);\n        thread.setName(name);\n        final AtomicBoolean halt = new AtomicBoolean();\n        final AtomicInteger observedStatus = new AtomicInteger();\n        final AtomicReference<String> threadNameReference = new AtomicReference<>();\n        final AtomicReference<Throwable> throwableReference = new AtomicReference<>();\n        thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler(() -> \"testUncaughtError\") {\n\n            @Override\n            void halt(int status) {\n                halt.set(true);\n                observedStatus.set(status);\n            }\n\n            @Override\n            void onFatalUncaught(String threadName, Throwable t) {\n                threadNameReference.set(threadName);\n                throwableReference.set(t);\n            }\n\n            @Override\n            void onNonFatalUncaught(String threadName, Throwable t) {\n                fail();\n            }\n\n        });\n        thread.start();\n        thread.join();\n        assertTrue(halt.get());\n        final int status;\n        if (expectedStatus.containsKey(error.getClass())) {\n            status = expectedStatus.get(error.getClass());\n        } else {\n            status = 1;\n        }\n        assertThat(observedStatus.get(), equalTo(status));\n        assertThat(threadNameReference.get(), equalTo(name));\n        assertThat(throwableReference.get(), equalTo(error));\n    }\n","date":"2018-04-26 03:22:53","endLine":100,"groupId":"6951","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUncaughtError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/bf07b7d0bb456aef324f742a10eb443d304bac.src","preCode":"    public void testUncaughtError() throws InterruptedException {\n        final Error error = randomFrom(\n            new InternalError(),\n            new OutOfMemoryError(),\n            new StackOverflowError(),\n            new UnknownError(),\n            new IOError(new IOException(\"fatal\")),\n            new Error() {});\n        final Thread thread = new Thread(() -> { throw error; });\n        final String name = randomAlphaOfLength(10);\n        thread.setName(name);\n        final AtomicBoolean halt = new AtomicBoolean();\n        final AtomicInteger observedStatus = new AtomicInteger();\n        final AtomicReference<String> threadNameReference = new AtomicReference<>();\n        final AtomicReference<Throwable> throwableReference = new AtomicReference<>();\n        thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler(() -> \"testUncaughtError\") {\n\n            @Override\n            void halt(int status) {\n                halt.set(true);\n                observedStatus.set(status);\n            }\n\n            @Override\n            void onFatalUncaught(String threadName, Throwable t) {\n                threadNameReference.set(threadName);\n                throwableReference.set(t);\n            }\n\n            @Override\n            void onNonFatalUncaught(String threadName, Throwable t) {\n                fail();\n            }\n\n        });\n        thread.start();\n        thread.join();\n        assertTrue(halt.get());\n        final int status;\n        if (expectedStatus.containsKey(error.getClass())) {\n            status = expectedStatus.get(error.getClass());\n        } else {\n            status = 1;\n        }\n        assertThat(observedStatus.get(), equalTo(status));\n        assertThat(threadNameReference.get(), equalTo(name));\n        assertThat(throwableReference.get(), equalTo(error));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/ElasticsearchUncaughtExceptionHandlerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testUncaughtException() throws InterruptedException {\n        final RuntimeException e = new RuntimeException(\"boom\");\n        final Thread thread = new Thread(() -> { throw e; });\n        final String name = randomAlphaOfLength(10);\n        thread.setName(name);\n        final AtomicReference<String> threadNameReference = new AtomicReference<>();\n        final AtomicReference<Throwable> throwableReference = new AtomicReference<>();\n        thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler(() -> \"testUncaughtException\") {\n            @Override\n            void halt(int status) {\n                fail();\n            }\n\n            @Override\n            void onFatalUncaught(String threadName, Throwable t) {\n                fail();\n            }\n\n            @Override\n            void onNonFatalUncaught(String threadName, Throwable t) {\n                threadNameReference.set(threadName);\n                throwableReference.set(t);\n            }\n        });\n        thread.start();\n        thread.join();\n        assertThat(threadNameReference.get(), equalTo(name));\n        assertThat(throwableReference.get(), equalTo(e));\n    }\n","date":"2018-04-26 03:22:53","endLine":130,"groupId":"6952","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUncaughtException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e2/bf07b7d0bb456aef324f742a10eb443d304bac.src","preCode":"    public void testUncaughtException() throws InterruptedException {\n        final RuntimeException e = new RuntimeException(\"boom\");\n        final Thread thread = new Thread(() -> { throw e; });\n        final String name = randomAlphaOfLength(10);\n        thread.setName(name);\n        final AtomicReference<String> threadNameReference = new AtomicReference<>();\n        final AtomicReference<Throwable> throwableReference = new AtomicReference<>();\n        thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler(() -> \"testUncaughtException\") {\n            @Override\n            void halt(int status) {\n                fail();\n            }\n\n            @Override\n            void onFatalUncaught(String threadName, Throwable t) {\n                fail();\n            }\n\n            @Override\n            void onNonFatalUncaught(String threadName, Throwable t) {\n                threadNameReference.set(threadName);\n                throwableReference.set(t);\n            }\n        });\n        thread.start();\n        thread.join();\n        assertThat(threadNameReference.get(), equalTo(name));\n        assertThat(throwableReference.get(), equalTo(e));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/ElasticsearchUncaughtExceptionHandlerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-08-01 02:50:33","codes":[{"authorDate":"2018-08-01 02:50:33","commitOrder":2,"curCode":"    public void testUncaughtError() throws InterruptedException {\n        final Error error = randomFrom(\n            new InternalError(),\n            new OutOfMemoryError(),\n            new StackOverflowError(),\n            new UnknownError(),\n            new IOError(new IOException(\"fatal\")),\n            new Error() {});\n        final Thread thread = new Thread(() -> { throw error; });\n        final String name = randomAlphaOfLength(10);\n        thread.setName(name);\n        final AtomicBoolean halt = new AtomicBoolean();\n        final AtomicInteger observedStatus = new AtomicInteger();\n        final AtomicReference<String> threadNameReference = new AtomicReference<>();\n        final AtomicReference<Throwable> throwableReference = new AtomicReference<>();\n        thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler() {\n\n            @Override\n            void halt(int status) {\n                halt.set(true);\n                observedStatus.set(status);\n            }\n\n            @Override\n            void onFatalUncaught(String threadName, Throwable t) {\n                threadNameReference.set(threadName);\n                throwableReference.set(t);\n            }\n\n            @Override\n            void onNonFatalUncaught(String threadName, Throwable t) {\n                fail();\n            }\n\n        });\n        thread.start();\n        thread.join();\n        assertTrue(halt.get());\n        final int status;\n        if (expectedStatus.containsKey(error.getClass())) {\n            status = expectedStatus.get(error.getClass());\n        } else {\n            status = 1;\n        }\n        assertThat(observedStatus.get(), equalTo(status));\n        assertThat(threadNameReference.get(), equalTo(name));\n        assertThat(throwableReference.get(), equalTo(error));\n    }\n","date":"2018-08-01 02:50:33","endLine":100,"groupId":"6951","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUncaughtError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/e50170d7e8085b35e726c727ee00c7c4031edc.src","preCode":"    public void testUncaughtError() throws InterruptedException {\n        final Error error = randomFrom(\n            new InternalError(),\n            new OutOfMemoryError(),\n            new StackOverflowError(),\n            new UnknownError(),\n            new IOError(new IOException(\"fatal\")),\n            new Error() {});\n        final Thread thread = new Thread(() -> { throw error; });\n        final String name = randomAlphaOfLength(10);\n        thread.setName(name);\n        final AtomicBoolean halt = new AtomicBoolean();\n        final AtomicInteger observedStatus = new AtomicInteger();\n        final AtomicReference<String> threadNameReference = new AtomicReference<>();\n        final AtomicReference<Throwable> throwableReference = new AtomicReference<>();\n        thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler(() -> \"testUncaughtError\") {\n\n            @Override\n            void halt(int status) {\n                halt.set(true);\n                observedStatus.set(status);\n            }\n\n            @Override\n            void onFatalUncaught(String threadName, Throwable t) {\n                threadNameReference.set(threadName);\n                throwableReference.set(t);\n            }\n\n            @Override\n            void onNonFatalUncaught(String threadName, Throwable t) {\n                fail();\n            }\n\n        });\n        thread.start();\n        thread.join();\n        assertTrue(halt.get());\n        final int status;\n        if (expectedStatus.containsKey(error.getClass())) {\n            status = expectedStatus.get(error.getClass());\n        } else {\n            status = 1;\n        }\n        assertThat(observedStatus.get(), equalTo(status));\n        assertThat(threadNameReference.get(), equalTo(name));\n        assertThat(throwableReference.get(), equalTo(error));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/ElasticsearchUncaughtExceptionHandlerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2018-08-01 02:50:33","commitOrder":2,"curCode":"    public void testUncaughtException() throws InterruptedException {\n        final RuntimeException e = new RuntimeException(\"boom\");\n        final Thread thread = new Thread(() -> { throw e; });\n        final String name = randomAlphaOfLength(10);\n        thread.setName(name);\n        final AtomicReference<String> threadNameReference = new AtomicReference<>();\n        final AtomicReference<Throwable> throwableReference = new AtomicReference<>();\n        thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler() {\n            @Override\n            void halt(int status) {\n                fail();\n            }\n\n            @Override\n            void onFatalUncaught(String threadName, Throwable t) {\n                fail();\n            }\n\n            @Override\n            void onNonFatalUncaught(String threadName, Throwable t) {\n                threadNameReference.set(threadName);\n                throwableReference.set(t);\n            }\n        });\n        thread.start();\n        thread.join();\n        assertThat(threadNameReference.get(), equalTo(name));\n        assertThat(throwableReference.get(), equalTo(e));\n    }\n","date":"2018-08-01 02:50:33","endLine":130,"groupId":"6952","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUncaughtException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/e50170d7e8085b35e726c727ee00c7c4031edc.src","preCode":"    public void testUncaughtException() throws InterruptedException {\n        final RuntimeException e = new RuntimeException(\"boom\");\n        final Thread thread = new Thread(() -> { throw e; });\n        final String name = randomAlphaOfLength(10);\n        thread.setName(name);\n        final AtomicReference<String> threadNameReference = new AtomicReference<>();\n        final AtomicReference<Throwable> throwableReference = new AtomicReference<>();\n        thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler(() -> \"testUncaughtException\") {\n            @Override\n            void halt(int status) {\n                fail();\n            }\n\n            @Override\n            void onFatalUncaught(String threadName, Throwable t) {\n                fail();\n            }\n\n            @Override\n            void onNonFatalUncaught(String threadName, Throwable t) {\n                threadNameReference.set(threadName);\n                throwableReference.set(t);\n            }\n        });\n        thread.start();\n        thread.join();\n        assertThat(threadNameReference.get(), equalTo(name));\n        assertThat(throwableReference.get(), equalTo(e));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/ElasticsearchUncaughtExceptionHandlerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"73cdfaf07be5c8afe00c5dd4e5c6741b152086d5","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-08-01 02:50:33","modifiedFileCount":"116","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-08-01 02:50:33","codes":[{"authorDate":"2019-04-27 00:32:48","commitOrder":3,"curCode":"    public void testUncaughtError() throws InterruptedException {\n        final Error error = randomFrom(\n            new InternalError(),\n            new OutOfMemoryError(),\n            new StackOverflowError(),\n            new UnknownError(),\n            new IOError(new IOException(\"fatal\")),\n            new Error() {});\n        final Thread thread = new Thread(() -> { throw error; });\n        final String name = randomAlphaOfLength(10);\n        thread.setName(name);\n        final AtomicBoolean halt = new AtomicBoolean();\n        final AtomicInteger observedStatus = new AtomicInteger();\n        final AtomicReference<String> threadNameReference = new AtomicReference<>();\n        final AtomicReference<Throwable> throwableReference = new AtomicReference<>();\n        thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler() {\n\n            @Override\n            void halt(int status) {\n                halt.set(true);\n                observedStatus.set(status);\n            }\n\n            @Override\n            void onFatalUncaught(String threadName, Throwable t) {\n                threadNameReference.set(threadName);\n                throwableReference.set(t);\n            }\n\n            @Override\n            void onNonFatalUncaught(String threadName, Throwable t) {\n                fail();\n            }\n\n        });\n        thread.start();\n        thread.join();\n        assertTrue(halt.get());\n        final int status;\n        if (EXPECTED_STATUS.containsKey(error.getClass())) {\n            status = EXPECTED_STATUS.get(error.getClass());\n        } else {\n            status = 1;\n        }\n        assertThat(observedStatus.get(), equalTo(status));\n        assertThat(threadNameReference.get(), equalTo(name));\n        assertThat(throwableReference.get(), equalTo(error));\n    }\n","date":"2019-04-27 00:32:48","endLine":90,"groupId":"106051","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUncaughtError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/df/415d713d1039b42a6c977c2fe7954b600bdbcf.src","preCode":"    public void testUncaughtError() throws InterruptedException {\n        final Error error = randomFrom(\n            new InternalError(),\n            new OutOfMemoryError(),\n            new StackOverflowError(),\n            new UnknownError(),\n            new IOError(new IOException(\"fatal\")),\n            new Error() {});\n        final Thread thread = new Thread(() -> { throw error; });\n        final String name = randomAlphaOfLength(10);\n        thread.setName(name);\n        final AtomicBoolean halt = new AtomicBoolean();\n        final AtomicInteger observedStatus = new AtomicInteger();\n        final AtomicReference<String> threadNameReference = new AtomicReference<>();\n        final AtomicReference<Throwable> throwableReference = new AtomicReference<>();\n        thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler() {\n\n            @Override\n            void halt(int status) {\n                halt.set(true);\n                observedStatus.set(status);\n            }\n\n            @Override\n            void onFatalUncaught(String threadName, Throwable t) {\n                threadNameReference.set(threadName);\n                throwableReference.set(t);\n            }\n\n            @Override\n            void onNonFatalUncaught(String threadName, Throwable t) {\n                fail();\n            }\n\n        });\n        thread.start();\n        thread.join();\n        assertTrue(halt.get());\n        final int status;\n        if (expectedStatus.containsKey(error.getClass())) {\n            status = expectedStatus.get(error.getClass());\n        } else {\n            status = 1;\n        }\n        assertThat(observedStatus.get(), equalTo(status));\n        assertThat(threadNameReference.get(), equalTo(name));\n        assertThat(throwableReference.get(), equalTo(error));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/ElasticsearchUncaughtExceptionHandlerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2018-08-01 02:50:33","commitOrder":3,"curCode":"    public void testUncaughtException() throws InterruptedException {\n        final RuntimeException e = new RuntimeException(\"boom\");\n        final Thread thread = new Thread(() -> { throw e; });\n        final String name = randomAlphaOfLength(10);\n        thread.setName(name);\n        final AtomicReference<String> threadNameReference = new AtomicReference<>();\n        final AtomicReference<Throwable> throwableReference = new AtomicReference<>();\n        thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler() {\n            @Override\n            void halt(int status) {\n                fail();\n            }\n\n            @Override\n            void onFatalUncaught(String threadName, Throwable t) {\n                fail();\n            }\n\n            @Override\n            void onNonFatalUncaught(String threadName, Throwable t) {\n                threadNameReference.set(threadName);\n                throwableReference.set(t);\n            }\n        });\n        thread.start();\n        thread.join();\n        assertThat(threadNameReference.get(), equalTo(name));\n        assertThat(throwableReference.get(), equalTo(e));\n    }\n","date":"2018-08-01 02:50:33","endLine":130,"groupId":"106051","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUncaughtException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a6/e50170d7e8085b35e726c727ee00c7c4031edc.src","preCode":"    public void testUncaughtException() throws InterruptedException {\n        final RuntimeException e = new RuntimeException(\"boom\");\n        final Thread thread = new Thread(() -> { throw e; });\n        final String name = randomAlphaOfLength(10);\n        thread.setName(name);\n        final AtomicReference<String> threadNameReference = new AtomicReference<>();\n        final AtomicReference<Throwable> throwableReference = new AtomicReference<>();\n        thread.setUncaughtExceptionHandler(new ElasticsearchUncaughtExceptionHandler() {\n            @Override\n            void halt(int status) {\n                fail();\n            }\n\n            @Override\n            void onFatalUncaught(String threadName, Throwable t) {\n                fail();\n            }\n\n            @Override\n            void onNonFatalUncaught(String threadName, Throwable t) {\n                threadNameReference.set(threadName);\n                throwableReference.set(t);\n            }\n        });\n        thread.start();\n        thread.join();\n        assertThat(threadNameReference.get(), equalTo(name));\n        assertThat(throwableReference.get(), equalTo(e));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/bootstrap/ElasticsearchUncaughtExceptionHandlerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"}],"commitId":"f48ddd53fd66cfef3032a17023cd9e2f88702af9","commitMessage":"@@@Use Java 11 collections conveniences everywhere (#41399)\n\nThis commit replaces all applicable uses with Java 11 collections\nconvenience methods.","date":"2019-04-27 00:32:48","modifiedFileCount":"142","status":"M","submitter":"Jason Tedor"}]
