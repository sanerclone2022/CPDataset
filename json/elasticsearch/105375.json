[{"authorTime":"2019-12-19 01:27:16","codes":[{"authorDate":"2019-08-20 22:52:50","commitOrder":2,"curCode":"    public void testCacheAggregation() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"value\");\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\");\n\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(aggregator.context().getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","date":"2019-08-20 22:52:50","endLine":638,"groupId":"51147","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4d/fdfd2fd91ca748d3a255088e822709a7711793.src","preCode":"    public void testCacheAggregation() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"value\");\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\");\n\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(aggregator.context().getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":598,"status":"NB"},{"authorDate":"2019-12-19 01:27:16","commitOrder":2,"curCode":"    public void testScriptCaching() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"value\");\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(aggregator.context().getQueryShardContext().isCacheable());\n\n        aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertTrue(avg.getValue() >= 0.0);\n        assertTrue(avg.getValue() <= 1.0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertFalse(aggregator.context().getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","date":"2019-12-19 01:27:16","endLine":711,"groupId":"42884","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testScriptCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/46/f08d786a856ab218aae60408d90a72cd63aa25.src","preCode":"    public void testScriptCaching() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"value\");\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(aggregator.context().getQueryShardContext().isCacheable());\n\n        aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertTrue(avg.getValue() >= 0.0);\n        assertTrue(avg.getValue() <= 1.0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertFalse(aggregator.context().getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":651,"status":"B"}],"commitId":"779462596b2914307b05284d2f577f13f8eb1eff","commitMessage":"@@@Scripting: Cache script results if deterministic (#50106)\n\nCache results from queries that use scripts if they use only\ndeterministic API calls.  Nondeterministic API calls are marked in the\nwhitelist with the `@nondeterministic` annotation.  Examples are\n`Math.random()` and `new Date()`.\n\nRefs: #49466","date":"2019-12-19 01:27:16","modifiedFileCount":"45","status":"M","submitter":"Stuart Tettemer"},{"authorTime":"2020-06-16 00:47:15","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":3,"curCode":"    public void testCacheAggregation() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\");\n\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(aggregator.context().getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","date":"2020-06-16 00:47:15","endLine":620,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ec/e0012e093fbd18c9b6128598e928701ee9fc77.src","preCode":"    public void testCacheAggregation() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"value\");\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\");\n\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(aggregator.context().getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":581,"status":"M"},{"authorDate":"2020-06-16 00:47:15","commitOrder":3,"curCode":"    public void testScriptCaching() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(aggregator.context().getQueryShardContext().isCacheable());\n\n        aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertTrue(avg.getValue() >= 0.0);\n        assertTrue(avg.getValue() <= 1.0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertFalse(aggregator.context().getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","date":"2020-06-16 00:47:15","endLine":685,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testScriptCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ec/e0012e093fbd18c9b6128598e928701ee9fc77.src","preCode":"    public void testScriptCaching() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.INTEGER);\n        fieldType.setName(\"value\");\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(aggregator.context().getQueryShardContext().isCacheable());\n\n        aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertTrue(avg.getValue() >= 0.0);\n        assertTrue(avg.getValue() <= 1.0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertFalse(aggregator.context().getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":626,"status":"M"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-10-27 21:12:58","codes":[{"authorDate":"2020-10-27 21:12:58","commitOrder":4,"curCode":"    public void testCacheAggregation() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\");\n\n        SearchContext context = createSearchContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","date":"2020-10-27 21:12:58","endLine":622,"groupId":"58571","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5d/95b42f6851688d882632cee749844002d77f30.src","preCode":"    public void testCacheAggregation() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\");\n\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(aggregator.context().getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":582,"status":"M"},{"authorDate":"2020-10-27 21:12:58","commitOrder":4,"curCode":"    public void testScriptCaching() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        SearchContext context = createSearchContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.getQueryShardContext().isCacheable());\n\n        aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        context = createSearchContext(indexSearcher, null, fieldType);\n        aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertTrue(avg.getValue() >= 0.0);\n        assertTrue(avg.getValue() <= 1.0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertFalse(context.getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","date":"2020-10-27 21:12:58","endLine":689,"groupId":"47558","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testScriptCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/5d/95b42f6851688d882632cee749844002d77f30.src","preCode":"    public void testScriptCaching() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(aggregator.context().getQueryShardContext().isCacheable());\n\n        aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertTrue(avg.getValue() >= 0.0);\n        assertTrue(avg.getValue() <= 1.0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertFalse(aggregator.context().getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":628,"status":"M"}],"commitId":"6ef0e5f5e8b73dcce542ba18d9931350a8219c13","commitMessage":"@@@Limit blast redius of SearchContext in aggs (#64068)\n\nThis takes away access to the `SearchContext` from all subclasses of\n`Aggregator`. Now they have access to three things:\n* BigArrays\n* The top level Query\n* The IndexSearcher\n\nThese are used by a whole bunch of aggs.\n\nThis is a useful change because `SearchContext` is very large and\ndifficult to mock in tests and difficult to reason about in general.\nLimiting what aggs can use when they are being collected helps with\nthis.\n\nWe still pass `SearchContext` to `AggregatorBase`'s ctor so the thing is\nstill around. But we can remove that access in a follow up.","date":"2020-10-27 21:12:58","modifiedFileCount":"69","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-10-29 05:33:27","codes":[{"authorDate":"2020-10-29 05:33:27","commitOrder":5,"curCode":"    public void testCacheAggregation() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\");\n\n        SearchContext context = createSearchContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","date":"2020-10-29 05:33:27","endLine":619,"groupId":"58571","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/1d726da54af0c3ab266e5b940077806a89b73c.src","preCode":"    public void testCacheAggregation() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\");\n\n        SearchContext context = createSearchContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"M"},{"authorDate":"2020-10-29 05:33:27","commitOrder":5,"curCode":"    public void testScriptCaching() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        SearchContext context = createSearchContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.getQueryShardContext().isCacheable());\n\n        aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        context = createSearchContext(indexSearcher, null, fieldType);\n        aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n\n        avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertTrue(avg.getValue() >= 0.0);\n        assertTrue(avg.getValue() <= 1.0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertFalse(context.getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","date":"2020-10-29 05:33:27","endLine":684,"groupId":"5857","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testScriptCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b4/1d726da54af0c3ab266e5b940077806a89b73c.src","preCode":"    public void testScriptCaching() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        SearchContext context = createSearchContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.getQueryShardContext().isCacheable());\n\n        aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        context = createSearchContext(indexSearcher, null, fieldType);\n        aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertTrue(avg.getValue() >= 0.0);\n        assertTrue(avg.getValue() <= 1.0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertFalse(context.getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":625,"status":"M"}],"commitId":"3af540b50dd526ee035c20d691d8ec32e8b5068a","commitMessage":"@@@Remove aggregation's postCollect phase (#64016)\n\nAfter #63811 it became clear to me that `postCollect` is kind of\ndangerous and not all that useful. So this removes it.\n\nThe trouble with `postCollect` is that it all happened right after we\nfinished calling `collect` on the `LeafBucketCollectors` but before we\nbuilt the aggregation results. But in #63811 we found out that we can't\ncall `postCollect` on the children of `parent` or `child` aggregators\nuntil we know which *which* aggregation results we're building.\n\nSo this removes `postCollect` and moves all of the things we did at\npost-collect phase into `buildAggregations` or into hooks called in\nthose methods.\n","date":"2020-10-29 05:33:27","modifiedFileCount":"41","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-12-08 23:22:34","codes":[{"authorDate":"2020-12-08 23:22:34","commitOrder":6,"curCode":"    public void testCacheAggregation() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\");\n\n        AggregationContext context = createAggregationContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","date":"2020-12-08 23:22:34","endLine":619,"groupId":"58571","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/4bb25cc600eab19af79d0d6c3665bef6bd3cbf.src","preCode":"    public void testCacheAggregation() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\");\n\n        SearchContext context = createSearchContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"M"},{"authorDate":"2020-12-08 23:22:34","commitOrder":6,"curCode":"    public void testScriptCaching() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        AggregationContext context = createAggregationContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.isCacheable());\n\n        aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        context = createAggregationContext(indexSearcher, null, fieldType);\n        aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n\n        avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertTrue(avg.getValue() >= 0.0);\n        assertTrue(avg.getValue() <= 1.0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertFalse(context.isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","date":"2020-12-08 23:22:34","endLine":684,"groupId":"5857","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testScriptCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b7/4bb25cc600eab19af79d0d6c3665bef6bd3cbf.src","preCode":"    public void testScriptCaching() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        SearchContext context = createSearchContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.getQueryShardContext().isCacheable());\n\n        aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        context = createSearchContext(indexSearcher, null, fieldType);\n        aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n\n        avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertTrue(avg.getValue() >= 0.0);\n        assertTrue(avg.getValue() <= 1.0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertFalse(context.getQueryShardContext().isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":625,"status":"M"}],"commitId":"3e45318d87958118be7688f316234b1afb28765b","commitMessage":"@@@Remove BigArrays from SearchContext (#65981)\n\nWe've been trying to shrink the big.  mutable `SearchContext`. I'm doing\nmy part by removing `BigArrays` from it. Doing that required reworking\nhow we test `Aggregator`s to not need `SearchContext`. So I did that\ntoo. Mostly. `top_hits` still needs a `SubSearchContext` which we can\nstill build.  but it is now quite contained.\n\n","date":"2020-12-08 23:22:34","modifiedFileCount":"21","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-02-11 08:12:50","codes":[{"authorDate":"2021-02-11 08:12:50","commitOrder":7,"curCode":"    public void testCacheAggregation() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\");\n\n        AggregationContext context = createAggregationContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","date":"2021-02-11 08:12:50","endLine":612,"groupId":"105375","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheAggregation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/49/d3ca9bf71aadf82201bcddc0c1f4f167400f35.src","preCode":"    public void testCacheAggregation() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\");\n\n        AggregationContext context = createAggregationContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"M"},{"authorDate":"2021-02-11 08:12:50","commitOrder":7,"curCode":"    public void testScriptCaching() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        AggregationContext context = createAggregationContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.isCacheable());\n\n        aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        context = createAggregationContext(indexSearcher, null, fieldType);\n        aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n        aggregator.postCollection();\n\n        avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertTrue(avg.getValue() >= 0.0);\n        assertTrue(avg.getValue() <= 1.0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertFalse(context.isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","date":"2021-02-11 08:12:50","endLine":679,"groupId":"105375","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testScriptCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/49/d3ca9bf71aadf82201bcddc0c1f4f167400f35.src","preCode":"    public void testScriptCaching() throws IOException {\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        final int numDocs = 10;\n        for (int i = 0; i < numDocs; i++) {\n            indexWriter.addDocument(singleton(new NumericDocValuesField(\"value\", i + 1)));\n        }\n        indexWriter.close();\n\n        Directory unmappedDirectory = newDirectory();\n        RandomIndexWriter unmappedIndexWriter = new RandomIndexWriter(random(), unmappedDirectory);\n        unmappedIndexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexReader unamappedIndexReader = DirectoryReader.open(unmappedDirectory);\n        MultiReader multiReader = new MultiReader(indexReader, unamappedIndexReader);\n        IndexSearcher indexSearcher = newSearcher(multiReader, true, true);\n\n        MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value\", NumberFieldMapper.NumberType.INTEGER);\n        AvgAggregationBuilder aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, VALUE_SCRIPT, Collections.emptyMap()));\n\n        AggregationContext context = createAggregationContext(indexSearcher, null, fieldType);\n        AvgAggregator aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n\n        InternalAvg avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertEquals(5.5, avg.getValue(), 0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertTrue(context.isCacheable());\n\n        aggregationBuilder = new AvgAggregationBuilder(\"avg\")\n            .field(\"value\")\n            .script(new Script(ScriptType.INLINE, MockScriptEngine.NAME, RANDOM_SCRIPT, Collections.emptyMap()));\n\n        context = createAggregationContext(indexSearcher, null, fieldType);\n        aggregator = createAggregator(aggregationBuilder, context);\n        aggregator.preCollection();\n        indexSearcher.search(new MatchAllDocsQuery(), aggregator);\n\n        avg = (InternalAvg) aggregator.buildAggregation(0L);\n\n        assertTrue(avg.getValue() >= 0.0);\n        assertTrue(avg.getValue() <= 1.0);\n        assertEquals(\"avg\", avg.getName());\n        assertTrue(AggregationInspectionHelper.hasValue(avg));\n\n        \r\n        assertFalse(context.isCacheable());\n\n        multiReader.close();\n        directory.close();\n        unmappedDirectory.close();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":618,"status":"M"}],"commitId":"0bbc6addd9b5314db9115fa4ac10211e43ba2d66","commitMessage":"@@@Revert \"Remove aggregation's postCollect phase (#68615)\n\nThis partially reverts #64016 and  and adds #67839 and adds\nadditional tests that would have caught issues with the changes\nin #64016. It's mostly Nik's code.  I am just cleaning things up\na bit.\n\nCo-authored-by: Nik Everett <nik9000@gmail.com>\n","date":"2021-02-11 08:12:50","modifiedFileCount":"40","status":"M","submitter":"Igor Motov"}]
