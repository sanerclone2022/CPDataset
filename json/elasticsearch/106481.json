[{"authorTime":"2020-05-07 08:20:26","codes":[{"authorDate":"2020-05-07 08:20:26","commitOrder":1,"curCode":"    public void testSpecifiedIndexUnavailableSingleIndexThatIsClosed() throws Exception {\n        assertAcked(prepareCreate(\"test1\"));\n        \r\n        \r\n        \r\n        ensureGreen();\n\n        assertAcked(client().admin().indices().prepareClose(\"test1\"));\n\n        IndicesOptions options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), true);\n        verify(msearch(options, \"test1\"), true);\n        verify(clearCache(\"test1\").setIndicesOptions(options), true);\n        verify(_flush(\"test1\").setIndicesOptions(options),true);\n        verify(segments(\"test1\").setIndicesOptions(options), true);\n        verify(stats(\"test1\").setIndicesOptions(options), true);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), true);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), true);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), true);\n        verify(getAliases(\"test1\").setIndicesOptions(options), true);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getSettings(\"test1\").setIndicesOptions(options), true);\n\n        options = IndicesOptions.fromOptions(true, options.allowNoIndices(), options.expandWildcardsOpen(),\n            options.expandWildcardsClosed(), options);\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(stats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n\n        assertAcked(client().admin().indices().prepareOpen(\"test1\"));\n        ensureYellow();\n\n        options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(stats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n    }\n","date":"2020-05-07 08:20:26","endLine":201,"groupId":"4527","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpecifiedIndexUnavailableSingleIndexThatIsClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/39/b87ab4030fa80f7cd4b00d32948257dbfe2c34.src","preCode":"    public void testSpecifiedIndexUnavailableSingleIndexThatIsClosed() throws Exception {\n        assertAcked(prepareCreate(\"test1\"));\n        \r\n        \r\n        \r\n        ensureGreen();\n\n        assertAcked(client().admin().indices().prepareClose(\"test1\"));\n\n        IndicesOptions options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), true);\n        verify(msearch(options, \"test1\"), true);\n        verify(clearCache(\"test1\").setIndicesOptions(options), true);\n        verify(_flush(\"test1\").setIndicesOptions(options),true);\n        verify(segments(\"test1\").setIndicesOptions(options), true);\n        verify(stats(\"test1\").setIndicesOptions(options), true);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), true);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), true);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), true);\n        verify(getAliases(\"test1\").setIndicesOptions(options), true);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getSettings(\"test1\").setIndicesOptions(options), true);\n\n        options = IndicesOptions.fromOptions(true, options.allowNoIndices(), options.expandWildcardsOpen(),\n            options.expandWildcardsClosed(), options);\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(stats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n\n        assertAcked(client().admin().indices().prepareOpen(\"test1\"));\n        ensureYellow();\n\n        options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(stats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/indices/IndicesOptionsIntegrationIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"},{"authorDate":"2020-05-07 08:20:26","commitOrder":1,"curCode":"    public void testSpecifiedIndexUnavailableSingleIndex() throws Exception {\n        IndicesOptions options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), true);\n        verify(msearch(options, \"test1\"), true);\n        verify(clearCache(\"test1\").setIndicesOptions(options), true);\n        verify(_flush(\"test1\").setIndicesOptions(options),true);\n        verify(segments(\"test1\").setIndicesOptions(options), true);\n        verify(stats(\"test1\").setIndicesOptions(options), true);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), true);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), true);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), true);\n        verify(getAliases(\"test1\").setIndicesOptions(options), true);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getSettings(\"test1\").setIndicesOptions(options), true);\n\n        options = IndicesOptions.fromOptions(true, options.allowNoIndices(), options.expandWildcardsOpen(),\n            options.expandWildcardsClosed(), options);\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(stats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n\n        assertAcked(prepareCreate(\"test1\"));\n\n        options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(stats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n    }\n","date":"2020-05-07 08:20:26","endLine":251,"groupId":"4527","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpecifiedIndexUnavailableSingleIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/39/b87ab4030fa80f7cd4b00d32948257dbfe2c34.src","preCode":"    public void testSpecifiedIndexUnavailableSingleIndex() throws Exception {\n        IndicesOptions options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), true);\n        verify(msearch(options, \"test1\"), true);\n        verify(clearCache(\"test1\").setIndicesOptions(options), true);\n        verify(_flush(\"test1\").setIndicesOptions(options),true);\n        verify(segments(\"test1\").setIndicesOptions(options), true);\n        verify(stats(\"test1\").setIndicesOptions(options), true);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), true);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), true);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), true);\n        verify(getAliases(\"test1\").setIndicesOptions(options), true);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getSettings(\"test1\").setIndicesOptions(options), true);\n\n        options = IndicesOptions.fromOptions(true, options.allowNoIndices(), options.expandWildcardsOpen(),\n            options.expandWildcardsClosed(), options);\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(stats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n\n        assertAcked(prepareCreate(\"test1\"));\n\n        options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(stats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/indices/IndicesOptionsIntegrationIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"B"}],"commitId":"cabe6a330514f0f80f3b95be8763082b25efce89","commitMessage":"@@@Create plugin for internalClusterTest task (#55896)\n\nThis commit creates a new gradle plugin to provide a separate task name\nand source set for running ESIntegTestCase tests. The only project\nconverted to use the new plugin in this PR is server.  as an example. The\nremaining cases in x-pack will be handled in followups.","date":"2020-05-07 08:20:26","modifiedFileCount":"5","status":"B","submitter":"Ryan Ernst"},{"authorTime":"2020-05-11 17:12:07","codes":[{"authorDate":"2020-05-11 17:12:07","commitOrder":2,"curCode":"    public void testSpecifiedIndexUnavailableSingleIndexThatIsClosed() throws Exception {\n        assertAcked(prepareCreate(\"test1\"));\n        \r\n        \r\n        \r\n        ensureGreen();\n\n        assertAcked(client().admin().indices().prepareClose(\"test1\"));\n\n        IndicesOptions options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), true);\n        verify(msearch(options, \"test1\"), true);\n        verify(clearCache(\"test1\").setIndicesOptions(options), true);\n        verify(_flush(\"test1\").setIndicesOptions(options),true);\n        verify(segments(\"test1\").setIndicesOptions(options), true);\n        verify(indicesStats(\"test1\").setIndicesOptions(options), true);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), true);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), true);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), true);\n        verify(getAliases(\"test1\").setIndicesOptions(options), true);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getSettings(\"test1\").setIndicesOptions(options), true);\n\n        options = IndicesOptions.fromOptions(true, options.allowNoIndices(), options.expandWildcardsOpen(),\n            options.expandWildcardsClosed(), options);\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(indicesStats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n\n        assertAcked(client().admin().indices().prepareOpen(\"test1\"));\n        ensureYellow();\n\n        options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(indicesStats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n    }\n","date":"2020-05-11 17:12:07","endLine":201,"groupId":"106481","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpecifiedIndexUnavailableSingleIndexThatIsClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/da/9afc4bb55409246a4b95d292e5f41cd42b0a3e.src","preCode":"    public void testSpecifiedIndexUnavailableSingleIndexThatIsClosed() throws Exception {\n        assertAcked(prepareCreate(\"test1\"));\n        \r\n        \r\n        \r\n        ensureGreen();\n\n        assertAcked(client().admin().indices().prepareClose(\"test1\"));\n\n        IndicesOptions options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), true);\n        verify(msearch(options, \"test1\"), true);\n        verify(clearCache(\"test1\").setIndicesOptions(options), true);\n        verify(_flush(\"test1\").setIndicesOptions(options),true);\n        verify(segments(\"test1\").setIndicesOptions(options), true);\n        verify(stats(\"test1\").setIndicesOptions(options), true);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), true);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), true);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), true);\n        verify(getAliases(\"test1\").setIndicesOptions(options), true);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getSettings(\"test1\").setIndicesOptions(options), true);\n\n        options = IndicesOptions.fromOptions(true, options.allowNoIndices(), options.expandWildcardsOpen(),\n            options.expandWildcardsClosed(), options);\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(stats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n\n        assertAcked(client().admin().indices().prepareOpen(\"test1\"));\n        ensureYellow();\n\n        options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(stats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/indices/IndicesOptionsIntegrationIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2020-05-11 17:12:07","commitOrder":2,"curCode":"    public void testSpecifiedIndexUnavailableSingleIndex() throws Exception {\n        IndicesOptions options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), true);\n        verify(msearch(options, \"test1\"), true);\n        verify(clearCache(\"test1\").setIndicesOptions(options), true);\n        verify(_flush(\"test1\").setIndicesOptions(options),true);\n        verify(segments(\"test1\").setIndicesOptions(options), true);\n        verify(indicesStats(\"test1\").setIndicesOptions(options), true);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), true);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), true);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), true);\n        verify(getAliases(\"test1\").setIndicesOptions(options), true);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getSettings(\"test1\").setIndicesOptions(options), true);\n\n        options = IndicesOptions.fromOptions(true, options.allowNoIndices(), options.expandWildcardsOpen(),\n            options.expandWildcardsClosed(), options);\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(indicesStats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n\n        assertAcked(prepareCreate(\"test1\"));\n\n        options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(indicesStats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n    }\n","date":"2020-05-11 17:12:07","endLine":251,"groupId":"106481","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpecifiedIndexUnavailableSingleIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/da/9afc4bb55409246a4b95d292e5f41cd42b0a3e.src","preCode":"    public void testSpecifiedIndexUnavailableSingleIndex() throws Exception {\n        IndicesOptions options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), true);\n        verify(msearch(options, \"test1\"), true);\n        verify(clearCache(\"test1\").setIndicesOptions(options), true);\n        verify(_flush(\"test1\").setIndicesOptions(options),true);\n        verify(segments(\"test1\").setIndicesOptions(options), true);\n        verify(stats(\"test1\").setIndicesOptions(options), true);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), true);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), true);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), true);\n        verify(getAliases(\"test1\").setIndicesOptions(options), true);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getMapping(\"test1\").setIndicesOptions(options), true);\n        verify(getSettings(\"test1\").setIndicesOptions(options), true);\n\n        options = IndicesOptions.fromOptions(true, options.allowNoIndices(), options.expandWildcardsOpen(),\n            options.expandWildcardsClosed(), options);\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(stats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n\n        assertAcked(prepareCreate(\"test1\"));\n\n        options = IndicesOptions.strictExpandOpenAndForbidClosed();\n        verify(search(\"test1\").setIndicesOptions(options), false);\n        verify(msearch(options, \"test1\"), false);\n        verify(clearCache(\"test1\").setIndicesOptions(options), false);\n        verify(_flush(\"test1\").setIndicesOptions(options),false);\n        verify(segments(\"test1\").setIndicesOptions(options), false);\n        verify(stats(\"test1\").setIndicesOptions(options), false);\n        verify(forceMerge(\"test1\").setIndicesOptions(options), false);\n        verify(refreshBuilder(\"test1\").setIndicesOptions(options), false);\n        verify(validateQuery(\"test1\").setIndicesOptions(options), false);\n        verify(getAliases(\"test1\").setIndicesOptions(options), false);\n        verify(getFieldMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getMapping(\"test1\").setIndicesOptions(options), false);\n        verify(getSettings(\"test1\").setIndicesOptions(options), false);\n    }\n","realPath":"server/src/internalClusterTest/java/org/elasticsearch/indices/IndicesOptionsIntegrationIT.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"77aa2362bbb843bce4bc2fceb8b1c65afa2202a6","commitMessage":"@@@Allow a number of broadcast transport actions to resolve data streams (#55726)\n\nChange TransportBroadcastByNodeAction and TransportBroadcastReplicationAction\nto be able to resolve data streams by default. Implementations can change this ability.\n\nThis change allows to following APIs to resolve data streams: flush. \nrefresh (already supported data streams).  force merge.  clear indices cache. \nindices stats (already supported data streams).  segments.  upgrade stats.  \nupgrade.  validate query.  searchable snapshots stats.  clear searchable snapshots cache and\nreload analyzers APIs.\n\nRelates to #53100","date":"2020-05-11 17:12:07","modifiedFileCount":"6","status":"M","submitter":"Martijn van Groningen"}]
