[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testPluginPreConfiguredCharFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {\n                return Arrays.asList(\n                        PreConfiguredCharFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendCharFilter(tokenStream, \"no_version\")),\n                        PreConfiguredCharFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredCharFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.no_version.char_filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.lucene_version.char_filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.char_filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","date":"2018-04-26 03:22:53","endLine":281,"groupId":"59449","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPluginPreConfiguredCharFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/c98885f909625979c4af19c69a0da8be4dc77f.src","preCode":"    public void testPluginPreConfiguredCharFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {\n                return Arrays.asList(\n                        PreConfiguredCharFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendCharFilter(tokenStream, \"no_version\")),\n                        PreConfiguredCharFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredCharFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.no_version.char_filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.lucene_version.char_filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.char_filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/analysis/AnalysisModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testPluginPreConfiguredTokenFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {\n                return Arrays.asList(\n                        PreConfiguredTokenFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendTokenFilter(tokenStream, \"no_version\")),\n                        PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.no_version.filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.lucene_version.filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","date":"2018-04-26 03:22:53","endLine":326,"groupId":"59449","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPluginPreConfiguredTokenFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/c98885f909625979c4af19c69a0da8be4dc77f.src","preCode":"    public void testPluginPreConfiguredTokenFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {\n                return Arrays.asList(\n                        PreConfiguredTokenFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendTokenFilter(tokenStream, \"no_version\")),\n                        PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.no_version.filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.lucene_version.filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/analysis/AnalysisModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-05-30 03:29:53","codes":[{"authorDate":"2018-05-30 03:29:53","commitOrder":2,"curCode":"    public void testPluginPreConfiguredCharFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {\n                return Arrays.asList(\n                        PreConfiguredCharFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendCharFilter(tokenStream, \"no_version\")),\n                        PreConfiguredCharFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredCharFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n\n            @Override\n            public Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {\n                \r\n                return singletonMap(\"keyword\", (indexSettings, environment, name, settings) ->\n                    () -> new MockTokenizer(MockTokenizer.KEYWORD, false));\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.no_version.char_filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.lucene_version.char_filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.char_filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","date":"2018-05-30 03:29:53","endLine":293,"groupId":"56370","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPluginPreConfiguredCharFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a3/1dcc81f722eafd401dfbfbcad17756719e6b4c.src","preCode":"    public void testPluginPreConfiguredCharFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {\n                return Arrays.asList(\n                        PreConfiguredCharFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendCharFilter(tokenStream, \"no_version\")),\n                        PreConfiguredCharFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredCharFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.no_version.char_filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.lucene_version.char_filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.char_filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/analysis/AnalysisModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"},{"authorDate":"2018-05-30 03:29:53","commitOrder":2,"curCode":"    public void testPluginPreConfiguredTokenFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {\n                return Arrays.asList(\n                        PreConfiguredTokenFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendTokenFilter(tokenStream, \"no_version\")),\n                        PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.no_version.filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.lucene_version.filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","date":"2018-05-30 03:29:53","endLine":338,"groupId":"59449","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPluginPreConfiguredTokenFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a3/1dcc81f722eafd401dfbfbcad17756719e6b4c.src","preCode":"    public void testPluginPreConfiguredTokenFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {\n                return Arrays.asList(\n                        PreConfiguredTokenFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendTokenFilter(tokenStream, \"no_version\")),\n                        PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.no_version.filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.lucene_version.filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/analysis/AnalysisModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"}],"commitId":"bdf70e4f2fdbfe73c7fd7eb7a8b8aaf87e3eb80b","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-05-30 03:29:53","modifiedFileCount":"70","status":"M","submitter":"Tal Levy"},{"authorTime":"2018-05-30 03:29:53","codes":[{"authorDate":"2019-07-04 18:23:27","commitOrder":3,"curCode":"    public void testPluginPreConfiguredCharFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {\n                return Arrays.asList(\n                        PreConfiguredCharFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendCharFilter(tokenStream, \"no_version\")),\n                        PreConfiguredCharFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredCharFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n\n            @Override\n            public Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {\n                \r\n                return singletonMap(\"keyword\", (indexSettings, environment, name, settings)\n                    -> TokenizerFactory.newFactory(name, () -> new MockTokenizer(MockTokenizer.KEYWORD, false)));\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.no_version.char_filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.lucene_version.char_filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.char_filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","date":"2019-07-04 18:23:27","endLine":292,"groupId":"29468","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPluginPreConfiguredCharFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/67/5305a17cce6cf3836b922782c0115b6a046141.src","preCode":"    public void testPluginPreConfiguredCharFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {\n                return Arrays.asList(\n                        PreConfiguredCharFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendCharFilter(tokenStream, \"no_version\")),\n                        PreConfiguredCharFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredCharFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n\n            @Override\n            public Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {\n                \r\n                return singletonMap(\"keyword\", (indexSettings, environment, name, settings) ->\n                    () -> new MockTokenizer(MockTokenizer.KEYWORD, false));\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.no_version.char_filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.lucene_version.char_filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.char_filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/analysis/AnalysisModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"},{"authorDate":"2018-05-30 03:29:53","commitOrder":3,"curCode":"    public void testPluginPreConfiguredTokenFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {\n                return Arrays.asList(\n                        PreConfiguredTokenFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendTokenFilter(tokenStream, \"no_version\")),\n                        PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.no_version.filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.lucene_version.filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","date":"2018-05-30 03:29:53","endLine":338,"groupId":"59449","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPluginPreConfiguredTokenFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/a3/1dcc81f722eafd401dfbfbcad17756719e6b4c.src","preCode":"    public void testPluginPreConfiguredTokenFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {\n                return Arrays.asList(\n                        PreConfiguredTokenFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendTokenFilter(tokenStream, \"no_version\")),\n                        PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.no_version.filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.lucene_version.filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/analysis/AnalysisModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"N"}],"commitId":"60b460d38a1d3a88e208fb7f1285640804866450","commitMessage":"@@@Add name() method to TokenizerFactory (#43909)\n\nThis brings TokenizerFactory into line with CharFilterFactory and TokenFilterFactory. \nand removes the need to pass around tokenizer names when building custom analyzers.\n\nAs this means that TokenizerFactory is no longer a functional interface.  the commit also\nadds a factory method to TokenizerFactory to make construction simpler.","date":"2019-07-04 18:23:27","modifiedFileCount":"40","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void testPluginPreConfiguredCharFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {\n                return Arrays.asList(\n                        PreConfiguredCharFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendCharFilter(tokenStream, \"no_version\")),\n                        PreConfiguredCharFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredCharFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n\n            @Override\n            public Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {\n                \r\n                return singletonMap(\"keyword\", (indexSettings, environment, name, settings)\n                    -> TokenizerFactory.newFactory(name, () -> new MockTokenizer(MockTokenizer.KEYWORD, false)));\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.no_version.char_filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.lucene_version.char_filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.char_filter\", \"elasticsearch_version\")\n                .put(IndexMetadata.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","date":"2020-04-01 03:52:01","endLine":291,"groupId":"103771","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPluginPreConfiguredCharFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/4c6f495fbfd3054fe507453db2ddb4d757c797.src","preCode":"    public void testPluginPreConfiguredCharFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredCharFilter> getPreConfiguredCharFilters() {\n                return Arrays.asList(\n                        PreConfiguredCharFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendCharFilter(tokenStream, \"no_version\")),\n                        PreConfiguredCharFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendCharFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredCharFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendCharFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n\n            @Override\n            public Map<String, AnalysisProvider<TokenizerFactory>> getTokenizers() {\n                \r\n                return singletonMap(\"keyword\", (indexSettings, environment, name, settings)\n                    -> TokenizerFactory.newFactory(name, () -> new MockTokenizer(MockTokenizer.KEYWORD, false)));\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.no_version.char_filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.lucene_version.char_filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"keyword\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.char_filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/analysis/AnalysisModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":4,"curCode":"    public void testPluginPreConfiguredTokenFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {\n                return Arrays.asList(\n                        PreConfiguredTokenFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendTokenFilter(tokenStream, \"no_version\")),\n                        PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.no_version.filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.lucene_version.filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.filter\", \"elasticsearch_version\")\n                .put(IndexMetadata.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","date":"2020-04-01 03:52:01","endLine":336,"groupId":"103771","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPluginPreConfiguredTokenFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/cc/4c6f495fbfd3054fe507453db2ddb4d757c797.src","preCode":"    public void testPluginPreConfiguredTokenFilters() throws IOException {\n        boolean noVersionSupportsMultiTerm = randomBoolean();\n        boolean luceneVersionSupportsMultiTerm = randomBoolean();\n        boolean elasticsearchVersionSupportsMultiTerm = randomBoolean();\n        AnalysisRegistry registry = new AnalysisModule(TestEnvironment.newEnvironment(emptyNodeSettings),\n                singletonList(new AnalysisPlugin() {\n            @Override\n            public List<PreConfiguredTokenFilter> getPreConfiguredTokenFilters() {\n                return Arrays.asList(\n                        PreConfiguredTokenFilter.singleton(\"no_version\", noVersionSupportsMultiTerm,\n                                tokenStream -> new AppendTokenFilter(tokenStream, \"no_version\")),\n                        PreConfiguredTokenFilter.luceneVersion(\"lucene_version\", luceneVersionSupportsMultiTerm,\n                                (tokenStream, luceneVersion) -> new AppendTokenFilter(tokenStream, luceneVersion.toString())),\n                        PreConfiguredTokenFilter.elasticsearchVersion(\"elasticsearch_version\", elasticsearchVersionSupportsMultiTerm,\n                                (tokenStream, esVersion) -> new AppendTokenFilter(tokenStream, esVersion.toString()))\n                        );\n            }\n        })).getAnalysisRegistry();\n\n        Version version = VersionUtils.randomVersion(random());\n        IndexAnalyzers analyzers = getIndexAnalyzers(registry, Settings.builder()\n                .put(\"index.analysis.analyzer.no_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.no_version.filter\", \"no_version\")\n                .put(\"index.analysis.analyzer.lucene_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.lucene_version.filter\", \"lucene_version\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.tokenizer\", \"standard\")\n                .put(\"index.analysis.analyzer.elasticsearch_version.filter\", \"elasticsearch_version\")\n                .put(IndexMetaData.SETTING_VERSION_CREATED, version)\n                .build());\n        assertTokenStreamContents(analyzers.get(\"no_version\").tokenStream(\"\", \"test\"), new String[] {\"testno_version\"});\n        assertTokenStreamContents(analyzers.get(\"lucene_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version.luceneVersion});\n        assertTokenStreamContents(analyzers.get(\"elasticsearch_version\").tokenStream(\"\", \"test\"), new String[] {\"test\" + version});\n\n        assertEquals(\"test\" + (noVersionSupportsMultiTerm ? \"no_version\" : \"\"),\n                analyzers.get(\"no_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (luceneVersionSupportsMultiTerm ? version.luceneVersion.toString() : \"\"),\n                analyzers.get(\"lucene_version\").normalize(\"\", \"test\").utf8ToString());\n        assertEquals(\"test\" + (elasticsearchVersionSupportsMultiTerm ? version.toString() : \"\"),\n                analyzers.get(\"elasticsearch_version\").normalize(\"\", \"test\").utf8ToString());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/indices/analysis/AnalysisModuleTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"}]
