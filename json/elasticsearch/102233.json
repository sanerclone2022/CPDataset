[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testDiskThreshold() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.8)\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"node1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"node2\", \"/dev/null\", 100, 35)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"node3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"node4\", \"/dev/null\", 100, 80)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo;\n            }\n        };\n        AllocationService strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        final RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"60%\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .build();\n\n        deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.5)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.6)\n                .build();\n\n        deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n    }\n","date":"2018-04-26 03:22:53","endLine":259,"groupId":"29449","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiskThreshold","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/58/d19fb61cf053aeebac1b5beaf3c48d78b9bf34.src","preCode":"    public void testDiskThreshold() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.8)\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"node1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"node2\", \"/dev/null\", 100, 35)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"node3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"node4\", \"/dev/null\", 100, 80)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo;\n            }\n        };\n        AllocationService strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        final RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"60%\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .build();\n\n        deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.5)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.6)\n                .build();\n\n        deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testDiskThresholdWithAbsoluteSizes() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"9b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"5b\")\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"n3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"n4\", \"/dev/null\", 100, 80)); \r\n        usagesBuilder.put(\"node5\", new DiskUsage(\"node5\", \"n5\", \"/dev/null\", 100, 85)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo;\n            }\n        };\n\n        AllocationService strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding node1 and node2 node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        String nodeWithPrimary, nodeWithoutPrimary;\n        if (clusterState.getRoutingNodes().node(\"node1\").size() == 1) {\n            nodeWithPrimary = \"node1\";\n            nodeWithoutPrimary = \"node2\";\n        } else {\n            nodeWithPrimary = \"node2\";\n            nodeWithoutPrimary = \"node1\";\n        }\n        logger.info(\"--> nodeWithPrimary: {}\", nodeWithPrimary);\n        logger.info(\"--> nodeWithoutPrimary: {}\", nodeWithoutPrimary);\n\n        \r\n        usagesBuilder = ImmutableOpenMap.builder(usages);\n        usagesBuilder.put(nodeWithoutPrimary, new DiskUsage(nodeWithoutPrimary, \"\", \"/dev/null\", 100, 35)); \r\n        usages = usagesBuilder.build();\n        final ClusterInfo clusterInfo2 = new DevNullClusterInfo(usages, usages, shardSizes);\n        cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo2;\n            }\n        };\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(2));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n\n        \r\n        \r\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"20b\")\n                .build();\n\n        deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"50b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"30b\")\n                .build();\n\n        deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithPrimary).size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithoutPrimary).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n\n        logger.info(\"--> adding node5\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> final cluster state:\");\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node5\").size(), equalTo(1));\n    }\n","date":"2018-04-26 03:22:53","endLine":514,"groupId":"64429","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiskThresholdWithAbsoluteSizes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/58/d19fb61cf053aeebac1b5beaf3c48d78b9bf34.src","preCode":"    public void testDiskThresholdWithAbsoluteSizes() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"9b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"5b\")\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"n3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"n4\", \"/dev/null\", 100, 80)); \r\n        usagesBuilder.put(\"node5\", new DiskUsage(\"node5\", \"n5\", \"/dev/null\", 100, 85)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo;\n            }\n        };\n\n        AllocationService strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding node1 and node2 node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        String nodeWithPrimary, nodeWithoutPrimary;\n        if (clusterState.getRoutingNodes().node(\"node1\").size() == 1) {\n            nodeWithPrimary = \"node1\";\n            nodeWithoutPrimary = \"node2\";\n        } else {\n            nodeWithPrimary = \"node2\";\n            nodeWithoutPrimary = \"node1\";\n        }\n        logger.info(\"--> nodeWithPrimary: {}\", nodeWithPrimary);\n        logger.info(\"--> nodeWithoutPrimary: {}\", nodeWithoutPrimary);\n\n        \r\n        usagesBuilder = ImmutableOpenMap.builder(usages);\n        usagesBuilder.put(nodeWithoutPrimary, new DiskUsage(nodeWithoutPrimary, \"\", \"/dev/null\", 100, 35)); \r\n        usages = usagesBuilder.build();\n        final ClusterInfo clusterInfo2 = new DevNullClusterInfo(usages, usages, shardSizes);\n        cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo2;\n            }\n        };\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(2));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n\n        \r\n        \r\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"20b\")\n                .build();\n\n        deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"50b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"30b\")\n                .build();\n\n        deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithPrimary).size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithoutPrimary).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n\n        logger.info(\"--> adding node5\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> final cluster state:\");\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node5\").size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-11-02 00:05:41","codes":[{"authorDate":"2018-11-02 00:05:41","commitOrder":2,"curCode":"    public void testDiskThreshold() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.8)\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"node1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"node2\", \"/dev/null\", 100, 35)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"node3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"node4\", \"/dev/null\", 100, 80)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo;\n            }\n        };\n        AllocationService strategy = new AllocationService(deciders,\n                new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        final RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"60%\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.5)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.6)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n    }\n","date":"2018-11-02 01:13:02","endLine":250,"groupId":"29449","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiskThreshold","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/24/838b22d47e24f85d8a6d8121cb9ce4398d9f0f.src","preCode":"    public void testDiskThreshold() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.8)\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"node1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"node2\", \"/dev/null\", 100, 35)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"node3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"node4\", \"/dev/null\", 100, 80)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo;\n            }\n        };\n        AllocationService strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        final RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"60%\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .build();\n\n        deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.5)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.6)\n                .build();\n\n        deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2018-11-02 00:05:41","commitOrder":2,"curCode":"    public void testDiskThresholdWithAbsoluteSizes() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"9b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"5b\")\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"n3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"n4\", \"/dev/null\", 100, 80)); \r\n        usagesBuilder.put(\"node5\", new DiskUsage(\"node5\", \"n5\", \"/dev/null\", 100, 85)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo;\n            }\n        };\n\n        AllocationService strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding node1 and node2 node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        String nodeWithPrimary, nodeWithoutPrimary;\n        if (clusterState.getRoutingNodes().node(\"node1\").size() == 1) {\n            nodeWithPrimary = \"node1\";\n            nodeWithoutPrimary = \"node2\";\n        } else {\n            nodeWithPrimary = \"node2\";\n            nodeWithoutPrimary = \"node1\";\n        }\n        logger.info(\"--> nodeWithPrimary: {}\", nodeWithPrimary);\n        logger.info(\"--> nodeWithoutPrimary: {}\", nodeWithoutPrimary);\n\n        \r\n        usagesBuilder = ImmutableOpenMap.builder(usages);\n        usagesBuilder.put(nodeWithoutPrimary, new DiskUsage(nodeWithoutPrimary, \"\", \"/dev/null\", 100, 35)); \r\n        usages = usagesBuilder.build();\n        final ClusterInfo clusterInfo2 = new DevNullClusterInfo(usages, usages, shardSizes);\n        cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo2;\n            }\n        };\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(2));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n\n        \r\n        \r\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"20b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"50b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"30b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithPrimary).size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithoutPrimary).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n\n        logger.info(\"--> adding node5\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> final cluster state:\");\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node5\").size(), equalTo(1));\n    }\n","date":"2018-11-02 01:13:02","endLine":493,"groupId":"64429","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiskThresholdWithAbsoluteSizes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/24/838b22d47e24f85d8a6d8121cb9ce4398d9f0f.src","preCode":"    public void testDiskThresholdWithAbsoluteSizes() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"9b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"5b\")\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"n3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"n4\", \"/dev/null\", 100, 80)); \r\n        usagesBuilder.put(\"node5\", new DiskUsage(\"node5\", \"n5\", \"/dev/null\", 100, 85)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo;\n            }\n        };\n\n        AllocationService strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding node1 and node2 node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        String nodeWithPrimary, nodeWithoutPrimary;\n        if (clusterState.getRoutingNodes().node(\"node1\").size() == 1) {\n            nodeWithPrimary = \"node1\";\n            nodeWithoutPrimary = \"node2\";\n        } else {\n            nodeWithPrimary = \"node2\";\n            nodeWithoutPrimary = \"node1\";\n        }\n        logger.info(\"--> nodeWithPrimary: {}\", nodeWithPrimary);\n        logger.info(\"--> nodeWithoutPrimary: {}\", nodeWithoutPrimary);\n\n        \r\n        usagesBuilder = ImmutableOpenMap.builder(usages);\n        usagesBuilder.put(nodeWithoutPrimary, new DiskUsage(nodeWithoutPrimary, \"\", \"/dev/null\", 100, 35)); \r\n        usages = usagesBuilder.build();\n        final ClusterInfo clusterInfo2 = new DevNullClusterInfo(usages, usages, shardSizes);\n        cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo2;\n            }\n        };\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(2));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n\n        \r\n        \r\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"20b\")\n                .build();\n\n        deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"50b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"30b\")\n                .build();\n\n        deciders = new AllocationDeciders(Settings.EMPTY,\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(Settings.builder()\n                .put(\"cluster.routing.allocation.node_concurrent_recoveries\", 10)\n                .put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), \"always\")\n                .put(\"cluster.routing.allocation.cluster_concurrent_rebalance\", -1)\n                .build(), deciders, new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithPrimary).size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithoutPrimary).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n\n        logger.info(\"--> adding node5\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> final cluster state:\");\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node5\").size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"c3cf7dd305b3d4636405c292659dbff05307f146","commitMessage":"@@@Merge remote-tracking branch 'upstream/master' into index-lifecycle\n","date":"2018-11-02 01:13:02","modifiedFileCount":"456","status":"M","submitter":"Tal Levy"},{"authorTime":"2019-07-10 01:43:05","codes":[{"authorDate":"2019-07-10 01:43:05","commitOrder":3,"curCode":"    public void testDiskThreshold() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.8)\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"node1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"node2\", \"/dev/null\", 100, 35)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"node3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"node4\", \"/dev/null\", 100, 80)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n        AllocationService strategy = new AllocationService(deciders,\n                new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        final RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"60%\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.5)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.6)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n    }\n","date":"2019-07-10 01:43:05","endLine":248,"groupId":"29449","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiskThreshold","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/65/1ed26e4cf5ebb6f80ec287d596d3ebde1527e6.src","preCode":"    public void testDiskThreshold() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.8)\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"node1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"node2\", \"/dev/null\", 100, 35)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"node3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"node4\", \"/dev/null\", 100, 80)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo;\n            }\n        };\n        AllocationService strategy = new AllocationService(deciders,\n                new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        final RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"60%\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.5)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.6)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2019-07-10 01:43:05","commitOrder":3,"curCode":"    public void testDiskThresholdWithAbsoluteSizes() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"9b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"5b\")\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"n3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"n4\", \"/dev/null\", 100, 80)); \r\n        usagesBuilder.put(\"node5\", new DiskUsage(\"node5\", \"n5\", \"/dev/null\", 100, 85)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n\n        AllocationService strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding node1 and node2 node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        String nodeWithPrimary, nodeWithoutPrimary;\n        if (clusterState.getRoutingNodes().node(\"node1\").size() == 1) {\n            nodeWithPrimary = \"node1\";\n            nodeWithoutPrimary = \"node2\";\n        } else {\n            nodeWithPrimary = \"node2\";\n            nodeWithoutPrimary = \"node1\";\n        }\n        logger.info(\"--> nodeWithPrimary: {}\", nodeWithPrimary);\n        logger.info(\"--> nodeWithoutPrimary: {}\", nodeWithoutPrimary);\n\n        \r\n        usagesBuilder = ImmutableOpenMap.builder(usages);\n        usagesBuilder.put(nodeWithoutPrimary, new DiskUsage(nodeWithoutPrimary, \"\", \"/dev/null\", 100, 35)); \r\n        usages = usagesBuilder.build();\n        final ClusterInfo clusterInfo2 = new DevNullClusterInfo(usages, usages, shardSizes);\n        cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo2;\n        };\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(2));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n\n        \r\n        \r\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"20b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"50b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"30b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithPrimary).size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithoutPrimary).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n\n        logger.info(\"--> adding node5\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> final cluster state:\");\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node5\").size(), equalTo(1));\n    }\n","date":"2019-07-10 01:43:05","endLine":485,"groupId":"64429","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiskThresholdWithAbsoluteSizes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/65/1ed26e4cf5ebb6f80ec287d596d3ebde1527e6.src","preCode":"    public void testDiskThresholdWithAbsoluteSizes() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"9b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"5b\")\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"n3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"n4\", \"/dev/null\", 100, 80)); \r\n        usagesBuilder.put(\"node5\", new DiskUsage(\"node5\", \"n5\", \"/dev/null\", 100, 85)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo;\n            }\n        };\n\n        AllocationService strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding node1 and node2 node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        String nodeWithPrimary, nodeWithoutPrimary;\n        if (clusterState.getRoutingNodes().node(\"node1\").size() == 1) {\n            nodeWithPrimary = \"node1\";\n            nodeWithoutPrimary = \"node2\";\n        } else {\n            nodeWithPrimary = \"node2\";\n            nodeWithoutPrimary = \"node1\";\n        }\n        logger.info(\"--> nodeWithPrimary: {}\", nodeWithPrimary);\n        logger.info(\"--> nodeWithoutPrimary: {}\", nodeWithoutPrimary);\n\n        \r\n        usagesBuilder = ImmutableOpenMap.builder(usages);\n        usagesBuilder.put(nodeWithoutPrimary, new DiskUsage(nodeWithoutPrimary, \"\", \"/dev/null\", 100, 35)); \r\n        usages = usagesBuilder.build();\n        final ClusterInfo clusterInfo2 = new DevNullClusterInfo(usages, usages, shardSizes);\n        cis = new ClusterInfoService() {\n            @Override\n            public ClusterInfo getClusterInfo() {\n                logger.info(\"--> calling fake getClusterInfo\");\n                return clusterInfo2;\n            }\n        };\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(2));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n\n        \r\n        \r\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"20b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"50b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"30b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithPrimary).size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithoutPrimary).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n\n        logger.info(\"--> adding node5\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> final cluster state:\");\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node5\").size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"}],"commitId":"af512f9dcfa880cd142f6a6a8fc7b5277705466d","commitMessage":"@@@Decouple DiskThresholdMonitor & ClusterInfoService (#44105)\n\nToday the `ClusterInfoService` requires the `DiskThresholdMonitor` at\nconstruction time so that it can notify it when nodes report changes in their\ndisk usage.  but this is awkward to construct: the `DiskThresholdMonitor`\nrequires a `RerouteService` which requires an `AllocationService` which comees\nfrom the `ClusterModule` which requires the `ClusterInfoService`.\n\nToday we break the cycle with a `LazilyInitializedRerouteService` which is\nitself a little ugly. This commit replaces this with a more traditional\nsubject/observer relationship between the `ClusterInfoService` and the\n`DiskThresholdMonitor`.","date":"2019-07-10 01:43:05","modifiedFileCount":"7","status":"M","submitter":"David Turner"},{"authorTime":"2019-07-18 13:39:24","codes":[{"authorDate":"2019-07-18 13:39:24","commitOrder":4,"curCode":"    public void testDiskThreshold() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.8)\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"node1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"node2\", \"/dev/null\", 100, 35)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"node3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"node4\", \"/dev/null\", 100, 80)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n        AllocationService strategy = new AllocationService(deciders,\n                new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        final RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"60%\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.5)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.6)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n    }\n","date":"2019-07-18 13:39:24","endLine":248,"groupId":"29449","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiskThreshold","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/48ce7b360680364ae8a81880a7eb90ab3adbf2.src","preCode":"    public void testDiskThreshold() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.8)\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"node1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"node2\", \"/dev/null\", 100, 35)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"node3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"node4\", \"/dev/null\", 100, 80)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n        AllocationService strategy = new AllocationService(deciders,\n                new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        final RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"60%\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.5)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.6)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2019-07-18 13:39:24","commitOrder":4,"curCode":"    public void testDiskThresholdWithAbsoluteSizes() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"9b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"5b\")\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"n3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"n4\", \"/dev/null\", 100, 80)); \r\n        usagesBuilder.put(\"node5\", new DiskUsage(\"node5\", \"n5\", \"/dev/null\", 100, 85)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n\n        AllocationService strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding node1 and node2 node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        String nodeWithPrimary, nodeWithoutPrimary;\n        if (clusterState.getRoutingNodes().node(\"node1\").size() == 1) {\n            nodeWithPrimary = \"node1\";\n            nodeWithoutPrimary = \"node2\";\n        } else {\n            nodeWithPrimary = \"node2\";\n            nodeWithoutPrimary = \"node1\";\n        }\n        logger.info(\"--> nodeWithPrimary: {}\", nodeWithPrimary);\n        logger.info(\"--> nodeWithoutPrimary: {}\", nodeWithoutPrimary);\n\n        \r\n        usagesBuilder = ImmutableOpenMap.builder(usages);\n        usagesBuilder.put(nodeWithoutPrimary, new DiskUsage(nodeWithoutPrimary, \"\", \"/dev/null\", 100, 35)); \r\n        usages = usagesBuilder.build();\n        final ClusterInfo clusterInfo2 = new DevNullClusterInfo(usages, usages, shardSizes);\n        cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo2;\n        };\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(2));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n\n        \r\n        \r\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"20b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"50b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"30b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithPrimary).size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithoutPrimary).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n\n        logger.info(\"--> adding node5\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logger.info(\"--> final cluster state:\");\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node5\").size(), equalTo(1));\n    }\n","date":"2019-07-18 13:39:24","endLine":485,"groupId":"64429","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiskThresholdWithAbsoluteSizes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/4c/48ce7b360680364ae8a81880a7eb90ab3adbf2.src","preCode":"    public void testDiskThresholdWithAbsoluteSizes() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"9b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"5b\")\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"n3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"n4\", \"/dev/null\", 100, 80)); \r\n        usagesBuilder.put(\"node5\", new DiskUsage(\"node5\", \"n5\", \"/dev/null\", 100, 85)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n\n        AllocationService strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding node1 and node2 node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        String nodeWithPrimary, nodeWithoutPrimary;\n        if (clusterState.getRoutingNodes().node(\"node1\").size() == 1) {\n            nodeWithPrimary = \"node1\";\n            nodeWithoutPrimary = \"node2\";\n        } else {\n            nodeWithPrimary = \"node2\";\n            nodeWithoutPrimary = \"node1\";\n        }\n        logger.info(\"--> nodeWithPrimary: {}\", nodeWithPrimary);\n        logger.info(\"--> nodeWithoutPrimary: {}\", nodeWithoutPrimary);\n\n        \r\n        usagesBuilder = ImmutableOpenMap.builder(usages);\n        usagesBuilder.put(nodeWithoutPrimary, new DiskUsage(nodeWithoutPrimary, \"\", \"/dev/null\", 100, 35)); \r\n        usages = usagesBuilder.build();\n        final ClusterInfo clusterInfo2 = new DevNullClusterInfo(usages, usages, shardSizes);\n        cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo2;\n        };\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(2));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n\n        \r\n        \r\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"20b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"50b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"30b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithPrimary).size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithoutPrimary).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n\n        logger.info(\"--> adding node5\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING));\n\n        logger.info(\"--> final cluster state:\");\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node5\").size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"}],"commitId":"51fb95ef83f7a1aa6cbc5207e504b03ccee724ee","commitMessage":"@@@Defer reroute when starting shards (#44433)\n\n* Defer reroute when starting shards\n\nToday we reroute the cluster as part of the process of starting a shard.  which\nruns at `URGENT` priority. In large clusters.  rerouting may take some time to\ncomplete.  and this means that a mere trickle of shard-started events can cause\nstarvation for other.  lower-priority.  tasks that are pending on the master.\n\nHowever.  it isn't really necessary to perform a reroute when starting a shard. \nas long as one occurs eventually. This commit removes the inline reroute from\nthe process of starting a shard and replaces it with a deferred one that runs\nat `NORMAL` priority.  avoiding starvation of higher-priority tasks.\n\nThis may improve some of the situations related to #42738 and #42105.\n\n* Specific test case for followup priority setting\n\nWe cannot set the priority in all InternalTestClusters because the deprecation\nwarning makes some tests unhappy. This commit adds a specific test instead.\n\n* Checkstyle\n\n* Cluster state always changed here\n\n* Assert consistency of routing nodes\n\n* Restrict setting only to reasonable priorities\n","date":"2019-07-18 13:39:24","modifiedFileCount":"60","status":"M","submitter":"David Turner"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":5,"curCode":"    public void testDiskThreshold() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.8)\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"node1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"node2\", \"/dev/null\", 100, 35)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"node3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"node4\", \"/dev/null\", 100, 80)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n        AllocationService strategy = new AllocationService(deciders,\n                new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        final RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metadata(metadata)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"60%\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.5)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.6)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n    }\n","date":"2020-04-01 03:52:01","endLine":249,"groupId":"29449","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiskThreshold","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/ce5de76e2e6e4a6406f28fbb12e656f8d6d569.src","preCode":"    public void testDiskThreshold() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.8)\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"node1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"node2\", \"/dev/null\", 100, 35)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"node3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"node4\", \"/dev/null\", 100, 80)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n        AllocationService strategy = new AllocationService(deciders,\n                new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        final RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"60%\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.5)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.6)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":5,"curCode":"    public void testDiskThresholdWithAbsoluteSizes() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"9b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"5b\")\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"n3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"n4\", \"/dev/null\", 100, 80)); \r\n        usagesBuilder.put(\"node5\", new DiskUsage(\"node5\", \"n5\", \"/dev/null\", 100, 85)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n\n        AllocationService strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metadata(metadata)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding node1 and node2 node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        String nodeWithPrimary, nodeWithoutPrimary;\n        if (clusterState.getRoutingNodes().node(\"node1\").size() == 1) {\n            nodeWithPrimary = \"node1\";\n            nodeWithoutPrimary = \"node2\";\n        } else {\n            nodeWithPrimary = \"node2\";\n            nodeWithoutPrimary = \"node1\";\n        }\n        logger.info(\"--> nodeWithPrimary: {}\", nodeWithPrimary);\n        logger.info(\"--> nodeWithoutPrimary: {}\", nodeWithoutPrimary);\n\n        \r\n        usagesBuilder = ImmutableOpenMap.builder(usages);\n        usagesBuilder.put(nodeWithoutPrimary, new DiskUsage(nodeWithoutPrimary, \"\", \"/dev/null\", 100, 35)); \r\n        usages = usagesBuilder.build();\n        final ClusterInfo clusterInfo2 = new DevNullClusterInfo(usages, usages, shardSizes);\n        cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo2;\n        };\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(2));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n\n        \r\n        \r\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"20b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"50b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"30b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithPrimary).size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithoutPrimary).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n\n        logger.info(\"--> adding node5\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logger.info(\"--> final cluster state:\");\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node5\").size(), equalTo(1));\n    }\n","date":"2020-04-01 03:52:01","endLine":486,"groupId":"64429","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiskThresholdWithAbsoluteSizes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/e7/ce5de76e2e6e4a6406f28fbb12e656f8d6d569.src","preCode":"    public void testDiskThresholdWithAbsoluteSizes() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"9b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"5b\")\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"n3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"n4\", \"/dev/null\", 100, 80)); \r\n        usagesBuilder.put(\"node5\", new DiskUsage(\"node5\", \"n5\", \"/dev/null\", 100, 85)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n\n        AllocationService strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        MetaData metaData = MetaData.builder()\n                .put(IndexMetaData.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metaData.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding node1 and node2 node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        String nodeWithPrimary, nodeWithoutPrimary;\n        if (clusterState.getRoutingNodes().node(\"node1\").size() == 1) {\n            nodeWithPrimary = \"node1\";\n            nodeWithoutPrimary = \"node2\";\n        } else {\n            nodeWithPrimary = \"node2\";\n            nodeWithoutPrimary = \"node1\";\n        }\n        logger.info(\"--> nodeWithPrimary: {}\", nodeWithPrimary);\n        logger.info(\"--> nodeWithoutPrimary: {}\", nodeWithoutPrimary);\n\n        \r\n        usagesBuilder = ImmutableOpenMap.builder(usages);\n        usagesBuilder.put(nodeWithoutPrimary, new DiskUsage(nodeWithoutPrimary, \"\", \"/dev/null\", 100, 35)); \r\n        usages = usagesBuilder.build();\n        final ClusterInfo clusterInfo2 = new DevNullClusterInfo(usages, usages, shardSizes);\n        cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo2;\n        };\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(2));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n\n        \r\n        \r\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"20b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"50b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"30b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithPrimary).size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithoutPrimary).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n\n        logger.info(\"--> adding node5\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logger.info(\"--> final cluster state:\");\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node5\").size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"},{"authorTime":"2020-10-06 23:29:42","codes":[{"authorDate":"2020-10-06 23:29:42","commitOrder":6,"curCode":"    public void testDiskThreshold() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.8)\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"node1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"node2\", \"/dev/null\", 100, 35)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"node3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"node4\", \"/dev/null\", 100, 80)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n        AllocationService strategy = new AllocationService(deciders,\n                new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis, EmptySnapshotsInfoService.INSTANCE);\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        final RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metadata(metadata)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"60%\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis, EmptySnapshotsInfoService.INSTANCE);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.5)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.6)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis, EmptySnapshotsInfoService.INSTANCE);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n    }\n","date":"2020-10-06 23:29:42","endLine":253,"groupId":"102233","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiskThreshold","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/00336e88a770857fd48c18cf79807c2de38a90.src","preCode":"    public void testDiskThreshold() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.8)\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"node1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"node2\", \"/dev/null\", 100, 35)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"node3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"node4\", \"/dev/null\", 100, 80)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n        AllocationService strategy = new AllocationService(deciders,\n                new TestGatewayAllocator(), new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))\n                .build();\n\n        final RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metadata(metadata)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding two nodes\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"60%\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.7)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), 0.5)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), 0.6)\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-10-06 23:29:42","commitOrder":6,"curCode":"    public void testDiskThresholdWithAbsoluteSizes() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"9b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"5b\")\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"n3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"n4\", \"/dev/null\", 100, 80)); \r\n        usagesBuilder.put(\"node5\", new DiskUsage(\"node5\", \"n5\", \"/dev/null\", 100, 85)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n\n        AllocationService strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis, EmptySnapshotsInfoService.INSTANCE);\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metadata(metadata)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding node1 and node2 node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        String nodeWithPrimary, nodeWithoutPrimary;\n        if (clusterState.getRoutingNodes().node(\"node1\").size() == 1) {\n            nodeWithPrimary = \"node1\";\n            nodeWithoutPrimary = \"node2\";\n        } else {\n            nodeWithPrimary = \"node2\";\n            nodeWithoutPrimary = \"node1\";\n        }\n        logger.info(\"--> nodeWithPrimary: {}\", nodeWithPrimary);\n        logger.info(\"--> nodeWithoutPrimary: {}\", nodeWithoutPrimary);\n\n        \r\n        usagesBuilder = ImmutableOpenMap.builder(usages);\n        usagesBuilder.put(nodeWithoutPrimary, new DiskUsage(nodeWithoutPrimary, \"\", \"/dev/null\", 100, 35)); \r\n        usages = usagesBuilder.build();\n        final ClusterInfo clusterInfo2 = new DevNullClusterInfo(usages, usages, shardSizes);\n        cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo2;\n        };\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis, EmptySnapshotsInfoService.INSTANCE);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(2));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n\n        \r\n        \r\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"20b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis, EmptySnapshotsInfoService.INSTANCE);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"50b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"30b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis, EmptySnapshotsInfoService.INSTANCE);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithPrimary).size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithoutPrimary).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n\n        logger.info(\"--> adding node5\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logger.info(\"--> final cluster state:\");\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node5\").size(), equalTo(1));\n    }\n","date":"2020-10-06 23:29:42","endLine":490,"groupId":"102233","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiskThresholdWithAbsoluteSizes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/00336e88a770857fd48c18cf79807c2de38a90.src","preCode":"    public void testDiskThresholdWithAbsoluteSizes() {\n        Settings diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"9b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"5b\")\n                .build();\n\n        ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder();\n        usagesBuilder.put(\"node1\", new DiskUsage(\"node1\", \"n1\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node2\", new DiskUsage(\"node2\", \"n2\", \"/dev/null\", 100, 10)); \r\n        usagesBuilder.put(\"node3\", new DiskUsage(\"node3\", \"n3\", \"/dev/null\", 100, 60)); \r\n        usagesBuilder.put(\"node4\", new DiskUsage(\"node4\", \"n4\", \"/dev/null\", 100, 80)); \r\n        usagesBuilder.put(\"node5\", new DiskUsage(\"node5\", \"n5\", \"/dev/null\", 100, 85)); \r\n        ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build();\n\n        ImmutableOpenMap.Builder<String, Long> shardSizesBuilder = ImmutableOpenMap.builder();\n        shardSizesBuilder.put(\"[test][0][p]\", 10L); \r\n        shardSizesBuilder.put(\"[test][0][r]\", 10L);\n        ImmutableOpenMap<String, Long> shardSizes = shardSizesBuilder.build();\n        final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes);\n\n        ClusterSettings clusterSettings = new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);\n        AllocationDeciders deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        ClusterInfoService cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo;\n        };\n\n        AllocationService strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        Metadata metadata = Metadata.builder()\n                .put(IndexMetadata.builder(\"test\").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2))\n                .build();\n\n        RoutingTable initialRoutingTable = RoutingTable.builder()\n                .addAsNew(metadata.index(\"test\"))\n                .build();\n\n        ClusterState clusterState = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metadata(metadata)\n                .routingTable(initialRoutingTable).build();\n\n        logger.info(\"--> adding node1 and node2 node\");\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder()\n                .add(newNode(\"node1\"))\n                .add(newNode(\"node2\"))\n        ).build();\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        String nodeWithPrimary, nodeWithoutPrimary;\n        if (clusterState.getRoutingNodes().node(\"node1\").size() == 1) {\n            nodeWithPrimary = \"node1\";\n            nodeWithoutPrimary = \"node2\";\n        } else {\n            nodeWithPrimary = \"node2\";\n            nodeWithoutPrimary = \"node1\";\n        }\n        logger.info(\"--> nodeWithPrimary: {}\", nodeWithPrimary);\n        logger.info(\"--> nodeWithoutPrimary: {}\", nodeWithoutPrimary);\n\n        \r\n        usagesBuilder = ImmutableOpenMap.builder(usages);\n        usagesBuilder.put(nodeWithoutPrimary, new DiskUsage(nodeWithoutPrimary, \"\", \"/dev/null\", 100, 35)); \r\n        usages = usagesBuilder.build();\n        final ClusterInfo clusterInfo2 = new DevNullClusterInfo(usages, usages, shardSizes);\n        cis = () -> {\n            logger.info(\"--> calling fake getClusterInfo\");\n            return clusterInfo2;\n        };\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(2));\n\n        logger.info(\"--> start the shards (primaries)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n\n        \r\n        \r\n\n        logger.info(\"--> adding node3\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node3\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(2));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> start the shards (replicas)\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing decider settings\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"30b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"20b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n        logShardStates(clusterState);\n\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> changing settings again\");\n\n        \r\n        \r\n        \r\n        diskSettings = Settings.builder()\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true)\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), \"50b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), \"40b\")\n                .put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_FLOOD_STAGE_WATERMARK_SETTING.getKey(), \"30b\")\n                .build();\n\n        deciders = new AllocationDeciders(\n                new HashSet<>(Arrays.asList(\n                        new SameShardAllocationDecider(Settings.EMPTY, clusterSettings),\n                        makeDecider(diskSettings))));\n\n        strategy = new AllocationService(deciders, new TestGatewayAllocator(),\n                new BalancedShardsAllocator(Settings.EMPTY), cis);\n\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(3));\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n\n        logger.info(\"--> adding node4\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node4\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithPrimary).size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(nodeWithoutPrimary).size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n\n        logger.info(\"--> adding node5\");\n\n        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())\n                .add(newNode(\"node5\"))\n        ).build();\n        clusterState = strategy.reroute(clusterState, \"reroute\");\n\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(2));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(), equalTo(1));\n        \r\n        assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(), equalTo(1));\n\n        logger.info(\"--> apply INITIALIZING shards\");\n        clusterState = startInitializingShardsAndReroute(strategy, clusterState);\n\n        logger.info(\"--> final cluster state:\");\n        logShardStates(clusterState);\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node1\").size(), equalTo(0));\n        \r\n        assertThat(clusterState.getRoutingNodes().node(\"node2\").size(), equalTo(0));\n        assertThat(clusterState.getRoutingNodes().node(\"node3\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node4\").size(), equalTo(1));\n        assertThat(clusterState.getRoutingNodes().node(\"node5\").size(), equalTo(1));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"}],"commitId":"2afec0d916c7de33c9a6c3cbe30a8a2ee61be765","commitMessage":"@@@Determine shard size before allocating shards recovering from snapshots (#61906)\n\nDetermines the shard size of shards before allocating shards that are \nrecovering from snapshots. It ensures during shard allocation that the \ntarget node that is selected as recovery target will have enough free \ndisk space for the recovery event. This applies to regular restores.  \nCCR bootstrap from remote.  as well as mounting searchable snapshots.\n\nThe InternalSnapshotInfoService is responsible for fetching snapshot \nshard sizes from repositories. It provides a getShardSize() method \nto other components of the system that can be used to retrieve the \nlatest known shard size. If the latest snapshot shard size retrieval \nfailed.  the getShardSize() returns \nShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE. While \nwe'd like a better way to handle such failures.  returning this value \nallows to keep the existing behavior for now.\n\nNote that this PR does not address an issues (we already have today) \nwhere a replica is being allocated without knowing how much disk \nspace is being used by the primary. ","date":"2020-10-06 23:29:42","modifiedFileCount":"49","status":"M","submitter":"Yannick Welsch"}]
