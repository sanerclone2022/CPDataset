[{"authorTime":"2019-02-19 22:53:36","codes":[{"authorDate":"2019-02-19 05:52:51","commitOrder":3,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final ReplicationOperation.PrimaryResult<RetentionLeaseBackgroundSyncAction.Request> result =\n                action.shardOperationOnPrimary(request, indexShard);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        assertThat(result.replicaRequest(), sameInstance(request));\n    }\n","date":"2019-02-19 05:52:51","endLine":128,"groupId":"42963","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/45/67f3e3823370f3a4153876b1760f84b433f53f.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final ReplicationOperation.PrimaryResult<RetentionLeaseBackgroundSyncAction.Request> result =\n                action.shardOperationOnPrimary(request, indexShard);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        assertThat(result.replicaRequest(), sameInstance(request));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"NB"},{"authorDate":"2019-02-19 22:53:36","commitOrder":3,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-02-19 22:53:36","endLine":256,"groupId":"42963","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/d7d5039ae8b414c4ed63ad9932132a471c8cae.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"B"}],"commitId":"92ef753b56d25215f19098cbce91553fcae74c64","commitMessage":"@@@Allow retention lease operations under blocks (#39089)\n\nThis commit allows manipulating retention leases under blocks.","date":"2019-02-19 22:53:36","modifiedFileCount":"9","status":"M","submitter":"Jason Tedor"},{"authorTime":"2019-02-19 22:53:36","codes":[{"authorDate":"2019-04-07 00:11:00","commitOrder":4,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","date":"2019-04-07 00:11:00","endLine":136,"groupId":"18187","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f1/c05c565f8ef5ee7453d5c759209a62c0821fdd.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws WriteStateException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final ReplicationOperation.PrimaryResult<RetentionLeaseBackgroundSyncAction.Request> result =\n                action.shardOperationOnPrimary(request, indexShard);\n        \r\n        verify(indexShard).persistRetentionLeases();\n        \r\n        assertThat(result.replicaRequest(), sameInstance(request));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2019-02-19 22:53:36","commitOrder":4,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-02-19 22:53:36","endLine":256,"groupId":"42963","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/6a/d7d5039ae8b414c4ed63ad9932132a471c8cae.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"N"}],"commitId":"5d26243aba226648e1bd2c327e0ac0cae4a4c14f","commitMessage":"@@@Make Transport Shard Bulk Action Async (#39793)\n\nThis is a dependency of #39504 \n\nMotivation: \nBy refactoring `TransportShardBulkAction#shardOperationOnPrimary` to async.  we enable using `DeterministicTaskQueue` based tests to run indexing operations. This was previously impossible since we were blocking on the `write` thread until the `update` thread finished the mapping update.\nWith this change.  the mapping update will trigger a new task in the `write` queue instead. \nThis change significantly enhances the amount of coverage we get from `SnapshotResiliencyTests` (and other potential future tests) when it comes to tracking down concurrency issues with distributed state machines.\n\nThe logical change is effectively all in `TransportShardBulkAction`.  the rest of the changes is then simply mechanically moving the caller code and tests to being async and passing the `ActionListener` down.\n\nSince the move to async would've added more parameters to the `private static` steps in this logic.  I decided to inline and dry up (between delete and update) the logic as much as I could instead of passing the listener + wait-consumer down through all of them.\n","date":"2019-04-07 00:11:00","modifiedFileCount":"28","status":"M","submitter":"Armin Braun"},{"authorTime":"2019-11-28 18:31:51","codes":[{"authorDate":"2019-11-28 18:31:51","commitOrder":5,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","date":"2019-11-28 18:31:51","endLine":122,"groupId":"42963","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2019-11-28 18:31:51","commitOrder":5,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-28 18:31:51","endLine":185,"groupId":"32593","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"6cca2b04fa06b981d3a73e12d3956bafd07b0e8a","commitMessage":"@@@Remove obsolete resolving logic from TRA (#49647)\n\nThis stems from a time where index requests were directly forwarded to\nTransportReplicationAction. Nowadays they are wrapped in a BulkShardRequest.  and this logic is\nobsolete.\n\nCloses #20279","date":"2019-11-28 18:31:51","modifiedFileCount":"22","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2019-11-28 20:12:27","codes":[{"authorDate":"2019-11-28 20:12:27","commitOrder":6,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","date":"2019-11-28 20:12:53","endLine":124,"groupId":"18187","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/e10a80fe79375905272e9013261fbadb78ac52.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2019-11-28 20:12:27","commitOrder":6,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-28 20:12:53","endLine":189,"groupId":"42963","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2b/e10a80fe79375905272e9013261fbadb78ac52.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"a354c607228d6c1784f6b1f02862fe363e859cdf","commitMessage":"@@@Revert \"Remove obsolete resolving logic from TRA (#49647)\"\n\nThis reverts commit 6cca2b04fa06b981d3a73e12d3956bafd07b0e8a.\n","date":"2019-11-28 20:12:53","modifiedFileCount":"22","status":"M","submitter":"Yannick Welsch"},{"authorTime":"2019-11-29 18:01:24","codes":[{"authorDate":"2019-11-29 18:01:24","commitOrder":7,"curCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","date":"2019-11-29 18:01:24","endLine":122,"groupId":"103572","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetentionLeaseBackgroundSyncActionOnPrimary","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testRetentionLeaseBackgroundSyncActionOnPrimary() throws InterruptedException {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n        final RetentionLeases retentionLeases = mock(RetentionLeases.class);\n        final RetentionLeaseBackgroundSyncAction.Request request =\n                new RetentionLeaseBackgroundSyncAction.Request(indexShard.shardId(), retentionLeases);\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        action.shardOperationOnPrimary(request, indexShard,\n            new LatchedActionListener<>(ActionTestUtils.assertNoFailureListener(result -> {\n                \r\n                verify(indexShard).persistRetentionLeases();\n                \r\n                assertThat(result.replicaRequest(), sameInstance(request));\n            }), latch));\n        latch.await();\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2019-11-29 18:01:24","commitOrder":7,"curCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()));\n\n        assertNull(action.indexBlockLevel());\n    }\n","date":"2019-11-29 18:01:24","endLine":185,"groupId":"103572","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testBlocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/28/2170a58e3e3054486a23ee5240a76e217efc26.src","preCode":"    public void testBlocks() {\n        final IndicesService indicesService = mock(IndicesService.class);\n\n        final Index index = new Index(\"index\", \"uuid\");\n        final IndexService indexService = mock(IndexService.class);\n        when(indicesService.indexServiceSafe(index)).thenReturn(indexService);\n\n        final int id = randomIntBetween(0, 4);\n        final IndexShard indexShard = mock(IndexShard.class);\n        when(indexService.getShard(id)).thenReturn(indexShard);\n\n        final ShardId shardId = new ShardId(index, id);\n        when(indexShard.shardId()).thenReturn(shardId);\n\n        final RetentionLeaseBackgroundSyncAction action = new RetentionLeaseBackgroundSyncAction(\n                Settings.EMPTY,\n                transportService,\n                clusterService,\n                indicesService,\n                threadPool,\n                shardStateAction,\n                new ActionFilters(Collections.emptySet()),\n                new IndexNameExpressionResolver());\n\n        assertNull(action.indexBlockLevel());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseBackgroundSyncActionTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"3ad8aa6d46580229823d298e9ce68ba3aaadc3d6","commitMessage":"@@@Remove obsolete resolving logic from TRA (#49685)\n\nThis stems from a time where index requests were directly forwarded to\nTransportReplicationAction. Nowadays they are wrapped in a BulkShardRequest.  and this logic is\nobsolete.\n\nIn contrast to prior PR (#49647).  this PR also fixes (see b3697cc) a situation where the previous\nindex expression logic had an interesting side effect. For bulk requests (which had resolveIndex\n= false).  the reroute phase was waiting for the index to appear in case where it was not present. \nand for all other replication requests (resolveIndex = true) it would right away throw an\nIndexNotFoundException while resolving the name and exit. With #49647.  every replication\nrequest was now waiting for the index to appear.  which was problematic when the given index\nhad just been deleted (e.g. deleting a follower index while it's still receiving requests from the\nleader.  where these requests would now wait up to a minute for the index to appear). This PR\nnow adds b3697cc on top of that prior PR to make sure to reestablish some of the prior behavior\nwhere the reroute phase waits for the bulk request for the index to appear. That logic was in\nplace to ensure that when an index was created and not all nodes had learned about it yet.  that\nthe bulk would not fail somewhere in the reroute phase. This is now only restricted to the\nsituation where the current node has an older cluster state than the one that coordinated the\nbulk request (which checks that the index is present). This also means that when an index is\ndeleted.  we will no longer unnecessarily wait up to the timeout for the index o appear.  and\ninstead fail the request.\n\nCloses #20279","date":"2019-11-29 18:01:24","modifiedFileCount":"27","status":"M","submitter":"Yannick Welsch"}]
