[{"authorTime":"2020-02-01 00:43:25","codes":[{"authorDate":"2020-02-01 00:43:25","commitOrder":1,"curCode":"    public void testConnectAndDisconnect() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), any(ActionListener.class));\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        AtomicReference<Transport.Connection> connectionRef = new AtomicReference<>();\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> {\n            connectionRef.set(c);\n            l.onResponse(null);\n        };\n        PlainActionFuture.get(\n            fut -> connectionManager.connectToNode(node, connectionProfile, validator, ActionListener.map(fut, x -> null)));\n\n        assertFalse(connection.isClosed());\n        assertTrue(connectionManager.nodeConnected(node));\n        assertSame(connection, connectionManager.getConnection(node));\n        assertEquals(1, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n\n        if (randomBoolean()) {\n            connectionManager.disconnectFromNode(node);\n        } else {\n            connection.close();\n        }\n        assertTrue(connection.isClosed());\n        assertEquals(0, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(1, nodeDisconnectedCount.get());\n    }\n","date":"2020-02-01 00:43:25","endLine":128,"groupId":"10533","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndDisconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/dbd21899e52ac04c47046ff283bb0384229369.src","preCode":"    public void testConnectAndDisconnect() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), any(ActionListener.class));\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        AtomicReference<Transport.Connection> connectionRef = new AtomicReference<>();\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> {\n            connectionRef.set(c);\n            l.onResponse(null);\n        };\n        PlainActionFuture.get(\n            fut -> connectionManager.connectToNode(node, connectionProfile, validator, ActionListener.map(fut, x -> null)));\n\n        assertFalse(connection.isClosed());\n        assertTrue(connectionManager.nodeConnected(node));\n        assertSame(connection, connectionManager.getConnection(node));\n        assertEquals(1, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n\n        if (randomBoolean()) {\n            connectionManager.disconnectFromNode(node);\n        } else {\n            connection.close();\n        }\n        assertTrue(connection.isClosed());\n        assertEquals(0, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(1, nodeDisconnectedCount.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/ClusterConnectionManagerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"},{"authorDate":"2020-02-01 00:43:25","commitOrder":1,"curCode":"    public void testConnectFailsDuringValidation() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), any(ActionListener.class));\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> l.onFailure(new ConnectTransportException(node, \"\"));\n\n        PlainActionFuture<Void> fut = new PlainActionFuture<>();\n        connectionManager.connectToNode(node, connectionProfile, validator, fut);\n        expectThrows(ConnectTransportException.class, () -> fut.actionGet());\n\n        assertTrue(connection.isClosed());\n        assertFalse(connectionManager.nodeConnected(node));\n        expectThrows(NodeNotConnectedException.class, () -> connectionManager.getConnection(node));\n        assertEquals(0, connectionManager.size());\n        assertEquals(0, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n    }\n","date":"2020-02-01 00:43:25","endLine":271,"groupId":"61048","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConnectFailsDuringValidation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/dbd21899e52ac04c47046ff283bb0384229369.src","preCode":"    public void testConnectFailsDuringValidation() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), any(ActionListener.class));\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> l.onFailure(new ConnectTransportException(node, \"\"));\n\n        PlainActionFuture<Void> fut = new PlainActionFuture<>();\n        connectionManager.connectToNode(node, connectionProfile, validator, fut);\n        expectThrows(ConnectTransportException.class, () -> fut.actionGet());\n\n        assertTrue(connection.isClosed());\n        assertFalse(connectionManager.nodeConnected(node));\n        expectThrows(NodeNotConnectedException.class, () -> connectionManager.getConnection(node));\n        assertEquals(0, connectionManager.size());\n        assertEquals(0, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/ClusterConnectionManagerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"B"}],"commitId":"9dbd9ba757f63441c990e9812dfd3129498a5f18","commitMessage":"@@@Extract a ConnectionManager interface (#51722)\n\nCurrently we have three different implementations representing a\n`ConnectionManager`. There is the basic `ConnectionManager` which\nholds all connections for a cluster. And a remote connection manager\nwhich support proxy behavior. And a stubbable connection manager for\ntests. The remote and stubbable instances use the delegate pattern. \nso this commit extracts an interface for them all to implement.","date":"2020-02-01 00:43:25","modifiedFileCount":"15","status":"B","submitter":"Tim Brooks"},{"authorTime":"2020-02-01 00:43:25","codes":[{"authorDate":"2020-12-01 10:00:51","commitOrder":2,"curCode":"    public void testConnectAndDisconnect() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), any(ActionListener.class));\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        AtomicReference<Transport.Connection> connectionRef = new AtomicReference<>();\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> {\n            connectionRef.set(c);\n            l.onResponse(null);\n        };\n        PlainActionFuture.get(fut -> connectionManager.connectToNode(node, connectionProfile, validator, fut.map(x -> null)));\n\n        assertFalse(connection.isClosed());\n        assertTrue(connectionManager.nodeConnected(node));\n        assertSame(connection, connectionManager.getConnection(node));\n        assertEquals(1, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n\n        if (randomBoolean()) {\n            connectionManager.disconnectFromNode(node);\n        } else {\n            connection.close();\n        }\n        assertTrue(connection.isClosed());\n        assertEquals(0, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(1, nodeDisconnectedCount.get());\n    }\n","date":"2020-12-01 10:00:51","endLine":127,"groupId":"57586","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndDisconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3c/7295a2a44cdb0e935111fef34641a665220bfe.src","preCode":"    public void testConnectAndDisconnect() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), any(ActionListener.class));\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        AtomicReference<Transport.Connection> connectionRef = new AtomicReference<>();\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> {\n            connectionRef.set(c);\n            l.onResponse(null);\n        };\n        PlainActionFuture.get(\n            fut -> connectionManager.connectToNode(node, connectionProfile, validator, ActionListener.map(fut, x -> null)));\n\n        assertFalse(connection.isClosed());\n        assertTrue(connectionManager.nodeConnected(node));\n        assertSame(connection, connectionManager.getConnection(node));\n        assertEquals(1, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n\n        if (randomBoolean()) {\n            connectionManager.disconnectFromNode(node);\n        } else {\n            connection.close();\n        }\n        assertTrue(connection.isClosed());\n        assertEquals(0, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(1, nodeDisconnectedCount.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/ClusterConnectionManagerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2020-02-01 00:43:25","commitOrder":2,"curCode":"    public void testConnectFailsDuringValidation() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), any(ActionListener.class));\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> l.onFailure(new ConnectTransportException(node, \"\"));\n\n        PlainActionFuture<Void> fut = new PlainActionFuture<>();\n        connectionManager.connectToNode(node, connectionProfile, validator, fut);\n        expectThrows(ConnectTransportException.class, () -> fut.actionGet());\n\n        assertTrue(connection.isClosed());\n        assertFalse(connectionManager.nodeConnected(node));\n        expectThrows(NodeNotConnectedException.class, () -> connectionManager.getConnection(node));\n        assertEquals(0, connectionManager.size());\n        assertEquals(0, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n    }\n","date":"2020-02-01 00:43:25","endLine":271,"groupId":"61048","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConnectFailsDuringValidation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/30/dbd21899e52ac04c47046ff283bb0384229369.src","preCode":"    public void testConnectFailsDuringValidation() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), any(ActionListener.class));\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> l.onFailure(new ConnectTransportException(node, \"\"));\n\n        PlainActionFuture<Void> fut = new PlainActionFuture<>();\n        connectionManager.connectToNode(node, connectionProfile, validator, fut);\n        expectThrows(ConnectTransportException.class, () -> fut.actionGet());\n\n        assertTrue(connection.isClosed());\n        assertFalse(connectionManager.nodeConnected(node));\n        expectThrows(NodeNotConnectedException.class, () -> connectionManager.getConnection(node));\n        assertEquals(0, connectionManager.size());\n        assertEquals(0, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/ClusterConnectionManagerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"N"}],"commitId":"4547d3b24501bcdfef343e5a493af657395942fd","commitMessage":"@@@Refactor ActionListener#map towards Stricter API (#65526)\n\nMaking `#map` look and feel a little nicer.  optimize chains of `#map`. \nand replace `#delegateFailure` calls with `#map` calls where possible\nin order to enforce callbacks not throwing where possible.\n","date":"2020-12-01 10:00:51","modifiedFileCount":"52","status":"M","submitter":"Armin Braun"},{"authorTime":"2021-08-10 22:05:55","codes":[{"authorDate":"2021-08-10 22:05:55","commitOrder":3,"curCode":"    public void testConnectAndDisconnect() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            @SuppressWarnings(\"unchecked\")\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), anyActionListener());\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        AtomicReference<Transport.Connection> connectionRef = new AtomicReference<>();\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> {\n            connectionRef.set(c);\n            l.onResponse(null);\n        };\n        PlainActionFuture.get(fut -> connectionManager.connectToNode(node, connectionProfile, validator, fut.map(x -> null)));\n\n        assertFalse(connection.isClosed());\n        assertTrue(connectionManager.nodeConnected(node));\n        assertSame(connection, connectionManager.getConnection(node));\n        assertEquals(1, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n\n        if (randomBoolean()) {\n            connectionManager.disconnectFromNode(node);\n        } else {\n            connection.close();\n        }\n        assertTrue(connection.isClosed());\n        assertEquals(0, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(1, nodeDisconnectedCount.get());\n    }\n","date":"2021-08-10 22:05:55","endLine":117,"groupId":"32425","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndDisconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/4217e276ada37a777a8118c797a1351400adb1.src","preCode":"    public void testConnectAndDisconnect() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), any(ActionListener.class));\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        AtomicReference<Transport.Connection> connectionRef = new AtomicReference<>();\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> {\n            connectionRef.set(c);\n            l.onResponse(null);\n        };\n        PlainActionFuture.get(fut -> connectionManager.connectToNode(node, connectionProfile, validator, fut.map(x -> null)));\n\n        assertFalse(connection.isClosed());\n        assertTrue(connectionManager.nodeConnected(node));\n        assertSame(connection, connectionManager.getConnection(node));\n        assertEquals(1, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n\n        if (randomBoolean()) {\n            connectionManager.disconnectFromNode(node);\n        } else {\n            connection.close();\n        }\n        assertTrue(connection.isClosed());\n        assertEquals(0, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(1, nodeDisconnectedCount.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/ClusterConnectionManagerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2021-08-10 22:05:55","commitOrder":3,"curCode":"    public void testConnectFailsDuringValidation() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            @SuppressWarnings(\"unchecked\")\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), anyActionListener());\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> l.onFailure(new ConnectTransportException(node, \"\"));\n\n        PlainActionFuture<Void> fut = new PlainActionFuture<>();\n        connectionManager.connectToNode(node, connectionProfile, validator, fut);\n        expectThrows(ConnectTransportException.class, () -> fut.actionGet());\n\n        assertTrue(connection.isClosed());\n        assertFalse(connectionManager.nodeConnected(node));\n        expectThrows(NodeNotConnectedException.class, () -> connectionManager.getConnection(node));\n        assertEquals(0, connectionManager.size());\n        assertEquals(0, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n    }\n","date":"2021-08-10 22:05:55","endLine":262,"groupId":"32429","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testConnectFailsDuringValidation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/4217e276ada37a777a8118c797a1351400adb1.src","preCode":"    public void testConnectFailsDuringValidation() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), any(ActionListener.class));\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> l.onFailure(new ConnectTransportException(node, \"\"));\n\n        PlainActionFuture<Void> fut = new PlainActionFuture<>();\n        connectionManager.connectToNode(node, connectionProfile, validator, fut);\n        expectThrows(ConnectTransportException.class, () -> fut.actionGet());\n\n        assertTrue(connection.isClosed());\n        assertFalse(connectionManager.nodeConnected(node));\n        expectThrows(NodeNotConnectedException.class, () -> connectionManager.getConnection(node));\n        assertEquals(0, connectionManager.size());\n        assertEquals(0, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/ClusterConnectionManagerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"}],"commitId":"128a7e774437e80fef3e0d35fb74a9c0fb42c080","commitMessage":"@@@Fix compiler warnings in :server - part 3 (#76024)\n\nPart of #40366. Fix a number of javac issues when linting is enforced in `server/`.","date":"2021-08-10 22:05:55","modifiedFileCount":"50","status":"M","submitter":"Rory Hunter"},{"authorTime":"2021-09-14 13:35:14","codes":[{"authorDate":"2021-08-10 22:05:55","commitOrder":4,"curCode":"    public void testConnectAndDisconnect() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            @SuppressWarnings(\"unchecked\")\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), anyActionListener());\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        AtomicReference<Transport.Connection> connectionRef = new AtomicReference<>();\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> {\n            connectionRef.set(c);\n            l.onResponse(null);\n        };\n        PlainActionFuture.get(fut -> connectionManager.connectToNode(node, connectionProfile, validator, fut.map(x -> null)));\n\n        assertFalse(connection.isClosed());\n        assertTrue(connectionManager.nodeConnected(node));\n        assertSame(connection, connectionManager.getConnection(node));\n        assertEquals(1, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n\n        if (randomBoolean()) {\n            connectionManager.disconnectFromNode(node);\n        } else {\n            connection.close();\n        }\n        assertTrue(connection.isClosed());\n        assertEquals(0, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(1, nodeDisconnectedCount.get());\n    }\n","date":"2021-08-10 22:05:55","endLine":117,"groupId":"104432","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectAndDisconnect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/f4/4217e276ada37a777a8118c797a1351400adb1.src","preCode":"    public void testConnectAndDisconnect() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            @SuppressWarnings(\"unchecked\")\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), anyActionListener());\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        AtomicReference<Transport.Connection> connectionRef = new AtomicReference<>();\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> {\n            connectionRef.set(c);\n            l.onResponse(null);\n        };\n        PlainActionFuture.get(fut -> connectionManager.connectToNode(node, connectionProfile, validator, fut.map(x -> null)));\n\n        assertFalse(connection.isClosed());\n        assertTrue(connectionManager.nodeConnected(node));\n        assertSame(connection, connectionManager.getConnection(node));\n        assertEquals(1, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n\n        if (randomBoolean()) {\n            connectionManager.disconnectFromNode(node);\n        } else {\n            connection.close();\n        }\n        assertTrue(connection.isClosed());\n        assertEquals(0, connectionManager.size());\n        assertEquals(1, nodeConnectedCount.get());\n        assertEquals(1, nodeDisconnectedCount.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/ClusterConnectionManagerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"},{"authorDate":"2021-09-14 13:35:14","commitOrder":4,"curCode":"    public void testConnectFailsDuringValidation() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            @SuppressWarnings(\"unchecked\")\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), anyActionListener());\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> l.onFailure(new ConnectTransportException(node, \"\"));\n\n        PlainActionFuture<Releasable> fut = new PlainActionFuture<>();\n        connectionManager.connectToNode(node, connectionProfile, validator, fut);\n        expectThrows(ConnectTransportException.class, fut::actionGet);\n\n        assertTrue(connection.isClosed());\n        assertFalse(connectionManager.nodeConnected(node));\n        expectThrows(NodeNotConnectedException.class, () -> connectionManager.getConnection(node));\n        assertEquals(0, connectionManager.size());\n        assertEquals(0, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n    }\n","date":"2021-09-14 13:35:14","endLine":418,"groupId":"104432","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testConnectFailsDuringValidation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/0d/dee6b653babf1adf1fed273588196b6852c9db.src","preCode":"    public void testConnectFailsDuringValidation() {\n        AtomicInteger nodeConnectedCount = new AtomicInteger();\n        AtomicInteger nodeDisconnectedCount = new AtomicInteger();\n        connectionManager.addListener(new TransportConnectionListener() {\n            @Override\n            public void onNodeConnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeConnectedCount.incrementAndGet();\n            }\n\n            @Override\n            public void onNodeDisconnected(DiscoveryNode node, Transport.Connection connection) {\n                nodeDisconnectedCount.incrementAndGet();\n            }\n        });\n\n\n        DiscoveryNode node = new DiscoveryNode(\"\", new TransportAddress(InetAddress.getLoopbackAddress(), 0), Version.CURRENT);\n        Transport.Connection connection = new TestConnect(node);\n        doAnswer(invocationOnMock -> {\n            @SuppressWarnings(\"unchecked\")\n            ActionListener<Transport.Connection> listener = (ActionListener<Transport.Connection>) invocationOnMock.getArguments()[2];\n            listener.onResponse(connection);\n            return null;\n        }).when(transport).openConnection(eq(node), eq(connectionProfile), anyActionListener());\n\n        assertFalse(connectionManager.nodeConnected(node));\n\n        ConnectionManager.ConnectionValidator validator = (c, p, l) -> l.onFailure(new ConnectTransportException(node, \"\"));\n\n        PlainActionFuture<Void> fut = new PlainActionFuture<>();\n        connectionManager.connectToNode(node, connectionProfile, validator, fut);\n        expectThrows(ConnectTransportException.class, () -> fut.actionGet());\n\n        assertTrue(connection.isClosed());\n        assertFalse(connectionManager.nodeConnected(node));\n        expectThrows(NodeNotConnectedException.class, () -> connectionManager.getConnection(node));\n        assertEquals(0, connectionManager.size());\n        assertEquals(0, nodeConnectedCount.get());\n        assertEquals(0, nodeDisconnectedCount.get());\n    }\n","realPath":"server/src/test/java/org/elasticsearch/transport/ClusterConnectionManagerTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"M"}],"commitId":"a67e07ec72a7a2b2e261330cb0753d33d5fc2690","commitMessage":"@@@Improve control of outgoing connection lifecycles (#77295)\n\nToday we open connections to other nodes in various places and largely\nassume that they remain open as needed.  only closing them when applying\na cluster state that removes the remote node from the cluster. This\nisn't ideal: we might preserve unnecessary connections to remote nodes\nthat aren't in the cluster if they never manage to join the cluster.  and\nwe might also disconnect from a node that left the cluster while it's in\nthe process of re-joining too (see #67873).\n\nWith this commit we move to a model in which each user of a connection\nto a remote node acquires a reference to the connection that must be\nreleased once it's no longer needed. Connections remain open while there\nare any live references.  but are now actively closed when all references\nare released.\n\nFixes #67873","date":"2021-09-14 13:35:14","modifiedFileCount":"44","status":"M","submitter":"David Turner"}]
