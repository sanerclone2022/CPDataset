[{"authorTime":"2018-09-15 06:27:37","codes":[{"authorDate":"2018-09-15 06:27:37","commitOrder":3,"curCode":"    public void testClose() throws IOException {\n        final GlobalCheckpointListeners globalCheckpointListeners =\n                new GlobalCheckpointListeners(shardId, Runnable::run, scheduler, logger);\n        globalCheckpointListeners.globalCheckpointUpdated(NO_OPS_PERFORMED);\n        final int numberOfListeners = randomIntBetween(0, 16);\n        final Exception[] exceptions = new Exception[numberOfListeners];\n        for (int i = 0; i < numberOfListeners; i++) {\n            final int index = i;\n            globalCheckpointListeners.add(\n                    0, maybeMultipleInvocationProtectingListener((g, e) -> exceptions[index] = e), null);\n        }\n        globalCheckpointListeners.close();\n        for (int i = 0; i < numberOfListeners; i++) {\n            assertNotNull(exceptions[i]);\n            assertThat(exceptions[i], instanceOf(IndexShardClosedException.class));\n            assertThat(((IndexShardClosedException)exceptions[i]).getShardId(), equalTo(shardId));\n        }\n\n        \r\n        for (int i = 0; i < numberOfListeners; i++) {\n            exceptions[i] = null;\n        }\n        globalCheckpointListeners.close();\n        for (int i = 0; i < numberOfListeners; i++) {\n            assertNull(exceptions[i]);\n        }\n    }\n","date":"2018-09-15 06:27:37","endLine":233,"groupId":"9710","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/0e0cee1435ff27d36fe695f68669cb24f6f2e9.src","preCode":"    public void testClose() throws IOException {\n        final GlobalCheckpointListeners globalCheckpointListeners =\n                new GlobalCheckpointListeners(shardId, Runnable::run, scheduler, logger);\n        globalCheckpointListeners.globalCheckpointUpdated(NO_OPS_PERFORMED);\n        final int numberOfListeners = randomIntBetween(0, 16);\n        final Exception[] exceptions = new Exception[numberOfListeners];\n        for (int i = 0; i < numberOfListeners; i++) {\n            final int index = i;\n            globalCheckpointListeners.add(\n                    0, maybeMultipleInvocationProtectingListener((g, e) -> exceptions[index] = e), null);\n        }\n        globalCheckpointListeners.close();\n        for (int i = 0; i < numberOfListeners; i++) {\n            assertNotNull(exceptions[i]);\n            assertThat(exceptions[i], instanceOf(IndexShardClosedException.class));\n            assertThat(((IndexShardClosedException)exceptions[i]).getShardId(), equalTo(shardId));\n        }\n\n        \r\n        for (int i = 0; i < numberOfListeners; i++) {\n            exceptions[i] = null;\n        }\n        globalCheckpointListeners.close();\n        for (int i = 0; i < numberOfListeners; i++) {\n            assertNull(exceptions[i]);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/GlobalCheckpointListenersTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"MB"},{"authorDate":"2018-09-15 06:27:37","commitOrder":3,"curCode":"    public void testFailingListenerOnClose() throws IOException {\n        final Logger mockLogger = mock(Logger.class);\n        final GlobalCheckpointListeners globalCheckpointListeners =\n                new GlobalCheckpointListeners(shardId, Runnable::run, scheduler, mockLogger);\n        globalCheckpointListeners.globalCheckpointUpdated(NO_OPS_PERFORMED);\n        final int numberOfListeners = randomIntBetween(0, 16);\n        final boolean[] failures = new boolean[numberOfListeners];\n        final Exception[] exceptions = new Exception[numberOfListeners];\n        for (int i = 0; i < numberOfListeners; i++) {\n            final int index = i;\n            final boolean failure = randomBoolean();\n            failures[index] = failure;\n            globalCheckpointListeners.add(\n                    0,\n                    maybeMultipleInvocationProtectingListener((g, e) -> {\n                        if (failure) {\n                            throw new RuntimeException(\"failure\");\n                        } else {\n                            exceptions[index] = e;\n                        }\n                    }),\n                    null);\n        }\n        globalCheckpointListeners.close();\n        for (int i = 0; i < numberOfListeners; i++) {\n            if (failures[i]) {\n                assertNull(exceptions[i]);\n            } else {\n                assertNotNull(exceptions[i]);\n                assertThat(exceptions[i], instanceOf(IndexShardClosedException.class));\n                assertThat(((IndexShardClosedException)exceptions[i]).getShardId(), equalTo(shardId));\n            }\n        }\n        int failureCount = 0;\n        for (int i = 0; i < numberOfListeners; i++) {\n            if (failures[i]) {\n                failureCount++;\n            }\n        }\n        if (failureCount > 0) {\n            final ArgumentCaptor<String> message = ArgumentCaptor.forClass(String.class);\n            final ArgumentCaptor<RuntimeException> t = ArgumentCaptor.forClass(RuntimeException.class);\n            verify(mockLogger, times(failureCount)).warn(message.capture(), t.capture());\n            assertThat(message.getValue(), equalTo(\"error notifying global checkpoint listener of closed shard\"));\n            assertNotNull(t.getValue());\n            assertThat(t.getValue().getMessage(), equalTo(\"failure\"));\n        }\n    }\n","date":"2018-09-15 06:27:37","endLine":354,"groupId":"29929","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailingListenerOnClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/fa/0e0cee1435ff27d36fe695f68669cb24f6f2e9.src","preCode":"    public void testFailingListenerOnClose() throws IOException {\n        final Logger mockLogger = mock(Logger.class);\n        final GlobalCheckpointListeners globalCheckpointListeners =\n                new GlobalCheckpointListeners(shardId, Runnable::run, scheduler, mockLogger);\n        globalCheckpointListeners.globalCheckpointUpdated(NO_OPS_PERFORMED);\n        final int numberOfListeners = randomIntBetween(0, 16);\n        final boolean[] failures = new boolean[numberOfListeners];\n        final Exception[] exceptions = new Exception[numberOfListeners];\n        for (int i = 0; i < numberOfListeners; i++) {\n            final int index = i;\n            final boolean failure = randomBoolean();\n            failures[index] = failure;\n            globalCheckpointListeners.add(\n                    0,\n                    maybeMultipleInvocationProtectingListener((g, e) -> {\n                        if (failure) {\n                            throw new RuntimeException(\"failure\");\n                        } else {\n                            exceptions[index] = e;\n                        }\n                    }),\n                    null);\n        }\n        globalCheckpointListeners.close();\n        for (int i = 0; i < numberOfListeners; i++) {\n            if (failures[i]) {\n                assertNull(exceptions[i]);\n            } else {\n                assertNotNull(exceptions[i]);\n                assertThat(exceptions[i], instanceOf(IndexShardClosedException.class));\n                assertThat(((IndexShardClosedException)exceptions[i]).getShardId(), equalTo(shardId));\n            }\n        }\n        int failureCount = 0;\n        for (int i = 0; i < numberOfListeners; i++) {\n            if (failures[i]) {\n                failureCount++;\n            }\n        }\n        if (failureCount > 0) {\n            final ArgumentCaptor<String> message = ArgumentCaptor.forClass(String.class);\n            final ArgumentCaptor<RuntimeException> t = ArgumentCaptor.forClass(RuntimeException.class);\n            verify(mockLogger, times(failureCount)).warn(message.capture(), t.capture());\n            assertThat(message.getValue(), equalTo(\"error notifying global checkpoint listener of closed shard\"));\n            assertNotNull(t.getValue());\n            assertThat(t.getValue().getMessage(), equalTo(\"failure\"));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/GlobalCheckpointListenersTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"MB"}],"commitId":"e6cbaa5a78f4dfad68df84d2e1af469946e3b179","commitMessage":"@@@Merge remote-tracking branch 'origin/master' into index-lifecycle\n","date":"2018-09-15 06:27:37","modifiedFileCount":"107","status":"M","submitter":"Lee Hinman"},{"authorTime":"2020-03-09 01:48:09","codes":[{"authorDate":"2020-03-09 01:48:09","commitOrder":4,"curCode":"    public void testClose() throws IOException {\n        final GlobalCheckpointListeners globalCheckpointListeners =\n                new GlobalCheckpointListeners(shardId, scheduler, logger);\n        globalCheckpointListeners.globalCheckpointUpdated(NO_OPS_PERFORMED);\n        final int numberOfListeners = randomIntBetween(0, 16);\n        final Exception[] exceptions = new Exception[numberOfListeners];\n        for (int i = 0; i < numberOfListeners; i++) {\n            final int index = i;\n            globalCheckpointListeners.add(\n                    0, maybeMultipleInvocationProtectingListener((g, e) -> exceptions[index] = e), null);\n        }\n        globalCheckpointListeners.close();\n        for (int i = 0; i < numberOfListeners; i++) {\n            assertNotNull(exceptions[i]);\n            assertThat(exceptions[i], instanceOf(IndexShardClosedException.class));\n            assertThat(((IndexShardClosedException)exceptions[i]).getShardId(), equalTo(shardId));\n        }\n\n        \r\n        for (int i = 0; i < numberOfListeners; i++) {\n            exceptions[i] = null;\n        }\n        globalCheckpointListeners.close();\n        for (int i = 0; i < numberOfListeners; i++) {\n            assertNull(exceptions[i]);\n        }\n    }\n","date":"2020-03-09 01:48:09","endLine":245,"groupId":"102624","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/09861466f4e97e557fcda44bff7e679afe7ced.src","preCode":"    public void testClose() throws IOException {\n        final GlobalCheckpointListeners globalCheckpointListeners =\n                new GlobalCheckpointListeners(shardId, Runnable::run, scheduler, logger);\n        globalCheckpointListeners.globalCheckpointUpdated(NO_OPS_PERFORMED);\n        final int numberOfListeners = randomIntBetween(0, 16);\n        final Exception[] exceptions = new Exception[numberOfListeners];\n        for (int i = 0; i < numberOfListeners; i++) {\n            final int index = i;\n            globalCheckpointListeners.add(\n                    0, maybeMultipleInvocationProtectingListener((g, e) -> exceptions[index] = e), null);\n        }\n        globalCheckpointListeners.close();\n        for (int i = 0; i < numberOfListeners; i++) {\n            assertNotNull(exceptions[i]);\n            assertThat(exceptions[i], instanceOf(IndexShardClosedException.class));\n            assertThat(((IndexShardClosedException)exceptions[i]).getShardId(), equalTo(shardId));\n        }\n\n        \r\n        for (int i = 0; i < numberOfListeners; i++) {\n            exceptions[i] = null;\n        }\n        globalCheckpointListeners.close();\n        for (int i = 0; i < numberOfListeners; i++) {\n            assertNull(exceptions[i]);\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/GlobalCheckpointListenersTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2020-03-09 01:48:09","commitOrder":4,"curCode":"    public void testFailingListenerOnClose() throws IOException {\n        final Logger mockLogger = mock(Logger.class);\n        final GlobalCheckpointListeners globalCheckpointListeners =\n                new GlobalCheckpointListeners(shardId, scheduler, mockLogger);\n        globalCheckpointListeners.globalCheckpointUpdated(NO_OPS_PERFORMED);\n        final int numberOfListeners = randomIntBetween(0, 16);\n        final boolean[] failures = new boolean[numberOfListeners];\n        final Exception[] exceptions = new Exception[numberOfListeners];\n        for (int i = 0; i < numberOfListeners; i++) {\n            final int index = i;\n            final boolean failure = randomBoolean();\n            failures[index] = failure;\n            globalCheckpointListeners.add(\n                    0,\n                    maybeMultipleInvocationProtectingListener((g, e) -> {\n                        if (failure) {\n                            throw new RuntimeException(\"failure\");\n                        } else {\n                            exceptions[index] = e;\n                        }\n                    }),\n                    null);\n        }\n        globalCheckpointListeners.close();\n        for (int i = 0; i < numberOfListeners; i++) {\n            if (failures[i]) {\n                assertNull(exceptions[i]);\n            } else {\n                assertNotNull(exceptions[i]);\n                assertThat(exceptions[i], instanceOf(IndexShardClosedException.class));\n                assertThat(((IndexShardClosedException)exceptions[i]).getShardId(), equalTo(shardId));\n            }\n        }\n        int failureCount = 0;\n        for (int i = 0; i < numberOfListeners; i++) {\n            if (failures[i]) {\n                failureCount++;\n            }\n        }\n        if (failureCount > 0) {\n            final ArgumentCaptor<String> message = ArgumentCaptor.forClass(String.class);\n            final ArgumentCaptor<RuntimeException> t = ArgumentCaptor.forClass(RuntimeException.class);\n            verify(mockLogger, times(failureCount)).warn(message.capture(), t.capture());\n            assertThat(message.getValue(), equalTo(\"error notifying global checkpoint listener of closed shard\"));\n            assertNotNull(t.getValue());\n            assertThat(t.getValue().getMessage(), equalTo(\"failure\"));\n        }\n    }\n","date":"2020-03-09 01:48:09","endLine":366,"groupId":"102624","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailingListenerOnClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7d/09861466f4e97e557fcda44bff7e679afe7ced.src","preCode":"    public void testFailingListenerOnClose() throws IOException {\n        final Logger mockLogger = mock(Logger.class);\n        final GlobalCheckpointListeners globalCheckpointListeners =\n                new GlobalCheckpointListeners(shardId, Runnable::run, scheduler, mockLogger);\n        globalCheckpointListeners.globalCheckpointUpdated(NO_OPS_PERFORMED);\n        final int numberOfListeners = randomIntBetween(0, 16);\n        final boolean[] failures = new boolean[numberOfListeners];\n        final Exception[] exceptions = new Exception[numberOfListeners];\n        for (int i = 0; i < numberOfListeners; i++) {\n            final int index = i;\n            final boolean failure = randomBoolean();\n            failures[index] = failure;\n            globalCheckpointListeners.add(\n                    0,\n                    maybeMultipleInvocationProtectingListener((g, e) -> {\n                        if (failure) {\n                            throw new RuntimeException(\"failure\");\n                        } else {\n                            exceptions[index] = e;\n                        }\n                    }),\n                    null);\n        }\n        globalCheckpointListeners.close();\n        for (int i = 0; i < numberOfListeners; i++) {\n            if (failures[i]) {\n                assertNull(exceptions[i]);\n            } else {\n                assertNotNull(exceptions[i]);\n                assertThat(exceptions[i], instanceOf(IndexShardClosedException.class));\n                assertThat(((IndexShardClosedException)exceptions[i]).getShardId(), equalTo(shardId));\n            }\n        }\n        int failureCount = 0;\n        for (int i = 0; i < numberOfListeners; i++) {\n            if (failures[i]) {\n                failureCount++;\n            }\n        }\n        if (failureCount > 0) {\n            final ArgumentCaptor<String> message = ArgumentCaptor.forClass(String.class);\n            final ArgumentCaptor<RuntimeException> t = ArgumentCaptor.forClass(RuntimeException.class);\n            verify(mockLogger, times(failureCount)).warn(message.capture(), t.capture());\n            assertThat(message.getValue(), equalTo(\"error notifying global checkpoint listener of closed shard\"));\n            assertNotNull(t.getValue());\n            assertThat(t.getValue().getMessage(), equalTo(\"failure\"));\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/shard/GlobalCheckpointListenersTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"abdaf3ab2c5ca2968e8bfcf4dd4a5134a15627ca","commitMessage":"@@@Use given executor for global checkpoint listener (#53260)\n\nToday when notifying a global checkpoint listener.  we use the listener\nthread pool. This commit turns this inside out so that the global\ncheckpoint listener must provide an executor on which to notify the\nlistener.","date":"2020-03-09 01:48:09","modifiedFileCount":"5","status":"M","submitter":"Jason Tedor"}]
