[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-09-07 17:59:10","commitOrder":2,"curCode":"    private void testCase(Query query, WeightedAvgAggregationBuilder aggregationBuilder,\n                          CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                          Consumer<InternalWeightedAvg> verify,\n                          NumberFieldMapper.NumberType fieldNumberType) throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        try {\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(fieldNumberType);\n            fieldType.setName(\"value_field\");\n            fieldType.setHasDocValues(true);\n\n            MappedFieldType fieldType2 = new NumberFieldMapper.NumberFieldType(fieldNumberType);\n            fieldType2.setName(\"weight_field\");\n            fieldType2.setHasDocValues(true);\n\n            WeightedAvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType, fieldType2);\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            verify.accept((InternalWeightedAvg) aggregator.buildAggregation(0L));\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","date":"2018-09-07 17:59:10","endLine":430,"groupId":"4368","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCase","params":"(Queryquery@WeightedAvgAggregationBuilderaggregationBuilder@CheckedConsumer<RandomIndexWriter@IOException>buildIndex@Consumer<InternalWeightedAvg>verify@NumberFieldMapper.NumberTypefieldNumberType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/38/36f0cc2ae14402dd98b589c5915ac1c693e6d1.src","preCode":"    private void testCase(Query query, WeightedAvgAggregationBuilder aggregationBuilder,\n                          CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                          Consumer<InternalWeightedAvg> verify,\n                          NumberFieldMapper.NumberType fieldNumberType) throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        try {\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(fieldNumberType);\n            fieldType.setName(\"value_field\");\n            fieldType.setHasDocValues(true);\n\n            MappedFieldType fieldType2 = new NumberFieldMapper.NumberFieldType(fieldNumberType);\n            fieldType2.setName(\"weight_field\");\n            fieldType2.setHasDocValues(true);\n\n            WeightedAvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType, fieldType2);\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            verify.accept((InternalWeightedAvg) aggregator.buildAggregation(0L));\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/WeightedAvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":2,"curCode":"    private InternalAggregation doQuery(Query query,\n                                    CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                                    AggregationBuilder aggBuilder, MappedFieldType[] fieldType)\n            throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newIndexSearcher(indexReader);\n\n        Aggregator aggregator = createAggregator(aggBuilder, indexSearcher, fieldType);\n        try {\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            return aggregator.buildAggregation(0L);\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":1308,"groupId":"58431","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doQuery","params":"(Queryquery@CheckedConsumer<RandomIndexWriter@IOException>buildIndex@AggregationBuilderaggBuilder@MappedFieldType[]fieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7b/03d8e8d038da39589294148ccc66aee0af665c.src","preCode":"    private InternalAggregation doQuery(Query query,\n                                    CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                                    AggregationBuilder aggBuilder, MappedFieldType[] fieldType)\n            throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newIndexSearcher(indexReader);\n\n        Aggregator aggregator = createAggregator(aggBuilder, indexSearcher, fieldType);\n        try {\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            return aggregator.buildAggregation(0L);\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","realPath":"x-pack/plugin/rollup/src/test/java/org/elasticsearch/xpack/rollup/RollupResponseTranslationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1285,"status":"NB"}],"commitId":"017ffe5d127ce0fb33feb8fc4e5fededb8cbfda1","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-09-07 17:59:10","modifiedFileCount":"370","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2020-05-09 03:39:49","codes":[{"authorDate":"2018-09-07 17:59:10","commitOrder":3,"curCode":"    private void testCase(Query query, WeightedAvgAggregationBuilder aggregationBuilder,\n                          CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                          Consumer<InternalWeightedAvg> verify,\n                          NumberFieldMapper.NumberType fieldNumberType) throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        try {\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(fieldNumberType);\n            fieldType.setName(\"value_field\");\n            fieldType.setHasDocValues(true);\n\n            MappedFieldType fieldType2 = new NumberFieldMapper.NumberFieldType(fieldNumberType);\n            fieldType2.setName(\"weight_field\");\n            fieldType2.setHasDocValues(true);\n\n            WeightedAvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType, fieldType2);\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            verify.accept((InternalWeightedAvg) aggregator.buildAggregation(0L));\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","date":"2018-09-07 17:59:10","endLine":430,"groupId":"4368","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCase","params":"(Queryquery@WeightedAvgAggregationBuilderaggregationBuilder@CheckedConsumer<RandomIndexWriter@IOException>buildIndex@Consumer<InternalWeightedAvg>verify@NumberFieldMapper.NumberTypefieldNumberType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/38/36f0cc2ae14402dd98b589c5915ac1c693e6d1.src","preCode":"    private void testCase(Query query, WeightedAvgAggregationBuilder aggregationBuilder,\n                          CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                          Consumer<InternalWeightedAvg> verify,\n                          NumberFieldMapper.NumberType fieldNumberType) throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        try {\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(fieldNumberType);\n            fieldType.setName(\"value_field\");\n            fieldType.setHasDocValues(true);\n\n            MappedFieldType fieldType2 = new NumberFieldMapper.NumberFieldType(fieldNumberType);\n            fieldType2.setName(\"weight_field\");\n            fieldType2.setHasDocValues(true);\n\n            WeightedAvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType, fieldType2);\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            verify.accept((InternalWeightedAvg) aggregator.buildAggregation(0L));\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/WeightedAvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"N"},{"authorDate":"2020-05-09 03:39:49","commitOrder":3,"curCode":"    private InternalAggregation doQuery(Query query,\n                                    CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                                    AggregationBuilder aggBuilder, MappedFieldType[] fieldType)\n            throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newIndexSearcher(indexReader);\n\n        Aggregator aggregator = createAggregator(aggBuilder, indexSearcher, fieldType);\n        try {\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            return aggregator.buildTopLevel();\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","date":"2020-05-09 03:39:49","endLine":1365,"groupId":"58431","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doQuery","params":"(Queryquery@CheckedConsumer<RandomIndexWriter@IOException>buildIndex@AggregationBuilderaggBuilder@MappedFieldType[]fieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ae/93dde5d05b88e5b4f5f2525d642dd64cd9bc47.src","preCode":"    private InternalAggregation doQuery(Query query,\n                                    CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                                    AggregationBuilder aggBuilder, MappedFieldType[] fieldType)\n            throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newIndexSearcher(indexReader);\n\n        Aggregator aggregator = createAggregator(aggBuilder, indexSearcher, fieldType);\n        try {\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            return aggregator.buildAggregation(0L);\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","realPath":"x-pack/plugin/rollup/src/test/java/org/elasticsearch/xpack/rollup/RollupResponseTranslationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1342,"status":"M"}],"commitId":"0d7320499d77e57e16b1789b9d1e91e42f4638c9","commitMessage":"@@@Save memory when numeric terms agg is not top (#55873)\n\nRight now all implementations of the `terms` agg allocate a new\n`Aggregator` per bucket. This uses a bunch of memory. Exactly how much\nisn't clear but each `Aggregator` ends up making its own objects to read\ndoc values which have non-trivial buffers. And it forces all of it\nsub-aggregations to do the same. We allocate a new `Aggregator` per\nbucket for two reasons:\n\n1. We didn't have an appropriate data structure to track the\n   sub-ordinals of each parent bucket.\n2. You can only make a single call to `runDeferredCollections(long...)`\n   per `Aggregator` which was the only way to delay collection of\n   sub-aggregations.\n\nThis change switches the method that builds aggregation results from\nbuilding them one at a time to building all of the results for the\nentire aggregator at the same time.\n\nIt also adds a fairly simplistic data structure to track the sub-ordinals\nfor `long`-keyed buckets.\n\nIt uses both of those to power numeric `terms` aggregations and removes\nthe per-bucket allocation of their `Aggregator`. This fairly\nsubstantially reduces memory consumption of numeric `terms` aggregations\nthat are not the \"top level\".  especially when those aggregations contain\nmany sub-aggregations. It also is a pretty big speed up.  especially when\nthe aggregation is under a non-selective aggregation like\nthe `date_histogram`.\n\nI picked numeric `terms` aggregations because those have the simplest\nimplementation. At least.  I could kind of fit it in my head. And I\nhaven't fully understood the \"bytes\"-based terms aggregations.  but I\nimagine I'll be able to make similar optimizations to them in follow up\nchanges.\n","date":"2020-05-09 03:39:49","modifiedFileCount":"62","status":"M","submitter":"Nik Everett"},{"authorTime":"2020-05-09 03:39:49","codes":[{"authorDate":"2020-06-16 00:47:15","commitOrder":4,"curCode":"    private void testCase(Query query, WeightedAvgAggregationBuilder aggregationBuilder,\n                          CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                          Consumer<InternalWeightedAvg> verify,\n                          NumberFieldMapper.NumberType fieldNumberType) throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        try {\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value_field\", fieldNumberType);\n            MappedFieldType fieldType2 = new NumberFieldMapper.NumberFieldType(\"weight_field\", fieldNumberType);\n            WeightedAvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType, fieldType2);\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            verify.accept((InternalWeightedAvg) aggregator.buildAggregation(0L));\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","date":"2020-06-16 00:47:15","endLine":484,"groupId":"16813","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCase","params":"(Queryquery@WeightedAvgAggregationBuilderaggregationBuilder@CheckedConsumer<RandomIndexWriter@IOException>buildIndex@Consumer<InternalWeightedAvg>verify@NumberFieldMapper.NumberTypefieldNumberType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/7a/d2cecbd80412ca513cd4d350e8e8b4e7b4b082.src","preCode":"    private void testCase(Query query, WeightedAvgAggregationBuilder aggregationBuilder,\n                          CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                          Consumer<InternalWeightedAvg> verify,\n                          NumberFieldMapper.NumberType fieldNumberType) throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        try {\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(fieldNumberType);\n            fieldType.setName(\"value_field\");\n            fieldType.setHasDocValues(true);\n\n            MappedFieldType fieldType2 = new NumberFieldMapper.NumberFieldType(fieldNumberType);\n            fieldType2.setName(\"weight_field\");\n            fieldType2.setHasDocValues(true);\n\n            WeightedAvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType, fieldType2);\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            verify.accept((InternalWeightedAvg) aggregator.buildAggregation(0L));\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/WeightedAvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":460,"status":"M"},{"authorDate":"2020-05-09 03:39:49","commitOrder":4,"curCode":"    private InternalAggregation doQuery(Query query,\n                                    CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                                    AggregationBuilder aggBuilder, MappedFieldType[] fieldType)\n            throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newIndexSearcher(indexReader);\n\n        Aggregator aggregator = createAggregator(aggBuilder, indexSearcher, fieldType);\n        try {\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            return aggregator.buildTopLevel();\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","date":"2020-05-09 03:39:49","endLine":1365,"groupId":"58431","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doQuery","params":"(Queryquery@CheckedConsumer<RandomIndexWriter@IOException>buildIndex@AggregationBuilderaggBuilder@MappedFieldType[]fieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/ae/93dde5d05b88e5b4f5f2525d642dd64cd9bc47.src","preCode":"    private InternalAggregation doQuery(Query query,\n                                    CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                                    AggregationBuilder aggBuilder, MappedFieldType[] fieldType)\n            throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newIndexSearcher(indexReader);\n\n        Aggregator aggregator = createAggregator(aggBuilder, indexSearcher, fieldType);\n        try {\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            return aggregator.buildTopLevel();\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","realPath":"x-pack/plugin/rollup/src/test/java/org/elasticsearch/xpack/rollup/RollupResponseTranslationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1342,"status":"N"}],"commitId":"3b696828ada5953bb1669b972a353736383edf08","commitMessage":"@@@MappedFieldType should not extend FieldType (#57666)\n\nMappedFieldType is a combination of two concerns:\n\n* an extension of lucene's FieldType.  defining how a field should be indexed\n* a set of query factory methods.  defining how a field should be searched\n\nWe want to break these two concerns apart. This commit is a first step to doing this.  breaking\nthe inheritance relationship between MappedFieldType and FieldType. MappedFieldType \ninstead has a series of boolean flags defining whether or not the field is searchable or \naggregatable.  and FieldMapper has a separate FieldType passed to its constructor defining \nhow indexing should be done.\n\nRelates to #56814","date":"2020-06-16 00:47:15","modifiedFileCount":"257","status":"M","submitter":"Alan Woodward"},{"authorTime":"2020-10-29 05:33:27","codes":[{"authorDate":"2020-10-29 05:33:27","commitOrder":5,"curCode":"    private void testCase(Query query, WeightedAvgAggregationBuilder aggregationBuilder,\n                          CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                          Consumer<InternalWeightedAvg> verify,\n                          NumberFieldMapper.NumberType fieldNumberType) throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        try {\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value_field\", fieldNumberType);\n            MappedFieldType fieldType2 = new NumberFieldMapper.NumberFieldType(\"weight_field\", fieldNumberType);\n            WeightedAvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType, fieldType2);\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            verify.accept((InternalWeightedAvg) aggregator.buildAggregation(0L));\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","date":"2020-10-29 05:33:27","endLine":483,"groupId":"16813","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCase","params":"(Queryquery@WeightedAvgAggregationBuilderaggregationBuilder@CheckedConsumer<RandomIndexWriter@IOException>buildIndex@Consumer<InternalWeightedAvg>verify@NumberFieldMapper.NumberTypefieldNumberType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/14/42d72f2582d444e6f17e3d5a3a2eaf5c1db940.src","preCode":"    private void testCase(Query query, WeightedAvgAggregationBuilder aggregationBuilder,\n                          CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                          Consumer<InternalWeightedAvg> verify,\n                          NumberFieldMapper.NumberType fieldNumberType) throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        try {\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value_field\", fieldNumberType);\n            MappedFieldType fieldType2 = new NumberFieldMapper.NumberFieldType(\"weight_field\", fieldNumberType);\n            WeightedAvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType, fieldType2);\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            verify.accept((InternalWeightedAvg) aggregator.buildAggregation(0L));\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/WeightedAvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":460,"status":"M"},{"authorDate":"2020-10-29 05:33:27","commitOrder":5,"curCode":"    private InternalAggregation doQuery(Query query,\n                                    CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                                    AggregationBuilder aggBuilder, MappedFieldType[] fieldType)\n            throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newIndexSearcher(indexReader);\n\n        Aggregator aggregator = createAggregator(aggBuilder, indexSearcher, fieldType);\n        try {\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            return aggregator.buildTopLevel();\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","date":"2020-10-29 05:33:27","endLine":1219,"groupId":"58431","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doQuery","params":"(Queryquery@CheckedConsumer<RandomIndexWriter@IOException>buildIndex@AggregationBuilderaggBuilder@MappedFieldType[]fieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/93/87cac83912fdc35d8f6e807a1df6fa10d84392.src","preCode":"    private InternalAggregation doQuery(Query query,\n                                    CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                                    AggregationBuilder aggBuilder, MappedFieldType[] fieldType)\n            throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newIndexSearcher(indexReader);\n\n        Aggregator aggregator = createAggregator(aggBuilder, indexSearcher, fieldType);\n        try {\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            return aggregator.buildTopLevel();\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","realPath":"x-pack/plugin/rollup/src/test/java/org/elasticsearch/xpack/rollup/RollupResponseTranslationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1197,"status":"M"}],"commitId":"3af540b50dd526ee035c20d691d8ec32e8b5068a","commitMessage":"@@@Remove aggregation's postCollect phase (#64016)\n\nAfter #63811 it became clear to me that `postCollect` is kind of\ndangerous and not all that useful. So this removes it.\n\nThe trouble with `postCollect` is that it all happened right after we\nfinished calling `collect` on the `LeafBucketCollectors` but before we\nbuilt the aggregation results. But in #63811 we found out that we can't\ncall `postCollect` on the children of `parent` or `child` aggregators\nuntil we know which *which* aggregation results we're building.\n\nSo this removes `postCollect` and moves all of the things we did at\npost-collect phase into `buildAggregations` or into hooks called in\nthose methods.\n","date":"2020-10-29 05:33:27","modifiedFileCount":"41","status":"M","submitter":"Nik Everett"},{"authorTime":"2021-02-11 08:12:50","codes":[{"authorDate":"2021-02-11 08:12:50","commitOrder":6,"curCode":"    private void testCase(Query query, WeightedAvgAggregationBuilder aggregationBuilder,\n                          CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                          Consumer<InternalWeightedAvg> verify,\n                          NumberFieldMapper.NumberType fieldNumberType) throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        try {\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value_field\", fieldNumberType);\n            MappedFieldType fieldType2 = new NumberFieldMapper.NumberFieldType(\"weight_field\", fieldNumberType);\n            WeightedAvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType, fieldType2);\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            verify.accept((InternalWeightedAvg) aggregator.buildAggregation(0L));\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","date":"2021-02-11 08:12:50","endLine":473,"groupId":"105268","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCase","params":"(Queryquery@WeightedAvgAggregationBuilderaggregationBuilder@CheckedConsumer<RandomIndexWriter@IOException>buildIndex@Consumer<InternalWeightedAvg>verify@NumberFieldMapper.NumberTypefieldNumberType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/b3/f6f9cda35a2c868959cc955b8193dd0a54b520.src","preCode":"    private void testCase(Query query, WeightedAvgAggregationBuilder aggregationBuilder,\n                          CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                          Consumer<InternalWeightedAvg> verify,\n                          NumberFieldMapper.NumberType fieldNumberType) throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n        try {\n            MappedFieldType fieldType = new NumberFieldMapper.NumberFieldType(\"value_field\", fieldNumberType);\n            MappedFieldType fieldType2 = new NumberFieldMapper.NumberFieldType(\"weight_field\", fieldNumberType);\n            WeightedAvgAggregator aggregator = createAggregator(aggregationBuilder, indexSearcher, fieldType, fieldType2);\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            verify.accept((InternalWeightedAvg) aggregator.buildAggregation(0L));\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","realPath":"server/src/test/java/org/elasticsearch/search/aggregations/metrics/WeightedAvgAggregatorTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":449,"status":"M"},{"authorDate":"2021-02-11 08:12:50","commitOrder":6,"curCode":"    private InternalAggregation doQuery(Query query,\n                                    CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                                    AggregationBuilder aggBuilder, MappedFieldType[] fieldType)\n            throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newIndexSearcher(indexReader);\n\n        Aggregator aggregator = createAggregator(aggBuilder, indexSearcher, fieldType);\n        try {\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            aggregator.postCollection();\n            return aggregator.buildTopLevel();\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","date":"2021-02-11 08:12:50","endLine":1221,"groupId":"105268","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doQuery","params":"(Queryquery@CheckedConsumer<RandomIndexWriter@IOException>buildIndex@AggregationBuilderaggBuilder@MappedFieldType[]fieldType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/02/a259e77bed5e2c2e847b374aa365d01a78332f.src","preCode":"    private InternalAggregation doQuery(Query query,\n                                    CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                                    AggregationBuilder aggBuilder, MappedFieldType[] fieldType)\n            throws IOException {\n\n        Directory directory = newDirectory();\n        RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory);\n        buildIndex.accept(indexWriter);\n        indexWriter.close();\n\n        IndexReader indexReader = DirectoryReader.open(directory);\n        IndexSearcher indexSearcher = newIndexSearcher(indexReader);\n\n        Aggregator aggregator = createAggregator(aggBuilder, indexSearcher, fieldType);\n        try {\n            aggregator.preCollection();\n            indexSearcher.search(query, aggregator);\n            return aggregator.buildTopLevel();\n        } finally {\n            indexReader.close();\n            directory.close();\n        }\n    }\n","realPath":"x-pack/plugin/rollup/src/test/java/org/elasticsearch/xpack/rollup/RollupResponseTranslationTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":1198,"status":"M"}],"commitId":"0bbc6addd9b5314db9115fa4ac10211e43ba2d66","commitMessage":"@@@Revert \"Remove aggregation's postCollect phase (#68615)\n\nThis partially reverts #64016 and  and adds #67839 and adds\nadditional tests that would have caught issues with the changes\nin #64016. It's mostly Nik's code.  I am just cleaning things up\na bit.\n\nCo-authored-by: Nik Everett <nik9000@gmail.com>\n","date":"2021-02-11 08:12:50","modifiedFileCount":"40","status":"M","submitter":"Igor Motov"}]
