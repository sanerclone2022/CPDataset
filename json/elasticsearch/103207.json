[{"authorTime":"2020-07-02 18:25:49","codes":[{"authorDate":"2020-07-02 18:25:49","commitOrder":4,"curCode":"    public void testMultipleLevelsIncludeRoot2() throws Exception {\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n            .startObject().startObject(MapperService.SINGLE_MAPPING_NAME)\n            .startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\")\n            .field(\"include_in_root\", true).field(\"include_in_parent\", true).startObject(\"properties\")\n            .startObject(\"nested2\").field(\"type\", \"nested\")\n            .field(\"include_in_root\", true).field(\"include_in_parent\", false).startObject(\"properties\")\n            .startObject(\"nested3\").field(\"type\", \"nested\")\n            .field(\"include_in_root\", true).field(\"include_in_parent\", true)\n            .endObject().endObject().endObject().endObject().endObject()\n            .endObject().endObject().endObject());\n        MergeReason mergeReason = randomFrom(MergeReason.MAPPING_UPDATE, MergeReason.INDEX_TEMPLATE);\n\n        mapperService.merge(MapperService.SINGLE_MAPPING_NAME, new CompressedXContent(mapping), mergeReason);\n        DocumentMapper docMapper = mapperService.documentMapper();\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject().startArray(\"nested1\")\n                        .startObject().startArray(\"nested2\")\n                        .startObject().startArray(\"nested3\").startObject().field(\"foo\", \"bar\")\n                        .endObject().endArray().endObject().endArray().endObject().endArray()\n                        .endObject()),\n            XContentType.JSON));\n\n        final Collection<IndexableField> fields = doc.rootDoc().getFields();\n        assertThat(fields.size(), equalTo(new HashSet<>(fields).size()));\n    }\n","date":"2020-07-02 18:25:49","endLine":454,"groupId":"17324","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleLevelsIncludeRoot2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/5d5876b7b6c9d9c88b997bcd1df4e598c0aca5.src","preCode":"    public void testMultipleLevelsIncludeRoot2() throws Exception {\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n            .startObject().startObject(MapperService.SINGLE_MAPPING_NAME)\n            .startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\")\n            .field(\"include_in_root\", true).field(\"include_in_parent\", true).startObject(\"properties\")\n            .startObject(\"nested2\").field(\"type\", \"nested\")\n            .field(\"include_in_root\", true).field(\"include_in_parent\", false).startObject(\"properties\")\n            .startObject(\"nested3\").field(\"type\", \"nested\")\n            .field(\"include_in_root\", true).field(\"include_in_parent\", true)\n            .endObject().endObject().endObject().endObject().endObject()\n            .endObject().endObject().endObject());\n        MergeReason mergeReason = randomFrom(MergeReason.MAPPING_UPDATE, MergeReason.INDEX_TEMPLATE);\n\n        mapperService.merge(MapperService.SINGLE_MAPPING_NAME, new CompressedXContent(mapping), mergeReason);\n        DocumentMapper docMapper = mapperService.documentMapper();\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject().startArray(\"nested1\")\n                        .startObject().startArray(\"nested2\")\n                        .startObject().startArray(\"nested3\").startObject().field(\"foo\", \"bar\")\n                        .endObject().endArray().endObject().endArray().endObject().endArray()\n                        .endObject()),\n            XContentType.JSON));\n\n        final Collection<IndexableField> fields = doc.rootDoc().getFields();\n        assertThat(fields.size(), equalTo(new HashSet<>(fields).size()));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":424,"status":"MB"},{"authorDate":"2020-07-02 18:25:49","commitOrder":4,"curCode":"    public void testMultipleLevelsIncludeRootWithMerge() throws Exception {\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        String firstMapping = Strings.toString(XContentFactory.jsonBuilder().startObject()\n            .startObject(MapperService.SINGLE_MAPPING_NAME)\n                .startObject(\"properties\")\n                    .startObject(\"nested1\")\n                        .field(\"type\", \"nested\")\n                        .field(\"include_in_root\", true)\n                        .startObject(\"properties\")\n                            .startObject(\"nested2\")\n                                .field(\"type\", \"nested\")\n                                .field(\"include_in_root\", true)\n                                .field(\"include_in_parent\", true)\n                            .endObject()\n                        .endObject()\n                    .endObject()\n                .endObject()\n            .endObject()\n        .endObject());\n        mapperService.merge(MapperService.SINGLE_MAPPING_NAME, new CompressedXContent(firstMapping), MergeReason.INDEX_TEMPLATE);\n\n        String secondMapping = Strings.toString(XContentFactory.jsonBuilder().startObject()\n            .startObject(MapperService.SINGLE_MAPPING_NAME)\n                .startObject(\"properties\")\n                    .startObject(\"nested1\")\n                        .field(\"type\", \"nested\")\n                        .field(\"include_in_root\", true)\n                        .field(\"include_in_parent\", true)\n                        .startObject(\"properties\")\n                            .startObject(\"nested2\")\n                                .field(\"type\", \"nested\")\n                                .field(\"include_in_root\", true)\n                            .endObject()\n                        .endObject()\n                    .endObject()\n                .endObject()\n            .endObject()\n        .endObject());\n\n        mapperService.merge(MapperService.SINGLE_MAPPING_NAME, new CompressedXContent(secondMapping), MergeReason.INDEX_TEMPLATE);\n        DocumentMapper docMapper = mapperService.documentMapper();\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject().startArray(\"nested1\")\n                .startObject().startArray(\"nested2\").startObject().field(\"foo\", \"bar\")\n                .endObject().endArray().endObject().endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        final Collection<IndexableField> fields = doc.rootDoc().getFields();\n        assertThat(fields.size(), equalTo(new HashSet<>(fields).size()));\n    }\n","date":"2020-07-02 18:25:49","endLine":514,"groupId":"32349","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleLevelsIncludeRootWithMerge","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/3f/5d5876b7b6c9d9c88b997bcd1df4e598c0aca5.src","preCode":"    public void testMultipleLevelsIncludeRootWithMerge() throws Exception {\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        String firstMapping = Strings.toString(XContentFactory.jsonBuilder().startObject()\n            .startObject(MapperService.SINGLE_MAPPING_NAME)\n                .startObject(\"properties\")\n                    .startObject(\"nested1\")\n                        .field(\"type\", \"nested\")\n                        .field(\"include_in_root\", true)\n                        .startObject(\"properties\")\n                            .startObject(\"nested2\")\n                                .field(\"type\", \"nested\")\n                                .field(\"include_in_root\", true)\n                                .field(\"include_in_parent\", true)\n                            .endObject()\n                        .endObject()\n                    .endObject()\n                .endObject()\n            .endObject()\n        .endObject());\n        mapperService.merge(MapperService.SINGLE_MAPPING_NAME, new CompressedXContent(firstMapping), MergeReason.INDEX_TEMPLATE);\n\n        String secondMapping = Strings.toString(XContentFactory.jsonBuilder().startObject()\n            .startObject(MapperService.SINGLE_MAPPING_NAME)\n                .startObject(\"properties\")\n                    .startObject(\"nested1\")\n                        .field(\"type\", \"nested\")\n                        .field(\"include_in_root\", true)\n                        .field(\"include_in_parent\", true)\n                        .startObject(\"properties\")\n                            .startObject(\"nested2\")\n                                .field(\"type\", \"nested\")\n                                .field(\"include_in_root\", true)\n                            .endObject()\n                        .endObject()\n                    .endObject()\n                .endObject()\n            .endObject()\n        .endObject());\n\n        mapperService.merge(MapperService.SINGLE_MAPPING_NAME, new CompressedXContent(secondMapping), MergeReason.INDEX_TEMPLATE);\n        DocumentMapper docMapper = mapperService.documentMapper();\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject().startArray(\"nested1\")\n                .startObject().startArray(\"nested2\").startObject().field(\"foo\", \"bar\")\n                .endObject().endArray().endObject().endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        final Collection<IndexableField> fields = doc.rootDoc().getFields();\n        assertThat(fields.size(), equalTo(new HashSet<>(fields).size()));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"B"}],"commitId":"59fc3d74d58c390828267569022ac177e77ffbd1","commitMessage":"@@@Merge branch 'master' into feature/runtime_fields\n","date":"2020-07-02 18:25:49","modifiedFileCount":"724","status":"M","submitter":"Luca Cavanna"},{"authorTime":"2020-11-05 01:48:32","codes":[{"authorDate":"2020-11-05 01:48:32","commitOrder":5,"curCode":"    public void testMultipleLevelsIncludeRoot2() throws Exception {\n        MapperService mapperService = createMapperService(mapping(b -> {\n        }));\n\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n            .startObject().startObject(MapperService.SINGLE_MAPPING_NAME)\n            .startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\")\n            .field(\"include_in_root\", true).field(\"include_in_parent\", true).startObject(\"properties\")\n            .startObject(\"nested2\").field(\"type\", \"nested\")\n            .field(\"include_in_root\", true).field(\"include_in_parent\", false).startObject(\"properties\")\n            .startObject(\"nested3\").field(\"type\", \"nested\")\n            .field(\"include_in_root\", true).field(\"include_in_parent\", true)\n            .endObject().endObject().endObject().endObject().endObject()\n            .endObject().endObject().endObject());\n        MergeReason mergeReason = randomFrom(MergeReason.MAPPING_UPDATE, MergeReason.INDEX_TEMPLATE);\n\n        mapperService.merge(MapperService.SINGLE_MAPPING_NAME, new CompressedXContent(mapping), mergeReason);\n        DocumentMapper docMapper = mapperService.documentMapper();\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject().startArray(\"nested1\")\n                .startObject().startArray(\"nested2\")\n                .startObject().startArray(\"nested3\").startObject().field(\"foo\", \"bar\")\n                .endObject().endArray().endObject().endArray().endObject().endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        final Collection<IndexableField> fields = doc.rootDoc().getFields();\n        assertThat(fields.size(), equalTo(new HashSet<>(fields).size()));\n    }\n","date":"2020-11-05 01:48:32","endLine":460,"groupId":"103207","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultipleLevelsIncludeRoot2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/12854ac2f3c60c3eb17d8e7a1c23d5361d3ca3.src","preCode":"    public void testMultipleLevelsIncludeRoot2() throws Exception {\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        String mapping = Strings.toString(XContentFactory.jsonBuilder()\n            .startObject().startObject(MapperService.SINGLE_MAPPING_NAME)\n            .startObject(\"properties\")\n            .startObject(\"nested1\").field(\"type\", \"nested\")\n            .field(\"include_in_root\", true).field(\"include_in_parent\", true).startObject(\"properties\")\n            .startObject(\"nested2\").field(\"type\", \"nested\")\n            .field(\"include_in_root\", true).field(\"include_in_parent\", false).startObject(\"properties\")\n            .startObject(\"nested3\").field(\"type\", \"nested\")\n            .field(\"include_in_root\", true).field(\"include_in_parent\", true)\n            .endObject().endObject().endObject().endObject().endObject()\n            .endObject().endObject().endObject());\n        MergeReason mergeReason = randomFrom(MergeReason.MAPPING_UPDATE, MergeReason.INDEX_TEMPLATE);\n\n        mapperService.merge(MapperService.SINGLE_MAPPING_NAME, new CompressedXContent(mapping), mergeReason);\n        DocumentMapper docMapper = mapperService.documentMapper();\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                        .startObject().startArray(\"nested1\")\n                        .startObject().startArray(\"nested2\")\n                        .startObject().startArray(\"nested3\").startObject().field(\"foo\", \"bar\")\n                        .endObject().endArray().endObject().endArray().endObject().endArray()\n                        .endObject()),\n            XContentType.JSON));\n\n        final Collection<IndexableField> fields = doc.rootDoc().getFields();\n        assertThat(fields.size(), equalTo(new HashSet<>(fields).size()));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"M"},{"authorDate":"2020-11-05 01:48:32","commitOrder":5,"curCode":"    public void testMultipleLevelsIncludeRootWithMerge() throws Exception {\n        MapperService mapperService = createMapperService(mapping(b -> {\n        }));\n\n        String firstMapping = Strings.toString(XContentFactory.jsonBuilder().startObject()\n            .startObject(MapperService.SINGLE_MAPPING_NAME)\n            .startObject(\"properties\")\n                .startObject(\"nested1\")\n                    .field(\"type\", \"nested\")\n                    .field(\"include_in_root\", true)\n                    .startObject(\"properties\")\n                        .startObject(\"nested2\")\n                            .field(\"type\", \"nested\")\n                            .field(\"include_in_root\", true)\n                            .field(\"include_in_parent\", true)\n                        .endObject()\n                    .endObject()\n                .endObject()\n            .endObject()\n            .endObject()\n            .endObject());\n        mapperService.merge(MapperService.SINGLE_MAPPING_NAME, new CompressedXContent(firstMapping), MergeReason.INDEX_TEMPLATE);\n\n        String secondMapping = Strings.toString(XContentFactory.jsonBuilder().startObject()\n            .startObject(MapperService.SINGLE_MAPPING_NAME)\n            .startObject(\"properties\")\n                .startObject(\"nested1\")\n                    .field(\"type\", \"nested\")\n                    .field(\"include_in_root\", true)\n                    .field(\"include_in_parent\", true)\n                    .startObject(\"properties\")\n                        .startObject(\"nested2\")\n                            .field(\"type\", \"nested\")\n                            .field(\"include_in_root\", true)\n                        .endObject()\n                    .endObject()\n                .endObject()\n            .endObject()\n            .endObject()\n            .endObject());\n\n        mapperService.merge(MapperService.SINGLE_MAPPING_NAME, new CompressedXContent(secondMapping), MergeReason.INDEX_TEMPLATE);\n        DocumentMapper docMapper = mapperService.documentMapper();\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject().startArray(\"nested1\")\n                .startObject().startArray(\"nested2\").startObject().field(\"foo\", \"bar\")\n                .endObject().endArray().endObject().endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        final Collection<IndexableField> fields = doc.rootDoc().getFields();\n        assertThat(fields.size(), equalTo(new HashSet<>(fields).size()));\n    }\n","date":"2020-11-05 01:48:32","endLine":521,"groupId":"103207","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultipleLevelsIncludeRootWithMerge","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/52/12854ac2f3c60c3eb17d8e7a1c23d5361d3ca3.src","preCode":"    public void testMultipleLevelsIncludeRootWithMerge() throws Exception {\n        MapperService mapperService = createIndex(\"test\").mapperService();\n\n        String firstMapping = Strings.toString(XContentFactory.jsonBuilder().startObject()\n            .startObject(MapperService.SINGLE_MAPPING_NAME)\n                .startObject(\"properties\")\n                    .startObject(\"nested1\")\n                        .field(\"type\", \"nested\")\n                        .field(\"include_in_root\", true)\n                        .startObject(\"properties\")\n                            .startObject(\"nested2\")\n                                .field(\"type\", \"nested\")\n                                .field(\"include_in_root\", true)\n                                .field(\"include_in_parent\", true)\n                            .endObject()\n                        .endObject()\n                    .endObject()\n                .endObject()\n            .endObject()\n        .endObject());\n        mapperService.merge(MapperService.SINGLE_MAPPING_NAME, new CompressedXContent(firstMapping), MergeReason.INDEX_TEMPLATE);\n\n        String secondMapping = Strings.toString(XContentFactory.jsonBuilder().startObject()\n            .startObject(MapperService.SINGLE_MAPPING_NAME)\n                .startObject(\"properties\")\n                    .startObject(\"nested1\")\n                        .field(\"type\", \"nested\")\n                        .field(\"include_in_root\", true)\n                        .field(\"include_in_parent\", true)\n                        .startObject(\"properties\")\n                            .startObject(\"nested2\")\n                                .field(\"type\", \"nested\")\n                                .field(\"include_in_root\", true)\n                            .endObject()\n                        .endObject()\n                    .endObject()\n                .endObject()\n            .endObject()\n        .endObject());\n\n        mapperService.merge(MapperService.SINGLE_MAPPING_NAME, new CompressedXContent(secondMapping), MergeReason.INDEX_TEMPLATE);\n        DocumentMapper docMapper = mapperService.documentMapper();\n\n        ParsedDocument doc = docMapper.parse(new SourceToParse(\"test\", \"1\",\n            BytesReference.bytes(XContentFactory.jsonBuilder()\n                .startObject().startArray(\"nested1\")\n                .startObject().startArray(\"nested2\").startObject().field(\"foo\", \"bar\")\n                .endObject().endArray().endObject().endArray()\n                .endObject()),\n            XContentType.JSON));\n\n        final Collection<IndexableField> fields = doc.rootDoc().getFields();\n        assertThat(fields.size(), equalTo(new HashSet<>(fields).size()));\n    }\n","realPath":"server/src/test/java/org/elasticsearch/index/mapper/NestedObjectMapperTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":467,"status":"M"}],"commitId":"63b96c0d7ce90d78eace02e507ca8b52321acb68","commitMessage":"@@@Convert some object mapper testcases to use MapperServiceTestCase (#64543)\n\n","date":"2020-11-05 01:48:32","modifiedFileCount":"3","status":"M","submitter":"Alan Woodward"}]
