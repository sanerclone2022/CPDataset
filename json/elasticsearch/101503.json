[{"authorTime":"2018-04-26 03:22:53","codes":[{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testWhiteListingRepoURL() throws IOException {\n        String repoPath = createTempDir().resolve(\"repository\").toUri().toURL().toString();\n        Settings baseSettings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(URLRepository.ALLOWED_URLS_SETTING.getKey(), repoPath)\n            .put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath)\n            .build();\n        RepositoryMetaData repositoryMetaData = new RepositoryMetaData(\"url\", URLRepository.TYPE, baseSettings);\n        new URLRepository(repositoryMetaData, TestEnvironment.newEnvironment(baseSettings),\n            new NamedXContentRegistry(Collections.emptyList()));\n    }\n","date":"2018-04-26 03:22:53","endLine":46,"groupId":"36597","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWhiteListingRepoURL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/f4c1eaba9ad1219d0e18349626a19fee0cc927.src","preCode":"    public void testWhiteListingRepoURL() throws IOException {\n        String repoPath = createTempDir().resolve(\"repository\").toUri().toURL().toString();\n        Settings baseSettings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(URLRepository.ALLOWED_URLS_SETTING.getKey(), repoPath)\n            .put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath)\n            .build();\n        RepositoryMetaData repositoryMetaData = new RepositoryMetaData(\"url\", URLRepository.TYPE, baseSettings);\n        new URLRepository(repositoryMetaData, TestEnvironment.newEnvironment(baseSettings),\n            new NamedXContentRegistry(Collections.emptyList()));\n    }\n","realPath":"modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLRepositoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"},{"authorDate":"2018-04-26 03:22:53","commitOrder":1,"curCode":"    public void testIfNotWhiteListedMustSetRepoURL() throws IOException {\n        String repoPath = createTempDir().resolve(\"repository\").toUri().toURL().toString();\n        Settings baseSettings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath)\n            .build();\n        RepositoryMetaData repositoryMetaData = new RepositoryMetaData(\"url\", URLRepository.TYPE, baseSettings);\n        try {\n            new URLRepository(repositoryMetaData, TestEnvironment.newEnvironment(baseSettings),\n                new NamedXContentRegistry(Collections.emptyList()));\n            fail(\"RepositoryException should have been thrown.\");\n        } catch (RepositoryException e) {\n            String msg = \"[url] file url [\" + repoPath\n                + \"] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls\";\n            assertEquals(msg, e.getMessage());\n        }\n    }\n","date":"2018-04-26 03:22:53","endLine":64,"groupId":"52507","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIfNotWhiteListedMustSetRepoURL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/1a/f4c1eaba9ad1219d0e18349626a19fee0cc927.src","preCode":"    public void testIfNotWhiteListedMustSetRepoURL() throws IOException {\n        String repoPath = createTempDir().resolve(\"repository\").toUri().toURL().toString();\n        Settings baseSettings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath)\n            .build();\n        RepositoryMetaData repositoryMetaData = new RepositoryMetaData(\"url\", URLRepository.TYPE, baseSettings);\n        try {\n            new URLRepository(repositoryMetaData, TestEnvironment.newEnvironment(baseSettings),\n                new NamedXContentRegistry(Collections.emptyList()));\n            fail(\"RepositoryException should have been thrown.\");\n        } catch (RepositoryException e) {\n            String msg = \"[url] file url [\" + repoPath\n                + \"] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls\";\n            assertEquals(msg, e.getMessage());\n        }\n    }\n","realPath":"modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLRepositoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"d74fb9eb4559077e2d20b19a9ed62d9ff825027a","commitMessage":"@@@Opened x-pack ILM code\n","date":"2018-04-26 03:22:53","modifiedFileCount":"0","status":"B","submitter":"Tal Levy"},{"authorTime":"2018-07-16 16:30:07","codes":[{"authorDate":"2018-07-16 16:30:07","commitOrder":2,"curCode":"    public void testWhiteListingRepoURL() throws IOException {\n        String repoPath = createTempDir().resolve(\"repository\").toUri().toURL().toString();\n        Settings baseSettings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(URLRepository.ALLOWED_URLS_SETTING.getKey(), repoPath)\n            .put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath)\n            .build();\n        RepositoryMetaData repositoryMetaData = new RepositoryMetaData(\"url\", URLRepository.TYPE, baseSettings);\n        final URLRepository repository = createRepository(baseSettings, repositoryMetaData);\n        repository.start();\n\n        assertThat(\"blob store has to be lazy initialized\", repository.getBlobStore(), is(nullValue()));\n        repository.blobContainer();\n        assertThat(\"blobContainer has to initialize blob store\", repository.getBlobStore(), not(nullValue()));\n    }\n","date":"2018-07-16 16:30:07","endLine":64,"groupId":"36597","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWhiteListingRepoURL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2d/e4c132673dba4380e9d5f394a64a0a30d52ac3.src","preCode":"    public void testWhiteListingRepoURL() throws IOException {\n        String repoPath = createTempDir().resolve(\"repository\").toUri().toURL().toString();\n        Settings baseSettings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(URLRepository.ALLOWED_URLS_SETTING.getKey(), repoPath)\n            .put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath)\n            .build();\n        RepositoryMetaData repositoryMetaData = new RepositoryMetaData(\"url\", URLRepository.TYPE, baseSettings);\n        new URLRepository(repositoryMetaData, TestEnvironment.newEnvironment(baseSettings),\n            new NamedXContentRegistry(Collections.emptyList()));\n    }\n","realPath":"modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLRepositoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2018-07-16 16:30:07","commitOrder":2,"curCode":"    public void testIfNotWhiteListedMustSetRepoURL() throws IOException {\n        String repoPath = createTempDir().resolve(\"repository\").toUri().toURL().toString();\n        Settings baseSettings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath)\n            .build();\n        RepositoryMetaData repositoryMetaData = new RepositoryMetaData(\"url\", URLRepository.TYPE, baseSettings);\n        final URLRepository repository = createRepository(baseSettings, repositoryMetaData);\n        repository.start();\n        try {\n            repository.blobContainer();\n            fail(\"RepositoryException should have been thrown.\");\n        } catch (RepositoryException e) {\n            String msg = \"[url] file url [\" + repoPath\n                + \"] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls\";\n            assertEquals(msg, e.getMessage());\n        }\n    }\n","date":"2018-07-16 16:30:07","endLine":83,"groupId":"52507","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIfNotWhiteListedMustSetRepoURL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2d/e4c132673dba4380e9d5f394a64a0a30d52ac3.src","preCode":"    public void testIfNotWhiteListedMustSetRepoURL() throws IOException {\n        String repoPath = createTempDir().resolve(\"repository\").toUri().toURL().toString();\n        Settings baseSettings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath)\n            .build();\n        RepositoryMetaData repositoryMetaData = new RepositoryMetaData(\"url\", URLRepository.TYPE, baseSettings);\n        try {\n            new URLRepository(repositoryMetaData, TestEnvironment.newEnvironment(baseSettings),\n                new NamedXContentRegistry(Collections.emptyList()));\n            fail(\"RepositoryException should have been thrown.\");\n        } catch (RepositoryException e) {\n            String msg = \"[url] file url [\" + repoPath\n                + \"] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls\";\n            assertEquals(msg, e.getMessage());\n        }\n    }\n","realPath":"modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLRepositoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"5d3a53843a21098de3d1a342482db555eb660976","commitMessage":"@@@Merge branch 'master' into index-lifecycle\n","date":"2018-07-16 16:30:07","modifiedFileCount":"183","status":"M","submitter":"Colin Goodheart-Smithe"},{"authorTime":"2020-04-01 03:52:01","codes":[{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testWhiteListingRepoURL() throws IOException {\n        String repoPath = createTempDir().resolve(\"repository\").toUri().toURL().toString();\n        Settings baseSettings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(URLRepository.ALLOWED_URLS_SETTING.getKey(), repoPath)\n            .put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath)\n            .build();\n        RepositoryMetadata repositoryMetadata = new RepositoryMetadata(\"url\", URLRepository.TYPE, baseSettings);\n        final URLRepository repository = createRepository(baseSettings, repositoryMetadata);\n        repository.start();\n\n        assertThat(\"blob store has to be lazy initialized\", repository.getBlobStore(), is(nullValue()));\n        repository.blobContainer();\n        assertThat(\"blobContainer has to initialize blob store\", repository.getBlobStore(), not(nullValue()));\n    }\n","date":"2020-04-01 03:52:01","endLine":65,"groupId":"101503","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWhiteListingRepoURL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/fe0bd042dc6d2856371d33ca768b2b26a11ae3.src","preCode":"    public void testWhiteListingRepoURL() throws IOException {\n        String repoPath = createTempDir().resolve(\"repository\").toUri().toURL().toString();\n        Settings baseSettings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(URLRepository.ALLOWED_URLS_SETTING.getKey(), repoPath)\n            .put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath)\n            .build();\n        RepositoryMetaData repositoryMetaData = new RepositoryMetaData(\"url\", URLRepository.TYPE, baseSettings);\n        final URLRepository repository = createRepository(baseSettings, repositoryMetaData);\n        repository.start();\n\n        assertThat(\"blob store has to be lazy initialized\", repository.getBlobStore(), is(nullValue()));\n        repository.blobContainer();\n        assertThat(\"blobContainer has to initialize blob store\", repository.getBlobStore(), not(nullValue()));\n    }\n","realPath":"modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLRepositoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-04-01 03:52:01","commitOrder":3,"curCode":"    public void testIfNotWhiteListedMustSetRepoURL() throws IOException {\n        String repoPath = createTempDir().resolve(\"repository\").toUri().toURL().toString();\n        Settings baseSettings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath)\n            .build();\n        RepositoryMetadata repositoryMetadata = new RepositoryMetadata(\"url\", URLRepository.TYPE, baseSettings);\n        final URLRepository repository = createRepository(baseSettings, repositoryMetadata);\n        repository.start();\n        try {\n            repository.blobContainer();\n            fail(\"RepositoryException should have been thrown.\");\n        } catch (RepositoryException e) {\n            String msg = \"[url] file url [\" + repoPath\n                + \"] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls\";\n            assertEquals(msg, e.getMessage());\n        }\n    }\n","date":"2020-04-01 03:52:01","endLine":84,"groupId":"101503","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIfNotWhiteListedMustSetRepoURL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-elasticsearch-10-0.7/blobInfo/CC_OUT/blobs/2f/fe0bd042dc6d2856371d33ca768b2b26a11ae3.src","preCode":"    public void testIfNotWhiteListedMustSetRepoURL() throws IOException {\n        String repoPath = createTempDir().resolve(\"repository\").toUri().toURL().toString();\n        Settings baseSettings = Settings.builder()\n            .put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())\n            .put(URLRepository.REPOSITORIES_URL_SETTING.getKey(), repoPath)\n            .build();\n        RepositoryMetaData repositoryMetaData = new RepositoryMetaData(\"url\", URLRepository.TYPE, baseSettings);\n        final URLRepository repository = createRepository(baseSettings, repositoryMetaData);\n        repository.start();\n        try {\n            repository.blobContainer();\n            fail(\"RepositoryException should have been thrown.\");\n        } catch (RepositoryException e) {\n            String msg = \"[url] file url [\" + repoPath\n                + \"] doesn't match any of the locations specified by path.repo or repositories.url.allowed_urls\";\n            assertEquals(msg, e.getMessage());\n        }\n    }\n","realPath":"modules/repository-url/src/test/java/org/elasticsearch/repositories/url/URLRepositoryTests.java","repoName":"elasticsearch","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"95a7eed9aa35f47b228e402508709b5bd6703cf4","commitMessage":"@@@Rename MetaData to Metadata in all of the places (#54519)\n\nThis is a simple naming change PR.  to fix the fact that \"metadata\" is a\nsingle English word.  and for too long we have not followed general\nnaming conventions for it. We are also not consistent about it.  for\nexample.  METADATA instead of META_DATA if we were trying to be\nconsistent with MetaData (although METADATA is correct when considered\nin the context of \"metadata\"). This was a simple find and replace across\nthe code base.  only taking a few minutes to fix this naming issue\nforever.","date":"2020-04-01 03:52:01","modifiedFileCount":"1712","status":"M","submitter":"Jason Tedor"}]
